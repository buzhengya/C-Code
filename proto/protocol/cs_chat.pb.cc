// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* chat_system_info_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_system_info_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_world_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_world_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_world_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_world_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_team_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_team_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_team_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_team_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_family_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_family_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_family_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_family_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_private_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_private_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_private_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_private_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_world_channel_change_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_world_channel_change_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_world_channel_change_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_world_channel_change_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_world_channel_random_nft_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_world_channel_random_nft_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_broadcast_all_area_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_broadcast_all_area_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_broadcast_all_area_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_broadcast_all_area_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_broadcast_all_area_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_broadcast_all_area_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_pack_ntf_world_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_pack_ntf_world_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_pack_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_pack_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* marquee_all_type_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  marquee_all_type_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* marquee_common_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  marquee_common_reflection_ = NULL;
const ::google::protobuf::Descriptor* marquee_flower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  marquee_flower_reflection_ = NULL;
const ::google::protobuf::Descriptor* marquee_debug_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  marquee_debug_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* barrage_get_cs_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  barrage_get_cs_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* barrage_get_cs_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  barrage_get_cs_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* barrage_send_cs_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  barrage_send_cs_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* barrage_send_cs_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  barrage_send_cs_ack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EChatDefine_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eMarqueeSystemType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5fchat_2eproto() {
  protobuf_AddDesc_cs_5fchat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_chat.proto");
  GOOGLE_CHECK(file != NULL);
  chat_system_info_ntf_descriptor_ = file->message_type(0);
  static const int chat_system_info_ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_system_info_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_system_info_ntf, info_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_system_info_ntf, info_priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_system_info_ntf, content_),
  };
  chat_system_info_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_system_info_ntf_descriptor_,
      chat_system_info_ntf::default_instance_,
      chat_system_info_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_system_info_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_system_info_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_system_info_ntf));
  chat_world_req_descriptor_ = file->message_type(1);
  static const int chat_world_req_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_req, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_req, role_avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_req, world_channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_req, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_req, gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_req, avatar_box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_req, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_req, officer_grade_),
  };
  chat_world_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_world_req_descriptor_,
      chat_world_req::default_instance_,
      chat_world_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_world_req));
  chat_world_ntf_descriptor_ = file->message_type(2);
  static const int chat_world_ntf_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_ntf, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_ntf, role_avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_ntf, world_channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_ntf, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_ntf, gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_ntf, avatar_box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_ntf, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_ntf, officer_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_ntf, world_chat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_ntf, event_data_),
  };
  chat_world_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_world_ntf_descriptor_,
      chat_world_ntf::default_instance_,
      chat_world_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_world_ntf));
  chat_team_req_descriptor_ = file->message_type(3);
  static const int chat_team_req_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_req, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_req, role_avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_req, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_req, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_req, gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_req, avatar_box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_req, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_req, officer_grade_),
  };
  chat_team_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_team_req_descriptor_,
      chat_team_req::default_instance_,
      chat_team_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_team_req));
  chat_team_ntf_descriptor_ = file->message_type(4);
  static const int chat_team_ntf_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_ntf, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_ntf, role_avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_ntf, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_ntf, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_ntf, gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_ntf, avatar_box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_ntf, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_ntf, officer_grade_),
  };
  chat_team_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_team_ntf_descriptor_,
      chat_team_ntf::default_instance_,
      chat_team_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_team_ntf));
  chat_family_req_descriptor_ = file->message_type(5);
  static const int chat_family_req_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_req, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_req, role_avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_req, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_req, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_req, gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_req, avatar_box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_req, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_req, officer_grade_),
  };
  chat_family_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_family_req_descriptor_,
      chat_family_req::default_instance_,
      chat_family_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_family_req));
  chat_family_ntf_descriptor_ = file->message_type(6);
  static const int chat_family_ntf_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_ntf, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_ntf, role_avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_ntf, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_ntf, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_ntf, gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_ntf, avatar_box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_ntf, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_ntf, officer_grade_),
  };
  chat_family_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_family_ntf_descriptor_,
      chat_family_ntf::default_instance_,
      chat_family_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_family_ntf));
  chat_private_req_descriptor_ = file->message_type(7);
  static const int chat_private_req_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_req, to_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_req, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_req, role_avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_req, from_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_req, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_req, gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_req, avatar_box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_req, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_req, officer_grade_),
  };
  chat_private_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_private_req_descriptor_,
      chat_private_req::default_instance_,
      chat_private_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_private_req));
  chat_private_ntf_descriptor_ = file->message_type(8);
  static const int chat_private_ntf_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_ntf, to_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_ntf, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_ntf, role_avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_ntf, from_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_ntf, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_ntf, gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_ntf, avatar_box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_ntf, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_ntf, officer_grade_),
  };
  chat_private_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_private_ntf_descriptor_,
      chat_private_ntf::default_instance_,
      chat_private_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_private_ntf));
  chat_world_channel_change_req_descriptor_ = file->message_type(9);
  static const int chat_world_channel_change_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_change_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_change_req, to_new_channel_),
  };
  chat_world_channel_change_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_world_channel_change_req_descriptor_,
      chat_world_channel_change_req::default_instance_,
      chat_world_channel_change_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_change_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_change_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_world_channel_change_req));
  chat_world_channel_change_ack_descriptor_ = file->message_type(10);
  static const int chat_world_channel_change_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_change_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_change_ack, rec_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_change_ack, new_channel_),
  };
  chat_world_channel_change_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_world_channel_change_ack_descriptor_,
      chat_world_channel_change_ack::default_instance_,
      chat_world_channel_change_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_change_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_change_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_world_channel_change_ack));
  chat_world_channel_random_nft_descriptor_ = file->message_type(11);
  static const int chat_world_channel_random_nft_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_random_nft, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_random_nft, channel_),
  };
  chat_world_channel_random_nft_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_world_channel_random_nft_descriptor_,
      chat_world_channel_random_nft::default_instance_,
      chat_world_channel_random_nft_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_random_nft, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_random_nft, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_world_channel_random_nft));
  chat_broadcast_all_area_req_descriptor_ = file->message_type(12);
  static const int chat_broadcast_all_area_req_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_req, to_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_req, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_req, role_avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_req, from_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_req, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_req, gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_req, avatar_box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_req, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_req, officer_grade_),
  };
  chat_broadcast_all_area_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_broadcast_all_area_req_descriptor_,
      chat_broadcast_all_area_req::default_instance_,
      chat_broadcast_all_area_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_broadcast_all_area_req));
  chat_broadcast_all_area_ack_descriptor_ = file->message_type(13);
  static const int chat_broadcast_all_area_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_ack, rec_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_ack, succeed_areas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_ack, failed_areas_),
  };
  chat_broadcast_all_area_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_broadcast_all_area_ack_descriptor_,
      chat_broadcast_all_area_ack::default_instance_,
      chat_broadcast_all_area_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_broadcast_all_area_ack));
  chat_broadcast_all_area_ntf_descriptor_ = file->message_type(14);
  static const int chat_broadcast_all_area_ntf_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_ntf, to_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_ntf, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_ntf, role_avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_ntf, from_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_ntf, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_ntf, gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_ntf, avatar_box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_ntf, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_ntf, officer_grade_),
  };
  chat_broadcast_all_area_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_broadcast_all_area_ntf_descriptor_,
      chat_broadcast_all_area_ntf::default_instance_,
      chat_broadcast_all_area_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_all_area_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_broadcast_all_area_ntf));
  chat_pack_ntf_world_descriptor_ = file->message_type(15);
  static const int chat_pack_ntf_world_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_pack_ntf_world, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_pack_ntf_world, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_pack_ntf_world, role_avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_pack_ntf_world, world_channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_pack_ntf_world, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_pack_ntf_world, gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_pack_ntf_world, avatar_box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_pack_ntf_world, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_pack_ntf_world, officer_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_pack_ntf_world, world_chat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_pack_ntf_world, event_data_),
  };
  chat_pack_ntf_world_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_pack_ntf_world_descriptor_,
      chat_pack_ntf_world::default_instance_,
      chat_pack_ntf_world_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_pack_ntf_world, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_pack_ntf_world, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_pack_ntf_world));
  chat_pack_ntf_descriptor_ = file->message_type(16);
  static const int chat_pack_ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_pack_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_pack_ntf, chat_world_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_pack_ntf, marq_flower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_pack_ntf, marq_common_),
  };
  chat_pack_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_pack_ntf_descriptor_,
      chat_pack_ntf::default_instance_,
      chat_pack_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_pack_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_pack_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_pack_ntf));
  marquee_all_type_ntf_descriptor_ = file->message_type(17);
  static const int marquee_all_type_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_all_type_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_all_type_ntf, flower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_all_type_ntf, common_),
  };
  marquee_all_type_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      marquee_all_type_ntf_descriptor_,
      marquee_all_type_ntf::default_instance_,
      marquee_all_type_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_all_type_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_all_type_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(marquee_all_type_ntf));
  marquee_common_descriptor_ = file->message_type(18);
  static const int marquee_common_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_common, config_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_common, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_common, show_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_common, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_common, contents_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_common, numbers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_common, content_),
  };
  marquee_common_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      marquee_common_descriptor_,
      marquee_common::default_instance_,
      marquee_common_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_common, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_common, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(marquee_common));
  marquee_flower_descriptor_ = file->message_type(19);
  static const int marquee_flower_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_flower, to_role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_flower, from_role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_flower, flower_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_flower, flower_send_count_),
  };
  marquee_flower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      marquee_flower_descriptor_,
      marquee_flower::default_instance_,
      marquee_flower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_flower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_flower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(marquee_flower));
  marquee_debug_req_descriptor_ = file->message_type(20);
  static const int marquee_debug_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_debug_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_debug_req, marquee_),
  };
  marquee_debug_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      marquee_debug_req_descriptor_,
      marquee_debug_req::default_instance_,
      marquee_debug_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_debug_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(marquee_debug_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(marquee_debug_req));
  chat_req_descriptor_ = file->message_type(21);
  static const int chat_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_req, module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_req, content_),
  };
  chat_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_req_descriptor_,
      chat_req::default_instance_,
      chat_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_req));
  chat_ack_descriptor_ = file->message_type(22);
  static const int chat_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_ack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_ack, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_ack, sour_data_),
  };
  chat_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_ack_descriptor_,
      chat_ack::default_instance_,
      chat_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_ack));
  barrage_get_cs_req_descriptor_ = file->message_type(23);
  static const int barrage_get_cs_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_cs_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_cs_req, storage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_cs_req, desinty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_cs_req, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_cs_req, end_),
  };
  barrage_get_cs_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      barrage_get_cs_req_descriptor_,
      barrage_get_cs_req::default_instance_,
      barrage_get_cs_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_cs_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_cs_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(barrage_get_cs_req));
  barrage_get_cs_ack_descriptor_ = file->message_type(24);
  static const int barrage_get_cs_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_cs_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_cs_ack, barrage_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_cs_ack, error_),
  };
  barrage_get_cs_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      barrage_get_cs_ack_descriptor_,
      barrage_get_cs_ack::default_instance_,
      barrage_get_cs_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_cs_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_cs_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(barrage_get_cs_ack));
  barrage_send_cs_req_descriptor_ = file->message_type(25);
  static const int barrage_send_cs_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_cs_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_cs_req, storage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_cs_req, barrage_),
  };
  barrage_send_cs_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      barrage_send_cs_req_descriptor_,
      barrage_send_cs_req::default_instance_,
      barrage_send_cs_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_cs_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_cs_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(barrage_send_cs_req));
  barrage_send_cs_ack_descriptor_ = file->message_type(26);
  static const int barrage_send_cs_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_cs_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_cs_ack, error_),
  };
  barrage_send_cs_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      barrage_send_cs_ack_descriptor_,
      barrage_send_cs_ack::default_instance_,
      barrage_send_cs_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_cs_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_cs_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(barrage_send_cs_ack));
  EChatDefine_descriptor_ = file->enum_type(0);
  eMarqueeSystemType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5fchat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_system_info_ntf_descriptor_, &chat_system_info_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_world_req_descriptor_, &chat_world_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_world_ntf_descriptor_, &chat_world_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_team_req_descriptor_, &chat_team_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_team_ntf_descriptor_, &chat_team_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_family_req_descriptor_, &chat_family_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_family_ntf_descriptor_, &chat_family_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_private_req_descriptor_, &chat_private_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_private_ntf_descriptor_, &chat_private_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_world_channel_change_req_descriptor_, &chat_world_channel_change_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_world_channel_change_ack_descriptor_, &chat_world_channel_change_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_world_channel_random_nft_descriptor_, &chat_world_channel_random_nft::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_broadcast_all_area_req_descriptor_, &chat_broadcast_all_area_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_broadcast_all_area_ack_descriptor_, &chat_broadcast_all_area_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_broadcast_all_area_ntf_descriptor_, &chat_broadcast_all_area_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_pack_ntf_world_descriptor_, &chat_pack_ntf_world::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_pack_ntf_descriptor_, &chat_pack_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    marquee_all_type_ntf_descriptor_, &marquee_all_type_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    marquee_common_descriptor_, &marquee_common::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    marquee_flower_descriptor_, &marquee_flower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    marquee_debug_req_descriptor_, &marquee_debug_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_req_descriptor_, &chat_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_ack_descriptor_, &chat_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    barrage_get_cs_req_descriptor_, &barrage_get_cs_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    barrage_get_cs_ack_descriptor_, &barrage_get_cs_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    barrage_send_cs_req_descriptor_, &barrage_send_cs_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    barrage_send_cs_ack_descriptor_, &barrage_send_cs_ack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5fchat_2eproto() {
  delete chat_system_info_ntf::default_instance_;
  delete chat_system_info_ntf_reflection_;
  delete chat_world_req::default_instance_;
  delete chat_world_req_reflection_;
  delete chat_world_ntf::default_instance_;
  delete chat_world_ntf_reflection_;
  delete chat_team_req::default_instance_;
  delete chat_team_req_reflection_;
  delete chat_team_ntf::default_instance_;
  delete chat_team_ntf_reflection_;
  delete chat_family_req::default_instance_;
  delete chat_family_req_reflection_;
  delete chat_family_ntf::default_instance_;
  delete chat_family_ntf_reflection_;
  delete chat_private_req::default_instance_;
  delete chat_private_req_reflection_;
  delete chat_private_ntf::default_instance_;
  delete chat_private_ntf_reflection_;
  delete chat_world_channel_change_req::default_instance_;
  delete chat_world_channel_change_req_reflection_;
  delete chat_world_channel_change_ack::default_instance_;
  delete chat_world_channel_change_ack_reflection_;
  delete chat_world_channel_random_nft::default_instance_;
  delete chat_world_channel_random_nft_reflection_;
  delete chat_broadcast_all_area_req::default_instance_;
  delete chat_broadcast_all_area_req_reflection_;
  delete chat_broadcast_all_area_ack::default_instance_;
  delete chat_broadcast_all_area_ack_reflection_;
  delete chat_broadcast_all_area_ntf::default_instance_;
  delete chat_broadcast_all_area_ntf_reflection_;
  delete chat_pack_ntf_world::default_instance_;
  delete chat_pack_ntf_world_reflection_;
  delete chat_pack_ntf::default_instance_;
  delete chat_pack_ntf_reflection_;
  delete marquee_all_type_ntf::default_instance_;
  delete marquee_all_type_ntf_reflection_;
  delete marquee_common::default_instance_;
  delete marquee_common_reflection_;
  delete marquee_flower::default_instance_;
  delete marquee_flower_reflection_;
  delete marquee_debug_req::default_instance_;
  delete marquee_debug_req_reflection_;
  delete chat_req::default_instance_;
  delete chat_req_reflection_;
  delete chat_ack::default_instance_;
  delete chat_ack_reflection_;
  delete barrage_get_cs_req::default_instance_;
  delete barrage_get_cs_req_reflection_;
  delete barrage_get_cs_ack::default_instance_;
  delete barrage_get_cs_ack_reflection_;
  delete barrage_send_cs_req::default_instance_;
  delete barrage_send_cs_req_reflection_;
  delete barrage_send_cs_ack::default_instance_;
  delete barrage_send_cs_ack_reflection_;
}

void protobuf_AddDesc_cs_5fchat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SProtoSpace::protobuf_AddDesc_cs_5fprotoid_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5fsocialtype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5froletype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cs_5ferrorcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcs_chat.proto\022\013SProtoSpace\032\020cs_protoid"
    ".proto\032\023cm_socialtype.proto\032\021cm_roletype"
    ".proto\032\022cs_errorcode.proto\"\224\001\n\024chat_syst"
    "em_info_ntf\022A\n\007protoid\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID:\027chat_system_info_ntf_id\022\021"
    "\n\tinfo_type\030\002 \001(\r\022\025\n\rinfo_priority\030\003 \001(\r"
    "\022\017\n\007content\030\004 \001(\t\"\205\002\n\016chat_world_req\022;\n\007"
    "protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\021"
    "chat_world_req_id\022\017\n\007role_id\030\002 \001(\004\022\021\n\tro"
    "le_name\030\003 \001(\t\022\027\n\017role_avatar_url\030\004 \001(\t\022\030"
    "\n\020world_channel_id\030\005 \001(\r\022\017\n\007content\030\006 \001("
    "\t\022\021\n\tgender_id\030\007 \001(\005\022\025\n\ravatar_box_id\030\010 "
    "\001(\r\022\r\n\005level\030\t \001(\005\022\025\n\rofficer_grade\030\n \001("
    "\r\"\317\002\n\016chat_world_ntf\022;\n\007protoid\030\001 \001(\0162\027."
    "SProtoSpace.ECSProtoID:\021chat_world_ntf_i"
    "d\022\017\n\007role_id\030\002 \001(\004\022\021\n\trole_name\030\003 \001(\t\022\027\n"
    "\017role_avatar_url\030\004 \001(\t\022\030\n\020world_channel_"
    "id\030\005 \001(\r\022\017\n\007content\030\006 \001(\t\022\021\n\tgender_id\030\007"
    " \001(\005\022\025\n\ravatar_box_id\030\010 \001(\r\022\r\n\005level\030\t \001"
    "(\005\022\025\n\rofficer_grade\030\n \001(\r\0224\n\017world_chat_"
    "type\030\013 \001(\0162\033.SProtoSpace.eWorldChatType\022"
    "\022\n\nevent_data\030\014 \001(\004\"\372\001\n\rchat_team_req\022:\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\020chat_team_req_id\022\017\n\007role_id\030\002 \001(\004\022\021\n\tro"
    "le_name\030\003 \001(\t\022\027\n\017role_avatar_url\030\004 \001(\t\022\017"
    "\n\007team_id\030\005 \001(\r\022\017\n\007content\030\006 \001(\t\022\021\n\tgend"
    "er_id\030\007 \001(\005\022\025\n\ravatar_box_id\030\010 \001(\r\022\r\n\005le"
    "vel\030\t \001(\005\022\025\n\rofficer_grade\030\n \001(\r\"\372\001\n\rcha"
    "t_team_ntf\022:\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ECSProtoID:\020chat_team_ntf_id\022\017\n\007role_i"
    "d\030\002 \001(\004\022\021\n\trole_name\030\003 \001(\t\022\027\n\017role_avata"
    "r_url\030\004 \001(\t\022\017\n\007team_id\030\005 \001(\r\022\017\n\007content\030"
    "\006 \001(\t\022\021\n\tgender_id\030\007 \001(\005\022\025\n\ravatar_box_i"
    "d\030\010 \001(\r\022\r\n\005level\030\t \001(\005\022\025\n\rofficer_grade\030"
    "\n \001(\r\"\200\002\n\017chat_family_req\022<\n\007protoid\030\001 \001"
    "(\0162\027.SProtoSpace.ECSProtoID:\022chat_family"
    "_req_id\022\017\n\007role_id\030\002 \001(\004\022\021\n\trole_name\030\003 "
    "\001(\t\022\027\n\017role_avatar_url\030\004 \001(\t\022\021\n\tfamily_i"
    "d\030\005 \001(\r\022\017\n\007content\030\006 \001(\t\022\021\n\tgender_id\030\007 "
    "\001(\005\022\025\n\ravatar_box_id\030\010 \001(\r\022\r\n\005level\030\t \001("
    "\005\022\025\n\rofficer_grade\030\n \001(\r\"\200\002\n\017chat_family"
    "_ntf\022<\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSP"
    "rotoID:\022chat_family_ntf_id\022\017\n\007role_id\030\002 "
    "\001(\004\022\021\n\trole_name\030\003 \001(\t\022\027\n\017role_avatar_ur"
    "l\030\004 \001(\t\022\021\n\tfamily_id\030\005 \001(\r\022\017\n\007content\030\006 "
    "\001(\t\022\021\n\tgender_id\030\007 \001(\005\022\025\n\ravatar_box_id\030"
    "\010 \001(\r\022\r\n\005level\030\t \001(\005\022\025\n\rofficer_grade\030\n "
    "\001(\r\"\210\002\n\020chat_private_req\022=\n\007protoid\030\001 \001("
    "\0162\027.SProtoSpace.ECSProtoID:\023chat_private"
    "_req_id\022\022\n\nto_role_id\030\002 \001(\004\022\021\n\trole_name"
    "\030\003 \001(\t\022\027\n\017role_avatar_url\030\004 \001(\t\022\024\n\014from_"
    "role_id\030\005 \001(\004\022\017\n\007content\030\006 \001(\t\022\021\n\tgender"
    "_id\030\007 \001(\005\022\025\n\ravatar_box_id\030\010 \001(\r\022\r\n\005leve"
    "l\030\t \001(\005\022\025\n\rofficer_grade\030\n \001(\r\"\210\002\n\020chat_"
    "private_ntf\022=\n\007protoid\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID:\023chat_private_ntf_id\022\022\n\nto"
    "_role_id\030\002 \001(\004\022\021\n\trole_name\030\003 \001(\t\022\027\n\017rol"
    "e_avatar_url\030\004 \001(\t\022\024\n\014from_role_id\030\005 \001(\004"
    "\022\017\n\007content\030\006 \001(\t\022\021\n\tgender_id\030\007 \001(\005\022\025\n\r"
    "avatar_box_id\030\010 \001(\r\022\r\n\005level\030\t \001(\005\022\025\n\rof"
    "ficer_grade\030\n \001(\r\"\203\001\n\035chat_world_channel"
    "_change_req\022J\n\007protoid\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID: chat_world_channel_change"
    "_req_id\022\026\n\016to_new_channel\030\002 \001(\r\"\222\001\n\035chat"
    "_world_channel_change_ack\022J\n\007protoid\030\001 \001"
    "(\0162\027.SProtoSpace.ECSProtoID: chat_world_"
    "channel_change_ack_id\022\020\n\010rec_code\030\002 \001(\005\022"
    "\023\n\013new_channel\030\003 \001(\r\"|\n\035chat_world_chann"
    "el_random_nft\022J\n\007protoid\030\001 \001(\0162\027.SProtoS"
    "pace.ECSProtoID: chat_world_channel_rand"
    "om_nft_id\022\017\n\007channel\030\002 \001(\r\"\236\002\n\033chat_broa"
    "dcast_all_area_req\022H\n\007protoid\030\001 \001(\0162\027.SP"
    "rotoSpace.ECSProtoID:\036chat_broadcast_all"
    "_area_req_id\022\022\n\nto_role_id\030\002 \001(\004\022\021\n\trole"
    "_name\030\003 \001(\t\022\027\n\017role_avatar_url\030\004 \001(\t\022\024\n\014"
    "from_role_id\030\005 \001(\004\022\017\n\007content\030\006 \001(\t\022\021\n\tg"
    "ender_id\030\007 \001(\005\022\025\n\ravatar_box_id\030\010 \001(\r\022\r\n"
    "\005level\030\t \001(\005\022\025\n\rofficer_grade\030\n \001(\r\"\246\001\n\033"
    "chat_broadcast_all_area_ack\022H\n\007protoid\030\001"
    " \001(\0162\027.SProtoSpace.ECSProtoID:\036chat_broa"
    "dcast_all_area_ack_id\022\020\n\010rec_code\030\002 \001(\005\022"
    "\025\n\rsucceed_areas\030\003 \003(\004\022\024\n\014failed_areas\030\004"
    " \003(\004\"\236\002\n\033chat_broadcast_all_area_ntf\022H\n\007"
    "protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\036"
    "chat_broadcast_all_area_ntf_id\022\022\n\nto_rol"
    "e_id\030\002 \001(\004\022\021\n\trole_name\030\003 \001(\t\022\027\n\017role_av"
    "atar_url\030\004 \001(\t\022\024\n\014from_role_id\030\005 \001(\004\022\017\n\007"
    "content\030\006 \001(\t\022\021\n\tgender_id\030\007 \001(\005\022\025\n\ravat"
    "ar_box_id\030\010 \001(\r\022\r\n\005level\030\t \001(\005\022\025\n\roffice"
    "r_grade\030\n \001(\r\"\227\002\n\023chat_pack_ntf_world\022\017\n"
    "\007role_id\030\002 \001(\004\022\021\n\trole_name\030\003 \001(\t\022\027\n\017rol"
    "e_avatar_url\030\004 \001(\t\022\030\n\020world_channel_id\030\005"
    " \001(\r\022\017\n\007content\030\006 \001(\t\022\021\n\tgender_id\030\007 \001(\005"
    "\022\025\n\ravatar_box_id\030\010 \001(\r\022\r\n\005level\030\t \001(\005\022\025"
    "\n\rofficer_grade\030\n \001(\r\0224\n\017world_chat_type"
    "\030\013 \001(\0162\033.SProtoSpace.eWorldChatType\022\022\n\ne"
    "vent_data\030\014 \001(\004\"\345\001\n\rchat_pack_ntf\022:\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\020cha"
    "t_pack_ntf_id\0224\n\nchat_world\030\002 \003(\0132 .SPro"
    "toSpace.chat_pack_ntf_world\0220\n\013marq_flow"
    "er\030\005 \003(\0132\033.SProtoSpace.marquee_flower\0220\n"
    "\013marq_common\030\006 \003(\0132\033.SProtoSpace.marquee"
    "_common\"\263\001\n\024marquee_all_type_ntf\022A\n\007prot"
    "oid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\027marq"
    "uee_all_type_ntf_id\022+\n\006flower\030\005 \003(\0132\033.SP"
    "rotoSpace.marquee_flower\022+\n\006common\030\006 \003(\013"
    "2\033.SProtoSpace.marquee_common\"\230\001\n\016marque"
    "e_common\022\023\n\013config_type\030\001 \001(\005\022\021\n\tconfig_"
    "id\030\002 \001(\005\022\022\n\nshow_times\030\003 \001(\005\022\020\n\010priority"
    "\030\004 \001(\005\022\026\n\016contents_count\030\005 \001(\005\022\017\n\007number"
    "s\030\006 \003(\005\022\017\n\007content\030\007 \003(\t\"s\n\016marquee_flow"
    "er\022\024\n\014to_role_name\030\001 \001(\t\022\026\n\016from_role_na"
    "me\030\002 \001(\t\022\030\n\020flower_config_id\030\003 \001(\005\022\031\n\021fl"
    "ower_send_count\030\004 \001(\005\"\207\001\n\021marquee_debug_"
    "req\022>\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPr"
    "otoID:\024marquee_debug_req_id\0222\n\007marquee\030\002"
    " \001(\0132!.SProtoSpace.marquee_all_type_ntf\""
    "\213\001\n\010chat_req\0225\n\007protoid\030\001 \001(\0162\027.SProtoSp"
    "ace.ECSProtoID:\013chat_req_id\022$\n\004type\030\002 \001("
    "\0162\026.SProtoSpace.CHAT_TYPE\022\021\n\tmodule_id\030\003"
    " \001(\004\022\017\n\007content\030\004 \001(\t\"\257\001\n\010chat_ack\0225\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\013ch"
    "at_ack_id\022$\n\004type\030\002 \001(\0162\026.SProtoSpace.CH"
    "AT_TYPE\022\017\n\007content\030\003 \001(\t\0225\n\tsour_data\030\004 "
    "\001(\0132\".SProtoSpace.public_role_base_info\""
    "\226\001\n\022barrage_get_cs_req\022\?\n\007protoid\030\001 \001(\0162"
    "\027.SProtoSpace.ECSProtoID:\025barrage_get_cs"
    "_req_id\022\022\n\nstorage_id\030\002 \003(\005\022\017\n\007desinty\030\003"
    " \001(\005\022\r\n\005start\030\004 \001(\005\022\013\n\003end\030\005 \001(\005\"\255\001\n\022bar"
    "rage_get_cs_ack\022\?\n\007protoid\030\001 \001(\0162\027.SProt"
    "oSpace.ECSProtoID:\025barrage_get_cs_ack_id"
    "\022,\n\tbarrage_s\030\002 \001(\0132\031.SProtoSpace.barrag"
    "e_pack\022(\n\005error\030\003 \003(\0162\031.SProtoSpace.MsgE"
    "rrorType\"\231\001\n\023barrage_send_cs_req\022@\n\007prot"
    "oid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\026barr"
    "age_send_cs_req_id\022\022\n\nstorage_id\030\002 \003(\005\022,"
    "\n\007barrage\030\003 \001(\0132\033.SProtoSpace.barrage_si"
    "ngle\"\201\001\n\023barrage_send_cs_ack\022@\n\007protoid\030"
    "\001 \001(\0162\027.SProtoSpace.ECSProtoID:\026barrage_"
    "send_cs_ack_id\022(\n\005error\030\002 \003(\0162\031.SProtoSp"
    "ace.MsgErrorType*\333\002\n\013EChatDefine\022\"\n\035CHAT"
    "_CONTENT_MAX_SIZE_PRIVATE\020\254\002\022\037\n\032CHAT_CON"
    "TENT_MAX_SIZE_TEAM\020\254\002\022!\n\034CHAT_CONTENT_MA"
    "X_SIZE_FAMILY\020\254\002\022 \n\033CHAT_CONTENT_MAX_SIZ"
    "E_WORLD\020\254\002\022#\n\036CHAT_INTERVAL_MIN_TIME_PRI"
    "VATE\020\350\007\022 \n\033CHAT_INTERVAL_MIN_TIME_TEAM\020\350"
    "\007\022\"\n\035CHAT_INTERVAL_MIN_TIME_FAMILY\020\350\007\022!\n"
    "\034CHAT_INTERVAL_MIN_TIME_WORLD\020\350\007\0220\n+CHAT"
    "_INTERVAL_MIN_TIME_WORLD_CHANGE_CHANNEL\020"
    "\350\007\032\002\020\001*j\n\022eMarqueeSystemType\022\027\n\023MARQUEE_"
    "SYSTEM_NONE\020\000\022 \n\034MARQUEE_SYSTEM_SERVER_S"
    "TATUS\020\001\022\031\n\025MARQUEE_SYSTEM_OTHERS\020\002", 6074);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_chat.proto", &protobuf_RegisterTypes);
  chat_system_info_ntf::default_instance_ = new chat_system_info_ntf();
  chat_world_req::default_instance_ = new chat_world_req();
  chat_world_ntf::default_instance_ = new chat_world_ntf();
  chat_team_req::default_instance_ = new chat_team_req();
  chat_team_ntf::default_instance_ = new chat_team_ntf();
  chat_family_req::default_instance_ = new chat_family_req();
  chat_family_ntf::default_instance_ = new chat_family_ntf();
  chat_private_req::default_instance_ = new chat_private_req();
  chat_private_ntf::default_instance_ = new chat_private_ntf();
  chat_world_channel_change_req::default_instance_ = new chat_world_channel_change_req();
  chat_world_channel_change_ack::default_instance_ = new chat_world_channel_change_ack();
  chat_world_channel_random_nft::default_instance_ = new chat_world_channel_random_nft();
  chat_broadcast_all_area_req::default_instance_ = new chat_broadcast_all_area_req();
  chat_broadcast_all_area_ack::default_instance_ = new chat_broadcast_all_area_ack();
  chat_broadcast_all_area_ntf::default_instance_ = new chat_broadcast_all_area_ntf();
  chat_pack_ntf_world::default_instance_ = new chat_pack_ntf_world();
  chat_pack_ntf::default_instance_ = new chat_pack_ntf();
  marquee_all_type_ntf::default_instance_ = new marquee_all_type_ntf();
  marquee_common::default_instance_ = new marquee_common();
  marquee_flower::default_instance_ = new marquee_flower();
  marquee_debug_req::default_instance_ = new marquee_debug_req();
  chat_req::default_instance_ = new chat_req();
  chat_ack::default_instance_ = new chat_ack();
  barrage_get_cs_req::default_instance_ = new barrage_get_cs_req();
  barrage_get_cs_ack::default_instance_ = new barrage_get_cs_ack();
  barrage_send_cs_req::default_instance_ = new barrage_send_cs_req();
  barrage_send_cs_ack::default_instance_ = new barrage_send_cs_ack();
  chat_system_info_ntf::default_instance_->InitAsDefaultInstance();
  chat_world_req::default_instance_->InitAsDefaultInstance();
  chat_world_ntf::default_instance_->InitAsDefaultInstance();
  chat_team_req::default_instance_->InitAsDefaultInstance();
  chat_team_ntf::default_instance_->InitAsDefaultInstance();
  chat_family_req::default_instance_->InitAsDefaultInstance();
  chat_family_ntf::default_instance_->InitAsDefaultInstance();
  chat_private_req::default_instance_->InitAsDefaultInstance();
  chat_private_ntf::default_instance_->InitAsDefaultInstance();
  chat_world_channel_change_req::default_instance_->InitAsDefaultInstance();
  chat_world_channel_change_ack::default_instance_->InitAsDefaultInstance();
  chat_world_channel_random_nft::default_instance_->InitAsDefaultInstance();
  chat_broadcast_all_area_req::default_instance_->InitAsDefaultInstance();
  chat_broadcast_all_area_ack::default_instance_->InitAsDefaultInstance();
  chat_broadcast_all_area_ntf::default_instance_->InitAsDefaultInstance();
  chat_pack_ntf_world::default_instance_->InitAsDefaultInstance();
  chat_pack_ntf::default_instance_->InitAsDefaultInstance();
  marquee_all_type_ntf::default_instance_->InitAsDefaultInstance();
  marquee_common::default_instance_->InitAsDefaultInstance();
  marquee_flower::default_instance_->InitAsDefaultInstance();
  marquee_debug_req::default_instance_->InitAsDefaultInstance();
  chat_req::default_instance_->InitAsDefaultInstance();
  chat_ack::default_instance_->InitAsDefaultInstance();
  barrage_get_cs_req::default_instance_->InitAsDefaultInstance();
  barrage_get_cs_ack::default_instance_->InitAsDefaultInstance();
  barrage_send_cs_req::default_instance_->InitAsDefaultInstance();
  barrage_send_cs_ack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5fchat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5fchat_2eproto {
  StaticDescriptorInitializer_cs_5fchat_2eproto() {
    protobuf_AddDesc_cs_5fchat_2eproto();
  }
} static_descriptor_initializer_cs_5fchat_2eproto_;
const ::google::protobuf::EnumDescriptor* EChatDefine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EChatDefine_descriptor_;
}
bool EChatDefine_IsValid(int value) {
  switch(value) {
    case 300:
    case 1000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eMarqueeSystemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eMarqueeSystemType_descriptor_;
}
bool eMarqueeSystemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int chat_system_info_ntf::kProtoidFieldNumber;
const int chat_system_info_ntf::kInfoTypeFieldNumber;
const int chat_system_info_ntf::kInfoPriorityFieldNumber;
const int chat_system_info_ntf::kContentFieldNumber;
#endif  // !_MSC_VER

chat_system_info_ntf::chat_system_info_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_system_info_ntf::InitAsDefaultInstance() {
}

chat_system_info_ntf::chat_system_info_ntf(const chat_system_info_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_system_info_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6000;
  info_type_ = 0u;
  info_priority_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_system_info_ntf::~chat_system_info_ntf() {
  SharedDtor();
}

void chat_system_info_ntf::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void chat_system_info_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_system_info_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_system_info_ntf_descriptor_;
}

const chat_system_info_ntf& chat_system_info_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

chat_system_info_ntf* chat_system_info_ntf::default_instance_ = NULL;

chat_system_info_ntf* chat_system_info_ntf::New() const {
  return new chat_system_info_ntf;
}

void chat_system_info_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6000;
    info_type_ = 0u;
    info_priority_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_system_info_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_system_info_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info_type;
        break;
      }

      // optional uint32 info_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_type_)));
          set_has_info_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_info_priority;
        break;
      }

      // optional uint32 info_priority = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_priority_)));
          set_has_info_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_system_info_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_system_info_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 info_type = 2;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->info_type(), output);
  }

  // optional uint32 info_priority = 3;
  if (has_info_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->info_priority(), output);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_system_info_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_system_info_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 info_type = 2;
  if (has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->info_type(), target);
  }

  // optional uint32 info_priority = 3;
  if (has_info_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->info_priority(), target);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_system_info_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_system_info_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 info_type = 2;
    if (has_info_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info_type());
    }

    // optional uint32 info_priority = 3;
    if (has_info_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info_priority());
    }

    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_system_info_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_system_info_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_system_info_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_system_info_ntf::MergeFrom(const chat_system_info_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_info_type()) {
      set_info_type(from.info_type());
    }
    if (from.has_info_priority()) {
      set_info_priority(from.info_priority());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_system_info_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_system_info_ntf::CopyFrom(const chat_system_info_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_system_info_ntf::IsInitialized() const {

  return true;
}

void chat_system_info_ntf::Swap(chat_system_info_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(info_type_, other->info_type_);
    std::swap(info_priority_, other->info_priority_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_system_info_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_system_info_ntf_descriptor_;
  metadata.reflection = chat_system_info_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_world_req::kProtoidFieldNumber;
const int chat_world_req::kRoleIdFieldNumber;
const int chat_world_req::kRoleNameFieldNumber;
const int chat_world_req::kRoleAvatarUrlFieldNumber;
const int chat_world_req::kWorldChannelIdFieldNumber;
const int chat_world_req::kContentFieldNumber;
const int chat_world_req::kGenderIdFieldNumber;
const int chat_world_req::kAvatarBoxIdFieldNumber;
const int chat_world_req::kLevelFieldNumber;
const int chat_world_req::kOfficerGradeFieldNumber;
#endif  // !_MSC_VER

chat_world_req::chat_world_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_world_req::InitAsDefaultInstance() {
}

chat_world_req::chat_world_req(const chat_world_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_world_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6001;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  world_channel_id_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_id_ = 0;
  avatar_box_id_ = 0u;
  level_ = 0;
  officer_grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_world_req::~chat_world_req() {
  SharedDtor();
}

void chat_world_req::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void chat_world_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_world_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_world_req_descriptor_;
}

const chat_world_req& chat_world_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

chat_world_req* chat_world_req::default_instance_ = NULL;

chat_world_req* chat_world_req::New() const {
  return new chat_world_req;
}

void chat_world_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6001;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_role_avatar_url()) {
      if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        role_avatar_url_->clear();
      }
    }
    world_channel_id_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    gender_id_ = 0;
    avatar_box_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    officer_grade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_world_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_avatar_url;
        break;
      }

      // optional string role_avatar_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_avatar_url().data(), this->role_avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_world_channel_id;
        break;
      }

      // optional uint32 world_channel_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &world_channel_id_)));
          set_has_world_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gender_id;
        break;
      }

      // optional int32 gender_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_id_)));
          set_has_gender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_avatar_box_id;
        break;
      }

      // optional uint32 avatar_box_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_box_id_)));
          set_has_avatar_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_officer_grade;
        break;
      }

      // optional uint32 officer_grade = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officer_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &officer_grade_)));
          set_has_officer_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_world_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_avatar_url(), output);
  }

  // optional uint32 world_channel_id = 5;
  if (has_world_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->world_channel_id(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gender_id(), output);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avatar_box_id(), output);
  }

  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->officer_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_world_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_avatar_url(), target);
  }

  // optional uint32 world_channel_id = 5;
  if (has_world_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->world_channel_id(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gender_id(), target);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avatar_box_id(), target);
  }

  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->officer_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_world_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string role_avatar_url = 4;
    if (has_role_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_avatar_url());
    }

    // optional uint32 world_channel_id = 5;
    if (has_world_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->world_channel_id());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 gender_id = 7;
    if (has_gender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender_id());
    }

    // optional uint32 avatar_box_id = 8;
    if (has_avatar_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_box_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 officer_grade = 10;
    if (has_officer_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->officer_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_world_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_world_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_world_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_world_req::MergeFrom(const chat_world_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_avatar_url()) {
      set_role_avatar_url(from.role_avatar_url());
    }
    if (from.has_world_channel_id()) {
      set_world_channel_id(from.world_channel_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gender_id()) {
      set_gender_id(from.gender_id());
    }
    if (from.has_avatar_box_id()) {
      set_avatar_box_id(from.avatar_box_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_officer_grade()) {
      set_officer_grade(from.officer_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_world_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_world_req::CopyFrom(const chat_world_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_world_req::IsInitialized() const {

  return true;
}

void chat_world_req::Swap(chat_world_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_avatar_url_, other->role_avatar_url_);
    std::swap(world_channel_id_, other->world_channel_id_);
    std::swap(content_, other->content_);
    std::swap(gender_id_, other->gender_id_);
    std::swap(avatar_box_id_, other->avatar_box_id_);
    std::swap(level_, other->level_);
    std::swap(officer_grade_, other->officer_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_world_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_world_req_descriptor_;
  metadata.reflection = chat_world_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_world_ntf::kProtoidFieldNumber;
const int chat_world_ntf::kRoleIdFieldNumber;
const int chat_world_ntf::kRoleNameFieldNumber;
const int chat_world_ntf::kRoleAvatarUrlFieldNumber;
const int chat_world_ntf::kWorldChannelIdFieldNumber;
const int chat_world_ntf::kContentFieldNumber;
const int chat_world_ntf::kGenderIdFieldNumber;
const int chat_world_ntf::kAvatarBoxIdFieldNumber;
const int chat_world_ntf::kLevelFieldNumber;
const int chat_world_ntf::kOfficerGradeFieldNumber;
const int chat_world_ntf::kWorldChatTypeFieldNumber;
const int chat_world_ntf::kEventDataFieldNumber;
#endif  // !_MSC_VER

chat_world_ntf::chat_world_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_world_ntf::InitAsDefaultInstance() {
}

chat_world_ntf::chat_world_ntf(const chat_world_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_world_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6002;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  world_channel_id_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_id_ = 0;
  avatar_box_id_ = 0u;
  level_ = 0;
  officer_grade_ = 0u;
  world_chat_type_ = 0;
  event_data_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_world_ntf::~chat_world_ntf() {
  SharedDtor();
}

void chat_world_ntf::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void chat_world_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_world_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_world_ntf_descriptor_;
}

const chat_world_ntf& chat_world_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

chat_world_ntf* chat_world_ntf::default_instance_ = NULL;

chat_world_ntf* chat_world_ntf::New() const {
  return new chat_world_ntf;
}

void chat_world_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6002;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_role_avatar_url()) {
      if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        role_avatar_url_->clear();
      }
    }
    world_channel_id_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    gender_id_ = 0;
    avatar_box_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    officer_grade_ = 0u;
    world_chat_type_ = 0;
    event_data_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_world_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_avatar_url;
        break;
      }

      // optional string role_avatar_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_avatar_url().data(), this->role_avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_world_channel_id;
        break;
      }

      // optional uint32 world_channel_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &world_channel_id_)));
          set_has_world_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gender_id;
        break;
      }

      // optional int32 gender_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_id_)));
          set_has_gender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_avatar_box_id;
        break;
      }

      // optional uint32 avatar_box_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_box_id_)));
          set_has_avatar_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_officer_grade;
        break;
      }

      // optional uint32 officer_grade = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officer_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &officer_grade_)));
          set_has_officer_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_world_chat_type;
        break;
      }

      // optional .SProtoSpace.eWorldChatType world_chat_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_chat_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eWorldChatType_IsValid(value)) {
            set_world_chat_type(static_cast< ::SProtoSpace::eWorldChatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_event_data;
        break;
      }

      // optional uint64 event_data = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_data_)));
          set_has_event_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_world_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_avatar_url(), output);
  }

  // optional uint32 world_channel_id = 5;
  if (has_world_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->world_channel_id(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gender_id(), output);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avatar_box_id(), output);
  }

  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->officer_grade(), output);
  }

  // optional .SProtoSpace.eWorldChatType world_chat_type = 11;
  if (has_world_chat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->world_chat_type(), output);
  }

  // optional uint64 event_data = 12;
  if (has_event_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->event_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_world_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_avatar_url(), target);
  }

  // optional uint32 world_channel_id = 5;
  if (has_world_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->world_channel_id(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gender_id(), target);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avatar_box_id(), target);
  }

  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->officer_grade(), target);
  }

  // optional .SProtoSpace.eWorldChatType world_chat_type = 11;
  if (has_world_chat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->world_chat_type(), target);
  }

  // optional uint64 event_data = 12;
  if (has_event_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->event_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_world_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string role_avatar_url = 4;
    if (has_role_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_avatar_url());
    }

    // optional uint32 world_channel_id = 5;
    if (has_world_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->world_channel_id());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 gender_id = 7;
    if (has_gender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender_id());
    }

    // optional uint32 avatar_box_id = 8;
    if (has_avatar_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_box_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 officer_grade = 10;
    if (has_officer_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->officer_grade());
    }

    // optional .SProtoSpace.eWorldChatType world_chat_type = 11;
    if (has_world_chat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->world_chat_type());
    }

    // optional uint64 event_data = 12;
    if (has_event_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_world_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_world_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_world_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_world_ntf::MergeFrom(const chat_world_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_avatar_url()) {
      set_role_avatar_url(from.role_avatar_url());
    }
    if (from.has_world_channel_id()) {
      set_world_channel_id(from.world_channel_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gender_id()) {
      set_gender_id(from.gender_id());
    }
    if (from.has_avatar_box_id()) {
      set_avatar_box_id(from.avatar_box_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_officer_grade()) {
      set_officer_grade(from.officer_grade());
    }
    if (from.has_world_chat_type()) {
      set_world_chat_type(from.world_chat_type());
    }
    if (from.has_event_data()) {
      set_event_data(from.event_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_world_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_world_ntf::CopyFrom(const chat_world_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_world_ntf::IsInitialized() const {

  return true;
}

void chat_world_ntf::Swap(chat_world_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_avatar_url_, other->role_avatar_url_);
    std::swap(world_channel_id_, other->world_channel_id_);
    std::swap(content_, other->content_);
    std::swap(gender_id_, other->gender_id_);
    std::swap(avatar_box_id_, other->avatar_box_id_);
    std::swap(level_, other->level_);
    std::swap(officer_grade_, other->officer_grade_);
    std::swap(world_chat_type_, other->world_chat_type_);
    std::swap(event_data_, other->event_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_world_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_world_ntf_descriptor_;
  metadata.reflection = chat_world_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_team_req::kProtoidFieldNumber;
const int chat_team_req::kRoleIdFieldNumber;
const int chat_team_req::kRoleNameFieldNumber;
const int chat_team_req::kRoleAvatarUrlFieldNumber;
const int chat_team_req::kTeamIdFieldNumber;
const int chat_team_req::kContentFieldNumber;
const int chat_team_req::kGenderIdFieldNumber;
const int chat_team_req::kAvatarBoxIdFieldNumber;
const int chat_team_req::kLevelFieldNumber;
const int chat_team_req::kOfficerGradeFieldNumber;
#endif  // !_MSC_VER

chat_team_req::chat_team_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_team_req::InitAsDefaultInstance() {
}

chat_team_req::chat_team_req(const chat_team_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_team_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6003;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_id_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_id_ = 0;
  avatar_box_id_ = 0u;
  level_ = 0;
  officer_grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_team_req::~chat_team_req() {
  SharedDtor();
}

void chat_team_req::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void chat_team_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_team_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_team_req_descriptor_;
}

const chat_team_req& chat_team_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

chat_team_req* chat_team_req::default_instance_ = NULL;

chat_team_req* chat_team_req::New() const {
  return new chat_team_req;
}

void chat_team_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6003;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_role_avatar_url()) {
      if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        role_avatar_url_->clear();
      }
    }
    team_id_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    gender_id_ = 0;
    avatar_box_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    officer_grade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_team_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_team_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_avatar_url;
        break;
      }

      // optional string role_avatar_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_avatar_url().data(), this->role_avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gender_id;
        break;
      }

      // optional int32 gender_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_id_)));
          set_has_gender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_avatar_box_id;
        break;
      }

      // optional uint32 avatar_box_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_box_id_)));
          set_has_avatar_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_officer_grade;
        break;
      }

      // optional uint32 officer_grade = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officer_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &officer_grade_)));
          set_has_officer_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_team_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_team_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_avatar_url(), output);
  }

  // optional uint32 team_id = 5;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_id(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gender_id(), output);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avatar_box_id(), output);
  }

  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->officer_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_team_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_team_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_avatar_url(), target);
  }

  // optional uint32 team_id = 5;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_id(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gender_id(), target);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avatar_box_id(), target);
  }

  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->officer_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_team_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_team_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string role_avatar_url = 4;
    if (has_role_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_avatar_url());
    }

    // optional uint32 team_id = 5;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 gender_id = 7;
    if (has_gender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender_id());
    }

    // optional uint32 avatar_box_id = 8;
    if (has_avatar_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_box_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 officer_grade = 10;
    if (has_officer_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->officer_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_team_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_team_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_team_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_team_req::MergeFrom(const chat_team_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_avatar_url()) {
      set_role_avatar_url(from.role_avatar_url());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gender_id()) {
      set_gender_id(from.gender_id());
    }
    if (from.has_avatar_box_id()) {
      set_avatar_box_id(from.avatar_box_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_officer_grade()) {
      set_officer_grade(from.officer_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_team_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_team_req::CopyFrom(const chat_team_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_team_req::IsInitialized() const {

  return true;
}

void chat_team_req::Swap(chat_team_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_avatar_url_, other->role_avatar_url_);
    std::swap(team_id_, other->team_id_);
    std::swap(content_, other->content_);
    std::swap(gender_id_, other->gender_id_);
    std::swap(avatar_box_id_, other->avatar_box_id_);
    std::swap(level_, other->level_);
    std::swap(officer_grade_, other->officer_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_team_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_team_req_descriptor_;
  metadata.reflection = chat_team_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_team_ntf::kProtoidFieldNumber;
const int chat_team_ntf::kRoleIdFieldNumber;
const int chat_team_ntf::kRoleNameFieldNumber;
const int chat_team_ntf::kRoleAvatarUrlFieldNumber;
const int chat_team_ntf::kTeamIdFieldNumber;
const int chat_team_ntf::kContentFieldNumber;
const int chat_team_ntf::kGenderIdFieldNumber;
const int chat_team_ntf::kAvatarBoxIdFieldNumber;
const int chat_team_ntf::kLevelFieldNumber;
const int chat_team_ntf::kOfficerGradeFieldNumber;
#endif  // !_MSC_VER

chat_team_ntf::chat_team_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_team_ntf::InitAsDefaultInstance() {
}

chat_team_ntf::chat_team_ntf(const chat_team_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_team_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6004;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_id_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_id_ = 0;
  avatar_box_id_ = 0u;
  level_ = 0;
  officer_grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_team_ntf::~chat_team_ntf() {
  SharedDtor();
}

void chat_team_ntf::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void chat_team_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_team_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_team_ntf_descriptor_;
}

const chat_team_ntf& chat_team_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

chat_team_ntf* chat_team_ntf::default_instance_ = NULL;

chat_team_ntf* chat_team_ntf::New() const {
  return new chat_team_ntf;
}

void chat_team_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6004;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_role_avatar_url()) {
      if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        role_avatar_url_->clear();
      }
    }
    team_id_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    gender_id_ = 0;
    avatar_box_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    officer_grade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_team_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_team_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_avatar_url;
        break;
      }

      // optional string role_avatar_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_avatar_url().data(), this->role_avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gender_id;
        break;
      }

      // optional int32 gender_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_id_)));
          set_has_gender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_avatar_box_id;
        break;
      }

      // optional uint32 avatar_box_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_box_id_)));
          set_has_avatar_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_officer_grade;
        break;
      }

      // optional uint32 officer_grade = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officer_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &officer_grade_)));
          set_has_officer_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_team_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_team_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_avatar_url(), output);
  }

  // optional uint32 team_id = 5;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_id(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gender_id(), output);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avatar_box_id(), output);
  }

  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->officer_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_team_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_team_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_avatar_url(), target);
  }

  // optional uint32 team_id = 5;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_id(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gender_id(), target);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avatar_box_id(), target);
  }

  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->officer_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_team_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_team_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string role_avatar_url = 4;
    if (has_role_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_avatar_url());
    }

    // optional uint32 team_id = 5;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 gender_id = 7;
    if (has_gender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender_id());
    }

    // optional uint32 avatar_box_id = 8;
    if (has_avatar_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_box_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 officer_grade = 10;
    if (has_officer_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->officer_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_team_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_team_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_team_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_team_ntf::MergeFrom(const chat_team_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_avatar_url()) {
      set_role_avatar_url(from.role_avatar_url());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gender_id()) {
      set_gender_id(from.gender_id());
    }
    if (from.has_avatar_box_id()) {
      set_avatar_box_id(from.avatar_box_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_officer_grade()) {
      set_officer_grade(from.officer_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_team_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_team_ntf::CopyFrom(const chat_team_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_team_ntf::IsInitialized() const {

  return true;
}

void chat_team_ntf::Swap(chat_team_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_avatar_url_, other->role_avatar_url_);
    std::swap(team_id_, other->team_id_);
    std::swap(content_, other->content_);
    std::swap(gender_id_, other->gender_id_);
    std::swap(avatar_box_id_, other->avatar_box_id_);
    std::swap(level_, other->level_);
    std::swap(officer_grade_, other->officer_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_team_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_team_ntf_descriptor_;
  metadata.reflection = chat_team_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_family_req::kProtoidFieldNumber;
const int chat_family_req::kRoleIdFieldNumber;
const int chat_family_req::kRoleNameFieldNumber;
const int chat_family_req::kRoleAvatarUrlFieldNumber;
const int chat_family_req::kFamilyIdFieldNumber;
const int chat_family_req::kContentFieldNumber;
const int chat_family_req::kGenderIdFieldNumber;
const int chat_family_req::kAvatarBoxIdFieldNumber;
const int chat_family_req::kLevelFieldNumber;
const int chat_family_req::kOfficerGradeFieldNumber;
#endif  // !_MSC_VER

chat_family_req::chat_family_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_family_req::InitAsDefaultInstance() {
}

chat_family_req::chat_family_req(const chat_family_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_family_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6005;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  family_id_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_id_ = 0;
  avatar_box_id_ = 0u;
  level_ = 0;
  officer_grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_family_req::~chat_family_req() {
  SharedDtor();
}

void chat_family_req::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void chat_family_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_family_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_family_req_descriptor_;
}

const chat_family_req& chat_family_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

chat_family_req* chat_family_req::default_instance_ = NULL;

chat_family_req* chat_family_req::New() const {
  return new chat_family_req;
}

void chat_family_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6005;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_role_avatar_url()) {
      if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        role_avatar_url_->clear();
      }
    }
    family_id_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    gender_id_ = 0;
    avatar_box_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    officer_grade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_family_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_family_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_avatar_url;
        break;
      }

      // optional string role_avatar_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_avatar_url().data(), this->role_avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_family_id;
        break;
      }

      // optional uint32 family_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gender_id;
        break;
      }

      // optional int32 gender_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_id_)));
          set_has_gender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_avatar_box_id;
        break;
      }

      // optional uint32 avatar_box_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_box_id_)));
          set_has_avatar_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_officer_grade;
        break;
      }

      // optional uint32 officer_grade = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officer_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &officer_grade_)));
          set_has_officer_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_family_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_family_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_avatar_url(), output);
  }

  // optional uint32 family_id = 5;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->family_id(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gender_id(), output);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avatar_box_id(), output);
  }

  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->officer_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_family_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_family_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_avatar_url(), target);
  }

  // optional uint32 family_id = 5;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->family_id(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gender_id(), target);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avatar_box_id(), target);
  }

  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->officer_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_family_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_family_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string role_avatar_url = 4;
    if (has_role_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_avatar_url());
    }

    // optional uint32 family_id = 5;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 gender_id = 7;
    if (has_gender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender_id());
    }

    // optional uint32 avatar_box_id = 8;
    if (has_avatar_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_box_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 officer_grade = 10;
    if (has_officer_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->officer_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_family_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_family_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_family_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_family_req::MergeFrom(const chat_family_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_avatar_url()) {
      set_role_avatar_url(from.role_avatar_url());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gender_id()) {
      set_gender_id(from.gender_id());
    }
    if (from.has_avatar_box_id()) {
      set_avatar_box_id(from.avatar_box_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_officer_grade()) {
      set_officer_grade(from.officer_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_family_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_family_req::CopyFrom(const chat_family_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_family_req::IsInitialized() const {

  return true;
}

void chat_family_req::Swap(chat_family_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_avatar_url_, other->role_avatar_url_);
    std::swap(family_id_, other->family_id_);
    std::swap(content_, other->content_);
    std::swap(gender_id_, other->gender_id_);
    std::swap(avatar_box_id_, other->avatar_box_id_);
    std::swap(level_, other->level_);
    std::swap(officer_grade_, other->officer_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_family_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_family_req_descriptor_;
  metadata.reflection = chat_family_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_family_ntf::kProtoidFieldNumber;
const int chat_family_ntf::kRoleIdFieldNumber;
const int chat_family_ntf::kRoleNameFieldNumber;
const int chat_family_ntf::kRoleAvatarUrlFieldNumber;
const int chat_family_ntf::kFamilyIdFieldNumber;
const int chat_family_ntf::kContentFieldNumber;
const int chat_family_ntf::kGenderIdFieldNumber;
const int chat_family_ntf::kAvatarBoxIdFieldNumber;
const int chat_family_ntf::kLevelFieldNumber;
const int chat_family_ntf::kOfficerGradeFieldNumber;
#endif  // !_MSC_VER

chat_family_ntf::chat_family_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_family_ntf::InitAsDefaultInstance() {
}

chat_family_ntf::chat_family_ntf(const chat_family_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_family_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6006;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  family_id_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_id_ = 0;
  avatar_box_id_ = 0u;
  level_ = 0;
  officer_grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_family_ntf::~chat_family_ntf() {
  SharedDtor();
}

void chat_family_ntf::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void chat_family_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_family_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_family_ntf_descriptor_;
}

const chat_family_ntf& chat_family_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

chat_family_ntf* chat_family_ntf::default_instance_ = NULL;

chat_family_ntf* chat_family_ntf::New() const {
  return new chat_family_ntf;
}

void chat_family_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6006;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_role_avatar_url()) {
      if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        role_avatar_url_->clear();
      }
    }
    family_id_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    gender_id_ = 0;
    avatar_box_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    officer_grade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_family_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_family_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_avatar_url;
        break;
      }

      // optional string role_avatar_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_avatar_url().data(), this->role_avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_family_id;
        break;
      }

      // optional uint32 family_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gender_id;
        break;
      }

      // optional int32 gender_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_id_)));
          set_has_gender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_avatar_box_id;
        break;
      }

      // optional uint32 avatar_box_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_box_id_)));
          set_has_avatar_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_officer_grade;
        break;
      }

      // optional uint32 officer_grade = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officer_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &officer_grade_)));
          set_has_officer_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_family_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_family_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_avatar_url(), output);
  }

  // optional uint32 family_id = 5;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->family_id(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gender_id(), output);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avatar_box_id(), output);
  }

  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->officer_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_family_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_family_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_avatar_url(), target);
  }

  // optional uint32 family_id = 5;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->family_id(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gender_id(), target);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avatar_box_id(), target);
  }

  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->officer_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_family_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_family_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string role_avatar_url = 4;
    if (has_role_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_avatar_url());
    }

    // optional uint32 family_id = 5;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 gender_id = 7;
    if (has_gender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender_id());
    }

    // optional uint32 avatar_box_id = 8;
    if (has_avatar_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_box_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 officer_grade = 10;
    if (has_officer_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->officer_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_family_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_family_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_family_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_family_ntf::MergeFrom(const chat_family_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_avatar_url()) {
      set_role_avatar_url(from.role_avatar_url());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gender_id()) {
      set_gender_id(from.gender_id());
    }
    if (from.has_avatar_box_id()) {
      set_avatar_box_id(from.avatar_box_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_officer_grade()) {
      set_officer_grade(from.officer_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_family_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_family_ntf::CopyFrom(const chat_family_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_family_ntf::IsInitialized() const {

  return true;
}

void chat_family_ntf::Swap(chat_family_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_avatar_url_, other->role_avatar_url_);
    std::swap(family_id_, other->family_id_);
    std::swap(content_, other->content_);
    std::swap(gender_id_, other->gender_id_);
    std::swap(avatar_box_id_, other->avatar_box_id_);
    std::swap(level_, other->level_);
    std::swap(officer_grade_, other->officer_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_family_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_family_ntf_descriptor_;
  metadata.reflection = chat_family_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_private_req::kProtoidFieldNumber;
const int chat_private_req::kToRoleIdFieldNumber;
const int chat_private_req::kRoleNameFieldNumber;
const int chat_private_req::kRoleAvatarUrlFieldNumber;
const int chat_private_req::kFromRoleIdFieldNumber;
const int chat_private_req::kContentFieldNumber;
const int chat_private_req::kGenderIdFieldNumber;
const int chat_private_req::kAvatarBoxIdFieldNumber;
const int chat_private_req::kLevelFieldNumber;
const int chat_private_req::kOfficerGradeFieldNumber;
#endif  // !_MSC_VER

chat_private_req::chat_private_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_private_req::InitAsDefaultInstance() {
}

chat_private_req::chat_private_req(const chat_private_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_private_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6007;
  to_role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_role_id_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_id_ = 0;
  avatar_box_id_ = 0u;
  level_ = 0;
  officer_grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_private_req::~chat_private_req() {
  SharedDtor();
}

void chat_private_req::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void chat_private_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_private_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_private_req_descriptor_;
}

const chat_private_req& chat_private_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

chat_private_req* chat_private_req::default_instance_ = NULL;

chat_private_req* chat_private_req::New() const {
  return new chat_private_req;
}

void chat_private_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6007;
    to_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_role_avatar_url()) {
      if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        role_avatar_url_->clear();
      }
    }
    from_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    gender_id_ = 0;
    avatar_box_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    officer_grade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_private_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_private_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to_role_id;
        break;
      }

      // optional uint64 to_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_role_id_)));
          set_has_to_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_avatar_url;
        break;
      }

      // optional string role_avatar_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_avatar_url().data(), this->role_avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_from_role_id;
        break;
      }

      // optional uint64 from_role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_role_id_)));
          set_has_from_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gender_id;
        break;
      }

      // optional int32 gender_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_id_)));
          set_has_gender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_avatar_box_id;
        break;
      }

      // optional uint32 avatar_box_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_box_id_)));
          set_has_avatar_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_officer_grade;
        break;
      }

      // optional uint32 officer_grade = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officer_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &officer_grade_)));
          set_has_officer_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_private_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_private_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 to_role_id = 2;
  if (has_to_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to_role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_avatar_url(), output);
  }

  // optional uint64 from_role_id = 5;
  if (has_from_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->from_role_id(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gender_id(), output);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avatar_box_id(), output);
  }

  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->officer_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_private_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_private_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 to_role_id = 2;
  if (has_to_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->to_role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_avatar_url(), target);
  }

  // optional uint64 from_role_id = 5;
  if (has_from_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->from_role_id(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gender_id(), target);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avatar_box_id(), target);
  }

  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->officer_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_private_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_private_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 to_role_id = 2;
    if (has_to_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string role_avatar_url = 4;
    if (has_role_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_avatar_url());
    }

    // optional uint64 from_role_id = 5;
    if (has_from_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_role_id());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 gender_id = 7;
    if (has_gender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender_id());
    }

    // optional uint32 avatar_box_id = 8;
    if (has_avatar_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_box_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 officer_grade = 10;
    if (has_officer_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->officer_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_private_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_private_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_private_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_private_req::MergeFrom(const chat_private_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_to_role_id()) {
      set_to_role_id(from.to_role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_avatar_url()) {
      set_role_avatar_url(from.role_avatar_url());
    }
    if (from.has_from_role_id()) {
      set_from_role_id(from.from_role_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gender_id()) {
      set_gender_id(from.gender_id());
    }
    if (from.has_avatar_box_id()) {
      set_avatar_box_id(from.avatar_box_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_officer_grade()) {
      set_officer_grade(from.officer_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_private_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_private_req::CopyFrom(const chat_private_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_private_req::IsInitialized() const {

  return true;
}

void chat_private_req::Swap(chat_private_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(to_role_id_, other->to_role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_avatar_url_, other->role_avatar_url_);
    std::swap(from_role_id_, other->from_role_id_);
    std::swap(content_, other->content_);
    std::swap(gender_id_, other->gender_id_);
    std::swap(avatar_box_id_, other->avatar_box_id_);
    std::swap(level_, other->level_);
    std::swap(officer_grade_, other->officer_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_private_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_private_req_descriptor_;
  metadata.reflection = chat_private_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_private_ntf::kProtoidFieldNumber;
const int chat_private_ntf::kToRoleIdFieldNumber;
const int chat_private_ntf::kRoleNameFieldNumber;
const int chat_private_ntf::kRoleAvatarUrlFieldNumber;
const int chat_private_ntf::kFromRoleIdFieldNumber;
const int chat_private_ntf::kContentFieldNumber;
const int chat_private_ntf::kGenderIdFieldNumber;
const int chat_private_ntf::kAvatarBoxIdFieldNumber;
const int chat_private_ntf::kLevelFieldNumber;
const int chat_private_ntf::kOfficerGradeFieldNumber;
#endif  // !_MSC_VER

chat_private_ntf::chat_private_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_private_ntf::InitAsDefaultInstance() {
}

chat_private_ntf::chat_private_ntf(const chat_private_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_private_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6008;
  to_role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_role_id_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_id_ = 0;
  avatar_box_id_ = 0u;
  level_ = 0;
  officer_grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_private_ntf::~chat_private_ntf() {
  SharedDtor();
}

void chat_private_ntf::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void chat_private_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_private_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_private_ntf_descriptor_;
}

const chat_private_ntf& chat_private_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

chat_private_ntf* chat_private_ntf::default_instance_ = NULL;

chat_private_ntf* chat_private_ntf::New() const {
  return new chat_private_ntf;
}

void chat_private_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6008;
    to_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_role_avatar_url()) {
      if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        role_avatar_url_->clear();
      }
    }
    from_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    gender_id_ = 0;
    avatar_box_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    officer_grade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_private_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_private_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to_role_id;
        break;
      }

      // optional uint64 to_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_role_id_)));
          set_has_to_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_avatar_url;
        break;
      }

      // optional string role_avatar_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_avatar_url().data(), this->role_avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_from_role_id;
        break;
      }

      // optional uint64 from_role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_role_id_)));
          set_has_from_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gender_id;
        break;
      }

      // optional int32 gender_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_id_)));
          set_has_gender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_avatar_box_id;
        break;
      }

      // optional uint32 avatar_box_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_box_id_)));
          set_has_avatar_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_officer_grade;
        break;
      }

      // optional uint32 officer_grade = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officer_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &officer_grade_)));
          set_has_officer_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_private_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_private_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 to_role_id = 2;
  if (has_to_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to_role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_avatar_url(), output);
  }

  // optional uint64 from_role_id = 5;
  if (has_from_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->from_role_id(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gender_id(), output);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avatar_box_id(), output);
  }

  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->officer_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_private_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_private_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 to_role_id = 2;
  if (has_to_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->to_role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_avatar_url(), target);
  }

  // optional uint64 from_role_id = 5;
  if (has_from_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->from_role_id(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gender_id(), target);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avatar_box_id(), target);
  }

  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->officer_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_private_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_private_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 to_role_id = 2;
    if (has_to_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string role_avatar_url = 4;
    if (has_role_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_avatar_url());
    }

    // optional uint64 from_role_id = 5;
    if (has_from_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_role_id());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 gender_id = 7;
    if (has_gender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender_id());
    }

    // optional uint32 avatar_box_id = 8;
    if (has_avatar_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_box_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 officer_grade = 10;
    if (has_officer_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->officer_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_private_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_private_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_private_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_private_ntf::MergeFrom(const chat_private_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_to_role_id()) {
      set_to_role_id(from.to_role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_avatar_url()) {
      set_role_avatar_url(from.role_avatar_url());
    }
    if (from.has_from_role_id()) {
      set_from_role_id(from.from_role_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gender_id()) {
      set_gender_id(from.gender_id());
    }
    if (from.has_avatar_box_id()) {
      set_avatar_box_id(from.avatar_box_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_officer_grade()) {
      set_officer_grade(from.officer_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_private_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_private_ntf::CopyFrom(const chat_private_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_private_ntf::IsInitialized() const {

  return true;
}

void chat_private_ntf::Swap(chat_private_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(to_role_id_, other->to_role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_avatar_url_, other->role_avatar_url_);
    std::swap(from_role_id_, other->from_role_id_);
    std::swap(content_, other->content_);
    std::swap(gender_id_, other->gender_id_);
    std::swap(avatar_box_id_, other->avatar_box_id_);
    std::swap(level_, other->level_);
    std::swap(officer_grade_, other->officer_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_private_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_private_ntf_descriptor_;
  metadata.reflection = chat_private_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_world_channel_change_req::kProtoidFieldNumber;
const int chat_world_channel_change_req::kToNewChannelFieldNumber;
#endif  // !_MSC_VER

chat_world_channel_change_req::chat_world_channel_change_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_world_channel_change_req::InitAsDefaultInstance() {
}

chat_world_channel_change_req::chat_world_channel_change_req(const chat_world_channel_change_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_world_channel_change_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6009;
  to_new_channel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_world_channel_change_req::~chat_world_channel_change_req() {
  SharedDtor();
}

void chat_world_channel_change_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_world_channel_change_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_world_channel_change_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_world_channel_change_req_descriptor_;
}

const chat_world_channel_change_req& chat_world_channel_change_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

chat_world_channel_change_req* chat_world_channel_change_req::default_instance_ = NULL;

chat_world_channel_change_req* chat_world_channel_change_req::New() const {
  return new chat_world_channel_change_req;
}

void chat_world_channel_change_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6009;
    to_new_channel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_world_channel_change_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_channel_change_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to_new_channel;
        break;
      }

      // optional uint32 to_new_channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_new_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_new_channel_)));
          set_has_to_new_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_world_channel_change_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_channel_change_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 to_new_channel = 2;
  if (has_to_new_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_new_channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_world_channel_change_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_channel_change_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 to_new_channel = 2;
  if (has_to_new_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->to_new_channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_world_channel_change_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_channel_change_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 to_new_channel = 2;
    if (has_to_new_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_new_channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_world_channel_change_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_world_channel_change_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_world_channel_change_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_world_channel_change_req::MergeFrom(const chat_world_channel_change_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_to_new_channel()) {
      set_to_new_channel(from.to_new_channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_world_channel_change_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_world_channel_change_req::CopyFrom(const chat_world_channel_change_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_world_channel_change_req::IsInitialized() const {

  return true;
}

void chat_world_channel_change_req::Swap(chat_world_channel_change_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(to_new_channel_, other->to_new_channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_world_channel_change_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_world_channel_change_req_descriptor_;
  metadata.reflection = chat_world_channel_change_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_world_channel_change_ack::kProtoidFieldNumber;
const int chat_world_channel_change_ack::kRecCodeFieldNumber;
const int chat_world_channel_change_ack::kNewChannelFieldNumber;
#endif  // !_MSC_VER

chat_world_channel_change_ack::chat_world_channel_change_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_world_channel_change_ack::InitAsDefaultInstance() {
}

chat_world_channel_change_ack::chat_world_channel_change_ack(const chat_world_channel_change_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_world_channel_change_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6010;
  rec_code_ = 0;
  new_channel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_world_channel_change_ack::~chat_world_channel_change_ack() {
  SharedDtor();
}

void chat_world_channel_change_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_world_channel_change_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_world_channel_change_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_world_channel_change_ack_descriptor_;
}

const chat_world_channel_change_ack& chat_world_channel_change_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

chat_world_channel_change_ack* chat_world_channel_change_ack::default_instance_ = NULL;

chat_world_channel_change_ack* chat_world_channel_change_ack::New() const {
  return new chat_world_channel_change_ack;
}

void chat_world_channel_change_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6010;
    rec_code_ = 0;
    new_channel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_world_channel_change_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_channel_change_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rec_code;
        break;
      }

      // optional int32 rec_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rec_code_)));
          set_has_rec_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_channel;
        break;
      }

      // optional uint32 new_channel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_channel_)));
          set_has_new_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_world_channel_change_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_channel_change_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 rec_code = 2;
  if (has_rec_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rec_code(), output);
  }

  // optional uint32 new_channel = 3;
  if (has_new_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->new_channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_world_channel_change_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_channel_change_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 rec_code = 2;
  if (has_rec_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rec_code(), target);
  }

  // optional uint32 new_channel = 3;
  if (has_new_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->new_channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_world_channel_change_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_channel_change_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 rec_code = 2;
    if (has_rec_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rec_code());
    }

    // optional uint32 new_channel = 3;
    if (has_new_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_world_channel_change_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_world_channel_change_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_world_channel_change_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_world_channel_change_ack::MergeFrom(const chat_world_channel_change_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_rec_code()) {
      set_rec_code(from.rec_code());
    }
    if (from.has_new_channel()) {
      set_new_channel(from.new_channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_world_channel_change_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_world_channel_change_ack::CopyFrom(const chat_world_channel_change_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_world_channel_change_ack::IsInitialized() const {

  return true;
}

void chat_world_channel_change_ack::Swap(chat_world_channel_change_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(rec_code_, other->rec_code_);
    std::swap(new_channel_, other->new_channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_world_channel_change_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_world_channel_change_ack_descriptor_;
  metadata.reflection = chat_world_channel_change_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_world_channel_random_nft::kProtoidFieldNumber;
const int chat_world_channel_random_nft::kChannelFieldNumber;
#endif  // !_MSC_VER

chat_world_channel_random_nft::chat_world_channel_random_nft()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_world_channel_random_nft::InitAsDefaultInstance() {
}

chat_world_channel_random_nft::chat_world_channel_random_nft(const chat_world_channel_random_nft& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_world_channel_random_nft::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6011;
  channel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_world_channel_random_nft::~chat_world_channel_random_nft() {
  SharedDtor();
}

void chat_world_channel_random_nft::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_world_channel_random_nft::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_world_channel_random_nft::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_world_channel_random_nft_descriptor_;
}

const chat_world_channel_random_nft& chat_world_channel_random_nft::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

chat_world_channel_random_nft* chat_world_channel_random_nft::default_instance_ = NULL;

chat_world_channel_random_nft* chat_world_channel_random_nft::New() const {
  return new chat_world_channel_random_nft;
}

void chat_world_channel_random_nft::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6011;
    channel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_world_channel_random_nft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_channel_random_nft_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional uint32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_world_channel_random_nft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_channel_random_nft_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_world_channel_random_nft::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_channel_random_nft_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_world_channel_random_nft::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_channel_random_nft_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_world_channel_random_nft::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_world_channel_random_nft* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_world_channel_random_nft*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_world_channel_random_nft::MergeFrom(const chat_world_channel_random_nft& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_world_channel_random_nft::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_world_channel_random_nft::CopyFrom(const chat_world_channel_random_nft& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_world_channel_random_nft::IsInitialized() const {

  return true;
}

void chat_world_channel_random_nft::Swap(chat_world_channel_random_nft* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_world_channel_random_nft::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_world_channel_random_nft_descriptor_;
  metadata.reflection = chat_world_channel_random_nft_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_broadcast_all_area_req::kProtoidFieldNumber;
const int chat_broadcast_all_area_req::kToRoleIdFieldNumber;
const int chat_broadcast_all_area_req::kRoleNameFieldNumber;
const int chat_broadcast_all_area_req::kRoleAvatarUrlFieldNumber;
const int chat_broadcast_all_area_req::kFromRoleIdFieldNumber;
const int chat_broadcast_all_area_req::kContentFieldNumber;
const int chat_broadcast_all_area_req::kGenderIdFieldNumber;
const int chat_broadcast_all_area_req::kAvatarBoxIdFieldNumber;
const int chat_broadcast_all_area_req::kLevelFieldNumber;
const int chat_broadcast_all_area_req::kOfficerGradeFieldNumber;
#endif  // !_MSC_VER

chat_broadcast_all_area_req::chat_broadcast_all_area_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_broadcast_all_area_req::InitAsDefaultInstance() {
}

chat_broadcast_all_area_req::chat_broadcast_all_area_req(const chat_broadcast_all_area_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_broadcast_all_area_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6012;
  to_role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_role_id_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_id_ = 0;
  avatar_box_id_ = 0u;
  level_ = 0;
  officer_grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_broadcast_all_area_req::~chat_broadcast_all_area_req() {
  SharedDtor();
}

void chat_broadcast_all_area_req::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void chat_broadcast_all_area_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_broadcast_all_area_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_broadcast_all_area_req_descriptor_;
}

const chat_broadcast_all_area_req& chat_broadcast_all_area_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

chat_broadcast_all_area_req* chat_broadcast_all_area_req::default_instance_ = NULL;

chat_broadcast_all_area_req* chat_broadcast_all_area_req::New() const {
  return new chat_broadcast_all_area_req;
}

void chat_broadcast_all_area_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6012;
    to_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_role_avatar_url()) {
      if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        role_avatar_url_->clear();
      }
    }
    from_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    gender_id_ = 0;
    avatar_box_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    officer_grade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_broadcast_all_area_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_broadcast_all_area_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to_role_id;
        break;
      }

      // optional uint64 to_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_role_id_)));
          set_has_to_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_avatar_url;
        break;
      }

      // optional string role_avatar_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_avatar_url().data(), this->role_avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_from_role_id;
        break;
      }

      // optional uint64 from_role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_role_id_)));
          set_has_from_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gender_id;
        break;
      }

      // optional int32 gender_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_id_)));
          set_has_gender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_avatar_box_id;
        break;
      }

      // optional uint32 avatar_box_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_box_id_)));
          set_has_avatar_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_officer_grade;
        break;
      }

      // optional uint32 officer_grade = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officer_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &officer_grade_)));
          set_has_officer_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_broadcast_all_area_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_broadcast_all_area_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 to_role_id = 2;
  if (has_to_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to_role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_avatar_url(), output);
  }

  // optional uint64 from_role_id = 5;
  if (has_from_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->from_role_id(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gender_id(), output);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avatar_box_id(), output);
  }

  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->officer_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_broadcast_all_area_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_broadcast_all_area_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 to_role_id = 2;
  if (has_to_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->to_role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_avatar_url(), target);
  }

  // optional uint64 from_role_id = 5;
  if (has_from_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->from_role_id(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gender_id(), target);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avatar_box_id(), target);
  }

  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->officer_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_broadcast_all_area_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_broadcast_all_area_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 to_role_id = 2;
    if (has_to_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string role_avatar_url = 4;
    if (has_role_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_avatar_url());
    }

    // optional uint64 from_role_id = 5;
    if (has_from_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_role_id());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 gender_id = 7;
    if (has_gender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender_id());
    }

    // optional uint32 avatar_box_id = 8;
    if (has_avatar_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_box_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 officer_grade = 10;
    if (has_officer_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->officer_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_broadcast_all_area_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_broadcast_all_area_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_broadcast_all_area_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_broadcast_all_area_req::MergeFrom(const chat_broadcast_all_area_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_to_role_id()) {
      set_to_role_id(from.to_role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_avatar_url()) {
      set_role_avatar_url(from.role_avatar_url());
    }
    if (from.has_from_role_id()) {
      set_from_role_id(from.from_role_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gender_id()) {
      set_gender_id(from.gender_id());
    }
    if (from.has_avatar_box_id()) {
      set_avatar_box_id(from.avatar_box_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_officer_grade()) {
      set_officer_grade(from.officer_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_broadcast_all_area_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_broadcast_all_area_req::CopyFrom(const chat_broadcast_all_area_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_broadcast_all_area_req::IsInitialized() const {

  return true;
}

void chat_broadcast_all_area_req::Swap(chat_broadcast_all_area_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(to_role_id_, other->to_role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_avatar_url_, other->role_avatar_url_);
    std::swap(from_role_id_, other->from_role_id_);
    std::swap(content_, other->content_);
    std::swap(gender_id_, other->gender_id_);
    std::swap(avatar_box_id_, other->avatar_box_id_);
    std::swap(level_, other->level_);
    std::swap(officer_grade_, other->officer_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_broadcast_all_area_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_broadcast_all_area_req_descriptor_;
  metadata.reflection = chat_broadcast_all_area_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_broadcast_all_area_ack::kProtoidFieldNumber;
const int chat_broadcast_all_area_ack::kRecCodeFieldNumber;
const int chat_broadcast_all_area_ack::kSucceedAreasFieldNumber;
const int chat_broadcast_all_area_ack::kFailedAreasFieldNumber;
#endif  // !_MSC_VER

chat_broadcast_all_area_ack::chat_broadcast_all_area_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_broadcast_all_area_ack::InitAsDefaultInstance() {
}

chat_broadcast_all_area_ack::chat_broadcast_all_area_ack(const chat_broadcast_all_area_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_broadcast_all_area_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6013;
  rec_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_broadcast_all_area_ack::~chat_broadcast_all_area_ack() {
  SharedDtor();
}

void chat_broadcast_all_area_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_broadcast_all_area_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_broadcast_all_area_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_broadcast_all_area_ack_descriptor_;
}

const chat_broadcast_all_area_ack& chat_broadcast_all_area_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

chat_broadcast_all_area_ack* chat_broadcast_all_area_ack::default_instance_ = NULL;

chat_broadcast_all_area_ack* chat_broadcast_all_area_ack::New() const {
  return new chat_broadcast_all_area_ack;
}

void chat_broadcast_all_area_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6013;
    rec_code_ = 0;
  }
  succeed_areas_.Clear();
  failed_areas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_broadcast_all_area_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_broadcast_all_area_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rec_code;
        break;
      }

      // optional int32 rec_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rec_code_)));
          set_has_rec_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_succeed_areas;
        break;
      }

      // repeated uint64 succeed_areas = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_succeed_areas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_succeed_areas())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_succeed_areas())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_succeed_areas;
        if (input->ExpectTag(32)) goto parse_failed_areas;
        break;
      }

      // repeated uint64 failed_areas = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failed_areas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_failed_areas())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_failed_areas())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_failed_areas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_broadcast_all_area_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_broadcast_all_area_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 rec_code = 2;
  if (has_rec_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rec_code(), output);
  }

  // repeated uint64 succeed_areas = 3;
  for (int i = 0; i < this->succeed_areas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->succeed_areas(i), output);
  }

  // repeated uint64 failed_areas = 4;
  for (int i = 0; i < this->failed_areas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->failed_areas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_broadcast_all_area_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_broadcast_all_area_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 rec_code = 2;
  if (has_rec_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rec_code(), target);
  }

  // repeated uint64 succeed_areas = 3;
  for (int i = 0; i < this->succeed_areas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->succeed_areas(i), target);
  }

  // repeated uint64 failed_areas = 4;
  for (int i = 0; i < this->failed_areas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->failed_areas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_broadcast_all_area_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_broadcast_all_area_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 rec_code = 2;
    if (has_rec_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rec_code());
    }

  }
  // repeated uint64 succeed_areas = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->succeed_areas_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->succeed_areas(i));
    }
    total_size += 1 * this->succeed_areas_size() + data_size;
  }

  // repeated uint64 failed_areas = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->failed_areas_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->failed_areas(i));
    }
    total_size += 1 * this->failed_areas_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_broadcast_all_area_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_broadcast_all_area_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_broadcast_all_area_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_broadcast_all_area_ack::MergeFrom(const chat_broadcast_all_area_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  succeed_areas_.MergeFrom(from.succeed_areas_);
  failed_areas_.MergeFrom(from.failed_areas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_rec_code()) {
      set_rec_code(from.rec_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_broadcast_all_area_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_broadcast_all_area_ack::CopyFrom(const chat_broadcast_all_area_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_broadcast_all_area_ack::IsInitialized() const {

  return true;
}

void chat_broadcast_all_area_ack::Swap(chat_broadcast_all_area_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(rec_code_, other->rec_code_);
    succeed_areas_.Swap(&other->succeed_areas_);
    failed_areas_.Swap(&other->failed_areas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_broadcast_all_area_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_broadcast_all_area_ack_descriptor_;
  metadata.reflection = chat_broadcast_all_area_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_broadcast_all_area_ntf::kProtoidFieldNumber;
const int chat_broadcast_all_area_ntf::kToRoleIdFieldNumber;
const int chat_broadcast_all_area_ntf::kRoleNameFieldNumber;
const int chat_broadcast_all_area_ntf::kRoleAvatarUrlFieldNumber;
const int chat_broadcast_all_area_ntf::kFromRoleIdFieldNumber;
const int chat_broadcast_all_area_ntf::kContentFieldNumber;
const int chat_broadcast_all_area_ntf::kGenderIdFieldNumber;
const int chat_broadcast_all_area_ntf::kAvatarBoxIdFieldNumber;
const int chat_broadcast_all_area_ntf::kLevelFieldNumber;
const int chat_broadcast_all_area_ntf::kOfficerGradeFieldNumber;
#endif  // !_MSC_VER

chat_broadcast_all_area_ntf::chat_broadcast_all_area_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_broadcast_all_area_ntf::InitAsDefaultInstance() {
}

chat_broadcast_all_area_ntf::chat_broadcast_all_area_ntf(const chat_broadcast_all_area_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_broadcast_all_area_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6014;
  to_role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_role_id_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_id_ = 0;
  avatar_box_id_ = 0u;
  level_ = 0;
  officer_grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_broadcast_all_area_ntf::~chat_broadcast_all_area_ntf() {
  SharedDtor();
}

void chat_broadcast_all_area_ntf::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void chat_broadcast_all_area_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_broadcast_all_area_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_broadcast_all_area_ntf_descriptor_;
}

const chat_broadcast_all_area_ntf& chat_broadcast_all_area_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

chat_broadcast_all_area_ntf* chat_broadcast_all_area_ntf::default_instance_ = NULL;

chat_broadcast_all_area_ntf* chat_broadcast_all_area_ntf::New() const {
  return new chat_broadcast_all_area_ntf;
}

void chat_broadcast_all_area_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6014;
    to_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_role_avatar_url()) {
      if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        role_avatar_url_->clear();
      }
    }
    from_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    gender_id_ = 0;
    avatar_box_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    officer_grade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_broadcast_all_area_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_broadcast_all_area_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to_role_id;
        break;
      }

      // optional uint64 to_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_role_id_)));
          set_has_to_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_avatar_url;
        break;
      }

      // optional string role_avatar_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_avatar_url().data(), this->role_avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_from_role_id;
        break;
      }

      // optional uint64 from_role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_role_id_)));
          set_has_from_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gender_id;
        break;
      }

      // optional int32 gender_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_id_)));
          set_has_gender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_avatar_box_id;
        break;
      }

      // optional uint32 avatar_box_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_box_id_)));
          set_has_avatar_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_officer_grade;
        break;
      }

      // optional uint32 officer_grade = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officer_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &officer_grade_)));
          set_has_officer_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_broadcast_all_area_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_broadcast_all_area_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 to_role_id = 2;
  if (has_to_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to_role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_avatar_url(), output);
  }

  // optional uint64 from_role_id = 5;
  if (has_from_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->from_role_id(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gender_id(), output);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avatar_box_id(), output);
  }

  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->officer_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_broadcast_all_area_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_broadcast_all_area_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 to_role_id = 2;
  if (has_to_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->to_role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_avatar_url(), target);
  }

  // optional uint64 from_role_id = 5;
  if (has_from_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->from_role_id(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gender_id(), target);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avatar_box_id(), target);
  }

  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->officer_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_broadcast_all_area_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_broadcast_all_area_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 to_role_id = 2;
    if (has_to_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string role_avatar_url = 4;
    if (has_role_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_avatar_url());
    }

    // optional uint64 from_role_id = 5;
    if (has_from_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_role_id());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 gender_id = 7;
    if (has_gender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender_id());
    }

    // optional uint32 avatar_box_id = 8;
    if (has_avatar_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_box_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 officer_grade = 10;
    if (has_officer_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->officer_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_broadcast_all_area_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_broadcast_all_area_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_broadcast_all_area_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_broadcast_all_area_ntf::MergeFrom(const chat_broadcast_all_area_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_to_role_id()) {
      set_to_role_id(from.to_role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_avatar_url()) {
      set_role_avatar_url(from.role_avatar_url());
    }
    if (from.has_from_role_id()) {
      set_from_role_id(from.from_role_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gender_id()) {
      set_gender_id(from.gender_id());
    }
    if (from.has_avatar_box_id()) {
      set_avatar_box_id(from.avatar_box_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_officer_grade()) {
      set_officer_grade(from.officer_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_broadcast_all_area_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_broadcast_all_area_ntf::CopyFrom(const chat_broadcast_all_area_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_broadcast_all_area_ntf::IsInitialized() const {

  return true;
}

void chat_broadcast_all_area_ntf::Swap(chat_broadcast_all_area_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(to_role_id_, other->to_role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_avatar_url_, other->role_avatar_url_);
    std::swap(from_role_id_, other->from_role_id_);
    std::swap(content_, other->content_);
    std::swap(gender_id_, other->gender_id_);
    std::swap(avatar_box_id_, other->avatar_box_id_);
    std::swap(level_, other->level_);
    std::swap(officer_grade_, other->officer_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_broadcast_all_area_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_broadcast_all_area_ntf_descriptor_;
  metadata.reflection = chat_broadcast_all_area_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_pack_ntf_world::kRoleIdFieldNumber;
const int chat_pack_ntf_world::kRoleNameFieldNumber;
const int chat_pack_ntf_world::kRoleAvatarUrlFieldNumber;
const int chat_pack_ntf_world::kWorldChannelIdFieldNumber;
const int chat_pack_ntf_world::kContentFieldNumber;
const int chat_pack_ntf_world::kGenderIdFieldNumber;
const int chat_pack_ntf_world::kAvatarBoxIdFieldNumber;
const int chat_pack_ntf_world::kLevelFieldNumber;
const int chat_pack_ntf_world::kOfficerGradeFieldNumber;
const int chat_pack_ntf_world::kWorldChatTypeFieldNumber;
const int chat_pack_ntf_world::kEventDataFieldNumber;
#endif  // !_MSC_VER

chat_pack_ntf_world::chat_pack_ntf_world()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_pack_ntf_world::InitAsDefaultInstance() {
}

chat_pack_ntf_world::chat_pack_ntf_world(const chat_pack_ntf_world& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_pack_ntf_world::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  world_channel_id_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_id_ = 0;
  avatar_box_id_ = 0u;
  level_ = 0;
  officer_grade_ = 0u;
  world_chat_type_ = 0;
  event_data_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_pack_ntf_world::~chat_pack_ntf_world() {
  SharedDtor();
}

void chat_pack_ntf_world::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void chat_pack_ntf_world::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_pack_ntf_world::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_pack_ntf_world_descriptor_;
}

const chat_pack_ntf_world& chat_pack_ntf_world::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

chat_pack_ntf_world* chat_pack_ntf_world::default_instance_ = NULL;

chat_pack_ntf_world* chat_pack_ntf_world::New() const {
  return new chat_pack_ntf_world;
}

void chat_pack_ntf_world::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_role_avatar_url()) {
      if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        role_avatar_url_->clear();
      }
    }
    world_channel_id_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    gender_id_ = 0;
    avatar_box_id_ = 0u;
    level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    officer_grade_ = 0u;
    world_chat_type_ = 0;
    event_data_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_pack_ntf_world::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_avatar_url;
        break;
      }

      // optional string role_avatar_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_avatar_url().data(), this->role_avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_world_channel_id;
        break;
      }

      // optional uint32 world_channel_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &world_channel_id_)));
          set_has_world_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gender_id;
        break;
      }

      // optional int32 gender_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_id_)));
          set_has_gender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_avatar_box_id;
        break;
      }

      // optional uint32 avatar_box_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_box_id_)));
          set_has_avatar_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_officer_grade;
        break;
      }

      // optional uint32 officer_grade = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officer_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &officer_grade_)));
          set_has_officer_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_world_chat_type;
        break;
      }

      // optional .SProtoSpace.eWorldChatType world_chat_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_chat_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eWorldChatType_IsValid(value)) {
            set_world_chat_type(static_cast< ::SProtoSpace::eWorldChatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_event_data;
        break;
      }

      // optional uint64 event_data = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_data_)));
          set_has_event_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_pack_ntf_world::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_avatar_url(), output);
  }

  // optional uint32 world_channel_id = 5;
  if (has_world_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->world_channel_id(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gender_id(), output);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avatar_box_id(), output);
  }

  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->officer_grade(), output);
  }

  // optional .SProtoSpace.eWorldChatType world_chat_type = 11;
  if (has_world_chat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->world_chat_type(), output);
  }

  // optional uint64 event_data = 12;
  if (has_event_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->event_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_pack_ntf_world::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_avatar_url(), target);
  }

  // optional uint32 world_channel_id = 5;
  if (has_world_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->world_channel_id(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gender_id(), target);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avatar_box_id(), target);
  }

  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional uint32 officer_grade = 10;
  if (has_officer_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->officer_grade(), target);
  }

  // optional .SProtoSpace.eWorldChatType world_chat_type = 11;
  if (has_world_chat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->world_chat_type(), target);
  }

  // optional uint64 event_data = 12;
  if (has_event_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->event_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_pack_ntf_world::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string role_avatar_url = 4;
    if (has_role_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_avatar_url());
    }

    // optional uint32 world_channel_id = 5;
    if (has_world_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->world_channel_id());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 gender_id = 7;
    if (has_gender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender_id());
    }

    // optional uint32 avatar_box_id = 8;
    if (has_avatar_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_box_id());
    }

    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 officer_grade = 10;
    if (has_officer_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->officer_grade());
    }

    // optional .SProtoSpace.eWorldChatType world_chat_type = 11;
    if (has_world_chat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->world_chat_type());
    }

    // optional uint64 event_data = 12;
    if (has_event_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_pack_ntf_world::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_pack_ntf_world* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_pack_ntf_world*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_pack_ntf_world::MergeFrom(const chat_pack_ntf_world& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_avatar_url()) {
      set_role_avatar_url(from.role_avatar_url());
    }
    if (from.has_world_channel_id()) {
      set_world_channel_id(from.world_channel_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gender_id()) {
      set_gender_id(from.gender_id());
    }
    if (from.has_avatar_box_id()) {
      set_avatar_box_id(from.avatar_box_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_officer_grade()) {
      set_officer_grade(from.officer_grade());
    }
    if (from.has_world_chat_type()) {
      set_world_chat_type(from.world_chat_type());
    }
    if (from.has_event_data()) {
      set_event_data(from.event_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_pack_ntf_world::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_pack_ntf_world::CopyFrom(const chat_pack_ntf_world& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_pack_ntf_world::IsInitialized() const {

  return true;
}

void chat_pack_ntf_world::Swap(chat_pack_ntf_world* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_avatar_url_, other->role_avatar_url_);
    std::swap(world_channel_id_, other->world_channel_id_);
    std::swap(content_, other->content_);
    std::swap(gender_id_, other->gender_id_);
    std::swap(avatar_box_id_, other->avatar_box_id_);
    std::swap(level_, other->level_);
    std::swap(officer_grade_, other->officer_grade_);
    std::swap(world_chat_type_, other->world_chat_type_);
    std::swap(event_data_, other->event_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_pack_ntf_world::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_pack_ntf_world_descriptor_;
  metadata.reflection = chat_pack_ntf_world_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_pack_ntf::kProtoidFieldNumber;
const int chat_pack_ntf::kChatWorldFieldNumber;
const int chat_pack_ntf::kMarqFlowerFieldNumber;
const int chat_pack_ntf::kMarqCommonFieldNumber;
#endif  // !_MSC_VER

chat_pack_ntf::chat_pack_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_pack_ntf::InitAsDefaultInstance() {
}

chat_pack_ntf::chat_pack_ntf(const chat_pack_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_pack_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6015;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_pack_ntf::~chat_pack_ntf() {
  SharedDtor();
}

void chat_pack_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_pack_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_pack_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_pack_ntf_descriptor_;
}

const chat_pack_ntf& chat_pack_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

chat_pack_ntf* chat_pack_ntf::default_instance_ = NULL;

chat_pack_ntf* chat_pack_ntf::New() const {
  return new chat_pack_ntf;
}

void chat_pack_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6015;
  }
  chat_world_.Clear();
  marq_flower_.Clear();
  marq_common_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_pack_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_pack_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chat_world;
        break;
      }

      // repeated .SProtoSpace.chat_pack_ntf_world chat_world = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_world:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chat_world()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chat_world;
        if (input->ExpectTag(42)) goto parse_marq_flower;
        break;
      }

      // repeated .SProtoSpace.marquee_flower marq_flower = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marq_flower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_marq_flower()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_marq_flower;
        if (input->ExpectTag(50)) goto parse_marq_common;
        break;
      }

      // repeated .SProtoSpace.marquee_common marq_common = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marq_common:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_marq_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_marq_common;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_pack_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_pack_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.chat_pack_ntf_world chat_world = 2;
  for (int i = 0; i < this->chat_world_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chat_world(i), output);
  }

  // repeated .SProtoSpace.marquee_flower marq_flower = 5;
  for (int i = 0; i < this->marq_flower_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->marq_flower(i), output);
  }

  // repeated .SProtoSpace.marquee_common marq_common = 6;
  for (int i = 0; i < this->marq_common_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->marq_common(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_pack_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_pack_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.chat_pack_ntf_world chat_world = 2;
  for (int i = 0; i < this->chat_world_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chat_world(i), target);
  }

  // repeated .SProtoSpace.marquee_flower marq_flower = 5;
  for (int i = 0; i < this->marq_flower_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->marq_flower(i), target);
  }

  // repeated .SProtoSpace.marquee_common marq_common = 6;
  for (int i = 0; i < this->marq_common_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->marq_common(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_pack_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_pack_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.chat_pack_ntf_world chat_world = 2;
  total_size += 1 * this->chat_world_size();
  for (int i = 0; i < this->chat_world_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chat_world(i));
  }

  // repeated .SProtoSpace.marquee_flower marq_flower = 5;
  total_size += 1 * this->marq_flower_size();
  for (int i = 0; i < this->marq_flower_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->marq_flower(i));
  }

  // repeated .SProtoSpace.marquee_common marq_common = 6;
  total_size += 1 * this->marq_common_size();
  for (int i = 0; i < this->marq_common_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->marq_common(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_pack_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_pack_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_pack_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_pack_ntf::MergeFrom(const chat_pack_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  chat_world_.MergeFrom(from.chat_world_);
  marq_flower_.MergeFrom(from.marq_flower_);
  marq_common_.MergeFrom(from.marq_common_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_pack_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_pack_ntf::CopyFrom(const chat_pack_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_pack_ntf::IsInitialized() const {

  return true;
}

void chat_pack_ntf::Swap(chat_pack_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    chat_world_.Swap(&other->chat_world_);
    marq_flower_.Swap(&other->marq_flower_);
    marq_common_.Swap(&other->marq_common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_pack_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_pack_ntf_descriptor_;
  metadata.reflection = chat_pack_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int marquee_all_type_ntf::kProtoidFieldNumber;
const int marquee_all_type_ntf::kFlowerFieldNumber;
const int marquee_all_type_ntf::kCommonFieldNumber;
#endif  // !_MSC_VER

marquee_all_type_ntf::marquee_all_type_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void marquee_all_type_ntf::InitAsDefaultInstance() {
}

marquee_all_type_ntf::marquee_all_type_ntf(const marquee_all_type_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void marquee_all_type_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6020;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

marquee_all_type_ntf::~marquee_all_type_ntf() {
  SharedDtor();
}

void marquee_all_type_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void marquee_all_type_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* marquee_all_type_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return marquee_all_type_ntf_descriptor_;
}

const marquee_all_type_ntf& marquee_all_type_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

marquee_all_type_ntf* marquee_all_type_ntf::default_instance_ = NULL;

marquee_all_type_ntf* marquee_all_type_ntf::New() const {
  return new marquee_all_type_ntf;
}

void marquee_all_type_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6020;
  }
  flower_.Clear();
  common_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool marquee_all_type_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = marquee_all_type_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_flower;
        break;
      }

      // repeated .SProtoSpace.marquee_flower flower = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flower()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_flower;
        if (input->ExpectTag(50)) goto parse_common;
        break;
      }

      // repeated .SProtoSpace.marquee_common common = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_common:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_common;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void marquee_all_type_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = marquee_all_type_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.marquee_flower flower = 5;
  for (int i = 0; i < this->flower_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->flower(i), output);
  }

  // repeated .SProtoSpace.marquee_common common = 6;
  for (int i = 0; i < this->common_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->common(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* marquee_all_type_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = marquee_all_type_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.marquee_flower flower = 5;
  for (int i = 0; i < this->flower_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->flower(i), target);
  }

  // repeated .SProtoSpace.marquee_common common = 6;
  for (int i = 0; i < this->common_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->common(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int marquee_all_type_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = marquee_all_type_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.marquee_flower flower = 5;
  total_size += 1 * this->flower_size();
  for (int i = 0; i < this->flower_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->flower(i));
  }

  // repeated .SProtoSpace.marquee_common common = 6;
  total_size += 1 * this->common_size();
  for (int i = 0; i < this->common_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->common(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void marquee_all_type_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const marquee_all_type_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const marquee_all_type_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void marquee_all_type_ntf::MergeFrom(const marquee_all_type_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  flower_.MergeFrom(from.flower_);
  common_.MergeFrom(from.common_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void marquee_all_type_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void marquee_all_type_ntf::CopyFrom(const marquee_all_type_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool marquee_all_type_ntf::IsInitialized() const {

  return true;
}

void marquee_all_type_ntf::Swap(marquee_all_type_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    flower_.Swap(&other->flower_);
    common_.Swap(&other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata marquee_all_type_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = marquee_all_type_ntf_descriptor_;
  metadata.reflection = marquee_all_type_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int marquee_common::kConfigTypeFieldNumber;
const int marquee_common::kConfigIdFieldNumber;
const int marquee_common::kShowTimesFieldNumber;
const int marquee_common::kPriorityFieldNumber;
const int marquee_common::kContentsCountFieldNumber;
const int marquee_common::kNumbersFieldNumber;
const int marquee_common::kContentFieldNumber;
#endif  // !_MSC_VER

marquee_common::marquee_common()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void marquee_common::InitAsDefaultInstance() {
}

marquee_common::marquee_common(const marquee_common& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void marquee_common::SharedCtor() {
  _cached_size_ = 0;
  config_type_ = 0;
  config_id_ = 0;
  show_times_ = 0;
  priority_ = 0;
  contents_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

marquee_common::~marquee_common() {
  SharedDtor();
}

void marquee_common::SharedDtor() {
  if (this != default_instance_) {
  }
}

void marquee_common::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* marquee_common::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return marquee_common_descriptor_;
}

const marquee_common& marquee_common::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

marquee_common* marquee_common::default_instance_ = NULL;

marquee_common* marquee_common::New() const {
  return new marquee_common;
}

void marquee_common::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    config_type_ = 0;
    config_id_ = 0;
    show_times_ = 0;
    priority_ = 0;
    contents_count_ = 0;
  }
  numbers_.Clear();
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool marquee_common::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 config_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_type_)));
          set_has_config_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_config_id;
        break;
      }

      // optional int32 config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_times;
        break;
      }

      // optional int32 show_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &show_times_)));
          set_has_show_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_priority;
        break;
      }

      // optional int32 priority = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_contents_count;
        break;
      }

      // optional int32 contents_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contents_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contents_count_)));
          set_has_contents_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_numbers;
        break;
      }

      // repeated int32 numbers = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numbers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_numbers())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_numbers())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_numbers;
        if (input->ExpectTag(58)) goto parse_content;
        break;
      }

      // repeated string content = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content(this->content_size() - 1).data(),
            this->content(this->content_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_content;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void marquee_common::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 config_type = 1;
  if (has_config_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->config_type(), output);
  }

  // optional int32 config_id = 2;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->config_id(), output);
  }

  // optional int32 show_times = 3;
  if (has_show_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->show_times(), output);
  }

  // optional int32 priority = 4;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->priority(), output);
  }

  // optional int32 contents_count = 5;
  if (has_contents_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->contents_count(), output);
  }

  // repeated int32 numbers = 6;
  for (int i = 0; i < this->numbers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->numbers(i), output);
  }

  // repeated string content = 7;
  for (int i = 0; i < this->content_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->content(i).data(), this->content(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->content(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* marquee_common::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 config_type = 1;
  if (has_config_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->config_type(), target);
  }

  // optional int32 config_id = 2;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->config_id(), target);
  }

  // optional int32 show_times = 3;
  if (has_show_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->show_times(), target);
  }

  // optional int32 priority = 4;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->priority(), target);
  }

  // optional int32 contents_count = 5;
  if (has_contents_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->contents_count(), target);
  }

  // repeated int32 numbers = 6;
  for (int i = 0; i < this->numbers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->numbers(i), target);
  }

  // repeated string content = 7;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content(i).data(), this->content(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->content(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int marquee_common::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 config_type = 1;
    if (has_config_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_type());
    }

    // optional int32 config_id = 2;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_id());
    }

    // optional int32 show_times = 3;
    if (has_show_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->show_times());
    }

    // optional int32 priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional int32 contents_count = 5;
    if (has_contents_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contents_count());
    }

  }
  // repeated int32 numbers = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->numbers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->numbers(i));
    }
    total_size += 1 * this->numbers_size() + data_size;
  }

  // repeated string content = 7;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->content(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void marquee_common::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const marquee_common* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const marquee_common*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void marquee_common::MergeFrom(const marquee_common& from) {
  GOOGLE_CHECK_NE(&from, this);
  numbers_.MergeFrom(from.numbers_);
  content_.MergeFrom(from.content_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_type()) {
      set_config_type(from.config_type());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_show_times()) {
      set_show_times(from.show_times());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_contents_count()) {
      set_contents_count(from.contents_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void marquee_common::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void marquee_common::CopyFrom(const marquee_common& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool marquee_common::IsInitialized() const {

  return true;
}

void marquee_common::Swap(marquee_common* other) {
  if (other != this) {
    std::swap(config_type_, other->config_type_);
    std::swap(config_id_, other->config_id_);
    std::swap(show_times_, other->show_times_);
    std::swap(priority_, other->priority_);
    std::swap(contents_count_, other->contents_count_);
    numbers_.Swap(&other->numbers_);
    content_.Swap(&other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata marquee_common::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = marquee_common_descriptor_;
  metadata.reflection = marquee_common_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int marquee_flower::kToRoleNameFieldNumber;
const int marquee_flower::kFromRoleNameFieldNumber;
const int marquee_flower::kFlowerConfigIdFieldNumber;
const int marquee_flower::kFlowerSendCountFieldNumber;
#endif  // !_MSC_VER

marquee_flower::marquee_flower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void marquee_flower::InitAsDefaultInstance() {
}

marquee_flower::marquee_flower(const marquee_flower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void marquee_flower::SharedCtor() {
  _cached_size_ = 0;
  to_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flower_config_id_ = 0;
  flower_send_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

marquee_flower::~marquee_flower() {
  SharedDtor();
}

void marquee_flower::SharedDtor() {
  if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_role_name_;
  }
  if (from_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_role_name_;
  }
  if (this != default_instance_) {
  }
}

void marquee_flower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* marquee_flower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return marquee_flower_descriptor_;
}

const marquee_flower& marquee_flower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

marquee_flower* marquee_flower::default_instance_ = NULL;

marquee_flower* marquee_flower::New() const {
  return new marquee_flower;
}

void marquee_flower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_to_role_name()) {
      if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
        to_role_name_->clear();
      }
    }
    if (has_from_role_name()) {
      if (from_role_name_ != &::google::protobuf::internal::kEmptyString) {
        from_role_name_->clear();
      }
    }
    flower_config_id_ = 0;
    flower_send_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool marquee_flower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string to_role_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_role_name().data(), this->to_role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_from_role_name;
        break;
      }

      // optional string from_role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_role_name().data(), this->from_role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flower_config_id;
        break;
      }

      // optional int32 flower_config_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flower_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flower_config_id_)));
          set_has_flower_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flower_send_count;
        break;
      }

      // optional int32 flower_send_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flower_send_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flower_send_count_)));
          set_has_flower_send_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void marquee_flower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string to_role_name = 1;
  if (has_to_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_role_name().data(), this->to_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->to_role_name(), output);
  }

  // optional string from_role_name = 2;
  if (has_from_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_role_name().data(), this->from_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->from_role_name(), output);
  }

  // optional int32 flower_config_id = 3;
  if (has_flower_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flower_config_id(), output);
  }

  // optional int32 flower_send_count = 4;
  if (has_flower_send_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flower_send_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* marquee_flower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string to_role_name = 1;
  if (has_to_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_role_name().data(), this->to_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->to_role_name(), target);
  }

  // optional string from_role_name = 2;
  if (has_from_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_role_name().data(), this->from_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->from_role_name(), target);
  }

  // optional int32 flower_config_id = 3;
  if (has_flower_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flower_config_id(), target);
  }

  // optional int32 flower_send_count = 4;
  if (has_flower_send_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flower_send_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int marquee_flower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string to_role_name = 1;
    if (has_to_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_role_name());
    }

    // optional string from_role_name = 2;
    if (has_from_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_role_name());
    }

    // optional int32 flower_config_id = 3;
    if (has_flower_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flower_config_id());
    }

    // optional int32 flower_send_count = 4;
    if (has_flower_send_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flower_send_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void marquee_flower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const marquee_flower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const marquee_flower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void marquee_flower::MergeFrom(const marquee_flower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_role_name()) {
      set_to_role_name(from.to_role_name());
    }
    if (from.has_from_role_name()) {
      set_from_role_name(from.from_role_name());
    }
    if (from.has_flower_config_id()) {
      set_flower_config_id(from.flower_config_id());
    }
    if (from.has_flower_send_count()) {
      set_flower_send_count(from.flower_send_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void marquee_flower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void marquee_flower::CopyFrom(const marquee_flower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool marquee_flower::IsInitialized() const {

  return true;
}

void marquee_flower::Swap(marquee_flower* other) {
  if (other != this) {
    std::swap(to_role_name_, other->to_role_name_);
    std::swap(from_role_name_, other->from_role_name_);
    std::swap(flower_config_id_, other->flower_config_id_);
    std::swap(flower_send_count_, other->flower_send_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata marquee_flower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = marquee_flower_descriptor_;
  metadata.reflection = marquee_flower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int marquee_debug_req::kProtoidFieldNumber;
const int marquee_debug_req::kMarqueeFieldNumber;
#endif  // !_MSC_VER

marquee_debug_req::marquee_debug_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void marquee_debug_req::InitAsDefaultInstance() {
  marquee_ = const_cast< ::SProtoSpace::marquee_all_type_ntf*>(&::SProtoSpace::marquee_all_type_ntf::default_instance());
}

marquee_debug_req::marquee_debug_req(const marquee_debug_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void marquee_debug_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6021;
  marquee_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

marquee_debug_req::~marquee_debug_req() {
  SharedDtor();
}

void marquee_debug_req::SharedDtor() {
  if (this != default_instance_) {
    delete marquee_;
  }
}

void marquee_debug_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* marquee_debug_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return marquee_debug_req_descriptor_;
}

const marquee_debug_req& marquee_debug_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

marquee_debug_req* marquee_debug_req::default_instance_ = NULL;

marquee_debug_req* marquee_debug_req::New() const {
  return new marquee_debug_req;
}

void marquee_debug_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6021;
    if (has_marquee()) {
      if (marquee_ != NULL) marquee_->::SProtoSpace::marquee_all_type_ntf::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool marquee_debug_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = marquee_debug_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_marquee;
        break;
      }

      // optional .SProtoSpace.marquee_all_type_ntf marquee = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marquee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_marquee()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void marquee_debug_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = marquee_debug_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.marquee_all_type_ntf marquee = 2;
  if (has_marquee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->marquee(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* marquee_debug_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = marquee_debug_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.marquee_all_type_ntf marquee = 2;
  if (has_marquee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->marquee(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int marquee_debug_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = marquee_debug_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.marquee_all_type_ntf marquee = 2;
    if (has_marquee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->marquee());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void marquee_debug_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const marquee_debug_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const marquee_debug_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void marquee_debug_req::MergeFrom(const marquee_debug_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_marquee()) {
      mutable_marquee()->::SProtoSpace::marquee_all_type_ntf::MergeFrom(from.marquee());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void marquee_debug_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void marquee_debug_req::CopyFrom(const marquee_debug_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool marquee_debug_req::IsInitialized() const {

  return true;
}

void marquee_debug_req::Swap(marquee_debug_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(marquee_, other->marquee_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata marquee_debug_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = marquee_debug_req_descriptor_;
  metadata.reflection = marquee_debug_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_req::kProtoidFieldNumber;
const int chat_req::kTypeFieldNumber;
const int chat_req::kModuleIdFieldNumber;
const int chat_req::kContentFieldNumber;
#endif  // !_MSC_VER

chat_req::chat_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_req::InitAsDefaultInstance() {
}

chat_req::chat_req(const chat_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7312;
  type_ = 1;
  module_id_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_req::~chat_req() {
  SharedDtor();
}

void chat_req::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void chat_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_req_descriptor_;
}

const chat_req& chat_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

chat_req* chat_req::default_instance_ = NULL;

chat_req* chat_req::New() const {
  return new chat_req;
}

void chat_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7312;
    type_ = 1;
    module_id_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.CHAT_TYPE type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::CHAT_TYPE_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::CHAT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_module_id;
        break;
      }

      // optional uint64 module_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.CHAT_TYPE type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint64 module_id = 3;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->module_id(), output);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.CHAT_TYPE type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint64 module_id = 3;
  if (has_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->module_id(), target);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.CHAT_TYPE type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 module_id = 3;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->module_id());
    }

    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_req::MergeFrom(const chat_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_req::CopyFrom(const chat_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_req::IsInitialized() const {

  return true;
}

void chat_req::Swap(chat_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(type_, other->type_);
    std::swap(module_id_, other->module_id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_req_descriptor_;
  metadata.reflection = chat_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_ack::kProtoidFieldNumber;
const int chat_ack::kTypeFieldNumber;
const int chat_ack::kContentFieldNumber;
const int chat_ack::kSourDataFieldNumber;
#endif  // !_MSC_VER

chat_ack::chat_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_ack::InitAsDefaultInstance() {
  sour_data_ = const_cast< ::SProtoSpace::public_role_base_info*>(&::SProtoSpace::public_role_base_info::default_instance());
}

chat_ack::chat_ack(const chat_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7313;
  type_ = 1;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sour_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_ack::~chat_ack() {
  SharedDtor();
}

void chat_ack::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete sour_data_;
  }
}

void chat_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_ack_descriptor_;
}

const chat_ack& chat_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

chat_ack* chat_ack::default_instance_ = NULL;

chat_ack* chat_ack::New() const {
  return new chat_ack;
}

void chat_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7313;
    type_ = 1;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_sour_data()) {
      if (sour_data_ != NULL) sour_data_->::SProtoSpace::public_role_base_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.CHAT_TYPE type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::CHAT_TYPE_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::CHAT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sour_data;
        break;
      }

      // optional .SProtoSpace.public_role_base_info sour_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sour_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sour_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.CHAT_TYPE type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  // optional .SProtoSpace.public_role_base_info sour_data = 4;
  if (has_sour_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sour_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.CHAT_TYPE type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional .SProtoSpace.public_role_base_info sour_data = 4;
  if (has_sour_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sour_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.CHAT_TYPE type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .SProtoSpace.public_role_base_info sour_data = 4;
    if (has_sour_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sour_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_ack::MergeFrom(const chat_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_sour_data()) {
      mutable_sour_data()->::SProtoSpace::public_role_base_info::MergeFrom(from.sour_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_ack::CopyFrom(const chat_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_ack::IsInitialized() const {

  return true;
}

void chat_ack::Swap(chat_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(sour_data_, other->sour_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_ack_descriptor_;
  metadata.reflection = chat_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int barrage_get_cs_req::kProtoidFieldNumber;
const int barrage_get_cs_req::kStorageIdFieldNumber;
const int barrage_get_cs_req::kDesintyFieldNumber;
const int barrage_get_cs_req::kStartFieldNumber;
const int barrage_get_cs_req::kEndFieldNumber;
#endif  // !_MSC_VER

barrage_get_cs_req::barrage_get_cs_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void barrage_get_cs_req::InitAsDefaultInstance() {
}

barrage_get_cs_req::barrage_get_cs_req(const barrage_get_cs_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void barrage_get_cs_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7800;
  desinty_ = 0;
  start_ = 0;
  end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

barrage_get_cs_req::~barrage_get_cs_req() {
  SharedDtor();
}

void barrage_get_cs_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void barrage_get_cs_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* barrage_get_cs_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return barrage_get_cs_req_descriptor_;
}

const barrage_get_cs_req& barrage_get_cs_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

barrage_get_cs_req* barrage_get_cs_req::default_instance_ = NULL;

barrage_get_cs_req* barrage_get_cs_req::New() const {
  return new barrage_get_cs_req;
}

void barrage_get_cs_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7800;
    desinty_ = 0;
    start_ = 0;
    end_ = 0;
  }
  storage_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool barrage_get_cs_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_get_cs_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_storage_id;
        break;
      }

      // repeated int32 storage_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_storage_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_storage_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_storage_id;
        if (input->ExpectTag(24)) goto parse_desinty;
        break;
      }

      // optional int32 desinty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desinty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desinty_)));
          set_has_desinty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start;
        break;
      }

      // optional int32 start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end;
        break;
      }

      // optional int32 end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void barrage_get_cs_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_get_cs_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated int32 storage_id = 2;
  for (int i = 0; i < this->storage_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->storage_id(i), output);
  }

  // optional int32 desinty = 3;
  if (has_desinty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->desinty(), output);
  }

  // optional int32 start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->start(), output);
  }

  // optional int32 end = 5;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* barrage_get_cs_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_get_cs_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated int32 storage_id = 2;
  for (int i = 0; i < this->storage_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->storage_id(i), target);
  }

  // optional int32 desinty = 3;
  if (has_desinty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->desinty(), target);
  }

  // optional int32 start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->start(), target);
  }

  // optional int32 end = 5;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int barrage_get_cs_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_get_cs_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 desinty = 3;
    if (has_desinty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desinty());
    }

    // optional int32 start = 4;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start());
    }

    // optional int32 end = 5;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end());
    }

  }
  // repeated int32 storage_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->storage_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->storage_id(i));
    }
    total_size += 1 * this->storage_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void barrage_get_cs_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const barrage_get_cs_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const barrage_get_cs_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void barrage_get_cs_req::MergeFrom(const barrage_get_cs_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  storage_id_.MergeFrom(from.storage_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_desinty()) {
      set_desinty(from.desinty());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void barrage_get_cs_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void barrage_get_cs_req::CopyFrom(const barrage_get_cs_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool barrage_get_cs_req::IsInitialized() const {

  return true;
}

void barrage_get_cs_req::Swap(barrage_get_cs_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    storage_id_.Swap(&other->storage_id_);
    std::swap(desinty_, other->desinty_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata barrage_get_cs_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = barrage_get_cs_req_descriptor_;
  metadata.reflection = barrage_get_cs_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int barrage_get_cs_ack::kProtoidFieldNumber;
const int barrage_get_cs_ack::kBarrageSFieldNumber;
const int barrage_get_cs_ack::kErrorFieldNumber;
#endif  // !_MSC_VER

barrage_get_cs_ack::barrage_get_cs_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void barrage_get_cs_ack::InitAsDefaultInstance() {
  barrage_s_ = const_cast< ::SProtoSpace::barrage_pack*>(&::SProtoSpace::barrage_pack::default_instance());
}

barrage_get_cs_ack::barrage_get_cs_ack(const barrage_get_cs_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void barrage_get_cs_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7801;
  barrage_s_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

barrage_get_cs_ack::~barrage_get_cs_ack() {
  SharedDtor();
}

void barrage_get_cs_ack::SharedDtor() {
  if (this != default_instance_) {
    delete barrage_s_;
  }
}

void barrage_get_cs_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* barrage_get_cs_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return barrage_get_cs_ack_descriptor_;
}

const barrage_get_cs_ack& barrage_get_cs_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

barrage_get_cs_ack* barrage_get_cs_ack::default_instance_ = NULL;

barrage_get_cs_ack* barrage_get_cs_ack::New() const {
  return new barrage_get_cs_ack;
}

void barrage_get_cs_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7801;
    if (has_barrage_s()) {
      if (barrage_s_ != NULL) barrage_s_->::SProtoSpace::barrage_pack::Clear();
    }
  }
  error_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool barrage_get_cs_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_get_cs_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_barrage_s;
        break;
      }

      // optional .SProtoSpace.barrage_pack barrage_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_barrage_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_barrage_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // repeated .SProtoSpace.MsgErrorType error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            add_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::SProtoSpace::MsgErrorType_IsValid,
                 this->mutable_error())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void barrage_get_cs_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_get_cs_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.barrage_pack barrage_s = 2;
  if (has_barrage_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->barrage_s(), output);
  }

  // repeated .SProtoSpace.MsgErrorType error = 3;
  for (int i = 0; i < this->error_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* barrage_get_cs_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_get_cs_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.barrage_pack barrage_s = 2;
  if (has_barrage_s()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->barrage_s(), target);
  }

  // repeated .SProtoSpace.MsgErrorType error = 3;
  for (int i = 0; i < this->error_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int barrage_get_cs_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_get_cs_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.barrage_pack barrage_s = 2;
    if (has_barrage_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->barrage_s());
    }

  }
  // repeated .SProtoSpace.MsgErrorType error = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->error_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->error(i));
    }
    total_size += 1 * this->error_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void barrage_get_cs_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const barrage_get_cs_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const barrage_get_cs_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void barrage_get_cs_ack::MergeFrom(const barrage_get_cs_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  error_.MergeFrom(from.error_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_barrage_s()) {
      mutable_barrage_s()->::SProtoSpace::barrage_pack::MergeFrom(from.barrage_s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void barrage_get_cs_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void barrage_get_cs_ack::CopyFrom(const barrage_get_cs_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool barrage_get_cs_ack::IsInitialized() const {

  return true;
}

void barrage_get_cs_ack::Swap(barrage_get_cs_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(barrage_s_, other->barrage_s_);
    error_.Swap(&other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata barrage_get_cs_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = barrage_get_cs_ack_descriptor_;
  metadata.reflection = barrage_get_cs_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int barrage_send_cs_req::kProtoidFieldNumber;
const int barrage_send_cs_req::kStorageIdFieldNumber;
const int barrage_send_cs_req::kBarrageFieldNumber;
#endif  // !_MSC_VER

barrage_send_cs_req::barrage_send_cs_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void barrage_send_cs_req::InitAsDefaultInstance() {
  barrage_ = const_cast< ::SProtoSpace::barrage_single*>(&::SProtoSpace::barrage_single::default_instance());
}

barrage_send_cs_req::barrage_send_cs_req(const barrage_send_cs_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void barrage_send_cs_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7802;
  barrage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

barrage_send_cs_req::~barrage_send_cs_req() {
  SharedDtor();
}

void barrage_send_cs_req::SharedDtor() {
  if (this != default_instance_) {
    delete barrage_;
  }
}

void barrage_send_cs_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* barrage_send_cs_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return barrage_send_cs_req_descriptor_;
}

const barrage_send_cs_req& barrage_send_cs_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

barrage_send_cs_req* barrage_send_cs_req::default_instance_ = NULL;

barrage_send_cs_req* barrage_send_cs_req::New() const {
  return new barrage_send_cs_req;
}

void barrage_send_cs_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7802;
    if (has_barrage()) {
      if (barrage_ != NULL) barrage_->::SProtoSpace::barrage_single::Clear();
    }
  }
  storage_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool barrage_send_cs_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_send_cs_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_storage_id;
        break;
      }

      // repeated int32 storage_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_storage_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_storage_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_storage_id;
        if (input->ExpectTag(26)) goto parse_barrage;
        break;
      }

      // optional .SProtoSpace.barrage_single barrage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_barrage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_barrage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void barrage_send_cs_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_send_cs_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated int32 storage_id = 2;
  for (int i = 0; i < this->storage_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->storage_id(i), output);
  }

  // optional .SProtoSpace.barrage_single barrage = 3;
  if (has_barrage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->barrage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* barrage_send_cs_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_send_cs_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated int32 storage_id = 2;
  for (int i = 0; i < this->storage_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->storage_id(i), target);
  }

  // optional .SProtoSpace.barrage_single barrage = 3;
  if (has_barrage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->barrage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int barrage_send_cs_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_send_cs_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.barrage_single barrage = 3;
    if (has_barrage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->barrage());
    }

  }
  // repeated int32 storage_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->storage_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->storage_id(i));
    }
    total_size += 1 * this->storage_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void barrage_send_cs_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const barrage_send_cs_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const barrage_send_cs_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void barrage_send_cs_req::MergeFrom(const barrage_send_cs_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  storage_id_.MergeFrom(from.storage_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_barrage()) {
      mutable_barrage()->::SProtoSpace::barrage_single::MergeFrom(from.barrage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void barrage_send_cs_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void barrage_send_cs_req::CopyFrom(const barrage_send_cs_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool barrage_send_cs_req::IsInitialized() const {

  return true;
}

void barrage_send_cs_req::Swap(barrage_send_cs_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    storage_id_.Swap(&other->storage_id_);
    std::swap(barrage_, other->barrage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata barrage_send_cs_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = barrage_send_cs_req_descriptor_;
  metadata.reflection = barrage_send_cs_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int barrage_send_cs_ack::kProtoidFieldNumber;
const int barrage_send_cs_ack::kErrorFieldNumber;
#endif  // !_MSC_VER

barrage_send_cs_ack::barrage_send_cs_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void barrage_send_cs_ack::InitAsDefaultInstance() {
}

barrage_send_cs_ack::barrage_send_cs_ack(const barrage_send_cs_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void barrage_send_cs_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7803;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

barrage_send_cs_ack::~barrage_send_cs_ack() {
  SharedDtor();
}

void barrage_send_cs_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void barrage_send_cs_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* barrage_send_cs_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return barrage_send_cs_ack_descriptor_;
}

const barrage_send_cs_ack& barrage_send_cs_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fchat_2eproto();
  return *default_instance_;
}

barrage_send_cs_ack* barrage_send_cs_ack::default_instance_ = NULL;

barrage_send_cs_ack* barrage_send_cs_ack::New() const {
  return new barrage_send_cs_ack;
}

void barrage_send_cs_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7803;
  }
  error_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool barrage_send_cs_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_send_cs_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // repeated .SProtoSpace.MsgErrorType error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            add_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::SProtoSpace::MsgErrorType_IsValid,
                 this->mutable_error())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void barrage_send_cs_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_send_cs_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.MsgErrorType error = 2;
  for (int i = 0; i < this->error_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* barrage_send_cs_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_send_cs_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.MsgErrorType error = 2;
  for (int i = 0; i < this->error_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int barrage_send_cs_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_send_cs_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.MsgErrorType error = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->error_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->error(i));
    }
    total_size += 1 * this->error_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void barrage_send_cs_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const barrage_send_cs_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const barrage_send_cs_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void barrage_send_cs_ack::MergeFrom(const barrage_send_cs_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  error_.MergeFrom(from.error_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void barrage_send_cs_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void barrage_send_cs_ack::CopyFrom(const barrage_send_cs_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool barrage_send_cs_ack::IsInitialized() const {

  return true;
}

void barrage_send_cs_ack::Swap(barrage_send_cs_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    error_.Swap(&other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata barrage_send_cs_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = barrage_send_cs_ack_descriptor_;
  metadata.reflection = barrage_send_cs_ack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
