// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_social.proto

#ifndef PROTOBUF_cs_5fsocial_2eproto__INCLUDED
#define PROTOBUF_cs_5fsocial_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cs_protoid.pb.h"
#include "cm_socialtype.pb.h"
#include "cm_roletype.pb.h"
#include "cm_battletype.pb.h"
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_5fsocial_2eproto();
void protobuf_AssignDesc_cs_5fsocial_2eproto();
void protobuf_ShutdownFile_cs_5fsocial_2eproto();

class game_friends_ntf;
class game_friend_refresh_req;
class game_friend_refresh_ack;
class friend_all_apply_info_ntf;
class game_search_friend_req;
class game_search_friend_ack;
class game_get_recommend_friend_req;
class game_get_recommend_friend_ack;
class game_add_friend_req;
class game_add_friend_ack;
class game_friend_opt_ntf;
class game_process_apply_info_req;
class game_process_apply_info_ack;
class game_Onekey_apply_info_req;
class game_onekey_apply_info_ack;
class game_add_blacklist_req;
class game_add_blacklist_ack;
class game_remove_friend_req;
class game_remove_friend_ack;
class game_give_item_req;
class game_give_item_ack;
class game_give_item_ntf;
class game_harem_compete_ntf;
class game_harem_compete_qingan_req;
class game_harem_compete_qingan_ack;
class game_harem_compete_slap_req;
class game_harem_compete_slap_ack;
class game_harem_compete_friends_req;
class game_harem_compete_friends_ack;
class game_harem_compete_sync_ntf;
class game_harem_compete_clear_req;
class game_harem_compete_clear_ack;
class game_harem_compete_status_ntf;
class game_harem_compete_redpoint_req;
class game_harem_compete_redpoint_ack;
class game_harem_compete_share_req;
class game_harem_compete_share_ack;
class game_harem_compete_get_event_req;
class game_harem_compete_get_event_ack;
class game_harem_compete_tribute_req;
class game_harem_compete_tribute_ack;
class create_3dchat_room_req;
class create_3dchat_room_ack;
class enter_chat_room_req;
class enter_chat_room_ack;
class exit_chat_room_req;
class exit_chat_room_ack;
class update_chat_room_players_ntf;
class update_chat_view_ntf;
class report_position_req;
class report_position_ack;
class get_role_position_req;
class get_role_position_ack;
class get_chat_room_list_req;
class get_chat_room_list_ack;
class member_kick_3d_chat_room_req;
class member_kick_3d_chat_room_ack;
class get_hang_up_award_ntf;
class get_hang_up_info_ntf;
class update_chat_room_data_ntf;
class get_3d_chat_room_pos_req;
class get_3d_chat_room_pos_ack;
class top_3d_chat_room_req;
class top_3d_chat_room_ack;
class change_name_3d_chat_room_req;
class change_name_3d_chat_room_ack;

// ===================================================================

class game_friends_ntf : public ::google::protobuf::Message {
 public:
  game_friends_ntf();
  virtual ~game_friends_ntf();

  game_friends_ntf(const game_friends_ntf& from);

  inline game_friends_ntf& operator=(const game_friends_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_friends_ntf& default_instance();

  void Swap(game_friends_ntf* other);

  // implements Message ----------------------------------------------

  game_friends_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_friends_ntf& from);
  void MergeFrom(const game_friends_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friends_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.friend_base_info fd_infos = 2;
  inline int fd_infos_size() const;
  inline void clear_fd_infos();
  static const int kFdInfosFieldNumber = 2;
  inline const ::SProtoSpace::friend_base_info& fd_infos(int index) const;
  inline ::SProtoSpace::friend_base_info* mutable_fd_infos(int index);
  inline ::SProtoSpace::friend_base_info* add_fd_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >&
      fd_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >*
      mutable_fd_infos();

  // repeated .SProtoSpace.friend_base_info bl_infos = 3;
  inline int bl_infos_size() const;
  inline void clear_bl_infos();
  static const int kBlInfosFieldNumber = 3;
  inline const ::SProtoSpace::friend_base_info& bl_infos(int index) const;
  inline ::SProtoSpace::friend_base_info* mutable_bl_infos(int index);
  inline ::SProtoSpace::friend_base_info* add_bl_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >&
      bl_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >*
      mutable_bl_infos();

  // optional uint32 give_times = 4;
  inline bool has_give_times() const;
  inline void clear_give_times();
  static const int kGiveTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 give_times() const;
  inline void set_give_times(::google::protobuf::uint32 value);

  // optional uint32 draw_times = 5;
  inline bool has_draw_times() const;
  inline void clear_draw_times();
  static const int kDrawTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 draw_times() const;
  inline void set_draw_times(::google::protobuf::uint32 value);

  // repeated uint64 give_ids = 6;
  inline int give_ids_size() const;
  inline void clear_give_ids();
  static const int kGiveIdsFieldNumber = 6;
  inline ::google::protobuf::uint64 give_ids(int index) const;
  inline void set_give_ids(int index, ::google::protobuf::uint64 value);
  inline void add_give_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      give_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_give_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_friends_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_give_times();
  inline void clear_has_give_times();
  inline void set_has_draw_times();
  inline void clear_has_draw_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info > fd_infos_;
  int proto_id_;
  ::google::protobuf::uint32 give_times_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info > bl_infos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > give_ids_;
  ::google::protobuf::uint32 draw_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_friends_ntf* default_instance_;
};
// -------------------------------------------------------------------

class game_friend_refresh_req : public ::google::protobuf::Message {
 public:
  game_friend_refresh_req();
  virtual ~game_friend_refresh_req();

  game_friend_refresh_req(const game_friend_refresh_req& from);

  inline game_friend_refresh_req& operator=(const game_friend_refresh_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_friend_refresh_req& default_instance();

  void Swap(game_friend_refresh_req* other);

  // implements Message ----------------------------------------------

  game_friend_refresh_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_friend_refresh_req& from);
  void MergeFrom(const game_friend_refresh_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friend_refresh_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_friend_refresh_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_friend_refresh_req* default_instance_;
};
// -------------------------------------------------------------------

class game_friend_refresh_ack : public ::google::protobuf::Message {
 public:
  game_friend_refresh_ack();
  virtual ~game_friend_refresh_ack();

  game_friend_refresh_ack(const game_friend_refresh_ack& from);

  inline game_friend_refresh_ack& operator=(const game_friend_refresh_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_friend_refresh_ack& default_instance();

  void Swap(game_friend_refresh_ack* other);

  // implements Message ----------------------------------------------

  game_friend_refresh_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_friend_refresh_ack& from);
  void MergeFrom(const game_friend_refresh_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friend_refresh_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.friend_base_info infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::SProtoSpace::friend_base_info& infos(int index) const;
  inline ::SProtoSpace::friend_base_info* mutable_infos(int index);
  inline ::SProtoSpace::friend_base_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >*
      mutable_infos();

  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_friend_refresh_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info > infos_;
  int proto_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_friend_refresh_ack* default_instance_;
};
// -------------------------------------------------------------------

class friend_all_apply_info_ntf : public ::google::protobuf::Message {
 public:
  friend_all_apply_info_ntf();
  virtual ~friend_all_apply_info_ntf();

  friend_all_apply_info_ntf(const friend_all_apply_info_ntf& from);

  inline friend_all_apply_info_ntf& operator=(const friend_all_apply_info_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_all_apply_info_ntf& default_instance();

  void Swap(friend_all_apply_info_ntf* other);

  // implements Message ----------------------------------------------

  friend_all_apply_info_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_all_apply_info_ntf& from);
  void MergeFrom(const friend_all_apply_info_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = friend_all_apply_info_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.friend_apply_info apply_infos = 2;
  inline int apply_infos_size() const;
  inline void clear_apply_infos();
  static const int kApplyInfosFieldNumber = 2;
  inline const ::SProtoSpace::friend_apply_info& apply_infos(int index) const;
  inline ::SProtoSpace::friend_apply_info* mutable_apply_infos(int index);
  inline ::SProtoSpace::friend_apply_info* add_apply_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_apply_info >&
      apply_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_apply_info >*
      mutable_apply_infos();

  // @@protoc_insertion_point(class_scope:SProtoSpace.friend_all_apply_info_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_apply_info > apply_infos_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static friend_all_apply_info_ntf* default_instance_;
};
// -------------------------------------------------------------------

class game_search_friend_req : public ::google::protobuf::Message {
 public:
  game_search_friend_req();
  virtual ~game_search_friend_req();

  game_search_friend_req(const game_search_friend_req& from);

  inline game_search_friend_req& operator=(const game_search_friend_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_search_friend_req& default_instance();

  void Swap(game_search_friend_req* other);

  // implements Message ----------------------------------------------

  game_search_friend_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_search_friend_req& from);
  void MergeFrom(const game_search_friend_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_search_friend_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_search_friend_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 type_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_search_friend_req* default_instance_;
};
// -------------------------------------------------------------------

class game_search_friend_ack : public ::google::protobuf::Message {
 public:
  game_search_friend_ack();
  virtual ~game_search_friend_ack();

  game_search_friend_ack(const game_search_friend_ack& from);

  inline game_search_friend_ack& operator=(const game_search_friend_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_search_friend_ack& default_instance();

  void Swap(game_search_friend_ack* other);

  // implements Message ----------------------------------------------

  game_search_friend_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_search_friend_ack& from);
  void MergeFrom(const game_search_friend_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_search_friend_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.friend_base_info fd_infos = 3;
  inline int fd_infos_size() const;
  inline void clear_fd_infos();
  static const int kFdInfosFieldNumber = 3;
  inline const ::SProtoSpace::friend_base_info& fd_infos(int index) const;
  inline ::SProtoSpace::friend_base_info* mutable_fd_infos(int index);
  inline ::SProtoSpace::friend_base_info* add_fd_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >&
      fd_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >*
      mutable_fd_infos();

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_search_friend_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info > fd_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_search_friend_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_get_recommend_friend_req : public ::google::protobuf::Message {
 public:
  game_get_recommend_friend_req();
  virtual ~game_get_recommend_friend_req();

  game_get_recommend_friend_req(const game_get_recommend_friend_req& from);

  inline game_get_recommend_friend_req& operator=(const game_get_recommend_friend_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_get_recommend_friend_req& default_instance();

  void Swap(game_get_recommend_friend_req* other);

  // implements Message ----------------------------------------------

  game_get_recommend_friend_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_get_recommend_friend_req& from);
  void MergeFrom(const game_get_recommend_friend_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_get_recommend_friend_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 area_id = 3;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 3;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // optional uint32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_get_recommend_friend_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  int proto_id_;
  ::google::protobuf::uint32 area_id_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_get_recommend_friend_req* default_instance_;
};
// -------------------------------------------------------------------

class game_get_recommend_friend_ack : public ::google::protobuf::Message {
 public:
  game_get_recommend_friend_ack();
  virtual ~game_get_recommend_friend_ack();

  game_get_recommend_friend_ack(const game_get_recommend_friend_ack& from);

  inline game_get_recommend_friend_ack& operator=(const game_get_recommend_friend_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_get_recommend_friend_ack& default_instance();

  void Swap(game_get_recommend_friend_ack* other);

  // implements Message ----------------------------------------------

  game_get_recommend_friend_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_get_recommend_friend_ack& from);
  void MergeFrom(const game_get_recommend_friend_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_get_recommend_friend_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 area_id = 3;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 3;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.friend_base_info fd_infos = 4;
  inline int fd_infos_size() const;
  inline void clear_fd_infos();
  static const int kFdInfosFieldNumber = 4;
  inline const ::SProtoSpace::friend_base_info& fd_infos(int index) const;
  inline ::SProtoSpace::friend_base_info* mutable_fd_infos(int index);
  inline ::SProtoSpace::friend_base_info* add_fd_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >&
      fd_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >*
      mutable_fd_infos();

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_get_recommend_friend_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_area_id();
  inline void clear_has_area_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  int proto_id_;
  ::google::protobuf::uint32 area_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info > fd_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_get_recommend_friend_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_add_friend_req : public ::google::protobuf::Message {
 public:
  game_add_friend_req();
  virtual ~game_add_friend_req();

  game_add_friend_req(const game_add_friend_req& from);

  inline game_add_friend_req& operator=(const game_add_friend_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_add_friend_req& default_instance();

  void Swap(game_add_friend_req* other);

  // implements Message ----------------------------------------------

  game_add_friend_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_add_friend_req& from);
  void MergeFrom(const game_add_friend_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_friend_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 accept_id = 2;
  inline bool has_accept_id() const;
  inline void clear_accept_id();
  static const int kAcceptIdFieldNumber = 2;
  inline ::google::protobuf::uint64 accept_id() const;
  inline void set_accept_id(::google::protobuf::uint64 value);

  // optional uint64 apply_id = 3;
  inline bool has_apply_id() const;
  inline void clear_apply_id();
  static const int kApplyIdFieldNumber = 3;
  inline ::google::protobuf::uint64 apply_id() const;
  inline void set_apply_id(::google::protobuf::uint64 value);

  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_add_friend_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_accept_id();
  inline void clear_has_accept_id();
  inline void set_has_apply_id();
  inline void clear_has_apply_id();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 accept_id_;
  ::google::protobuf::uint64 apply_id_;
  ::std::string* content_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_add_friend_req* default_instance_;
};
// -------------------------------------------------------------------

class game_add_friend_ack : public ::google::protobuf::Message {
 public:
  game_add_friend_ack();
  virtual ~game_add_friend_ack();

  game_add_friend_ack(const game_add_friend_ack& from);

  inline game_add_friend_ack& operator=(const game_add_friend_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_add_friend_ack& default_instance();

  void Swap(game_add_friend_ack* other);

  // implements Message ----------------------------------------------

  game_add_friend_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_add_friend_ack& from);
  void MergeFrom(const game_add_friend_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_friend_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint64 accept_id = 3;
  inline bool has_accept_id() const;
  inline void clear_accept_id();
  static const int kAcceptIdFieldNumber = 3;
  inline ::google::protobuf::uint64 accept_id() const;
  inline void set_accept_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_add_friend_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_accept_id();
  inline void clear_has_accept_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint64 accept_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_add_friend_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_friend_opt_ntf : public ::google::protobuf::Message {
 public:
  game_friend_opt_ntf();
  virtual ~game_friend_opt_ntf();

  game_friend_opt_ntf(const game_friend_opt_ntf& from);

  inline game_friend_opt_ntf& operator=(const game_friend_opt_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_friend_opt_ntf& default_instance();

  void Swap(game_friend_opt_ntf* other);

  // implements Message ----------------------------------------------

  game_friend_opt_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_friend_opt_ntf& from);
  void MergeFrom(const game_friend_opt_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friend_opt_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional .SProtoSpace.friend_base_info info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::SProtoSpace::friend_base_info& info() const;
  inline ::SProtoSpace::friend_base_info* mutable_info();
  inline ::SProtoSpace::friend_base_info* release_info();
  inline void set_allocated_info(::SProtoSpace::friend_base_info* info);

  // optional uint64 opt_time = 4;
  inline bool has_opt_time() const;
  inline void clear_opt_time();
  static const int kOptTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 opt_time() const;
  inline void set_opt_time(::google::protobuf::uint64 value);

  // optional string content = 5;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 5;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_friend_opt_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_opt_time();
  inline void clear_has_opt_time();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 type_;
  ::SProtoSpace::friend_base_info* info_;
  ::google::protobuf::uint64 opt_time_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_friend_opt_ntf* default_instance_;
};
// -------------------------------------------------------------------

class game_process_apply_info_req : public ::google::protobuf::Message {
 public:
  game_process_apply_info_req();
  virtual ~game_process_apply_info_req();

  game_process_apply_info_req(const game_process_apply_info_req& from);

  inline game_process_apply_info_req& operator=(const game_process_apply_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_process_apply_info_req& default_instance();

  void Swap(game_process_apply_info_req* other);

  // implements Message ----------------------------------------------

  game_process_apply_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_process_apply_info_req& from);
  void MergeFrom(const game_process_apply_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_process_apply_info_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 uuid = 3;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 3;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint64 apply_id = 4;
  inline bool has_apply_id() const;
  inline void clear_apply_id();
  static const int kApplyIdFieldNumber = 4;
  inline ::google::protobuf::uint64 apply_id() const;
  inline void set_apply_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_process_apply_info_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_apply_id();
  inline void clear_has_apply_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint64 apply_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_process_apply_info_req* default_instance_;
};
// -------------------------------------------------------------------

class game_process_apply_info_ack : public ::google::protobuf::Message {
 public:
  game_process_apply_info_ack();
  virtual ~game_process_apply_info_ack();

  game_process_apply_info_ack(const game_process_apply_info_ack& from);

  inline game_process_apply_info_ack& operator=(const game_process_apply_info_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_process_apply_info_ack& default_instance();

  void Swap(game_process_apply_info_ack* other);

  // implements Message ----------------------------------------------

  game_process_apply_info_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_process_apply_info_ack& from);
  void MergeFrom(const game_process_apply_info_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_process_apply_info_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional .SProtoSpace.friend_base_info info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::SProtoSpace::friend_base_info& info() const;
  inline ::SProtoSpace::friend_base_info* mutable_info();
  inline ::SProtoSpace::friend_base_info* release_info();
  inline void set_allocated_info(::SProtoSpace::friend_base_info* info);

  // optional uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_process_apply_info_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::SProtoSpace::friend_base_info* info_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_process_apply_info_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_Onekey_apply_info_req : public ::google::protobuf::Message {
 public:
  game_Onekey_apply_info_req();
  virtual ~game_Onekey_apply_info_req();

  game_Onekey_apply_info_req(const game_Onekey_apply_info_req& from);

  inline game_Onekey_apply_info_req& operator=(const game_Onekey_apply_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_Onekey_apply_info_req& default_instance();

  void Swap(game_Onekey_apply_info_req* other);

  // implements Message ----------------------------------------------

  game_Onekey_apply_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_Onekey_apply_info_req& from);
  void MergeFrom(const game_Onekey_apply_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_Onekey_apply_info_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_Onekey_apply_info_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_Onekey_apply_info_req* default_instance_;
};
// -------------------------------------------------------------------

class game_onekey_apply_info_ack : public ::google::protobuf::Message {
 public:
  game_onekey_apply_info_ack();
  virtual ~game_onekey_apply_info_ack();

  game_onekey_apply_info_ack(const game_onekey_apply_info_ack& from);

  inline game_onekey_apply_info_ack& operator=(const game_onekey_apply_info_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_onekey_apply_info_ack& default_instance();

  void Swap(game_onekey_apply_info_ack* other);

  // implements Message ----------------------------------------------

  game_onekey_apply_info_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_onekey_apply_info_ack& from);
  void MergeFrom(const game_onekey_apply_info_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_onekey_apply_info_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.friend_base_info infos = 3;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 3;
  inline const ::SProtoSpace::friend_base_info& infos(int index) const;
  inline ::SProtoSpace::friend_base_info* mutable_infos(int index);
  inline ::SProtoSpace::friend_base_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >*
      mutable_infos();

  // optional uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_onekey_apply_info_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info > infos_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_onekey_apply_info_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_add_blacklist_req : public ::google::protobuf::Message {
 public:
  game_add_blacklist_req();
  virtual ~game_add_blacklist_req();

  game_add_blacklist_req(const game_add_blacklist_req& from);

  inline game_add_blacklist_req& operator=(const game_add_blacklist_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_add_blacklist_req& default_instance();

  void Swap(game_add_blacklist_req* other);

  // implements Message ----------------------------------------------

  game_add_blacklist_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_add_blacklist_req& from);
  void MergeFrom(const game_add_blacklist_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_blacklist_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint64 target_id = 3;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 3;
  inline ::google::protobuf::uint64 target_id() const;
  inline void set_target_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_add_blacklist_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_target_id();
  inline void clear_has_target_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint64 target_id_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_add_blacklist_req* default_instance_;
};
// -------------------------------------------------------------------

class game_add_blacklist_ack : public ::google::protobuf::Message {
 public:
  game_add_blacklist_ack();
  virtual ~game_add_blacklist_ack();

  game_add_blacklist_ack(const game_add_blacklist_ack& from);

  inline game_add_blacklist_ack& operator=(const game_add_blacklist_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_add_blacklist_ack& default_instance();

  void Swap(game_add_blacklist_ack* other);

  // implements Message ----------------------------------------------

  game_add_blacklist_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_add_blacklist_ack& from);
  void MergeFrom(const game_add_blacklist_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_blacklist_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional .SProtoSpace.friend_base_info info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::SProtoSpace::friend_base_info& info() const;
  inline ::SProtoSpace::friend_base_info* mutable_info();
  inline ::SProtoSpace::friend_base_info* release_info();
  inline void set_allocated_info(::SProtoSpace::friend_base_info* info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_add_blacklist_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::SProtoSpace::friend_base_info* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_add_blacklist_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_remove_friend_req : public ::google::protobuf::Message {
 public:
  game_remove_friend_req();
  virtual ~game_remove_friend_req();

  game_remove_friend_req(const game_remove_friend_req& from);

  inline game_remove_friend_req& operator=(const game_remove_friend_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_remove_friend_req& default_instance();

  void Swap(game_remove_friend_req* other);

  // implements Message ----------------------------------------------

  game_remove_friend_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_remove_friend_req& from);
  void MergeFrom(const game_remove_friend_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_remove_friend_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 uuid = 3;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 3;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint64 target_id = 4;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 4;
  inline ::google::protobuf::uint64 target_id() const;
  inline void set_target_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_remove_friend_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_target_id();
  inline void clear_has_target_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint64 target_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_remove_friend_req* default_instance_;
};
// -------------------------------------------------------------------

class game_remove_friend_ack : public ::google::protobuf::Message {
 public:
  game_remove_friend_ack();
  virtual ~game_remove_friend_ack();

  game_remove_friend_ack(const game_remove_friend_ack& from);

  inline game_remove_friend_ack& operator=(const game_remove_friend_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_remove_friend_ack& default_instance();

  void Swap(game_remove_friend_ack* other);

  // implements Message ----------------------------------------------

  game_remove_friend_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_remove_friend_ack& from);
  void MergeFrom(const game_remove_friend_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_remove_friend_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint64 target_id = 3;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 3;
  inline ::google::protobuf::uint64 target_id() const;
  inline void set_target_id(::google::protobuf::uint64 value);

  // optional uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_remove_friend_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint64 target_id_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_remove_friend_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_give_item_req : public ::google::protobuf::Message {
 public:
  game_give_item_req();
  virtual ~game_give_item_req();

  game_give_item_req(const game_give_item_req& from);

  inline game_give_item_req& operator=(const game_give_item_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_give_item_req& default_instance();

  void Swap(game_give_item_req* other);

  // implements Message ----------------------------------------------

  game_give_item_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_give_item_req& from);
  void MergeFrom(const game_give_item_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_give_item_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 giver_id = 3;
  inline bool has_giver_id() const;
  inline void clear_giver_id();
  static const int kGiverIdFieldNumber = 3;
  inline ::google::protobuf::uint64 giver_id() const;
  inline void set_giver_id(::google::protobuf::uint64 value);

  // optional uint64 target_id = 4;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 4;
  inline ::google::protobuf::uint64 target_id() const;
  inline void set_target_id(::google::protobuf::uint64 value);

  // optional uint32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_give_item_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_giver_id();
  inline void clear_has_giver_id();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint64 giver_id_;
  ::google::protobuf::uint64 target_id_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_give_item_req* default_instance_;
};
// -------------------------------------------------------------------

class game_give_item_ack : public ::google::protobuf::Message {
 public:
  game_give_item_ack();
  virtual ~game_give_item_ack();

  game_give_item_ack(const game_give_item_ack& from);

  inline game_give_item_ack& operator=(const game_give_item_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_give_item_ack& default_instance();

  void Swap(game_give_item_ack* other);

  // implements Message ----------------------------------------------

  game_give_item_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_give_item_ack& from);
  void MergeFrom(const game_give_item_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_give_item_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint64 target_id = 3;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 3;
  inline ::google::protobuf::uint64 target_id() const;
  inline void set_target_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_give_item_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_target_id();
  inline void clear_has_target_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint64 target_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_give_item_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_give_item_ntf : public ::google::protobuf::Message {
 public:
  game_give_item_ntf();
  virtual ~game_give_item_ntf();

  game_give_item_ntf(const game_give_item_ntf& from);

  inline game_give_item_ntf& operator=(const game_give_item_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_give_item_ntf& default_instance();

  void Swap(game_give_item_ntf* other);

  // implements Message ----------------------------------------------

  game_give_item_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_give_item_ntf& from);
  void MergeFrom(const game_give_item_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_give_item_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.give_item_info info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::SProtoSpace::give_item_info& info() const;
  inline ::SProtoSpace::give_item_info* mutable_info();
  inline ::SProtoSpace::give_item_info* release_info();
  inline void set_allocated_info(::SProtoSpace::give_item_info* info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_give_item_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::give_item_info* info_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_give_item_ntf* default_instance_;
};
// -------------------------------------------------------------------

class game_harem_compete_ntf : public ::google::protobuf::Message {
 public:
  game_harem_compete_ntf();
  virtual ~game_harem_compete_ntf();

  game_harem_compete_ntf(const game_harem_compete_ntf& from);

  inline game_harem_compete_ntf& operator=(const game_harem_compete_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_harem_compete_ntf& default_instance();

  void Swap(game_harem_compete_ntf* other);

  // implements Message ----------------------------------------------

  game_harem_compete_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_harem_compete_ntf& from);
  void MergeFrom(const game_harem_compete_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 qingan_times = 2;
  inline bool has_qingan_times() const;
  inline void clear_qingan_times();
  static const int kQinganTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 qingan_times() const;
  inline void set_qingan_times(::google::protobuf::uint32 value);

  // optional uint32 slap_times = 3;
  inline bool has_slap_times() const;
  inline void clear_slap_times();
  static const int kSlapTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 slap_times() const;
  inline void set_slap_times(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.harem_compete_event events = 4;
  inline int events_size() const;
  inline void clear_events();
  static const int kEventsFieldNumber = 4;
  inline const ::SProtoSpace::harem_compete_event& events(int index) const;
  inline ::SProtoSpace::harem_compete_event* mutable_events(int index);
  inline ::SProtoSpace::harem_compete_event* add_events();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::harem_compete_event >&
      events() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::harem_compete_event >*
      mutable_events();

  // optional .SProtoSpace.ESLAPPROGRESS progress = 5;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 5;
  inline ::SProtoSpace::ESLAPPROGRESS progress() const;
  inline void set_progress(::SProtoSpace::ESLAPPROGRESS value);

  // optional uint64 end_time = 6;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);

  // repeated uint64 red_point_time = 7;
  inline int red_point_time_size() const;
  inline void clear_red_point_time();
  static const int kRedPointTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 red_point_time(int index) const;
  inline void set_red_point_time(int index, ::google::protobuf::uint64 value);
  inline void add_red_point_time(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      red_point_time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_red_point_time();

  // repeated .SProtoSpace.tribute_info tri_info = 8;
  inline int tri_info_size() const;
  inline void clear_tri_info();
  static const int kTriInfoFieldNumber = 8;
  inline const ::SProtoSpace::tribute_info& tri_info(int index) const;
  inline ::SProtoSpace::tribute_info* mutable_tri_info(int index);
  inline ::SProtoSpace::tribute_info* add_tri_info();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::tribute_info >&
      tri_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::tribute_info >*
      mutable_tri_info();

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_harem_compete_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_qingan_times();
  inline void clear_has_qingan_times();
  inline void set_has_slap_times();
  inline void clear_has_slap_times();
  inline void set_has_progress();
  inline void clear_has_progress();
  inline void set_has_end_time();
  inline void clear_has_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 qingan_times_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::harem_compete_event > events_;
  ::google::protobuf::uint32 slap_times_;
  int progress_;
  ::google::protobuf::uint64 end_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > red_point_time_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::tribute_info > tri_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_harem_compete_ntf* default_instance_;
};
// -------------------------------------------------------------------

class game_harem_compete_qingan_req : public ::google::protobuf::Message {
 public:
  game_harem_compete_qingan_req();
  virtual ~game_harem_compete_qingan_req();

  game_harem_compete_qingan_req(const game_harem_compete_qingan_req& from);

  inline game_harem_compete_qingan_req& operator=(const game_harem_compete_qingan_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_harem_compete_qingan_req& default_instance();

  void Swap(game_harem_compete_qingan_req* other);

  // implements Message ----------------------------------------------

  game_harem_compete_qingan_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_harem_compete_qingan_req& from);
  void MergeFrom(const game_harem_compete_qingan_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_qingan_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  inline ::google::protobuf::uint64 target_id() const;
  inline void set_target_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional uint32 role_type = 4;
  inline bool has_role_type() const;
  inline void clear_role_type();
  static const int kRoleTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 role_type() const;
  inline void set_role_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_harem_compete_qingan_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_type();
  inline void clear_has_role_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 target_id_;
  int proto_id_;
  ::google::protobuf::uint32 role_type_;
  ::std::string* role_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_harem_compete_qingan_req* default_instance_;
};
// -------------------------------------------------------------------

class game_harem_compete_qingan_ack : public ::google::protobuf::Message {
 public:
  game_harem_compete_qingan_ack();
  virtual ~game_harem_compete_qingan_ack();

  game_harem_compete_qingan_ack(const game_harem_compete_qingan_ack& from);

  inline game_harem_compete_qingan_ack& operator=(const game_harem_compete_qingan_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_harem_compete_qingan_ack& default_instance();

  void Swap(game_harem_compete_qingan_ack* other);

  // implements Message ----------------------------------------------

  game_harem_compete_qingan_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_harem_compete_qingan_ack& from);
  void MergeFrom(const game_harem_compete_qingan_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_qingan_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint64 event_id = 3;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 3;
  inline ::google::protobuf::uint64 event_id() const;
  inline void set_event_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_harem_compete_qingan_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_event_id();
  inline void clear_has_event_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint64 event_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_harem_compete_qingan_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_harem_compete_slap_req : public ::google::protobuf::Message {
 public:
  game_harem_compete_slap_req();
  virtual ~game_harem_compete_slap_req();

  game_harem_compete_slap_req(const game_harem_compete_slap_req& from);

  inline game_harem_compete_slap_req& operator=(const game_harem_compete_slap_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_harem_compete_slap_req& default_instance();

  void Swap(game_harem_compete_slap_req* other);

  // implements Message ----------------------------------------------

  game_harem_compete_slap_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_harem_compete_slap_req& from);
  void MergeFrom(const game_harem_compete_slap_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_slap_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  inline ::google::protobuf::uint64 target_id() const;
  inline void set_target_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional uint64 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional uint64 take_time = 5;
  inline bool has_take_time() const;
  inline void clear_take_time();
  static const int kTakeTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 take_time() const;
  inline void set_take_time(::google::protobuf::uint64 value);

  // optional uint32 slap_count = 6;
  inline bool has_slap_count() const;
  inline void clear_slap_count();
  static const int kSlapCountFieldNumber = 6;
  inline ::google::protobuf::uint32 slap_count() const;
  inline void set_slap_count(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.slap_emoji_info info = 7;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 7;
  inline const ::SProtoSpace::slap_emoji_info& info(int index) const;
  inline ::SProtoSpace::slap_emoji_info* mutable_info(int index);
  inline ::SProtoSpace::slap_emoji_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::slap_emoji_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::slap_emoji_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_harem_compete_slap_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_take_time();
  inline void clear_has_take_time();
  inline void set_has_slap_count();
  inline void clear_has_slap_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 target_id_;
  ::std::string* role_name_;
  int proto_id_;
  ::google::protobuf::uint32 slap_count_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint64 take_time_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::slap_emoji_info > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_harem_compete_slap_req* default_instance_;
};
// -------------------------------------------------------------------

class game_harem_compete_slap_ack : public ::google::protobuf::Message {
 public:
  game_harem_compete_slap_ack();
  virtual ~game_harem_compete_slap_ack();

  game_harem_compete_slap_ack(const game_harem_compete_slap_ack& from);

  inline game_harem_compete_slap_ack& operator=(const game_harem_compete_slap_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_harem_compete_slap_ack& default_instance();

  void Swap(game_harem_compete_slap_ack* other);

  // implements Message ----------------------------------------------

  game_harem_compete_slap_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_harem_compete_slap_ack& from);
  void MergeFrom(const game_harem_compete_slap_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_slap_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.ESLAPPROGRESS progress = 2;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 2;
  inline ::SProtoSpace::ESLAPPROGRESS progress() const;
  inline void set_progress(::SProtoSpace::ESLAPPROGRESS value);

  // optional uint64 event_id = 3;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 3;
  inline ::google::protobuf::uint64 event_id() const;
  inline void set_event_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_harem_compete_slap_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_progress();
  inline void clear_has_progress();
  inline void set_has_event_id();
  inline void clear_has_event_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  int progress_;
  ::google::protobuf::uint64 event_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_harem_compete_slap_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_harem_compete_friends_req : public ::google::protobuf::Message {
 public:
  game_harem_compete_friends_req();
  virtual ~game_harem_compete_friends_req();

  game_harem_compete_friends_req(const game_harem_compete_friends_req& from);

  inline game_harem_compete_friends_req& operator=(const game_harem_compete_friends_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_harem_compete_friends_req& default_instance();

  void Swap(game_harem_compete_friends_req* other);

  // implements Message ----------------------------------------------

  game_harem_compete_friends_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_harem_compete_friends_req& from);
  void MergeFrom(const game_harem_compete_friends_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_friends_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 gd_type = 2;
  inline bool has_gd_type() const;
  inline void clear_gd_type();
  static const int kGdTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 gd_type() const;
  inline void set_gd_type(::google::protobuf::uint32 value);

  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_harem_compete_friends_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_gd_type();
  inline void clear_has_gd_type();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 gd_type_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_harem_compete_friends_req* default_instance_;
};
// -------------------------------------------------------------------

class game_harem_compete_friends_ack : public ::google::protobuf::Message {
 public:
  game_harem_compete_friends_ack();
  virtual ~game_harem_compete_friends_ack();

  game_harem_compete_friends_ack(const game_harem_compete_friends_ack& from);

  inline game_harem_compete_friends_ack& operator=(const game_harem_compete_friends_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_harem_compete_friends_ack& default_instance();

  void Swap(game_harem_compete_friends_ack* other);

  // implements Message ----------------------------------------------

  game_harem_compete_friends_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_harem_compete_friends_ack& from);
  void MergeFrom(const game_harem_compete_friends_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_friends_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.friend_base_info friends = 2;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 2;
  inline const ::SProtoSpace::friend_base_info& friends(int index) const;
  inline ::SProtoSpace::friend_base_info* mutable_friends(int index);
  inline ::SProtoSpace::friend_base_info* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >*
      mutable_friends();

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_harem_compete_friends_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info > friends_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_harem_compete_friends_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_harem_compete_sync_ntf : public ::google::protobuf::Message {
 public:
  game_harem_compete_sync_ntf();
  virtual ~game_harem_compete_sync_ntf();

  game_harem_compete_sync_ntf(const game_harem_compete_sync_ntf& from);

  inline game_harem_compete_sync_ntf& operator=(const game_harem_compete_sync_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_harem_compete_sync_ntf& default_instance();

  void Swap(game_harem_compete_sync_ntf* other);

  // implements Message ----------------------------------------------

  game_harem_compete_sync_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_harem_compete_sync_ntf& from);
  void MergeFrom(const game_harem_compete_sync_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_sync_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.harem_compete_event event = 2;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 2;
  inline const ::SProtoSpace::harem_compete_event& event() const;
  inline ::SProtoSpace::harem_compete_event* mutable_event();
  inline ::SProtoSpace::harem_compete_event* release_event();
  inline void set_allocated_event(::SProtoSpace::harem_compete_event* event);

  // optional .SProtoSpace.ESLAPPROGRESS progress = 3;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 3;
  inline ::SProtoSpace::ESLAPPROGRESS progress() const;
  inline void set_progress(::SProtoSpace::ESLAPPROGRESS value);

  // optional uint64 end_time = 4;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_harem_compete_sync_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_progress();
  inline void clear_has_progress();
  inline void set_has_end_time();
  inline void clear_has_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::harem_compete_event* event_;
  int proto_id_;
  int progress_;
  ::google::protobuf::uint64 end_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_harem_compete_sync_ntf* default_instance_;
};
// -------------------------------------------------------------------

class game_harem_compete_clear_req : public ::google::protobuf::Message {
 public:
  game_harem_compete_clear_req();
  virtual ~game_harem_compete_clear_req();

  game_harem_compete_clear_req(const game_harem_compete_clear_req& from);

  inline game_harem_compete_clear_req& operator=(const game_harem_compete_clear_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_harem_compete_clear_req& default_instance();

  void Swap(game_harem_compete_clear_req* other);

  // implements Message ----------------------------------------------

  game_harem_compete_clear_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_harem_compete_clear_req& from);
  void MergeFrom(const game_harem_compete_clear_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_clear_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_harem_compete_clear_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_harem_compete_clear_req* default_instance_;
};
// -------------------------------------------------------------------

class game_harem_compete_clear_ack : public ::google::protobuf::Message {
 public:
  game_harem_compete_clear_ack();
  virtual ~game_harem_compete_clear_ack();

  game_harem_compete_clear_ack(const game_harem_compete_clear_ack& from);

  inline game_harem_compete_clear_ack& operator=(const game_harem_compete_clear_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_harem_compete_clear_ack& default_instance();

  void Swap(game_harem_compete_clear_ack* other);

  // implements Message ----------------------------------------------

  game_harem_compete_clear_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_harem_compete_clear_ack& from);
  void MergeFrom(const game_harem_compete_clear_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_clear_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_harem_compete_clear_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_harem_compete_clear_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_harem_compete_status_ntf : public ::google::protobuf::Message {
 public:
  game_harem_compete_status_ntf();
  virtual ~game_harem_compete_status_ntf();

  game_harem_compete_status_ntf(const game_harem_compete_status_ntf& from);

  inline game_harem_compete_status_ntf& operator=(const game_harem_compete_status_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_harem_compete_status_ntf& default_instance();

  void Swap(game_harem_compete_status_ntf* other);

  // implements Message ----------------------------------------------

  game_harem_compete_status_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_harem_compete_status_ntf& from);
  void MergeFrom(const game_harem_compete_status_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_status_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.ESLAPPROGRESS progress = 2;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 2;
  inline ::SProtoSpace::ESLAPPROGRESS progress() const;
  inline void set_progress(::SProtoSpace::ESLAPPROGRESS value);

  // optional uint64 end_time = 3;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_harem_compete_status_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_progress();
  inline void clear_has_progress();
  inline void set_has_end_time();
  inline void clear_has_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  int progress_;
  ::google::protobuf::uint64 end_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_harem_compete_status_ntf* default_instance_;
};
// -------------------------------------------------------------------

class game_harem_compete_redpoint_req : public ::google::protobuf::Message {
 public:
  game_harem_compete_redpoint_req();
  virtual ~game_harem_compete_redpoint_req();

  game_harem_compete_redpoint_req(const game_harem_compete_redpoint_req& from);

  inline game_harem_compete_redpoint_req& operator=(const game_harem_compete_redpoint_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_harem_compete_redpoint_req& default_instance();

  void Swap(game_harem_compete_redpoint_req* other);

  // implements Message ----------------------------------------------

  game_harem_compete_redpoint_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_harem_compete_redpoint_req& from);
  void MergeFrom(const game_harem_compete_redpoint_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_redpoint_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.EHAREMTYPE type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::SProtoSpace::EHAREMTYPE type() const;
  inline void set_type(::SProtoSpace::EHAREMTYPE value);

  // optional uint64 red_time = 3;
  inline bool has_red_time() const;
  inline void clear_red_time();
  static const int kRedTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 red_time() const;
  inline void set_red_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_harem_compete_redpoint_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_red_time();
  inline void clear_has_red_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  int type_;
  ::google::protobuf::uint64 red_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_harem_compete_redpoint_req* default_instance_;
};
// -------------------------------------------------------------------

class game_harem_compete_redpoint_ack : public ::google::protobuf::Message {
 public:
  game_harem_compete_redpoint_ack();
  virtual ~game_harem_compete_redpoint_ack();

  game_harem_compete_redpoint_ack(const game_harem_compete_redpoint_ack& from);

  inline game_harem_compete_redpoint_ack& operator=(const game_harem_compete_redpoint_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_harem_compete_redpoint_ack& default_instance();

  void Swap(game_harem_compete_redpoint_ack* other);

  // implements Message ----------------------------------------------

  game_harem_compete_redpoint_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_harem_compete_redpoint_ack& from);
  void MergeFrom(const game_harem_compete_redpoint_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_redpoint_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_harem_compete_redpoint_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_harem_compete_redpoint_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_harem_compete_share_req : public ::google::protobuf::Message {
 public:
  game_harem_compete_share_req();
  virtual ~game_harem_compete_share_req();

  game_harem_compete_share_req(const game_harem_compete_share_req& from);

  inline game_harem_compete_share_req& operator=(const game_harem_compete_share_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_harem_compete_share_req& default_instance();

  void Swap(game_harem_compete_share_req* other);

  // implements Message ----------------------------------------------

  game_harem_compete_share_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_harem_compete_share_req& from);
  void MergeFrom(const game_harem_compete_share_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_share_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.EHAREMSHARETYPE type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::SProtoSpace::EHAREMSHARETYPE type() const;
  inline void set_type(::SProtoSpace::EHAREMSHARETYPE value);

  // optional uint64 event_id = 3;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 3;
  inline ::google::protobuf::uint64 event_id() const;
  inline void set_event_id(::google::protobuf::uint64 value);

  // optional uint32 world_channel_id = 4;
  inline bool has_world_channel_id() const;
  inline void clear_world_channel_id();
  static const int kWorldChannelIdFieldNumber = 4;
  inline ::google::protobuf::uint32 world_channel_id() const;
  inline void set_world_channel_id(::google::protobuf::uint32 value);

  // optional string content = 5;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 5;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_harem_compete_share_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_world_channel_id();
  inline void clear_has_world_channel_id();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  int type_;
  ::google::protobuf::uint64 event_id_;
  ::std::string* content_;
  ::google::protobuf::uint32 world_channel_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_harem_compete_share_req* default_instance_;
};
// -------------------------------------------------------------------

class game_harem_compete_share_ack : public ::google::protobuf::Message {
 public:
  game_harem_compete_share_ack();
  virtual ~game_harem_compete_share_ack();

  game_harem_compete_share_ack(const game_harem_compete_share_ack& from);

  inline game_harem_compete_share_ack& operator=(const game_harem_compete_share_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_harem_compete_share_ack& default_instance();

  void Swap(game_harem_compete_share_ack* other);

  // implements Message ----------------------------------------------

  game_harem_compete_share_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_harem_compete_share_ack& from);
  void MergeFrom(const game_harem_compete_share_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_share_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_harem_compete_share_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_harem_compete_share_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_harem_compete_get_event_req : public ::google::protobuf::Message {
 public:
  game_harem_compete_get_event_req();
  virtual ~game_harem_compete_get_event_req();

  game_harem_compete_get_event_req(const game_harem_compete_get_event_req& from);

  inline game_harem_compete_get_event_req& operator=(const game_harem_compete_get_event_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_harem_compete_get_event_req& default_instance();

  void Swap(game_harem_compete_get_event_req* other);

  // implements Message ----------------------------------------------

  game_harem_compete_get_event_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_harem_compete_get_event_req& from);
  void MergeFrom(const game_harem_compete_get_event_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_get_event_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 event_id = 2;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 2;
  inline ::google::protobuf::uint64 event_id() const;
  inline void set_event_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_harem_compete_get_event_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_event_id();
  inline void clear_has_event_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 event_id_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_harem_compete_get_event_req* default_instance_;
};
// -------------------------------------------------------------------

class game_harem_compete_get_event_ack : public ::google::protobuf::Message {
 public:
  game_harem_compete_get_event_ack();
  virtual ~game_harem_compete_get_event_ack();

  game_harem_compete_get_event_ack(const game_harem_compete_get_event_ack& from);

  inline game_harem_compete_get_event_ack& operator=(const game_harem_compete_get_event_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_harem_compete_get_event_ack& default_instance();

  void Swap(game_harem_compete_get_event_ack* other);

  // implements Message ----------------------------------------------

  game_harem_compete_get_event_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_harem_compete_get_event_ack& from);
  void MergeFrom(const game_harem_compete_get_event_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_get_event_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.harem_compete_event event = 2;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 2;
  inline const ::SProtoSpace::harem_compete_event& event() const;
  inline ::SProtoSpace::harem_compete_event* mutable_event();
  inline ::SProtoSpace::harem_compete_event* release_event();
  inline void set_allocated_event(::SProtoSpace::harem_compete_event* event);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_harem_compete_get_event_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_event();
  inline void clear_has_event();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::harem_compete_event* event_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_harem_compete_get_event_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_harem_compete_tribute_req : public ::google::protobuf::Message {
 public:
  game_harem_compete_tribute_req();
  virtual ~game_harem_compete_tribute_req();

  game_harem_compete_tribute_req(const game_harem_compete_tribute_req& from);

  inline game_harem_compete_tribute_req& operator=(const game_harem_compete_tribute_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_harem_compete_tribute_req& default_instance();

  void Swap(game_harem_compete_tribute_req* other);

  // implements Message ----------------------------------------------

  game_harem_compete_tribute_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_harem_compete_tribute_req& from);
  void MergeFrom(const game_harem_compete_tribute_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_tribute_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  inline ::google::protobuf::uint64 target_id() const;
  inline void set_target_id(::google::protobuf::uint64 value);

  // optional string target_name = 3;
  inline bool has_target_name() const;
  inline void clear_target_name();
  static const int kTargetNameFieldNumber = 3;
  inline const ::std::string& target_name() const;
  inline void set_target_name(const ::std::string& value);
  inline void set_target_name(const char* value);
  inline void set_target_name(const char* value, size_t size);
  inline ::std::string* mutable_target_name();
  inline ::std::string* release_target_name();
  inline void set_allocated_target_name(::std::string* target_name);

  // optional uint32 tribute_id = 4;
  inline bool has_tribute_id() const;
  inline void clear_tribute_id();
  static const int kTributeIdFieldNumber = 4;
  inline ::google::protobuf::uint32 tribute_id() const;
  inline void set_tribute_id(::google::protobuf::uint32 value);

  // optional uint32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_harem_compete_tribute_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_target_name();
  inline void clear_has_target_name();
  inline void set_has_tribute_id();
  inline void clear_has_tribute_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 target_id_;
  int proto_id_;
  ::google::protobuf::uint32 tribute_id_;
  ::std::string* target_name_;
  ::std::string* content_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_harem_compete_tribute_req* default_instance_;
};
// -------------------------------------------------------------------

class game_harem_compete_tribute_ack : public ::google::protobuf::Message {
 public:
  game_harem_compete_tribute_ack();
  virtual ~game_harem_compete_tribute_ack();

  game_harem_compete_tribute_ack(const game_harem_compete_tribute_ack& from);

  inline game_harem_compete_tribute_ack& operator=(const game_harem_compete_tribute_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_harem_compete_tribute_ack& default_instance();

  void Swap(game_harem_compete_tribute_ack* other);

  // implements Message ----------------------------------------------

  game_harem_compete_tribute_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_harem_compete_tribute_ack& from);
  void MergeFrom(const game_harem_compete_tribute_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_tribute_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_harem_compete_tribute_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static game_harem_compete_tribute_ack* default_instance_;
};
// -------------------------------------------------------------------

class create_3dchat_room_req : public ::google::protobuf::Message {
 public:
  create_3dchat_room_req();
  virtual ~create_3dchat_room_req();

  create_3dchat_room_req(const create_3dchat_room_req& from);

  inline create_3dchat_room_req& operator=(const create_3dchat_room_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const create_3dchat_room_req& default_instance();

  void Swap(create_3dchat_room_req* other);

  // implements Message ----------------------------------------------

  create_3dchat_room_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const create_3dchat_room_req& from);
  void MergeFrom(const create_3dchat_room_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_3dchat_room_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 room_conf_id = 2;
  inline bool has_room_conf_id() const;
  inline void clear_room_conf_id();
  static const int kRoomConfIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_conf_id() const;
  inline void set_room_conf_id(::google::protobuf::int32 value);

  // optional string room_name = 3;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 3;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  inline ::std::string* release_room_name();
  inline void set_allocated_room_name(::std::string* room_name);

  // optional string token = 4;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 4;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:SProtoSpace.create_3dchat_room_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_room_conf_id();
  inline void clear_has_room_conf_id();
  inline void set_has_room_name();
  inline void clear_has_room_name();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 room_conf_id_;
  ::std::string* room_name_;
  ::std::string* token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static create_3dchat_room_req* default_instance_;
};
// -------------------------------------------------------------------

class create_3dchat_room_ack : public ::google::protobuf::Message {
 public:
  create_3dchat_room_ack();
  virtual ~create_3dchat_room_ack();

  create_3dchat_room_ack(const create_3dchat_room_ack& from);

  inline create_3dchat_room_ack& operator=(const create_3dchat_room_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const create_3dchat_room_ack& default_instance();

  void Swap(create_3dchat_room_ack* other);

  // implements Message ----------------------------------------------

  create_3dchat_room_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const create_3dchat_room_ack& from);
  void MergeFrom(const create_3dchat_room_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_3dchat_room_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional int32 room_conf_id = 3;
  inline bool has_room_conf_id() const;
  inline void clear_room_conf_id();
  static const int kRoomConfIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_conf_id() const;
  inline void set_room_conf_id(::google::protobuf::int32 value);

  // optional string room_name = 4;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 4;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  inline ::std::string* release_room_name();
  inline void set_allocated_room_name(::std::string* room_name);

  // optional string token = 5;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 5;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:SProtoSpace.create_3dchat_room_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_room_conf_id();
  inline void clear_has_room_conf_id();
  inline void set_has_room_name();
  inline void clear_has_room_name();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::std::string* room_name_;
  ::std::string* token_;
  ::google::protobuf::int32 room_conf_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static create_3dchat_room_ack* default_instance_;
};
// -------------------------------------------------------------------

class enter_chat_room_req : public ::google::protobuf::Message {
 public:
  enter_chat_room_req();
  virtual ~enter_chat_room_req();

  enter_chat_room_req(const enter_chat_room_req& from);

  inline enter_chat_room_req& operator=(const enter_chat_room_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_chat_room_req& default_instance();

  void Swap(enter_chat_room_req* other);

  // implements Message ----------------------------------------------

  enter_chat_room_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enter_chat_room_req& from);
  void MergeFrom(const enter_chat_room_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_chat_room_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional string token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:SProtoSpace.enter_chat_room_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 room_id_;
  ::std::string* token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static enter_chat_room_req* default_instance_;
};
// -------------------------------------------------------------------

class enter_chat_room_ack : public ::google::protobuf::Message {
 public:
  enter_chat_room_ack();
  virtual ~enter_chat_room_ack();

  enter_chat_room_ack(const enter_chat_room_ack& from);

  inline enter_chat_room_ack& operator=(const enter_chat_room_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_chat_room_ack& default_instance();

  void Swap(enter_chat_room_ack* other);

  // implements Message ----------------------------------------------

  enter_chat_room_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enter_chat_room_ack& from);
  void MergeFrom(const enter_chat_room_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_chat_room_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.enter_chat_room_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static enter_chat_room_ack* default_instance_;
};
// -------------------------------------------------------------------

class exit_chat_room_req : public ::google::protobuf::Message {
 public:
  exit_chat_room_req();
  virtual ~exit_chat_room_req();

  exit_chat_room_req(const exit_chat_room_req& from);

  inline exit_chat_room_req& operator=(const exit_chat_room_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const exit_chat_room_req& default_instance();

  void Swap(exit_chat_room_req* other);

  // implements Message ----------------------------------------------

  exit_chat_room_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const exit_chat_room_req& from);
  void MergeFrom(const exit_chat_room_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_chat_room_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.exit_chat_room_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static exit_chat_room_req* default_instance_;
};
// -------------------------------------------------------------------

class exit_chat_room_ack : public ::google::protobuf::Message {
 public:
  exit_chat_room_ack();
  virtual ~exit_chat_room_ack();

  exit_chat_room_ack(const exit_chat_room_ack& from);

  inline exit_chat_room_ack& operator=(const exit_chat_room_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const exit_chat_room_ack& default_instance();

  void Swap(exit_chat_room_ack* other);

  // implements Message ----------------------------------------------

  exit_chat_room_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const exit_chat_room_ack& from);
  void MergeFrom(const exit_chat_room_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_chat_room_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.exit_chat_room_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static exit_chat_room_ack* default_instance_;
};
// -------------------------------------------------------------------

class update_chat_room_players_ntf : public ::google::protobuf::Message {
 public:
  update_chat_room_players_ntf();
  virtual ~update_chat_room_players_ntf();

  update_chat_room_players_ntf(const update_chat_room_players_ntf& from);

  inline update_chat_room_players_ntf& operator=(const update_chat_room_players_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_chat_room_players_ntf& default_instance();

  void Swap(update_chat_room_players_ntf* other);

  // implements Message ----------------------------------------------

  update_chat_room_players_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_chat_room_players_ntf& from);
  void MergeFrom(const update_chat_room_players_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_chat_room_players_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // repeated .SProtoSpace.role_base_3part add_players = 3;
  inline int add_players_size() const;
  inline void clear_add_players();
  static const int kAddPlayersFieldNumber = 3;
  inline const ::SProtoSpace::role_base_3part& add_players(int index) const;
  inline ::SProtoSpace::role_base_3part* mutable_add_players(int index);
  inline ::SProtoSpace::role_base_3part* add_add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_base_3part >&
      add_players() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_base_3part >*
      mutable_add_players();

  // repeated .SProtoSpace.role_base_3part del_players = 4;
  inline int del_players_size() const;
  inline void clear_del_players();
  static const int kDelPlayersFieldNumber = 4;
  inline const ::SProtoSpace::role_base_3part& del_players(int index) const;
  inline ::SProtoSpace::role_base_3part* mutable_del_players(int index);
  inline ::SProtoSpace::role_base_3part* add_del_players();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_base_3part >&
      del_players() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_base_3part >*
      mutable_del_players();

  // @@protoc_insertion_point(class_scope:SProtoSpace.update_chat_room_players_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_base_3part > add_players_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_base_3part > del_players_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static update_chat_room_players_ntf* default_instance_;
};
// -------------------------------------------------------------------

class update_chat_view_ntf : public ::google::protobuf::Message {
 public:
  update_chat_view_ntf();
  virtual ~update_chat_view_ntf();

  update_chat_view_ntf(const update_chat_view_ntf& from);

  inline update_chat_view_ntf& operator=(const update_chat_view_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_chat_view_ntf& default_instance();

  void Swap(update_chat_view_ntf* other);

  // implements Message ----------------------------------------------

  update_chat_view_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_chat_view_ntf& from);
  void MergeFrom(const update_chat_view_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_chat_view_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.role_position fix_list = 2;
  inline int fix_list_size() const;
  inline void clear_fix_list();
  static const int kFixListFieldNumber = 2;
  inline const ::SProtoSpace::role_position& fix_list(int index) const;
  inline ::SProtoSpace::role_position* mutable_fix_list(int index);
  inline ::SProtoSpace::role_position* add_fix_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_position >&
      fix_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_position >*
      mutable_fix_list();

  // repeated .SProtoSpace.role_position add_list = 3;
  inline int add_list_size() const;
  inline void clear_add_list();
  static const int kAddListFieldNumber = 3;
  inline const ::SProtoSpace::role_position& add_list(int index) const;
  inline ::SProtoSpace::role_position* mutable_add_list(int index);
  inline ::SProtoSpace::role_position* add_add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_position >&
      add_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_position >*
      mutable_add_list();

  // repeated .SProtoSpace.role_position del_list = 4;
  inline int del_list_size() const;
  inline void clear_del_list();
  static const int kDelListFieldNumber = 4;
  inline const ::SProtoSpace::role_position& del_list(int index) const;
  inline ::SProtoSpace::role_position* mutable_del_list(int index);
  inline ::SProtoSpace::role_position* add_del_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_position >&
      del_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_position >*
      mutable_del_list();

  // @@protoc_insertion_point(class_scope:SProtoSpace.update_chat_view_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_position > fix_list_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_position > add_list_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_position > del_list_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static update_chat_view_ntf* default_instance_;
};
// -------------------------------------------------------------------

class report_position_req : public ::google::protobuf::Message {
 public:
  report_position_req();
  virtual ~report_position_req();

  report_position_req(const report_position_req& from);

  inline report_position_req& operator=(const report_position_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const report_position_req& default_instance();

  void Swap(report_position_req* other);

  // implements Message ----------------------------------------------

  report_position_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const report_position_req& from);
  void MergeFrom(const report_position_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = report_position_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.role_position cur_pos = 3;
  inline bool has_cur_pos() const;
  inline void clear_cur_pos();
  static const int kCurPosFieldNumber = 3;
  inline const ::SProtoSpace::role_position& cur_pos() const;
  inline ::SProtoSpace::role_position* mutable_cur_pos();
  inline ::SProtoSpace::role_position* release_cur_pos();
  inline void set_allocated_cur_pos(::SProtoSpace::role_position* cur_pos);

  // @@protoc_insertion_point(class_scope:SProtoSpace.report_position_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_cur_pos();
  inline void clear_has_cur_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 room_id_;
  ::SProtoSpace::role_position* cur_pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static report_position_req* default_instance_;
};
// -------------------------------------------------------------------

class report_position_ack : public ::google::protobuf::Message {
 public:
  report_position_ack();
  virtual ~report_position_ack();

  report_position_ack(const report_position_ack& from);

  inline report_position_ack& operator=(const report_position_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const report_position_ack& default_instance();

  void Swap(report_position_ack* other);

  // implements Message ----------------------------------------------

  report_position_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const report_position_ack& from);
  void MergeFrom(const report_position_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = report_position_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.role_position cur_pos = 4;
  inline bool has_cur_pos() const;
  inline void clear_cur_pos();
  static const int kCurPosFieldNumber = 4;
  inline const ::SProtoSpace::role_position& cur_pos() const;
  inline ::SProtoSpace::role_position* mutable_cur_pos();
  inline ::SProtoSpace::role_position* release_cur_pos();
  inline void set_allocated_cur_pos(::SProtoSpace::role_position* cur_pos);

  // @@protoc_insertion_point(class_scope:SProtoSpace.report_position_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_cur_pos();
  inline void clear_has_cur_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::SProtoSpace::role_position* cur_pos_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static report_position_ack* default_instance_;
};
// -------------------------------------------------------------------

class get_role_position_req : public ::google::protobuf::Message {
 public:
  get_role_position_req();
  virtual ~get_role_position_req();

  get_role_position_req(const get_role_position_req& from);

  inline get_role_position_req& operator=(const get_role_position_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_role_position_req& default_instance();

  void Swap(get_role_position_req* other);

  // implements Message ----------------------------------------------

  get_role_position_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_role_position_req& from);
  void MergeFrom(const get_role_position_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_position_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 dest_id = 2;
  inline bool has_dest_id() const;
  inline void clear_dest_id();
  static const int kDestIdFieldNumber = 2;
  inline ::google::protobuf::uint64 dest_id() const;
  inline void set_dest_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_role_position_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_dest_id();
  inline void clear_has_dest_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 dest_id_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static get_role_position_req* default_instance_;
};
// -------------------------------------------------------------------

class get_role_position_ack : public ::google::protobuf::Message {
 public:
  get_role_position_ack();
  virtual ~get_role_position_ack();

  get_role_position_ack(const get_role_position_ack& from);

  inline get_role_position_ack& operator=(const get_role_position_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_role_position_ack& default_instance();

  void Swap(get_role_position_ack* other);

  // implements Message ----------------------------------------------

  get_role_position_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_role_position_ack& from);
  void MergeFrom(const get_role_position_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_position_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.role_position dest_pos = 4;
  inline bool has_dest_pos() const;
  inline void clear_dest_pos();
  static const int kDestPosFieldNumber = 4;
  inline const ::SProtoSpace::role_position& dest_pos() const;
  inline ::SProtoSpace::role_position* mutable_dest_pos();
  inline ::SProtoSpace::role_position* release_dest_pos();
  inline void set_allocated_dest_pos(::SProtoSpace::role_position* dest_pos);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_role_position_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_dest_pos();
  inline void clear_has_dest_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::SProtoSpace::role_position* dest_pos_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static get_role_position_ack* default_instance_;
};
// -------------------------------------------------------------------

class get_chat_room_list_req : public ::google::protobuf::Message {
 public:
  get_chat_room_list_req();
  virtual ~get_chat_room_list_req();

  get_chat_room_list_req(const get_chat_room_list_req& from);

  inline get_chat_room_list_req& operator=(const get_chat_room_list_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_chat_room_list_req& default_instance();

  void Swap(get_chat_room_list_req* other);

  // implements Message ----------------------------------------------

  get_chat_room_list_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_chat_room_list_req& from);
  void MergeFrom(const get_chat_room_list_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_chat_room_list_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 index_start = 2;
  inline bool has_index_start() const;
  inline void clear_index_start();
  static const int kIndexStartFieldNumber = 2;
  inline ::google::protobuf::int32 index_start() const;
  inline void set_index_start(::google::protobuf::int32 value);

  // optional int32 index_end = 3;
  inline bool has_index_end() const;
  inline void clear_index_end();
  static const int kIndexEndFieldNumber = 3;
  inline ::google::protobuf::int32 index_end() const;
  inline void set_index_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_chat_room_list_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_index_start();
  inline void clear_has_index_start();
  inline void set_has_index_end();
  inline void clear_has_index_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 index_start_;
  ::google::protobuf::int32 index_end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static get_chat_room_list_req* default_instance_;
};
// -------------------------------------------------------------------

class get_chat_room_list_ack : public ::google::protobuf::Message {
 public:
  get_chat_room_list_ack();
  virtual ~get_chat_room_list_ack();

  get_chat_room_list_ack(const get_chat_room_list_ack& from);

  inline get_chat_room_list_ack& operator=(const get_chat_room_list_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_chat_room_list_ack& default_instance();

  void Swap(get_chat_room_list_ack* other);

  // implements Message ----------------------------------------------

  get_chat_room_list_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_chat_room_list_ack& from);
  void MergeFrom(const get_chat_room_list_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_chat_room_list_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 index_start = 3;
  inline bool has_index_start() const;
  inline void clear_index_start();
  static const int kIndexStartFieldNumber = 3;
  inline ::google::protobuf::int32 index_start() const;
  inline void set_index_start(::google::protobuf::int32 value);

  // optional int32 index_end = 4;
  inline bool has_index_end() const;
  inline void clear_index_end();
  static const int kIndexEndFieldNumber = 4;
  inline ::google::protobuf::int32 index_end() const;
  inline void set_index_end(::google::protobuf::int32 value);

  // repeated .SProtoSpace.chat_room_state rooms = 5;
  inline int rooms_size() const;
  inline void clear_rooms();
  static const int kRoomsFieldNumber = 5;
  inline const ::SProtoSpace::chat_room_state& rooms(int index) const;
  inline ::SProtoSpace::chat_room_state* mutable_rooms(int index);
  inline ::SProtoSpace::chat_room_state* add_rooms();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chat_room_state >&
      rooms() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chat_room_state >*
      mutable_rooms();

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_chat_room_list_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_index_start();
  inline void clear_has_index_start();
  inline void set_has_index_end();
  inline void clear_has_index_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 index_start_;
  ::google::protobuf::int32 index_end_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chat_room_state > rooms_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static get_chat_room_list_ack* default_instance_;
};
// -------------------------------------------------------------------

class member_kick_3d_chat_room_req : public ::google::protobuf::Message {
 public:
  member_kick_3d_chat_room_req();
  virtual ~member_kick_3d_chat_room_req();

  member_kick_3d_chat_room_req(const member_kick_3d_chat_room_req& from);

  inline member_kick_3d_chat_room_req& operator=(const member_kick_3d_chat_room_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const member_kick_3d_chat_room_req& default_instance();

  void Swap(member_kick_3d_chat_room_req* other);

  // implements Message ----------------------------------------------

  member_kick_3d_chat_room_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const member_kick_3d_chat_room_req& from);
  void MergeFrom(const member_kick_3d_chat_room_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = member_kick_3d_chat_room_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 kicked_role_id = 2;
  inline bool has_kicked_role_id() const;
  inline void clear_kicked_role_id();
  static const int kKickedRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 kicked_role_id() const;
  inline void set_kicked_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.member_kick_3d_chat_room_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_kicked_role_id();
  inline void clear_has_kicked_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 kicked_role_id_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static member_kick_3d_chat_room_req* default_instance_;
};
// -------------------------------------------------------------------

class member_kick_3d_chat_room_ack : public ::google::protobuf::Message {
 public:
  member_kick_3d_chat_room_ack();
  virtual ~member_kick_3d_chat_room_ack();

  member_kick_3d_chat_room_ack(const member_kick_3d_chat_room_ack& from);

  inline member_kick_3d_chat_room_ack& operator=(const member_kick_3d_chat_room_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const member_kick_3d_chat_room_ack& default_instance();

  void Swap(member_kick_3d_chat_room_ack* other);

  // implements Message ----------------------------------------------

  member_kick_3d_chat_room_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const member_kick_3d_chat_room_ack& from);
  void MergeFrom(const member_kick_3d_chat_room_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = member_kick_3d_chat_room_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 kicked_role_id = 3;
  inline bool has_kicked_role_id() const;
  inline void clear_kicked_role_id();
  static const int kKickedRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 kicked_role_id() const;
  inline void set_kicked_role_id(::google::protobuf::uint64 value);

  // optional uint64 sour_role_id = 4;
  inline bool has_sour_role_id() const;
  inline void clear_sour_role_id();
  static const int kSourRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 sour_role_id() const;
  inline void set_sour_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.member_kick_3d_chat_room_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_kicked_role_id();
  inline void clear_has_kicked_role_id();
  inline void set_has_sour_role_id();
  inline void clear_has_sour_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 kicked_role_id_;
  ::google::protobuf::uint64 sour_role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static member_kick_3d_chat_room_ack* default_instance_;
};
// -------------------------------------------------------------------

class get_hang_up_award_ntf : public ::google::protobuf::Message {
 public:
  get_hang_up_award_ntf();
  virtual ~get_hang_up_award_ntf();

  get_hang_up_award_ntf(const get_hang_up_award_ntf& from);

  inline get_hang_up_award_ntf& operator=(const get_hang_up_award_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_hang_up_award_ntf& default_instance();

  void Swap(get_hang_up_award_ntf* other);

  // implements Message ----------------------------------------------

  get_hang_up_award_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_hang_up_award_ntf& from);
  void MergeFrom(const get_hang_up_award_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_hang_up_award_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.reward_item fix_items = 2;
  inline bool has_fix_items() const;
  inline void clear_fix_items();
  static const int kFixItemsFieldNumber = 2;
  inline const ::SProtoSpace::reward_item& fix_items() const;
  inline ::SProtoSpace::reward_item* mutable_fix_items();
  inline ::SProtoSpace::reward_item* release_fix_items();
  inline void set_allocated_fix_items(::SProtoSpace::reward_item* fix_items);

  // optional .SProtoSpace.reward_item random_items = 3;
  inline bool has_random_items() const;
  inline void clear_random_items();
  static const int kRandomItemsFieldNumber = 3;
  inline const ::SProtoSpace::reward_item& random_items() const;
  inline ::SProtoSpace::reward_item* mutable_random_items();
  inline ::SProtoSpace::reward_item* release_random_items();
  inline void set_allocated_random_items(::SProtoSpace::reward_item* random_items);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_hang_up_award_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_fix_items();
  inline void clear_has_fix_items();
  inline void set_has_random_items();
  inline void clear_has_random_items();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::reward_item* fix_items_;
  ::SProtoSpace::reward_item* random_items_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static get_hang_up_award_ntf* default_instance_;
};
// -------------------------------------------------------------------

class get_hang_up_info_ntf : public ::google::protobuf::Message {
 public:
  get_hang_up_info_ntf();
  virtual ~get_hang_up_info_ntf();

  get_hang_up_info_ntf(const get_hang_up_info_ntf& from);

  inline get_hang_up_info_ntf& operator=(const get_hang_up_info_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_hang_up_info_ntf& default_instance();

  void Swap(get_hang_up_info_ntf* other);

  // implements Message ----------------------------------------------

  get_hang_up_info_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_hang_up_info_ntf& from);
  void MergeFrom(const get_hang_up_info_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_hang_up_info_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 count_down = 2;
  inline bool has_count_down() const;
  inline void clear_count_down();
  static const int kCountDownFieldNumber = 2;
  inline ::google::protobuf::int32 count_down() const;
  inline void set_count_down(::google::protobuf::int32 value);

  // optional int32 completion_times = 3;
  inline bool has_completion_times() const;
  inline void clear_completion_times();
  static const int kCompletionTimesFieldNumber = 3;
  inline ::google::protobuf::int32 completion_times() const;
  inline void set_completion_times(::google::protobuf::int32 value);

  // optional int32 total_times = 4;
  inline bool has_total_times() const;
  inline void clear_total_times();
  static const int kTotalTimesFieldNumber = 4;
  inline ::google::protobuf::int32 total_times() const;
  inline void set_total_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_hang_up_info_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_count_down();
  inline void clear_has_count_down();
  inline void set_has_completion_times();
  inline void clear_has_completion_times();
  inline void set_has_total_times();
  inline void clear_has_total_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 count_down_;
  ::google::protobuf::int32 completion_times_;
  ::google::protobuf::int32 total_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static get_hang_up_info_ntf* default_instance_;
};
// -------------------------------------------------------------------

class update_chat_room_data_ntf : public ::google::protobuf::Message {
 public:
  update_chat_room_data_ntf();
  virtual ~update_chat_room_data_ntf();

  update_chat_room_data_ntf(const update_chat_room_data_ntf& from);

  inline update_chat_room_data_ntf& operator=(const update_chat_room_data_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_chat_room_data_ntf& default_instance();

  void Swap(update_chat_room_data_ntf* other);

  // implements Message ----------------------------------------------

  update_chat_room_data_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_chat_room_data_ntf& from);
  void MergeFrom(const update_chat_room_data_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_chat_room_data_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 owner_id = 2;
  inline bool has_owner_id() const;
  inline void clear_owner_id();
  static const int kOwnerIdFieldNumber = 2;
  inline ::google::protobuf::uint64 owner_id() const;
  inline void set_owner_id(::google::protobuf::uint64 value);

  // optional int32 room_conf_id = 3;
  inline bool has_room_conf_id() const;
  inline void clear_room_conf_id();
  static const int kRoomConfIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_conf_id() const;
  inline void set_room_conf_id(::google::protobuf::int32 value);

  // optional int64 total_fight_power = 4;
  inline bool has_total_fight_power() const;
  inline void clear_total_fight_power();
  static const int kTotalFightPowerFieldNumber = 4;
  inline ::google::protobuf::int64 total_fight_power() const;
  inline void set_total_fight_power(::google::protobuf::int64 value);

  // optional string room_name = 5;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 5;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  inline ::std::string* release_room_name();
  inline void set_allocated_room_name(::std::string* room_name);

  // optional bool is_top = 6;
  inline bool has_is_top() const;
  inline void clear_is_top();
  static const int kIsTopFieldNumber = 6;
  inline bool is_top() const;
  inline void set_is_top(bool value);

  // optional int32 top_left_time = 7;
  inline bool has_top_left_time() const;
  inline void clear_top_left_time();
  static const int kTopLeftTimeFieldNumber = 7;
  inline ::google::protobuf::int32 top_left_time() const;
  inline void set_top_left_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.update_chat_room_data_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_owner_id();
  inline void clear_has_owner_id();
  inline void set_has_room_conf_id();
  inline void clear_has_room_conf_id();
  inline void set_has_total_fight_power();
  inline void clear_has_total_fight_power();
  inline void set_has_room_name();
  inline void clear_has_room_name();
  inline void set_has_is_top();
  inline void clear_has_is_top();
  inline void set_has_top_left_time();
  inline void clear_has_top_left_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 owner_id_;
  int proto_id_;
  ::google::protobuf::int32 room_conf_id_;
  ::google::protobuf::int64 total_fight_power_;
  ::std::string* room_name_;
  bool is_top_;
  ::google::protobuf::int32 top_left_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static update_chat_room_data_ntf* default_instance_;
};
// -------------------------------------------------------------------

class get_3d_chat_room_pos_req : public ::google::protobuf::Message {
 public:
  get_3d_chat_room_pos_req();
  virtual ~get_3d_chat_room_pos_req();

  get_3d_chat_room_pos_req(const get_3d_chat_room_pos_req& from);

  inline get_3d_chat_room_pos_req& operator=(const get_3d_chat_room_pos_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_3d_chat_room_pos_req& default_instance();

  void Swap(get_3d_chat_room_pos_req* other);

  // implements Message ----------------------------------------------

  get_3d_chat_room_pos_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_3d_chat_room_pos_req& from);
  void MergeFrom(const get_3d_chat_room_pos_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_3d_chat_room_pos_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_3d_chat_room_pos_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static get_3d_chat_room_pos_req* default_instance_;
};
// -------------------------------------------------------------------

class get_3d_chat_room_pos_ack : public ::google::protobuf::Message {
 public:
  get_3d_chat_room_pos_ack();
  virtual ~get_3d_chat_room_pos_ack();

  get_3d_chat_room_pos_ack(const get_3d_chat_room_pos_ack& from);

  inline get_3d_chat_room_pos_ack& operator=(const get_3d_chat_room_pos_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_3d_chat_room_pos_ack& default_instance();

  void Swap(get_3d_chat_room_pos_ack* other);

  // implements Message ----------------------------------------------

  get_3d_chat_room_pos_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_3d_chat_room_pos_ack& from);
  void MergeFrom(const get_3d_chat_room_pos_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_3d_chat_room_pos_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional int32 pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_3d_chat_room_pos_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static get_3d_chat_room_pos_ack* default_instance_;
};
// -------------------------------------------------------------------

class top_3d_chat_room_req : public ::google::protobuf::Message {
 public:
  top_3d_chat_room_req();
  virtual ~top_3d_chat_room_req();

  top_3d_chat_room_req(const top_3d_chat_room_req& from);

  inline top_3d_chat_room_req& operator=(const top_3d_chat_room_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const top_3d_chat_room_req& default_instance();

  void Swap(top_3d_chat_room_req* other);

  // implements Message ----------------------------------------------

  top_3d_chat_room_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const top_3d_chat_room_req& from);
  void MergeFrom(const top_3d_chat_room_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = top_3d_chat_room_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional int32 item_conf_id = 3;
  inline bool has_item_conf_id() const;
  inline void clear_item_conf_id();
  static const int kItemConfIdFieldNumber = 3;
  inline ::google::protobuf::int32 item_conf_id() const;
  inline void set_item_conf_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.top_3d_chat_room_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_item_conf_id();
  inline void clear_has_item_conf_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 item_conf_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static top_3d_chat_room_req* default_instance_;
};
// -------------------------------------------------------------------

class top_3d_chat_room_ack : public ::google::protobuf::Message {
 public:
  top_3d_chat_room_ack();
  virtual ~top_3d_chat_room_ack();

  top_3d_chat_room_ack(const top_3d_chat_room_ack& from);

  inline top_3d_chat_room_ack& operator=(const top_3d_chat_room_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const top_3d_chat_room_ack& default_instance();

  void Swap(top_3d_chat_room_ack* other);

  // implements Message ----------------------------------------------

  top_3d_chat_room_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const top_3d_chat_room_ack& from);
  void MergeFrom(const top_3d_chat_room_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = top_3d_chat_room_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional int32 item_conf_id = 4;
  inline bool has_item_conf_id() const;
  inline void clear_item_conf_id();
  static const int kItemConfIdFieldNumber = 4;
  inline ::google::protobuf::int32 item_conf_id() const;
  inline void set_item_conf_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.top_3d_chat_room_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_item_conf_id();
  inline void clear_has_item_conf_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 item_conf_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static top_3d_chat_room_ack* default_instance_;
};
// -------------------------------------------------------------------

class change_name_3d_chat_room_req : public ::google::protobuf::Message {
 public:
  change_name_3d_chat_room_req();
  virtual ~change_name_3d_chat_room_req();

  change_name_3d_chat_room_req(const change_name_3d_chat_room_req& from);

  inline change_name_3d_chat_room_req& operator=(const change_name_3d_chat_room_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const change_name_3d_chat_room_req& default_instance();

  void Swap(change_name_3d_chat_room_req* other);

  // implements Message ----------------------------------------------

  change_name_3d_chat_room_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const change_name_3d_chat_room_req& from);
  void MergeFrom(const change_name_3d_chat_room_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = change_name_3d_chat_room_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional int32 item_conf_id = 3;
  inline bool has_item_conf_id() const;
  inline void clear_item_conf_id();
  static const int kItemConfIdFieldNumber = 3;
  inline ::google::protobuf::int32 item_conf_id() const;
  inline void set_item_conf_id(::google::protobuf::int32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:SProtoSpace.change_name_3d_chat_room_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_item_conf_id();
  inline void clear_has_item_conf_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 room_id_;
  ::std::string* name_;
  ::google::protobuf::int32 item_conf_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static change_name_3d_chat_room_req* default_instance_;
};
// -------------------------------------------------------------------

class change_name_3d_chat_room_ack : public ::google::protobuf::Message {
 public:
  change_name_3d_chat_room_ack();
  virtual ~change_name_3d_chat_room_ack();

  change_name_3d_chat_room_ack(const change_name_3d_chat_room_ack& from);

  inline change_name_3d_chat_room_ack& operator=(const change_name_3d_chat_room_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const change_name_3d_chat_room_ack& default_instance();

  void Swap(change_name_3d_chat_room_ack* other);

  // implements Message ----------------------------------------------

  change_name_3d_chat_room_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const change_name_3d_chat_room_ack& from);
  void MergeFrom(const change_name_3d_chat_room_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = change_name_3d_chat_room_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:SProtoSpace.change_name_3d_chat_room_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 ret_;
  ::std::string* name_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fsocial_2eproto();
  friend void protobuf_AssignDesc_cs_5fsocial_2eproto();
  friend void protobuf_ShutdownFile_cs_5fsocial_2eproto();

  void InitAsDefaultInstance();
  static change_name_3d_chat_room_ack* default_instance_;
};
// ===================================================================


// ===================================================================

// game_friends_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friends_ntf_id];
inline bool game_friends_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_friends_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_friends_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_friends_ntf::clear_proto_id() {
  proto_id_ = 6315;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_friends_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_friends_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// repeated .SProtoSpace.friend_base_info fd_infos = 2;
inline int game_friends_ntf::fd_infos_size() const {
  return fd_infos_.size();
}
inline void game_friends_ntf::clear_fd_infos() {
  fd_infos_.Clear();
}
inline const ::SProtoSpace::friend_base_info& game_friends_ntf::fd_infos(int index) const {
  return fd_infos_.Get(index);
}
inline ::SProtoSpace::friend_base_info* game_friends_ntf::mutable_fd_infos(int index) {
  return fd_infos_.Mutable(index);
}
inline ::SProtoSpace::friend_base_info* game_friends_ntf::add_fd_infos() {
  return fd_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >&
game_friends_ntf::fd_infos() const {
  return fd_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >*
game_friends_ntf::mutable_fd_infos() {
  return &fd_infos_;
}

// repeated .SProtoSpace.friend_base_info bl_infos = 3;
inline int game_friends_ntf::bl_infos_size() const {
  return bl_infos_.size();
}
inline void game_friends_ntf::clear_bl_infos() {
  bl_infos_.Clear();
}
inline const ::SProtoSpace::friend_base_info& game_friends_ntf::bl_infos(int index) const {
  return bl_infos_.Get(index);
}
inline ::SProtoSpace::friend_base_info* game_friends_ntf::mutable_bl_infos(int index) {
  return bl_infos_.Mutable(index);
}
inline ::SProtoSpace::friend_base_info* game_friends_ntf::add_bl_infos() {
  return bl_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >&
game_friends_ntf::bl_infos() const {
  return bl_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >*
game_friends_ntf::mutable_bl_infos() {
  return &bl_infos_;
}

// optional uint32 give_times = 4;
inline bool game_friends_ntf::has_give_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_friends_ntf::set_has_give_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_friends_ntf::clear_has_give_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_friends_ntf::clear_give_times() {
  give_times_ = 0u;
  clear_has_give_times();
}
inline ::google::protobuf::uint32 game_friends_ntf::give_times() const {
  return give_times_;
}
inline void game_friends_ntf::set_give_times(::google::protobuf::uint32 value) {
  set_has_give_times();
  give_times_ = value;
}

// optional uint32 draw_times = 5;
inline bool game_friends_ntf::has_draw_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void game_friends_ntf::set_has_draw_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void game_friends_ntf::clear_has_draw_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void game_friends_ntf::clear_draw_times() {
  draw_times_ = 0u;
  clear_has_draw_times();
}
inline ::google::protobuf::uint32 game_friends_ntf::draw_times() const {
  return draw_times_;
}
inline void game_friends_ntf::set_draw_times(::google::protobuf::uint32 value) {
  set_has_draw_times();
  draw_times_ = value;
}

// repeated uint64 give_ids = 6;
inline int game_friends_ntf::give_ids_size() const {
  return give_ids_.size();
}
inline void game_friends_ntf::clear_give_ids() {
  give_ids_.Clear();
}
inline ::google::protobuf::uint64 game_friends_ntf::give_ids(int index) const {
  return give_ids_.Get(index);
}
inline void game_friends_ntf::set_give_ids(int index, ::google::protobuf::uint64 value) {
  give_ids_.Set(index, value);
}
inline void game_friends_ntf::add_give_ids(::google::protobuf::uint64 value) {
  give_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
game_friends_ntf::give_ids() const {
  return give_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
game_friends_ntf::mutable_give_ids() {
  return &give_ids_;
}

// -------------------------------------------------------------------

// game_friend_refresh_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friend_refresh_req_id];
inline bool game_friend_refresh_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_friend_refresh_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_friend_refresh_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_friend_refresh_req::clear_proto_id() {
  proto_id_ = 6320;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_friend_refresh_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_friend_refresh_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 type = 2;
inline bool game_friend_refresh_req::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_friend_refresh_req::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_friend_refresh_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_friend_refresh_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 game_friend_refresh_req::type() const {
  return type_;
}
inline void game_friend_refresh_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// game_friend_refresh_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friend_refresh_ack_id];
inline bool game_friend_refresh_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_friend_refresh_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_friend_refresh_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_friend_refresh_ack::clear_proto_id() {
  proto_id_ = 6321;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_friend_refresh_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_friend_refresh_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// repeated .SProtoSpace.friend_base_info infos = 2;
inline int game_friend_refresh_ack::infos_size() const {
  return infos_.size();
}
inline void game_friend_refresh_ack::clear_infos() {
  infos_.Clear();
}
inline const ::SProtoSpace::friend_base_info& game_friend_refresh_ack::infos(int index) const {
  return infos_.Get(index);
}
inline ::SProtoSpace::friend_base_info* game_friend_refresh_ack::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::SProtoSpace::friend_base_info* game_friend_refresh_ack::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >&
game_friend_refresh_ack::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >*
game_friend_refresh_ack::mutable_infos() {
  return &infos_;
}

// optional uint32 type = 3;
inline bool game_friend_refresh_ack::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_friend_refresh_ack::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_friend_refresh_ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_friend_refresh_ack::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 game_friend_refresh_ack::type() const {
  return type_;
}
inline void game_friend_refresh_ack::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 ret = 4;
inline bool game_friend_refresh_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_friend_refresh_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_friend_refresh_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_friend_refresh_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_friend_refresh_ack::ret() const {
  return ret_;
}
inline void game_friend_refresh_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// friend_all_apply_info_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = friend_all_apply_info_ntf_id];
inline bool friend_all_apply_info_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_all_apply_info_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_all_apply_info_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_all_apply_info_ntf::clear_proto_id() {
  proto_id_ = 6302;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID friend_all_apply_info_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void friend_all_apply_info_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// repeated .SProtoSpace.friend_apply_info apply_infos = 2;
inline int friend_all_apply_info_ntf::apply_infos_size() const {
  return apply_infos_.size();
}
inline void friend_all_apply_info_ntf::clear_apply_infos() {
  apply_infos_.Clear();
}
inline const ::SProtoSpace::friend_apply_info& friend_all_apply_info_ntf::apply_infos(int index) const {
  return apply_infos_.Get(index);
}
inline ::SProtoSpace::friend_apply_info* friend_all_apply_info_ntf::mutable_apply_infos(int index) {
  return apply_infos_.Mutable(index);
}
inline ::SProtoSpace::friend_apply_info* friend_all_apply_info_ntf::add_apply_infos() {
  return apply_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_apply_info >&
friend_all_apply_info_ntf::apply_infos() const {
  return apply_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_apply_info >*
friend_all_apply_info_ntf::mutable_apply_infos() {
  return &apply_infos_;
}

// -------------------------------------------------------------------

// game_search_friend_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_search_friend_req_id];
inline bool game_search_friend_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_search_friend_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_search_friend_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_search_friend_req::clear_proto_id() {
  proto_id_ = 6300;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_search_friend_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_search_friend_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 type = 2;
inline bool game_search_friend_req::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_search_friend_req::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_search_friend_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_search_friend_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 game_search_friend_req::type() const {
  return type_;
}
inline void game_search_friend_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional string content = 3;
inline bool game_search_friend_req::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_search_friend_req::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_search_friend_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_search_friend_req::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& game_search_friend_req::content() const {
  return *content_;
}
inline void game_search_friend_req::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void game_search_friend_req::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void game_search_friend_req::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* game_search_friend_req::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* game_search_friend_req::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void game_search_friend_req::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// game_search_friend_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_search_friend_ack_id];
inline bool game_search_friend_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_search_friend_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_search_friend_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_search_friend_ack::clear_proto_id() {
  proto_id_ = 6301;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_search_friend_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_search_friend_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool game_search_friend_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_search_friend_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_search_friend_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_search_friend_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_search_friend_ack::ret() const {
  return ret_;
}
inline void game_search_friend_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .SProtoSpace.friend_base_info fd_infos = 3;
inline int game_search_friend_ack::fd_infos_size() const {
  return fd_infos_.size();
}
inline void game_search_friend_ack::clear_fd_infos() {
  fd_infos_.Clear();
}
inline const ::SProtoSpace::friend_base_info& game_search_friend_ack::fd_infos(int index) const {
  return fd_infos_.Get(index);
}
inline ::SProtoSpace::friend_base_info* game_search_friend_ack::mutable_fd_infos(int index) {
  return fd_infos_.Mutable(index);
}
inline ::SProtoSpace::friend_base_info* game_search_friend_ack::add_fd_infos() {
  return fd_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >&
game_search_friend_ack::fd_infos() const {
  return fd_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >*
game_search_friend_ack::mutable_fd_infos() {
  return &fd_infos_;
}

// -------------------------------------------------------------------

// game_get_recommend_friend_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_get_recommend_friend_req_id];
inline bool game_get_recommend_friend_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_get_recommend_friend_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_get_recommend_friend_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_get_recommend_friend_req::clear_proto_id() {
  proto_id_ = 6313;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_get_recommend_friend_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_get_recommend_friend_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool game_get_recommend_friend_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_get_recommend_friend_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_get_recommend_friend_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_get_recommend_friend_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 game_get_recommend_friend_req::uuid() const {
  return uuid_;
}
inline void game_get_recommend_friend_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 area_id = 3;
inline bool game_get_recommend_friend_req::has_area_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_get_recommend_friend_req::set_has_area_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_get_recommend_friend_req::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_get_recommend_friend_req::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 game_get_recommend_friend_req::area_id() const {
  return area_id_;
}
inline void game_get_recommend_friend_req::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// optional uint32 count = 4;
inline bool game_get_recommend_friend_req::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_get_recommend_friend_req::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_get_recommend_friend_req::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_get_recommend_friend_req::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 game_get_recommend_friend_req::count() const {
  return count_;
}
inline void game_get_recommend_friend_req::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// game_get_recommend_friend_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_get_recommend_friend_ack_id];
inline bool game_get_recommend_friend_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_get_recommend_friend_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_get_recommend_friend_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_get_recommend_friend_ack::clear_proto_id() {
  proto_id_ = 6314;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_get_recommend_friend_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_get_recommend_friend_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool game_get_recommend_friend_ack::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_get_recommend_friend_ack::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_get_recommend_friend_ack::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_get_recommend_friend_ack::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 game_get_recommend_friend_ack::uuid() const {
  return uuid_;
}
inline void game_get_recommend_friend_ack::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 area_id = 3;
inline bool game_get_recommend_friend_ack::has_area_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_get_recommend_friend_ack::set_has_area_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_get_recommend_friend_ack::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_get_recommend_friend_ack::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 game_get_recommend_friend_ack::area_id() const {
  return area_id_;
}
inline void game_get_recommend_friend_ack::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// repeated .SProtoSpace.friend_base_info fd_infos = 4;
inline int game_get_recommend_friend_ack::fd_infos_size() const {
  return fd_infos_.size();
}
inline void game_get_recommend_friend_ack::clear_fd_infos() {
  fd_infos_.Clear();
}
inline const ::SProtoSpace::friend_base_info& game_get_recommend_friend_ack::fd_infos(int index) const {
  return fd_infos_.Get(index);
}
inline ::SProtoSpace::friend_base_info* game_get_recommend_friend_ack::mutable_fd_infos(int index) {
  return fd_infos_.Mutable(index);
}
inline ::SProtoSpace::friend_base_info* game_get_recommend_friend_ack::add_fd_infos() {
  return fd_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >&
game_get_recommend_friend_ack::fd_infos() const {
  return fd_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >*
game_get_recommend_friend_ack::mutable_fd_infos() {
  return &fd_infos_;
}

// -------------------------------------------------------------------

// game_add_friend_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_friend_req_id];
inline bool game_add_friend_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_add_friend_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_add_friend_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_add_friend_req::clear_proto_id() {
  proto_id_ = 6303;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_add_friend_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_add_friend_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 accept_id = 2;
inline bool game_add_friend_req::has_accept_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_add_friend_req::set_has_accept_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_add_friend_req::clear_has_accept_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_add_friend_req::clear_accept_id() {
  accept_id_ = GOOGLE_ULONGLONG(0);
  clear_has_accept_id();
}
inline ::google::protobuf::uint64 game_add_friend_req::accept_id() const {
  return accept_id_;
}
inline void game_add_friend_req::set_accept_id(::google::protobuf::uint64 value) {
  set_has_accept_id();
  accept_id_ = value;
}

// optional uint64 apply_id = 3;
inline bool game_add_friend_req::has_apply_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_add_friend_req::set_has_apply_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_add_friend_req::clear_has_apply_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_add_friend_req::clear_apply_id() {
  apply_id_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_id();
}
inline ::google::protobuf::uint64 game_add_friend_req::apply_id() const {
  return apply_id_;
}
inline void game_add_friend_req::set_apply_id(::google::protobuf::uint64 value) {
  set_has_apply_id();
  apply_id_ = value;
}

// optional string content = 4;
inline bool game_add_friend_req::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_add_friend_req::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_add_friend_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_add_friend_req::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& game_add_friend_req::content() const {
  return *content_;
}
inline void game_add_friend_req::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void game_add_friend_req::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void game_add_friend_req::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* game_add_friend_req::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* game_add_friend_req::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void game_add_friend_req::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// game_add_friend_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_friend_ack_id];
inline bool game_add_friend_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_add_friend_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_add_friend_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_add_friend_ack::clear_proto_id() {
  proto_id_ = 6304;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_add_friend_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_add_friend_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool game_add_friend_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_add_friend_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_add_friend_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_add_friend_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_add_friend_ack::ret() const {
  return ret_;
}
inline void game_add_friend_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 accept_id = 3;
inline bool game_add_friend_ack::has_accept_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_add_friend_ack::set_has_accept_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_add_friend_ack::clear_has_accept_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_add_friend_ack::clear_accept_id() {
  accept_id_ = GOOGLE_ULONGLONG(0);
  clear_has_accept_id();
}
inline ::google::protobuf::uint64 game_add_friend_ack::accept_id() const {
  return accept_id_;
}
inline void game_add_friend_ack::set_accept_id(::google::protobuf::uint64 value) {
  set_has_accept_id();
  accept_id_ = value;
}

// -------------------------------------------------------------------

// game_friend_opt_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friend_opt_ntf_id];
inline bool game_friend_opt_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_friend_opt_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_friend_opt_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_friend_opt_ntf::clear_proto_id() {
  proto_id_ = 6316;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_friend_opt_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_friend_opt_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 type = 2;
inline bool game_friend_opt_ntf::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_friend_opt_ntf::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_friend_opt_ntf::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_friend_opt_ntf::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 game_friend_opt_ntf::type() const {
  return type_;
}
inline void game_friend_opt_ntf::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional .SProtoSpace.friend_base_info info = 3;
inline bool game_friend_opt_ntf::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_friend_opt_ntf::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_friend_opt_ntf::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_friend_opt_ntf::clear_info() {
  if (info_ != NULL) info_->::SProtoSpace::friend_base_info::Clear();
  clear_has_info();
}
inline const ::SProtoSpace::friend_base_info& game_friend_opt_ntf::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::SProtoSpace::friend_base_info* game_friend_opt_ntf::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::SProtoSpace::friend_base_info;
  return info_;
}
inline ::SProtoSpace::friend_base_info* game_friend_opt_ntf::release_info() {
  clear_has_info();
  ::SProtoSpace::friend_base_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void game_friend_opt_ntf::set_allocated_info(::SProtoSpace::friend_base_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional uint64 opt_time = 4;
inline bool game_friend_opt_ntf::has_opt_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_friend_opt_ntf::set_has_opt_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_friend_opt_ntf::clear_has_opt_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_friend_opt_ntf::clear_opt_time() {
  opt_time_ = GOOGLE_ULONGLONG(0);
  clear_has_opt_time();
}
inline ::google::protobuf::uint64 game_friend_opt_ntf::opt_time() const {
  return opt_time_;
}
inline void game_friend_opt_ntf::set_opt_time(::google::protobuf::uint64 value) {
  set_has_opt_time();
  opt_time_ = value;
}

// optional string content = 5;
inline bool game_friend_opt_ntf::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void game_friend_opt_ntf::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void game_friend_opt_ntf::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void game_friend_opt_ntf::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& game_friend_opt_ntf::content() const {
  return *content_;
}
inline void game_friend_opt_ntf::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void game_friend_opt_ntf::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void game_friend_opt_ntf::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* game_friend_opt_ntf::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* game_friend_opt_ntf::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void game_friend_opt_ntf::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// game_process_apply_info_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_process_apply_info_req_id];
inline bool game_process_apply_info_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_process_apply_info_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_process_apply_info_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_process_apply_info_req::clear_proto_id() {
  proto_id_ = 6305;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_process_apply_info_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_process_apply_info_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 type = 2;
inline bool game_process_apply_info_req::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_process_apply_info_req::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_process_apply_info_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_process_apply_info_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 game_process_apply_info_req::type() const {
  return type_;
}
inline void game_process_apply_info_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint64 uuid = 3;
inline bool game_process_apply_info_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_process_apply_info_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_process_apply_info_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_process_apply_info_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 game_process_apply_info_req::uuid() const {
  return uuid_;
}
inline void game_process_apply_info_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint64 apply_id = 4;
inline bool game_process_apply_info_req::has_apply_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_process_apply_info_req::set_has_apply_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_process_apply_info_req::clear_has_apply_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_process_apply_info_req::clear_apply_id() {
  apply_id_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_id();
}
inline ::google::protobuf::uint64 game_process_apply_info_req::apply_id() const {
  return apply_id_;
}
inline void game_process_apply_info_req::set_apply_id(::google::protobuf::uint64 value) {
  set_has_apply_id();
  apply_id_ = value;
}

// -------------------------------------------------------------------

// game_process_apply_info_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_process_apply_info_ack_id];
inline bool game_process_apply_info_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_process_apply_info_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_process_apply_info_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_process_apply_info_ack::clear_proto_id() {
  proto_id_ = 6306;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_process_apply_info_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_process_apply_info_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool game_process_apply_info_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_process_apply_info_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_process_apply_info_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_process_apply_info_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_process_apply_info_ack::ret() const {
  return ret_;
}
inline void game_process_apply_info_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .SProtoSpace.friend_base_info info = 3;
inline bool game_process_apply_info_ack::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_process_apply_info_ack::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_process_apply_info_ack::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_process_apply_info_ack::clear_info() {
  if (info_ != NULL) info_->::SProtoSpace::friend_base_info::Clear();
  clear_has_info();
}
inline const ::SProtoSpace::friend_base_info& game_process_apply_info_ack::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::SProtoSpace::friend_base_info* game_process_apply_info_ack::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::SProtoSpace::friend_base_info;
  return info_;
}
inline ::SProtoSpace::friend_base_info* game_process_apply_info_ack::release_info() {
  clear_has_info();
  ::SProtoSpace::friend_base_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void game_process_apply_info_ack::set_allocated_info(::SProtoSpace::friend_base_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional uint32 type = 4;
inline bool game_process_apply_info_ack::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_process_apply_info_ack::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_process_apply_info_ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_process_apply_info_ack::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 game_process_apply_info_ack::type() const {
  return type_;
}
inline void game_process_apply_info_ack::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// game_Onekey_apply_info_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_Onekey_apply_info_req_id];
inline bool game_Onekey_apply_info_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_Onekey_apply_info_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_Onekey_apply_info_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_Onekey_apply_info_req::clear_proto_id() {
  proto_id_ = 6318;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_Onekey_apply_info_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_Onekey_apply_info_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 type = 2;
inline bool game_Onekey_apply_info_req::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_Onekey_apply_info_req::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_Onekey_apply_info_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_Onekey_apply_info_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 game_Onekey_apply_info_req::type() const {
  return type_;
}
inline void game_Onekey_apply_info_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// game_onekey_apply_info_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_onekey_apply_info_ack_id];
inline bool game_onekey_apply_info_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_onekey_apply_info_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_onekey_apply_info_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_onekey_apply_info_ack::clear_proto_id() {
  proto_id_ = 6319;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_onekey_apply_info_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_onekey_apply_info_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool game_onekey_apply_info_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_onekey_apply_info_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_onekey_apply_info_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_onekey_apply_info_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_onekey_apply_info_ack::ret() const {
  return ret_;
}
inline void game_onekey_apply_info_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .SProtoSpace.friend_base_info infos = 3;
inline int game_onekey_apply_info_ack::infos_size() const {
  return infos_.size();
}
inline void game_onekey_apply_info_ack::clear_infos() {
  infos_.Clear();
}
inline const ::SProtoSpace::friend_base_info& game_onekey_apply_info_ack::infos(int index) const {
  return infos_.Get(index);
}
inline ::SProtoSpace::friend_base_info* game_onekey_apply_info_ack::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::SProtoSpace::friend_base_info* game_onekey_apply_info_ack::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >&
game_onekey_apply_info_ack::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >*
game_onekey_apply_info_ack::mutable_infos() {
  return &infos_;
}

// optional uint32 type = 4;
inline bool game_onekey_apply_info_ack::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_onekey_apply_info_ack::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_onekey_apply_info_ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_onekey_apply_info_ack::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 game_onekey_apply_info_ack::type() const {
  return type_;
}
inline void game_onekey_apply_info_ack::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// game_add_blacklist_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_blacklist_req_id];
inline bool game_add_blacklist_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_add_blacklist_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_add_blacklist_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_add_blacklist_req::clear_proto_id() {
  proto_id_ = 6307;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_add_blacklist_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_add_blacklist_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool game_add_blacklist_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_add_blacklist_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_add_blacklist_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_add_blacklist_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 game_add_blacklist_req::uuid() const {
  return uuid_;
}
inline void game_add_blacklist_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint64 target_id = 3;
inline bool game_add_blacklist_req::has_target_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_add_blacklist_req::set_has_target_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_add_blacklist_req::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_add_blacklist_req::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::uint64 game_add_blacklist_req::target_id() const {
  return target_id_;
}
inline void game_add_blacklist_req::set_target_id(::google::protobuf::uint64 value) {
  set_has_target_id();
  target_id_ = value;
}

// -------------------------------------------------------------------

// game_add_blacklist_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_blacklist_ack_id];
inline bool game_add_blacklist_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_add_blacklist_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_add_blacklist_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_add_blacklist_ack::clear_proto_id() {
  proto_id_ = 6308;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_add_blacklist_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_add_blacklist_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool game_add_blacklist_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_add_blacklist_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_add_blacklist_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_add_blacklist_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_add_blacklist_ack::ret() const {
  return ret_;
}
inline void game_add_blacklist_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .SProtoSpace.friend_base_info info = 3;
inline bool game_add_blacklist_ack::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_add_blacklist_ack::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_add_blacklist_ack::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_add_blacklist_ack::clear_info() {
  if (info_ != NULL) info_->::SProtoSpace::friend_base_info::Clear();
  clear_has_info();
}
inline const ::SProtoSpace::friend_base_info& game_add_blacklist_ack::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::SProtoSpace::friend_base_info* game_add_blacklist_ack::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::SProtoSpace::friend_base_info;
  return info_;
}
inline ::SProtoSpace::friend_base_info* game_add_blacklist_ack::release_info() {
  clear_has_info();
  ::SProtoSpace::friend_base_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void game_add_blacklist_ack::set_allocated_info(::SProtoSpace::friend_base_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// game_remove_friend_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_remove_friend_req_id];
inline bool game_remove_friend_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_remove_friend_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_remove_friend_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_remove_friend_req::clear_proto_id() {
  proto_id_ = 6309;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_remove_friend_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_remove_friend_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 type = 2;
inline bool game_remove_friend_req::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_remove_friend_req::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_remove_friend_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_remove_friend_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 game_remove_friend_req::type() const {
  return type_;
}
inline void game_remove_friend_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint64 uuid = 3;
inline bool game_remove_friend_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_remove_friend_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_remove_friend_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_remove_friend_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 game_remove_friend_req::uuid() const {
  return uuid_;
}
inline void game_remove_friend_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint64 target_id = 4;
inline bool game_remove_friend_req::has_target_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_remove_friend_req::set_has_target_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_remove_friend_req::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_remove_friend_req::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::uint64 game_remove_friend_req::target_id() const {
  return target_id_;
}
inline void game_remove_friend_req::set_target_id(::google::protobuf::uint64 value) {
  set_has_target_id();
  target_id_ = value;
}

// -------------------------------------------------------------------

// game_remove_friend_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_remove_friend_ack_id];
inline bool game_remove_friend_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_remove_friend_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_remove_friend_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_remove_friend_ack::clear_proto_id() {
  proto_id_ = 6310;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_remove_friend_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_remove_friend_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool game_remove_friend_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_remove_friend_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_remove_friend_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_remove_friend_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_remove_friend_ack::ret() const {
  return ret_;
}
inline void game_remove_friend_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 target_id = 3;
inline bool game_remove_friend_ack::has_target_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_remove_friend_ack::set_has_target_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_remove_friend_ack::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_remove_friend_ack::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::uint64 game_remove_friend_ack::target_id() const {
  return target_id_;
}
inline void game_remove_friend_ack::set_target_id(::google::protobuf::uint64 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional uint32 type = 4;
inline bool game_remove_friend_ack::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_remove_friend_ack::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_remove_friend_ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_remove_friend_ack::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 game_remove_friend_ack::type() const {
  return type_;
}
inline void game_remove_friend_ack::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// game_give_item_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_give_item_req_id];
inline bool game_give_item_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_give_item_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_give_item_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_give_item_req::clear_proto_id() {
  proto_id_ = 6311;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_give_item_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_give_item_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 type = 2;
inline bool game_give_item_req::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_give_item_req::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_give_item_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_give_item_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 game_give_item_req::type() const {
  return type_;
}
inline void game_give_item_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint64 giver_id = 3;
inline bool game_give_item_req::has_giver_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_give_item_req::set_has_giver_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_give_item_req::clear_has_giver_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_give_item_req::clear_giver_id() {
  giver_id_ = GOOGLE_ULONGLONG(0);
  clear_has_giver_id();
}
inline ::google::protobuf::uint64 game_give_item_req::giver_id() const {
  return giver_id_;
}
inline void game_give_item_req::set_giver_id(::google::protobuf::uint64 value) {
  set_has_giver_id();
  giver_id_ = value;
}

// optional uint64 target_id = 4;
inline bool game_give_item_req::has_target_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_give_item_req::set_has_target_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_give_item_req::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_give_item_req::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::uint64 game_give_item_req::target_id() const {
  return target_id_;
}
inline void game_give_item_req::set_target_id(::google::protobuf::uint64 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional uint32 count = 5;
inline bool game_give_item_req::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void game_give_item_req::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void game_give_item_req::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void game_give_item_req::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 game_give_item_req::count() const {
  return count_;
}
inline void game_give_item_req::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// game_give_item_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_give_item_ack_id];
inline bool game_give_item_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_give_item_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_give_item_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_give_item_ack::clear_proto_id() {
  proto_id_ = 6312;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_give_item_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_give_item_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool game_give_item_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_give_item_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_give_item_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_give_item_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_give_item_ack::ret() const {
  return ret_;
}
inline void game_give_item_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 target_id = 3;
inline bool game_give_item_ack::has_target_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_give_item_ack::set_has_target_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_give_item_ack::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_give_item_ack::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::uint64 game_give_item_ack::target_id() const {
  return target_id_;
}
inline void game_give_item_ack::set_target_id(::google::protobuf::uint64 value) {
  set_has_target_id();
  target_id_ = value;
}

// -------------------------------------------------------------------

// game_give_item_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_give_item_ntf_id];
inline bool game_give_item_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_give_item_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_give_item_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_give_item_ntf::clear_proto_id() {
  proto_id_ = 6317;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_give_item_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_give_item_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.give_item_info info = 2;
inline bool game_give_item_ntf::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_give_item_ntf::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_give_item_ntf::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_give_item_ntf::clear_info() {
  if (info_ != NULL) info_->::SProtoSpace::give_item_info::Clear();
  clear_has_info();
}
inline const ::SProtoSpace::give_item_info& game_give_item_ntf::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::SProtoSpace::give_item_info* game_give_item_ntf::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::SProtoSpace::give_item_info;
  return info_;
}
inline ::SProtoSpace::give_item_info* game_give_item_ntf::release_info() {
  clear_has_info();
  ::SProtoSpace::give_item_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void game_give_item_ntf::set_allocated_info(::SProtoSpace::give_item_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// game_harem_compete_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_ntf_id];
inline bool game_harem_compete_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_harem_compete_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_harem_compete_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_harem_compete_ntf::clear_proto_id() {
  proto_id_ = 6400;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_harem_compete_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_harem_compete_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 qingan_times = 2;
inline bool game_harem_compete_ntf::has_qingan_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_harem_compete_ntf::set_has_qingan_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_harem_compete_ntf::clear_has_qingan_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_harem_compete_ntf::clear_qingan_times() {
  qingan_times_ = 0u;
  clear_has_qingan_times();
}
inline ::google::protobuf::uint32 game_harem_compete_ntf::qingan_times() const {
  return qingan_times_;
}
inline void game_harem_compete_ntf::set_qingan_times(::google::protobuf::uint32 value) {
  set_has_qingan_times();
  qingan_times_ = value;
}

// optional uint32 slap_times = 3;
inline bool game_harem_compete_ntf::has_slap_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_harem_compete_ntf::set_has_slap_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_harem_compete_ntf::clear_has_slap_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_harem_compete_ntf::clear_slap_times() {
  slap_times_ = 0u;
  clear_has_slap_times();
}
inline ::google::protobuf::uint32 game_harem_compete_ntf::slap_times() const {
  return slap_times_;
}
inline void game_harem_compete_ntf::set_slap_times(::google::protobuf::uint32 value) {
  set_has_slap_times();
  slap_times_ = value;
}

// repeated .SProtoSpace.harem_compete_event events = 4;
inline int game_harem_compete_ntf::events_size() const {
  return events_.size();
}
inline void game_harem_compete_ntf::clear_events() {
  events_.Clear();
}
inline const ::SProtoSpace::harem_compete_event& game_harem_compete_ntf::events(int index) const {
  return events_.Get(index);
}
inline ::SProtoSpace::harem_compete_event* game_harem_compete_ntf::mutable_events(int index) {
  return events_.Mutable(index);
}
inline ::SProtoSpace::harem_compete_event* game_harem_compete_ntf::add_events() {
  return events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::harem_compete_event >&
game_harem_compete_ntf::events() const {
  return events_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::harem_compete_event >*
game_harem_compete_ntf::mutable_events() {
  return &events_;
}

// optional .SProtoSpace.ESLAPPROGRESS progress = 5;
inline bool game_harem_compete_ntf::has_progress() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void game_harem_compete_ntf::set_has_progress() {
  _has_bits_[0] |= 0x00000010u;
}
inline void game_harem_compete_ntf::clear_has_progress() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void game_harem_compete_ntf::clear_progress() {
  progress_ = 1;
  clear_has_progress();
}
inline ::SProtoSpace::ESLAPPROGRESS game_harem_compete_ntf::progress() const {
  return static_cast< ::SProtoSpace::ESLAPPROGRESS >(progress_);
}
inline void game_harem_compete_ntf::set_progress(::SProtoSpace::ESLAPPROGRESS value) {
  assert(::SProtoSpace::ESLAPPROGRESS_IsValid(value));
  set_has_progress();
  progress_ = value;
}

// optional uint64 end_time = 6;
inline bool game_harem_compete_ntf::has_end_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void game_harem_compete_ntf::set_has_end_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void game_harem_compete_ntf::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void game_harem_compete_ntf::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 game_harem_compete_ntf::end_time() const {
  return end_time_;
}
inline void game_harem_compete_ntf::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
}

// repeated uint64 red_point_time = 7;
inline int game_harem_compete_ntf::red_point_time_size() const {
  return red_point_time_.size();
}
inline void game_harem_compete_ntf::clear_red_point_time() {
  red_point_time_.Clear();
}
inline ::google::protobuf::uint64 game_harem_compete_ntf::red_point_time(int index) const {
  return red_point_time_.Get(index);
}
inline void game_harem_compete_ntf::set_red_point_time(int index, ::google::protobuf::uint64 value) {
  red_point_time_.Set(index, value);
}
inline void game_harem_compete_ntf::add_red_point_time(::google::protobuf::uint64 value) {
  red_point_time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
game_harem_compete_ntf::red_point_time() const {
  return red_point_time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
game_harem_compete_ntf::mutable_red_point_time() {
  return &red_point_time_;
}

// repeated .SProtoSpace.tribute_info tri_info = 8;
inline int game_harem_compete_ntf::tri_info_size() const {
  return tri_info_.size();
}
inline void game_harem_compete_ntf::clear_tri_info() {
  tri_info_.Clear();
}
inline const ::SProtoSpace::tribute_info& game_harem_compete_ntf::tri_info(int index) const {
  return tri_info_.Get(index);
}
inline ::SProtoSpace::tribute_info* game_harem_compete_ntf::mutable_tri_info(int index) {
  return tri_info_.Mutable(index);
}
inline ::SProtoSpace::tribute_info* game_harem_compete_ntf::add_tri_info() {
  return tri_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::tribute_info >&
game_harem_compete_ntf::tri_info() const {
  return tri_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::tribute_info >*
game_harem_compete_ntf::mutable_tri_info() {
  return &tri_info_;
}

// -------------------------------------------------------------------

// game_harem_compete_qingan_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_qingan_req_id];
inline bool game_harem_compete_qingan_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_harem_compete_qingan_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_harem_compete_qingan_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_harem_compete_qingan_req::clear_proto_id() {
  proto_id_ = 6401;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_harem_compete_qingan_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_harem_compete_qingan_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 target_id = 2;
inline bool game_harem_compete_qingan_req::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_harem_compete_qingan_req::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_harem_compete_qingan_req::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_harem_compete_qingan_req::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::uint64 game_harem_compete_qingan_req::target_id() const {
  return target_id_;
}
inline void game_harem_compete_qingan_req::set_target_id(::google::protobuf::uint64 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional string role_name = 3;
inline bool game_harem_compete_qingan_req::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_harem_compete_qingan_req::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_harem_compete_qingan_req::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_harem_compete_qingan_req::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& game_harem_compete_qingan_req::role_name() const {
  return *role_name_;
}
inline void game_harem_compete_qingan_req::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void game_harem_compete_qingan_req::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void game_harem_compete_qingan_req::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* game_harem_compete_qingan_req::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* game_harem_compete_qingan_req::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void game_harem_compete_qingan_req::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 role_type = 4;
inline bool game_harem_compete_qingan_req::has_role_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_harem_compete_qingan_req::set_has_role_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_harem_compete_qingan_req::clear_has_role_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_harem_compete_qingan_req::clear_role_type() {
  role_type_ = 0u;
  clear_has_role_type();
}
inline ::google::protobuf::uint32 game_harem_compete_qingan_req::role_type() const {
  return role_type_;
}
inline void game_harem_compete_qingan_req::set_role_type(::google::protobuf::uint32 value) {
  set_has_role_type();
  role_type_ = value;
}

// -------------------------------------------------------------------

// game_harem_compete_qingan_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_qingan_ack_id];
inline bool game_harem_compete_qingan_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_harem_compete_qingan_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_harem_compete_qingan_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_harem_compete_qingan_ack::clear_proto_id() {
  proto_id_ = 6402;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_harem_compete_qingan_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_harem_compete_qingan_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool game_harem_compete_qingan_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_harem_compete_qingan_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_harem_compete_qingan_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_harem_compete_qingan_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_harem_compete_qingan_ack::ret() const {
  return ret_;
}
inline void game_harem_compete_qingan_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 event_id = 3;
inline bool game_harem_compete_qingan_ack::has_event_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_harem_compete_qingan_ack::set_has_event_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_harem_compete_qingan_ack::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_harem_compete_qingan_ack::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
  clear_has_event_id();
}
inline ::google::protobuf::uint64 game_harem_compete_qingan_ack::event_id() const {
  return event_id_;
}
inline void game_harem_compete_qingan_ack::set_event_id(::google::protobuf::uint64 value) {
  set_has_event_id();
  event_id_ = value;
}

// -------------------------------------------------------------------

// game_harem_compete_slap_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_slap_req_id];
inline bool game_harem_compete_slap_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_harem_compete_slap_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_harem_compete_slap_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_harem_compete_slap_req::clear_proto_id() {
  proto_id_ = 6403;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_harem_compete_slap_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_harem_compete_slap_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 target_id = 2;
inline bool game_harem_compete_slap_req::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_harem_compete_slap_req::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_harem_compete_slap_req::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_harem_compete_slap_req::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::uint64 game_harem_compete_slap_req::target_id() const {
  return target_id_;
}
inline void game_harem_compete_slap_req::set_target_id(::google::protobuf::uint64 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional string role_name = 3;
inline bool game_harem_compete_slap_req::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_harem_compete_slap_req::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_harem_compete_slap_req::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_harem_compete_slap_req::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& game_harem_compete_slap_req::role_name() const {
  return *role_name_;
}
inline void game_harem_compete_slap_req::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void game_harem_compete_slap_req::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void game_harem_compete_slap_req::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* game_harem_compete_slap_req::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* game_harem_compete_slap_req::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void game_harem_compete_slap_req::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 time = 4;
inline bool game_harem_compete_slap_req::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_harem_compete_slap_req::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_harem_compete_slap_req::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_harem_compete_slap_req::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 game_harem_compete_slap_req::time() const {
  return time_;
}
inline void game_harem_compete_slap_req::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional uint64 take_time = 5;
inline bool game_harem_compete_slap_req::has_take_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void game_harem_compete_slap_req::set_has_take_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void game_harem_compete_slap_req::clear_has_take_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void game_harem_compete_slap_req::clear_take_time() {
  take_time_ = GOOGLE_ULONGLONG(0);
  clear_has_take_time();
}
inline ::google::protobuf::uint64 game_harem_compete_slap_req::take_time() const {
  return take_time_;
}
inline void game_harem_compete_slap_req::set_take_time(::google::protobuf::uint64 value) {
  set_has_take_time();
  take_time_ = value;
}

// optional uint32 slap_count = 6;
inline bool game_harem_compete_slap_req::has_slap_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void game_harem_compete_slap_req::set_has_slap_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void game_harem_compete_slap_req::clear_has_slap_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void game_harem_compete_slap_req::clear_slap_count() {
  slap_count_ = 0u;
  clear_has_slap_count();
}
inline ::google::protobuf::uint32 game_harem_compete_slap_req::slap_count() const {
  return slap_count_;
}
inline void game_harem_compete_slap_req::set_slap_count(::google::protobuf::uint32 value) {
  set_has_slap_count();
  slap_count_ = value;
}

// repeated .SProtoSpace.slap_emoji_info info = 7;
inline int game_harem_compete_slap_req::info_size() const {
  return info_.size();
}
inline void game_harem_compete_slap_req::clear_info() {
  info_.Clear();
}
inline const ::SProtoSpace::slap_emoji_info& game_harem_compete_slap_req::info(int index) const {
  return info_.Get(index);
}
inline ::SProtoSpace::slap_emoji_info* game_harem_compete_slap_req::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::SProtoSpace::slap_emoji_info* game_harem_compete_slap_req::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::slap_emoji_info >&
game_harem_compete_slap_req::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::slap_emoji_info >*
game_harem_compete_slap_req::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// game_harem_compete_slap_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_slap_ack_id];
inline bool game_harem_compete_slap_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_harem_compete_slap_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_harem_compete_slap_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_harem_compete_slap_ack::clear_proto_id() {
  proto_id_ = 6404;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_harem_compete_slap_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_harem_compete_slap_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.ESLAPPROGRESS progress = 2;
inline bool game_harem_compete_slap_ack::has_progress() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_harem_compete_slap_ack::set_has_progress() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_harem_compete_slap_ack::clear_has_progress() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_harem_compete_slap_ack::clear_progress() {
  progress_ = 1;
  clear_has_progress();
}
inline ::SProtoSpace::ESLAPPROGRESS game_harem_compete_slap_ack::progress() const {
  return static_cast< ::SProtoSpace::ESLAPPROGRESS >(progress_);
}
inline void game_harem_compete_slap_ack::set_progress(::SProtoSpace::ESLAPPROGRESS value) {
  assert(::SProtoSpace::ESLAPPROGRESS_IsValid(value));
  set_has_progress();
  progress_ = value;
}

// optional uint64 event_id = 3;
inline bool game_harem_compete_slap_ack::has_event_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_harem_compete_slap_ack::set_has_event_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_harem_compete_slap_ack::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_harem_compete_slap_ack::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
  clear_has_event_id();
}
inline ::google::protobuf::uint64 game_harem_compete_slap_ack::event_id() const {
  return event_id_;
}
inline void game_harem_compete_slap_ack::set_event_id(::google::protobuf::uint64 value) {
  set_has_event_id();
  event_id_ = value;
}

// -------------------------------------------------------------------

// game_harem_compete_friends_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_friends_req_id];
inline bool game_harem_compete_friends_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_harem_compete_friends_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_harem_compete_friends_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_harem_compete_friends_req::clear_proto_id() {
  proto_id_ = 6405;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_harem_compete_friends_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_harem_compete_friends_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 gd_type = 2;
inline bool game_harem_compete_friends_req::has_gd_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_harem_compete_friends_req::set_has_gd_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_harem_compete_friends_req::clear_has_gd_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_harem_compete_friends_req::clear_gd_type() {
  gd_type_ = 0u;
  clear_has_gd_type();
}
inline ::google::protobuf::uint32 game_harem_compete_friends_req::gd_type() const {
  return gd_type_;
}
inline void game_harem_compete_friends_req::set_gd_type(::google::protobuf::uint32 value) {
  set_has_gd_type();
  gd_type_ = value;
}

// optional uint32 type = 3;
inline bool game_harem_compete_friends_req::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_harem_compete_friends_req::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_harem_compete_friends_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_harem_compete_friends_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 game_harem_compete_friends_req::type() const {
  return type_;
}
inline void game_harem_compete_friends_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 count = 4;
inline bool game_harem_compete_friends_req::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_harem_compete_friends_req::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_harem_compete_friends_req::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_harem_compete_friends_req::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 game_harem_compete_friends_req::count() const {
  return count_;
}
inline void game_harem_compete_friends_req::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// game_harem_compete_friends_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_friends_ack_id];
inline bool game_harem_compete_friends_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_harem_compete_friends_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_harem_compete_friends_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_harem_compete_friends_ack::clear_proto_id() {
  proto_id_ = 6406;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_harem_compete_friends_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_harem_compete_friends_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// repeated .SProtoSpace.friend_base_info friends = 2;
inline int game_harem_compete_friends_ack::friends_size() const {
  return friends_.size();
}
inline void game_harem_compete_friends_ack::clear_friends() {
  friends_.Clear();
}
inline const ::SProtoSpace::friend_base_info& game_harem_compete_friends_ack::friends(int index) const {
  return friends_.Get(index);
}
inline ::SProtoSpace::friend_base_info* game_harem_compete_friends_ack::mutable_friends(int index) {
  return friends_.Mutable(index);
}
inline ::SProtoSpace::friend_base_info* game_harem_compete_friends_ack::add_friends() {
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >&
game_harem_compete_friends_ack::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >*
game_harem_compete_friends_ack::mutable_friends() {
  return &friends_;
}

// -------------------------------------------------------------------

// game_harem_compete_sync_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_sync_ntf_id];
inline bool game_harem_compete_sync_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_harem_compete_sync_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_harem_compete_sync_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_harem_compete_sync_ntf::clear_proto_id() {
  proto_id_ = 6407;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_harem_compete_sync_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_harem_compete_sync_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.harem_compete_event event = 2;
inline bool game_harem_compete_sync_ntf::has_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_harem_compete_sync_ntf::set_has_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_harem_compete_sync_ntf::clear_has_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_harem_compete_sync_ntf::clear_event() {
  if (event_ != NULL) event_->::SProtoSpace::harem_compete_event::Clear();
  clear_has_event();
}
inline const ::SProtoSpace::harem_compete_event& game_harem_compete_sync_ntf::event() const {
  return event_ != NULL ? *event_ : *default_instance_->event_;
}
inline ::SProtoSpace::harem_compete_event* game_harem_compete_sync_ntf::mutable_event() {
  set_has_event();
  if (event_ == NULL) event_ = new ::SProtoSpace::harem_compete_event;
  return event_;
}
inline ::SProtoSpace::harem_compete_event* game_harem_compete_sync_ntf::release_event() {
  clear_has_event();
  ::SProtoSpace::harem_compete_event* temp = event_;
  event_ = NULL;
  return temp;
}
inline void game_harem_compete_sync_ntf::set_allocated_event(::SProtoSpace::harem_compete_event* event) {
  delete event_;
  event_ = event;
  if (event) {
    set_has_event();
  } else {
    clear_has_event();
  }
}

// optional .SProtoSpace.ESLAPPROGRESS progress = 3;
inline bool game_harem_compete_sync_ntf::has_progress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_harem_compete_sync_ntf::set_has_progress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_harem_compete_sync_ntf::clear_has_progress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_harem_compete_sync_ntf::clear_progress() {
  progress_ = 1;
  clear_has_progress();
}
inline ::SProtoSpace::ESLAPPROGRESS game_harem_compete_sync_ntf::progress() const {
  return static_cast< ::SProtoSpace::ESLAPPROGRESS >(progress_);
}
inline void game_harem_compete_sync_ntf::set_progress(::SProtoSpace::ESLAPPROGRESS value) {
  assert(::SProtoSpace::ESLAPPROGRESS_IsValid(value));
  set_has_progress();
  progress_ = value;
}

// optional uint64 end_time = 4;
inline bool game_harem_compete_sync_ntf::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_harem_compete_sync_ntf::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_harem_compete_sync_ntf::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_harem_compete_sync_ntf::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 game_harem_compete_sync_ntf::end_time() const {
  return end_time_;
}
inline void game_harem_compete_sync_ntf::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
}

// -------------------------------------------------------------------

// game_harem_compete_clear_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_clear_req_id];
inline bool game_harem_compete_clear_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_harem_compete_clear_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_harem_compete_clear_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_harem_compete_clear_req::clear_proto_id() {
  proto_id_ = 6408;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_harem_compete_clear_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_harem_compete_clear_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 type = 2;
inline bool game_harem_compete_clear_req::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_harem_compete_clear_req::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_harem_compete_clear_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_harem_compete_clear_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 game_harem_compete_clear_req::type() const {
  return type_;
}
inline void game_harem_compete_clear_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// game_harem_compete_clear_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_clear_ack_id];
inline bool game_harem_compete_clear_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_harem_compete_clear_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_harem_compete_clear_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_harem_compete_clear_ack::clear_proto_id() {
  proto_id_ = 6409;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_harem_compete_clear_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_harem_compete_clear_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool game_harem_compete_clear_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_harem_compete_clear_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_harem_compete_clear_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_harem_compete_clear_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_harem_compete_clear_ack::ret() const {
  return ret_;
}
inline void game_harem_compete_clear_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// game_harem_compete_status_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_status_ntf_id];
inline bool game_harem_compete_status_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_harem_compete_status_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_harem_compete_status_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_harem_compete_status_ntf::clear_proto_id() {
  proto_id_ = 6410;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_harem_compete_status_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_harem_compete_status_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.ESLAPPROGRESS progress = 2;
inline bool game_harem_compete_status_ntf::has_progress() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_harem_compete_status_ntf::set_has_progress() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_harem_compete_status_ntf::clear_has_progress() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_harem_compete_status_ntf::clear_progress() {
  progress_ = 1;
  clear_has_progress();
}
inline ::SProtoSpace::ESLAPPROGRESS game_harem_compete_status_ntf::progress() const {
  return static_cast< ::SProtoSpace::ESLAPPROGRESS >(progress_);
}
inline void game_harem_compete_status_ntf::set_progress(::SProtoSpace::ESLAPPROGRESS value) {
  assert(::SProtoSpace::ESLAPPROGRESS_IsValid(value));
  set_has_progress();
  progress_ = value;
}

// optional uint64 end_time = 3;
inline bool game_harem_compete_status_ntf::has_end_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_harem_compete_status_ntf::set_has_end_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_harem_compete_status_ntf::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_harem_compete_status_ntf::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 game_harem_compete_status_ntf::end_time() const {
  return end_time_;
}
inline void game_harem_compete_status_ntf::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
}

// -------------------------------------------------------------------

// game_harem_compete_redpoint_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_redpoint_req_id];
inline bool game_harem_compete_redpoint_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_harem_compete_redpoint_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_harem_compete_redpoint_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_harem_compete_redpoint_req::clear_proto_id() {
  proto_id_ = 6411;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_harem_compete_redpoint_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_harem_compete_redpoint_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.EHAREMTYPE type = 2;
inline bool game_harem_compete_redpoint_req::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_harem_compete_redpoint_req::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_harem_compete_redpoint_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_harem_compete_redpoint_req::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::SProtoSpace::EHAREMTYPE game_harem_compete_redpoint_req::type() const {
  return static_cast< ::SProtoSpace::EHAREMTYPE >(type_);
}
inline void game_harem_compete_redpoint_req::set_type(::SProtoSpace::EHAREMTYPE value) {
  assert(::SProtoSpace::EHAREMTYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint64 red_time = 3;
inline bool game_harem_compete_redpoint_req::has_red_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_harem_compete_redpoint_req::set_has_red_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_harem_compete_redpoint_req::clear_has_red_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_harem_compete_redpoint_req::clear_red_time() {
  red_time_ = GOOGLE_ULONGLONG(0);
  clear_has_red_time();
}
inline ::google::protobuf::uint64 game_harem_compete_redpoint_req::red_time() const {
  return red_time_;
}
inline void game_harem_compete_redpoint_req::set_red_time(::google::protobuf::uint64 value) {
  set_has_red_time();
  red_time_ = value;
}

// -------------------------------------------------------------------

// game_harem_compete_redpoint_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_redpoint_ack_id];
inline bool game_harem_compete_redpoint_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_harem_compete_redpoint_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_harem_compete_redpoint_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_harem_compete_redpoint_ack::clear_proto_id() {
  proto_id_ = 6412;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_harem_compete_redpoint_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_harem_compete_redpoint_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool game_harem_compete_redpoint_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_harem_compete_redpoint_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_harem_compete_redpoint_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_harem_compete_redpoint_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_harem_compete_redpoint_ack::ret() const {
  return ret_;
}
inline void game_harem_compete_redpoint_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// game_harem_compete_share_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_share_req_id];
inline bool game_harem_compete_share_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_harem_compete_share_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_harem_compete_share_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_harem_compete_share_req::clear_proto_id() {
  proto_id_ = 6413;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_harem_compete_share_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_harem_compete_share_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.EHAREMSHARETYPE type = 2;
inline bool game_harem_compete_share_req::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_harem_compete_share_req::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_harem_compete_share_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_harem_compete_share_req::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::SProtoSpace::EHAREMSHARETYPE game_harem_compete_share_req::type() const {
  return static_cast< ::SProtoSpace::EHAREMSHARETYPE >(type_);
}
inline void game_harem_compete_share_req::set_type(::SProtoSpace::EHAREMSHARETYPE value) {
  assert(::SProtoSpace::EHAREMSHARETYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint64 event_id = 3;
inline bool game_harem_compete_share_req::has_event_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_harem_compete_share_req::set_has_event_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_harem_compete_share_req::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_harem_compete_share_req::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
  clear_has_event_id();
}
inline ::google::protobuf::uint64 game_harem_compete_share_req::event_id() const {
  return event_id_;
}
inline void game_harem_compete_share_req::set_event_id(::google::protobuf::uint64 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional uint32 world_channel_id = 4;
inline bool game_harem_compete_share_req::has_world_channel_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_harem_compete_share_req::set_has_world_channel_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_harem_compete_share_req::clear_has_world_channel_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_harem_compete_share_req::clear_world_channel_id() {
  world_channel_id_ = 0u;
  clear_has_world_channel_id();
}
inline ::google::protobuf::uint32 game_harem_compete_share_req::world_channel_id() const {
  return world_channel_id_;
}
inline void game_harem_compete_share_req::set_world_channel_id(::google::protobuf::uint32 value) {
  set_has_world_channel_id();
  world_channel_id_ = value;
}

// optional string content = 5;
inline bool game_harem_compete_share_req::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void game_harem_compete_share_req::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void game_harem_compete_share_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void game_harem_compete_share_req::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& game_harem_compete_share_req::content() const {
  return *content_;
}
inline void game_harem_compete_share_req::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void game_harem_compete_share_req::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void game_harem_compete_share_req::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* game_harem_compete_share_req::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* game_harem_compete_share_req::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void game_harem_compete_share_req::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// game_harem_compete_share_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_share_ack_id];
inline bool game_harem_compete_share_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_harem_compete_share_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_harem_compete_share_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_harem_compete_share_ack::clear_proto_id() {
  proto_id_ = 6414;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_harem_compete_share_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_harem_compete_share_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool game_harem_compete_share_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_harem_compete_share_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_harem_compete_share_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_harem_compete_share_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_harem_compete_share_ack::ret() const {
  return ret_;
}
inline void game_harem_compete_share_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// game_harem_compete_get_event_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_get_event_req_id];
inline bool game_harem_compete_get_event_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_harem_compete_get_event_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_harem_compete_get_event_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_harem_compete_get_event_req::clear_proto_id() {
  proto_id_ = 6415;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_harem_compete_get_event_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_harem_compete_get_event_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 event_id = 2;
inline bool game_harem_compete_get_event_req::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_harem_compete_get_event_req::set_has_event_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_harem_compete_get_event_req::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_harem_compete_get_event_req::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
  clear_has_event_id();
}
inline ::google::protobuf::uint64 game_harem_compete_get_event_req::event_id() const {
  return event_id_;
}
inline void game_harem_compete_get_event_req::set_event_id(::google::protobuf::uint64 value) {
  set_has_event_id();
  event_id_ = value;
}

// -------------------------------------------------------------------

// game_harem_compete_get_event_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_get_event_ack_id];
inline bool game_harem_compete_get_event_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_harem_compete_get_event_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_harem_compete_get_event_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_harem_compete_get_event_ack::clear_proto_id() {
  proto_id_ = 6416;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_harem_compete_get_event_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_harem_compete_get_event_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.harem_compete_event event = 2;
inline bool game_harem_compete_get_event_ack::has_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_harem_compete_get_event_ack::set_has_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_harem_compete_get_event_ack::clear_has_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_harem_compete_get_event_ack::clear_event() {
  if (event_ != NULL) event_->::SProtoSpace::harem_compete_event::Clear();
  clear_has_event();
}
inline const ::SProtoSpace::harem_compete_event& game_harem_compete_get_event_ack::event() const {
  return event_ != NULL ? *event_ : *default_instance_->event_;
}
inline ::SProtoSpace::harem_compete_event* game_harem_compete_get_event_ack::mutable_event() {
  set_has_event();
  if (event_ == NULL) event_ = new ::SProtoSpace::harem_compete_event;
  return event_;
}
inline ::SProtoSpace::harem_compete_event* game_harem_compete_get_event_ack::release_event() {
  clear_has_event();
  ::SProtoSpace::harem_compete_event* temp = event_;
  event_ = NULL;
  return temp;
}
inline void game_harem_compete_get_event_ack::set_allocated_event(::SProtoSpace::harem_compete_event* event) {
  delete event_;
  event_ = event;
  if (event) {
    set_has_event();
  } else {
    clear_has_event();
  }
}

// -------------------------------------------------------------------

// game_harem_compete_tribute_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_tribute_req_id];
inline bool game_harem_compete_tribute_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_harem_compete_tribute_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_harem_compete_tribute_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_harem_compete_tribute_req::clear_proto_id() {
  proto_id_ = 6417;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_harem_compete_tribute_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_harem_compete_tribute_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 target_id = 2;
inline bool game_harem_compete_tribute_req::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_harem_compete_tribute_req::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_harem_compete_tribute_req::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_harem_compete_tribute_req::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::uint64 game_harem_compete_tribute_req::target_id() const {
  return target_id_;
}
inline void game_harem_compete_tribute_req::set_target_id(::google::protobuf::uint64 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional string target_name = 3;
inline bool game_harem_compete_tribute_req::has_target_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_harem_compete_tribute_req::set_has_target_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_harem_compete_tribute_req::clear_has_target_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_harem_compete_tribute_req::clear_target_name() {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    target_name_->clear();
  }
  clear_has_target_name();
}
inline const ::std::string& game_harem_compete_tribute_req::target_name() const {
  return *target_name_;
}
inline void game_harem_compete_tribute_req::set_target_name(const ::std::string& value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void game_harem_compete_tribute_req::set_target_name(const char* value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void game_harem_compete_tribute_req::set_target_name(const char* value, size_t size) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* game_harem_compete_tribute_req::mutable_target_name() {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  return target_name_;
}
inline ::std::string* game_harem_compete_tribute_req::release_target_name() {
  clear_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_name_;
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void game_harem_compete_tribute_req::set_allocated_target_name(::std::string* target_name) {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_name_;
  }
  if (target_name) {
    set_has_target_name();
    target_name_ = target_name;
  } else {
    clear_has_target_name();
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 tribute_id = 4;
inline bool game_harem_compete_tribute_req::has_tribute_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_harem_compete_tribute_req::set_has_tribute_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_harem_compete_tribute_req::clear_has_tribute_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_harem_compete_tribute_req::clear_tribute_id() {
  tribute_id_ = 0u;
  clear_has_tribute_id();
}
inline ::google::protobuf::uint32 game_harem_compete_tribute_req::tribute_id() const {
  return tribute_id_;
}
inline void game_harem_compete_tribute_req::set_tribute_id(::google::protobuf::uint32 value) {
  set_has_tribute_id();
  tribute_id_ = value;
}

// optional uint32 count = 5;
inline bool game_harem_compete_tribute_req::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void game_harem_compete_tribute_req::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void game_harem_compete_tribute_req::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void game_harem_compete_tribute_req::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 game_harem_compete_tribute_req::count() const {
  return count_;
}
inline void game_harem_compete_tribute_req::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional string content = 6;
inline bool game_harem_compete_tribute_req::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void game_harem_compete_tribute_req::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void game_harem_compete_tribute_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void game_harem_compete_tribute_req::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& game_harem_compete_tribute_req::content() const {
  return *content_;
}
inline void game_harem_compete_tribute_req::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void game_harem_compete_tribute_req::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void game_harem_compete_tribute_req::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* game_harem_compete_tribute_req::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* game_harem_compete_tribute_req::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void game_harem_compete_tribute_req::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// game_harem_compete_tribute_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_tribute_ack_id];
inline bool game_harem_compete_tribute_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_harem_compete_tribute_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_harem_compete_tribute_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_harem_compete_tribute_ack::clear_proto_id() {
  proto_id_ = 6418;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_harem_compete_tribute_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_harem_compete_tribute_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool game_harem_compete_tribute_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_harem_compete_tribute_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_harem_compete_tribute_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_harem_compete_tribute_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_harem_compete_tribute_ack::ret() const {
  return ret_;
}
inline void game_harem_compete_tribute_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// create_3dchat_room_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_3dchat_room_req_id];
inline bool create_3dchat_room_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void create_3dchat_room_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void create_3dchat_room_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void create_3dchat_room_req::clear_proto_id() {
  proto_id_ = 7314;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID create_3dchat_room_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void create_3dchat_room_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 room_conf_id = 2;
inline bool create_3dchat_room_req::has_room_conf_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void create_3dchat_room_req::set_has_room_conf_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void create_3dchat_room_req::clear_has_room_conf_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void create_3dchat_room_req::clear_room_conf_id() {
  room_conf_id_ = 0;
  clear_has_room_conf_id();
}
inline ::google::protobuf::int32 create_3dchat_room_req::room_conf_id() const {
  return room_conf_id_;
}
inline void create_3dchat_room_req::set_room_conf_id(::google::protobuf::int32 value) {
  set_has_room_conf_id();
  room_conf_id_ = value;
}

// optional string room_name = 3;
inline bool create_3dchat_room_req::has_room_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void create_3dchat_room_req::set_has_room_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void create_3dchat_room_req::clear_has_room_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void create_3dchat_room_req::clear_room_name() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    room_name_->clear();
  }
  clear_has_room_name();
}
inline const ::std::string& create_3dchat_room_req::room_name() const {
  return *room_name_;
}
inline void create_3dchat_room_req::set_room_name(const ::std::string& value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void create_3dchat_room_req::set_room_name(const char* value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void create_3dchat_room_req::set_room_name(const char* value, size_t size) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* create_3dchat_room_req::mutable_room_name() {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}
inline ::std::string* create_3dchat_room_req::release_room_name() {
  clear_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = room_name_;
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void create_3dchat_room_req::set_allocated_room_name(::std::string* room_name) {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (room_name) {
    set_has_room_name();
    room_name_ = room_name;
  } else {
    clear_has_room_name();
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string token = 4;
inline bool create_3dchat_room_req::has_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void create_3dchat_room_req::set_has_token() {
  _has_bits_[0] |= 0x00000008u;
}
inline void create_3dchat_room_req::clear_has_token() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void create_3dchat_room_req::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& create_3dchat_room_req::token() const {
  return *token_;
}
inline void create_3dchat_room_req::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void create_3dchat_room_req::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void create_3dchat_room_req::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* create_3dchat_room_req::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* create_3dchat_room_req::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void create_3dchat_room_req::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// create_3dchat_room_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_3dchat_room_ack_id];
inline bool create_3dchat_room_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void create_3dchat_room_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void create_3dchat_room_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void create_3dchat_room_ack::clear_proto_id() {
  proto_id_ = 7315;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID create_3dchat_room_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void create_3dchat_room_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool create_3dchat_room_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void create_3dchat_room_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void create_3dchat_room_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void create_3dchat_room_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 create_3dchat_room_ack::ret() const {
  return ret_;
}
inline void create_3dchat_room_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 room_conf_id = 3;
inline bool create_3dchat_room_ack::has_room_conf_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void create_3dchat_room_ack::set_has_room_conf_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void create_3dchat_room_ack::clear_has_room_conf_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void create_3dchat_room_ack::clear_room_conf_id() {
  room_conf_id_ = 0;
  clear_has_room_conf_id();
}
inline ::google::protobuf::int32 create_3dchat_room_ack::room_conf_id() const {
  return room_conf_id_;
}
inline void create_3dchat_room_ack::set_room_conf_id(::google::protobuf::int32 value) {
  set_has_room_conf_id();
  room_conf_id_ = value;
}

// optional string room_name = 4;
inline bool create_3dchat_room_ack::has_room_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void create_3dchat_room_ack::set_has_room_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void create_3dchat_room_ack::clear_has_room_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void create_3dchat_room_ack::clear_room_name() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    room_name_->clear();
  }
  clear_has_room_name();
}
inline const ::std::string& create_3dchat_room_ack::room_name() const {
  return *room_name_;
}
inline void create_3dchat_room_ack::set_room_name(const ::std::string& value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void create_3dchat_room_ack::set_room_name(const char* value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void create_3dchat_room_ack::set_room_name(const char* value, size_t size) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* create_3dchat_room_ack::mutable_room_name() {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}
inline ::std::string* create_3dchat_room_ack::release_room_name() {
  clear_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = room_name_;
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void create_3dchat_room_ack::set_allocated_room_name(::std::string* room_name) {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (room_name) {
    set_has_room_name();
    room_name_ = room_name;
  } else {
    clear_has_room_name();
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string token = 5;
inline bool create_3dchat_room_ack::has_token() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void create_3dchat_room_ack::set_has_token() {
  _has_bits_[0] |= 0x00000010u;
}
inline void create_3dchat_room_ack::clear_has_token() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void create_3dchat_room_ack::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& create_3dchat_room_ack::token() const {
  return *token_;
}
inline void create_3dchat_room_ack::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void create_3dchat_room_ack::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void create_3dchat_room_ack::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* create_3dchat_room_ack::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* create_3dchat_room_ack::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void create_3dchat_room_ack::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// enter_chat_room_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_chat_room_req_id];
inline bool enter_chat_room_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enter_chat_room_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enter_chat_room_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enter_chat_room_req::clear_proto_id() {
  proto_id_ = 7300;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID enter_chat_room_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void enter_chat_room_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 room_id = 2;
inline bool enter_chat_room_req::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void enter_chat_room_req::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void enter_chat_room_req::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void enter_chat_room_req::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 enter_chat_room_req::room_id() const {
  return room_id_;
}
inline void enter_chat_room_req::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional string token = 3;
inline bool enter_chat_room_req::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void enter_chat_room_req::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void enter_chat_room_req::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void enter_chat_room_req::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& enter_chat_room_req::token() const {
  return *token_;
}
inline void enter_chat_room_req::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void enter_chat_room_req::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void enter_chat_room_req::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* enter_chat_room_req::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* enter_chat_room_req::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void enter_chat_room_req::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// enter_chat_room_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_chat_room_ack_id];
inline bool enter_chat_room_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enter_chat_room_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enter_chat_room_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enter_chat_room_ack::clear_proto_id() {
  proto_id_ = 7301;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID enter_chat_room_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void enter_chat_room_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool enter_chat_room_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void enter_chat_room_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void enter_chat_room_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void enter_chat_room_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 enter_chat_room_ack::ret() const {
  return ret_;
}
inline void enter_chat_room_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 room_id = 3;
inline bool enter_chat_room_ack::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void enter_chat_room_ack::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void enter_chat_room_ack::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void enter_chat_room_ack::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 enter_chat_room_ack::room_id() const {
  return room_id_;
}
inline void enter_chat_room_ack::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// exit_chat_room_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_chat_room_req_id];
inline bool exit_chat_room_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void exit_chat_room_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void exit_chat_room_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void exit_chat_room_req::clear_proto_id() {
  proto_id_ = 7302;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID exit_chat_room_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void exit_chat_room_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 room_id = 2;
inline bool exit_chat_room_req::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void exit_chat_room_req::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void exit_chat_room_req::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void exit_chat_room_req::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 exit_chat_room_req::room_id() const {
  return room_id_;
}
inline void exit_chat_room_req::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// exit_chat_room_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_chat_room_ack_id];
inline bool exit_chat_room_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void exit_chat_room_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void exit_chat_room_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void exit_chat_room_ack::clear_proto_id() {
  proto_id_ = 7303;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID exit_chat_room_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void exit_chat_room_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool exit_chat_room_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void exit_chat_room_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void exit_chat_room_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void exit_chat_room_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 exit_chat_room_ack::ret() const {
  return ret_;
}
inline void exit_chat_room_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 room_id = 3;
inline bool exit_chat_room_ack::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void exit_chat_room_ack::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void exit_chat_room_ack::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void exit_chat_room_ack::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 exit_chat_room_ack::room_id() const {
  return room_id_;
}
inline void exit_chat_room_ack::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// update_chat_room_players_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_chat_room_players_ntf_id];
inline bool update_chat_room_players_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_chat_room_players_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_chat_room_players_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_chat_room_players_ntf::clear_proto_id() {
  proto_id_ = 7304;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID update_chat_room_players_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void update_chat_room_players_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 room_id = 2;
inline bool update_chat_room_players_ntf::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void update_chat_room_players_ntf::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void update_chat_room_players_ntf::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void update_chat_room_players_ntf::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 update_chat_room_players_ntf::room_id() const {
  return room_id_;
}
inline void update_chat_room_players_ntf::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// repeated .SProtoSpace.role_base_3part add_players = 3;
inline int update_chat_room_players_ntf::add_players_size() const {
  return add_players_.size();
}
inline void update_chat_room_players_ntf::clear_add_players() {
  add_players_.Clear();
}
inline const ::SProtoSpace::role_base_3part& update_chat_room_players_ntf::add_players(int index) const {
  return add_players_.Get(index);
}
inline ::SProtoSpace::role_base_3part* update_chat_room_players_ntf::mutable_add_players(int index) {
  return add_players_.Mutable(index);
}
inline ::SProtoSpace::role_base_3part* update_chat_room_players_ntf::add_add_players() {
  return add_players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_base_3part >&
update_chat_room_players_ntf::add_players() const {
  return add_players_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_base_3part >*
update_chat_room_players_ntf::mutable_add_players() {
  return &add_players_;
}

// repeated .SProtoSpace.role_base_3part del_players = 4;
inline int update_chat_room_players_ntf::del_players_size() const {
  return del_players_.size();
}
inline void update_chat_room_players_ntf::clear_del_players() {
  del_players_.Clear();
}
inline const ::SProtoSpace::role_base_3part& update_chat_room_players_ntf::del_players(int index) const {
  return del_players_.Get(index);
}
inline ::SProtoSpace::role_base_3part* update_chat_room_players_ntf::mutable_del_players(int index) {
  return del_players_.Mutable(index);
}
inline ::SProtoSpace::role_base_3part* update_chat_room_players_ntf::add_del_players() {
  return del_players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_base_3part >&
update_chat_room_players_ntf::del_players() const {
  return del_players_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_base_3part >*
update_chat_room_players_ntf::mutable_del_players() {
  return &del_players_;
}

// -------------------------------------------------------------------

// update_chat_view_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_chat_view_ntf_id];
inline bool update_chat_view_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_chat_view_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_chat_view_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_chat_view_ntf::clear_proto_id() {
  proto_id_ = 7305;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID update_chat_view_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void update_chat_view_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// repeated .SProtoSpace.role_position fix_list = 2;
inline int update_chat_view_ntf::fix_list_size() const {
  return fix_list_.size();
}
inline void update_chat_view_ntf::clear_fix_list() {
  fix_list_.Clear();
}
inline const ::SProtoSpace::role_position& update_chat_view_ntf::fix_list(int index) const {
  return fix_list_.Get(index);
}
inline ::SProtoSpace::role_position* update_chat_view_ntf::mutable_fix_list(int index) {
  return fix_list_.Mutable(index);
}
inline ::SProtoSpace::role_position* update_chat_view_ntf::add_fix_list() {
  return fix_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_position >&
update_chat_view_ntf::fix_list() const {
  return fix_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_position >*
update_chat_view_ntf::mutable_fix_list() {
  return &fix_list_;
}

// repeated .SProtoSpace.role_position add_list = 3;
inline int update_chat_view_ntf::add_list_size() const {
  return add_list_.size();
}
inline void update_chat_view_ntf::clear_add_list() {
  add_list_.Clear();
}
inline const ::SProtoSpace::role_position& update_chat_view_ntf::add_list(int index) const {
  return add_list_.Get(index);
}
inline ::SProtoSpace::role_position* update_chat_view_ntf::mutable_add_list(int index) {
  return add_list_.Mutable(index);
}
inline ::SProtoSpace::role_position* update_chat_view_ntf::add_add_list() {
  return add_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_position >&
update_chat_view_ntf::add_list() const {
  return add_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_position >*
update_chat_view_ntf::mutable_add_list() {
  return &add_list_;
}

// repeated .SProtoSpace.role_position del_list = 4;
inline int update_chat_view_ntf::del_list_size() const {
  return del_list_.size();
}
inline void update_chat_view_ntf::clear_del_list() {
  del_list_.Clear();
}
inline const ::SProtoSpace::role_position& update_chat_view_ntf::del_list(int index) const {
  return del_list_.Get(index);
}
inline ::SProtoSpace::role_position* update_chat_view_ntf::mutable_del_list(int index) {
  return del_list_.Mutable(index);
}
inline ::SProtoSpace::role_position* update_chat_view_ntf::add_del_list() {
  return del_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_position >&
update_chat_view_ntf::del_list() const {
  return del_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_position >*
update_chat_view_ntf::mutable_del_list() {
  return &del_list_;
}

// -------------------------------------------------------------------

// report_position_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = report_position_req_id];
inline bool report_position_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void report_position_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void report_position_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void report_position_req::clear_proto_id() {
  proto_id_ = 7306;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID report_position_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void report_position_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 room_id = 2;
inline bool report_position_req::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void report_position_req::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void report_position_req::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void report_position_req::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 report_position_req::room_id() const {
  return room_id_;
}
inline void report_position_req::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional .SProtoSpace.role_position cur_pos = 3;
inline bool report_position_req::has_cur_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void report_position_req::set_has_cur_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void report_position_req::clear_has_cur_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void report_position_req::clear_cur_pos() {
  if (cur_pos_ != NULL) cur_pos_->::SProtoSpace::role_position::Clear();
  clear_has_cur_pos();
}
inline const ::SProtoSpace::role_position& report_position_req::cur_pos() const {
  return cur_pos_ != NULL ? *cur_pos_ : *default_instance_->cur_pos_;
}
inline ::SProtoSpace::role_position* report_position_req::mutable_cur_pos() {
  set_has_cur_pos();
  if (cur_pos_ == NULL) cur_pos_ = new ::SProtoSpace::role_position;
  return cur_pos_;
}
inline ::SProtoSpace::role_position* report_position_req::release_cur_pos() {
  clear_has_cur_pos();
  ::SProtoSpace::role_position* temp = cur_pos_;
  cur_pos_ = NULL;
  return temp;
}
inline void report_position_req::set_allocated_cur_pos(::SProtoSpace::role_position* cur_pos) {
  delete cur_pos_;
  cur_pos_ = cur_pos;
  if (cur_pos) {
    set_has_cur_pos();
  } else {
    clear_has_cur_pos();
  }
}

// -------------------------------------------------------------------

// report_position_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = report_position_ack_id];
inline bool report_position_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void report_position_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void report_position_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void report_position_ack::clear_proto_id() {
  proto_id_ = 7307;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID report_position_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void report_position_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool report_position_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void report_position_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void report_position_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void report_position_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 report_position_ack::ret() const {
  return ret_;
}
inline void report_position_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 room_id = 3;
inline bool report_position_ack::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void report_position_ack::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void report_position_ack::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void report_position_ack::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 report_position_ack::room_id() const {
  return room_id_;
}
inline void report_position_ack::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional .SProtoSpace.role_position cur_pos = 4;
inline bool report_position_ack::has_cur_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void report_position_ack::set_has_cur_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void report_position_ack::clear_has_cur_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void report_position_ack::clear_cur_pos() {
  if (cur_pos_ != NULL) cur_pos_->::SProtoSpace::role_position::Clear();
  clear_has_cur_pos();
}
inline const ::SProtoSpace::role_position& report_position_ack::cur_pos() const {
  return cur_pos_ != NULL ? *cur_pos_ : *default_instance_->cur_pos_;
}
inline ::SProtoSpace::role_position* report_position_ack::mutable_cur_pos() {
  set_has_cur_pos();
  if (cur_pos_ == NULL) cur_pos_ = new ::SProtoSpace::role_position;
  return cur_pos_;
}
inline ::SProtoSpace::role_position* report_position_ack::release_cur_pos() {
  clear_has_cur_pos();
  ::SProtoSpace::role_position* temp = cur_pos_;
  cur_pos_ = NULL;
  return temp;
}
inline void report_position_ack::set_allocated_cur_pos(::SProtoSpace::role_position* cur_pos) {
  delete cur_pos_;
  cur_pos_ = cur_pos;
  if (cur_pos) {
    set_has_cur_pos();
  } else {
    clear_has_cur_pos();
  }
}

// -------------------------------------------------------------------

// get_role_position_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_position_req_id];
inline bool get_role_position_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_role_position_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_role_position_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_role_position_req::clear_proto_id() {
  proto_id_ = 7308;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_role_position_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_role_position_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 dest_id = 2;
inline bool get_role_position_req::has_dest_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_role_position_req::set_has_dest_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_role_position_req::clear_has_dest_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_role_position_req::clear_dest_id() {
  dest_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dest_id();
}
inline ::google::protobuf::uint64 get_role_position_req::dest_id() const {
  return dest_id_;
}
inline void get_role_position_req::set_dest_id(::google::protobuf::uint64 value) {
  set_has_dest_id();
  dest_id_ = value;
}

// -------------------------------------------------------------------

// get_role_position_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_position_ack_id];
inline bool get_role_position_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_role_position_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_role_position_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_role_position_ack::clear_proto_id() {
  proto_id_ = 7309;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_role_position_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_role_position_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool get_role_position_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_role_position_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_role_position_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_role_position_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 get_role_position_ack::ret() const {
  return ret_;
}
inline void get_role_position_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 room_id = 3;
inline bool get_role_position_ack::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_role_position_ack::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_role_position_ack::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_role_position_ack::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 get_role_position_ack::room_id() const {
  return room_id_;
}
inline void get_role_position_ack::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional .SProtoSpace.role_position dest_pos = 4;
inline bool get_role_position_ack::has_dest_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void get_role_position_ack::set_has_dest_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void get_role_position_ack::clear_has_dest_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void get_role_position_ack::clear_dest_pos() {
  if (dest_pos_ != NULL) dest_pos_->::SProtoSpace::role_position::Clear();
  clear_has_dest_pos();
}
inline const ::SProtoSpace::role_position& get_role_position_ack::dest_pos() const {
  return dest_pos_ != NULL ? *dest_pos_ : *default_instance_->dest_pos_;
}
inline ::SProtoSpace::role_position* get_role_position_ack::mutable_dest_pos() {
  set_has_dest_pos();
  if (dest_pos_ == NULL) dest_pos_ = new ::SProtoSpace::role_position;
  return dest_pos_;
}
inline ::SProtoSpace::role_position* get_role_position_ack::release_dest_pos() {
  clear_has_dest_pos();
  ::SProtoSpace::role_position* temp = dest_pos_;
  dest_pos_ = NULL;
  return temp;
}
inline void get_role_position_ack::set_allocated_dest_pos(::SProtoSpace::role_position* dest_pos) {
  delete dest_pos_;
  dest_pos_ = dest_pos;
  if (dest_pos) {
    set_has_dest_pos();
  } else {
    clear_has_dest_pos();
  }
}

// -------------------------------------------------------------------

// get_chat_room_list_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_chat_room_list_req_id];
inline bool get_chat_room_list_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_chat_room_list_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_chat_room_list_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_chat_room_list_req::clear_proto_id() {
  proto_id_ = 7310;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_chat_room_list_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_chat_room_list_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 index_start = 2;
inline bool get_chat_room_list_req::has_index_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_chat_room_list_req::set_has_index_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_chat_room_list_req::clear_has_index_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_chat_room_list_req::clear_index_start() {
  index_start_ = 0;
  clear_has_index_start();
}
inline ::google::protobuf::int32 get_chat_room_list_req::index_start() const {
  return index_start_;
}
inline void get_chat_room_list_req::set_index_start(::google::protobuf::int32 value) {
  set_has_index_start();
  index_start_ = value;
}

// optional int32 index_end = 3;
inline bool get_chat_room_list_req::has_index_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_chat_room_list_req::set_has_index_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_chat_room_list_req::clear_has_index_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_chat_room_list_req::clear_index_end() {
  index_end_ = 0;
  clear_has_index_end();
}
inline ::google::protobuf::int32 get_chat_room_list_req::index_end() const {
  return index_end_;
}
inline void get_chat_room_list_req::set_index_end(::google::protobuf::int32 value) {
  set_has_index_end();
  index_end_ = value;
}

// -------------------------------------------------------------------

// get_chat_room_list_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_chat_room_list_ack_id];
inline bool get_chat_room_list_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_chat_room_list_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_chat_room_list_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_chat_room_list_ack::clear_proto_id() {
  proto_id_ = 7311;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_chat_room_list_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_chat_room_list_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 ret = 2;
inline bool get_chat_room_list_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_chat_room_list_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_chat_room_list_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_chat_room_list_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 get_chat_room_list_ack::ret() const {
  return ret_;
}
inline void get_chat_room_list_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 index_start = 3;
inline bool get_chat_room_list_ack::has_index_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_chat_room_list_ack::set_has_index_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_chat_room_list_ack::clear_has_index_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_chat_room_list_ack::clear_index_start() {
  index_start_ = 0;
  clear_has_index_start();
}
inline ::google::protobuf::int32 get_chat_room_list_ack::index_start() const {
  return index_start_;
}
inline void get_chat_room_list_ack::set_index_start(::google::protobuf::int32 value) {
  set_has_index_start();
  index_start_ = value;
}

// optional int32 index_end = 4;
inline bool get_chat_room_list_ack::has_index_end() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void get_chat_room_list_ack::set_has_index_end() {
  _has_bits_[0] |= 0x00000008u;
}
inline void get_chat_room_list_ack::clear_has_index_end() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void get_chat_room_list_ack::clear_index_end() {
  index_end_ = 0;
  clear_has_index_end();
}
inline ::google::protobuf::int32 get_chat_room_list_ack::index_end() const {
  return index_end_;
}
inline void get_chat_room_list_ack::set_index_end(::google::protobuf::int32 value) {
  set_has_index_end();
  index_end_ = value;
}

// repeated .SProtoSpace.chat_room_state rooms = 5;
inline int get_chat_room_list_ack::rooms_size() const {
  return rooms_.size();
}
inline void get_chat_room_list_ack::clear_rooms() {
  rooms_.Clear();
}
inline const ::SProtoSpace::chat_room_state& get_chat_room_list_ack::rooms(int index) const {
  return rooms_.Get(index);
}
inline ::SProtoSpace::chat_room_state* get_chat_room_list_ack::mutable_rooms(int index) {
  return rooms_.Mutable(index);
}
inline ::SProtoSpace::chat_room_state* get_chat_room_list_ack::add_rooms() {
  return rooms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chat_room_state >&
get_chat_room_list_ack::rooms() const {
  return rooms_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chat_room_state >*
get_chat_room_list_ack::mutable_rooms() {
  return &rooms_;
}

// -------------------------------------------------------------------

// member_kick_3d_chat_room_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = member_kick_3d_chat_room_req_id];
inline bool member_kick_3d_chat_room_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void member_kick_3d_chat_room_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void member_kick_3d_chat_room_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void member_kick_3d_chat_room_req::clear_proto_id() {
  proto_id_ = 7319;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID member_kick_3d_chat_room_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void member_kick_3d_chat_room_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 kicked_role_id = 2;
inline bool member_kick_3d_chat_room_req::has_kicked_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void member_kick_3d_chat_room_req::set_has_kicked_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void member_kick_3d_chat_room_req::clear_has_kicked_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void member_kick_3d_chat_room_req::clear_kicked_role_id() {
  kicked_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_kicked_role_id();
}
inline ::google::protobuf::uint64 member_kick_3d_chat_room_req::kicked_role_id() const {
  return kicked_role_id_;
}
inline void member_kick_3d_chat_room_req::set_kicked_role_id(::google::protobuf::uint64 value) {
  set_has_kicked_role_id();
  kicked_role_id_ = value;
}

// -------------------------------------------------------------------

// member_kick_3d_chat_room_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = member_kick_3d_chat_room_ack_id];
inline bool member_kick_3d_chat_room_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void member_kick_3d_chat_room_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void member_kick_3d_chat_room_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void member_kick_3d_chat_room_ack::clear_proto_id() {
  proto_id_ = 7320;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID member_kick_3d_chat_room_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void member_kick_3d_chat_room_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 ret = 2;
inline bool member_kick_3d_chat_room_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void member_kick_3d_chat_room_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void member_kick_3d_chat_room_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void member_kick_3d_chat_room_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 member_kick_3d_chat_room_ack::ret() const {
  return ret_;
}
inline void member_kick_3d_chat_room_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 kicked_role_id = 3;
inline bool member_kick_3d_chat_room_ack::has_kicked_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void member_kick_3d_chat_room_ack::set_has_kicked_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void member_kick_3d_chat_room_ack::clear_has_kicked_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void member_kick_3d_chat_room_ack::clear_kicked_role_id() {
  kicked_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_kicked_role_id();
}
inline ::google::protobuf::uint64 member_kick_3d_chat_room_ack::kicked_role_id() const {
  return kicked_role_id_;
}
inline void member_kick_3d_chat_room_ack::set_kicked_role_id(::google::protobuf::uint64 value) {
  set_has_kicked_role_id();
  kicked_role_id_ = value;
}

// optional uint64 sour_role_id = 4;
inline bool member_kick_3d_chat_room_ack::has_sour_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void member_kick_3d_chat_room_ack::set_has_sour_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void member_kick_3d_chat_room_ack::clear_has_sour_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void member_kick_3d_chat_room_ack::clear_sour_role_id() {
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sour_role_id();
}
inline ::google::protobuf::uint64 member_kick_3d_chat_room_ack::sour_role_id() const {
  return sour_role_id_;
}
inline void member_kick_3d_chat_room_ack::set_sour_role_id(::google::protobuf::uint64 value) {
  set_has_sour_role_id();
  sour_role_id_ = value;
}

// -------------------------------------------------------------------

// get_hang_up_award_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_hang_up_award_ntf_id];
inline bool get_hang_up_award_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_hang_up_award_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_hang_up_award_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_hang_up_award_ntf::clear_proto_id() {
  proto_id_ = 7317;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_hang_up_award_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_hang_up_award_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.reward_item fix_items = 2;
inline bool get_hang_up_award_ntf::has_fix_items() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_hang_up_award_ntf::set_has_fix_items() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_hang_up_award_ntf::clear_has_fix_items() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_hang_up_award_ntf::clear_fix_items() {
  if (fix_items_ != NULL) fix_items_->::SProtoSpace::reward_item::Clear();
  clear_has_fix_items();
}
inline const ::SProtoSpace::reward_item& get_hang_up_award_ntf::fix_items() const {
  return fix_items_ != NULL ? *fix_items_ : *default_instance_->fix_items_;
}
inline ::SProtoSpace::reward_item* get_hang_up_award_ntf::mutable_fix_items() {
  set_has_fix_items();
  if (fix_items_ == NULL) fix_items_ = new ::SProtoSpace::reward_item;
  return fix_items_;
}
inline ::SProtoSpace::reward_item* get_hang_up_award_ntf::release_fix_items() {
  clear_has_fix_items();
  ::SProtoSpace::reward_item* temp = fix_items_;
  fix_items_ = NULL;
  return temp;
}
inline void get_hang_up_award_ntf::set_allocated_fix_items(::SProtoSpace::reward_item* fix_items) {
  delete fix_items_;
  fix_items_ = fix_items;
  if (fix_items) {
    set_has_fix_items();
  } else {
    clear_has_fix_items();
  }
}

// optional .SProtoSpace.reward_item random_items = 3;
inline bool get_hang_up_award_ntf::has_random_items() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_hang_up_award_ntf::set_has_random_items() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_hang_up_award_ntf::clear_has_random_items() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_hang_up_award_ntf::clear_random_items() {
  if (random_items_ != NULL) random_items_->::SProtoSpace::reward_item::Clear();
  clear_has_random_items();
}
inline const ::SProtoSpace::reward_item& get_hang_up_award_ntf::random_items() const {
  return random_items_ != NULL ? *random_items_ : *default_instance_->random_items_;
}
inline ::SProtoSpace::reward_item* get_hang_up_award_ntf::mutable_random_items() {
  set_has_random_items();
  if (random_items_ == NULL) random_items_ = new ::SProtoSpace::reward_item;
  return random_items_;
}
inline ::SProtoSpace::reward_item* get_hang_up_award_ntf::release_random_items() {
  clear_has_random_items();
  ::SProtoSpace::reward_item* temp = random_items_;
  random_items_ = NULL;
  return temp;
}
inline void get_hang_up_award_ntf::set_allocated_random_items(::SProtoSpace::reward_item* random_items) {
  delete random_items_;
  random_items_ = random_items;
  if (random_items) {
    set_has_random_items();
  } else {
    clear_has_random_items();
  }
}

// -------------------------------------------------------------------

// get_hang_up_info_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_hang_up_info_ntf_id];
inline bool get_hang_up_info_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_hang_up_info_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_hang_up_info_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_hang_up_info_ntf::clear_proto_id() {
  proto_id_ = 7318;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_hang_up_info_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_hang_up_info_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 count_down = 2;
inline bool get_hang_up_info_ntf::has_count_down() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_hang_up_info_ntf::set_has_count_down() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_hang_up_info_ntf::clear_has_count_down() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_hang_up_info_ntf::clear_count_down() {
  count_down_ = 0;
  clear_has_count_down();
}
inline ::google::protobuf::int32 get_hang_up_info_ntf::count_down() const {
  return count_down_;
}
inline void get_hang_up_info_ntf::set_count_down(::google::protobuf::int32 value) {
  set_has_count_down();
  count_down_ = value;
}

// optional int32 completion_times = 3;
inline bool get_hang_up_info_ntf::has_completion_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_hang_up_info_ntf::set_has_completion_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_hang_up_info_ntf::clear_has_completion_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_hang_up_info_ntf::clear_completion_times() {
  completion_times_ = 0;
  clear_has_completion_times();
}
inline ::google::protobuf::int32 get_hang_up_info_ntf::completion_times() const {
  return completion_times_;
}
inline void get_hang_up_info_ntf::set_completion_times(::google::protobuf::int32 value) {
  set_has_completion_times();
  completion_times_ = value;
}

// optional int32 total_times = 4;
inline bool get_hang_up_info_ntf::has_total_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void get_hang_up_info_ntf::set_has_total_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void get_hang_up_info_ntf::clear_has_total_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void get_hang_up_info_ntf::clear_total_times() {
  total_times_ = 0;
  clear_has_total_times();
}
inline ::google::protobuf::int32 get_hang_up_info_ntf::total_times() const {
  return total_times_;
}
inline void get_hang_up_info_ntf::set_total_times(::google::protobuf::int32 value) {
  set_has_total_times();
  total_times_ = value;
}

// -------------------------------------------------------------------

// update_chat_room_data_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_chat_room_data_ntf_id];
inline bool update_chat_room_data_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_chat_room_data_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_chat_room_data_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_chat_room_data_ntf::clear_proto_id() {
  proto_id_ = 7316;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID update_chat_room_data_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void update_chat_room_data_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 owner_id = 2;
inline bool update_chat_room_data_ntf::has_owner_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void update_chat_room_data_ntf::set_has_owner_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void update_chat_room_data_ntf::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void update_chat_room_data_ntf::clear_owner_id() {
  owner_id_ = GOOGLE_ULONGLONG(0);
  clear_has_owner_id();
}
inline ::google::protobuf::uint64 update_chat_room_data_ntf::owner_id() const {
  return owner_id_;
}
inline void update_chat_room_data_ntf::set_owner_id(::google::protobuf::uint64 value) {
  set_has_owner_id();
  owner_id_ = value;
}

// optional int32 room_conf_id = 3;
inline bool update_chat_room_data_ntf::has_room_conf_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void update_chat_room_data_ntf::set_has_room_conf_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void update_chat_room_data_ntf::clear_has_room_conf_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void update_chat_room_data_ntf::clear_room_conf_id() {
  room_conf_id_ = 0;
  clear_has_room_conf_id();
}
inline ::google::protobuf::int32 update_chat_room_data_ntf::room_conf_id() const {
  return room_conf_id_;
}
inline void update_chat_room_data_ntf::set_room_conf_id(::google::protobuf::int32 value) {
  set_has_room_conf_id();
  room_conf_id_ = value;
}

// optional int64 total_fight_power = 4;
inline bool update_chat_room_data_ntf::has_total_fight_power() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void update_chat_room_data_ntf::set_has_total_fight_power() {
  _has_bits_[0] |= 0x00000008u;
}
inline void update_chat_room_data_ntf::clear_has_total_fight_power() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void update_chat_room_data_ntf::clear_total_fight_power() {
  total_fight_power_ = GOOGLE_LONGLONG(0);
  clear_has_total_fight_power();
}
inline ::google::protobuf::int64 update_chat_room_data_ntf::total_fight_power() const {
  return total_fight_power_;
}
inline void update_chat_room_data_ntf::set_total_fight_power(::google::protobuf::int64 value) {
  set_has_total_fight_power();
  total_fight_power_ = value;
}

// optional string room_name = 5;
inline bool update_chat_room_data_ntf::has_room_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void update_chat_room_data_ntf::set_has_room_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void update_chat_room_data_ntf::clear_has_room_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void update_chat_room_data_ntf::clear_room_name() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    room_name_->clear();
  }
  clear_has_room_name();
}
inline const ::std::string& update_chat_room_data_ntf::room_name() const {
  return *room_name_;
}
inline void update_chat_room_data_ntf::set_room_name(const ::std::string& value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void update_chat_room_data_ntf::set_room_name(const char* value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void update_chat_room_data_ntf::set_room_name(const char* value, size_t size) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* update_chat_room_data_ntf::mutable_room_name() {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}
inline ::std::string* update_chat_room_data_ntf::release_room_name() {
  clear_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = room_name_;
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void update_chat_room_data_ntf::set_allocated_room_name(::std::string* room_name) {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (room_name) {
    set_has_room_name();
    room_name_ = room_name;
  } else {
    clear_has_room_name();
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_top = 6;
inline bool update_chat_room_data_ntf::has_is_top() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void update_chat_room_data_ntf::set_has_is_top() {
  _has_bits_[0] |= 0x00000020u;
}
inline void update_chat_room_data_ntf::clear_has_is_top() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void update_chat_room_data_ntf::clear_is_top() {
  is_top_ = false;
  clear_has_is_top();
}
inline bool update_chat_room_data_ntf::is_top() const {
  return is_top_;
}
inline void update_chat_room_data_ntf::set_is_top(bool value) {
  set_has_is_top();
  is_top_ = value;
}

// optional int32 top_left_time = 7;
inline bool update_chat_room_data_ntf::has_top_left_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void update_chat_room_data_ntf::set_has_top_left_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void update_chat_room_data_ntf::clear_has_top_left_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void update_chat_room_data_ntf::clear_top_left_time() {
  top_left_time_ = 0;
  clear_has_top_left_time();
}
inline ::google::protobuf::int32 update_chat_room_data_ntf::top_left_time() const {
  return top_left_time_;
}
inline void update_chat_room_data_ntf::set_top_left_time(::google::protobuf::int32 value) {
  set_has_top_left_time();
  top_left_time_ = value;
}

// -------------------------------------------------------------------

// get_3d_chat_room_pos_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_3d_chat_room_pos_req_id];
inline bool get_3d_chat_room_pos_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_3d_chat_room_pos_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_3d_chat_room_pos_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_3d_chat_room_pos_req::clear_proto_id() {
  proto_id_ = 7321;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_3d_chat_room_pos_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_3d_chat_room_pos_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 room_id = 2;
inline bool get_3d_chat_room_pos_req::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_3d_chat_room_pos_req::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_3d_chat_room_pos_req::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_3d_chat_room_pos_req::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 get_3d_chat_room_pos_req::room_id() const {
  return room_id_;
}
inline void get_3d_chat_room_pos_req::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// get_3d_chat_room_pos_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_3d_chat_room_pos_ack_id];
inline bool get_3d_chat_room_pos_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_3d_chat_room_pos_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_3d_chat_room_pos_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_3d_chat_room_pos_ack::clear_proto_id() {
  proto_id_ = 7322;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_3d_chat_room_pos_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_3d_chat_room_pos_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 ret = 2;
inline bool get_3d_chat_room_pos_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_3d_chat_room_pos_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_3d_chat_room_pos_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_3d_chat_room_pos_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 get_3d_chat_room_pos_ack::ret() const {
  return ret_;
}
inline void get_3d_chat_room_pos_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 room_id = 3;
inline bool get_3d_chat_room_pos_ack::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_3d_chat_room_pos_ack::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_3d_chat_room_pos_ack::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_3d_chat_room_pos_ack::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 get_3d_chat_room_pos_ack::room_id() const {
  return room_id_;
}
inline void get_3d_chat_room_pos_ack::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional int32 pos = 4;
inline bool get_3d_chat_room_pos_ack::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void get_3d_chat_room_pos_ack::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void get_3d_chat_room_pos_ack::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void get_3d_chat_room_pos_ack::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 get_3d_chat_room_pos_ack::pos() const {
  return pos_;
}
inline void get_3d_chat_room_pos_ack::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// top_3d_chat_room_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = top_3d_chat_room_req_id];
inline bool top_3d_chat_room_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void top_3d_chat_room_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void top_3d_chat_room_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void top_3d_chat_room_req::clear_proto_id() {
  proto_id_ = 7323;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID top_3d_chat_room_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void top_3d_chat_room_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 room_id = 2;
inline bool top_3d_chat_room_req::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void top_3d_chat_room_req::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void top_3d_chat_room_req::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void top_3d_chat_room_req::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 top_3d_chat_room_req::room_id() const {
  return room_id_;
}
inline void top_3d_chat_room_req::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional int32 item_conf_id = 3;
inline bool top_3d_chat_room_req::has_item_conf_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void top_3d_chat_room_req::set_has_item_conf_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void top_3d_chat_room_req::clear_has_item_conf_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void top_3d_chat_room_req::clear_item_conf_id() {
  item_conf_id_ = 0;
  clear_has_item_conf_id();
}
inline ::google::protobuf::int32 top_3d_chat_room_req::item_conf_id() const {
  return item_conf_id_;
}
inline void top_3d_chat_room_req::set_item_conf_id(::google::protobuf::int32 value) {
  set_has_item_conf_id();
  item_conf_id_ = value;
}

// -------------------------------------------------------------------

// top_3d_chat_room_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = top_3d_chat_room_ack_id];
inline bool top_3d_chat_room_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void top_3d_chat_room_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void top_3d_chat_room_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void top_3d_chat_room_ack::clear_proto_id() {
  proto_id_ = 7324;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID top_3d_chat_room_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void top_3d_chat_room_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 ret = 2;
inline bool top_3d_chat_room_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void top_3d_chat_room_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void top_3d_chat_room_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void top_3d_chat_room_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 top_3d_chat_room_ack::ret() const {
  return ret_;
}
inline void top_3d_chat_room_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 room_id = 3;
inline bool top_3d_chat_room_ack::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void top_3d_chat_room_ack::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void top_3d_chat_room_ack::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void top_3d_chat_room_ack::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 top_3d_chat_room_ack::room_id() const {
  return room_id_;
}
inline void top_3d_chat_room_ack::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional int32 item_conf_id = 4;
inline bool top_3d_chat_room_ack::has_item_conf_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void top_3d_chat_room_ack::set_has_item_conf_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void top_3d_chat_room_ack::clear_has_item_conf_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void top_3d_chat_room_ack::clear_item_conf_id() {
  item_conf_id_ = 0;
  clear_has_item_conf_id();
}
inline ::google::protobuf::int32 top_3d_chat_room_ack::item_conf_id() const {
  return item_conf_id_;
}
inline void top_3d_chat_room_ack::set_item_conf_id(::google::protobuf::int32 value) {
  set_has_item_conf_id();
  item_conf_id_ = value;
}

// -------------------------------------------------------------------

// change_name_3d_chat_room_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = change_name_3d_chat_room_req_id];
inline bool change_name_3d_chat_room_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void change_name_3d_chat_room_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void change_name_3d_chat_room_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void change_name_3d_chat_room_req::clear_proto_id() {
  proto_id_ = 7325;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID change_name_3d_chat_room_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void change_name_3d_chat_room_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 room_id = 2;
inline bool change_name_3d_chat_room_req::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void change_name_3d_chat_room_req::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void change_name_3d_chat_room_req::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void change_name_3d_chat_room_req::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 change_name_3d_chat_room_req::room_id() const {
  return room_id_;
}
inline void change_name_3d_chat_room_req::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional int32 item_conf_id = 3;
inline bool change_name_3d_chat_room_req::has_item_conf_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void change_name_3d_chat_room_req::set_has_item_conf_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void change_name_3d_chat_room_req::clear_has_item_conf_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void change_name_3d_chat_room_req::clear_item_conf_id() {
  item_conf_id_ = 0;
  clear_has_item_conf_id();
}
inline ::google::protobuf::int32 change_name_3d_chat_room_req::item_conf_id() const {
  return item_conf_id_;
}
inline void change_name_3d_chat_room_req::set_item_conf_id(::google::protobuf::int32 value) {
  set_has_item_conf_id();
  item_conf_id_ = value;
}

// optional string name = 4;
inline bool change_name_3d_chat_room_req::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void change_name_3d_chat_room_req::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void change_name_3d_chat_room_req::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void change_name_3d_chat_room_req::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& change_name_3d_chat_room_req::name() const {
  return *name_;
}
inline void change_name_3d_chat_room_req::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void change_name_3d_chat_room_req::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void change_name_3d_chat_room_req::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* change_name_3d_chat_room_req::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* change_name_3d_chat_room_req::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void change_name_3d_chat_room_req::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// change_name_3d_chat_room_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = change_name_3d_chat_room_ack_id];
inline bool change_name_3d_chat_room_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void change_name_3d_chat_room_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void change_name_3d_chat_room_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void change_name_3d_chat_room_ack::clear_proto_id() {
  proto_id_ = 7326;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID change_name_3d_chat_room_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void change_name_3d_chat_room_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 ret = 2;
inline bool change_name_3d_chat_room_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void change_name_3d_chat_room_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void change_name_3d_chat_room_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void change_name_3d_chat_room_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 change_name_3d_chat_room_ack::ret() const {
  return ret_;
}
inline void change_name_3d_chat_room_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 room_id = 3;
inline bool change_name_3d_chat_room_ack::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void change_name_3d_chat_room_ack::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void change_name_3d_chat_room_ack::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void change_name_3d_chat_room_ack::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 change_name_3d_chat_room_ack::room_id() const {
  return room_id_;
}
inline void change_name_3d_chat_room_ack::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional string name = 4;
inline bool change_name_3d_chat_room_ack::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void change_name_3d_chat_room_ack::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void change_name_3d_chat_room_ack::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void change_name_3d_chat_room_ack::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& change_name_3d_chat_room_ack::name() const {
  return *name_;
}
inline void change_name_3d_chat_room_ack::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void change_name_3d_chat_room_ack::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void change_name_3d_chat_room_ack::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* change_name_3d_chat_room_ack::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* change_name_3d_chat_room_ack::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void change_name_3d_chat_room_ack::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_5fsocial_2eproto__INCLUDED
