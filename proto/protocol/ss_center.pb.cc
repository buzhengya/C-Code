// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_center.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ss_center.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* gate_listen_report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gate_listen_report_reflection_ = NULL;
const ::google::protobuf::Descriptor* gate_role_num_report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gate_role_num_report_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_login_verify_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_login_verify_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_login_verify_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_login_verify_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* kick_out_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  kick_out_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* kick_out_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  kick_out_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* gt_reconnect_check_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gt_reconnect_check_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ct_reconnect_check_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ct_reconnect_check_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ct_reconnect_kick_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ct_reconnect_kick_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gt_reconnect_kick_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gt_reconnect_kick_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* gt_online_client_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gt_online_client_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* gt_game_server_player_num_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gt_game_server_player_num_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ct_need_queued_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ct_need_queued_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ct_end_queued_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ct_end_queued_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* gt_queued_state_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gt_queued_state_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ct_queued_state_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ct_queued_state_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* gt_cancel_queue_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gt_cancel_queue_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ct_cancel_queue_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ct_cancel_queue_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* account_login_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  account_login_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* account_login_ntf_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  account_login_ntf_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* area_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  area_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gate_net_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gate_net_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* area_brief_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  area_brief_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* area_record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  area_record_reflection_ = NULL;
const ::google::protobuf::Descriptor* group_area_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  group_area_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* area_list_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  area_list_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* area_gateserver_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  area_gateserver_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* area_gateserver_info_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  area_gateserver_info_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* area_gateserver_info_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  area_gateserver_info_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_area_info_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_area_info_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* lc_heartbeat_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lc_heartbeat_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* lc_heartbeat_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lc_heartbeat_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_leave_game_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_leave_game_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm2center_close_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm2center_close_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* center2gm_close_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  center2gm_close_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm2center_center_status_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm2center_center_status_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* center2gm_center_status_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  center2gm_center_status_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm2center_center_reset_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm2center_center_reset_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* center2gm_center_reset_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  center2gm_center_reset_ack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ss_5fcenter_2eproto() {
  protobuf_AddDesc_ss_5fcenter_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ss_center.proto");
  GOOGLE_CHECK(file != NULL);
  gate_listen_report_descriptor_ = file->message_type(0);
  static const int gate_listen_report_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_listen_report, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_listen_report, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_listen_report, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_listen_report, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_listen_report, new__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_listen_report, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_listen_report, groupindex_),
  };
  gate_listen_report_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gate_listen_report_descriptor_,
      gate_listen_report::default_instance_,
      gate_listen_report_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_listen_report, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_listen_report, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gate_listen_report));
  gate_role_num_report_descriptor_ = file->message_type(1);
  static const int gate_role_num_report_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_role_num_report, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_role_num_report, num_),
  };
  gate_role_num_report_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gate_role_num_report_descriptor_,
      gate_role_num_report::default_instance_,
      gate_role_num_report_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_role_num_report, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_role_num_report, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gate_role_num_report));
  role_login_verify_req_descriptor_ = file->message_type(2);
  static const int role_login_verify_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_login_verify_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_login_verify_req, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_login_verify_req, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_login_verify_req, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_login_verify_req, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_login_verify_req, areaid_),
  };
  role_login_verify_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_login_verify_req_descriptor_,
      role_login_verify_req::default_instance_,
      role_login_verify_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_login_verify_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_login_verify_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_login_verify_req));
  role_login_verify_ack_descriptor_ = file->message_type(3);
  static const int role_login_verify_ack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_login_verify_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_login_verify_ack, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_login_verify_ack, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_login_verify_ack, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_login_verify_ack, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_login_verify_ack, isreconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_login_verify_ack, areaid_),
  };
  role_login_verify_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_login_verify_ack_descriptor_,
      role_login_verify_ack::default_instance_,
      role_login_verify_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_login_verify_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_login_verify_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_login_verify_ack));
  kick_out_req_descriptor_ = file->message_type(4);
  static const int kick_out_req_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_out_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_out_req, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_out_req, newclientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_out_req, newgateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_out_req, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_out_req, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_out_req, areaid_),
  };
  kick_out_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      kick_out_req_descriptor_,
      kick_out_req::default_instance_,
      kick_out_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_out_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_out_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(kick_out_req));
  kick_out_ack_descriptor_ = file->message_type(5);
  static const int kick_out_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_out_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_out_ack, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_out_ack, newclientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_out_ack, newgateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_out_ack, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_out_ack, areaid_),
  };
  kick_out_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      kick_out_ack_descriptor_,
      kick_out_ack::default_instance_,
      kick_out_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_out_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_out_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(kick_out_ack));
  gt_reconnect_check_req_descriptor_ = file->message_type(6);
  static const int gt_reconnect_check_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_reconnect_check_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_reconnect_check_req, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_reconnect_check_req, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_reconnect_check_req, playerid_),
  };
  gt_reconnect_check_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gt_reconnect_check_req_descriptor_,
      gt_reconnect_check_req::default_instance_,
      gt_reconnect_check_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_reconnect_check_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_reconnect_check_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gt_reconnect_check_req));
  ct_reconnect_check_ack_descriptor_ = file->message_type(7);
  static const int ct_reconnect_check_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_reconnect_check_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_reconnect_check_ack, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_reconnect_check_ack, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_reconnect_check_ack, playerid_),
  };
  ct_reconnect_check_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ct_reconnect_check_ack_descriptor_,
      ct_reconnect_check_ack::default_instance_,
      ct_reconnect_check_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_reconnect_check_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_reconnect_check_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ct_reconnect_check_ack));
  ct_reconnect_kick_req_descriptor_ = file->message_type(8);
  static const int ct_reconnect_kick_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_reconnect_kick_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_reconnect_kick_req, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_reconnect_kick_req, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_reconnect_kick_req, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_reconnect_kick_req, new_gate_id_),
  };
  ct_reconnect_kick_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ct_reconnect_kick_req_descriptor_,
      ct_reconnect_kick_req::default_instance_,
      ct_reconnect_kick_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_reconnect_kick_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_reconnect_kick_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ct_reconnect_kick_req));
  gt_reconnect_kick_ack_descriptor_ = file->message_type(9);
  static const int gt_reconnect_kick_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_reconnect_kick_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_reconnect_kick_ack, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_reconnect_kick_ack, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_reconnect_kick_ack, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_reconnect_kick_ack, new_gate_id_),
  };
  gt_reconnect_kick_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gt_reconnect_kick_ack_descriptor_,
      gt_reconnect_kick_ack::default_instance_,
      gt_reconnect_kick_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_reconnect_kick_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_reconnect_kick_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gt_reconnect_kick_ack));
  gt_online_client_ntf_descriptor_ = file->message_type(10);
  static const int gt_online_client_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_online_client_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_online_client_ntf, accountid_),
  };
  gt_online_client_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gt_online_client_ntf_descriptor_,
      gt_online_client_ntf::default_instance_,
      gt_online_client_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_online_client_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_online_client_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gt_online_client_ntf));
  gt_game_server_player_num_ntf_descriptor_ = file->message_type(11);
  static const int gt_game_server_player_num_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_game_server_player_num_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_game_server_player_num_ntf, game_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_game_server_player_num_ntf, player_num_),
  };
  gt_game_server_player_num_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gt_game_server_player_num_ntf_descriptor_,
      gt_game_server_player_num_ntf::default_instance_,
      gt_game_server_player_num_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_game_server_player_num_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_game_server_player_num_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gt_game_server_player_num_ntf));
  ct_need_queued_ntf_descriptor_ = file->message_type(12);
  static const int ct_need_queued_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_need_queued_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_need_queued_ntf, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_need_queued_ntf, pos_),
  };
  ct_need_queued_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ct_need_queued_ntf_descriptor_,
      ct_need_queued_ntf::default_instance_,
      ct_need_queued_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_need_queued_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_need_queued_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ct_need_queued_ntf));
  ct_end_queued_ntf_descriptor_ = file->message_type(13);
  static const int ct_end_queued_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_end_queued_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_end_queued_ntf, clientid_),
  };
  ct_end_queued_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ct_end_queued_ntf_descriptor_,
      ct_end_queued_ntf::default_instance_,
      ct_end_queued_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_end_queued_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_end_queued_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ct_end_queued_ntf));
  gt_queued_state_req_descriptor_ = file->message_type(14);
  static const int gt_queued_state_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_queued_state_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_queued_state_req, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_queued_state_req, accountid_),
  };
  gt_queued_state_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gt_queued_state_req_descriptor_,
      gt_queued_state_req::default_instance_,
      gt_queued_state_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_queued_state_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_queued_state_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gt_queued_state_req));
  ct_queued_state_ack_descriptor_ = file->message_type(15);
  static const int ct_queued_state_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_queued_state_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_queued_state_ack, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_queued_state_ack, pos_),
  };
  ct_queued_state_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ct_queued_state_ack_descriptor_,
      ct_queued_state_ack::default_instance_,
      ct_queued_state_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_queued_state_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_queued_state_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ct_queued_state_ack));
  gt_cancel_queue_req_descriptor_ = file->message_type(16);
  static const int gt_cancel_queue_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_cancel_queue_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_cancel_queue_req, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_cancel_queue_req, accountid_),
  };
  gt_cancel_queue_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gt_cancel_queue_req_descriptor_,
      gt_cancel_queue_req::default_instance_,
      gt_cancel_queue_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_cancel_queue_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_cancel_queue_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gt_cancel_queue_req));
  ct_cancel_queue_ack_descriptor_ = file->message_type(17);
  static const int ct_cancel_queue_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_cancel_queue_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_cancel_queue_ack, clientid_),
  };
  ct_cancel_queue_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ct_cancel_queue_ack_descriptor_,
      ct_cancel_queue_ack::default_instance_,
      ct_cancel_queue_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_cancel_queue_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ct_cancel_queue_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ct_cancel_queue_ack));
  account_login_ntf_descriptor_ = file->message_type(18);
  static const int account_login_ntf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_login_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_login_ntf, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_login_ntf, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_login_ntf, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_login_ntf, lastverifytime_),
  };
  account_login_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      account_login_ntf_descriptor_,
      account_login_ntf::default_instance_,
      account_login_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_login_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_login_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(account_login_ntf));
  account_login_ntf_ack_descriptor_ = file->message_type(19);
  static const int account_login_ntf_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_login_ntf_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_login_ntf_ack, accountid_),
  };
  account_login_ntf_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      account_login_ntf_ack_descriptor_,
      account_login_ntf_ack::default_instance_,
      account_login_ntf_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_login_ntf_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_login_ntf_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(account_login_ntf_ack));
  area_list_req_descriptor_ = file->message_type(20);
  static const int area_list_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_list_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_list_req, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_list_req, clientid_),
  };
  area_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      area_list_req_descriptor_,
      area_list_req::default_instance_,
      area_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(area_list_req));
  gate_net_info_descriptor_ = file->message_type(21);
  static const int gate_net_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_net_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_net_info, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_net_info, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_net_info, group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_net_info, new__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_net_info, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_net_info, groupindex_),
  };
  gate_net_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gate_net_info_descriptor_,
      gate_net_info::default_instance_,
      gate_net_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_net_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_net_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gate_net_info));
  area_brief_info_descriptor_ = file->message_type(22);
  static const int area_brief_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_brief_info, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_brief_info, role_name_),
  };
  area_brief_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      area_brief_info_descriptor_,
      area_brief_info::default_instance_,
      area_brief_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_brief_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_brief_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(area_brief_info));
  area_record_descriptor_ = file->message_type(23);
  static const int area_record_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_record, last_area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_record, areas_),
  };
  area_record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      area_record_descriptor_,
      area_record::default_instance_,
      area_record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(area_record));
  group_area_info_descriptor_ = file->message_type(24);
  static const int group_area_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_area_info, groupids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_area_info, area_group_name_),
  };
  group_area_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      group_area_info_descriptor_,
      group_area_info::default_instance_,
      group_area_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_area_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_area_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(group_area_info));
  area_list_ack_descriptor_ = file->message_type(25);
  static const int area_list_ack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_list_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_list_ack, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_list_ack, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_list_ack, groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_list_ack, centerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_list_ack, area_groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_list_ack, recommend_areas_),
  };
  area_list_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      area_list_ack_descriptor_,
      area_list_ack::default_instance_,
      area_list_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_list_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_list_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(area_list_ack));
  area_gateserver_info_req_descriptor_ = file->message_type(26);
  static const int area_gateserver_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_gateserver_info_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_gateserver_info_req, time_),
  };
  area_gateserver_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      area_gateserver_info_req_descriptor_,
      area_gateserver_info_req::default_instance_,
      area_gateserver_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_gateserver_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_gateserver_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(area_gateserver_info_req));
  area_gateserver_info_ack_descriptor_ = file->message_type(27);
  static const int area_gateserver_info_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_gateserver_info_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_gateserver_info_ack, gs_info_),
  };
  area_gateserver_info_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      area_gateserver_info_ack_descriptor_,
      area_gateserver_info_ack::default_instance_,
      area_gateserver_info_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_gateserver_info_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_gateserver_info_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(area_gateserver_info_ack));
  area_gateserver_info_ntf_descriptor_ = file->message_type(28);
  static const int area_gateserver_info_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_gateserver_info_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_gateserver_info_ntf, gs_info_),
  };
  area_gateserver_info_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      area_gateserver_info_ntf_descriptor_,
      area_gateserver_info_ntf::default_instance_,
      area_gateserver_info_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_gateserver_info_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_gateserver_info_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(area_gateserver_info_ntf));
  update_area_info_ntf_descriptor_ = file->message_type(29);
  static const int update_area_info_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_area_info_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_area_info_ntf, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_area_info_ntf, data_),
  };
  update_area_info_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_area_info_ntf_descriptor_,
      update_area_info_ntf::default_instance_,
      update_area_info_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_area_info_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_area_info_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_area_info_ntf));
  lc_heartbeat_req_descriptor_ = file->message_type(30);
  static const int lc_heartbeat_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lc_heartbeat_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lc_heartbeat_req, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lc_heartbeat_req, tm_),
  };
  lc_heartbeat_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lc_heartbeat_req_descriptor_,
      lc_heartbeat_req::default_instance_,
      lc_heartbeat_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lc_heartbeat_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lc_heartbeat_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lc_heartbeat_req));
  lc_heartbeat_ack_descriptor_ = file->message_type(31);
  static const int lc_heartbeat_ack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lc_heartbeat_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lc_heartbeat_ack, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lc_heartbeat_ack, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lc_heartbeat_ack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lc_heartbeat_ack, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lc_heartbeat_ack, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lc_heartbeat_ack, tm_),
  };
  lc_heartbeat_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lc_heartbeat_ack_descriptor_,
      lc_heartbeat_ack::default_instance_,
      lc_heartbeat_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lc_heartbeat_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lc_heartbeat_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lc_heartbeat_ack));
  role_leave_game_ntf_descriptor_ = file->message_type(32);
  static const int role_leave_game_ntf_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_leave_game_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_leave_game_ntf, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_leave_game_ntf, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_leave_game_ntf, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_leave_game_ntf, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_leave_game_ntf, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_leave_game_ntf, lastlogindate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_leave_game_ntf, account_),
  };
  role_leave_game_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_leave_game_ntf_descriptor_,
      role_leave_game_ntf::default_instance_,
      role_leave_game_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_leave_game_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_leave_game_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_leave_game_ntf));
  gm2center_close_req_descriptor_ = file->message_type(33);
  static const int gm2center_close_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2center_close_req, protoid_),
  };
  gm2center_close_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm2center_close_req_descriptor_,
      gm2center_close_req::default_instance_,
      gm2center_close_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2center_close_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2center_close_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm2center_close_req));
  center2gm_close_ack_descriptor_ = file->message_type(34);
  static const int center2gm_close_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(center2gm_close_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(center2gm_close_ack, retcode_),
  };
  center2gm_close_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      center2gm_close_ack_descriptor_,
      center2gm_close_ack::default_instance_,
      center2gm_close_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(center2gm_close_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(center2gm_close_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(center2gm_close_ack));
  gm2center_center_status_req_descriptor_ = file->message_type(35);
  static const int gm2center_center_status_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2center_center_status_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2center_center_status_req, info_detail_),
  };
  gm2center_center_status_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm2center_center_status_req_descriptor_,
      gm2center_center_status_req::default_instance_,
      gm2center_center_status_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2center_center_status_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2center_center_status_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm2center_center_status_req));
  center2gm_center_status_ack_descriptor_ = file->message_type(36);
  static const int center2gm_center_status_ack_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(center2gm_center_status_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(center2gm_center_status_ack, server_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(center2gm_center_status_ack, account_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(center2gm_center_status_ack, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(center2gm_center_status_ack, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(center2gm_center_status_ack, server_redis_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(center2gm_center_status_ack, server_redis_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(center2gm_center_status_ack, gateserver_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(center2gm_center_status_ack, redis_statue_),
  };
  center2gm_center_status_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      center2gm_center_status_ack_descriptor_,
      center2gm_center_status_ack::default_instance_,
      center2gm_center_status_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(center2gm_center_status_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(center2gm_center_status_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(center2gm_center_status_ack));
  gm2center_center_reset_req_descriptor_ = file->message_type(37);
  static const int gm2center_center_reset_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2center_center_reset_req, protoid_),
  };
  gm2center_center_reset_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm2center_center_reset_req_descriptor_,
      gm2center_center_reset_req::default_instance_,
      gm2center_center_reset_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2center_center_reset_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2center_center_reset_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm2center_center_reset_req));
  center2gm_center_reset_ack_descriptor_ = file->message_type(38);
  static const int center2gm_center_reset_ack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(center2gm_center_reset_ack, protoid_),
  };
  center2gm_center_reset_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      center2gm_center_reset_ack_descriptor_,
      center2gm_center_reset_ack::default_instance_,
      center2gm_center_reset_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(center2gm_center_reset_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(center2gm_center_reset_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(center2gm_center_reset_ack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ss_5fcenter_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gate_listen_report_descriptor_, &gate_listen_report::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gate_role_num_report_descriptor_, &gate_role_num_report::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_login_verify_req_descriptor_, &role_login_verify_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_login_verify_ack_descriptor_, &role_login_verify_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    kick_out_req_descriptor_, &kick_out_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    kick_out_ack_descriptor_, &kick_out_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gt_reconnect_check_req_descriptor_, &gt_reconnect_check_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ct_reconnect_check_ack_descriptor_, &ct_reconnect_check_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ct_reconnect_kick_req_descriptor_, &ct_reconnect_kick_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gt_reconnect_kick_ack_descriptor_, &gt_reconnect_kick_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gt_online_client_ntf_descriptor_, &gt_online_client_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gt_game_server_player_num_ntf_descriptor_, &gt_game_server_player_num_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ct_need_queued_ntf_descriptor_, &ct_need_queued_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ct_end_queued_ntf_descriptor_, &ct_end_queued_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gt_queued_state_req_descriptor_, &gt_queued_state_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ct_queued_state_ack_descriptor_, &ct_queued_state_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gt_cancel_queue_req_descriptor_, &gt_cancel_queue_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ct_cancel_queue_ack_descriptor_, &ct_cancel_queue_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    account_login_ntf_descriptor_, &account_login_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    account_login_ntf_ack_descriptor_, &account_login_ntf_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    area_list_req_descriptor_, &area_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gate_net_info_descriptor_, &gate_net_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    area_brief_info_descriptor_, &area_brief_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    area_record_descriptor_, &area_record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    group_area_info_descriptor_, &group_area_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    area_list_ack_descriptor_, &area_list_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    area_gateserver_info_req_descriptor_, &area_gateserver_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    area_gateserver_info_ack_descriptor_, &area_gateserver_info_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    area_gateserver_info_ntf_descriptor_, &area_gateserver_info_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_area_info_ntf_descriptor_, &update_area_info_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lc_heartbeat_req_descriptor_, &lc_heartbeat_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lc_heartbeat_ack_descriptor_, &lc_heartbeat_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_leave_game_ntf_descriptor_, &role_leave_game_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm2center_close_req_descriptor_, &gm2center_close_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    center2gm_close_ack_descriptor_, &center2gm_close_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm2center_center_status_req_descriptor_, &gm2center_center_status_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    center2gm_center_status_ack_descriptor_, &center2gm_center_status_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm2center_center_reset_req_descriptor_, &gm2center_center_reset_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    center2gm_center_reset_ack_descriptor_, &center2gm_center_reset_ack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ss_5fcenter_2eproto() {
  delete gate_listen_report::default_instance_;
  delete gate_listen_report_reflection_;
  delete gate_role_num_report::default_instance_;
  delete gate_role_num_report_reflection_;
  delete role_login_verify_req::default_instance_;
  delete role_login_verify_req_reflection_;
  delete role_login_verify_ack::default_instance_;
  delete role_login_verify_ack_reflection_;
  delete kick_out_req::default_instance_;
  delete kick_out_req_reflection_;
  delete kick_out_ack::default_instance_;
  delete kick_out_ack_reflection_;
  delete gt_reconnect_check_req::default_instance_;
  delete gt_reconnect_check_req_reflection_;
  delete ct_reconnect_check_ack::default_instance_;
  delete ct_reconnect_check_ack_reflection_;
  delete ct_reconnect_kick_req::default_instance_;
  delete ct_reconnect_kick_req_reflection_;
  delete gt_reconnect_kick_ack::default_instance_;
  delete gt_reconnect_kick_ack_reflection_;
  delete gt_online_client_ntf::default_instance_;
  delete gt_online_client_ntf_reflection_;
  delete gt_game_server_player_num_ntf::default_instance_;
  delete gt_game_server_player_num_ntf_reflection_;
  delete ct_need_queued_ntf::default_instance_;
  delete ct_need_queued_ntf_reflection_;
  delete ct_end_queued_ntf::default_instance_;
  delete ct_end_queued_ntf_reflection_;
  delete gt_queued_state_req::default_instance_;
  delete gt_queued_state_req_reflection_;
  delete ct_queued_state_ack::default_instance_;
  delete ct_queued_state_ack_reflection_;
  delete gt_cancel_queue_req::default_instance_;
  delete gt_cancel_queue_req_reflection_;
  delete ct_cancel_queue_ack::default_instance_;
  delete ct_cancel_queue_ack_reflection_;
  delete account_login_ntf::default_instance_;
  delete account_login_ntf_reflection_;
  delete account_login_ntf_ack::default_instance_;
  delete account_login_ntf_ack_reflection_;
  delete area_list_req::default_instance_;
  delete area_list_req_reflection_;
  delete gate_net_info::default_instance_;
  delete gate_net_info_reflection_;
  delete area_brief_info::default_instance_;
  delete area_brief_info_reflection_;
  delete area_record::default_instance_;
  delete area_record_reflection_;
  delete group_area_info::default_instance_;
  delete group_area_info_reflection_;
  delete area_list_ack::default_instance_;
  delete area_list_ack_reflection_;
  delete area_gateserver_info_req::default_instance_;
  delete area_gateserver_info_req_reflection_;
  delete area_gateserver_info_ack::default_instance_;
  delete area_gateserver_info_ack_reflection_;
  delete area_gateserver_info_ntf::default_instance_;
  delete area_gateserver_info_ntf_reflection_;
  delete update_area_info_ntf::default_instance_;
  delete update_area_info_ntf_reflection_;
  delete lc_heartbeat_req::default_instance_;
  delete lc_heartbeat_req_reflection_;
  delete lc_heartbeat_ack::default_instance_;
  delete lc_heartbeat_ack_reflection_;
  delete role_leave_game_ntf::default_instance_;
  delete role_leave_game_ntf_reflection_;
  delete gm2center_close_req::default_instance_;
  delete gm2center_close_req_reflection_;
  delete center2gm_close_ack::default_instance_;
  delete center2gm_close_ack_reflection_;
  delete gm2center_center_status_req::default_instance_;
  delete gm2center_center_status_req_reflection_;
  delete center2gm_center_status_ack::default_instance_;
  delete center2gm_center_status_ack_reflection_;
  delete gm2center_center_reset_req::default_instance_;
  delete gm2center_center_reset_req_reflection_;
  delete center2gm_center_reset_ack::default_instance_;
  delete center2gm_center_reset_ack_reflection_;
}

void protobuf_AddDesc_ss_5fcenter_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SProtoSpace::protobuf_AddDesc_ss_5fprotoid_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5froletype_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ss_center.proto\022\013SProtoSpace\032\020ss_proto"
    "id.proto\032\021cm_roletype.proto\"\262\001\n\022gate_lis"
    "ten_report\022\?\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ESSProtoID:\025gate_listen_report_id\022\n\n\002I"
    "p\030\002 \001(\t\022\014\n\004Port\030\003 \001(\005\022\021\n\tGroupName\030\004 \001(\t"
    "\022\013\n\003new\030\005 \001(\010\022\r\n\005state\030\006 \001(\005\022\022\n\ngroupind"
    "ex\030\007 \001(\r\"f\n\024gate_role_num_report\022A\n\007prot"
    "oid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\027gate"
    "_role_num_report_id\022\013\n\003num\030\002 \001(\005\"\255\001\n\025rol"
    "e_login_verify_req\022B\n\007protoid\030\001 \001(\0162\027.SP"
    "rotoSpace.ESSProtoID:\030role_login_verify_"
    "req_id\022\017\n\007account\030\002 \001(\t\022\r\n\005token\030\003 \001(\t\022\016"
    "\n\006tempid\030\004 \001(\r\022\020\n\010clientid\030\005 \001(\r\022\016\n\006area"
    "id\030\006 \001(\r\"\303\001\n\025role_login_verify_ack\022B\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\030ro"
    "le_login_verify_ack_id\022\017\n\007retcode\030\002 \001(\005\022"
    "\017\n\007account\030\003 \001(\t\022\020\n\010clientid\030\004 \001(\r\022\r\n\005to"
    "ken\030\005 \001(\t\022\023\n\013isreconnect\030\006 \001(\010\022\016\n\006areaid"
    "\030\007 \001(\r\"\316\001\n\014kick_out_req\0229\n\007protoid\030\001 \001(\016"
    "2\027.SProtoSpace.ESSProtoID:\017kick_out_req_"
    "id\022\017\n\007account\030\002 \001(\t\022\023\n\013newclientid\030\003 \001(\r"
    "\022\021\n\tnewgateid\030\004 \001(\004\022+\n\006reason\030\005 \001(\0162\033.SP"
    "rotoSpace.eKickoutReason\022\r\n\005token\030\006 \001(\t\022"
    "\016\n\006areaid\030\007 \001(\r\"\241\001\n\014kick_out_ack\0229\n\007prot"
    "oid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\017kick"
    "_out_ack_id\022\017\n\007account\030\002 \001(\t\022\023\n\013newclien"
    "tid\030\004 \001(\r\022\021\n\tnewgateid\030\005 \001(\004\022\r\n\005token\030\006 "
    "\001(\t\022\016\n\006areaid\030\007 \001(\r\"\222\001\n\026gt_reconnect_che"
    "ck_req\022C\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ES"
    "SProtoID:\031gt_reconnect_check_req_id\022\017\n\007a"
    "ccount\030\002 \001(\t\022\020\n\010clientid\030\003 \001(\r\022\020\n\010player"
    "id\030\004 \001(\004\"\222\001\n\026ct_reconnect_check_ack\022C\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\031c"
    "t_reconnect_check_ack_id\022\017\n\007account\030\002 \001("
    "\t\022\020\n\010clientid\030\003 \001(\r\022\020\n\010playerid\030\004 \001(\004\"\245\001"
    "\n\025ct_reconnect_kick_req\022B\n\007protoid\030\001 \001(\016"
    "2\027.SProtoSpace.ESSProtoID:\030ct_reconnect_"
    "kick_req_id\022\017\n\007account\030\002 \001(\t\022\020\n\010clientid"
    "\030\003 \001(\r\022\020\n\010playerid\030\004 \001(\004\022\023\n\013new_gate_id\030"
    "\005 \001(\004\"\245\001\n\025gt_reconnect_kick_ack\022B\n\007proto"
    "id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\030gt_re"
    "connect_kick_ack_id\022\017\n\007account\030\002 \001(\t\022\020\n\010"
    "clientid\030\003 \001(\r\022\020\n\010playerid\030\004 \001(\004\022\023\n\013new_"
    "gate_id\030\005 \001(\004\"l\n\024gt_online_client_ntf\022A\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:"
    "\027gt_online_client_ntf_id\022\021\n\taccountid\030\002 "
    "\003(\r\"\227\001\n\035gt_game_server_player_num_ntf\022J\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:"
    " gt_game_server_player_num_ntf_id\022\026\n\016gam"
    "e_server_id\030\002 \001(\r\022\022\n\nplayer_num\030\003 \001(\r\"t\n"
    "\022ct_need_queued_ntf\022\?\n\007protoid\030\001 \001(\0162\027.S"
    "ProtoSpace.ESSProtoID:\025ct_need_queued_nt"
    "f_id\022\020\n\010clientid\030\002 \001(\r\022\013\n\003pos\030\003 \001(\r\"e\n\021c"
    "t_end_queued_ntf\022>\n\007protoid\030\001 \001(\0162\027.SPro"
    "toSpace.ESSProtoID:\024ct_end_queued_ntf_id"
    "\022\020\n\010clientid\030\002 \001(\r\"|\n\023gt_queued_state_re"
    "q\022@\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProt"
    "oID:\026gt_queued_state_req_id\022\020\n\010clientid\030"
    "\002 \001(\r\022\021\n\taccountid\030\003 \001(\r\"v\n\023ct_queued_st"
    "ate_ack\022@\n\007protoid\030\001 \001(\0162\027.SProtoSpace.E"
    "SSProtoID:\026ct_queued_state_ack_id\022\020\n\010cli"
    "entid\030\002 \001(\r\022\013\n\003pos\030\003 \001(\r\"|\n\023gt_cancel_qu"
    "eue_req\022@\n\007protoid\030\001 \001(\0162\027.SProtoSpace.E"
    "SSProtoID:\026gt_cancel_queue_req_id\022\020\n\010cli"
    "entid\030\002 \001(\r\022\021\n\taccountid\030\003 \001(\r\"i\n\023ct_can"
    "cel_queue_ack\022@\n\007protoid\030\001 \001(\0162\027.SProtoS"
    "pace.ESSProtoID:\026ct_cancel_queue_ack_id\022"
    "\020\n\010clientid\030\002 \001(\r\"\235\001\n\021account_login_ntf\022"
    ">\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoI"
    "D:\024account_login_ntf_id\022\021\n\taccountid\030\002 \001"
    "(\t\022\r\n\005token\030\003 \001(\t\022\016\n\006tempid\030\004 \001(\r\022\026\n\016las"
    "tverifytime\030\005 \001(\r\"n\n\025account_login_ntf_a"
    "ck\022B\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSPro"
    "toID:\030account_login_ntf_ack_id\022\021\n\taccoun"
    "tid\030\002 \001(\t\"n\n\rarea_list_req\022:\n\007protoid\030\001 "
    "\001(\0162\027.SProtoSpace.ESSProtoID:\020area_list_"
    "req_id\022\017\n\007account\030\002 \001(\t\022\020\n\010clientid\030\003 \001("
    "\r\"y\n\rgate_net_info\022\n\n\002id\030\001 \001(\004\022\n\n\002ip\030\002 \001"
    "(\t\022\014\n\004port\030\003 \001(\005\022\022\n\ngroup_name\030\004 \001(\t\022\013\n\003"
    "new\030\005 \001(\010\022\r\n\005state\030\006 \001(\005\022\022\n\ngroupindex\030\007"
    " \001(\r\"5\n\017area_brief_info\022\017\n\007area_id\030\001 \001(\005"
    "\022\021\n\trole_name\030\002 \001(\t\"P\n\013area_record\022\024\n\014la"
    "st_area_id\030\001 \001(\r\022+\n\005areas\030\002 \003(\0132\034.SProto"
    "Space.area_brief_info\"<\n\017group_area_info"
    "\022\020\n\010groupids\030\001 \003(\004\022\027\n\017area_group_name\030\002 "
    "\001(\t\"\226\002\n\rarea_list_ack\022:\n\007protoid\030\001 \001(\0162\027"
    ".SProtoSpace.ESSProtoID:\020area_list_ack_i"
    "d\022\017\n\007account\030\002 \001(\t\022\020\n\010clientid\030\003 \001(\r\022*\n\006"
    "groups\030\004 \003(\0132\032.SProtoSpace.gate_net_info"
    "\022\020\n\010centerid\030\005 \001(\004\0221\n\013area_groups\030\006 \003(\0132"
    "\034.SProtoSpace.group_area_info\0225\n\017recomme"
    "nd_areas\030\007 \003(\0132\034.SProtoSpace.group_area_"
    "info\"o\n\030area_gateserver_info_req\022E\n\007prot"
    "oid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\033area"
    "_gateserver_info_req_id\022\014\n\004time\030\002 \001(\r\"\225\001"
    "\n\030area_gateserver_info_ack\022E\n\007protoid\030\001 "
    "\001(\0162\027.SProtoSpace.ESSProtoID:\033area_gates"
    "erver_info_ack_id\0222\n\007gs_info\030\002 \003(\0132!.SPr"
    "otoSpace.area_gateserver_info\"\225\001\n\030area_g"
    "ateserver_info_ntf\022E\n\007protoid\030\001 \001(\0162\027.SP"
    "rotoSpace.ESSProtoID:\033area_gateserver_in"
    "fo_ntf_id\0222\n\007gs_info\030\002 \001(\0132!.SProtoSpace"
    ".area_gateserver_info\"\226\001\n\024update_area_in"
    "fo_ntf\022A\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ES"
    "SProtoID:\027update_area_info_ntf_id\022\017\n\007acc"
    "ount\030\002 \001(\t\022*\n\004data\030\003 \001(\0132\034.SProtoSpace.a"
    "rea_brief_info\"j\n\020lc_heartbeat_req\022=\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\023lc"
    "_heartbeat_req_id\022\013\n\003sid\030\002 \001(\r\022\n\n\002tm\030\003 \001"
    "(\r\"\246\001\n\020lc_heartbeat_ack\022=\n\007protoid\030\001 \001(\016"
    "2\027.SProtoSpace.ESSProtoID:\023lc_heartbeat_"
    "ack_id\022\016\n\006region\030\002 \001(\r\022\r\n\005group\030\003 \001(\r\022\014\n"
    "\004type\030\004 \001(\r\022\r\n\005index\030\005 \001(\r\022\013\n\003sid\030\006 \001(\r\022"
    "\n\n\002tm\030\007 \001(\r\"\316\001\n\023role_leave_game_ntf\022@\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\026r"
    "ole_leave_game_ntf_id\022\n\n\002id\030\002 \001(\004\022\021\n\tacc"
    "ountid\030\003 \001(\r\022\017\n\007groupid\030\004 \001(\004\022\r\n\005level\030\005"
    " \001(\r\022\016\n\006heroid\030\006 \001(\r\022\025\n\rlastlogindate\030\007 "
    "\001(\r\022\017\n\007account\030\010 \001(\t\"W\n\023gm2center_close_"
    "req\022@\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSPr"
    "otoID:\026gm2center_close_req_id\"h\n\023center2"
    "gm_close_ack\022@\n\007protoid\030\001 \001(\0162\027.SProtoSp"
    "ace.ESSProtoID:\026center2gm_close_ack_id\022\017"
    "\n\007retcode\030\002 \001(\r\"|\n\033gm2center_center_stat"
    "us_req\022H\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ES"
    "SProtoID:\036gm2center_center_status_req_id"
    "\022\023\n\013info_detail\030\002 \001(\004\"\241\002\n\033center2gm_cent"
    "er_status_ack\022H\n\007protoid\030\001 \001(\0162\027.SProtoS"
    "pace.ESSProtoID:\036center2gm_center_status"
    "_ack_id\022\025\n\rserver_status\030\002 \001(\r\022\025\n\raccoun"
    "t_count\030\003 \001(\r\022\021\n\tserver_id\030\004 \001(\004\022\023\n\013serv"
    "er_port\030\005 \001(\004\022\027\n\017server_redis_ip\030\020 \001(\004\022\031"
    "\n\021server_redis_port\030\021 \001(\004\022\030\n\020gateserver_"
    "count\030\022 \001(\r\022\024\n\014redis_statue\030\023 \001(\r\"e\n\032gm2"
    "center_center_reset_req\022G\n\007protoid\030\001 \001(\016"
    "2\027.SProtoSpace.ESSProtoID:\035gm2center_cen"
    "ter_reset_req_id\"e\n\032center2gm_center_res"
    "et_ack\022G\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ES"
    "SProtoID:\035center2gm_center_reset_ack_id", 5559);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ss_center.proto", &protobuf_RegisterTypes);
  gate_listen_report::default_instance_ = new gate_listen_report();
  gate_role_num_report::default_instance_ = new gate_role_num_report();
  role_login_verify_req::default_instance_ = new role_login_verify_req();
  role_login_verify_ack::default_instance_ = new role_login_verify_ack();
  kick_out_req::default_instance_ = new kick_out_req();
  kick_out_ack::default_instance_ = new kick_out_ack();
  gt_reconnect_check_req::default_instance_ = new gt_reconnect_check_req();
  ct_reconnect_check_ack::default_instance_ = new ct_reconnect_check_ack();
  ct_reconnect_kick_req::default_instance_ = new ct_reconnect_kick_req();
  gt_reconnect_kick_ack::default_instance_ = new gt_reconnect_kick_ack();
  gt_online_client_ntf::default_instance_ = new gt_online_client_ntf();
  gt_game_server_player_num_ntf::default_instance_ = new gt_game_server_player_num_ntf();
  ct_need_queued_ntf::default_instance_ = new ct_need_queued_ntf();
  ct_end_queued_ntf::default_instance_ = new ct_end_queued_ntf();
  gt_queued_state_req::default_instance_ = new gt_queued_state_req();
  ct_queued_state_ack::default_instance_ = new ct_queued_state_ack();
  gt_cancel_queue_req::default_instance_ = new gt_cancel_queue_req();
  ct_cancel_queue_ack::default_instance_ = new ct_cancel_queue_ack();
  account_login_ntf::default_instance_ = new account_login_ntf();
  account_login_ntf_ack::default_instance_ = new account_login_ntf_ack();
  area_list_req::default_instance_ = new area_list_req();
  gate_net_info::default_instance_ = new gate_net_info();
  area_brief_info::default_instance_ = new area_brief_info();
  area_record::default_instance_ = new area_record();
  group_area_info::default_instance_ = new group_area_info();
  area_list_ack::default_instance_ = new area_list_ack();
  area_gateserver_info_req::default_instance_ = new area_gateserver_info_req();
  area_gateserver_info_ack::default_instance_ = new area_gateserver_info_ack();
  area_gateserver_info_ntf::default_instance_ = new area_gateserver_info_ntf();
  update_area_info_ntf::default_instance_ = new update_area_info_ntf();
  lc_heartbeat_req::default_instance_ = new lc_heartbeat_req();
  lc_heartbeat_ack::default_instance_ = new lc_heartbeat_ack();
  role_leave_game_ntf::default_instance_ = new role_leave_game_ntf();
  gm2center_close_req::default_instance_ = new gm2center_close_req();
  center2gm_close_ack::default_instance_ = new center2gm_close_ack();
  gm2center_center_status_req::default_instance_ = new gm2center_center_status_req();
  center2gm_center_status_ack::default_instance_ = new center2gm_center_status_ack();
  gm2center_center_reset_req::default_instance_ = new gm2center_center_reset_req();
  center2gm_center_reset_ack::default_instance_ = new center2gm_center_reset_ack();
  gate_listen_report::default_instance_->InitAsDefaultInstance();
  gate_role_num_report::default_instance_->InitAsDefaultInstance();
  role_login_verify_req::default_instance_->InitAsDefaultInstance();
  role_login_verify_ack::default_instance_->InitAsDefaultInstance();
  kick_out_req::default_instance_->InitAsDefaultInstance();
  kick_out_ack::default_instance_->InitAsDefaultInstance();
  gt_reconnect_check_req::default_instance_->InitAsDefaultInstance();
  ct_reconnect_check_ack::default_instance_->InitAsDefaultInstance();
  ct_reconnect_kick_req::default_instance_->InitAsDefaultInstance();
  gt_reconnect_kick_ack::default_instance_->InitAsDefaultInstance();
  gt_online_client_ntf::default_instance_->InitAsDefaultInstance();
  gt_game_server_player_num_ntf::default_instance_->InitAsDefaultInstance();
  ct_need_queued_ntf::default_instance_->InitAsDefaultInstance();
  ct_end_queued_ntf::default_instance_->InitAsDefaultInstance();
  gt_queued_state_req::default_instance_->InitAsDefaultInstance();
  ct_queued_state_ack::default_instance_->InitAsDefaultInstance();
  gt_cancel_queue_req::default_instance_->InitAsDefaultInstance();
  ct_cancel_queue_ack::default_instance_->InitAsDefaultInstance();
  account_login_ntf::default_instance_->InitAsDefaultInstance();
  account_login_ntf_ack::default_instance_->InitAsDefaultInstance();
  area_list_req::default_instance_->InitAsDefaultInstance();
  gate_net_info::default_instance_->InitAsDefaultInstance();
  area_brief_info::default_instance_->InitAsDefaultInstance();
  area_record::default_instance_->InitAsDefaultInstance();
  group_area_info::default_instance_->InitAsDefaultInstance();
  area_list_ack::default_instance_->InitAsDefaultInstance();
  area_gateserver_info_req::default_instance_->InitAsDefaultInstance();
  area_gateserver_info_ack::default_instance_->InitAsDefaultInstance();
  area_gateserver_info_ntf::default_instance_->InitAsDefaultInstance();
  update_area_info_ntf::default_instance_->InitAsDefaultInstance();
  lc_heartbeat_req::default_instance_->InitAsDefaultInstance();
  lc_heartbeat_ack::default_instance_->InitAsDefaultInstance();
  role_leave_game_ntf::default_instance_->InitAsDefaultInstance();
  gm2center_close_req::default_instance_->InitAsDefaultInstance();
  center2gm_close_ack::default_instance_->InitAsDefaultInstance();
  gm2center_center_status_req::default_instance_->InitAsDefaultInstance();
  center2gm_center_status_ack::default_instance_->InitAsDefaultInstance();
  gm2center_center_reset_req::default_instance_->InitAsDefaultInstance();
  center2gm_center_reset_ack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ss_5fcenter_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ss_5fcenter_2eproto {
  StaticDescriptorInitializer_ss_5fcenter_2eproto() {
    protobuf_AddDesc_ss_5fcenter_2eproto();
  }
} static_descriptor_initializer_ss_5fcenter_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int gate_listen_report::kProtoidFieldNumber;
const int gate_listen_report::kIpFieldNumber;
const int gate_listen_report::kPortFieldNumber;
const int gate_listen_report::kGroupNameFieldNumber;
const int gate_listen_report::kNewFieldNumber;
const int gate_listen_report::kStateFieldNumber;
const int gate_listen_report::kGroupindexFieldNumber;
#endif  // !_MSC_VER

gate_listen_report::gate_listen_report()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gate_listen_report::InitAsDefaultInstance() {
}

gate_listen_report::gate_listen_report(const gate_listen_report& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gate_listen_report::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new__ = false;
  state_ = 0;
  groupindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gate_listen_report::~gate_listen_report() {
  SharedDtor();
}

void gate_listen_report::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (this != default_instance_) {
  }
}

void gate_listen_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gate_listen_report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gate_listen_report_descriptor_;
}

const gate_listen_report& gate_listen_report::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

gate_listen_report* gate_listen_report::default_instance_ = NULL;

gate_listen_report* gate_listen_report::New() const {
  return new gate_listen_report;
}

void gate_listen_report::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
    new__ = false;
    state_ = 0;
    groupindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gate_listen_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gate_listen_report_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Ip;
        break;
      }

      // optional string Ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Port;
        break;
      }

      // optional int32 Port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_GroupName;
        break;
      }

      // optional string GroupName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GroupName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_new;
        break;
      }

      // optional bool new = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new__)));
          set_has_new_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional int32 state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_groupindex;
        break;
      }

      // optional uint32 groupindex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupindex_)));
          set_has_groupindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gate_listen_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gate_listen_report_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string Ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 Port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional string GroupName = 4;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->groupname(), output);
  }

  // optional bool new = 5;
  if (has_new_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->new_(), output);
  }

  // optional int32 state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->state(), output);
  }

  // optional uint32 groupindex = 7;
  if (has_groupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->groupindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gate_listen_report::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gate_listen_report_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string Ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 Port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional string GroupName = 4;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->groupname(), target);
  }

  // optional bool new = 5;
  if (has_new_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->new_(), target);
  }

  // optional int32 state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->state(), target);
  }

  // optional uint32 groupindex = 7;
  if (has_groupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->groupindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gate_listen_report::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gate_listen_report_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string Ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 Port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string GroupName = 4;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

    // optional bool new = 5;
    if (has_new_()) {
      total_size += 1 + 1;
    }

    // optional int32 state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional uint32 groupindex = 7;
    if (has_groupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gate_listen_report::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gate_listen_report* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gate_listen_report*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gate_listen_report::MergeFrom(const gate_listen_report& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
    if (from.has_new_()) {
      set_new_(from.new_());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_groupindex()) {
      set_groupindex(from.groupindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gate_listen_report::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gate_listen_report::CopyFrom(const gate_listen_report& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gate_listen_report::IsInitialized() const {

  return true;
}

void gate_listen_report::Swap(gate_listen_report* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(groupname_, other->groupname_);
    std::swap(new__, other->new__);
    std::swap(state_, other->state_);
    std::swap(groupindex_, other->groupindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gate_listen_report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gate_listen_report_descriptor_;
  metadata.reflection = gate_listen_report_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gate_role_num_report::kProtoidFieldNumber;
const int gate_role_num_report::kNumFieldNumber;
#endif  // !_MSC_VER

gate_role_num_report::gate_role_num_report()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gate_role_num_report::InitAsDefaultInstance() {
}

gate_role_num_report::gate_role_num_report(const gate_role_num_report& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gate_role_num_report::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 2;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gate_role_num_report::~gate_role_num_report() {
  SharedDtor();
}

void gate_role_num_report::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gate_role_num_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gate_role_num_report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gate_role_num_report_descriptor_;
}

const gate_role_num_report& gate_role_num_report::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

gate_role_num_report* gate_role_num_report::default_instance_ = NULL;

gate_role_num_report* gate_role_num_report::New() const {
  return new gate_role_num_report;
}

void gate_role_num_report::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 2;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gate_role_num_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gate_role_num_report_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gate_role_num_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gate_role_num_report_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gate_role_num_report::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gate_role_num_report_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gate_role_num_report::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gate_role_num_report_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gate_role_num_report::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gate_role_num_report* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gate_role_num_report*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gate_role_num_report::MergeFrom(const gate_role_num_report& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gate_role_num_report::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gate_role_num_report::CopyFrom(const gate_role_num_report& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gate_role_num_report::IsInitialized() const {

  return true;
}

void gate_role_num_report::Swap(gate_role_num_report* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gate_role_num_report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gate_role_num_report_descriptor_;
  metadata.reflection = gate_role_num_report_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_login_verify_req::kProtoidFieldNumber;
const int role_login_verify_req::kAccountFieldNumber;
const int role_login_verify_req::kTokenFieldNumber;
const int role_login_verify_req::kTempidFieldNumber;
const int role_login_verify_req::kClientidFieldNumber;
const int role_login_verify_req::kAreaidFieldNumber;
#endif  // !_MSC_VER

role_login_verify_req::role_login_verify_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_login_verify_req::InitAsDefaultInstance() {
}

role_login_verify_req::role_login_verify_req(const role_login_verify_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_login_verify_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 3;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tempid_ = 0u;
  clientid_ = 0u;
  areaid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_login_verify_req::~role_login_verify_req() {
  SharedDtor();
}

void role_login_verify_req::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void role_login_verify_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_login_verify_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_login_verify_req_descriptor_;
}

const role_login_verify_req& role_login_verify_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

role_login_verify_req* role_login_verify_req::default_instance_ = NULL;

role_login_verify_req* role_login_verify_req::New() const {
  return new role_login_verify_req;
}

void role_login_verify_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 3;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    tempid_ = 0u;
    clientid_ = 0u;
    areaid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_login_verify_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = role_login_verify_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tempid;
        break;
      }

      // optional uint32 tempid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tempid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_clientid;
        break;
      }

      // optional uint32 clientid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_areaid;
        break;
      }

      // optional uint32 areaid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_login_verify_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = role_login_verify_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }

  // optional uint32 tempid = 4;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tempid(), output);
  }

  // optional uint32 clientid = 5;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->clientid(), output);
  }

  // optional uint32 areaid = 6;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_login_verify_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = role_login_verify_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // optional uint32 tempid = 4;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tempid(), target);
  }

  // optional uint32 clientid = 5;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->clientid(), target);
  }

  // optional uint32 areaid = 6;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_login_verify_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = role_login_verify_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 tempid = 4;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tempid());
    }

    // optional uint32 clientid = 5;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // optional uint32 areaid = 6;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_login_verify_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_login_verify_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_login_verify_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_login_verify_req::MergeFrom(const role_login_verify_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_login_verify_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_login_verify_req::CopyFrom(const role_login_verify_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_login_verify_req::IsInitialized() const {

  return true;
}

void role_login_verify_req::Swap(role_login_verify_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(account_, other->account_);
    std::swap(token_, other->token_);
    std::swap(tempid_, other->tempid_);
    std::swap(clientid_, other->clientid_);
    std::swap(areaid_, other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_login_verify_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_login_verify_req_descriptor_;
  metadata.reflection = role_login_verify_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_login_verify_ack::kProtoidFieldNumber;
const int role_login_verify_ack::kRetcodeFieldNumber;
const int role_login_verify_ack::kAccountFieldNumber;
const int role_login_verify_ack::kClientidFieldNumber;
const int role_login_verify_ack::kTokenFieldNumber;
const int role_login_verify_ack::kIsreconnectFieldNumber;
const int role_login_verify_ack::kAreaidFieldNumber;
#endif  // !_MSC_VER

role_login_verify_ack::role_login_verify_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_login_verify_ack::InitAsDefaultInstance() {
}

role_login_verify_ack::role_login_verify_ack(const role_login_verify_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_login_verify_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 4;
  retcode_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isreconnect_ = false;
  areaid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_login_verify_ack::~role_login_verify_ack() {
  SharedDtor();
}

void role_login_verify_ack::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void role_login_verify_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_login_verify_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_login_verify_ack_descriptor_;
}

const role_login_verify_ack& role_login_verify_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

role_login_verify_ack* role_login_verify_ack::default_instance_ = NULL;

role_login_verify_ack* role_login_verify_ack::New() const {
  return new role_login_verify_ack;
}

void role_login_verify_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 4;
    retcode_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    clientid_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    isreconnect_ = false;
    areaid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_login_verify_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = role_login_verify_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retcode;
        break;
      }

      // optional int32 retcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_clientid;
        break;
      }

      // optional uint32 clientid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_token;
        break;
      }

      // optional string token = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isreconnect;
        break;
      }

      // optional bool isreconnect = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isreconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreconnect_)));
          set_has_isreconnect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_areaid;
        break;
      }

      // optional uint32 areaid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_login_verify_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = role_login_verify_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 retcode = 2;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retcode(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // optional uint32 clientid = 4;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->clientid(), output);
  }

  // optional string token = 5;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->token(), output);
  }

  // optional bool isreconnect = 6;
  if (has_isreconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isreconnect(), output);
  }

  // optional uint32 areaid = 7;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_login_verify_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = role_login_verify_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 retcode = 2;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retcode(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional uint32 clientid = 4;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->clientid(), target);
  }

  // optional string token = 5;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->token(), target);
  }

  // optional bool isreconnect = 6;
  if (has_isreconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isreconnect(), target);
  }

  // optional uint32 areaid = 7;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_login_verify_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = role_login_verify_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 retcode = 2;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 clientid = 4;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // optional string token = 5;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional bool isreconnect = 6;
    if (has_isreconnect()) {
      total_size += 1 + 1;
    }

    // optional uint32 areaid = 7;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_login_verify_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_login_verify_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_login_verify_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_login_verify_ack::MergeFrom(const role_login_verify_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_isreconnect()) {
      set_isreconnect(from.isreconnect());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_login_verify_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_login_verify_ack::CopyFrom(const role_login_verify_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_login_verify_ack::IsInitialized() const {

  return true;
}

void role_login_verify_ack::Swap(role_login_verify_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(retcode_, other->retcode_);
    std::swap(account_, other->account_);
    std::swap(clientid_, other->clientid_);
    std::swap(token_, other->token_);
    std::swap(isreconnect_, other->isreconnect_);
    std::swap(areaid_, other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_login_verify_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_login_verify_ack_descriptor_;
  metadata.reflection = role_login_verify_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int kick_out_req::kProtoidFieldNumber;
const int kick_out_req::kAccountFieldNumber;
const int kick_out_req::kNewclientidFieldNumber;
const int kick_out_req::kNewgateidFieldNumber;
const int kick_out_req::kReasonFieldNumber;
const int kick_out_req::kTokenFieldNumber;
const int kick_out_req::kAreaidFieldNumber;
#endif  // !_MSC_VER

kick_out_req::kick_out_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void kick_out_req::InitAsDefaultInstance() {
}

kick_out_req::kick_out_req(const kick_out_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void kick_out_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newclientid_ = 0u;
  newgateid_ = GOOGLE_ULONGLONG(0);
  reason_ = 1;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  areaid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

kick_out_req::~kick_out_req() {
  SharedDtor();
}

void kick_out_req::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void kick_out_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* kick_out_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return kick_out_req_descriptor_;
}

const kick_out_req& kick_out_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

kick_out_req* kick_out_req::default_instance_ = NULL;

kick_out_req* kick_out_req::New() const {
  return new kick_out_req;
}

void kick_out_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    newclientid_ = 0u;
    newgateid_ = GOOGLE_ULONGLONG(0);
    reason_ = 1;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    areaid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool kick_out_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = kick_out_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_newclientid;
        break;
      }

      // optional uint32 newclientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newclientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newclientid_)));
          set_has_newclientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_newgateid;
        break;
      }

      // optional uint64 newgateid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newgateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newgateid_)));
          set_has_newgateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reason;
        break;
      }

      // optional .SProtoSpace.eKickoutReason reason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eKickoutReason_IsValid(value)) {
            set_reason(static_cast< ::SProtoSpace::eKickoutReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_token;
        break;
      }

      // optional string token = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_areaid;
        break;
      }

      // optional uint32 areaid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void kick_out_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = kick_out_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint32 newclientid = 3;
  if (has_newclientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->newclientid(), output);
  }

  // optional uint64 newgateid = 4;
  if (has_newgateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->newgateid(), output);
  }

  // optional .SProtoSpace.eKickoutReason reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->reason(), output);
  }

  // optional string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->token(), output);
  }

  // optional uint32 areaid = 7;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* kick_out_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = kick_out_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 newclientid = 3;
  if (has_newclientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->newclientid(), target);
  }

  // optional uint64 newgateid = 4;
  if (has_newgateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->newgateid(), target);
  }

  // optional .SProtoSpace.eKickoutReason reason = 5;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->reason(), target);
  }

  // optional string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->token(), target);
  }

  // optional uint32 areaid = 7;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int kick_out_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = kick_out_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 newclientid = 3;
    if (has_newclientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newclientid());
    }

    // optional uint64 newgateid = 4;
    if (has_newgateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->newgateid());
    }

    // optional .SProtoSpace.eKickoutReason reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

    // optional string token = 6;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 areaid = 7;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void kick_out_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const kick_out_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const kick_out_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void kick_out_req::MergeFrom(const kick_out_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_newclientid()) {
      set_newclientid(from.newclientid());
    }
    if (from.has_newgateid()) {
      set_newgateid(from.newgateid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void kick_out_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void kick_out_req::CopyFrom(const kick_out_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool kick_out_req::IsInitialized() const {

  return true;
}

void kick_out_req::Swap(kick_out_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(account_, other->account_);
    std::swap(newclientid_, other->newclientid_);
    std::swap(newgateid_, other->newgateid_);
    std::swap(reason_, other->reason_);
    std::swap(token_, other->token_);
    std::swap(areaid_, other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata kick_out_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = kick_out_req_descriptor_;
  metadata.reflection = kick_out_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int kick_out_ack::kProtoidFieldNumber;
const int kick_out_ack::kAccountFieldNumber;
const int kick_out_ack::kNewclientidFieldNumber;
const int kick_out_ack::kNewgateidFieldNumber;
const int kick_out_ack::kTokenFieldNumber;
const int kick_out_ack::kAreaidFieldNumber;
#endif  // !_MSC_VER

kick_out_ack::kick_out_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void kick_out_ack::InitAsDefaultInstance() {
}

kick_out_ack::kick_out_ack(const kick_out_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void kick_out_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newclientid_ = 0u;
  newgateid_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  areaid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

kick_out_ack::~kick_out_ack() {
  SharedDtor();
}

void kick_out_ack::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void kick_out_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* kick_out_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return kick_out_ack_descriptor_;
}

const kick_out_ack& kick_out_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

kick_out_ack* kick_out_ack::default_instance_ = NULL;

kick_out_ack* kick_out_ack::New() const {
  return new kick_out_ack;
}

void kick_out_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    newclientid_ = 0u;
    newgateid_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    areaid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool kick_out_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = kick_out_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_newclientid;
        break;
      }

      // optional uint32 newclientid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newclientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newclientid_)));
          set_has_newclientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_newgateid;
        break;
      }

      // optional uint64 newgateid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newgateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newgateid_)));
          set_has_newgateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_token;
        break;
      }

      // optional string token = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_areaid;
        break;
      }

      // optional uint32 areaid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void kick_out_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = kick_out_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint32 newclientid = 4;
  if (has_newclientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->newclientid(), output);
  }

  // optional uint64 newgateid = 5;
  if (has_newgateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->newgateid(), output);
  }

  // optional string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->token(), output);
  }

  // optional uint32 areaid = 7;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* kick_out_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = kick_out_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 newclientid = 4;
  if (has_newclientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->newclientid(), target);
  }

  // optional uint64 newgateid = 5;
  if (has_newgateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->newgateid(), target);
  }

  // optional string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->token(), target);
  }

  // optional uint32 areaid = 7;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int kick_out_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = kick_out_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 newclientid = 4;
    if (has_newclientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newclientid());
    }

    // optional uint64 newgateid = 5;
    if (has_newgateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->newgateid());
    }

    // optional string token = 6;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 areaid = 7;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void kick_out_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const kick_out_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const kick_out_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void kick_out_ack::MergeFrom(const kick_out_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_newclientid()) {
      set_newclientid(from.newclientid());
    }
    if (from.has_newgateid()) {
      set_newgateid(from.newgateid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void kick_out_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void kick_out_ack::CopyFrom(const kick_out_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool kick_out_ack::IsInitialized() const {

  return true;
}

void kick_out_ack::Swap(kick_out_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(account_, other->account_);
    std::swap(newclientid_, other->newclientid_);
    std::swap(newgateid_, other->newgateid_);
    std::swap(token_, other->token_);
    std::swap(areaid_, other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata kick_out_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = kick_out_ack_descriptor_;
  metadata.reflection = kick_out_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gt_reconnect_check_req::kProtoidFieldNumber;
const int gt_reconnect_check_req::kAccountFieldNumber;
const int gt_reconnect_check_req::kClientidFieldNumber;
const int gt_reconnect_check_req::kPlayeridFieldNumber;
#endif  // !_MSC_VER

gt_reconnect_check_req::gt_reconnect_check_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gt_reconnect_check_req::InitAsDefaultInstance() {
}

gt_reconnect_check_req::gt_reconnect_check_req(const gt_reconnect_check_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gt_reconnect_check_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientid_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gt_reconnect_check_req::~gt_reconnect_check_req() {
  SharedDtor();
}

void gt_reconnect_check_req::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void gt_reconnect_check_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gt_reconnect_check_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gt_reconnect_check_req_descriptor_;
}

const gt_reconnect_check_req& gt_reconnect_check_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

gt_reconnect_check_req* gt_reconnect_check_req::default_instance_ = NULL;

gt_reconnect_check_req* gt_reconnect_check_req::New() const {
  return new gt_reconnect_check_req;
}

void gt_reconnect_check_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    clientid_ = 0u;
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gt_reconnect_check_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_reconnect_check_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // optional uint32 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerid;
        break;
      }

      // optional uint64 playerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gt_reconnect_check_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_reconnect_check_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint32 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clientid(), output);
  }

  // optional uint64 playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gt_reconnect_check_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_reconnect_check_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clientid(), target);
  }

  // optional uint64 playerid = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gt_reconnect_check_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_reconnect_check_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // optional uint64 playerid = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gt_reconnect_check_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gt_reconnect_check_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gt_reconnect_check_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gt_reconnect_check_req::MergeFrom(const gt_reconnect_check_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gt_reconnect_check_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gt_reconnect_check_req::CopyFrom(const gt_reconnect_check_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gt_reconnect_check_req::IsInitialized() const {

  return true;
}

void gt_reconnect_check_req::Swap(gt_reconnect_check_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(account_, other->account_);
    std::swap(clientid_, other->clientid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gt_reconnect_check_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gt_reconnect_check_req_descriptor_;
  metadata.reflection = gt_reconnect_check_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ct_reconnect_check_ack::kProtoidFieldNumber;
const int ct_reconnect_check_ack::kAccountFieldNumber;
const int ct_reconnect_check_ack::kClientidFieldNumber;
const int ct_reconnect_check_ack::kPlayeridFieldNumber;
#endif  // !_MSC_VER

ct_reconnect_check_ack::ct_reconnect_check_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ct_reconnect_check_ack::InitAsDefaultInstance() {
}

ct_reconnect_check_ack::ct_reconnect_check_ack(const ct_reconnect_check_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ct_reconnect_check_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 8;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientid_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ct_reconnect_check_ack::~ct_reconnect_check_ack() {
  SharedDtor();
}

void ct_reconnect_check_ack::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void ct_reconnect_check_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ct_reconnect_check_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ct_reconnect_check_ack_descriptor_;
}

const ct_reconnect_check_ack& ct_reconnect_check_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

ct_reconnect_check_ack* ct_reconnect_check_ack::default_instance_ = NULL;

ct_reconnect_check_ack* ct_reconnect_check_ack::New() const {
  return new ct_reconnect_check_ack;
}

void ct_reconnect_check_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 8;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    clientid_ = 0u;
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ct_reconnect_check_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_reconnect_check_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // optional uint32 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerid;
        break;
      }

      // optional uint64 playerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ct_reconnect_check_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_reconnect_check_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint32 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clientid(), output);
  }

  // optional uint64 playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ct_reconnect_check_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_reconnect_check_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clientid(), target);
  }

  // optional uint64 playerid = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ct_reconnect_check_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_reconnect_check_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // optional uint64 playerid = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ct_reconnect_check_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ct_reconnect_check_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ct_reconnect_check_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ct_reconnect_check_ack::MergeFrom(const ct_reconnect_check_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ct_reconnect_check_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ct_reconnect_check_ack::CopyFrom(const ct_reconnect_check_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ct_reconnect_check_ack::IsInitialized() const {

  return true;
}

void ct_reconnect_check_ack::Swap(ct_reconnect_check_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(account_, other->account_);
    std::swap(clientid_, other->clientid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ct_reconnect_check_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ct_reconnect_check_ack_descriptor_;
  metadata.reflection = ct_reconnect_check_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ct_reconnect_kick_req::kProtoidFieldNumber;
const int ct_reconnect_kick_req::kAccountFieldNumber;
const int ct_reconnect_kick_req::kClientidFieldNumber;
const int ct_reconnect_kick_req::kPlayeridFieldNumber;
const int ct_reconnect_kick_req::kNewGateIdFieldNumber;
#endif  // !_MSC_VER

ct_reconnect_kick_req::ct_reconnect_kick_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ct_reconnect_kick_req::InitAsDefaultInstance() {
}

ct_reconnect_kick_req::ct_reconnect_kick_req(const ct_reconnect_kick_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ct_reconnect_kick_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 9;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientid_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  new_gate_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ct_reconnect_kick_req::~ct_reconnect_kick_req() {
  SharedDtor();
}

void ct_reconnect_kick_req::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void ct_reconnect_kick_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ct_reconnect_kick_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ct_reconnect_kick_req_descriptor_;
}

const ct_reconnect_kick_req& ct_reconnect_kick_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

ct_reconnect_kick_req* ct_reconnect_kick_req::default_instance_ = NULL;

ct_reconnect_kick_req* ct_reconnect_kick_req::New() const {
  return new ct_reconnect_kick_req;
}

void ct_reconnect_kick_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 9;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    clientid_ = 0u;
    playerid_ = GOOGLE_ULONGLONG(0);
    new_gate_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ct_reconnect_kick_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_reconnect_kick_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // optional uint32 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerid;
        break;
      }

      // optional uint64 playerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_new_gate_id;
        break;
      }

      // optional uint64 new_gate_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_gate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_gate_id_)));
          set_has_new_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ct_reconnect_kick_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_reconnect_kick_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint32 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clientid(), output);
  }

  // optional uint64 playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->playerid(), output);
  }

  // optional uint64 new_gate_id = 5;
  if (has_new_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->new_gate_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ct_reconnect_kick_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_reconnect_kick_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clientid(), target);
  }

  // optional uint64 playerid = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->playerid(), target);
  }

  // optional uint64 new_gate_id = 5;
  if (has_new_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->new_gate_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ct_reconnect_kick_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_reconnect_kick_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // optional uint64 playerid = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional uint64 new_gate_id = 5;
    if (has_new_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->new_gate_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ct_reconnect_kick_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ct_reconnect_kick_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ct_reconnect_kick_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ct_reconnect_kick_req::MergeFrom(const ct_reconnect_kick_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_new_gate_id()) {
      set_new_gate_id(from.new_gate_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ct_reconnect_kick_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ct_reconnect_kick_req::CopyFrom(const ct_reconnect_kick_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ct_reconnect_kick_req::IsInitialized() const {

  return true;
}

void ct_reconnect_kick_req::Swap(ct_reconnect_kick_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(account_, other->account_);
    std::swap(clientid_, other->clientid_);
    std::swap(playerid_, other->playerid_);
    std::swap(new_gate_id_, other->new_gate_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ct_reconnect_kick_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ct_reconnect_kick_req_descriptor_;
  metadata.reflection = ct_reconnect_kick_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gt_reconnect_kick_ack::kProtoidFieldNumber;
const int gt_reconnect_kick_ack::kAccountFieldNumber;
const int gt_reconnect_kick_ack::kClientidFieldNumber;
const int gt_reconnect_kick_ack::kPlayeridFieldNumber;
const int gt_reconnect_kick_ack::kNewGateIdFieldNumber;
#endif  // !_MSC_VER

gt_reconnect_kick_ack::gt_reconnect_kick_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gt_reconnect_kick_ack::InitAsDefaultInstance() {
}

gt_reconnect_kick_ack::gt_reconnect_kick_ack(const gt_reconnect_kick_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gt_reconnect_kick_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 10;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientid_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  new_gate_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gt_reconnect_kick_ack::~gt_reconnect_kick_ack() {
  SharedDtor();
}

void gt_reconnect_kick_ack::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void gt_reconnect_kick_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gt_reconnect_kick_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gt_reconnect_kick_ack_descriptor_;
}

const gt_reconnect_kick_ack& gt_reconnect_kick_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

gt_reconnect_kick_ack* gt_reconnect_kick_ack::default_instance_ = NULL;

gt_reconnect_kick_ack* gt_reconnect_kick_ack::New() const {
  return new gt_reconnect_kick_ack;
}

void gt_reconnect_kick_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 10;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    clientid_ = 0u;
    playerid_ = GOOGLE_ULONGLONG(0);
    new_gate_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gt_reconnect_kick_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_reconnect_kick_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // optional uint32 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerid;
        break;
      }

      // optional uint64 playerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_new_gate_id;
        break;
      }

      // optional uint64 new_gate_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_gate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_gate_id_)));
          set_has_new_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gt_reconnect_kick_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_reconnect_kick_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint32 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clientid(), output);
  }

  // optional uint64 playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->playerid(), output);
  }

  // optional uint64 new_gate_id = 5;
  if (has_new_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->new_gate_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gt_reconnect_kick_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_reconnect_kick_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clientid(), target);
  }

  // optional uint64 playerid = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->playerid(), target);
  }

  // optional uint64 new_gate_id = 5;
  if (has_new_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->new_gate_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gt_reconnect_kick_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_reconnect_kick_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // optional uint64 playerid = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional uint64 new_gate_id = 5;
    if (has_new_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->new_gate_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gt_reconnect_kick_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gt_reconnect_kick_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gt_reconnect_kick_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gt_reconnect_kick_ack::MergeFrom(const gt_reconnect_kick_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_new_gate_id()) {
      set_new_gate_id(from.new_gate_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gt_reconnect_kick_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gt_reconnect_kick_ack::CopyFrom(const gt_reconnect_kick_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gt_reconnect_kick_ack::IsInitialized() const {

  return true;
}

void gt_reconnect_kick_ack::Swap(gt_reconnect_kick_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(account_, other->account_);
    std::swap(clientid_, other->clientid_);
    std::swap(playerid_, other->playerid_);
    std::swap(new_gate_id_, other->new_gate_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gt_reconnect_kick_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gt_reconnect_kick_ack_descriptor_;
  metadata.reflection = gt_reconnect_kick_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gt_online_client_ntf::kProtoidFieldNumber;
const int gt_online_client_ntf::kAccountidFieldNumber;
#endif  // !_MSC_VER

gt_online_client_ntf::gt_online_client_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gt_online_client_ntf::InitAsDefaultInstance() {
}

gt_online_client_ntf::gt_online_client_ntf(const gt_online_client_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gt_online_client_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 11;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gt_online_client_ntf::~gt_online_client_ntf() {
  SharedDtor();
}

void gt_online_client_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gt_online_client_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gt_online_client_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gt_online_client_ntf_descriptor_;
}

const gt_online_client_ntf& gt_online_client_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

gt_online_client_ntf* gt_online_client_ntf::default_instance_ = NULL;

gt_online_client_ntf* gt_online_client_ntf::New() const {
  return new gt_online_client_ntf;
}

void gt_online_client_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 11;
  }
  accountid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gt_online_client_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_online_client_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accountid;
        break;
      }

      // repeated uint32 accountid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_accountid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_accountid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accountid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gt_online_client_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_online_client_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint32 accountid = 2;
  for (int i = 0; i < this->accountid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->accountid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gt_online_client_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_online_client_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint32 accountid = 2;
  for (int i = 0; i < this->accountid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->accountid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gt_online_client_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_online_client_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated uint32 accountid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->accountid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->accountid(i));
    }
    total_size += 1 * this->accountid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gt_online_client_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gt_online_client_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gt_online_client_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gt_online_client_ntf::MergeFrom(const gt_online_client_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  accountid_.MergeFrom(from.accountid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gt_online_client_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gt_online_client_ntf::CopyFrom(const gt_online_client_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gt_online_client_ntf::IsInitialized() const {

  return true;
}

void gt_online_client_ntf::Swap(gt_online_client_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    accountid_.Swap(&other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gt_online_client_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gt_online_client_ntf_descriptor_;
  metadata.reflection = gt_online_client_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gt_game_server_player_num_ntf::kProtoidFieldNumber;
const int gt_game_server_player_num_ntf::kGameServerIdFieldNumber;
const int gt_game_server_player_num_ntf::kPlayerNumFieldNumber;
#endif  // !_MSC_VER

gt_game_server_player_num_ntf::gt_game_server_player_num_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gt_game_server_player_num_ntf::InitAsDefaultInstance() {
}

gt_game_server_player_num_ntf::gt_game_server_player_num_ntf(const gt_game_server_player_num_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gt_game_server_player_num_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 12;
  game_server_id_ = 0u;
  player_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gt_game_server_player_num_ntf::~gt_game_server_player_num_ntf() {
  SharedDtor();
}

void gt_game_server_player_num_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gt_game_server_player_num_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gt_game_server_player_num_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gt_game_server_player_num_ntf_descriptor_;
}

const gt_game_server_player_num_ntf& gt_game_server_player_num_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

gt_game_server_player_num_ntf* gt_game_server_player_num_ntf::default_instance_ = NULL;

gt_game_server_player_num_ntf* gt_game_server_player_num_ntf::New() const {
  return new gt_game_server_player_num_ntf;
}

void gt_game_server_player_num_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 12;
    game_server_id_ = 0u;
    player_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gt_game_server_player_num_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_game_server_player_num_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_server_id;
        break;
      }

      // optional uint32 game_server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_id_)));
          set_has_game_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_num;
        break;
      }

      // optional uint32 player_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_num_)));
          set_has_player_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gt_game_server_player_num_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_game_server_player_num_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 game_server_id = 2;
  if (has_game_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_server_id(), output);
  }

  // optional uint32 player_num = 3;
  if (has_player_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gt_game_server_player_num_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_game_server_player_num_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 game_server_id = 2;
  if (has_game_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_server_id(), target);
  }

  // optional uint32 player_num = 3;
  if (has_player_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gt_game_server_player_num_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_game_server_player_num_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 game_server_id = 2;
    if (has_game_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_id());
    }

    // optional uint32 player_num = 3;
    if (has_player_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gt_game_server_player_num_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gt_game_server_player_num_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gt_game_server_player_num_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gt_game_server_player_num_ntf::MergeFrom(const gt_game_server_player_num_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_game_server_id()) {
      set_game_server_id(from.game_server_id());
    }
    if (from.has_player_num()) {
      set_player_num(from.player_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gt_game_server_player_num_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gt_game_server_player_num_ntf::CopyFrom(const gt_game_server_player_num_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gt_game_server_player_num_ntf::IsInitialized() const {

  return true;
}

void gt_game_server_player_num_ntf::Swap(gt_game_server_player_num_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(game_server_id_, other->game_server_id_);
    std::swap(player_num_, other->player_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gt_game_server_player_num_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gt_game_server_player_num_ntf_descriptor_;
  metadata.reflection = gt_game_server_player_num_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ct_need_queued_ntf::kProtoidFieldNumber;
const int ct_need_queued_ntf::kClientidFieldNumber;
const int ct_need_queued_ntf::kPosFieldNumber;
#endif  // !_MSC_VER

ct_need_queued_ntf::ct_need_queued_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ct_need_queued_ntf::InitAsDefaultInstance() {
}

ct_need_queued_ntf::ct_need_queued_ntf(const ct_need_queued_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ct_need_queued_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 13;
  clientid_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ct_need_queued_ntf::~ct_need_queued_ntf() {
  SharedDtor();
}

void ct_need_queued_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ct_need_queued_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ct_need_queued_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ct_need_queued_ntf_descriptor_;
}

const ct_need_queued_ntf& ct_need_queued_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

ct_need_queued_ntf* ct_need_queued_ntf::default_instance_ = NULL;

ct_need_queued_ntf* ct_need_queued_ntf::New() const {
  return new ct_need_queued_ntf;
}

void ct_need_queued_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 13;
    clientid_ = 0u;
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ct_need_queued_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_need_queued_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clientid;
        break;
      }

      // optional uint32 clientid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ct_need_queued_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_need_queued_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 clientid = 2;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clientid(), output);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ct_need_queued_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_need_queued_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 clientid = 2;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clientid(), target);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ct_need_queued_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_need_queued_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 clientid = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // optional uint32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ct_need_queued_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ct_need_queued_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ct_need_queued_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ct_need_queued_ntf::MergeFrom(const ct_need_queued_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ct_need_queued_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ct_need_queued_ntf::CopyFrom(const ct_need_queued_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ct_need_queued_ntf::IsInitialized() const {

  return true;
}

void ct_need_queued_ntf::Swap(ct_need_queued_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(clientid_, other->clientid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ct_need_queued_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ct_need_queued_ntf_descriptor_;
  metadata.reflection = ct_need_queued_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ct_end_queued_ntf::kProtoidFieldNumber;
const int ct_end_queued_ntf::kClientidFieldNumber;
#endif  // !_MSC_VER

ct_end_queued_ntf::ct_end_queued_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ct_end_queued_ntf::InitAsDefaultInstance() {
}

ct_end_queued_ntf::ct_end_queued_ntf(const ct_end_queued_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ct_end_queued_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 14;
  clientid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ct_end_queued_ntf::~ct_end_queued_ntf() {
  SharedDtor();
}

void ct_end_queued_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ct_end_queued_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ct_end_queued_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ct_end_queued_ntf_descriptor_;
}

const ct_end_queued_ntf& ct_end_queued_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

ct_end_queued_ntf* ct_end_queued_ntf::default_instance_ = NULL;

ct_end_queued_ntf* ct_end_queued_ntf::New() const {
  return new ct_end_queued_ntf;
}

void ct_end_queued_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 14;
    clientid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ct_end_queued_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_end_queued_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clientid;
        break;
      }

      // optional uint32 clientid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ct_end_queued_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_end_queued_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 clientid = 2;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clientid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ct_end_queued_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_end_queued_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 clientid = 2;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clientid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ct_end_queued_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_end_queued_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 clientid = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ct_end_queued_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ct_end_queued_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ct_end_queued_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ct_end_queued_ntf::MergeFrom(const ct_end_queued_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ct_end_queued_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ct_end_queued_ntf::CopyFrom(const ct_end_queued_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ct_end_queued_ntf::IsInitialized() const {

  return true;
}

void ct_end_queued_ntf::Swap(ct_end_queued_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(clientid_, other->clientid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ct_end_queued_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ct_end_queued_ntf_descriptor_;
  metadata.reflection = ct_end_queued_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gt_queued_state_req::kProtoidFieldNumber;
const int gt_queued_state_req::kClientidFieldNumber;
const int gt_queued_state_req::kAccountidFieldNumber;
#endif  // !_MSC_VER

gt_queued_state_req::gt_queued_state_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gt_queued_state_req::InitAsDefaultInstance() {
}

gt_queued_state_req::gt_queued_state_req(const gt_queued_state_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gt_queued_state_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 15;
  clientid_ = 0u;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gt_queued_state_req::~gt_queued_state_req() {
  SharedDtor();
}

void gt_queued_state_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gt_queued_state_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gt_queued_state_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gt_queued_state_req_descriptor_;
}

const gt_queued_state_req& gt_queued_state_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

gt_queued_state_req* gt_queued_state_req::default_instance_ = NULL;

gt_queued_state_req* gt_queued_state_req::New() const {
  return new gt_queued_state_req;
}

void gt_queued_state_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 15;
    clientid_ = 0u;
    accountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gt_queued_state_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_queued_state_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clientid;
        break;
      }

      // optional uint32 clientid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accountid;
        break;
      }

      // optional uint32 accountid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gt_queued_state_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_queued_state_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 clientid = 2;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clientid(), output);
  }

  // optional uint32 accountid = 3;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gt_queued_state_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_queued_state_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 clientid = 2;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clientid(), target);
  }

  // optional uint32 accountid = 3;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gt_queued_state_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_queued_state_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 clientid = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // optional uint32 accountid = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gt_queued_state_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gt_queued_state_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gt_queued_state_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gt_queued_state_req::MergeFrom(const gt_queued_state_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gt_queued_state_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gt_queued_state_req::CopyFrom(const gt_queued_state_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gt_queued_state_req::IsInitialized() const {

  return true;
}

void gt_queued_state_req::Swap(gt_queued_state_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(clientid_, other->clientid_);
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gt_queued_state_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gt_queued_state_req_descriptor_;
  metadata.reflection = gt_queued_state_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ct_queued_state_ack::kProtoidFieldNumber;
const int ct_queued_state_ack::kClientidFieldNumber;
const int ct_queued_state_ack::kPosFieldNumber;
#endif  // !_MSC_VER

ct_queued_state_ack::ct_queued_state_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ct_queued_state_ack::InitAsDefaultInstance() {
}

ct_queued_state_ack::ct_queued_state_ack(const ct_queued_state_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ct_queued_state_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 16;
  clientid_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ct_queued_state_ack::~ct_queued_state_ack() {
  SharedDtor();
}

void ct_queued_state_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ct_queued_state_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ct_queued_state_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ct_queued_state_ack_descriptor_;
}

const ct_queued_state_ack& ct_queued_state_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

ct_queued_state_ack* ct_queued_state_ack::default_instance_ = NULL;

ct_queued_state_ack* ct_queued_state_ack::New() const {
  return new ct_queued_state_ack;
}

void ct_queued_state_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 16;
    clientid_ = 0u;
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ct_queued_state_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_queued_state_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clientid;
        break;
      }

      // optional uint32 clientid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ct_queued_state_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_queued_state_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 clientid = 2;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clientid(), output);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ct_queued_state_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_queued_state_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 clientid = 2;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clientid(), target);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ct_queued_state_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_queued_state_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 clientid = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // optional uint32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ct_queued_state_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ct_queued_state_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ct_queued_state_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ct_queued_state_ack::MergeFrom(const ct_queued_state_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ct_queued_state_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ct_queued_state_ack::CopyFrom(const ct_queued_state_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ct_queued_state_ack::IsInitialized() const {

  return true;
}

void ct_queued_state_ack::Swap(ct_queued_state_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(clientid_, other->clientid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ct_queued_state_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ct_queued_state_ack_descriptor_;
  metadata.reflection = ct_queued_state_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gt_cancel_queue_req::kProtoidFieldNumber;
const int gt_cancel_queue_req::kClientidFieldNumber;
const int gt_cancel_queue_req::kAccountidFieldNumber;
#endif  // !_MSC_VER

gt_cancel_queue_req::gt_cancel_queue_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gt_cancel_queue_req::InitAsDefaultInstance() {
}

gt_cancel_queue_req::gt_cancel_queue_req(const gt_cancel_queue_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gt_cancel_queue_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 17;
  clientid_ = 0u;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gt_cancel_queue_req::~gt_cancel_queue_req() {
  SharedDtor();
}

void gt_cancel_queue_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gt_cancel_queue_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gt_cancel_queue_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gt_cancel_queue_req_descriptor_;
}

const gt_cancel_queue_req& gt_cancel_queue_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

gt_cancel_queue_req* gt_cancel_queue_req::default_instance_ = NULL;

gt_cancel_queue_req* gt_cancel_queue_req::New() const {
  return new gt_cancel_queue_req;
}

void gt_cancel_queue_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 17;
    clientid_ = 0u;
    accountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gt_cancel_queue_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_cancel_queue_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clientid;
        break;
      }

      // optional uint32 clientid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accountid;
        break;
      }

      // optional uint32 accountid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gt_cancel_queue_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_cancel_queue_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 clientid = 2;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clientid(), output);
  }

  // optional uint32 accountid = 3;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gt_cancel_queue_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_cancel_queue_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 clientid = 2;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clientid(), target);
  }

  // optional uint32 accountid = 3;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gt_cancel_queue_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_cancel_queue_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 clientid = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // optional uint32 accountid = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gt_cancel_queue_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gt_cancel_queue_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gt_cancel_queue_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gt_cancel_queue_req::MergeFrom(const gt_cancel_queue_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gt_cancel_queue_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gt_cancel_queue_req::CopyFrom(const gt_cancel_queue_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gt_cancel_queue_req::IsInitialized() const {

  return true;
}

void gt_cancel_queue_req::Swap(gt_cancel_queue_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(clientid_, other->clientid_);
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gt_cancel_queue_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gt_cancel_queue_req_descriptor_;
  metadata.reflection = gt_cancel_queue_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ct_cancel_queue_ack::kProtoidFieldNumber;
const int ct_cancel_queue_ack::kClientidFieldNumber;
#endif  // !_MSC_VER

ct_cancel_queue_ack::ct_cancel_queue_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ct_cancel_queue_ack::InitAsDefaultInstance() {
}

ct_cancel_queue_ack::ct_cancel_queue_ack(const ct_cancel_queue_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ct_cancel_queue_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 18;
  clientid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ct_cancel_queue_ack::~ct_cancel_queue_ack() {
  SharedDtor();
}

void ct_cancel_queue_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ct_cancel_queue_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ct_cancel_queue_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ct_cancel_queue_ack_descriptor_;
}

const ct_cancel_queue_ack& ct_cancel_queue_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

ct_cancel_queue_ack* ct_cancel_queue_ack::default_instance_ = NULL;

ct_cancel_queue_ack* ct_cancel_queue_ack::New() const {
  return new ct_cancel_queue_ack;
}

void ct_cancel_queue_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 18;
    clientid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ct_cancel_queue_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_cancel_queue_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clientid;
        break;
      }

      // optional uint32 clientid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ct_cancel_queue_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_cancel_queue_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 clientid = 2;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clientid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ct_cancel_queue_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_cancel_queue_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 clientid = 2;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clientid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ct_cancel_queue_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ct_cancel_queue_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 clientid = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ct_cancel_queue_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ct_cancel_queue_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ct_cancel_queue_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ct_cancel_queue_ack::MergeFrom(const ct_cancel_queue_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ct_cancel_queue_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ct_cancel_queue_ack::CopyFrom(const ct_cancel_queue_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ct_cancel_queue_ack::IsInitialized() const {

  return true;
}

void ct_cancel_queue_ack::Swap(ct_cancel_queue_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(clientid_, other->clientid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ct_cancel_queue_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ct_cancel_queue_ack_descriptor_;
  metadata.reflection = ct_cancel_queue_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int account_login_ntf::kProtoidFieldNumber;
const int account_login_ntf::kAccountidFieldNumber;
const int account_login_ntf::kTokenFieldNumber;
const int account_login_ntf::kTempidFieldNumber;
const int account_login_ntf::kLastverifytimeFieldNumber;
#endif  // !_MSC_VER

account_login_ntf::account_login_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void account_login_ntf::InitAsDefaultInstance() {
}

account_login_ntf::account_login_ntf(const account_login_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void account_login_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 31;
  accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tempid_ = 0u;
  lastverifytime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

account_login_ntf::~account_login_ntf() {
  SharedDtor();
}

void account_login_ntf::SharedDtor() {
  if (accountid_ != &::google::protobuf::internal::kEmptyString) {
    delete accountid_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void account_login_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* account_login_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return account_login_ntf_descriptor_;
}

const account_login_ntf& account_login_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

account_login_ntf* account_login_ntf::default_instance_ = NULL;

account_login_ntf* account_login_ntf::New() const {
  return new account_login_ntf;
}

void account_login_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 31;
    if (has_accountid()) {
      if (accountid_ != &::google::protobuf::internal::kEmptyString) {
        accountid_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    tempid_ = 0u;
    lastverifytime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool account_login_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = account_login_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accountid;
        break;
      }

      // optional string accountid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accountid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountid().data(), this->accountid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tempid;
        break;
      }

      // optional uint32 tempid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tempid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lastverifytime;
        break;
      }

      // optional uint32 lastverifytime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastverifytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastverifytime_)));
          set_has_lastverifytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void account_login_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = account_login_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string accountid = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accountid(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }

  // optional uint32 tempid = 4;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tempid(), output);
  }

  // optional uint32 lastverifytime = 5;
  if (has_lastverifytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lastverifytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* account_login_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = account_login_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string accountid = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountid(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // optional uint32 tempid = 4;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tempid(), target);
  }

  // optional uint32 lastverifytime = 5;
  if (has_lastverifytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lastverifytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int account_login_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = account_login_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountid());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 tempid = 4;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tempid());
    }

    // optional uint32 lastverifytime = 5;
    if (has_lastverifytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastverifytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void account_login_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const account_login_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const account_login_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void account_login_ntf::MergeFrom(const account_login_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_lastverifytime()) {
      set_lastverifytime(from.lastverifytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void account_login_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void account_login_ntf::CopyFrom(const account_login_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_login_ntf::IsInitialized() const {

  return true;
}

void account_login_ntf::Swap(account_login_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(accountid_, other->accountid_);
    std::swap(token_, other->token_);
    std::swap(tempid_, other->tempid_);
    std::swap(lastverifytime_, other->lastverifytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata account_login_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = account_login_ntf_descriptor_;
  metadata.reflection = account_login_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int account_login_ntf_ack::kProtoidFieldNumber;
const int account_login_ntf_ack::kAccountidFieldNumber;
#endif  // !_MSC_VER

account_login_ntf_ack::account_login_ntf_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void account_login_ntf_ack::InitAsDefaultInstance() {
}

account_login_ntf_ack::account_login_ntf_ack(const account_login_ntf_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void account_login_ntf_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 30;
  accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

account_login_ntf_ack::~account_login_ntf_ack() {
  SharedDtor();
}

void account_login_ntf_ack::SharedDtor() {
  if (accountid_ != &::google::protobuf::internal::kEmptyString) {
    delete accountid_;
  }
  if (this != default_instance_) {
  }
}

void account_login_ntf_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* account_login_ntf_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return account_login_ntf_ack_descriptor_;
}

const account_login_ntf_ack& account_login_ntf_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

account_login_ntf_ack* account_login_ntf_ack::default_instance_ = NULL;

account_login_ntf_ack* account_login_ntf_ack::New() const {
  return new account_login_ntf_ack;
}

void account_login_ntf_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 30;
    if (has_accountid()) {
      if (accountid_ != &::google::protobuf::internal::kEmptyString) {
        accountid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool account_login_ntf_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = account_login_ntf_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accountid;
        break;
      }

      // optional string accountid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accountid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountid().data(), this->accountid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void account_login_ntf_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = account_login_ntf_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string accountid = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* account_login_ntf_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = account_login_ntf_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string accountid = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int account_login_ntf_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = account_login_ntf_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void account_login_ntf_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const account_login_ntf_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const account_login_ntf_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void account_login_ntf_ack::MergeFrom(const account_login_ntf_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void account_login_ntf_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void account_login_ntf_ack::CopyFrom(const account_login_ntf_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_login_ntf_ack::IsInitialized() const {

  return true;
}

void account_login_ntf_ack::Swap(account_login_ntf_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata account_login_ntf_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = account_login_ntf_ack_descriptor_;
  metadata.reflection = account_login_ntf_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int area_list_req::kProtoidFieldNumber;
const int area_list_req::kAccountFieldNumber;
const int area_list_req::kClientidFieldNumber;
#endif  // !_MSC_VER

area_list_req::area_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void area_list_req::InitAsDefaultInstance() {
}

area_list_req::area_list_req(const area_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void area_list_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 32;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

area_list_req::~area_list_req() {
  SharedDtor();
}

void area_list_req::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void area_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* area_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return area_list_req_descriptor_;
}

const area_list_req& area_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

area_list_req* area_list_req::default_instance_ = NULL;

area_list_req* area_list_req::New() const {
  return new area_list_req;
}

void area_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 32;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    clientid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool area_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_list_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // optional uint32 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void area_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_list_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint32 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clientid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* area_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_list_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clientid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int area_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_list_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void area_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const area_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const area_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void area_list_req::MergeFrom(const area_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void area_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void area_list_req::CopyFrom(const area_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool area_list_req::IsInitialized() const {

  return true;
}

void area_list_req::Swap(area_list_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(account_, other->account_);
    std::swap(clientid_, other->clientid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata area_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = area_list_req_descriptor_;
  metadata.reflection = area_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gate_net_info::kIdFieldNumber;
const int gate_net_info::kIpFieldNumber;
const int gate_net_info::kPortFieldNumber;
const int gate_net_info::kGroupNameFieldNumber;
const int gate_net_info::kNewFieldNumber;
const int gate_net_info::kStateFieldNumber;
const int gate_net_info::kGroupindexFieldNumber;
#endif  // !_MSC_VER

gate_net_info::gate_net_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gate_net_info::InitAsDefaultInstance() {
}

gate_net_info::gate_net_info(const gate_net_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gate_net_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new__ = false;
  state_ = 0;
  groupindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gate_net_info::~gate_net_info() {
  SharedDtor();
}

void gate_net_info::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete group_name_;
  }
  if (this != default_instance_) {
  }
}

void gate_net_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gate_net_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gate_net_info_descriptor_;
}

const gate_net_info& gate_net_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

gate_net_info* gate_net_info::default_instance_ = NULL;

gate_net_info* gate_net_info::New() const {
  return new gate_net_info;
}

void gate_net_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::kEmptyString) {
        group_name_->clear();
      }
    }
    new__ = false;
    state_ = 0;
    groupindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gate_net_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_group_name;
        break;
      }

      // optional string group_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_new;
        break;
      }

      // optional bool new = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new__)));
          set_has_new_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional int32 state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_groupindex;
        break;
      }

      // optional uint32 groupindex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupindex_)));
          set_has_groupindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gate_net_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional string group_name = 4;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->group_name(), output);
  }

  // optional bool new = 5;
  if (has_new_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->new_(), output);
  }

  // optional int32 state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->state(), output);
  }

  // optional uint32 groupindex = 7;
  if (has_groupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->groupindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gate_net_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional string group_name = 4;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->group_name(), target);
  }

  // optional bool new = 5;
  if (has_new_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->new_(), target);
  }

  // optional int32 state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->state(), target);
  }

  // optional uint32 groupindex = 7;
  if (has_groupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->groupindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gate_net_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string group_name = 4;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional bool new = 5;
    if (has_new_()) {
      total_size += 1 + 1;
    }

    // optional int32 state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional uint32 groupindex = 7;
    if (has_groupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gate_net_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gate_net_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gate_net_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gate_net_info::MergeFrom(const gate_net_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_new_()) {
      set_new_(from.new_());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_groupindex()) {
      set_groupindex(from.groupindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gate_net_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gate_net_info::CopyFrom(const gate_net_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gate_net_info::IsInitialized() const {

  return true;
}

void gate_net_info::Swap(gate_net_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(group_name_, other->group_name_);
    std::swap(new__, other->new__);
    std::swap(state_, other->state_);
    std::swap(groupindex_, other->groupindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gate_net_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gate_net_info_descriptor_;
  metadata.reflection = gate_net_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int area_brief_info::kAreaIdFieldNumber;
const int area_brief_info::kRoleNameFieldNumber;
#endif  // !_MSC_VER

area_brief_info::area_brief_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void area_brief_info::InitAsDefaultInstance() {
}

area_brief_info::area_brief_info(const area_brief_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void area_brief_info::SharedCtor() {
  _cached_size_ = 0;
  area_id_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

area_brief_info::~area_brief_info() {
  SharedDtor();
}

void area_brief_info::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void area_brief_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* area_brief_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return area_brief_info_descriptor_;
}

const area_brief_info& area_brief_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

area_brief_info* area_brief_info::default_instance_ = NULL;

area_brief_info* area_brief_info::New() const {
  return new area_brief_info;
}

void area_brief_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    area_id_ = 0;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool area_brief_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 area_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void area_brief_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 area_id = 1;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->area_id(), output);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* area_brief_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 area_id = 1;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->area_id(), target);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int area_brief_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 area_id = 1;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_id());
    }

    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void area_brief_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const area_brief_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const area_brief_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void area_brief_info::MergeFrom(const area_brief_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void area_brief_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void area_brief_info::CopyFrom(const area_brief_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool area_brief_info::IsInitialized() const {

  return true;
}

void area_brief_info::Swap(area_brief_info* other) {
  if (other != this) {
    std::swap(area_id_, other->area_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata area_brief_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = area_brief_info_descriptor_;
  metadata.reflection = area_brief_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int area_record::kLastAreaIdFieldNumber;
const int area_record::kAreasFieldNumber;
#endif  // !_MSC_VER

area_record::area_record()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void area_record::InitAsDefaultInstance() {
}

area_record::area_record(const area_record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void area_record::SharedCtor() {
  _cached_size_ = 0;
  last_area_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

area_record::~area_record() {
  SharedDtor();
}

void area_record::SharedDtor() {
  if (this != default_instance_) {
  }
}

void area_record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* area_record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return area_record_descriptor_;
}

const area_record& area_record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

area_record* area_record::default_instance_ = NULL;

area_record* area_record::New() const {
  return new area_record;
}

void area_record::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_area_id_ = 0u;
  }
  areas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool area_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 last_area_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_area_id_)));
          set_has_last_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_areas;
        break;
      }

      // repeated .SProtoSpace.area_brief_info areas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_areas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_areas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_areas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void area_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 last_area_id = 1;
  if (has_last_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->last_area_id(), output);
  }

  // repeated .SProtoSpace.area_brief_info areas = 2;
  for (int i = 0; i < this->areas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->areas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* area_record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 last_area_id = 1;
  if (has_last_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->last_area_id(), target);
  }

  // repeated .SProtoSpace.area_brief_info areas = 2;
  for (int i = 0; i < this->areas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->areas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int area_record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 last_area_id = 1;
    if (has_last_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_area_id());
    }

  }
  // repeated .SProtoSpace.area_brief_info areas = 2;
  total_size += 1 * this->areas_size();
  for (int i = 0; i < this->areas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->areas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void area_record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const area_record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const area_record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void area_record::MergeFrom(const area_record& from) {
  GOOGLE_CHECK_NE(&from, this);
  areas_.MergeFrom(from.areas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_area_id()) {
      set_last_area_id(from.last_area_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void area_record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void area_record::CopyFrom(const area_record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool area_record::IsInitialized() const {

  return true;
}

void area_record::Swap(area_record* other) {
  if (other != this) {
    std::swap(last_area_id_, other->last_area_id_);
    areas_.Swap(&other->areas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata area_record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = area_record_descriptor_;
  metadata.reflection = area_record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int group_area_info::kGroupidsFieldNumber;
const int group_area_info::kAreaGroupNameFieldNumber;
#endif  // !_MSC_VER

group_area_info::group_area_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void group_area_info::InitAsDefaultInstance() {
}

group_area_info::group_area_info(const group_area_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void group_area_info::SharedCtor() {
  _cached_size_ = 0;
  area_group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

group_area_info::~group_area_info() {
  SharedDtor();
}

void group_area_info::SharedDtor() {
  if (area_group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete area_group_name_;
  }
  if (this != default_instance_) {
  }
}

void group_area_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* group_area_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return group_area_info_descriptor_;
}

const group_area_info& group_area_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

group_area_info* group_area_info::default_instance_ = NULL;

group_area_info* group_area_info::New() const {
  return new group_area_info;
}

void group_area_info::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_area_group_name()) {
      if (area_group_name_ != &::google::protobuf::internal::kEmptyString) {
        area_group_name_->clear();
      }
    }
  }
  groupids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool group_area_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 groupids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_groupids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_groupids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_groupids;
        if (input->ExpectTag(18)) goto parse_area_group_name;
        break;
      }

      // optional string area_group_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_area_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->area_group_name().data(), this->area_group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void group_area_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 groupids = 1;
  for (int i = 0; i < this->groupids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->groupids(i), output);
  }

  // optional string area_group_name = 2;
  if (has_area_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->area_group_name().data(), this->area_group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->area_group_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* group_area_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 groupids = 1;
  for (int i = 0; i < this->groupids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->groupids(i), target);
  }

  // optional string area_group_name = 2;
  if (has_area_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->area_group_name().data(), this->area_group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->area_group_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int group_area_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string area_group_name = 2;
    if (has_area_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->area_group_name());
    }

  }
  // repeated uint64 groupids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->groupids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->groupids(i));
    }
    total_size += 1 * this->groupids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void group_area_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const group_area_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const group_area_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void group_area_info::MergeFrom(const group_area_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupids_.MergeFrom(from.groupids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_area_group_name()) {
      set_area_group_name(from.area_group_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void group_area_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void group_area_info::CopyFrom(const group_area_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool group_area_info::IsInitialized() const {

  return true;
}

void group_area_info::Swap(group_area_info* other) {
  if (other != this) {
    groupids_.Swap(&other->groupids_);
    std::swap(area_group_name_, other->area_group_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata group_area_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = group_area_info_descriptor_;
  metadata.reflection = group_area_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int area_list_ack::kProtoidFieldNumber;
const int area_list_ack::kAccountFieldNumber;
const int area_list_ack::kClientidFieldNumber;
const int area_list_ack::kGroupsFieldNumber;
const int area_list_ack::kCenteridFieldNumber;
const int area_list_ack::kAreaGroupsFieldNumber;
const int area_list_ack::kRecommendAreasFieldNumber;
#endif  // !_MSC_VER

area_list_ack::area_list_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void area_list_ack::InitAsDefaultInstance() {
}

area_list_ack::area_list_ack(const area_list_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void area_list_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 33;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientid_ = 0u;
  centerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

area_list_ack::~area_list_ack() {
  SharedDtor();
}

void area_list_ack::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void area_list_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* area_list_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return area_list_ack_descriptor_;
}

const area_list_ack& area_list_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

area_list_ack* area_list_ack::default_instance_ = NULL;

area_list_ack* area_list_ack::New() const {
  return new area_list_ack;
}

void area_list_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 33;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    clientid_ = 0u;
    centerid_ = GOOGLE_ULONGLONG(0);
  }
  groups_.Clear();
  area_groups_.Clear();
  recommend_areas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool area_list_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_list_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // optional uint32 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_groups;
        break;
      }

      // repeated .SProtoSpace.gate_net_info groups = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_groups;
        if (input->ExpectTag(40)) goto parse_centerid;
        break;
      }

      // optional uint64 centerid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_centerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &centerid_)));
          set_has_centerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_area_groups;
        break;
      }

      // repeated .SProtoSpace.group_area_info area_groups = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_area_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_area_groups;
        if (input->ExpectTag(58)) goto parse_recommend_areas;
        break;
      }

      // repeated .SProtoSpace.group_area_info recommend_areas = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recommend_areas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recommend_areas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_recommend_areas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void area_list_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_list_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint32 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clientid(), output);
  }

  // repeated .SProtoSpace.gate_net_info groups = 4;
  for (int i = 0; i < this->groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->groups(i), output);
  }

  // optional uint64 centerid = 5;
  if (has_centerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->centerid(), output);
  }

  // repeated .SProtoSpace.group_area_info area_groups = 6;
  for (int i = 0; i < this->area_groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->area_groups(i), output);
  }

  // repeated .SProtoSpace.group_area_info recommend_areas = 7;
  for (int i = 0; i < this->recommend_areas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->recommend_areas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* area_list_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_list_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clientid(), target);
  }

  // repeated .SProtoSpace.gate_net_info groups = 4;
  for (int i = 0; i < this->groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->groups(i), target);
  }

  // optional uint64 centerid = 5;
  if (has_centerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->centerid(), target);
  }

  // repeated .SProtoSpace.group_area_info area_groups = 6;
  for (int i = 0; i < this->area_groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->area_groups(i), target);
  }

  // repeated .SProtoSpace.group_area_info recommend_areas = 7;
  for (int i = 0; i < this->recommend_areas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->recommend_areas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int area_list_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_list_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // optional uint64 centerid = 5;
    if (has_centerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->centerid());
    }

  }
  // repeated .SProtoSpace.gate_net_info groups = 4;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }

  // repeated .SProtoSpace.group_area_info area_groups = 6;
  total_size += 1 * this->area_groups_size();
  for (int i = 0; i < this->area_groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->area_groups(i));
  }

  // repeated .SProtoSpace.group_area_info recommend_areas = 7;
  total_size += 1 * this->recommend_areas_size();
  for (int i = 0; i < this->recommend_areas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recommend_areas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void area_list_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const area_list_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const area_list_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void area_list_ack::MergeFrom(const area_list_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  groups_.MergeFrom(from.groups_);
  area_groups_.MergeFrom(from.area_groups_);
  recommend_areas_.MergeFrom(from.recommend_areas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_centerid()) {
      set_centerid(from.centerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void area_list_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void area_list_ack::CopyFrom(const area_list_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool area_list_ack::IsInitialized() const {

  return true;
}

void area_list_ack::Swap(area_list_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(account_, other->account_);
    std::swap(clientid_, other->clientid_);
    groups_.Swap(&other->groups_);
    std::swap(centerid_, other->centerid_);
    area_groups_.Swap(&other->area_groups_);
    recommend_areas_.Swap(&other->recommend_areas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata area_list_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = area_list_ack_descriptor_;
  metadata.reflection = area_list_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int area_gateserver_info_req::kProtoidFieldNumber;
const int area_gateserver_info_req::kTimeFieldNumber;
#endif  // !_MSC_VER

area_gateserver_info_req::area_gateserver_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void area_gateserver_info_req::InitAsDefaultInstance() {
}

area_gateserver_info_req::area_gateserver_info_req(const area_gateserver_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void area_gateserver_info_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 34;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

area_gateserver_info_req::~area_gateserver_info_req() {
  SharedDtor();
}

void area_gateserver_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void area_gateserver_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* area_gateserver_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return area_gateserver_info_req_descriptor_;
}

const area_gateserver_info_req& area_gateserver_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

area_gateserver_info_req* area_gateserver_info_req::default_instance_ = NULL;

area_gateserver_info_req* area_gateserver_info_req::New() const {
  return new area_gateserver_info_req;
}

void area_gateserver_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 34;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool area_gateserver_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_gateserver_info_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void area_gateserver_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_gateserver_info_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* area_gateserver_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_gateserver_info_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int area_gateserver_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_gateserver_info_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void area_gateserver_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const area_gateserver_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const area_gateserver_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void area_gateserver_info_req::MergeFrom(const area_gateserver_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void area_gateserver_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void area_gateserver_info_req::CopyFrom(const area_gateserver_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool area_gateserver_info_req::IsInitialized() const {

  return true;
}

void area_gateserver_info_req::Swap(area_gateserver_info_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata area_gateserver_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = area_gateserver_info_req_descriptor_;
  metadata.reflection = area_gateserver_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int area_gateserver_info_ack::kProtoidFieldNumber;
const int area_gateserver_info_ack::kGsInfoFieldNumber;
#endif  // !_MSC_VER

area_gateserver_info_ack::area_gateserver_info_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void area_gateserver_info_ack::InitAsDefaultInstance() {
}

area_gateserver_info_ack::area_gateserver_info_ack(const area_gateserver_info_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void area_gateserver_info_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 35;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

area_gateserver_info_ack::~area_gateserver_info_ack() {
  SharedDtor();
}

void area_gateserver_info_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void area_gateserver_info_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* area_gateserver_info_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return area_gateserver_info_ack_descriptor_;
}

const area_gateserver_info_ack& area_gateserver_info_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

area_gateserver_info_ack* area_gateserver_info_ack::default_instance_ = NULL;

area_gateserver_info_ack* area_gateserver_info_ack::New() const {
  return new area_gateserver_info_ack;
}

void area_gateserver_info_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 35;
  }
  gs_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool area_gateserver_info_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_gateserver_info_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gs_info;
        break;
      }

      // repeated .SProtoSpace.area_gateserver_info gs_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gs_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gs_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gs_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void area_gateserver_info_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_gateserver_info_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.area_gateserver_info gs_info = 2;
  for (int i = 0; i < this->gs_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gs_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* area_gateserver_info_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_gateserver_info_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.area_gateserver_info gs_info = 2;
  for (int i = 0; i < this->gs_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gs_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int area_gateserver_info_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_gateserver_info_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.area_gateserver_info gs_info = 2;
  total_size += 1 * this->gs_info_size();
  for (int i = 0; i < this->gs_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gs_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void area_gateserver_info_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const area_gateserver_info_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const area_gateserver_info_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void area_gateserver_info_ack::MergeFrom(const area_gateserver_info_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  gs_info_.MergeFrom(from.gs_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void area_gateserver_info_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void area_gateserver_info_ack::CopyFrom(const area_gateserver_info_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool area_gateserver_info_ack::IsInitialized() const {

  return true;
}

void area_gateserver_info_ack::Swap(area_gateserver_info_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    gs_info_.Swap(&other->gs_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata area_gateserver_info_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = area_gateserver_info_ack_descriptor_;
  metadata.reflection = area_gateserver_info_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int area_gateserver_info_ntf::kProtoidFieldNumber;
const int area_gateserver_info_ntf::kGsInfoFieldNumber;
#endif  // !_MSC_VER

area_gateserver_info_ntf::area_gateserver_info_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void area_gateserver_info_ntf::InitAsDefaultInstance() {
  gs_info_ = const_cast< ::SProtoSpace::area_gateserver_info*>(&::SProtoSpace::area_gateserver_info::default_instance());
}

area_gateserver_info_ntf::area_gateserver_info_ntf(const area_gateserver_info_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void area_gateserver_info_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 36;
  gs_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

area_gateserver_info_ntf::~area_gateserver_info_ntf() {
  SharedDtor();
}

void area_gateserver_info_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete gs_info_;
  }
}

void area_gateserver_info_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* area_gateserver_info_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return area_gateserver_info_ntf_descriptor_;
}

const area_gateserver_info_ntf& area_gateserver_info_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

area_gateserver_info_ntf* area_gateserver_info_ntf::default_instance_ = NULL;

area_gateserver_info_ntf* area_gateserver_info_ntf::New() const {
  return new area_gateserver_info_ntf;
}

void area_gateserver_info_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 36;
    if (has_gs_info()) {
      if (gs_info_ != NULL) gs_info_->::SProtoSpace::area_gateserver_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool area_gateserver_info_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_gateserver_info_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gs_info;
        break;
      }

      // optional .SProtoSpace.area_gateserver_info gs_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gs_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gs_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void area_gateserver_info_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_gateserver_info_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.area_gateserver_info gs_info = 2;
  if (has_gs_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gs_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* area_gateserver_info_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_gateserver_info_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.area_gateserver_info gs_info = 2;
  if (has_gs_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gs_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int area_gateserver_info_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = area_gateserver_info_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.area_gateserver_info gs_info = 2;
    if (has_gs_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gs_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void area_gateserver_info_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const area_gateserver_info_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const area_gateserver_info_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void area_gateserver_info_ntf::MergeFrom(const area_gateserver_info_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_gs_info()) {
      mutable_gs_info()->::SProtoSpace::area_gateserver_info::MergeFrom(from.gs_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void area_gateserver_info_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void area_gateserver_info_ntf::CopyFrom(const area_gateserver_info_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool area_gateserver_info_ntf::IsInitialized() const {

  return true;
}

void area_gateserver_info_ntf::Swap(area_gateserver_info_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(gs_info_, other->gs_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata area_gateserver_info_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = area_gateserver_info_ntf_descriptor_;
  metadata.reflection = area_gateserver_info_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_area_info_ntf::kProtoidFieldNumber;
const int update_area_info_ntf::kAccountFieldNumber;
const int update_area_info_ntf::kDataFieldNumber;
#endif  // !_MSC_VER

update_area_info_ntf::update_area_info_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_area_info_ntf::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::area_brief_info*>(&::SProtoSpace::area_brief_info::default_instance());
}

update_area_info_ntf::update_area_info_ntf(const update_area_info_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_area_info_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 40;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_area_info_ntf::~update_area_info_ntf() {
  SharedDtor();
}

void update_area_info_ntf::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void update_area_info_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_area_info_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_area_info_ntf_descriptor_;
}

const update_area_info_ntf& update_area_info_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

update_area_info_ntf* update_area_info_ntf::default_instance_ = NULL;

update_area_info_ntf* update_area_info_ntf::New() const {
  return new update_area_info_ntf;
}

void update_area_info_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 40;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::area_brief_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_area_info_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = update_area_info_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.area_brief_info data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_area_info_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = update_area_info_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional .SProtoSpace.area_brief_info data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_area_info_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = update_area_info_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional .SProtoSpace.area_brief_info data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_area_info_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = update_area_info_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional .SProtoSpace.area_brief_info data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_area_info_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_area_info_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_area_info_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_area_info_ntf::MergeFrom(const update_area_info_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::area_brief_info::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_area_info_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_area_info_ntf::CopyFrom(const update_area_info_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_area_info_ntf::IsInitialized() const {

  return true;
}

void update_area_info_ntf::Swap(update_area_info_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(account_, other->account_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_area_info_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_area_info_ntf_descriptor_;
  metadata.reflection = update_area_info_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lc_heartbeat_req::kProtoidFieldNumber;
const int lc_heartbeat_req::kSidFieldNumber;
const int lc_heartbeat_req::kTmFieldNumber;
#endif  // !_MSC_VER

lc_heartbeat_req::lc_heartbeat_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lc_heartbeat_req::InitAsDefaultInstance() {
}

lc_heartbeat_req::lc_heartbeat_req(const lc_heartbeat_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lc_heartbeat_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 37;
  sid_ = 0u;
  tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lc_heartbeat_req::~lc_heartbeat_req() {
  SharedDtor();
}

void lc_heartbeat_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lc_heartbeat_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lc_heartbeat_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lc_heartbeat_req_descriptor_;
}

const lc_heartbeat_req& lc_heartbeat_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

lc_heartbeat_req* lc_heartbeat_req::default_instance_ = NULL;

lc_heartbeat_req* lc_heartbeat_req::New() const {
  return new lc_heartbeat_req;
}

void lc_heartbeat_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 37;
    sid_ = 0u;
    tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lc_heartbeat_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = lc_heartbeat_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tm;
        break;
      }

      // optional uint32 tm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tm_)));
          set_has_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lc_heartbeat_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = lc_heartbeat_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sid(), output);
  }

  // optional uint32 tm = 3;
  if (has_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lc_heartbeat_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = lc_heartbeat_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 sid = 2;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sid(), target);
  }

  // optional uint32 tm = 3;
  if (has_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lc_heartbeat_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = lc_heartbeat_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 tm = 3;
    if (has_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lc_heartbeat_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lc_heartbeat_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lc_heartbeat_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lc_heartbeat_req::MergeFrom(const lc_heartbeat_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_tm()) {
      set_tm(from.tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lc_heartbeat_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lc_heartbeat_req::CopyFrom(const lc_heartbeat_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lc_heartbeat_req::IsInitialized() const {

  return true;
}

void lc_heartbeat_req::Swap(lc_heartbeat_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(sid_, other->sid_);
    std::swap(tm_, other->tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lc_heartbeat_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lc_heartbeat_req_descriptor_;
  metadata.reflection = lc_heartbeat_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lc_heartbeat_ack::kProtoidFieldNumber;
const int lc_heartbeat_ack::kRegionFieldNumber;
const int lc_heartbeat_ack::kGroupFieldNumber;
const int lc_heartbeat_ack::kTypeFieldNumber;
const int lc_heartbeat_ack::kIndexFieldNumber;
const int lc_heartbeat_ack::kSidFieldNumber;
const int lc_heartbeat_ack::kTmFieldNumber;
#endif  // !_MSC_VER

lc_heartbeat_ack::lc_heartbeat_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lc_heartbeat_ack::InitAsDefaultInstance() {
}

lc_heartbeat_ack::lc_heartbeat_ack(const lc_heartbeat_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lc_heartbeat_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 38;
  region_ = 0u;
  group_ = 0u;
  type_ = 0u;
  index_ = 0u;
  sid_ = 0u;
  tm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lc_heartbeat_ack::~lc_heartbeat_ack() {
  SharedDtor();
}

void lc_heartbeat_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lc_heartbeat_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lc_heartbeat_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lc_heartbeat_ack_descriptor_;
}

const lc_heartbeat_ack& lc_heartbeat_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

lc_heartbeat_ack* lc_heartbeat_ack::default_instance_ = NULL;

lc_heartbeat_ack* lc_heartbeat_ack::New() const {
  return new lc_heartbeat_ack;
}

void lc_heartbeat_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 38;
    region_ = 0u;
    group_ = 0u;
    type_ = 0u;
    index_ = 0u;
    sid_ = 0u;
    tm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lc_heartbeat_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = lc_heartbeat_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_region;
        break;
      }

      // optional uint32 region = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
          set_has_region();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_group;
        break;
      }

      // optional uint32 group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // optional uint32 index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sid;
        break;
      }

      // optional uint32 sid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tm;
        break;
      }

      // optional uint32 tm = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tm_)));
          set_has_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lc_heartbeat_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = lc_heartbeat_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 region = 2;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->region(), output);
  }

  // optional uint32 group = 3;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group(), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // optional uint32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->index(), output);
  }

  // optional uint32 sid = 6;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sid(), output);
  }

  // optional uint32 tm = 7;
  if (has_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lc_heartbeat_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = lc_heartbeat_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 region = 2;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->region(), target);
  }

  // optional uint32 group = 3;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->group(), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // optional uint32 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->index(), target);
  }

  // optional uint32 sid = 6;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sid(), target);
  }

  // optional uint32 tm = 7;
  if (has_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lc_heartbeat_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = lc_heartbeat_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 region = 2;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region());
    }

    // optional uint32 group = 3;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 sid = 6;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

    // optional uint32 tm = 7;
    if (has_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lc_heartbeat_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lc_heartbeat_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lc_heartbeat_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lc_heartbeat_ack::MergeFrom(const lc_heartbeat_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_tm()) {
      set_tm(from.tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lc_heartbeat_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lc_heartbeat_ack::CopyFrom(const lc_heartbeat_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lc_heartbeat_ack::IsInitialized() const {

  return true;
}

void lc_heartbeat_ack::Swap(lc_heartbeat_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(region_, other->region_);
    std::swap(group_, other->group_);
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(sid_, other->sid_);
    std::swap(tm_, other->tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lc_heartbeat_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lc_heartbeat_ack_descriptor_;
  metadata.reflection = lc_heartbeat_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_leave_game_ntf::kProtoidFieldNumber;
const int role_leave_game_ntf::kIdFieldNumber;
const int role_leave_game_ntf::kAccountidFieldNumber;
const int role_leave_game_ntf::kGroupidFieldNumber;
const int role_leave_game_ntf::kLevelFieldNumber;
const int role_leave_game_ntf::kHeroidFieldNumber;
const int role_leave_game_ntf::kLastlogindateFieldNumber;
const int role_leave_game_ntf::kAccountFieldNumber;
#endif  // !_MSC_VER

role_leave_game_ntf::role_leave_game_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_leave_game_ntf::InitAsDefaultInstance() {
}

role_leave_game_ntf::role_leave_game_ntf(const role_leave_game_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_leave_game_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 19;
  id_ = GOOGLE_ULONGLONG(0);
  accountid_ = 0u;
  groupid_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  heroid_ = 0u;
  lastlogindate_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_leave_game_ntf::~role_leave_game_ntf() {
  SharedDtor();
}

void role_leave_game_ntf::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void role_leave_game_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_leave_game_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_leave_game_ntf_descriptor_;
}

const role_leave_game_ntf& role_leave_game_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

role_leave_game_ntf* role_leave_game_ntf::default_instance_ = NULL;

role_leave_game_ntf* role_leave_game_ntf::New() const {
  return new role_leave_game_ntf;
}

void role_leave_game_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 19;
    id_ = GOOGLE_ULONGLONG(0);
    accountid_ = 0u;
    groupid_ = GOOGLE_ULONGLONG(0);
    level_ = 0u;
    heroid_ = 0u;
    lastlogindate_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_leave_game_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = role_leave_game_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accountid;
        break;
      }

      // optional uint32 accountid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_groupid;
        break;
      }

      // optional uint64 groupid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_heroid;
        break;
      }

      // optional uint32 heroid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lastlogindate;
        break;
      }

      // optional uint32 lastlogindate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastlogindate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastlogindate_)));
          set_has_lastlogindate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_account;
        break;
      }

      // optional string account = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_leave_game_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = role_leave_game_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional uint32 accountid = 3;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accountid(), output);
  }

  // optional uint64 groupid = 4;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->groupid(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 heroid = 6;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->heroid(), output);
  }

  // optional uint32 lastlogindate = 7;
  if (has_lastlogindate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lastlogindate(), output);
  }

  // optional string account = 8;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_leave_game_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = role_leave_game_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional uint32 accountid = 3;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accountid(), target);
  }

  // optional uint64 groupid = 4;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->groupid(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 heroid = 6;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->heroid(), target);
  }

  // optional uint32 lastlogindate = 7;
  if (has_lastlogindate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lastlogindate(), target);
  }

  // optional string account = 8;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_leave_game_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = role_leave_game_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 accountid = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint64 groupid = 4;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 heroid = 6;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 lastlogindate = 7;
    if (has_lastlogindate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastlogindate());
    }

    // optional string account = 8;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_leave_game_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_leave_game_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_leave_game_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_leave_game_ntf::MergeFrom(const role_leave_game_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_lastlogindate()) {
      set_lastlogindate(from.lastlogindate());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_leave_game_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_leave_game_ntf::CopyFrom(const role_leave_game_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_leave_game_ntf::IsInitialized() const {

  return true;
}

void role_leave_game_ntf::Swap(role_leave_game_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(id_, other->id_);
    std::swap(accountid_, other->accountid_);
    std::swap(groupid_, other->groupid_);
    std::swap(level_, other->level_);
    std::swap(heroid_, other->heroid_);
    std::swap(lastlogindate_, other->lastlogindate_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_leave_game_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_leave_game_ntf_descriptor_;
  metadata.reflection = role_leave_game_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm2center_close_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

gm2center_close_req::gm2center_close_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm2center_close_req::InitAsDefaultInstance() {
}

gm2center_close_req::gm2center_close_req(const gm2center_close_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm2center_close_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 51;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm2center_close_req::~gm2center_close_req() {
  SharedDtor();
}

void gm2center_close_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gm2center_close_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm2center_close_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm2center_close_req_descriptor_;
}

const gm2center_close_req& gm2center_close_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

gm2center_close_req* gm2center_close_req::default_instance_ = NULL;

gm2center_close_req* gm2center_close_req::New() const {
  return new gm2center_close_req;
}

void gm2center_close_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 51;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm2center_close_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2center_close_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm2center_close_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2center_close_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm2center_close_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2center_close_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm2center_close_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2center_close_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm2center_close_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm2center_close_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm2center_close_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm2center_close_req::MergeFrom(const gm2center_close_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm2center_close_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm2center_close_req::CopyFrom(const gm2center_close_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm2center_close_req::IsInitialized() const {

  return true;
}

void gm2center_close_req::Swap(gm2center_close_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm2center_close_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm2center_close_req_descriptor_;
  metadata.reflection = gm2center_close_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int center2gm_close_ack::kProtoidFieldNumber;
const int center2gm_close_ack::kRetcodeFieldNumber;
#endif  // !_MSC_VER

center2gm_close_ack::center2gm_close_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void center2gm_close_ack::InitAsDefaultInstance() {
}

center2gm_close_ack::center2gm_close_ack(const center2gm_close_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void center2gm_close_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 52;
  retcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

center2gm_close_ack::~center2gm_close_ack() {
  SharedDtor();
}

void center2gm_close_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void center2gm_close_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* center2gm_close_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return center2gm_close_ack_descriptor_;
}

const center2gm_close_ack& center2gm_close_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

center2gm_close_ack* center2gm_close_ack::default_instance_ = NULL;

center2gm_close_ack* center2gm_close_ack::New() const {
  return new center2gm_close_ack;
}

void center2gm_close_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 52;
    retcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool center2gm_close_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = center2gm_close_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retcode;
        break;
      }

      // optional uint32 retcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void center2gm_close_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = center2gm_close_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 retcode = 2;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* center2gm_close_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = center2gm_close_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 retcode = 2;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int center2gm_close_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = center2gm_close_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 retcode = 2;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void center2gm_close_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const center2gm_close_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const center2gm_close_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void center2gm_close_ack::MergeFrom(const center2gm_close_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void center2gm_close_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void center2gm_close_ack::CopyFrom(const center2gm_close_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool center2gm_close_ack::IsInitialized() const {

  return true;
}

void center2gm_close_ack::Swap(center2gm_close_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata center2gm_close_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = center2gm_close_ack_descriptor_;
  metadata.reflection = center2gm_close_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm2center_center_status_req::kProtoidFieldNumber;
const int gm2center_center_status_req::kInfoDetailFieldNumber;
#endif  // !_MSC_VER

gm2center_center_status_req::gm2center_center_status_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm2center_center_status_req::InitAsDefaultInstance() {
}

gm2center_center_status_req::gm2center_center_status_req(const gm2center_center_status_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm2center_center_status_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 53;
  info_detail_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm2center_center_status_req::~gm2center_center_status_req() {
  SharedDtor();
}

void gm2center_center_status_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gm2center_center_status_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm2center_center_status_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm2center_center_status_req_descriptor_;
}

const gm2center_center_status_req& gm2center_center_status_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

gm2center_center_status_req* gm2center_center_status_req::default_instance_ = NULL;

gm2center_center_status_req* gm2center_center_status_req::New() const {
  return new gm2center_center_status_req;
}

void gm2center_center_status_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 53;
    info_detail_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm2center_center_status_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2center_center_status_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info_detail;
        break;
      }

      // optional uint64 info_detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_detail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &info_detail_)));
          set_has_info_detail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm2center_center_status_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2center_center_status_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 info_detail = 2;
  if (has_info_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->info_detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm2center_center_status_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2center_center_status_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 info_detail = 2;
  if (has_info_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->info_detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm2center_center_status_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2center_center_status_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 info_detail = 2;
    if (has_info_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->info_detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm2center_center_status_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm2center_center_status_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm2center_center_status_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm2center_center_status_req::MergeFrom(const gm2center_center_status_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_info_detail()) {
      set_info_detail(from.info_detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm2center_center_status_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm2center_center_status_req::CopyFrom(const gm2center_center_status_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm2center_center_status_req::IsInitialized() const {

  return true;
}

void gm2center_center_status_req::Swap(gm2center_center_status_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(info_detail_, other->info_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm2center_center_status_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm2center_center_status_req_descriptor_;
  metadata.reflection = gm2center_center_status_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int center2gm_center_status_ack::kProtoidFieldNumber;
const int center2gm_center_status_ack::kServerStatusFieldNumber;
const int center2gm_center_status_ack::kAccountCountFieldNumber;
const int center2gm_center_status_ack::kServerIdFieldNumber;
const int center2gm_center_status_ack::kServerPortFieldNumber;
const int center2gm_center_status_ack::kServerRedisIpFieldNumber;
const int center2gm_center_status_ack::kServerRedisPortFieldNumber;
const int center2gm_center_status_ack::kGateserverCountFieldNumber;
const int center2gm_center_status_ack::kRedisStatueFieldNumber;
#endif  // !_MSC_VER

center2gm_center_status_ack::center2gm_center_status_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void center2gm_center_status_ack::InitAsDefaultInstance() {
}

center2gm_center_status_ack::center2gm_center_status_ack(const center2gm_center_status_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void center2gm_center_status_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 54;
  server_status_ = 0u;
  account_count_ = 0u;
  server_id_ = GOOGLE_ULONGLONG(0);
  server_port_ = GOOGLE_ULONGLONG(0);
  server_redis_ip_ = GOOGLE_ULONGLONG(0);
  server_redis_port_ = GOOGLE_ULONGLONG(0);
  gateserver_count_ = 0u;
  redis_statue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

center2gm_center_status_ack::~center2gm_center_status_ack() {
  SharedDtor();
}

void center2gm_center_status_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void center2gm_center_status_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* center2gm_center_status_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return center2gm_center_status_ack_descriptor_;
}

const center2gm_center_status_ack& center2gm_center_status_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

center2gm_center_status_ack* center2gm_center_status_ack::default_instance_ = NULL;

center2gm_center_status_ack* center2gm_center_status_ack::New() const {
  return new center2gm_center_status_ack;
}

void center2gm_center_status_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 54;
    server_status_ = 0u;
    account_count_ = 0u;
    server_id_ = GOOGLE_ULONGLONG(0);
    server_port_ = GOOGLE_ULONGLONG(0);
    server_redis_ip_ = GOOGLE_ULONGLONG(0);
    server_redis_port_ = GOOGLE_ULONGLONG(0);
    gateserver_count_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    redis_statue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool center2gm_center_status_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = center2gm_center_status_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_status;
        break;
      }

      // optional uint32 server_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_status_)));
          set_has_server_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_account_count;
        break;
      }

      // optional uint32 account_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_count_)));
          set_has_account_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_id;
        break;
      }

      // optional uint64 server_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_server_port;
        break;
      }

      // optional uint64 server_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_server_redis_ip;
        break;
      }

      // optional uint64 server_redis_ip = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_redis_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_redis_ip_)));
          set_has_server_redis_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_server_redis_port;
        break;
      }

      // optional uint64 server_redis_port = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_redis_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_redis_port_)));
          set_has_server_redis_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_gateserver_count;
        break;
      }

      // optional uint32 gateserver_count = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateserver_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateserver_count_)));
          set_has_gateserver_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_redis_statue;
        break;
      }

      // optional uint32 redis_statue = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redis_statue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redis_statue_)));
          set_has_redis_statue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void center2gm_center_status_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = center2gm_center_status_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 server_status = 2;
  if (has_server_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_status(), output);
  }

  // optional uint32 account_count = 3;
  if (has_account_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->account_count(), output);
  }

  // optional uint64 server_id = 4;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->server_id(), output);
  }

  // optional uint64 server_port = 5;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->server_port(), output);
  }

  // optional uint64 server_redis_ip = 16;
  if (has_server_redis_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->server_redis_ip(), output);
  }

  // optional uint64 server_redis_port = 17;
  if (has_server_redis_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->server_redis_port(), output);
  }

  // optional uint32 gateserver_count = 18;
  if (has_gateserver_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->gateserver_count(), output);
  }

  // optional uint32 redis_statue = 19;
  if (has_redis_statue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->redis_statue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* center2gm_center_status_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = center2gm_center_status_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 server_status = 2;
  if (has_server_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_status(), target);
  }

  // optional uint32 account_count = 3;
  if (has_account_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->account_count(), target);
  }

  // optional uint64 server_id = 4;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->server_id(), target);
  }

  // optional uint64 server_port = 5;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->server_port(), target);
  }

  // optional uint64 server_redis_ip = 16;
  if (has_server_redis_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->server_redis_ip(), target);
  }

  // optional uint64 server_redis_port = 17;
  if (has_server_redis_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->server_redis_port(), target);
  }

  // optional uint32 gateserver_count = 18;
  if (has_gateserver_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->gateserver_count(), target);
  }

  // optional uint32 redis_statue = 19;
  if (has_redis_statue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->redis_statue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int center2gm_center_status_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = center2gm_center_status_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 server_status = 2;
    if (has_server_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_status());
    }

    // optional uint32 account_count = 3;
    if (has_account_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_count());
    }

    // optional uint64 server_id = 4;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_id());
    }

    // optional uint64 server_port = 5;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_port());
    }

    // optional uint64 server_redis_ip = 16;
    if (has_server_redis_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_redis_ip());
    }

    // optional uint64 server_redis_port = 17;
    if (has_server_redis_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_redis_port());
    }

    // optional uint32 gateserver_count = 18;
    if (has_gateserver_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateserver_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 redis_statue = 19;
    if (has_redis_statue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redis_statue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void center2gm_center_status_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const center2gm_center_status_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const center2gm_center_status_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void center2gm_center_status_ack::MergeFrom(const center2gm_center_status_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_server_status()) {
      set_server_status(from.server_status());
    }
    if (from.has_account_count()) {
      set_account_count(from.account_count());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
    if (from.has_server_redis_ip()) {
      set_server_redis_ip(from.server_redis_ip());
    }
    if (from.has_server_redis_port()) {
      set_server_redis_port(from.server_redis_port());
    }
    if (from.has_gateserver_count()) {
      set_gateserver_count(from.gateserver_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_redis_statue()) {
      set_redis_statue(from.redis_statue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void center2gm_center_status_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void center2gm_center_status_ack::CopyFrom(const center2gm_center_status_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool center2gm_center_status_ack::IsInitialized() const {

  return true;
}

void center2gm_center_status_ack::Swap(center2gm_center_status_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(server_status_, other->server_status_);
    std::swap(account_count_, other->account_count_);
    std::swap(server_id_, other->server_id_);
    std::swap(server_port_, other->server_port_);
    std::swap(server_redis_ip_, other->server_redis_ip_);
    std::swap(server_redis_port_, other->server_redis_port_);
    std::swap(gateserver_count_, other->gateserver_count_);
    std::swap(redis_statue_, other->redis_statue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata center2gm_center_status_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = center2gm_center_status_ack_descriptor_;
  metadata.reflection = center2gm_center_status_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm2center_center_reset_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

gm2center_center_reset_req::gm2center_center_reset_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm2center_center_reset_req::InitAsDefaultInstance() {
}

gm2center_center_reset_req::gm2center_center_reset_req(const gm2center_center_reset_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm2center_center_reset_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 55;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm2center_center_reset_req::~gm2center_center_reset_req() {
  SharedDtor();
}

void gm2center_center_reset_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gm2center_center_reset_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm2center_center_reset_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm2center_center_reset_req_descriptor_;
}

const gm2center_center_reset_req& gm2center_center_reset_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

gm2center_center_reset_req* gm2center_center_reset_req::default_instance_ = NULL;

gm2center_center_reset_req* gm2center_center_reset_req::New() const {
  return new gm2center_center_reset_req;
}

void gm2center_center_reset_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 55;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm2center_center_reset_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2center_center_reset_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm2center_center_reset_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2center_center_reset_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm2center_center_reset_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2center_center_reset_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm2center_center_reset_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2center_center_reset_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm2center_center_reset_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm2center_center_reset_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm2center_center_reset_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm2center_center_reset_req::MergeFrom(const gm2center_center_reset_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm2center_center_reset_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm2center_center_reset_req::CopyFrom(const gm2center_center_reset_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm2center_center_reset_req::IsInitialized() const {

  return true;
}

void gm2center_center_reset_req::Swap(gm2center_center_reset_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm2center_center_reset_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm2center_center_reset_req_descriptor_;
  metadata.reflection = gm2center_center_reset_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int center2gm_center_reset_ack::kProtoidFieldNumber;
#endif  // !_MSC_VER

center2gm_center_reset_ack::center2gm_center_reset_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void center2gm_center_reset_ack::InitAsDefaultInstance() {
}

center2gm_center_reset_ack::center2gm_center_reset_ack(const center2gm_center_reset_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void center2gm_center_reset_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 56;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

center2gm_center_reset_ack::~center2gm_center_reset_ack() {
  SharedDtor();
}

void center2gm_center_reset_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void center2gm_center_reset_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* center2gm_center_reset_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return center2gm_center_reset_ack_descriptor_;
}

const center2gm_center_reset_ack& center2gm_center_reset_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcenter_2eproto();
  return *default_instance_;
}

center2gm_center_reset_ack* center2gm_center_reset_ack::default_instance_ = NULL;

center2gm_center_reset_ack* center2gm_center_reset_ack::New() const {
  return new center2gm_center_reset_ack;
}

void center2gm_center_reset_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 56;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool center2gm_center_reset_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = center2gm_center_reset_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void center2gm_center_reset_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = center2gm_center_reset_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* center2gm_center_reset_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = center2gm_center_reset_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int center2gm_center_reset_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = center2gm_center_reset_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void center2gm_center_reset_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const center2gm_center_reset_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const center2gm_center_reset_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void center2gm_center_reset_ack::MergeFrom(const center2gm_center_reset_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void center2gm_center_reset_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void center2gm_center_reset_ack::CopyFrom(const center2gm_center_reset_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool center2gm_center_reset_ack::IsInitialized() const {

  return true;
}

void center2gm_center_reset_ack::Swap(center2gm_center_reset_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata center2gm_center_reset_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = center2gm_center_reset_ack_descriptor_;
  metadata.reflection = center2gm_center_reset_ack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
