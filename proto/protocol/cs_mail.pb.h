// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_mail.proto

#ifndef PROTOBUF_cs_5fmail_2eproto__INCLUDED
#define PROTOBUF_cs_5fmail_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cm_roletype.pb.h"
#include "cm_battletype.pb.h"
#include "cm_activitytype.pb.h"
#include "cm_socialtype.pb.h"
#include "cs_protoid.pb.h"
#include "cs_errorcode.pb.h"
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_5fmail_2eproto();
void protobuf_AssignDesc_cs_5fmail_2eproto();
void protobuf_ShutdownFile_cs_5fmail_2eproto();

class mail_del_all_type_req;
class mail_del_all_type_ack;
class mail_set_multi_mail_status_req;
class mail_set_multi_mail_status_ack;
class mail_send_private_mail_req;
class mail_send_private_mail_ack;
class mail_all_type_ntf;
class mail_del_all_type_ntf;
class mail_send_global_mail_debug_req;
class mail_send_private_mail_debug_req;
class mail_send_private_mail_debug_ack;
class mail_send_global_mail_debug_ack;
class mail_send_group_mail_debug_req;
class mail_send_group_mail_debug_ack;
class mail_send_family_mail_debug_req;
class mail_send_family_mail_debug_ack;
class del_cs_mul_mails_req;
class del_cs_mul_mails_ack;
class del_cs_mails_ntf;
class sync_cs_mul_mails_state_req;
class sync_cs_mul_mails_state_ack;
class get_all_mail_cs_req;
class get_all_mail_cs_ack;
class get_all_mail_cs_ntf;
class send_mail_cs_req;
class send_mail_cs_ack;

// ===================================================================

class mail_del_all_type_req : public ::google::protobuf::Message {
 public:
  mail_del_all_type_req();
  virtual ~mail_del_all_type_req();

  mail_del_all_type_req(const mail_del_all_type_req& from);

  inline mail_del_all_type_req& operator=(const mail_del_all_type_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_del_all_type_req& default_instance();

  void Swap(mail_del_all_type_req* other);

  // implements Message ----------------------------------------------

  mail_del_all_type_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_del_all_type_req& from);
  void MergeFrom(const mail_del_all_type_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_del_all_type_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated uint64 mail_uuids = 2;
  inline int mail_uuids_size() const;
  inline void clear_mail_uuids();
  static const int kMailUuidsFieldNumber = 2;
  inline ::google::protobuf::uint64 mail_uuids(int index) const;
  inline void set_mail_uuids(int index, ::google::protobuf::uint64 value);
  inline void add_mail_uuids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      mail_uuids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_mail_uuids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_del_all_type_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > mail_uuids_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_del_all_type_req* default_instance_;
};
// -------------------------------------------------------------------

class mail_del_all_type_ack : public ::google::protobuf::Message {
 public:
  mail_del_all_type_ack();
  virtual ~mail_del_all_type_ack();

  mail_del_all_type_ack(const mail_del_all_type_ack& from);

  inline mail_del_all_type_ack& operator=(const mail_del_all_type_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_del_all_type_ack& default_instance();

  void Swap(mail_del_all_type_ack* other);

  // implements Message ----------------------------------------------

  mail_del_all_type_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_del_all_type_ack& from);
  void MergeFrom(const mail_del_all_type_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_del_all_type_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated uint64 mail_uuids = 2;
  inline int mail_uuids_size() const;
  inline void clear_mail_uuids();
  static const int kMailUuidsFieldNumber = 2;
  inline ::google::protobuf::uint64 mail_uuids(int index) const;
  inline void set_mail_uuids(int index, ::google::protobuf::uint64 value);
  inline void add_mail_uuids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      mail_uuids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_mail_uuids();

  // repeated uint64 fail_mail_uuids = 3;
  inline int fail_mail_uuids_size() const;
  inline void clear_fail_mail_uuids();
  static const int kFailMailUuidsFieldNumber = 3;
  inline ::google::protobuf::uint64 fail_mail_uuids(int index) const;
  inline void set_fail_mail_uuids(int index, ::google::protobuf::uint64 value);
  inline void add_fail_mail_uuids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      fail_mail_uuids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_fail_mail_uuids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_del_all_type_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > mail_uuids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > fail_mail_uuids_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_del_all_type_ack* default_instance_;
};
// -------------------------------------------------------------------

class mail_set_multi_mail_status_req : public ::google::protobuf::Message {
 public:
  mail_set_multi_mail_status_req();
  virtual ~mail_set_multi_mail_status_req();

  mail_set_multi_mail_status_req(const mail_set_multi_mail_status_req& from);

  inline mail_set_multi_mail_status_req& operator=(const mail_set_multi_mail_status_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_set_multi_mail_status_req& default_instance();

  void Swap(mail_set_multi_mail_status_req* other);

  // implements Message ----------------------------------------------

  mail_set_multi_mail_status_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_set_multi_mail_status_req& from);
  void MergeFrom(const mail_set_multi_mail_status_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_set_multi_mail_status_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated uint64 mail_uuids = 2;
  inline int mail_uuids_size() const;
  inline void clear_mail_uuids();
  static const int kMailUuidsFieldNumber = 2;
  inline ::google::protobuf::uint64 mail_uuids(int index) const;
  inline void set_mail_uuids(int index, ::google::protobuf::uint64 value);
  inline void add_mail_uuids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      mail_uuids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_mail_uuids();

  // optional bool to_set_read = 3;
  inline bool has_to_set_read() const;
  inline void clear_to_set_read();
  static const int kToSetReadFieldNumber = 3;
  inline bool to_set_read() const;
  inline void set_to_set_read(bool value);

  // optional bool to_set_attach_getted = 4;
  inline bool has_to_set_attach_getted() const;
  inline void clear_to_set_attach_getted();
  static const int kToSetAttachGettedFieldNumber = 4;
  inline bool to_set_attach_getted() const;
  inline void set_to_set_attach_getted(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_set_multi_mail_status_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_to_set_read();
  inline void clear_has_to_set_read();
  inline void set_has_to_set_attach_getted();
  inline void clear_has_to_set_attach_getted();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > mail_uuids_;
  int protoid_;
  bool to_set_read_;
  bool to_set_attach_getted_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_set_multi_mail_status_req* default_instance_;
};
// -------------------------------------------------------------------

class mail_set_multi_mail_status_ack : public ::google::protobuf::Message {
 public:
  mail_set_multi_mail_status_ack();
  virtual ~mail_set_multi_mail_status_ack();

  mail_set_multi_mail_status_ack(const mail_set_multi_mail_status_ack& from);

  inline mail_set_multi_mail_status_ack& operator=(const mail_set_multi_mail_status_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_set_multi_mail_status_ack& default_instance();

  void Swap(mail_set_multi_mail_status_ack* other);

  // implements Message ----------------------------------------------

  mail_set_multi_mail_status_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_set_multi_mail_status_ack& from);
  void MergeFrom(const mail_set_multi_mail_status_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_set_multi_mail_status_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated uint64 mail_uuids = 2;
  inline int mail_uuids_size() const;
  inline void clear_mail_uuids();
  static const int kMailUuidsFieldNumber = 2;
  inline ::google::protobuf::uint64 mail_uuids(int index) const;
  inline void set_mail_uuids(int index, ::google::protobuf::uint64 value);
  inline void add_mail_uuids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      mail_uuids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_mail_uuids();

  // optional bool to_set_read = 3;
  inline bool has_to_set_read() const;
  inline void clear_to_set_read();
  static const int kToSetReadFieldNumber = 3;
  inline bool to_set_read() const;
  inline void set_to_set_read(bool value);

  // optional bool to_set_attach_getted = 4;
  inline bool has_to_set_attach_getted() const;
  inline void clear_to_set_attach_getted();
  static const int kToSetAttachGettedFieldNumber = 4;
  inline bool to_set_attach_getted() const;
  inline void set_to_set_attach_getted(bool value);

  // repeated uint64 fail_mail_uuids = 5;
  inline int fail_mail_uuids_size() const;
  inline void clear_fail_mail_uuids();
  static const int kFailMailUuidsFieldNumber = 5;
  inline ::google::protobuf::uint64 fail_mail_uuids(int index) const;
  inline void set_fail_mail_uuids(int index, ::google::protobuf::uint64 value);
  inline void add_fail_mail_uuids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      fail_mail_uuids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_fail_mail_uuids();

  // optional .SProtoSpace.MsgErrorType rec_codes = 6;
  inline bool has_rec_codes() const;
  inline void clear_rec_codes();
  static const int kRecCodesFieldNumber = 6;
  inline ::SProtoSpace::MsgErrorType rec_codes() const;
  inline void set_rec_codes(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_set_multi_mail_status_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_to_set_read();
  inline void clear_has_to_set_read();
  inline void set_has_to_set_attach_getted();
  inline void clear_has_to_set_attach_getted();
  inline void set_has_rec_codes();
  inline void clear_has_rec_codes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > mail_uuids_;
  int protoid_;
  bool to_set_read_;
  bool to_set_attach_getted_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > fail_mail_uuids_;
  int rec_codes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_set_multi_mail_status_ack* default_instance_;
};
// -------------------------------------------------------------------

class mail_send_private_mail_req : public ::google::protobuf::Message {
 public:
  mail_send_private_mail_req();
  virtual ~mail_send_private_mail_req();

  mail_send_private_mail_req(const mail_send_private_mail_req& from);

  inline mail_send_private_mail_req& operator=(const mail_send_private_mail_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_send_private_mail_req& default_instance();

  void Swap(mail_send_private_mail_req* other);

  // implements Message ----------------------------------------------

  mail_send_private_mail_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_send_private_mail_req& from);
  void MergeFrom(const mail_send_private_mail_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.mail_instance mail = 2;
  inline bool has_mail() const;
  inline void clear_mail();
  static const int kMailFieldNumber = 2;
  inline const ::SProtoSpace::mail_instance& mail() const;
  inline ::SProtoSpace::mail_instance* mutable_mail();
  inline ::SProtoSpace::mail_instance* release_mail();
  inline void set_allocated_mail(::SProtoSpace::mail_instance* mail);

  // optional string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional uint64 to_role_id = 5;
  inline bool has_to_role_id() const;
  inline void clear_to_role_id();
  static const int kToRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint64 to_role_id() const;
  inline void set_to_role_id(::google::protobuf::uint64 value);

  // optional string to_role_name = 6;
  inline bool has_to_role_name() const;
  inline void clear_to_role_name();
  static const int kToRoleNameFieldNumber = 6;
  inline const ::std::string& to_role_name() const;
  inline void set_to_role_name(const ::std::string& value);
  inline void set_to_role_name(const char* value);
  inline void set_to_role_name(const char* value, size_t size);
  inline ::std::string* mutable_to_role_name();
  inline ::std::string* release_to_role_name();
  inline void set_allocated_to_role_name(::std::string* to_role_name);

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_send_private_mail_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_mail();
  inline void clear_has_mail();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_to_role_id();
  inline void clear_has_to_role_id();
  inline void set_has_to_role_name();
  inline void clear_has_to_role_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::mail_instance* mail_;
  ::std::string* title_;
  ::std::string* content_;
  ::google::protobuf::uint64 to_role_id_;
  ::std::string* to_role_name_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_send_private_mail_req* default_instance_;
};
// -------------------------------------------------------------------

class mail_send_private_mail_ack : public ::google::protobuf::Message {
 public:
  mail_send_private_mail_ack();
  virtual ~mail_send_private_mail_ack();

  mail_send_private_mail_ack(const mail_send_private_mail_ack& from);

  inline mail_send_private_mail_ack& operator=(const mail_send_private_mail_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_send_private_mail_ack& default_instance();

  void Swap(mail_send_private_mail_ack* other);

  // implements Message ----------------------------------------------

  mail_send_private_mail_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_send_private_mail_ack& from);
  void MergeFrom(const mail_send_private_mail_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.MsgErrorType rec_code = 2;
  inline bool has_rec_code() const;
  inline void clear_rec_code();
  static const int kRecCodeFieldNumber = 2;
  inline ::SProtoSpace::MsgErrorType rec_code() const;
  inline void set_rec_code(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_send_private_mail_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_rec_code();
  inline void clear_has_rec_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int rec_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_send_private_mail_ack* default_instance_;
};
// -------------------------------------------------------------------

class mail_all_type_ntf : public ::google::protobuf::Message {
 public:
  mail_all_type_ntf();
  virtual ~mail_all_type_ntf();

  mail_all_type_ntf(const mail_all_type_ntf& from);

  inline mail_all_type_ntf& operator=(const mail_all_type_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_all_type_ntf& default_instance();

  void Swap(mail_all_type_ntf* other);

  // implements Message ----------------------------------------------

  mail_all_type_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_all_type_ntf& from);
  void MergeFrom(const mail_all_type_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_all_type_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.mail_instance mails = 2;
  inline int mails_size() const;
  inline void clear_mails();
  static const int kMailsFieldNumber = 2;
  inline const ::SProtoSpace::mail_instance& mails(int index) const;
  inline ::SProtoSpace::mail_instance* mutable_mails(int index);
  inline ::SProtoSpace::mail_instance* add_mails();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::mail_instance >&
      mails() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::mail_instance >*
      mutable_mails();

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_all_type_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::mail_instance > mails_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_all_type_ntf* default_instance_;
};
// -------------------------------------------------------------------

class mail_del_all_type_ntf : public ::google::protobuf::Message {
 public:
  mail_del_all_type_ntf();
  virtual ~mail_del_all_type_ntf();

  mail_del_all_type_ntf(const mail_del_all_type_ntf& from);

  inline mail_del_all_type_ntf& operator=(const mail_del_all_type_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_del_all_type_ntf& default_instance();

  void Swap(mail_del_all_type_ntf* other);

  // implements Message ----------------------------------------------

  mail_del_all_type_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_del_all_type_ntf& from);
  void MergeFrom(const mail_del_all_type_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_del_all_type_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated uint64 mail_uuids = 2;
  inline int mail_uuids_size() const;
  inline void clear_mail_uuids();
  static const int kMailUuidsFieldNumber = 2;
  inline ::google::protobuf::uint64 mail_uuids(int index) const;
  inline void set_mail_uuids(int index, ::google::protobuf::uint64 value);
  inline void add_mail_uuids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      mail_uuids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_mail_uuids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_del_all_type_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > mail_uuids_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_del_all_type_ntf* default_instance_;
};
// -------------------------------------------------------------------

class mail_send_global_mail_debug_req : public ::google::protobuf::Message {
 public:
  mail_send_global_mail_debug_req();
  virtual ~mail_send_global_mail_debug_req();

  mail_send_global_mail_debug_req(const mail_send_global_mail_debug_req& from);

  inline mail_send_global_mail_debug_req& operator=(const mail_send_global_mail_debug_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_send_global_mail_debug_req& default_instance();

  void Swap(mail_send_global_mail_debug_req* other);

  // implements Message ----------------------------------------------

  mail_send_global_mail_debug_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_send_global_mail_debug_req& from);
  void MergeFrom(const mail_send_global_mail_debug_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_global_mail_debug_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 global_mail_config_id = 2;
  inline bool has_global_mail_config_id() const;
  inline void clear_global_mail_config_id();
  static const int kGlobalMailConfigIdFieldNumber = 2;
  inline ::google::protobuf::int32 global_mail_config_id() const;
  inline void set_global_mail_config_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_send_global_mail_debug_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_global_mail_config_id();
  inline void clear_has_global_mail_config_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 global_mail_config_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_send_global_mail_debug_req* default_instance_;
};
// -------------------------------------------------------------------

class mail_send_private_mail_debug_req : public ::google::protobuf::Message {
 public:
  mail_send_private_mail_debug_req();
  virtual ~mail_send_private_mail_debug_req();

  mail_send_private_mail_debug_req(const mail_send_private_mail_debug_req& from);

  inline mail_send_private_mail_debug_req& operator=(const mail_send_private_mail_debug_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_send_private_mail_debug_req& default_instance();

  void Swap(mail_send_private_mail_debug_req* other);

  // implements Message ----------------------------------------------

  mail_send_private_mail_debug_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_send_private_mail_debug_req& from);
  void MergeFrom(const mail_send_private_mail_debug_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_debug_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 is_send_private_mail = 3;
  inline bool has_is_send_private_mail() const;
  inline void clear_is_send_private_mail();
  static const int kIsSendPrivateMailFieldNumber = 3;
  inline ::google::protobuf::int32 is_send_private_mail() const;
  inline void set_is_send_private_mail(::google::protobuf::int32 value);

  // optional int32 is_send_system_mail = 4;
  inline bool has_is_send_system_mail() const;
  inline void clear_is_send_system_mail();
  static const int kIsSendSystemMailFieldNumber = 4;
  inline ::google::protobuf::int32 is_send_system_mail() const;
  inline void set_is_send_system_mail(::google::protobuf::int32 value);

  // optional string to_role_name = 5;
  inline bool has_to_role_name() const;
  inline void clear_to_role_name();
  static const int kToRoleNameFieldNumber = 5;
  inline const ::std::string& to_role_name() const;
  inline void set_to_role_name(const ::std::string& value);
  inline void set_to_role_name(const char* value);
  inline void set_to_role_name(const char* value, size_t size);
  inline ::std::string* mutable_to_role_name();
  inline ::std::string* release_to_role_name();
  inline void set_allocated_to_role_name(::std::string* to_role_name);

  // optional uint64 to_role_id = 6;
  inline bool has_to_role_id() const;
  inline void clear_to_role_id();
  static const int kToRoleIdFieldNumber = 6;
  inline ::google::protobuf::uint64 to_role_id() const;
  inline void set_to_role_id(::google::protobuf::uint64 value);

  // repeated int32 item_ids = 7;
  inline int item_ids_size() const;
  inline void clear_item_ids();
  static const int kItemIdsFieldNumber = 7;
  inline ::google::protobuf::int32 item_ids(int index) const;
  inline void set_item_ids(int index, ::google::protobuf::int32 value);
  inline void add_item_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_ids();

  // repeated int32 item_counts = 8;
  inline int item_counts_size() const;
  inline void clear_item_counts();
  static const int kItemCountsFieldNumber = 8;
  inline ::google::protobuf::int32 item_counts(int index) const;
  inline void set_item_counts(int index, ::google::protobuf::int32 value);
  inline void add_item_counts(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_counts() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_counts();

  // optional string title = 9;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 9;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 10;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 10;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 config_id = 11;
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 11;
  inline ::google::protobuf::int32 config_id() const;
  inline void set_config_id(::google::protobuf::int32 value);

  // optional int32 is_public_server_test = 12;
  inline bool has_is_public_server_test() const;
  inline void clear_is_public_server_test();
  static const int kIsPublicServerTestFieldNumber = 12;
  inline ::google::protobuf::int32 is_public_server_test() const;
  inline void set_is_public_server_test(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_send_private_mail_debug_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_is_send_private_mail();
  inline void clear_has_is_send_private_mail();
  inline void set_has_is_send_system_mail();
  inline void clear_has_is_send_system_mail();
  inline void set_has_to_role_name();
  inline void clear_has_to_role_name();
  inline void set_has_to_role_id();
  inline void clear_has_to_role_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_is_public_server_test();
  inline void clear_has_is_public_server_test();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 is_send_private_mail_;
  ::std::string* to_role_name_;
  ::google::protobuf::uint64 to_role_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_ids_;
  ::google::protobuf::int32 is_send_system_mail_;
  ::google::protobuf::int32 config_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_counts_;
  ::std::string* title_;
  ::std::string* content_;
  ::google::protobuf::int32 is_public_server_test_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_send_private_mail_debug_req* default_instance_;
};
// -------------------------------------------------------------------

class mail_send_private_mail_debug_ack : public ::google::protobuf::Message {
 public:
  mail_send_private_mail_debug_ack();
  virtual ~mail_send_private_mail_debug_ack();

  mail_send_private_mail_debug_ack(const mail_send_private_mail_debug_ack& from);

  inline mail_send_private_mail_debug_ack& operator=(const mail_send_private_mail_debug_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_send_private_mail_debug_ack& default_instance();

  void Swap(mail_send_private_mail_debug_ack* other);

  // implements Message ----------------------------------------------

  mail_send_private_mail_debug_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_send_private_mail_debug_ack& from);
  void MergeFrom(const mail_send_private_mail_debug_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_debug_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional sint32 rec_code = 2;
  inline bool has_rec_code() const;
  inline void clear_rec_code();
  static const int kRecCodeFieldNumber = 2;
  inline ::google::protobuf::int32 rec_code() const;
  inline void set_rec_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_send_private_mail_debug_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_rec_code();
  inline void clear_has_rec_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 rec_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_send_private_mail_debug_ack* default_instance_;
};
// -------------------------------------------------------------------

class mail_send_global_mail_debug_ack : public ::google::protobuf::Message {
 public:
  mail_send_global_mail_debug_ack();
  virtual ~mail_send_global_mail_debug_ack();

  mail_send_global_mail_debug_ack(const mail_send_global_mail_debug_ack& from);

  inline mail_send_global_mail_debug_ack& operator=(const mail_send_global_mail_debug_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_send_global_mail_debug_ack& default_instance();

  void Swap(mail_send_global_mail_debug_ack* other);

  // implements Message ----------------------------------------------

  mail_send_global_mail_debug_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_send_global_mail_debug_ack& from);
  void MergeFrom(const mail_send_global_mail_debug_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_global_mail_debug_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional sint32 rec_code = 2;
  inline bool has_rec_code() const;
  inline void clear_rec_code();
  static const int kRecCodeFieldNumber = 2;
  inline ::google::protobuf::int32 rec_code() const;
  inline void set_rec_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_send_global_mail_debug_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_rec_code();
  inline void clear_has_rec_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 rec_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_send_global_mail_debug_ack* default_instance_;
};
// -------------------------------------------------------------------

class mail_send_group_mail_debug_req : public ::google::protobuf::Message {
 public:
  mail_send_group_mail_debug_req();
  virtual ~mail_send_group_mail_debug_req();

  mail_send_group_mail_debug_req(const mail_send_group_mail_debug_req& from);

  inline mail_send_group_mail_debug_req& operator=(const mail_send_group_mail_debug_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_send_group_mail_debug_req& default_instance();

  void Swap(mail_send_group_mail_debug_req* other);

  // implements Message ----------------------------------------------

  mail_send_group_mail_debug_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_send_group_mail_debug_req& from);
  void MergeFrom(const mail_send_group_mail_debug_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_group_mail_debug_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated uint64 group_mail_to_role_ids = 2;
  inline int group_mail_to_role_ids_size() const;
  inline void clear_group_mail_to_role_ids();
  static const int kGroupMailToRoleIdsFieldNumber = 2;
  inline ::google::protobuf::uint64 group_mail_to_role_ids(int index) const;
  inline void set_group_mail_to_role_ids(int index, ::google::protobuf::uint64 value);
  inline void add_group_mail_to_role_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      group_mail_to_role_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_group_mail_to_role_ids();

  // optional int32 group_mail_config_id = 3;
  inline bool has_group_mail_config_id() const;
  inline void clear_group_mail_config_id();
  static const int kGroupMailConfigIdFieldNumber = 3;
  inline ::google::protobuf::int32 group_mail_config_id() const;
  inline void set_group_mail_config_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_send_group_mail_debug_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_group_mail_config_id();
  inline void clear_has_group_mail_config_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > group_mail_to_role_ids_;
  int protoid_;
  ::google::protobuf::int32 group_mail_config_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_send_group_mail_debug_req* default_instance_;
};
// -------------------------------------------------------------------

class mail_send_group_mail_debug_ack : public ::google::protobuf::Message {
 public:
  mail_send_group_mail_debug_ack();
  virtual ~mail_send_group_mail_debug_ack();

  mail_send_group_mail_debug_ack(const mail_send_group_mail_debug_ack& from);

  inline mail_send_group_mail_debug_ack& operator=(const mail_send_group_mail_debug_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_send_group_mail_debug_ack& default_instance();

  void Swap(mail_send_group_mail_debug_ack* other);

  // implements Message ----------------------------------------------

  mail_send_group_mail_debug_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_send_group_mail_debug_ack& from);
  void MergeFrom(const mail_send_group_mail_debug_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_group_mail_debug_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional sint32 rec_code = 2;
  inline bool has_rec_code() const;
  inline void clear_rec_code();
  static const int kRecCodeFieldNumber = 2;
  inline ::google::protobuf::int32 rec_code() const;
  inline void set_rec_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_send_group_mail_debug_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_rec_code();
  inline void clear_has_rec_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 rec_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_send_group_mail_debug_ack* default_instance_;
};
// -------------------------------------------------------------------

class mail_send_family_mail_debug_req : public ::google::protobuf::Message {
 public:
  mail_send_family_mail_debug_req();
  virtual ~mail_send_family_mail_debug_req();

  mail_send_family_mail_debug_req(const mail_send_family_mail_debug_req& from);

  inline mail_send_family_mail_debug_req& operator=(const mail_send_family_mail_debug_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_send_family_mail_debug_req& default_instance();

  void Swap(mail_send_family_mail_debug_req* other);

  // implements Message ----------------------------------------------

  mail_send_family_mail_debug_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_send_family_mail_debug_req& from);
  void MergeFrom(const mail_send_family_mail_debug_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_family_mail_debug_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 family_mail_family_id = 2;
  inline bool has_family_mail_family_id() const;
  inline void clear_family_mail_family_id();
  static const int kFamilyMailFamilyIdFieldNumber = 2;
  inline ::google::protobuf::uint64 family_mail_family_id() const;
  inline void set_family_mail_family_id(::google::protobuf::uint64 value);

  // optional int32 family_mail_config_id = 3;
  inline bool has_family_mail_config_id() const;
  inline void clear_family_mail_config_id();
  static const int kFamilyMailConfigIdFieldNumber = 3;
  inline ::google::protobuf::int32 family_mail_config_id() const;
  inline void set_family_mail_config_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_send_family_mail_debug_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_family_mail_family_id();
  inline void clear_has_family_mail_family_id();
  inline void set_has_family_mail_config_id();
  inline void clear_has_family_mail_config_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 family_mail_family_id_;
  int protoid_;
  ::google::protobuf::int32 family_mail_config_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_send_family_mail_debug_req* default_instance_;
};
// -------------------------------------------------------------------

class mail_send_family_mail_debug_ack : public ::google::protobuf::Message {
 public:
  mail_send_family_mail_debug_ack();
  virtual ~mail_send_family_mail_debug_ack();

  mail_send_family_mail_debug_ack(const mail_send_family_mail_debug_ack& from);

  inline mail_send_family_mail_debug_ack& operator=(const mail_send_family_mail_debug_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_send_family_mail_debug_ack& default_instance();

  void Swap(mail_send_family_mail_debug_ack* other);

  // implements Message ----------------------------------------------

  mail_send_family_mail_debug_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_send_family_mail_debug_ack& from);
  void MergeFrom(const mail_send_family_mail_debug_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_family_mail_debug_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional sint32 rec_code = 2;
  inline bool has_rec_code() const;
  inline void clear_rec_code();
  static const int kRecCodeFieldNumber = 2;
  inline ::google::protobuf::int32 rec_code() const;
  inline void set_rec_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_send_family_mail_debug_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_rec_code();
  inline void clear_has_rec_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 rec_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_send_family_mail_debug_ack* default_instance_;
};
// -------------------------------------------------------------------

class del_cs_mul_mails_req : public ::google::protobuf::Message {
 public:
  del_cs_mul_mails_req();
  virtual ~del_cs_mul_mails_req();

  del_cs_mul_mails_req(const del_cs_mul_mails_req& from);

  inline del_cs_mul_mails_req& operator=(const del_cs_mul_mails_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const del_cs_mul_mails_req& default_instance();

  void Swap(del_cs_mul_mails_req* other);

  // implements Message ----------------------------------------------

  del_cs_mul_mails_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const del_cs_mul_mails_req& from);
  void MergeFrom(const del_cs_mul_mails_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = del_cs_mul_mails_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated uint64 mail_id_s = 2;
  inline int mail_id_s_size() const;
  inline void clear_mail_id_s();
  static const int kMailIdSFieldNumber = 2;
  inline ::google::protobuf::uint64 mail_id_s(int index) const;
  inline void set_mail_id_s(int index, ::google::protobuf::uint64 value);
  inline void add_mail_id_s(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      mail_id_s() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_mail_id_s();

  // @@protoc_insertion_point(class_scope:SProtoSpace.del_cs_mul_mails_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > mail_id_s_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static del_cs_mul_mails_req* default_instance_;
};
// -------------------------------------------------------------------

class del_cs_mul_mails_ack : public ::google::protobuf::Message {
 public:
  del_cs_mul_mails_ack();
  virtual ~del_cs_mul_mails_ack();

  del_cs_mul_mails_ack(const del_cs_mul_mails_ack& from);

  inline del_cs_mul_mails_ack& operator=(const del_cs_mul_mails_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const del_cs_mul_mails_ack& default_instance();

  void Swap(del_cs_mul_mails_ack* other);

  // implements Message ----------------------------------------------

  del_cs_mul_mails_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const del_cs_mul_mails_ack& from);
  void MergeFrom(const del_cs_mul_mails_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = del_cs_mul_mails_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated uint64 mail_id_s = 2;
  inline int mail_id_s_size() const;
  inline void clear_mail_id_s();
  static const int kMailIdSFieldNumber = 2;
  inline ::google::protobuf::uint64 mail_id_s(int index) const;
  inline void set_mail_id_s(int index, ::google::protobuf::uint64 value);
  inline void add_mail_id_s(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      mail_id_s() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_mail_id_s();

  // optional .SProtoSpace.MsgErrorType error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline ::SProtoSpace::MsgErrorType error() const;
  inline void set_error(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.del_cs_mul_mails_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > mail_id_s_;
  int protoid_;
  int error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static del_cs_mul_mails_ack* default_instance_;
};
// -------------------------------------------------------------------

class del_cs_mails_ntf : public ::google::protobuf::Message {
 public:
  del_cs_mails_ntf();
  virtual ~del_cs_mails_ntf();

  del_cs_mails_ntf(const del_cs_mails_ntf& from);

  inline del_cs_mails_ntf& operator=(const del_cs_mails_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const del_cs_mails_ntf& default_instance();

  void Swap(del_cs_mails_ntf* other);

  // implements Message ----------------------------------------------

  del_cs_mails_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const del_cs_mails_ntf& from);
  void MergeFrom(const del_cs_mails_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = del_cs_mails_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated uint64 mail_id_s = 2;
  inline int mail_id_s_size() const;
  inline void clear_mail_id_s();
  static const int kMailIdSFieldNumber = 2;
  inline ::google::protobuf::uint64 mail_id_s(int index) const;
  inline void set_mail_id_s(int index, ::google::protobuf::uint64 value);
  inline void add_mail_id_s(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      mail_id_s() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_mail_id_s();

  // @@protoc_insertion_point(class_scope:SProtoSpace.del_cs_mails_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > mail_id_s_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static del_cs_mails_ntf* default_instance_;
};
// -------------------------------------------------------------------

class sync_cs_mul_mails_state_req : public ::google::protobuf::Message {
 public:
  sync_cs_mul_mails_state_req();
  virtual ~sync_cs_mul_mails_state_req();

  sync_cs_mul_mails_state_req(const sync_cs_mul_mails_state_req& from);

  inline sync_cs_mul_mails_state_req& operator=(const sync_cs_mul_mails_state_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sync_cs_mul_mails_state_req& default_instance();

  void Swap(sync_cs_mul_mails_state_req* other);

  // implements Message ----------------------------------------------

  sync_cs_mul_mails_state_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sync_cs_mul_mails_state_req& from);
  void MergeFrom(const sync_cs_mul_mails_state_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sync_cs_mul_mails_state_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated uint64 mail_id_s = 2;
  inline int mail_id_s_size() const;
  inline void clear_mail_id_s();
  static const int kMailIdSFieldNumber = 2;
  inline ::google::protobuf::uint64 mail_id_s(int index) const;
  inline void set_mail_id_s(int index, ::google::protobuf::uint64 value);
  inline void add_mail_id_s(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      mail_id_s() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_mail_id_s();

  // optional bool read_state = 3;
  inline bool has_read_state() const;
  inline void clear_read_state();
  static const int kReadStateFieldNumber = 3;
  inline bool read_state() const;
  inline void set_read_state(bool value);

  // optional bool get_attach_state = 4;
  inline bool has_get_attach_state() const;
  inline void clear_get_attach_state();
  static const int kGetAttachStateFieldNumber = 4;
  inline bool get_attach_state() const;
  inline void set_get_attach_state(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.sync_cs_mul_mails_state_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_read_state();
  inline void clear_has_read_state();
  inline void set_has_get_attach_state();
  inline void clear_has_get_attach_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > mail_id_s_;
  int protoid_;
  bool read_state_;
  bool get_attach_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static sync_cs_mul_mails_state_req* default_instance_;
};
// -------------------------------------------------------------------

class sync_cs_mul_mails_state_ack : public ::google::protobuf::Message {
 public:
  sync_cs_mul_mails_state_ack();
  virtual ~sync_cs_mul_mails_state_ack();

  sync_cs_mul_mails_state_ack(const sync_cs_mul_mails_state_ack& from);

  inline sync_cs_mul_mails_state_ack& operator=(const sync_cs_mul_mails_state_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sync_cs_mul_mails_state_ack& default_instance();

  void Swap(sync_cs_mul_mails_state_ack* other);

  // implements Message ----------------------------------------------

  sync_cs_mul_mails_state_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sync_cs_mul_mails_state_ack& from);
  void MergeFrom(const sync_cs_mul_mails_state_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sync_cs_mul_mails_state_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated uint64 mail_id_s = 2;
  inline int mail_id_s_size() const;
  inline void clear_mail_id_s();
  static const int kMailIdSFieldNumber = 2;
  inline ::google::protobuf::uint64 mail_id_s(int index) const;
  inline void set_mail_id_s(int index, ::google::protobuf::uint64 value);
  inline void add_mail_id_s(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      mail_id_s() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_mail_id_s();

  // optional .SProtoSpace.MsgErrorType error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline ::SProtoSpace::MsgErrorType error() const;
  inline void set_error(::SProtoSpace::MsgErrorType value);

  // optional bool read_state = 4;
  inline bool has_read_state() const;
  inline void clear_read_state();
  static const int kReadStateFieldNumber = 4;
  inline bool read_state() const;
  inline void set_read_state(bool value);

  // optional bool get_attach_state = 5;
  inline bool has_get_attach_state() const;
  inline void clear_get_attach_state();
  static const int kGetAttachStateFieldNumber = 5;
  inline bool get_attach_state() const;
  inline void set_get_attach_state(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.sync_cs_mul_mails_state_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_read_state();
  inline void clear_has_read_state();
  inline void set_has_get_attach_state();
  inline void clear_has_get_attach_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > mail_id_s_;
  int protoid_;
  int error_;
  bool read_state_;
  bool get_attach_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static sync_cs_mul_mails_state_ack* default_instance_;
};
// -------------------------------------------------------------------

class get_all_mail_cs_req : public ::google::protobuf::Message {
 public:
  get_all_mail_cs_req();
  virtual ~get_all_mail_cs_req();

  get_all_mail_cs_req(const get_all_mail_cs_req& from);

  inline get_all_mail_cs_req& operator=(const get_all_mail_cs_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_all_mail_cs_req& default_instance();

  void Swap(get_all_mail_cs_req* other);

  // implements Message ----------------------------------------------

  get_all_mail_cs_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_all_mail_cs_req& from);
  void MergeFrom(const get_all_mail_cs_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_mail_cs_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_all_mail_cs_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static get_all_mail_cs_req* default_instance_;
};
// -------------------------------------------------------------------

class get_all_mail_cs_ack : public ::google::protobuf::Message {
 public:
  get_all_mail_cs_ack();
  virtual ~get_all_mail_cs_ack();

  get_all_mail_cs_ack(const get_all_mail_cs_ack& from);

  inline get_all_mail_cs_ack& operator=(const get_all_mail_cs_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_all_mail_cs_ack& default_instance();

  void Swap(get_all_mail_cs_ack* other);

  // implements Message ----------------------------------------------

  get_all_mail_cs_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_all_mail_cs_ack& from);
  void MergeFrom(const get_all_mail_cs_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_mail_cs_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.mail mails = 2;
  inline int mails_size() const;
  inline void clear_mails();
  static const int kMailsFieldNumber = 2;
  inline const ::SProtoSpace::mail& mails(int index) const;
  inline ::SProtoSpace::mail* mutable_mails(int index);
  inline ::SProtoSpace::mail* add_mails();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::mail >&
      mails() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::mail >*
      mutable_mails();

  // optional .SProtoSpace.MsgErrorType error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline ::SProtoSpace::MsgErrorType error() const;
  inline void set_error(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_all_mail_cs_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::mail > mails_;
  int protoid_;
  int error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static get_all_mail_cs_ack* default_instance_;
};
// -------------------------------------------------------------------

class get_all_mail_cs_ntf : public ::google::protobuf::Message {
 public:
  get_all_mail_cs_ntf();
  virtual ~get_all_mail_cs_ntf();

  get_all_mail_cs_ntf(const get_all_mail_cs_ntf& from);

  inline get_all_mail_cs_ntf& operator=(const get_all_mail_cs_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_all_mail_cs_ntf& default_instance();

  void Swap(get_all_mail_cs_ntf* other);

  // implements Message ----------------------------------------------

  get_all_mail_cs_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_all_mail_cs_ntf& from);
  void MergeFrom(const get_all_mail_cs_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_mail_cs_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.mail mails = 2;
  inline int mails_size() const;
  inline void clear_mails();
  static const int kMailsFieldNumber = 2;
  inline const ::SProtoSpace::mail& mails(int index) const;
  inline ::SProtoSpace::mail* mutable_mails(int index);
  inline ::SProtoSpace::mail* add_mails();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::mail >&
      mails() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::mail >*
      mutable_mails();

  // repeated uint64 del_mail_ids = 3;
  inline int del_mail_ids_size() const;
  inline void clear_del_mail_ids();
  static const int kDelMailIdsFieldNumber = 3;
  inline ::google::protobuf::uint64 del_mail_ids(int index) const;
  inline void set_del_mail_ids(int index, ::google::protobuf::uint64 value);
  inline void add_del_mail_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      del_mail_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_del_mail_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_all_mail_cs_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::mail > mails_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > del_mail_ids_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static get_all_mail_cs_ntf* default_instance_;
};
// -------------------------------------------------------------------

class send_mail_cs_req : public ::google::protobuf::Message {
 public:
  send_mail_cs_req();
  virtual ~send_mail_cs_req();

  send_mail_cs_req(const send_mail_cs_req& from);

  inline send_mail_cs_req& operator=(const send_mail_cs_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const send_mail_cs_req& default_instance();

  void Swap(send_mail_cs_req* other);

  // implements Message ----------------------------------------------

  send_mail_cs_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const send_mail_cs_req& from);
  void MergeFrom(const send_mail_cs_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = send_mail_cs_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 to_role_id = 2;
  inline bool has_to_role_id() const;
  inline void clear_to_role_id();
  static const int kToRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 to_role_id() const;
  inline void set_to_role_id(::google::protobuf::uint64 value);

  // optional string to_role_name = 3;
  inline bool has_to_role_name() const;
  inline void clear_to_role_name();
  static const int kToRoleNameFieldNumber = 3;
  inline const ::std::string& to_role_name() const;
  inline void set_to_role_name(const ::std::string& value);
  inline void set_to_role_name(const char* value);
  inline void set_to_role_name(const char* value, size_t size);
  inline ::std::string* mutable_to_role_name();
  inline ::std::string* release_to_role_name();
  inline void set_allocated_to_role_name(::std::string* to_role_name);

  // optional string title = 4;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 4;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 5;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 5;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional .SProtoSpace.eSendMailType type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::SProtoSpace::eSendMailType type() const;
  inline void set_type(::SProtoSpace::eSendMailType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.send_mail_cs_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_to_role_id();
  inline void clear_has_to_role_id();
  inline void set_has_to_role_name();
  inline void clear_has_to_role_name();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 to_role_id_;
  ::std::string* to_role_name_;
  int protoid_;
  int type_;
  ::std::string* title_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static send_mail_cs_req* default_instance_;
};
// -------------------------------------------------------------------

class send_mail_cs_ack : public ::google::protobuf::Message {
 public:
  send_mail_cs_ack();
  virtual ~send_mail_cs_ack();

  send_mail_cs_ack(const send_mail_cs_ack& from);

  inline send_mail_cs_ack& operator=(const send_mail_cs_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const send_mail_cs_ack& default_instance();

  void Swap(send_mail_cs_ack* other);

  // implements Message ----------------------------------------------

  send_mail_cs_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const send_mail_cs_ack& from);
  void MergeFrom(const send_mail_cs_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = send_mail_cs_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.mail mail = 2;
  inline bool has_mail() const;
  inline void clear_mail();
  static const int kMailFieldNumber = 2;
  inline const ::SProtoSpace::mail& mail() const;
  inline ::SProtoSpace::mail* mutable_mail();
  inline ::SProtoSpace::mail* release_mail();
  inline void set_allocated_mail(::SProtoSpace::mail* mail);

  // optional .SProtoSpace.MsgErrorType error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline ::SProtoSpace::MsgErrorType error() const;
  inline void set_error(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.send_mail_cs_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_mail();
  inline void clear_has_mail();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::mail* mail_;
  int protoid_;
  int error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fmail_2eproto();
  friend void protobuf_AssignDesc_cs_5fmail_2eproto();
  friend void protobuf_ShutdownFile_cs_5fmail_2eproto();

  void InitAsDefaultInstance();
  static send_mail_cs_ack* default_instance_;
};
// ===================================================================


// ===================================================================

// mail_del_all_type_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_del_all_type_req_id];
inline bool mail_del_all_type_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_del_all_type_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_del_all_type_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_del_all_type_req::clear_protoid() {
  protoid_ = 5973;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID mail_del_all_type_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void mail_del_all_type_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated uint64 mail_uuids = 2;
inline int mail_del_all_type_req::mail_uuids_size() const {
  return mail_uuids_.size();
}
inline void mail_del_all_type_req::clear_mail_uuids() {
  mail_uuids_.Clear();
}
inline ::google::protobuf::uint64 mail_del_all_type_req::mail_uuids(int index) const {
  return mail_uuids_.Get(index);
}
inline void mail_del_all_type_req::set_mail_uuids(int index, ::google::protobuf::uint64 value) {
  mail_uuids_.Set(index, value);
}
inline void mail_del_all_type_req::add_mail_uuids(::google::protobuf::uint64 value) {
  mail_uuids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
mail_del_all_type_req::mail_uuids() const {
  return mail_uuids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
mail_del_all_type_req::mutable_mail_uuids() {
  return &mail_uuids_;
}

// -------------------------------------------------------------------

// mail_del_all_type_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_del_all_type_ack_id];
inline bool mail_del_all_type_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_del_all_type_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_del_all_type_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_del_all_type_ack::clear_protoid() {
  protoid_ = 5974;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID mail_del_all_type_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void mail_del_all_type_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated uint64 mail_uuids = 2;
inline int mail_del_all_type_ack::mail_uuids_size() const {
  return mail_uuids_.size();
}
inline void mail_del_all_type_ack::clear_mail_uuids() {
  mail_uuids_.Clear();
}
inline ::google::protobuf::uint64 mail_del_all_type_ack::mail_uuids(int index) const {
  return mail_uuids_.Get(index);
}
inline void mail_del_all_type_ack::set_mail_uuids(int index, ::google::protobuf::uint64 value) {
  mail_uuids_.Set(index, value);
}
inline void mail_del_all_type_ack::add_mail_uuids(::google::protobuf::uint64 value) {
  mail_uuids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
mail_del_all_type_ack::mail_uuids() const {
  return mail_uuids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
mail_del_all_type_ack::mutable_mail_uuids() {
  return &mail_uuids_;
}

// repeated uint64 fail_mail_uuids = 3;
inline int mail_del_all_type_ack::fail_mail_uuids_size() const {
  return fail_mail_uuids_.size();
}
inline void mail_del_all_type_ack::clear_fail_mail_uuids() {
  fail_mail_uuids_.Clear();
}
inline ::google::protobuf::uint64 mail_del_all_type_ack::fail_mail_uuids(int index) const {
  return fail_mail_uuids_.Get(index);
}
inline void mail_del_all_type_ack::set_fail_mail_uuids(int index, ::google::protobuf::uint64 value) {
  fail_mail_uuids_.Set(index, value);
}
inline void mail_del_all_type_ack::add_fail_mail_uuids(::google::protobuf::uint64 value) {
  fail_mail_uuids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
mail_del_all_type_ack::fail_mail_uuids() const {
  return fail_mail_uuids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
mail_del_all_type_ack::mutable_fail_mail_uuids() {
  return &fail_mail_uuids_;
}

// -------------------------------------------------------------------

// mail_set_multi_mail_status_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_set_multi_mail_status_req_id];
inline bool mail_set_multi_mail_status_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_set_multi_mail_status_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_set_multi_mail_status_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_set_multi_mail_status_req::clear_protoid() {
  protoid_ = 5962;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID mail_set_multi_mail_status_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void mail_set_multi_mail_status_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated uint64 mail_uuids = 2;
inline int mail_set_multi_mail_status_req::mail_uuids_size() const {
  return mail_uuids_.size();
}
inline void mail_set_multi_mail_status_req::clear_mail_uuids() {
  mail_uuids_.Clear();
}
inline ::google::protobuf::uint64 mail_set_multi_mail_status_req::mail_uuids(int index) const {
  return mail_uuids_.Get(index);
}
inline void mail_set_multi_mail_status_req::set_mail_uuids(int index, ::google::protobuf::uint64 value) {
  mail_uuids_.Set(index, value);
}
inline void mail_set_multi_mail_status_req::add_mail_uuids(::google::protobuf::uint64 value) {
  mail_uuids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
mail_set_multi_mail_status_req::mail_uuids() const {
  return mail_uuids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
mail_set_multi_mail_status_req::mutable_mail_uuids() {
  return &mail_uuids_;
}

// optional bool to_set_read = 3;
inline bool mail_set_multi_mail_status_req::has_to_set_read() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mail_set_multi_mail_status_req::set_has_to_set_read() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mail_set_multi_mail_status_req::clear_has_to_set_read() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mail_set_multi_mail_status_req::clear_to_set_read() {
  to_set_read_ = false;
  clear_has_to_set_read();
}
inline bool mail_set_multi_mail_status_req::to_set_read() const {
  return to_set_read_;
}
inline void mail_set_multi_mail_status_req::set_to_set_read(bool value) {
  set_has_to_set_read();
  to_set_read_ = value;
}

// optional bool to_set_attach_getted = 4;
inline bool mail_set_multi_mail_status_req::has_to_set_attach_getted() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mail_set_multi_mail_status_req::set_has_to_set_attach_getted() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mail_set_multi_mail_status_req::clear_has_to_set_attach_getted() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mail_set_multi_mail_status_req::clear_to_set_attach_getted() {
  to_set_attach_getted_ = false;
  clear_has_to_set_attach_getted();
}
inline bool mail_set_multi_mail_status_req::to_set_attach_getted() const {
  return to_set_attach_getted_;
}
inline void mail_set_multi_mail_status_req::set_to_set_attach_getted(bool value) {
  set_has_to_set_attach_getted();
  to_set_attach_getted_ = value;
}

// -------------------------------------------------------------------

// mail_set_multi_mail_status_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_set_multi_mail_status_ack_id];
inline bool mail_set_multi_mail_status_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_set_multi_mail_status_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_set_multi_mail_status_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_set_multi_mail_status_ack::clear_protoid() {
  protoid_ = 5963;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID mail_set_multi_mail_status_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void mail_set_multi_mail_status_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated uint64 mail_uuids = 2;
inline int mail_set_multi_mail_status_ack::mail_uuids_size() const {
  return mail_uuids_.size();
}
inline void mail_set_multi_mail_status_ack::clear_mail_uuids() {
  mail_uuids_.Clear();
}
inline ::google::protobuf::uint64 mail_set_multi_mail_status_ack::mail_uuids(int index) const {
  return mail_uuids_.Get(index);
}
inline void mail_set_multi_mail_status_ack::set_mail_uuids(int index, ::google::protobuf::uint64 value) {
  mail_uuids_.Set(index, value);
}
inline void mail_set_multi_mail_status_ack::add_mail_uuids(::google::protobuf::uint64 value) {
  mail_uuids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
mail_set_multi_mail_status_ack::mail_uuids() const {
  return mail_uuids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
mail_set_multi_mail_status_ack::mutable_mail_uuids() {
  return &mail_uuids_;
}

// optional bool to_set_read = 3;
inline bool mail_set_multi_mail_status_ack::has_to_set_read() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mail_set_multi_mail_status_ack::set_has_to_set_read() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mail_set_multi_mail_status_ack::clear_has_to_set_read() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mail_set_multi_mail_status_ack::clear_to_set_read() {
  to_set_read_ = false;
  clear_has_to_set_read();
}
inline bool mail_set_multi_mail_status_ack::to_set_read() const {
  return to_set_read_;
}
inline void mail_set_multi_mail_status_ack::set_to_set_read(bool value) {
  set_has_to_set_read();
  to_set_read_ = value;
}

// optional bool to_set_attach_getted = 4;
inline bool mail_set_multi_mail_status_ack::has_to_set_attach_getted() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mail_set_multi_mail_status_ack::set_has_to_set_attach_getted() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mail_set_multi_mail_status_ack::clear_has_to_set_attach_getted() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mail_set_multi_mail_status_ack::clear_to_set_attach_getted() {
  to_set_attach_getted_ = false;
  clear_has_to_set_attach_getted();
}
inline bool mail_set_multi_mail_status_ack::to_set_attach_getted() const {
  return to_set_attach_getted_;
}
inline void mail_set_multi_mail_status_ack::set_to_set_attach_getted(bool value) {
  set_has_to_set_attach_getted();
  to_set_attach_getted_ = value;
}

// repeated uint64 fail_mail_uuids = 5;
inline int mail_set_multi_mail_status_ack::fail_mail_uuids_size() const {
  return fail_mail_uuids_.size();
}
inline void mail_set_multi_mail_status_ack::clear_fail_mail_uuids() {
  fail_mail_uuids_.Clear();
}
inline ::google::protobuf::uint64 mail_set_multi_mail_status_ack::fail_mail_uuids(int index) const {
  return fail_mail_uuids_.Get(index);
}
inline void mail_set_multi_mail_status_ack::set_fail_mail_uuids(int index, ::google::protobuf::uint64 value) {
  fail_mail_uuids_.Set(index, value);
}
inline void mail_set_multi_mail_status_ack::add_fail_mail_uuids(::google::protobuf::uint64 value) {
  fail_mail_uuids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
mail_set_multi_mail_status_ack::fail_mail_uuids() const {
  return fail_mail_uuids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
mail_set_multi_mail_status_ack::mutable_fail_mail_uuids() {
  return &fail_mail_uuids_;
}

// optional .SProtoSpace.MsgErrorType rec_codes = 6;
inline bool mail_set_multi_mail_status_ack::has_rec_codes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mail_set_multi_mail_status_ack::set_has_rec_codes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mail_set_multi_mail_status_ack::clear_has_rec_codes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mail_set_multi_mail_status_ack::clear_rec_codes() {
  rec_codes_ = 0;
  clear_has_rec_codes();
}
inline ::SProtoSpace::MsgErrorType mail_set_multi_mail_status_ack::rec_codes() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(rec_codes_);
}
inline void mail_set_multi_mail_status_ack::set_rec_codes(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_rec_codes();
  rec_codes_ = value;
}

// -------------------------------------------------------------------

// mail_send_private_mail_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_req_id];
inline bool mail_send_private_mail_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_send_private_mail_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_send_private_mail_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_send_private_mail_req::clear_protoid() {
  protoid_ = 5964;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID mail_send_private_mail_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void mail_send_private_mail_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.mail_instance mail = 2;
inline bool mail_send_private_mail_req::has_mail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_send_private_mail_req::set_has_mail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_send_private_mail_req::clear_has_mail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_send_private_mail_req::clear_mail() {
  if (mail_ != NULL) mail_->::SProtoSpace::mail_instance::Clear();
  clear_has_mail();
}
inline const ::SProtoSpace::mail_instance& mail_send_private_mail_req::mail() const {
  return mail_ != NULL ? *mail_ : *default_instance_->mail_;
}
inline ::SProtoSpace::mail_instance* mail_send_private_mail_req::mutable_mail() {
  set_has_mail();
  if (mail_ == NULL) mail_ = new ::SProtoSpace::mail_instance;
  return mail_;
}
inline ::SProtoSpace::mail_instance* mail_send_private_mail_req::release_mail() {
  clear_has_mail();
  ::SProtoSpace::mail_instance* temp = mail_;
  mail_ = NULL;
  return temp;
}
inline void mail_send_private_mail_req::set_allocated_mail(::SProtoSpace::mail_instance* mail) {
  delete mail_;
  mail_ = mail;
  if (mail) {
    set_has_mail();
  } else {
    clear_has_mail();
  }
}

// optional string title = 3;
inline bool mail_send_private_mail_req::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mail_send_private_mail_req::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mail_send_private_mail_req::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mail_send_private_mail_req::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& mail_send_private_mail_req::title() const {
  return *title_;
}
inline void mail_send_private_mail_req::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void mail_send_private_mail_req::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void mail_send_private_mail_req::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_send_private_mail_req::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* mail_send_private_mail_req::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_send_private_mail_req::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 4;
inline bool mail_send_private_mail_req::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mail_send_private_mail_req::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mail_send_private_mail_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mail_send_private_mail_req::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& mail_send_private_mail_req::content() const {
  return *content_;
}
inline void mail_send_private_mail_req::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void mail_send_private_mail_req::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void mail_send_private_mail_req::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_send_private_mail_req::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* mail_send_private_mail_req::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_send_private_mail_req::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 to_role_id = 5;
inline bool mail_send_private_mail_req::has_to_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mail_send_private_mail_req::set_has_to_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mail_send_private_mail_req::clear_has_to_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mail_send_private_mail_req::clear_to_role_id() {
  to_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_role_id();
}
inline ::google::protobuf::uint64 mail_send_private_mail_req::to_role_id() const {
  return to_role_id_;
}
inline void mail_send_private_mail_req::set_to_role_id(::google::protobuf::uint64 value) {
  set_has_to_role_id();
  to_role_id_ = value;
}

// optional string to_role_name = 6;
inline bool mail_send_private_mail_req::has_to_role_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mail_send_private_mail_req::set_has_to_role_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mail_send_private_mail_req::clear_has_to_role_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mail_send_private_mail_req::clear_to_role_name() {
  if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
    to_role_name_->clear();
  }
  clear_has_to_role_name();
}
inline const ::std::string& mail_send_private_mail_req::to_role_name() const {
  return *to_role_name_;
}
inline void mail_send_private_mail_req::set_to_role_name(const ::std::string& value) {
  set_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    to_role_name_ = new ::std::string;
  }
  to_role_name_->assign(value);
}
inline void mail_send_private_mail_req::set_to_role_name(const char* value) {
  set_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    to_role_name_ = new ::std::string;
  }
  to_role_name_->assign(value);
}
inline void mail_send_private_mail_req::set_to_role_name(const char* value, size_t size) {
  set_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    to_role_name_ = new ::std::string;
  }
  to_role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_send_private_mail_req::mutable_to_role_name() {
  set_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    to_role_name_ = new ::std::string;
  }
  return to_role_name_;
}
inline ::std::string* mail_send_private_mail_req::release_to_role_name() {
  clear_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_role_name_;
    to_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_send_private_mail_req::set_allocated_to_role_name(::std::string* to_role_name) {
  if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_role_name_;
  }
  if (to_role_name) {
    set_has_to_role_name();
    to_role_name_ = to_role_name;
  } else {
    clear_has_to_role_name();
    to_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// mail_send_private_mail_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_ack_id];
inline bool mail_send_private_mail_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_send_private_mail_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_send_private_mail_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_send_private_mail_ack::clear_protoid() {
  protoid_ = 5965;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID mail_send_private_mail_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void mail_send_private_mail_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.MsgErrorType rec_code = 2;
inline bool mail_send_private_mail_ack::has_rec_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_send_private_mail_ack::set_has_rec_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_send_private_mail_ack::clear_has_rec_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_send_private_mail_ack::clear_rec_code() {
  rec_code_ = 0;
  clear_has_rec_code();
}
inline ::SProtoSpace::MsgErrorType mail_send_private_mail_ack::rec_code() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(rec_code_);
}
inline void mail_send_private_mail_ack::set_rec_code(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_rec_code();
  rec_code_ = value;
}

// -------------------------------------------------------------------

// mail_all_type_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_all_type_ntf_id];
inline bool mail_all_type_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_all_type_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_all_type_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_all_type_ntf::clear_protoid() {
  protoid_ = 5972;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID mail_all_type_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void mail_all_type_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.mail_instance mails = 2;
inline int mail_all_type_ntf::mails_size() const {
  return mails_.size();
}
inline void mail_all_type_ntf::clear_mails() {
  mails_.Clear();
}
inline const ::SProtoSpace::mail_instance& mail_all_type_ntf::mails(int index) const {
  return mails_.Get(index);
}
inline ::SProtoSpace::mail_instance* mail_all_type_ntf::mutable_mails(int index) {
  return mails_.Mutable(index);
}
inline ::SProtoSpace::mail_instance* mail_all_type_ntf::add_mails() {
  return mails_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::mail_instance >&
mail_all_type_ntf::mails() const {
  return mails_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::mail_instance >*
mail_all_type_ntf::mutable_mails() {
  return &mails_;
}

// -------------------------------------------------------------------

// mail_del_all_type_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_del_all_type_ntf_id];
inline bool mail_del_all_type_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_del_all_type_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_del_all_type_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_del_all_type_ntf::clear_protoid() {
  protoid_ = 5975;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID mail_del_all_type_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void mail_del_all_type_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated uint64 mail_uuids = 2;
inline int mail_del_all_type_ntf::mail_uuids_size() const {
  return mail_uuids_.size();
}
inline void mail_del_all_type_ntf::clear_mail_uuids() {
  mail_uuids_.Clear();
}
inline ::google::protobuf::uint64 mail_del_all_type_ntf::mail_uuids(int index) const {
  return mail_uuids_.Get(index);
}
inline void mail_del_all_type_ntf::set_mail_uuids(int index, ::google::protobuf::uint64 value) {
  mail_uuids_.Set(index, value);
}
inline void mail_del_all_type_ntf::add_mail_uuids(::google::protobuf::uint64 value) {
  mail_uuids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
mail_del_all_type_ntf::mail_uuids() const {
  return mail_uuids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
mail_del_all_type_ntf::mutable_mail_uuids() {
  return &mail_uuids_;
}

// -------------------------------------------------------------------

// mail_send_global_mail_debug_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_global_mail_debug_req_id];
inline bool mail_send_global_mail_debug_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_send_global_mail_debug_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_send_global_mail_debug_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_send_global_mail_debug_req::clear_protoid() {
  protoid_ = 5966;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID mail_send_global_mail_debug_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void mail_send_global_mail_debug_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 global_mail_config_id = 2;
inline bool mail_send_global_mail_debug_req::has_global_mail_config_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_send_global_mail_debug_req::set_has_global_mail_config_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_send_global_mail_debug_req::clear_has_global_mail_config_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_send_global_mail_debug_req::clear_global_mail_config_id() {
  global_mail_config_id_ = 0;
  clear_has_global_mail_config_id();
}
inline ::google::protobuf::int32 mail_send_global_mail_debug_req::global_mail_config_id() const {
  return global_mail_config_id_;
}
inline void mail_send_global_mail_debug_req::set_global_mail_config_id(::google::protobuf::int32 value) {
  set_has_global_mail_config_id();
  global_mail_config_id_ = value;
}

// -------------------------------------------------------------------

// mail_send_private_mail_debug_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_debug_req_id];
inline bool mail_send_private_mail_debug_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_send_private_mail_debug_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_send_private_mail_debug_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_send_private_mail_debug_req::clear_protoid() {
  protoid_ = 5976;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID mail_send_private_mail_debug_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void mail_send_private_mail_debug_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 is_send_private_mail = 3;
inline bool mail_send_private_mail_debug_req::has_is_send_private_mail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_send_private_mail_debug_req::set_has_is_send_private_mail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_send_private_mail_debug_req::clear_has_is_send_private_mail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_send_private_mail_debug_req::clear_is_send_private_mail() {
  is_send_private_mail_ = 0;
  clear_has_is_send_private_mail();
}
inline ::google::protobuf::int32 mail_send_private_mail_debug_req::is_send_private_mail() const {
  return is_send_private_mail_;
}
inline void mail_send_private_mail_debug_req::set_is_send_private_mail(::google::protobuf::int32 value) {
  set_has_is_send_private_mail();
  is_send_private_mail_ = value;
}

// optional int32 is_send_system_mail = 4;
inline bool mail_send_private_mail_debug_req::has_is_send_system_mail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mail_send_private_mail_debug_req::set_has_is_send_system_mail() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mail_send_private_mail_debug_req::clear_has_is_send_system_mail() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mail_send_private_mail_debug_req::clear_is_send_system_mail() {
  is_send_system_mail_ = 0;
  clear_has_is_send_system_mail();
}
inline ::google::protobuf::int32 mail_send_private_mail_debug_req::is_send_system_mail() const {
  return is_send_system_mail_;
}
inline void mail_send_private_mail_debug_req::set_is_send_system_mail(::google::protobuf::int32 value) {
  set_has_is_send_system_mail();
  is_send_system_mail_ = value;
}

// optional string to_role_name = 5;
inline bool mail_send_private_mail_debug_req::has_to_role_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mail_send_private_mail_debug_req::set_has_to_role_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mail_send_private_mail_debug_req::clear_has_to_role_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mail_send_private_mail_debug_req::clear_to_role_name() {
  if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
    to_role_name_->clear();
  }
  clear_has_to_role_name();
}
inline const ::std::string& mail_send_private_mail_debug_req::to_role_name() const {
  return *to_role_name_;
}
inline void mail_send_private_mail_debug_req::set_to_role_name(const ::std::string& value) {
  set_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    to_role_name_ = new ::std::string;
  }
  to_role_name_->assign(value);
}
inline void mail_send_private_mail_debug_req::set_to_role_name(const char* value) {
  set_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    to_role_name_ = new ::std::string;
  }
  to_role_name_->assign(value);
}
inline void mail_send_private_mail_debug_req::set_to_role_name(const char* value, size_t size) {
  set_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    to_role_name_ = new ::std::string;
  }
  to_role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_send_private_mail_debug_req::mutable_to_role_name() {
  set_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    to_role_name_ = new ::std::string;
  }
  return to_role_name_;
}
inline ::std::string* mail_send_private_mail_debug_req::release_to_role_name() {
  clear_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_role_name_;
    to_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_send_private_mail_debug_req::set_allocated_to_role_name(::std::string* to_role_name) {
  if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_role_name_;
  }
  if (to_role_name) {
    set_has_to_role_name();
    to_role_name_ = to_role_name;
  } else {
    clear_has_to_role_name();
    to_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 to_role_id = 6;
inline bool mail_send_private_mail_debug_req::has_to_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mail_send_private_mail_debug_req::set_has_to_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mail_send_private_mail_debug_req::clear_has_to_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mail_send_private_mail_debug_req::clear_to_role_id() {
  to_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_role_id();
}
inline ::google::protobuf::uint64 mail_send_private_mail_debug_req::to_role_id() const {
  return to_role_id_;
}
inline void mail_send_private_mail_debug_req::set_to_role_id(::google::protobuf::uint64 value) {
  set_has_to_role_id();
  to_role_id_ = value;
}

// repeated int32 item_ids = 7;
inline int mail_send_private_mail_debug_req::item_ids_size() const {
  return item_ids_.size();
}
inline void mail_send_private_mail_debug_req::clear_item_ids() {
  item_ids_.Clear();
}
inline ::google::protobuf::int32 mail_send_private_mail_debug_req::item_ids(int index) const {
  return item_ids_.Get(index);
}
inline void mail_send_private_mail_debug_req::set_item_ids(int index, ::google::protobuf::int32 value) {
  item_ids_.Set(index, value);
}
inline void mail_send_private_mail_debug_req::add_item_ids(::google::protobuf::int32 value) {
  item_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
mail_send_private_mail_debug_req::item_ids() const {
  return item_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
mail_send_private_mail_debug_req::mutable_item_ids() {
  return &item_ids_;
}

// repeated int32 item_counts = 8;
inline int mail_send_private_mail_debug_req::item_counts_size() const {
  return item_counts_.size();
}
inline void mail_send_private_mail_debug_req::clear_item_counts() {
  item_counts_.Clear();
}
inline ::google::protobuf::int32 mail_send_private_mail_debug_req::item_counts(int index) const {
  return item_counts_.Get(index);
}
inline void mail_send_private_mail_debug_req::set_item_counts(int index, ::google::protobuf::int32 value) {
  item_counts_.Set(index, value);
}
inline void mail_send_private_mail_debug_req::add_item_counts(::google::protobuf::int32 value) {
  item_counts_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
mail_send_private_mail_debug_req::item_counts() const {
  return item_counts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
mail_send_private_mail_debug_req::mutable_item_counts() {
  return &item_counts_;
}

// optional string title = 9;
inline bool mail_send_private_mail_debug_req::has_title() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mail_send_private_mail_debug_req::set_has_title() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mail_send_private_mail_debug_req::clear_has_title() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mail_send_private_mail_debug_req::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& mail_send_private_mail_debug_req::title() const {
  return *title_;
}
inline void mail_send_private_mail_debug_req::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void mail_send_private_mail_debug_req::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void mail_send_private_mail_debug_req::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_send_private_mail_debug_req::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* mail_send_private_mail_debug_req::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_send_private_mail_debug_req::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 10;
inline bool mail_send_private_mail_debug_req::has_content() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mail_send_private_mail_debug_req::set_has_content() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mail_send_private_mail_debug_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mail_send_private_mail_debug_req::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& mail_send_private_mail_debug_req::content() const {
  return *content_;
}
inline void mail_send_private_mail_debug_req::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void mail_send_private_mail_debug_req::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void mail_send_private_mail_debug_req::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_send_private_mail_debug_req::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* mail_send_private_mail_debug_req::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_send_private_mail_debug_req::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 config_id = 11;
inline bool mail_send_private_mail_debug_req::has_config_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void mail_send_private_mail_debug_req::set_has_config_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void mail_send_private_mail_debug_req::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void mail_send_private_mail_debug_req::clear_config_id() {
  config_id_ = 0;
  clear_has_config_id();
}
inline ::google::protobuf::int32 mail_send_private_mail_debug_req::config_id() const {
  return config_id_;
}
inline void mail_send_private_mail_debug_req::set_config_id(::google::protobuf::int32 value) {
  set_has_config_id();
  config_id_ = value;
}

// optional int32 is_public_server_test = 12;
inline bool mail_send_private_mail_debug_req::has_is_public_server_test() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void mail_send_private_mail_debug_req::set_has_is_public_server_test() {
  _has_bits_[0] |= 0x00000400u;
}
inline void mail_send_private_mail_debug_req::clear_has_is_public_server_test() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void mail_send_private_mail_debug_req::clear_is_public_server_test() {
  is_public_server_test_ = 0;
  clear_has_is_public_server_test();
}
inline ::google::protobuf::int32 mail_send_private_mail_debug_req::is_public_server_test() const {
  return is_public_server_test_;
}
inline void mail_send_private_mail_debug_req::set_is_public_server_test(::google::protobuf::int32 value) {
  set_has_is_public_server_test();
  is_public_server_test_ = value;
}

// -------------------------------------------------------------------

// mail_send_private_mail_debug_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_debug_ack_id];
inline bool mail_send_private_mail_debug_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_send_private_mail_debug_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_send_private_mail_debug_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_send_private_mail_debug_ack::clear_protoid() {
  protoid_ = 5977;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID mail_send_private_mail_debug_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void mail_send_private_mail_debug_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional sint32 rec_code = 2;
inline bool mail_send_private_mail_debug_ack::has_rec_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_send_private_mail_debug_ack::set_has_rec_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_send_private_mail_debug_ack::clear_has_rec_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_send_private_mail_debug_ack::clear_rec_code() {
  rec_code_ = 0;
  clear_has_rec_code();
}
inline ::google::protobuf::int32 mail_send_private_mail_debug_ack::rec_code() const {
  return rec_code_;
}
inline void mail_send_private_mail_debug_ack::set_rec_code(::google::protobuf::int32 value) {
  set_has_rec_code();
  rec_code_ = value;
}

// -------------------------------------------------------------------

// mail_send_global_mail_debug_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_global_mail_debug_ack_id];
inline bool mail_send_global_mail_debug_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_send_global_mail_debug_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_send_global_mail_debug_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_send_global_mail_debug_ack::clear_protoid() {
  protoid_ = 5967;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID mail_send_global_mail_debug_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void mail_send_global_mail_debug_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional sint32 rec_code = 2;
inline bool mail_send_global_mail_debug_ack::has_rec_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_send_global_mail_debug_ack::set_has_rec_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_send_global_mail_debug_ack::clear_has_rec_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_send_global_mail_debug_ack::clear_rec_code() {
  rec_code_ = 0;
  clear_has_rec_code();
}
inline ::google::protobuf::int32 mail_send_global_mail_debug_ack::rec_code() const {
  return rec_code_;
}
inline void mail_send_global_mail_debug_ack::set_rec_code(::google::protobuf::int32 value) {
  set_has_rec_code();
  rec_code_ = value;
}

// -------------------------------------------------------------------

// mail_send_group_mail_debug_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_group_mail_debug_req_id];
inline bool mail_send_group_mail_debug_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_send_group_mail_debug_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_send_group_mail_debug_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_send_group_mail_debug_req::clear_protoid() {
  protoid_ = 5968;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID mail_send_group_mail_debug_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void mail_send_group_mail_debug_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated uint64 group_mail_to_role_ids = 2;
inline int mail_send_group_mail_debug_req::group_mail_to_role_ids_size() const {
  return group_mail_to_role_ids_.size();
}
inline void mail_send_group_mail_debug_req::clear_group_mail_to_role_ids() {
  group_mail_to_role_ids_.Clear();
}
inline ::google::protobuf::uint64 mail_send_group_mail_debug_req::group_mail_to_role_ids(int index) const {
  return group_mail_to_role_ids_.Get(index);
}
inline void mail_send_group_mail_debug_req::set_group_mail_to_role_ids(int index, ::google::protobuf::uint64 value) {
  group_mail_to_role_ids_.Set(index, value);
}
inline void mail_send_group_mail_debug_req::add_group_mail_to_role_ids(::google::protobuf::uint64 value) {
  group_mail_to_role_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
mail_send_group_mail_debug_req::group_mail_to_role_ids() const {
  return group_mail_to_role_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
mail_send_group_mail_debug_req::mutable_group_mail_to_role_ids() {
  return &group_mail_to_role_ids_;
}

// optional int32 group_mail_config_id = 3;
inline bool mail_send_group_mail_debug_req::has_group_mail_config_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mail_send_group_mail_debug_req::set_has_group_mail_config_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mail_send_group_mail_debug_req::clear_has_group_mail_config_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mail_send_group_mail_debug_req::clear_group_mail_config_id() {
  group_mail_config_id_ = 0;
  clear_has_group_mail_config_id();
}
inline ::google::protobuf::int32 mail_send_group_mail_debug_req::group_mail_config_id() const {
  return group_mail_config_id_;
}
inline void mail_send_group_mail_debug_req::set_group_mail_config_id(::google::protobuf::int32 value) {
  set_has_group_mail_config_id();
  group_mail_config_id_ = value;
}

// -------------------------------------------------------------------

// mail_send_group_mail_debug_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_group_mail_debug_ack_id];
inline bool mail_send_group_mail_debug_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_send_group_mail_debug_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_send_group_mail_debug_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_send_group_mail_debug_ack::clear_protoid() {
  protoid_ = 5969;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID mail_send_group_mail_debug_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void mail_send_group_mail_debug_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional sint32 rec_code = 2;
inline bool mail_send_group_mail_debug_ack::has_rec_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_send_group_mail_debug_ack::set_has_rec_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_send_group_mail_debug_ack::clear_has_rec_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_send_group_mail_debug_ack::clear_rec_code() {
  rec_code_ = 0;
  clear_has_rec_code();
}
inline ::google::protobuf::int32 mail_send_group_mail_debug_ack::rec_code() const {
  return rec_code_;
}
inline void mail_send_group_mail_debug_ack::set_rec_code(::google::protobuf::int32 value) {
  set_has_rec_code();
  rec_code_ = value;
}

// -------------------------------------------------------------------

// mail_send_family_mail_debug_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_family_mail_debug_req_id];
inline bool mail_send_family_mail_debug_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_send_family_mail_debug_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_send_family_mail_debug_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_send_family_mail_debug_req::clear_protoid() {
  protoid_ = 5970;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID mail_send_family_mail_debug_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void mail_send_family_mail_debug_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 family_mail_family_id = 2;
inline bool mail_send_family_mail_debug_req::has_family_mail_family_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_send_family_mail_debug_req::set_has_family_mail_family_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_send_family_mail_debug_req::clear_has_family_mail_family_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_send_family_mail_debug_req::clear_family_mail_family_id() {
  family_mail_family_id_ = GOOGLE_ULONGLONG(0);
  clear_has_family_mail_family_id();
}
inline ::google::protobuf::uint64 mail_send_family_mail_debug_req::family_mail_family_id() const {
  return family_mail_family_id_;
}
inline void mail_send_family_mail_debug_req::set_family_mail_family_id(::google::protobuf::uint64 value) {
  set_has_family_mail_family_id();
  family_mail_family_id_ = value;
}

// optional int32 family_mail_config_id = 3;
inline bool mail_send_family_mail_debug_req::has_family_mail_config_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mail_send_family_mail_debug_req::set_has_family_mail_config_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mail_send_family_mail_debug_req::clear_has_family_mail_config_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mail_send_family_mail_debug_req::clear_family_mail_config_id() {
  family_mail_config_id_ = 0;
  clear_has_family_mail_config_id();
}
inline ::google::protobuf::int32 mail_send_family_mail_debug_req::family_mail_config_id() const {
  return family_mail_config_id_;
}
inline void mail_send_family_mail_debug_req::set_family_mail_config_id(::google::protobuf::int32 value) {
  set_has_family_mail_config_id();
  family_mail_config_id_ = value;
}

// -------------------------------------------------------------------

// mail_send_family_mail_debug_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_family_mail_debug_ack_id];
inline bool mail_send_family_mail_debug_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_send_family_mail_debug_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_send_family_mail_debug_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_send_family_mail_debug_ack::clear_protoid() {
  protoid_ = 5971;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID mail_send_family_mail_debug_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void mail_send_family_mail_debug_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional sint32 rec_code = 2;
inline bool mail_send_family_mail_debug_ack::has_rec_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_send_family_mail_debug_ack::set_has_rec_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_send_family_mail_debug_ack::clear_has_rec_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_send_family_mail_debug_ack::clear_rec_code() {
  rec_code_ = 0;
  clear_has_rec_code();
}
inline ::google::protobuf::int32 mail_send_family_mail_debug_ack::rec_code() const {
  return rec_code_;
}
inline void mail_send_family_mail_debug_ack::set_rec_code(::google::protobuf::int32 value) {
  set_has_rec_code();
  rec_code_ = value;
}

// -------------------------------------------------------------------

// del_cs_mul_mails_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = del_cs_mul_mails_req_id];
inline bool del_cs_mul_mails_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void del_cs_mul_mails_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void del_cs_mul_mails_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void del_cs_mul_mails_req::clear_protoid() {
  protoid_ = 5980;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID del_cs_mul_mails_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void del_cs_mul_mails_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated uint64 mail_id_s = 2;
inline int del_cs_mul_mails_req::mail_id_s_size() const {
  return mail_id_s_.size();
}
inline void del_cs_mul_mails_req::clear_mail_id_s() {
  mail_id_s_.Clear();
}
inline ::google::protobuf::uint64 del_cs_mul_mails_req::mail_id_s(int index) const {
  return mail_id_s_.Get(index);
}
inline void del_cs_mul_mails_req::set_mail_id_s(int index, ::google::protobuf::uint64 value) {
  mail_id_s_.Set(index, value);
}
inline void del_cs_mul_mails_req::add_mail_id_s(::google::protobuf::uint64 value) {
  mail_id_s_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
del_cs_mul_mails_req::mail_id_s() const {
  return mail_id_s_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
del_cs_mul_mails_req::mutable_mail_id_s() {
  return &mail_id_s_;
}

// -------------------------------------------------------------------

// del_cs_mul_mails_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = del_cs_mul_mails_ack_id];
inline bool del_cs_mul_mails_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void del_cs_mul_mails_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void del_cs_mul_mails_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void del_cs_mul_mails_ack::clear_protoid() {
  protoid_ = 5981;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID del_cs_mul_mails_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void del_cs_mul_mails_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated uint64 mail_id_s = 2;
inline int del_cs_mul_mails_ack::mail_id_s_size() const {
  return mail_id_s_.size();
}
inline void del_cs_mul_mails_ack::clear_mail_id_s() {
  mail_id_s_.Clear();
}
inline ::google::protobuf::uint64 del_cs_mul_mails_ack::mail_id_s(int index) const {
  return mail_id_s_.Get(index);
}
inline void del_cs_mul_mails_ack::set_mail_id_s(int index, ::google::protobuf::uint64 value) {
  mail_id_s_.Set(index, value);
}
inline void del_cs_mul_mails_ack::add_mail_id_s(::google::protobuf::uint64 value) {
  mail_id_s_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
del_cs_mul_mails_ack::mail_id_s() const {
  return mail_id_s_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
del_cs_mul_mails_ack::mutable_mail_id_s() {
  return &mail_id_s_;
}

// optional .SProtoSpace.MsgErrorType error = 3;
inline bool del_cs_mul_mails_ack::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void del_cs_mul_mails_ack::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void del_cs_mul_mails_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void del_cs_mul_mails_ack::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::SProtoSpace::MsgErrorType del_cs_mul_mails_ack::error() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_);
}
inline void del_cs_mul_mails_ack::set_error(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error();
  error_ = value;
}

// -------------------------------------------------------------------

// del_cs_mails_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = del_cs_mails_ntf_id];
inline bool del_cs_mails_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void del_cs_mails_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void del_cs_mails_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void del_cs_mails_ntf::clear_protoid() {
  protoid_ = 5989;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID del_cs_mails_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void del_cs_mails_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated uint64 mail_id_s = 2;
inline int del_cs_mails_ntf::mail_id_s_size() const {
  return mail_id_s_.size();
}
inline void del_cs_mails_ntf::clear_mail_id_s() {
  mail_id_s_.Clear();
}
inline ::google::protobuf::uint64 del_cs_mails_ntf::mail_id_s(int index) const {
  return mail_id_s_.Get(index);
}
inline void del_cs_mails_ntf::set_mail_id_s(int index, ::google::protobuf::uint64 value) {
  mail_id_s_.Set(index, value);
}
inline void del_cs_mails_ntf::add_mail_id_s(::google::protobuf::uint64 value) {
  mail_id_s_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
del_cs_mails_ntf::mail_id_s() const {
  return mail_id_s_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
del_cs_mails_ntf::mutable_mail_id_s() {
  return &mail_id_s_;
}

// -------------------------------------------------------------------

// sync_cs_mul_mails_state_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = sync_cs_mul_mails_state_req_id];
inline bool sync_cs_mul_mails_state_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sync_cs_mul_mails_state_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sync_cs_mul_mails_state_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sync_cs_mul_mails_state_req::clear_protoid() {
  protoid_ = 5982;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID sync_cs_mul_mails_state_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void sync_cs_mul_mails_state_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated uint64 mail_id_s = 2;
inline int sync_cs_mul_mails_state_req::mail_id_s_size() const {
  return mail_id_s_.size();
}
inline void sync_cs_mul_mails_state_req::clear_mail_id_s() {
  mail_id_s_.Clear();
}
inline ::google::protobuf::uint64 sync_cs_mul_mails_state_req::mail_id_s(int index) const {
  return mail_id_s_.Get(index);
}
inline void sync_cs_mul_mails_state_req::set_mail_id_s(int index, ::google::protobuf::uint64 value) {
  mail_id_s_.Set(index, value);
}
inline void sync_cs_mul_mails_state_req::add_mail_id_s(::google::protobuf::uint64 value) {
  mail_id_s_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
sync_cs_mul_mails_state_req::mail_id_s() const {
  return mail_id_s_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
sync_cs_mul_mails_state_req::mutable_mail_id_s() {
  return &mail_id_s_;
}

// optional bool read_state = 3;
inline bool sync_cs_mul_mails_state_req::has_read_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sync_cs_mul_mails_state_req::set_has_read_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sync_cs_mul_mails_state_req::clear_has_read_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sync_cs_mul_mails_state_req::clear_read_state() {
  read_state_ = false;
  clear_has_read_state();
}
inline bool sync_cs_mul_mails_state_req::read_state() const {
  return read_state_;
}
inline void sync_cs_mul_mails_state_req::set_read_state(bool value) {
  set_has_read_state();
  read_state_ = value;
}

// optional bool get_attach_state = 4;
inline bool sync_cs_mul_mails_state_req::has_get_attach_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sync_cs_mul_mails_state_req::set_has_get_attach_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sync_cs_mul_mails_state_req::clear_has_get_attach_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sync_cs_mul_mails_state_req::clear_get_attach_state() {
  get_attach_state_ = false;
  clear_has_get_attach_state();
}
inline bool sync_cs_mul_mails_state_req::get_attach_state() const {
  return get_attach_state_;
}
inline void sync_cs_mul_mails_state_req::set_get_attach_state(bool value) {
  set_has_get_attach_state();
  get_attach_state_ = value;
}

// -------------------------------------------------------------------

// sync_cs_mul_mails_state_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = sync_cs_mul_mails_state_ack_id];
inline bool sync_cs_mul_mails_state_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sync_cs_mul_mails_state_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sync_cs_mul_mails_state_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sync_cs_mul_mails_state_ack::clear_protoid() {
  protoid_ = 5983;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID sync_cs_mul_mails_state_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void sync_cs_mul_mails_state_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated uint64 mail_id_s = 2;
inline int sync_cs_mul_mails_state_ack::mail_id_s_size() const {
  return mail_id_s_.size();
}
inline void sync_cs_mul_mails_state_ack::clear_mail_id_s() {
  mail_id_s_.Clear();
}
inline ::google::protobuf::uint64 sync_cs_mul_mails_state_ack::mail_id_s(int index) const {
  return mail_id_s_.Get(index);
}
inline void sync_cs_mul_mails_state_ack::set_mail_id_s(int index, ::google::protobuf::uint64 value) {
  mail_id_s_.Set(index, value);
}
inline void sync_cs_mul_mails_state_ack::add_mail_id_s(::google::protobuf::uint64 value) {
  mail_id_s_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
sync_cs_mul_mails_state_ack::mail_id_s() const {
  return mail_id_s_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
sync_cs_mul_mails_state_ack::mutable_mail_id_s() {
  return &mail_id_s_;
}

// optional .SProtoSpace.MsgErrorType error = 3;
inline bool sync_cs_mul_mails_state_ack::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sync_cs_mul_mails_state_ack::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sync_cs_mul_mails_state_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sync_cs_mul_mails_state_ack::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::SProtoSpace::MsgErrorType sync_cs_mul_mails_state_ack::error() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_);
}
inline void sync_cs_mul_mails_state_ack::set_error(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error();
  error_ = value;
}

// optional bool read_state = 4;
inline bool sync_cs_mul_mails_state_ack::has_read_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sync_cs_mul_mails_state_ack::set_has_read_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sync_cs_mul_mails_state_ack::clear_has_read_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sync_cs_mul_mails_state_ack::clear_read_state() {
  read_state_ = false;
  clear_has_read_state();
}
inline bool sync_cs_mul_mails_state_ack::read_state() const {
  return read_state_;
}
inline void sync_cs_mul_mails_state_ack::set_read_state(bool value) {
  set_has_read_state();
  read_state_ = value;
}

// optional bool get_attach_state = 5;
inline bool sync_cs_mul_mails_state_ack::has_get_attach_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sync_cs_mul_mails_state_ack::set_has_get_attach_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sync_cs_mul_mails_state_ack::clear_has_get_attach_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sync_cs_mul_mails_state_ack::clear_get_attach_state() {
  get_attach_state_ = false;
  clear_has_get_attach_state();
}
inline bool sync_cs_mul_mails_state_ack::get_attach_state() const {
  return get_attach_state_;
}
inline void sync_cs_mul_mails_state_ack::set_get_attach_state(bool value) {
  set_has_get_attach_state();
  get_attach_state_ = value;
}

// -------------------------------------------------------------------

// get_all_mail_cs_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_mail_cs_req_id];
inline bool get_all_mail_cs_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_all_mail_cs_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_all_mail_cs_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_all_mail_cs_req::clear_protoid() {
  protoid_ = 5984;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_all_mail_cs_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_all_mail_cs_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// get_all_mail_cs_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_mail_cs_ack_id];
inline bool get_all_mail_cs_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_all_mail_cs_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_all_mail_cs_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_all_mail_cs_ack::clear_protoid() {
  protoid_ = 5985;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_all_mail_cs_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_all_mail_cs_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.mail mails = 2;
inline int get_all_mail_cs_ack::mails_size() const {
  return mails_.size();
}
inline void get_all_mail_cs_ack::clear_mails() {
  mails_.Clear();
}
inline const ::SProtoSpace::mail& get_all_mail_cs_ack::mails(int index) const {
  return mails_.Get(index);
}
inline ::SProtoSpace::mail* get_all_mail_cs_ack::mutable_mails(int index) {
  return mails_.Mutable(index);
}
inline ::SProtoSpace::mail* get_all_mail_cs_ack::add_mails() {
  return mails_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::mail >&
get_all_mail_cs_ack::mails() const {
  return mails_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::mail >*
get_all_mail_cs_ack::mutable_mails() {
  return &mails_;
}

// optional .SProtoSpace.MsgErrorType error = 3;
inline bool get_all_mail_cs_ack::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_all_mail_cs_ack::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_all_mail_cs_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_all_mail_cs_ack::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::SProtoSpace::MsgErrorType get_all_mail_cs_ack::error() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_);
}
inline void get_all_mail_cs_ack::set_error(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error();
  error_ = value;
}

// -------------------------------------------------------------------

// get_all_mail_cs_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_mail_cs_ntf_id];
inline bool get_all_mail_cs_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_all_mail_cs_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_all_mail_cs_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_all_mail_cs_ntf::clear_protoid() {
  protoid_ = 5986;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_all_mail_cs_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_all_mail_cs_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.mail mails = 2;
inline int get_all_mail_cs_ntf::mails_size() const {
  return mails_.size();
}
inline void get_all_mail_cs_ntf::clear_mails() {
  mails_.Clear();
}
inline const ::SProtoSpace::mail& get_all_mail_cs_ntf::mails(int index) const {
  return mails_.Get(index);
}
inline ::SProtoSpace::mail* get_all_mail_cs_ntf::mutable_mails(int index) {
  return mails_.Mutable(index);
}
inline ::SProtoSpace::mail* get_all_mail_cs_ntf::add_mails() {
  return mails_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::mail >&
get_all_mail_cs_ntf::mails() const {
  return mails_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::mail >*
get_all_mail_cs_ntf::mutable_mails() {
  return &mails_;
}

// repeated uint64 del_mail_ids = 3;
inline int get_all_mail_cs_ntf::del_mail_ids_size() const {
  return del_mail_ids_.size();
}
inline void get_all_mail_cs_ntf::clear_del_mail_ids() {
  del_mail_ids_.Clear();
}
inline ::google::protobuf::uint64 get_all_mail_cs_ntf::del_mail_ids(int index) const {
  return del_mail_ids_.Get(index);
}
inline void get_all_mail_cs_ntf::set_del_mail_ids(int index, ::google::protobuf::uint64 value) {
  del_mail_ids_.Set(index, value);
}
inline void get_all_mail_cs_ntf::add_del_mail_ids(::google::protobuf::uint64 value) {
  del_mail_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
get_all_mail_cs_ntf::del_mail_ids() const {
  return del_mail_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
get_all_mail_cs_ntf::mutable_del_mail_ids() {
  return &del_mail_ids_;
}

// -------------------------------------------------------------------

// send_mail_cs_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = send_mail_cs_req_id];
inline bool send_mail_cs_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void send_mail_cs_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void send_mail_cs_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void send_mail_cs_req::clear_protoid() {
  protoid_ = 5987;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID send_mail_cs_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void send_mail_cs_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 to_role_id = 2;
inline bool send_mail_cs_req::has_to_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void send_mail_cs_req::set_has_to_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void send_mail_cs_req::clear_has_to_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void send_mail_cs_req::clear_to_role_id() {
  to_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_role_id();
}
inline ::google::protobuf::uint64 send_mail_cs_req::to_role_id() const {
  return to_role_id_;
}
inline void send_mail_cs_req::set_to_role_id(::google::protobuf::uint64 value) {
  set_has_to_role_id();
  to_role_id_ = value;
}

// optional string to_role_name = 3;
inline bool send_mail_cs_req::has_to_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void send_mail_cs_req::set_has_to_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void send_mail_cs_req::clear_has_to_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void send_mail_cs_req::clear_to_role_name() {
  if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
    to_role_name_->clear();
  }
  clear_has_to_role_name();
}
inline const ::std::string& send_mail_cs_req::to_role_name() const {
  return *to_role_name_;
}
inline void send_mail_cs_req::set_to_role_name(const ::std::string& value) {
  set_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    to_role_name_ = new ::std::string;
  }
  to_role_name_->assign(value);
}
inline void send_mail_cs_req::set_to_role_name(const char* value) {
  set_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    to_role_name_ = new ::std::string;
  }
  to_role_name_->assign(value);
}
inline void send_mail_cs_req::set_to_role_name(const char* value, size_t size) {
  set_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    to_role_name_ = new ::std::string;
  }
  to_role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* send_mail_cs_req::mutable_to_role_name() {
  set_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    to_role_name_ = new ::std::string;
  }
  return to_role_name_;
}
inline ::std::string* send_mail_cs_req::release_to_role_name() {
  clear_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_role_name_;
    to_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void send_mail_cs_req::set_allocated_to_role_name(::std::string* to_role_name) {
  if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_role_name_;
  }
  if (to_role_name) {
    set_has_to_role_name();
    to_role_name_ = to_role_name;
  } else {
    clear_has_to_role_name();
    to_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string title = 4;
inline bool send_mail_cs_req::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void send_mail_cs_req::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void send_mail_cs_req::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void send_mail_cs_req::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& send_mail_cs_req::title() const {
  return *title_;
}
inline void send_mail_cs_req::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void send_mail_cs_req::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void send_mail_cs_req::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* send_mail_cs_req::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* send_mail_cs_req::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void send_mail_cs_req::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 5;
inline bool send_mail_cs_req::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void send_mail_cs_req::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void send_mail_cs_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void send_mail_cs_req::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& send_mail_cs_req::content() const {
  return *content_;
}
inline void send_mail_cs_req::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void send_mail_cs_req::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void send_mail_cs_req::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* send_mail_cs_req::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* send_mail_cs_req::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void send_mail_cs_req::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .SProtoSpace.eSendMailType type = 6;
inline bool send_mail_cs_req::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void send_mail_cs_req::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void send_mail_cs_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void send_mail_cs_req::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::SProtoSpace::eSendMailType send_mail_cs_req::type() const {
  return static_cast< ::SProtoSpace::eSendMailType >(type_);
}
inline void send_mail_cs_req::set_type(::SProtoSpace::eSendMailType value) {
  assert(::SProtoSpace::eSendMailType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// send_mail_cs_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = send_mail_cs_ack_id];
inline bool send_mail_cs_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void send_mail_cs_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void send_mail_cs_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void send_mail_cs_ack::clear_protoid() {
  protoid_ = 5988;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID send_mail_cs_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void send_mail_cs_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.mail mail = 2;
inline bool send_mail_cs_ack::has_mail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void send_mail_cs_ack::set_has_mail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void send_mail_cs_ack::clear_has_mail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void send_mail_cs_ack::clear_mail() {
  if (mail_ != NULL) mail_->::SProtoSpace::mail::Clear();
  clear_has_mail();
}
inline const ::SProtoSpace::mail& send_mail_cs_ack::mail() const {
  return mail_ != NULL ? *mail_ : *default_instance_->mail_;
}
inline ::SProtoSpace::mail* send_mail_cs_ack::mutable_mail() {
  set_has_mail();
  if (mail_ == NULL) mail_ = new ::SProtoSpace::mail;
  return mail_;
}
inline ::SProtoSpace::mail* send_mail_cs_ack::release_mail() {
  clear_has_mail();
  ::SProtoSpace::mail* temp = mail_;
  mail_ = NULL;
  return temp;
}
inline void send_mail_cs_ack::set_allocated_mail(::SProtoSpace::mail* mail) {
  delete mail_;
  mail_ = mail;
  if (mail) {
    set_has_mail();
  } else {
    clear_has_mail();
  }
}

// optional .SProtoSpace.MsgErrorType error = 3;
inline bool send_mail_cs_ack::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void send_mail_cs_ack::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void send_mail_cs_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void send_mail_cs_ack::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::SProtoSpace::MsgErrorType send_mail_cs_ack::error() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_);
}
inline void send_mail_cs_ack::set_error(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error();
  error_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_5fmail_2eproto__INCLUDED
