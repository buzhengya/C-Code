// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_chat.proto

#ifndef PROTOBUF_cs_5fchat_2eproto__INCLUDED
#define PROTOBUF_cs_5fchat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "cs_protoid.pb.h"
#include "cm_socialtype.pb.h"
#include "cm_roletype.pb.h"
#include "cs_errorcode.pb.h"
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_5fchat_2eproto();
void protobuf_AssignDesc_cs_5fchat_2eproto();
void protobuf_ShutdownFile_cs_5fchat_2eproto();

class chat_system_info_ntf;
class chat_world_req;
class chat_world_ntf;
class chat_team_req;
class chat_team_ntf;
class chat_family_req;
class chat_family_ntf;
class chat_private_req;
class chat_private_ntf;
class chat_world_channel_change_req;
class chat_world_channel_change_ack;
class chat_world_channel_random_nft;
class chat_broadcast_all_area_req;
class chat_broadcast_all_area_ack;
class chat_broadcast_all_area_ntf;
class chat_pack_ntf_world;
class chat_pack_ntf;
class marquee_all_type_ntf;
class marquee_common;
class marquee_flower;
class marquee_debug_req;
class chat_req;
class chat_ack;
class barrage_get_cs_req;
class barrage_get_cs_ack;
class barrage_send_cs_req;
class barrage_send_cs_ack;

enum EChatDefine {
  CHAT_CONTENT_MAX_SIZE_PRIVATE = 300,
  CHAT_CONTENT_MAX_SIZE_TEAM = 300,
  CHAT_CONTENT_MAX_SIZE_FAMILY = 300,
  CHAT_CONTENT_MAX_SIZE_WORLD = 300,
  CHAT_INTERVAL_MIN_TIME_PRIVATE = 1000,
  CHAT_INTERVAL_MIN_TIME_TEAM = 1000,
  CHAT_INTERVAL_MIN_TIME_FAMILY = 1000,
  CHAT_INTERVAL_MIN_TIME_WORLD = 1000,
  CHAT_INTERVAL_MIN_TIME_WORLD_CHANGE_CHANNEL = 1000
};
bool EChatDefine_IsValid(int value);
const EChatDefine EChatDefine_MIN = CHAT_CONTENT_MAX_SIZE_PRIVATE;
const EChatDefine EChatDefine_MAX = CHAT_INTERVAL_MIN_TIME_PRIVATE;
const int EChatDefine_ARRAYSIZE = EChatDefine_MAX + 1;

const ::google::protobuf::EnumDescriptor* EChatDefine_descriptor();
inline const ::std::string& EChatDefine_Name(EChatDefine value) {
  return ::google::protobuf::internal::NameOfEnum(
    EChatDefine_descriptor(), value);
}
inline bool EChatDefine_Parse(
    const ::std::string& name, EChatDefine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EChatDefine>(
    EChatDefine_descriptor(), name, value);
}
enum eMarqueeSystemType {
  MARQUEE_SYSTEM_NONE = 0,
  MARQUEE_SYSTEM_SERVER_STATUS = 1,
  MARQUEE_SYSTEM_OTHERS = 2
};
bool eMarqueeSystemType_IsValid(int value);
const eMarqueeSystemType eMarqueeSystemType_MIN = MARQUEE_SYSTEM_NONE;
const eMarqueeSystemType eMarqueeSystemType_MAX = MARQUEE_SYSTEM_OTHERS;
const int eMarqueeSystemType_ARRAYSIZE = eMarqueeSystemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eMarqueeSystemType_descriptor();
inline const ::std::string& eMarqueeSystemType_Name(eMarqueeSystemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eMarqueeSystemType_descriptor(), value);
}
inline bool eMarqueeSystemType_Parse(
    const ::std::string& name, eMarqueeSystemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eMarqueeSystemType>(
    eMarqueeSystemType_descriptor(), name, value);
}
// ===================================================================

class chat_system_info_ntf : public ::google::protobuf::Message {
 public:
  chat_system_info_ntf();
  virtual ~chat_system_info_ntf();

  chat_system_info_ntf(const chat_system_info_ntf& from);

  inline chat_system_info_ntf& operator=(const chat_system_info_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_system_info_ntf& default_instance();

  void Swap(chat_system_info_ntf* other);

  // implements Message ----------------------------------------------

  chat_system_info_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_system_info_ntf& from);
  void MergeFrom(const chat_system_info_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_system_info_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 info_type = 2;
  inline bool has_info_type() const;
  inline void clear_info_type();
  static const int kInfoTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 info_type() const;
  inline void set_info_type(::google::protobuf::uint32 value);

  // optional uint32 info_priority = 3;
  inline bool has_info_priority() const;
  inline void clear_info_priority();
  static const int kInfoPriorityFieldNumber = 3;
  inline ::google::protobuf::uint32 info_priority() const;
  inline void set_info_priority(::google::protobuf::uint32 value);

  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_system_info_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_info_type();
  inline void clear_has_info_type();
  inline void set_has_info_priority();
  inline void clear_has_info_priority();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 info_type_;
  ::std::string* content_;
  ::google::protobuf::uint32 info_priority_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_system_info_ntf* default_instance_;
};
// -------------------------------------------------------------------

class chat_world_req : public ::google::protobuf::Message {
 public:
  chat_world_req();
  virtual ~chat_world_req();

  chat_world_req(const chat_world_req& from);

  inline chat_world_req& operator=(const chat_world_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_world_req& default_instance();

  void Swap(chat_world_req* other);

  // implements Message ----------------------------------------------

  chat_world_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_world_req& from);
  void MergeFrom(const chat_world_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string role_avatar_url = 4;
  inline bool has_role_avatar_url() const;
  inline void clear_role_avatar_url();
  static const int kRoleAvatarUrlFieldNumber = 4;
  inline const ::std::string& role_avatar_url() const;
  inline void set_role_avatar_url(const ::std::string& value);
  inline void set_role_avatar_url(const char* value);
  inline void set_role_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_role_avatar_url();
  inline ::std::string* release_role_avatar_url();
  inline void set_allocated_role_avatar_url(::std::string* role_avatar_url);

  // optional uint32 world_channel_id = 5;
  inline bool has_world_channel_id() const;
  inline void clear_world_channel_id();
  static const int kWorldChannelIdFieldNumber = 5;
  inline ::google::protobuf::uint32 world_channel_id() const;
  inline void set_world_channel_id(::google::protobuf::uint32 value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 gender_id = 7;
  inline bool has_gender_id() const;
  inline void clear_gender_id();
  static const int kGenderIdFieldNumber = 7;
  inline ::google::protobuf::int32 gender_id() const;
  inline void set_gender_id(::google::protobuf::int32 value);

  // optional uint32 avatar_box_id = 8;
  inline bool has_avatar_box_id() const;
  inline void clear_avatar_box_id();
  static const int kAvatarBoxIdFieldNumber = 8;
  inline ::google::protobuf::uint32 avatar_box_id() const;
  inline void set_avatar_box_id(::google::protobuf::uint32 value);

  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint32 officer_grade = 10;
  inline bool has_officer_grade() const;
  inline void clear_officer_grade();
  static const int kOfficerGradeFieldNumber = 10;
  inline ::google::protobuf::uint32 officer_grade() const;
  inline void set_officer_grade(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_world_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_avatar_url();
  inline void clear_has_role_avatar_url();
  inline void set_has_world_channel_id();
  inline void clear_has_world_channel_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gender_id();
  inline void clear_has_gender_id();
  inline void set_has_avatar_box_id();
  inline void clear_has_avatar_box_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_officer_grade();
  inline void clear_has_officer_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  int protoid_;
  ::google::protobuf::uint32 world_channel_id_;
  ::std::string* role_avatar_url_;
  ::std::string* content_;
  ::google::protobuf::int32 gender_id_;
  ::google::protobuf::uint32 avatar_box_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint32 officer_grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_world_req* default_instance_;
};
// -------------------------------------------------------------------

class chat_world_ntf : public ::google::protobuf::Message {
 public:
  chat_world_ntf();
  virtual ~chat_world_ntf();

  chat_world_ntf(const chat_world_ntf& from);

  inline chat_world_ntf& operator=(const chat_world_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_world_ntf& default_instance();

  void Swap(chat_world_ntf* other);

  // implements Message ----------------------------------------------

  chat_world_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_world_ntf& from);
  void MergeFrom(const chat_world_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string role_avatar_url = 4;
  inline bool has_role_avatar_url() const;
  inline void clear_role_avatar_url();
  static const int kRoleAvatarUrlFieldNumber = 4;
  inline const ::std::string& role_avatar_url() const;
  inline void set_role_avatar_url(const ::std::string& value);
  inline void set_role_avatar_url(const char* value);
  inline void set_role_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_role_avatar_url();
  inline ::std::string* release_role_avatar_url();
  inline void set_allocated_role_avatar_url(::std::string* role_avatar_url);

  // optional uint32 world_channel_id = 5;
  inline bool has_world_channel_id() const;
  inline void clear_world_channel_id();
  static const int kWorldChannelIdFieldNumber = 5;
  inline ::google::protobuf::uint32 world_channel_id() const;
  inline void set_world_channel_id(::google::protobuf::uint32 value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 gender_id = 7;
  inline bool has_gender_id() const;
  inline void clear_gender_id();
  static const int kGenderIdFieldNumber = 7;
  inline ::google::protobuf::int32 gender_id() const;
  inline void set_gender_id(::google::protobuf::int32 value);

  // optional uint32 avatar_box_id = 8;
  inline bool has_avatar_box_id() const;
  inline void clear_avatar_box_id();
  static const int kAvatarBoxIdFieldNumber = 8;
  inline ::google::protobuf::uint32 avatar_box_id() const;
  inline void set_avatar_box_id(::google::protobuf::uint32 value);

  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint32 officer_grade = 10;
  inline bool has_officer_grade() const;
  inline void clear_officer_grade();
  static const int kOfficerGradeFieldNumber = 10;
  inline ::google::protobuf::uint32 officer_grade() const;
  inline void set_officer_grade(::google::protobuf::uint32 value);

  // optional .SProtoSpace.eWorldChatType world_chat_type = 11;
  inline bool has_world_chat_type() const;
  inline void clear_world_chat_type();
  static const int kWorldChatTypeFieldNumber = 11;
  inline ::SProtoSpace::eWorldChatType world_chat_type() const;
  inline void set_world_chat_type(::SProtoSpace::eWorldChatType value);

  // optional uint64 event_data = 12;
  inline bool has_event_data() const;
  inline void clear_event_data();
  static const int kEventDataFieldNumber = 12;
  inline ::google::protobuf::uint64 event_data() const;
  inline void set_event_data(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_world_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_avatar_url();
  inline void clear_has_role_avatar_url();
  inline void set_has_world_channel_id();
  inline void clear_has_world_channel_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gender_id();
  inline void clear_has_gender_id();
  inline void set_has_avatar_box_id();
  inline void clear_has_avatar_box_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_officer_grade();
  inline void clear_has_officer_grade();
  inline void set_has_world_chat_type();
  inline void clear_has_world_chat_type();
  inline void set_has_event_data();
  inline void clear_has_event_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  int protoid_;
  ::google::protobuf::uint32 world_channel_id_;
  ::std::string* role_avatar_url_;
  ::std::string* content_;
  ::google::protobuf::int32 gender_id_;
  ::google::protobuf::uint32 avatar_box_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint32 officer_grade_;
  ::google::protobuf::uint64 event_data_;
  int world_chat_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_world_ntf* default_instance_;
};
// -------------------------------------------------------------------

class chat_team_req : public ::google::protobuf::Message {
 public:
  chat_team_req();
  virtual ~chat_team_req();

  chat_team_req(const chat_team_req& from);

  inline chat_team_req& operator=(const chat_team_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_team_req& default_instance();

  void Swap(chat_team_req* other);

  // implements Message ----------------------------------------------

  chat_team_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_team_req& from);
  void MergeFrom(const chat_team_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_team_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string role_avatar_url = 4;
  inline bool has_role_avatar_url() const;
  inline void clear_role_avatar_url();
  static const int kRoleAvatarUrlFieldNumber = 4;
  inline const ::std::string& role_avatar_url() const;
  inline void set_role_avatar_url(const ::std::string& value);
  inline void set_role_avatar_url(const char* value);
  inline void set_role_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_role_avatar_url();
  inline ::std::string* release_role_avatar_url();
  inline void set_allocated_role_avatar_url(::std::string* role_avatar_url);

  // optional uint32 team_id = 5;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 5;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 gender_id = 7;
  inline bool has_gender_id() const;
  inline void clear_gender_id();
  static const int kGenderIdFieldNumber = 7;
  inline ::google::protobuf::int32 gender_id() const;
  inline void set_gender_id(::google::protobuf::int32 value);

  // optional uint32 avatar_box_id = 8;
  inline bool has_avatar_box_id() const;
  inline void clear_avatar_box_id();
  static const int kAvatarBoxIdFieldNumber = 8;
  inline ::google::protobuf::uint32 avatar_box_id() const;
  inline void set_avatar_box_id(::google::protobuf::uint32 value);

  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint32 officer_grade = 10;
  inline bool has_officer_grade() const;
  inline void clear_officer_grade();
  static const int kOfficerGradeFieldNumber = 10;
  inline ::google::protobuf::uint32 officer_grade() const;
  inline void set_officer_grade(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_team_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_avatar_url();
  inline void clear_has_role_avatar_url();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gender_id();
  inline void clear_has_gender_id();
  inline void set_has_avatar_box_id();
  inline void clear_has_avatar_box_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_officer_grade();
  inline void clear_has_officer_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  int protoid_;
  ::google::protobuf::uint32 team_id_;
  ::std::string* role_avatar_url_;
  ::std::string* content_;
  ::google::protobuf::int32 gender_id_;
  ::google::protobuf::uint32 avatar_box_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint32 officer_grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_team_req* default_instance_;
};
// -------------------------------------------------------------------

class chat_team_ntf : public ::google::protobuf::Message {
 public:
  chat_team_ntf();
  virtual ~chat_team_ntf();

  chat_team_ntf(const chat_team_ntf& from);

  inline chat_team_ntf& operator=(const chat_team_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_team_ntf& default_instance();

  void Swap(chat_team_ntf* other);

  // implements Message ----------------------------------------------

  chat_team_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_team_ntf& from);
  void MergeFrom(const chat_team_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_team_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string role_avatar_url = 4;
  inline bool has_role_avatar_url() const;
  inline void clear_role_avatar_url();
  static const int kRoleAvatarUrlFieldNumber = 4;
  inline const ::std::string& role_avatar_url() const;
  inline void set_role_avatar_url(const ::std::string& value);
  inline void set_role_avatar_url(const char* value);
  inline void set_role_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_role_avatar_url();
  inline ::std::string* release_role_avatar_url();
  inline void set_allocated_role_avatar_url(::std::string* role_avatar_url);

  // optional uint32 team_id = 5;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 5;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 gender_id = 7;
  inline bool has_gender_id() const;
  inline void clear_gender_id();
  static const int kGenderIdFieldNumber = 7;
  inline ::google::protobuf::int32 gender_id() const;
  inline void set_gender_id(::google::protobuf::int32 value);

  // optional uint32 avatar_box_id = 8;
  inline bool has_avatar_box_id() const;
  inline void clear_avatar_box_id();
  static const int kAvatarBoxIdFieldNumber = 8;
  inline ::google::protobuf::uint32 avatar_box_id() const;
  inline void set_avatar_box_id(::google::protobuf::uint32 value);

  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint32 officer_grade = 10;
  inline bool has_officer_grade() const;
  inline void clear_officer_grade();
  static const int kOfficerGradeFieldNumber = 10;
  inline ::google::protobuf::uint32 officer_grade() const;
  inline void set_officer_grade(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_team_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_avatar_url();
  inline void clear_has_role_avatar_url();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gender_id();
  inline void clear_has_gender_id();
  inline void set_has_avatar_box_id();
  inline void clear_has_avatar_box_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_officer_grade();
  inline void clear_has_officer_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  int protoid_;
  ::google::protobuf::uint32 team_id_;
  ::std::string* role_avatar_url_;
  ::std::string* content_;
  ::google::protobuf::int32 gender_id_;
  ::google::protobuf::uint32 avatar_box_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint32 officer_grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_team_ntf* default_instance_;
};
// -------------------------------------------------------------------

class chat_family_req : public ::google::protobuf::Message {
 public:
  chat_family_req();
  virtual ~chat_family_req();

  chat_family_req(const chat_family_req& from);

  inline chat_family_req& operator=(const chat_family_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_family_req& default_instance();

  void Swap(chat_family_req* other);

  // implements Message ----------------------------------------------

  chat_family_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_family_req& from);
  void MergeFrom(const chat_family_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_family_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string role_avatar_url = 4;
  inline bool has_role_avatar_url() const;
  inline void clear_role_avatar_url();
  static const int kRoleAvatarUrlFieldNumber = 4;
  inline const ::std::string& role_avatar_url() const;
  inline void set_role_avatar_url(const ::std::string& value);
  inline void set_role_avatar_url(const char* value);
  inline void set_role_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_role_avatar_url();
  inline ::std::string* release_role_avatar_url();
  inline void set_allocated_role_avatar_url(::std::string* role_avatar_url);

  // optional uint32 family_id = 5;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 5;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 gender_id = 7;
  inline bool has_gender_id() const;
  inline void clear_gender_id();
  static const int kGenderIdFieldNumber = 7;
  inline ::google::protobuf::int32 gender_id() const;
  inline void set_gender_id(::google::protobuf::int32 value);

  // optional uint32 avatar_box_id = 8;
  inline bool has_avatar_box_id() const;
  inline void clear_avatar_box_id();
  static const int kAvatarBoxIdFieldNumber = 8;
  inline ::google::protobuf::uint32 avatar_box_id() const;
  inline void set_avatar_box_id(::google::protobuf::uint32 value);

  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint32 officer_grade = 10;
  inline bool has_officer_grade() const;
  inline void clear_officer_grade();
  static const int kOfficerGradeFieldNumber = 10;
  inline ::google::protobuf::uint32 officer_grade() const;
  inline void set_officer_grade(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_family_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_avatar_url();
  inline void clear_has_role_avatar_url();
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gender_id();
  inline void clear_has_gender_id();
  inline void set_has_avatar_box_id();
  inline void clear_has_avatar_box_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_officer_grade();
  inline void clear_has_officer_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  int protoid_;
  ::google::protobuf::uint32 family_id_;
  ::std::string* role_avatar_url_;
  ::std::string* content_;
  ::google::protobuf::int32 gender_id_;
  ::google::protobuf::uint32 avatar_box_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint32 officer_grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_family_req* default_instance_;
};
// -------------------------------------------------------------------

class chat_family_ntf : public ::google::protobuf::Message {
 public:
  chat_family_ntf();
  virtual ~chat_family_ntf();

  chat_family_ntf(const chat_family_ntf& from);

  inline chat_family_ntf& operator=(const chat_family_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_family_ntf& default_instance();

  void Swap(chat_family_ntf* other);

  // implements Message ----------------------------------------------

  chat_family_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_family_ntf& from);
  void MergeFrom(const chat_family_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_family_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string role_avatar_url = 4;
  inline bool has_role_avatar_url() const;
  inline void clear_role_avatar_url();
  static const int kRoleAvatarUrlFieldNumber = 4;
  inline const ::std::string& role_avatar_url() const;
  inline void set_role_avatar_url(const ::std::string& value);
  inline void set_role_avatar_url(const char* value);
  inline void set_role_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_role_avatar_url();
  inline ::std::string* release_role_avatar_url();
  inline void set_allocated_role_avatar_url(::std::string* role_avatar_url);

  // optional uint32 family_id = 5;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 5;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 gender_id = 7;
  inline bool has_gender_id() const;
  inline void clear_gender_id();
  static const int kGenderIdFieldNumber = 7;
  inline ::google::protobuf::int32 gender_id() const;
  inline void set_gender_id(::google::protobuf::int32 value);

  // optional uint32 avatar_box_id = 8;
  inline bool has_avatar_box_id() const;
  inline void clear_avatar_box_id();
  static const int kAvatarBoxIdFieldNumber = 8;
  inline ::google::protobuf::uint32 avatar_box_id() const;
  inline void set_avatar_box_id(::google::protobuf::uint32 value);

  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint32 officer_grade = 10;
  inline bool has_officer_grade() const;
  inline void clear_officer_grade();
  static const int kOfficerGradeFieldNumber = 10;
  inline ::google::protobuf::uint32 officer_grade() const;
  inline void set_officer_grade(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_family_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_avatar_url();
  inline void clear_has_role_avatar_url();
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gender_id();
  inline void clear_has_gender_id();
  inline void set_has_avatar_box_id();
  inline void clear_has_avatar_box_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_officer_grade();
  inline void clear_has_officer_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  int protoid_;
  ::google::protobuf::uint32 family_id_;
  ::std::string* role_avatar_url_;
  ::std::string* content_;
  ::google::protobuf::int32 gender_id_;
  ::google::protobuf::uint32 avatar_box_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint32 officer_grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_family_ntf* default_instance_;
};
// -------------------------------------------------------------------

class chat_private_req : public ::google::protobuf::Message {
 public:
  chat_private_req();
  virtual ~chat_private_req();

  chat_private_req(const chat_private_req& from);

  inline chat_private_req& operator=(const chat_private_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_private_req& default_instance();

  void Swap(chat_private_req* other);

  // implements Message ----------------------------------------------

  chat_private_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_private_req& from);
  void MergeFrom(const chat_private_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_private_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 to_role_id = 2;
  inline bool has_to_role_id() const;
  inline void clear_to_role_id();
  static const int kToRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 to_role_id() const;
  inline void set_to_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string role_avatar_url = 4;
  inline bool has_role_avatar_url() const;
  inline void clear_role_avatar_url();
  static const int kRoleAvatarUrlFieldNumber = 4;
  inline const ::std::string& role_avatar_url() const;
  inline void set_role_avatar_url(const ::std::string& value);
  inline void set_role_avatar_url(const char* value);
  inline void set_role_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_role_avatar_url();
  inline ::std::string* release_role_avatar_url();
  inline void set_allocated_role_avatar_url(::std::string* role_avatar_url);

  // optional uint64 from_role_id = 5;
  inline bool has_from_role_id() const;
  inline void clear_from_role_id();
  static const int kFromRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint64 from_role_id() const;
  inline void set_from_role_id(::google::protobuf::uint64 value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 gender_id = 7;
  inline bool has_gender_id() const;
  inline void clear_gender_id();
  static const int kGenderIdFieldNumber = 7;
  inline ::google::protobuf::int32 gender_id() const;
  inline void set_gender_id(::google::protobuf::int32 value);

  // optional uint32 avatar_box_id = 8;
  inline bool has_avatar_box_id() const;
  inline void clear_avatar_box_id();
  static const int kAvatarBoxIdFieldNumber = 8;
  inline ::google::protobuf::uint32 avatar_box_id() const;
  inline void set_avatar_box_id(::google::protobuf::uint32 value);

  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint32 officer_grade = 10;
  inline bool has_officer_grade() const;
  inline void clear_officer_grade();
  static const int kOfficerGradeFieldNumber = 10;
  inline ::google::protobuf::uint32 officer_grade() const;
  inline void set_officer_grade(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_private_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_to_role_id();
  inline void clear_has_to_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_avatar_url();
  inline void clear_has_role_avatar_url();
  inline void set_has_from_role_id();
  inline void clear_has_from_role_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gender_id();
  inline void clear_has_gender_id();
  inline void set_has_avatar_box_id();
  inline void clear_has_avatar_box_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_officer_grade();
  inline void clear_has_officer_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 to_role_id_;
  ::std::string* role_name_;
  ::std::string* role_avatar_url_;
  int protoid_;
  ::google::protobuf::int32 gender_id_;
  ::google::protobuf::uint64 from_role_id_;
  ::std::string* content_;
  ::google::protobuf::uint32 avatar_box_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint32 officer_grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_private_req* default_instance_;
};
// -------------------------------------------------------------------

class chat_private_ntf : public ::google::protobuf::Message {
 public:
  chat_private_ntf();
  virtual ~chat_private_ntf();

  chat_private_ntf(const chat_private_ntf& from);

  inline chat_private_ntf& operator=(const chat_private_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_private_ntf& default_instance();

  void Swap(chat_private_ntf* other);

  // implements Message ----------------------------------------------

  chat_private_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_private_ntf& from);
  void MergeFrom(const chat_private_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_private_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 to_role_id = 2;
  inline bool has_to_role_id() const;
  inline void clear_to_role_id();
  static const int kToRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 to_role_id() const;
  inline void set_to_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string role_avatar_url = 4;
  inline bool has_role_avatar_url() const;
  inline void clear_role_avatar_url();
  static const int kRoleAvatarUrlFieldNumber = 4;
  inline const ::std::string& role_avatar_url() const;
  inline void set_role_avatar_url(const ::std::string& value);
  inline void set_role_avatar_url(const char* value);
  inline void set_role_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_role_avatar_url();
  inline ::std::string* release_role_avatar_url();
  inline void set_allocated_role_avatar_url(::std::string* role_avatar_url);

  // optional uint64 from_role_id = 5;
  inline bool has_from_role_id() const;
  inline void clear_from_role_id();
  static const int kFromRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint64 from_role_id() const;
  inline void set_from_role_id(::google::protobuf::uint64 value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 gender_id = 7;
  inline bool has_gender_id() const;
  inline void clear_gender_id();
  static const int kGenderIdFieldNumber = 7;
  inline ::google::protobuf::int32 gender_id() const;
  inline void set_gender_id(::google::protobuf::int32 value);

  // optional uint32 avatar_box_id = 8;
  inline bool has_avatar_box_id() const;
  inline void clear_avatar_box_id();
  static const int kAvatarBoxIdFieldNumber = 8;
  inline ::google::protobuf::uint32 avatar_box_id() const;
  inline void set_avatar_box_id(::google::protobuf::uint32 value);

  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint32 officer_grade = 10;
  inline bool has_officer_grade() const;
  inline void clear_officer_grade();
  static const int kOfficerGradeFieldNumber = 10;
  inline ::google::protobuf::uint32 officer_grade() const;
  inline void set_officer_grade(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_private_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_to_role_id();
  inline void clear_has_to_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_avatar_url();
  inline void clear_has_role_avatar_url();
  inline void set_has_from_role_id();
  inline void clear_has_from_role_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gender_id();
  inline void clear_has_gender_id();
  inline void set_has_avatar_box_id();
  inline void clear_has_avatar_box_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_officer_grade();
  inline void clear_has_officer_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 to_role_id_;
  ::std::string* role_name_;
  ::std::string* role_avatar_url_;
  int protoid_;
  ::google::protobuf::int32 gender_id_;
  ::google::protobuf::uint64 from_role_id_;
  ::std::string* content_;
  ::google::protobuf::uint32 avatar_box_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint32 officer_grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_private_ntf* default_instance_;
};
// -------------------------------------------------------------------

class chat_world_channel_change_req : public ::google::protobuf::Message {
 public:
  chat_world_channel_change_req();
  virtual ~chat_world_channel_change_req();

  chat_world_channel_change_req(const chat_world_channel_change_req& from);

  inline chat_world_channel_change_req& operator=(const chat_world_channel_change_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_world_channel_change_req& default_instance();

  void Swap(chat_world_channel_change_req* other);

  // implements Message ----------------------------------------------

  chat_world_channel_change_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_world_channel_change_req& from);
  void MergeFrom(const chat_world_channel_change_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_channel_change_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 to_new_channel = 2;
  inline bool has_to_new_channel() const;
  inline void clear_to_new_channel();
  static const int kToNewChannelFieldNumber = 2;
  inline ::google::protobuf::uint32 to_new_channel() const;
  inline void set_to_new_channel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_world_channel_change_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_to_new_channel();
  inline void clear_has_to_new_channel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 to_new_channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_world_channel_change_req* default_instance_;
};
// -------------------------------------------------------------------

class chat_world_channel_change_ack : public ::google::protobuf::Message {
 public:
  chat_world_channel_change_ack();
  virtual ~chat_world_channel_change_ack();

  chat_world_channel_change_ack(const chat_world_channel_change_ack& from);

  inline chat_world_channel_change_ack& operator=(const chat_world_channel_change_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_world_channel_change_ack& default_instance();

  void Swap(chat_world_channel_change_ack* other);

  // implements Message ----------------------------------------------

  chat_world_channel_change_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_world_channel_change_ack& from);
  void MergeFrom(const chat_world_channel_change_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_channel_change_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 rec_code = 2;
  inline bool has_rec_code() const;
  inline void clear_rec_code();
  static const int kRecCodeFieldNumber = 2;
  inline ::google::protobuf::int32 rec_code() const;
  inline void set_rec_code(::google::protobuf::int32 value);

  // optional uint32 new_channel = 3;
  inline bool has_new_channel() const;
  inline void clear_new_channel();
  static const int kNewChannelFieldNumber = 3;
  inline ::google::protobuf::uint32 new_channel() const;
  inline void set_new_channel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_world_channel_change_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_rec_code();
  inline void clear_has_rec_code();
  inline void set_has_new_channel();
  inline void clear_has_new_channel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 rec_code_;
  ::google::protobuf::uint32 new_channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_world_channel_change_ack* default_instance_;
};
// -------------------------------------------------------------------

class chat_world_channel_random_nft : public ::google::protobuf::Message {
 public:
  chat_world_channel_random_nft();
  virtual ~chat_world_channel_random_nft();

  chat_world_channel_random_nft(const chat_world_channel_random_nft& from);

  inline chat_world_channel_random_nft& operator=(const chat_world_channel_random_nft& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_world_channel_random_nft& default_instance();

  void Swap(chat_world_channel_random_nft* other);

  // implements Message ----------------------------------------------

  chat_world_channel_random_nft* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_world_channel_random_nft& from);
  void MergeFrom(const chat_world_channel_random_nft& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_channel_random_nft_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_world_channel_random_nft)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_channel();
  inline void clear_has_channel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_world_channel_random_nft* default_instance_;
};
// -------------------------------------------------------------------

class chat_broadcast_all_area_req : public ::google::protobuf::Message {
 public:
  chat_broadcast_all_area_req();
  virtual ~chat_broadcast_all_area_req();

  chat_broadcast_all_area_req(const chat_broadcast_all_area_req& from);

  inline chat_broadcast_all_area_req& operator=(const chat_broadcast_all_area_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_broadcast_all_area_req& default_instance();

  void Swap(chat_broadcast_all_area_req* other);

  // implements Message ----------------------------------------------

  chat_broadcast_all_area_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_broadcast_all_area_req& from);
  void MergeFrom(const chat_broadcast_all_area_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_broadcast_all_area_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 to_role_id = 2;
  inline bool has_to_role_id() const;
  inline void clear_to_role_id();
  static const int kToRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 to_role_id() const;
  inline void set_to_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string role_avatar_url = 4;
  inline bool has_role_avatar_url() const;
  inline void clear_role_avatar_url();
  static const int kRoleAvatarUrlFieldNumber = 4;
  inline const ::std::string& role_avatar_url() const;
  inline void set_role_avatar_url(const ::std::string& value);
  inline void set_role_avatar_url(const char* value);
  inline void set_role_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_role_avatar_url();
  inline ::std::string* release_role_avatar_url();
  inline void set_allocated_role_avatar_url(::std::string* role_avatar_url);

  // optional uint64 from_role_id = 5;
  inline bool has_from_role_id() const;
  inline void clear_from_role_id();
  static const int kFromRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint64 from_role_id() const;
  inline void set_from_role_id(::google::protobuf::uint64 value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 gender_id = 7;
  inline bool has_gender_id() const;
  inline void clear_gender_id();
  static const int kGenderIdFieldNumber = 7;
  inline ::google::protobuf::int32 gender_id() const;
  inline void set_gender_id(::google::protobuf::int32 value);

  // optional uint32 avatar_box_id = 8;
  inline bool has_avatar_box_id() const;
  inline void clear_avatar_box_id();
  static const int kAvatarBoxIdFieldNumber = 8;
  inline ::google::protobuf::uint32 avatar_box_id() const;
  inline void set_avatar_box_id(::google::protobuf::uint32 value);

  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint32 officer_grade = 10;
  inline bool has_officer_grade() const;
  inline void clear_officer_grade();
  static const int kOfficerGradeFieldNumber = 10;
  inline ::google::protobuf::uint32 officer_grade() const;
  inline void set_officer_grade(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_broadcast_all_area_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_to_role_id();
  inline void clear_has_to_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_avatar_url();
  inline void clear_has_role_avatar_url();
  inline void set_has_from_role_id();
  inline void clear_has_from_role_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gender_id();
  inline void clear_has_gender_id();
  inline void set_has_avatar_box_id();
  inline void clear_has_avatar_box_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_officer_grade();
  inline void clear_has_officer_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 to_role_id_;
  ::std::string* role_name_;
  ::std::string* role_avatar_url_;
  int protoid_;
  ::google::protobuf::int32 gender_id_;
  ::google::protobuf::uint64 from_role_id_;
  ::std::string* content_;
  ::google::protobuf::uint32 avatar_box_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint32 officer_grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_broadcast_all_area_req* default_instance_;
};
// -------------------------------------------------------------------

class chat_broadcast_all_area_ack : public ::google::protobuf::Message {
 public:
  chat_broadcast_all_area_ack();
  virtual ~chat_broadcast_all_area_ack();

  chat_broadcast_all_area_ack(const chat_broadcast_all_area_ack& from);

  inline chat_broadcast_all_area_ack& operator=(const chat_broadcast_all_area_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_broadcast_all_area_ack& default_instance();

  void Swap(chat_broadcast_all_area_ack* other);

  // implements Message ----------------------------------------------

  chat_broadcast_all_area_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_broadcast_all_area_ack& from);
  void MergeFrom(const chat_broadcast_all_area_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_broadcast_all_area_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 rec_code = 2;
  inline bool has_rec_code() const;
  inline void clear_rec_code();
  static const int kRecCodeFieldNumber = 2;
  inline ::google::protobuf::int32 rec_code() const;
  inline void set_rec_code(::google::protobuf::int32 value);

  // repeated uint64 succeed_areas = 3;
  inline int succeed_areas_size() const;
  inline void clear_succeed_areas();
  static const int kSucceedAreasFieldNumber = 3;
  inline ::google::protobuf::uint64 succeed_areas(int index) const;
  inline void set_succeed_areas(int index, ::google::protobuf::uint64 value);
  inline void add_succeed_areas(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      succeed_areas() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_succeed_areas();

  // repeated uint64 failed_areas = 4;
  inline int failed_areas_size() const;
  inline void clear_failed_areas();
  static const int kFailedAreasFieldNumber = 4;
  inline ::google::protobuf::uint64 failed_areas(int index) const;
  inline void set_failed_areas(int index, ::google::protobuf::uint64 value);
  inline void add_failed_areas(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      failed_areas() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_failed_areas();

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_broadcast_all_area_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_rec_code();
  inline void clear_has_rec_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 rec_code_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > succeed_areas_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > failed_areas_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_broadcast_all_area_ack* default_instance_;
};
// -------------------------------------------------------------------

class chat_broadcast_all_area_ntf : public ::google::protobuf::Message {
 public:
  chat_broadcast_all_area_ntf();
  virtual ~chat_broadcast_all_area_ntf();

  chat_broadcast_all_area_ntf(const chat_broadcast_all_area_ntf& from);

  inline chat_broadcast_all_area_ntf& operator=(const chat_broadcast_all_area_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_broadcast_all_area_ntf& default_instance();

  void Swap(chat_broadcast_all_area_ntf* other);

  // implements Message ----------------------------------------------

  chat_broadcast_all_area_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_broadcast_all_area_ntf& from);
  void MergeFrom(const chat_broadcast_all_area_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_broadcast_all_area_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 to_role_id = 2;
  inline bool has_to_role_id() const;
  inline void clear_to_role_id();
  static const int kToRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 to_role_id() const;
  inline void set_to_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string role_avatar_url = 4;
  inline bool has_role_avatar_url() const;
  inline void clear_role_avatar_url();
  static const int kRoleAvatarUrlFieldNumber = 4;
  inline const ::std::string& role_avatar_url() const;
  inline void set_role_avatar_url(const ::std::string& value);
  inline void set_role_avatar_url(const char* value);
  inline void set_role_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_role_avatar_url();
  inline ::std::string* release_role_avatar_url();
  inline void set_allocated_role_avatar_url(::std::string* role_avatar_url);

  // optional uint64 from_role_id = 5;
  inline bool has_from_role_id() const;
  inline void clear_from_role_id();
  static const int kFromRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint64 from_role_id() const;
  inline void set_from_role_id(::google::protobuf::uint64 value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 gender_id = 7;
  inline bool has_gender_id() const;
  inline void clear_gender_id();
  static const int kGenderIdFieldNumber = 7;
  inline ::google::protobuf::int32 gender_id() const;
  inline void set_gender_id(::google::protobuf::int32 value);

  // optional uint32 avatar_box_id = 8;
  inline bool has_avatar_box_id() const;
  inline void clear_avatar_box_id();
  static const int kAvatarBoxIdFieldNumber = 8;
  inline ::google::protobuf::uint32 avatar_box_id() const;
  inline void set_avatar_box_id(::google::protobuf::uint32 value);

  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint32 officer_grade = 10;
  inline bool has_officer_grade() const;
  inline void clear_officer_grade();
  static const int kOfficerGradeFieldNumber = 10;
  inline ::google::protobuf::uint32 officer_grade() const;
  inline void set_officer_grade(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_broadcast_all_area_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_to_role_id();
  inline void clear_has_to_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_avatar_url();
  inline void clear_has_role_avatar_url();
  inline void set_has_from_role_id();
  inline void clear_has_from_role_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gender_id();
  inline void clear_has_gender_id();
  inline void set_has_avatar_box_id();
  inline void clear_has_avatar_box_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_officer_grade();
  inline void clear_has_officer_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 to_role_id_;
  ::std::string* role_name_;
  ::std::string* role_avatar_url_;
  int protoid_;
  ::google::protobuf::int32 gender_id_;
  ::google::protobuf::uint64 from_role_id_;
  ::std::string* content_;
  ::google::protobuf::uint32 avatar_box_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint32 officer_grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_broadcast_all_area_ntf* default_instance_;
};
// -------------------------------------------------------------------

class chat_pack_ntf_world : public ::google::protobuf::Message {
 public:
  chat_pack_ntf_world();
  virtual ~chat_pack_ntf_world();

  chat_pack_ntf_world(const chat_pack_ntf_world& from);

  inline chat_pack_ntf_world& operator=(const chat_pack_ntf_world& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_pack_ntf_world& default_instance();

  void Swap(chat_pack_ntf_world* other);

  // implements Message ----------------------------------------------

  chat_pack_ntf_world* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_pack_ntf_world& from);
  void MergeFrom(const chat_pack_ntf_world& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string role_avatar_url = 4;
  inline bool has_role_avatar_url() const;
  inline void clear_role_avatar_url();
  static const int kRoleAvatarUrlFieldNumber = 4;
  inline const ::std::string& role_avatar_url() const;
  inline void set_role_avatar_url(const ::std::string& value);
  inline void set_role_avatar_url(const char* value);
  inline void set_role_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_role_avatar_url();
  inline ::std::string* release_role_avatar_url();
  inline void set_allocated_role_avatar_url(::std::string* role_avatar_url);

  // optional uint32 world_channel_id = 5;
  inline bool has_world_channel_id() const;
  inline void clear_world_channel_id();
  static const int kWorldChannelIdFieldNumber = 5;
  inline ::google::protobuf::uint32 world_channel_id() const;
  inline void set_world_channel_id(::google::protobuf::uint32 value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 gender_id = 7;
  inline bool has_gender_id() const;
  inline void clear_gender_id();
  static const int kGenderIdFieldNumber = 7;
  inline ::google::protobuf::int32 gender_id() const;
  inline void set_gender_id(::google::protobuf::int32 value);

  // optional uint32 avatar_box_id = 8;
  inline bool has_avatar_box_id() const;
  inline void clear_avatar_box_id();
  static const int kAvatarBoxIdFieldNumber = 8;
  inline ::google::protobuf::uint32 avatar_box_id() const;
  inline void set_avatar_box_id(::google::protobuf::uint32 value);

  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint32 officer_grade = 10;
  inline bool has_officer_grade() const;
  inline void clear_officer_grade();
  static const int kOfficerGradeFieldNumber = 10;
  inline ::google::protobuf::uint32 officer_grade() const;
  inline void set_officer_grade(::google::protobuf::uint32 value);

  // optional .SProtoSpace.eWorldChatType world_chat_type = 11;
  inline bool has_world_chat_type() const;
  inline void clear_world_chat_type();
  static const int kWorldChatTypeFieldNumber = 11;
  inline ::SProtoSpace::eWorldChatType world_chat_type() const;
  inline void set_world_chat_type(::SProtoSpace::eWorldChatType value);

  // optional uint64 event_data = 12;
  inline bool has_event_data() const;
  inline void clear_event_data();
  static const int kEventDataFieldNumber = 12;
  inline ::google::protobuf::uint64 event_data() const;
  inline void set_event_data(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_pack_ntf_world)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_avatar_url();
  inline void clear_has_role_avatar_url();
  inline void set_has_world_channel_id();
  inline void clear_has_world_channel_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gender_id();
  inline void clear_has_gender_id();
  inline void set_has_avatar_box_id();
  inline void clear_has_avatar_box_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_officer_grade();
  inline void clear_has_officer_grade();
  inline void set_has_world_chat_type();
  inline void clear_has_world_chat_type();
  inline void set_has_event_data();
  inline void clear_has_event_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  ::std::string* role_avatar_url_;
  ::std::string* content_;
  ::google::protobuf::uint32 world_channel_id_;
  ::google::protobuf::int32 gender_id_;
  ::google::protobuf::uint32 avatar_box_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint32 officer_grade_;
  int world_chat_type_;
  ::google::protobuf::uint64 event_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_pack_ntf_world* default_instance_;
};
// -------------------------------------------------------------------

class chat_pack_ntf : public ::google::protobuf::Message {
 public:
  chat_pack_ntf();
  virtual ~chat_pack_ntf();

  chat_pack_ntf(const chat_pack_ntf& from);

  inline chat_pack_ntf& operator=(const chat_pack_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_pack_ntf& default_instance();

  void Swap(chat_pack_ntf* other);

  // implements Message ----------------------------------------------

  chat_pack_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_pack_ntf& from);
  void MergeFrom(const chat_pack_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_pack_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.chat_pack_ntf_world chat_world = 2;
  inline int chat_world_size() const;
  inline void clear_chat_world();
  static const int kChatWorldFieldNumber = 2;
  inline const ::SProtoSpace::chat_pack_ntf_world& chat_world(int index) const;
  inline ::SProtoSpace::chat_pack_ntf_world* mutable_chat_world(int index);
  inline ::SProtoSpace::chat_pack_ntf_world* add_chat_world();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chat_pack_ntf_world >&
      chat_world() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chat_pack_ntf_world >*
      mutable_chat_world();

  // repeated .SProtoSpace.marquee_flower marq_flower = 5;
  inline int marq_flower_size() const;
  inline void clear_marq_flower();
  static const int kMarqFlowerFieldNumber = 5;
  inline const ::SProtoSpace::marquee_flower& marq_flower(int index) const;
  inline ::SProtoSpace::marquee_flower* mutable_marq_flower(int index);
  inline ::SProtoSpace::marquee_flower* add_marq_flower();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::marquee_flower >&
      marq_flower() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::marquee_flower >*
      mutable_marq_flower();

  // repeated .SProtoSpace.marquee_common marq_common = 6;
  inline int marq_common_size() const;
  inline void clear_marq_common();
  static const int kMarqCommonFieldNumber = 6;
  inline const ::SProtoSpace::marquee_common& marq_common(int index) const;
  inline ::SProtoSpace::marquee_common* mutable_marq_common(int index);
  inline ::SProtoSpace::marquee_common* add_marq_common();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::marquee_common >&
      marq_common() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::marquee_common >*
      mutable_marq_common();

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_pack_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chat_pack_ntf_world > chat_world_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::marquee_flower > marq_flower_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::marquee_common > marq_common_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_pack_ntf* default_instance_;
};
// -------------------------------------------------------------------

class marquee_all_type_ntf : public ::google::protobuf::Message {
 public:
  marquee_all_type_ntf();
  virtual ~marquee_all_type_ntf();

  marquee_all_type_ntf(const marquee_all_type_ntf& from);

  inline marquee_all_type_ntf& operator=(const marquee_all_type_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const marquee_all_type_ntf& default_instance();

  void Swap(marquee_all_type_ntf* other);

  // implements Message ----------------------------------------------

  marquee_all_type_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const marquee_all_type_ntf& from);
  void MergeFrom(const marquee_all_type_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = marquee_all_type_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.marquee_flower flower = 5;
  inline int flower_size() const;
  inline void clear_flower();
  static const int kFlowerFieldNumber = 5;
  inline const ::SProtoSpace::marquee_flower& flower(int index) const;
  inline ::SProtoSpace::marquee_flower* mutable_flower(int index);
  inline ::SProtoSpace::marquee_flower* add_flower();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::marquee_flower >&
      flower() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::marquee_flower >*
      mutable_flower();

  // repeated .SProtoSpace.marquee_common common = 6;
  inline int common_size() const;
  inline void clear_common();
  static const int kCommonFieldNumber = 6;
  inline const ::SProtoSpace::marquee_common& common(int index) const;
  inline ::SProtoSpace::marquee_common* mutable_common(int index);
  inline ::SProtoSpace::marquee_common* add_common();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::marquee_common >&
      common() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::marquee_common >*
      mutable_common();

  // @@protoc_insertion_point(class_scope:SProtoSpace.marquee_all_type_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::marquee_flower > flower_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::marquee_common > common_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static marquee_all_type_ntf* default_instance_;
};
// -------------------------------------------------------------------

class marquee_common : public ::google::protobuf::Message {
 public:
  marquee_common();
  virtual ~marquee_common();

  marquee_common(const marquee_common& from);

  inline marquee_common& operator=(const marquee_common& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const marquee_common& default_instance();

  void Swap(marquee_common* other);

  // implements Message ----------------------------------------------

  marquee_common* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const marquee_common& from);
  void MergeFrom(const marquee_common& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 config_type = 1;
  inline bool has_config_type() const;
  inline void clear_config_type();
  static const int kConfigTypeFieldNumber = 1;
  inline ::google::protobuf::int32 config_type() const;
  inline void set_config_type(::google::protobuf::int32 value);

  // optional int32 config_id = 2;
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 2;
  inline ::google::protobuf::int32 config_id() const;
  inline void set_config_id(::google::protobuf::int32 value);

  // optional int32 show_times = 3;
  inline bool has_show_times() const;
  inline void clear_show_times();
  static const int kShowTimesFieldNumber = 3;
  inline ::google::protobuf::int32 show_times() const;
  inline void set_show_times(::google::protobuf::int32 value);

  // optional int32 priority = 4;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 4;
  inline ::google::protobuf::int32 priority() const;
  inline void set_priority(::google::protobuf::int32 value);

  // optional int32 contents_count = 5;
  inline bool has_contents_count() const;
  inline void clear_contents_count();
  static const int kContentsCountFieldNumber = 5;
  inline ::google::protobuf::int32 contents_count() const;
  inline void set_contents_count(::google::protobuf::int32 value);

  // repeated int32 numbers = 6;
  inline int numbers_size() const;
  inline void clear_numbers();
  static const int kNumbersFieldNumber = 6;
  inline ::google::protobuf::int32 numbers(int index) const;
  inline void set_numbers(int index, ::google::protobuf::int32 value);
  inline void add_numbers(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      numbers() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_numbers();

  // repeated string content = 7;
  inline int content_size() const;
  inline void clear_content();
  static const int kContentFieldNumber = 7;
  inline const ::std::string& content(int index) const;
  inline ::std::string* mutable_content(int index);
  inline void set_content(int index, const ::std::string& value);
  inline void set_content(int index, const char* value);
  inline void set_content(int index, const char* value, size_t size);
  inline ::std::string* add_content();
  inline void add_content(const ::std::string& value);
  inline void add_content(const char* value);
  inline void add_content(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& content() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_content();

  // @@protoc_insertion_point(class_scope:SProtoSpace.marquee_common)
 private:
  inline void set_has_config_type();
  inline void clear_has_config_type();
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_show_times();
  inline void clear_has_show_times();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_contents_count();
  inline void clear_has_contents_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 config_type_;
  ::google::protobuf::int32 config_id_;
  ::google::protobuf::int32 show_times_;
  ::google::protobuf::int32 priority_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > numbers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> content_;
  ::google::protobuf::int32 contents_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static marquee_common* default_instance_;
};
// -------------------------------------------------------------------

class marquee_flower : public ::google::protobuf::Message {
 public:
  marquee_flower();
  virtual ~marquee_flower();

  marquee_flower(const marquee_flower& from);

  inline marquee_flower& operator=(const marquee_flower& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const marquee_flower& default_instance();

  void Swap(marquee_flower* other);

  // implements Message ----------------------------------------------

  marquee_flower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const marquee_flower& from);
  void MergeFrom(const marquee_flower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string to_role_name = 1;
  inline bool has_to_role_name() const;
  inline void clear_to_role_name();
  static const int kToRoleNameFieldNumber = 1;
  inline const ::std::string& to_role_name() const;
  inline void set_to_role_name(const ::std::string& value);
  inline void set_to_role_name(const char* value);
  inline void set_to_role_name(const char* value, size_t size);
  inline ::std::string* mutable_to_role_name();
  inline ::std::string* release_to_role_name();
  inline void set_allocated_to_role_name(::std::string* to_role_name);

  // optional string from_role_name = 2;
  inline bool has_from_role_name() const;
  inline void clear_from_role_name();
  static const int kFromRoleNameFieldNumber = 2;
  inline const ::std::string& from_role_name() const;
  inline void set_from_role_name(const ::std::string& value);
  inline void set_from_role_name(const char* value);
  inline void set_from_role_name(const char* value, size_t size);
  inline ::std::string* mutable_from_role_name();
  inline ::std::string* release_from_role_name();
  inline void set_allocated_from_role_name(::std::string* from_role_name);

  // optional int32 flower_config_id = 3;
  inline bool has_flower_config_id() const;
  inline void clear_flower_config_id();
  static const int kFlowerConfigIdFieldNumber = 3;
  inline ::google::protobuf::int32 flower_config_id() const;
  inline void set_flower_config_id(::google::protobuf::int32 value);

  // optional int32 flower_send_count = 4;
  inline bool has_flower_send_count() const;
  inline void clear_flower_send_count();
  static const int kFlowerSendCountFieldNumber = 4;
  inline ::google::protobuf::int32 flower_send_count() const;
  inline void set_flower_send_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.marquee_flower)
 private:
  inline void set_has_to_role_name();
  inline void clear_has_to_role_name();
  inline void set_has_from_role_name();
  inline void clear_has_from_role_name();
  inline void set_has_flower_config_id();
  inline void clear_has_flower_config_id();
  inline void set_has_flower_send_count();
  inline void clear_has_flower_send_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* to_role_name_;
  ::std::string* from_role_name_;
  ::google::protobuf::int32 flower_config_id_;
  ::google::protobuf::int32 flower_send_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static marquee_flower* default_instance_;
};
// -------------------------------------------------------------------

class marquee_debug_req : public ::google::protobuf::Message {
 public:
  marquee_debug_req();
  virtual ~marquee_debug_req();

  marquee_debug_req(const marquee_debug_req& from);

  inline marquee_debug_req& operator=(const marquee_debug_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const marquee_debug_req& default_instance();

  void Swap(marquee_debug_req* other);

  // implements Message ----------------------------------------------

  marquee_debug_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const marquee_debug_req& from);
  void MergeFrom(const marquee_debug_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = marquee_debug_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.marquee_all_type_ntf marquee = 2;
  inline bool has_marquee() const;
  inline void clear_marquee();
  static const int kMarqueeFieldNumber = 2;
  inline const ::SProtoSpace::marquee_all_type_ntf& marquee() const;
  inline ::SProtoSpace::marquee_all_type_ntf* mutable_marquee();
  inline ::SProtoSpace::marquee_all_type_ntf* release_marquee();
  inline void set_allocated_marquee(::SProtoSpace::marquee_all_type_ntf* marquee);

  // @@protoc_insertion_point(class_scope:SProtoSpace.marquee_debug_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_marquee();
  inline void clear_has_marquee();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::marquee_all_type_ntf* marquee_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static marquee_debug_req* default_instance_;
};
// -------------------------------------------------------------------

class chat_req : public ::google::protobuf::Message {
 public:
  chat_req();
  virtual ~chat_req();

  chat_req(const chat_req& from);

  inline chat_req& operator=(const chat_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_req& default_instance();

  void Swap(chat_req* other);

  // implements Message ----------------------------------------------

  chat_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_req& from);
  void MergeFrom(const chat_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.CHAT_TYPE type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::SProtoSpace::CHAT_TYPE type() const;
  inline void set_type(::SProtoSpace::CHAT_TYPE value);

  // optional uint64 module_id = 3;
  inline bool has_module_id() const;
  inline void clear_module_id();
  static const int kModuleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 module_id() const;
  inline void set_module_id(::google::protobuf::uint64 value);

  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_module_id();
  inline void clear_has_module_id();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int type_;
  ::google::protobuf::uint64 module_id_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_req* default_instance_;
};
// -------------------------------------------------------------------

class chat_ack : public ::google::protobuf::Message {
 public:
  chat_ack();
  virtual ~chat_ack();

  chat_ack(const chat_ack& from);

  inline chat_ack& operator=(const chat_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_ack& default_instance();

  void Swap(chat_ack* other);

  // implements Message ----------------------------------------------

  chat_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_ack& from);
  void MergeFrom(const chat_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.CHAT_TYPE type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::SProtoSpace::CHAT_TYPE type() const;
  inline void set_type(::SProtoSpace::CHAT_TYPE value);

  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional .SProtoSpace.public_role_base_info sour_data = 4;
  inline bool has_sour_data() const;
  inline void clear_sour_data();
  static const int kSourDataFieldNumber = 4;
  inline const ::SProtoSpace::public_role_base_info& sour_data() const;
  inline ::SProtoSpace::public_role_base_info* mutable_sour_data();
  inline ::SProtoSpace::public_role_base_info* release_sour_data();
  inline void set_allocated_sour_data(::SProtoSpace::public_role_base_info* sour_data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_sour_data();
  inline void clear_has_sour_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int type_;
  ::std::string* content_;
  ::SProtoSpace::public_role_base_info* sour_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_ack* default_instance_;
};
// -------------------------------------------------------------------

class barrage_get_cs_req : public ::google::protobuf::Message {
 public:
  barrage_get_cs_req();
  virtual ~barrage_get_cs_req();

  barrage_get_cs_req(const barrage_get_cs_req& from);

  inline barrage_get_cs_req& operator=(const barrage_get_cs_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const barrage_get_cs_req& default_instance();

  void Swap(barrage_get_cs_req* other);

  // implements Message ----------------------------------------------

  barrage_get_cs_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const barrage_get_cs_req& from);
  void MergeFrom(const barrage_get_cs_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_get_cs_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated int32 storage_id = 2;
  inline int storage_id_size() const;
  inline void clear_storage_id();
  static const int kStorageIdFieldNumber = 2;
  inline ::google::protobuf::int32 storage_id(int index) const;
  inline void set_storage_id(int index, ::google::protobuf::int32 value);
  inline void add_storage_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      storage_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_storage_id();

  // optional int32 desinty = 3;
  inline bool has_desinty() const;
  inline void clear_desinty();
  static const int kDesintyFieldNumber = 3;
  inline ::google::protobuf::int32 desinty() const;
  inline void set_desinty(::google::protobuf::int32 value);

  // optional int32 start = 4;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 4;
  inline ::google::protobuf::int32 start() const;
  inline void set_start(::google::protobuf::int32 value);

  // optional int32 end = 5;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 5;
  inline ::google::protobuf::int32 end() const;
  inline void set_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.barrage_get_cs_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_desinty();
  inline void clear_has_desinty();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > storage_id_;
  int protoid_;
  ::google::protobuf::int32 desinty_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int32 end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static barrage_get_cs_req* default_instance_;
};
// -------------------------------------------------------------------

class barrage_get_cs_ack : public ::google::protobuf::Message {
 public:
  barrage_get_cs_ack();
  virtual ~barrage_get_cs_ack();

  barrage_get_cs_ack(const barrage_get_cs_ack& from);

  inline barrage_get_cs_ack& operator=(const barrage_get_cs_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const barrage_get_cs_ack& default_instance();

  void Swap(barrage_get_cs_ack* other);

  // implements Message ----------------------------------------------

  barrage_get_cs_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const barrage_get_cs_ack& from);
  void MergeFrom(const barrage_get_cs_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_get_cs_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.barrage_pack barrage_s = 2;
  inline bool has_barrage_s() const;
  inline void clear_barrage_s();
  static const int kBarrageSFieldNumber = 2;
  inline const ::SProtoSpace::barrage_pack& barrage_s() const;
  inline ::SProtoSpace::barrage_pack* mutable_barrage_s();
  inline ::SProtoSpace::barrage_pack* release_barrage_s();
  inline void set_allocated_barrage_s(::SProtoSpace::barrage_pack* barrage_s);

  // repeated .SProtoSpace.MsgErrorType error = 3;
  inline int error_size() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline ::SProtoSpace::MsgErrorType error(int index) const;
  inline void set_error(int index, ::SProtoSpace::MsgErrorType value);
  inline void add_error(::SProtoSpace::MsgErrorType value);
  inline const ::google::protobuf::RepeatedField<int>& error() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_error();

  // @@protoc_insertion_point(class_scope:SProtoSpace.barrage_get_cs_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_barrage_s();
  inline void clear_has_barrage_s();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::barrage_pack* barrage_s_;
  ::google::protobuf::RepeatedField<int> error_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static barrage_get_cs_ack* default_instance_;
};
// -------------------------------------------------------------------

class barrage_send_cs_req : public ::google::protobuf::Message {
 public:
  barrage_send_cs_req();
  virtual ~barrage_send_cs_req();

  barrage_send_cs_req(const barrage_send_cs_req& from);

  inline barrage_send_cs_req& operator=(const barrage_send_cs_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const barrage_send_cs_req& default_instance();

  void Swap(barrage_send_cs_req* other);

  // implements Message ----------------------------------------------

  barrage_send_cs_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const barrage_send_cs_req& from);
  void MergeFrom(const barrage_send_cs_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_send_cs_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated int32 storage_id = 2;
  inline int storage_id_size() const;
  inline void clear_storage_id();
  static const int kStorageIdFieldNumber = 2;
  inline ::google::protobuf::int32 storage_id(int index) const;
  inline void set_storage_id(int index, ::google::protobuf::int32 value);
  inline void add_storage_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      storage_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_storage_id();

  // optional .SProtoSpace.barrage_single barrage = 3;
  inline bool has_barrage() const;
  inline void clear_barrage();
  static const int kBarrageFieldNumber = 3;
  inline const ::SProtoSpace::barrage_single& barrage() const;
  inline ::SProtoSpace::barrage_single* mutable_barrage();
  inline ::SProtoSpace::barrage_single* release_barrage();
  inline void set_allocated_barrage(::SProtoSpace::barrage_single* barrage);

  // @@protoc_insertion_point(class_scope:SProtoSpace.barrage_send_cs_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_barrage();
  inline void clear_has_barrage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > storage_id_;
  ::SProtoSpace::barrage_single* barrage_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static barrage_send_cs_req* default_instance_;
};
// -------------------------------------------------------------------

class barrage_send_cs_ack : public ::google::protobuf::Message {
 public:
  barrage_send_cs_ack();
  virtual ~barrage_send_cs_ack();

  barrage_send_cs_ack(const barrage_send_cs_ack& from);

  inline barrage_send_cs_ack& operator=(const barrage_send_cs_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const barrage_send_cs_ack& default_instance();

  void Swap(barrage_send_cs_ack* other);

  // implements Message ----------------------------------------------

  barrage_send_cs_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const barrage_send_cs_ack& from);
  void MergeFrom(const barrage_send_cs_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_send_cs_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.MsgErrorType error = 2;
  inline int error_size() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline ::SProtoSpace::MsgErrorType error(int index) const;
  inline void set_error(int index, ::SProtoSpace::MsgErrorType value);
  inline void add_error(::SProtoSpace::MsgErrorType value);
  inline const ::google::protobuf::RepeatedField<int>& error() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_error();

  // @@protoc_insertion_point(class_scope:SProtoSpace.barrage_send_cs_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField<int> error_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fchat_2eproto();
  friend void protobuf_AssignDesc_cs_5fchat_2eproto();
  friend void protobuf_ShutdownFile_cs_5fchat_2eproto();

  void InitAsDefaultInstance();
  static barrage_send_cs_ack* default_instance_;
};
// ===================================================================


// ===================================================================

// chat_system_info_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_system_info_ntf_id];
inline bool chat_system_info_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_system_info_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_system_info_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_system_info_ntf::clear_protoid() {
  protoid_ = 6000;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID chat_system_info_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void chat_system_info_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 info_type = 2;
inline bool chat_system_info_ntf::has_info_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_system_info_ntf::set_has_info_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_system_info_ntf::clear_has_info_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_system_info_ntf::clear_info_type() {
  info_type_ = 0u;
  clear_has_info_type();
}
inline ::google::protobuf::uint32 chat_system_info_ntf::info_type() const {
  return info_type_;
}
inline void chat_system_info_ntf::set_info_type(::google::protobuf::uint32 value) {
  set_has_info_type();
  info_type_ = value;
}

// optional uint32 info_priority = 3;
inline bool chat_system_info_ntf::has_info_priority() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_system_info_ntf::set_has_info_priority() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_system_info_ntf::clear_has_info_priority() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_system_info_ntf::clear_info_priority() {
  info_priority_ = 0u;
  clear_has_info_priority();
}
inline ::google::protobuf::uint32 chat_system_info_ntf::info_priority() const {
  return info_priority_;
}
inline void chat_system_info_ntf::set_info_priority(::google::protobuf::uint32 value) {
  set_has_info_priority();
  info_priority_ = value;
}

// optional string content = 4;
inline bool chat_system_info_ntf::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_system_info_ntf::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_system_info_ntf::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_system_info_ntf::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& chat_system_info_ntf::content() const {
  return *content_;
}
inline void chat_system_info_ntf::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_system_info_ntf::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_system_info_ntf::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_system_info_ntf::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* chat_system_info_ntf::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_system_info_ntf::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// chat_world_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_req_id];
inline bool chat_world_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_world_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_world_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_world_req::clear_protoid() {
  protoid_ = 6001;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID chat_world_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void chat_world_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool chat_world_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_world_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_world_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_world_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 chat_world_req::role_id() const {
  return role_id_;
}
inline void chat_world_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool chat_world_req::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_world_req::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_world_req::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_world_req::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& chat_world_req::role_name() const {
  return *role_name_;
}
inline void chat_world_req::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_world_req::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_world_req::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_world_req::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* chat_world_req::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_world_req::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string role_avatar_url = 4;
inline bool chat_world_req::has_role_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_world_req::set_has_role_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_world_req::clear_has_role_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_world_req::clear_role_avatar_url() {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_->clear();
  }
  clear_has_role_avatar_url();
}
inline const ::std::string& chat_world_req::role_avatar_url() const {
  return *role_avatar_url_;
}
inline void chat_world_req::set_role_avatar_url(const ::std::string& value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_world_req::set_role_avatar_url(const char* value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_world_req::set_role_avatar_url(const char* value, size_t size) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_world_req::mutable_role_avatar_url() {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  return role_avatar_url_;
}
inline ::std::string* chat_world_req::release_role_avatar_url() {
  clear_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_avatar_url_;
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_world_req::set_allocated_role_avatar_url(::std::string* role_avatar_url) {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (role_avatar_url) {
    set_has_role_avatar_url();
    role_avatar_url_ = role_avatar_url;
  } else {
    clear_has_role_avatar_url();
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 world_channel_id = 5;
inline bool chat_world_req::has_world_channel_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void chat_world_req::set_has_world_channel_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void chat_world_req::clear_has_world_channel_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void chat_world_req::clear_world_channel_id() {
  world_channel_id_ = 0u;
  clear_has_world_channel_id();
}
inline ::google::protobuf::uint32 chat_world_req::world_channel_id() const {
  return world_channel_id_;
}
inline void chat_world_req::set_world_channel_id(::google::protobuf::uint32 value) {
  set_has_world_channel_id();
  world_channel_id_ = value;
}

// optional string content = 6;
inline bool chat_world_req::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void chat_world_req::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void chat_world_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void chat_world_req::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& chat_world_req::content() const {
  return *content_;
}
inline void chat_world_req::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_world_req::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_world_req::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_world_req::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* chat_world_req::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_world_req::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gender_id = 7;
inline bool chat_world_req::has_gender_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void chat_world_req::set_has_gender_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void chat_world_req::clear_has_gender_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void chat_world_req::clear_gender_id() {
  gender_id_ = 0;
  clear_has_gender_id();
}
inline ::google::protobuf::int32 chat_world_req::gender_id() const {
  return gender_id_;
}
inline void chat_world_req::set_gender_id(::google::protobuf::int32 value) {
  set_has_gender_id();
  gender_id_ = value;
}

// optional uint32 avatar_box_id = 8;
inline bool chat_world_req::has_avatar_box_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void chat_world_req::set_has_avatar_box_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void chat_world_req::clear_has_avatar_box_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void chat_world_req::clear_avatar_box_id() {
  avatar_box_id_ = 0u;
  clear_has_avatar_box_id();
}
inline ::google::protobuf::uint32 chat_world_req::avatar_box_id() const {
  return avatar_box_id_;
}
inline void chat_world_req::set_avatar_box_id(::google::protobuf::uint32 value) {
  set_has_avatar_box_id();
  avatar_box_id_ = value;
}

// optional int32 level = 9;
inline bool chat_world_req::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void chat_world_req::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void chat_world_req::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void chat_world_req::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 chat_world_req::level() const {
  return level_;
}
inline void chat_world_req::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 officer_grade = 10;
inline bool chat_world_req::has_officer_grade() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void chat_world_req::set_has_officer_grade() {
  _has_bits_[0] |= 0x00000200u;
}
inline void chat_world_req::clear_has_officer_grade() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void chat_world_req::clear_officer_grade() {
  officer_grade_ = 0u;
  clear_has_officer_grade();
}
inline ::google::protobuf::uint32 chat_world_req::officer_grade() const {
  return officer_grade_;
}
inline void chat_world_req::set_officer_grade(::google::protobuf::uint32 value) {
  set_has_officer_grade();
  officer_grade_ = value;
}

// -------------------------------------------------------------------

// chat_world_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_ntf_id];
inline bool chat_world_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_world_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_world_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_world_ntf::clear_protoid() {
  protoid_ = 6002;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID chat_world_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void chat_world_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool chat_world_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_world_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_world_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_world_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 chat_world_ntf::role_id() const {
  return role_id_;
}
inline void chat_world_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool chat_world_ntf::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_world_ntf::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_world_ntf::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_world_ntf::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& chat_world_ntf::role_name() const {
  return *role_name_;
}
inline void chat_world_ntf::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_world_ntf::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_world_ntf::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_world_ntf::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* chat_world_ntf::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_world_ntf::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string role_avatar_url = 4;
inline bool chat_world_ntf::has_role_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_world_ntf::set_has_role_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_world_ntf::clear_has_role_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_world_ntf::clear_role_avatar_url() {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_->clear();
  }
  clear_has_role_avatar_url();
}
inline const ::std::string& chat_world_ntf::role_avatar_url() const {
  return *role_avatar_url_;
}
inline void chat_world_ntf::set_role_avatar_url(const ::std::string& value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_world_ntf::set_role_avatar_url(const char* value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_world_ntf::set_role_avatar_url(const char* value, size_t size) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_world_ntf::mutable_role_avatar_url() {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  return role_avatar_url_;
}
inline ::std::string* chat_world_ntf::release_role_avatar_url() {
  clear_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_avatar_url_;
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_world_ntf::set_allocated_role_avatar_url(::std::string* role_avatar_url) {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (role_avatar_url) {
    set_has_role_avatar_url();
    role_avatar_url_ = role_avatar_url;
  } else {
    clear_has_role_avatar_url();
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 world_channel_id = 5;
inline bool chat_world_ntf::has_world_channel_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void chat_world_ntf::set_has_world_channel_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void chat_world_ntf::clear_has_world_channel_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void chat_world_ntf::clear_world_channel_id() {
  world_channel_id_ = 0u;
  clear_has_world_channel_id();
}
inline ::google::protobuf::uint32 chat_world_ntf::world_channel_id() const {
  return world_channel_id_;
}
inline void chat_world_ntf::set_world_channel_id(::google::protobuf::uint32 value) {
  set_has_world_channel_id();
  world_channel_id_ = value;
}

// optional string content = 6;
inline bool chat_world_ntf::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void chat_world_ntf::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void chat_world_ntf::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void chat_world_ntf::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& chat_world_ntf::content() const {
  return *content_;
}
inline void chat_world_ntf::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_world_ntf::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_world_ntf::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_world_ntf::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* chat_world_ntf::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_world_ntf::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gender_id = 7;
inline bool chat_world_ntf::has_gender_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void chat_world_ntf::set_has_gender_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void chat_world_ntf::clear_has_gender_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void chat_world_ntf::clear_gender_id() {
  gender_id_ = 0;
  clear_has_gender_id();
}
inline ::google::protobuf::int32 chat_world_ntf::gender_id() const {
  return gender_id_;
}
inline void chat_world_ntf::set_gender_id(::google::protobuf::int32 value) {
  set_has_gender_id();
  gender_id_ = value;
}

// optional uint32 avatar_box_id = 8;
inline bool chat_world_ntf::has_avatar_box_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void chat_world_ntf::set_has_avatar_box_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void chat_world_ntf::clear_has_avatar_box_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void chat_world_ntf::clear_avatar_box_id() {
  avatar_box_id_ = 0u;
  clear_has_avatar_box_id();
}
inline ::google::protobuf::uint32 chat_world_ntf::avatar_box_id() const {
  return avatar_box_id_;
}
inline void chat_world_ntf::set_avatar_box_id(::google::protobuf::uint32 value) {
  set_has_avatar_box_id();
  avatar_box_id_ = value;
}

// optional int32 level = 9;
inline bool chat_world_ntf::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void chat_world_ntf::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void chat_world_ntf::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void chat_world_ntf::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 chat_world_ntf::level() const {
  return level_;
}
inline void chat_world_ntf::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 officer_grade = 10;
inline bool chat_world_ntf::has_officer_grade() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void chat_world_ntf::set_has_officer_grade() {
  _has_bits_[0] |= 0x00000200u;
}
inline void chat_world_ntf::clear_has_officer_grade() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void chat_world_ntf::clear_officer_grade() {
  officer_grade_ = 0u;
  clear_has_officer_grade();
}
inline ::google::protobuf::uint32 chat_world_ntf::officer_grade() const {
  return officer_grade_;
}
inline void chat_world_ntf::set_officer_grade(::google::protobuf::uint32 value) {
  set_has_officer_grade();
  officer_grade_ = value;
}

// optional .SProtoSpace.eWorldChatType world_chat_type = 11;
inline bool chat_world_ntf::has_world_chat_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void chat_world_ntf::set_has_world_chat_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void chat_world_ntf::clear_has_world_chat_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void chat_world_ntf::clear_world_chat_type() {
  world_chat_type_ = 0;
  clear_has_world_chat_type();
}
inline ::SProtoSpace::eWorldChatType chat_world_ntf::world_chat_type() const {
  return static_cast< ::SProtoSpace::eWorldChatType >(world_chat_type_);
}
inline void chat_world_ntf::set_world_chat_type(::SProtoSpace::eWorldChatType value) {
  assert(::SProtoSpace::eWorldChatType_IsValid(value));
  set_has_world_chat_type();
  world_chat_type_ = value;
}

// optional uint64 event_data = 12;
inline bool chat_world_ntf::has_event_data() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void chat_world_ntf::set_has_event_data() {
  _has_bits_[0] |= 0x00000800u;
}
inline void chat_world_ntf::clear_has_event_data() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void chat_world_ntf::clear_event_data() {
  event_data_ = GOOGLE_ULONGLONG(0);
  clear_has_event_data();
}
inline ::google::protobuf::uint64 chat_world_ntf::event_data() const {
  return event_data_;
}
inline void chat_world_ntf::set_event_data(::google::protobuf::uint64 value) {
  set_has_event_data();
  event_data_ = value;
}

// -------------------------------------------------------------------

// chat_team_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_team_req_id];
inline bool chat_team_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_team_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_team_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_team_req::clear_protoid() {
  protoid_ = 6003;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID chat_team_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void chat_team_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool chat_team_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_team_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_team_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_team_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 chat_team_req::role_id() const {
  return role_id_;
}
inline void chat_team_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool chat_team_req::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_team_req::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_team_req::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_team_req::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& chat_team_req::role_name() const {
  return *role_name_;
}
inline void chat_team_req::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_team_req::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_team_req::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_team_req::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* chat_team_req::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_team_req::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string role_avatar_url = 4;
inline bool chat_team_req::has_role_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_team_req::set_has_role_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_team_req::clear_has_role_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_team_req::clear_role_avatar_url() {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_->clear();
  }
  clear_has_role_avatar_url();
}
inline const ::std::string& chat_team_req::role_avatar_url() const {
  return *role_avatar_url_;
}
inline void chat_team_req::set_role_avatar_url(const ::std::string& value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_team_req::set_role_avatar_url(const char* value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_team_req::set_role_avatar_url(const char* value, size_t size) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_team_req::mutable_role_avatar_url() {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  return role_avatar_url_;
}
inline ::std::string* chat_team_req::release_role_avatar_url() {
  clear_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_avatar_url_;
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_team_req::set_allocated_role_avatar_url(::std::string* role_avatar_url) {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (role_avatar_url) {
    set_has_role_avatar_url();
    role_avatar_url_ = role_avatar_url;
  } else {
    clear_has_role_avatar_url();
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 team_id = 5;
inline bool chat_team_req::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void chat_team_req::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void chat_team_req::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void chat_team_req::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 chat_team_req::team_id() const {
  return team_id_;
}
inline void chat_team_req::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional string content = 6;
inline bool chat_team_req::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void chat_team_req::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void chat_team_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void chat_team_req::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& chat_team_req::content() const {
  return *content_;
}
inline void chat_team_req::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_team_req::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_team_req::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_team_req::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* chat_team_req::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_team_req::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gender_id = 7;
inline bool chat_team_req::has_gender_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void chat_team_req::set_has_gender_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void chat_team_req::clear_has_gender_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void chat_team_req::clear_gender_id() {
  gender_id_ = 0;
  clear_has_gender_id();
}
inline ::google::protobuf::int32 chat_team_req::gender_id() const {
  return gender_id_;
}
inline void chat_team_req::set_gender_id(::google::protobuf::int32 value) {
  set_has_gender_id();
  gender_id_ = value;
}

// optional uint32 avatar_box_id = 8;
inline bool chat_team_req::has_avatar_box_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void chat_team_req::set_has_avatar_box_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void chat_team_req::clear_has_avatar_box_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void chat_team_req::clear_avatar_box_id() {
  avatar_box_id_ = 0u;
  clear_has_avatar_box_id();
}
inline ::google::protobuf::uint32 chat_team_req::avatar_box_id() const {
  return avatar_box_id_;
}
inline void chat_team_req::set_avatar_box_id(::google::protobuf::uint32 value) {
  set_has_avatar_box_id();
  avatar_box_id_ = value;
}

// optional int32 level = 9;
inline bool chat_team_req::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void chat_team_req::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void chat_team_req::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void chat_team_req::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 chat_team_req::level() const {
  return level_;
}
inline void chat_team_req::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 officer_grade = 10;
inline bool chat_team_req::has_officer_grade() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void chat_team_req::set_has_officer_grade() {
  _has_bits_[0] |= 0x00000200u;
}
inline void chat_team_req::clear_has_officer_grade() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void chat_team_req::clear_officer_grade() {
  officer_grade_ = 0u;
  clear_has_officer_grade();
}
inline ::google::protobuf::uint32 chat_team_req::officer_grade() const {
  return officer_grade_;
}
inline void chat_team_req::set_officer_grade(::google::protobuf::uint32 value) {
  set_has_officer_grade();
  officer_grade_ = value;
}

// -------------------------------------------------------------------

// chat_team_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_team_ntf_id];
inline bool chat_team_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_team_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_team_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_team_ntf::clear_protoid() {
  protoid_ = 6004;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID chat_team_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void chat_team_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool chat_team_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_team_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_team_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_team_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 chat_team_ntf::role_id() const {
  return role_id_;
}
inline void chat_team_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool chat_team_ntf::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_team_ntf::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_team_ntf::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_team_ntf::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& chat_team_ntf::role_name() const {
  return *role_name_;
}
inline void chat_team_ntf::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_team_ntf::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_team_ntf::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_team_ntf::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* chat_team_ntf::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_team_ntf::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string role_avatar_url = 4;
inline bool chat_team_ntf::has_role_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_team_ntf::set_has_role_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_team_ntf::clear_has_role_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_team_ntf::clear_role_avatar_url() {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_->clear();
  }
  clear_has_role_avatar_url();
}
inline const ::std::string& chat_team_ntf::role_avatar_url() const {
  return *role_avatar_url_;
}
inline void chat_team_ntf::set_role_avatar_url(const ::std::string& value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_team_ntf::set_role_avatar_url(const char* value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_team_ntf::set_role_avatar_url(const char* value, size_t size) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_team_ntf::mutable_role_avatar_url() {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  return role_avatar_url_;
}
inline ::std::string* chat_team_ntf::release_role_avatar_url() {
  clear_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_avatar_url_;
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_team_ntf::set_allocated_role_avatar_url(::std::string* role_avatar_url) {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (role_avatar_url) {
    set_has_role_avatar_url();
    role_avatar_url_ = role_avatar_url;
  } else {
    clear_has_role_avatar_url();
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 team_id = 5;
inline bool chat_team_ntf::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void chat_team_ntf::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void chat_team_ntf::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void chat_team_ntf::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 chat_team_ntf::team_id() const {
  return team_id_;
}
inline void chat_team_ntf::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional string content = 6;
inline bool chat_team_ntf::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void chat_team_ntf::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void chat_team_ntf::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void chat_team_ntf::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& chat_team_ntf::content() const {
  return *content_;
}
inline void chat_team_ntf::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_team_ntf::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_team_ntf::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_team_ntf::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* chat_team_ntf::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_team_ntf::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gender_id = 7;
inline bool chat_team_ntf::has_gender_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void chat_team_ntf::set_has_gender_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void chat_team_ntf::clear_has_gender_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void chat_team_ntf::clear_gender_id() {
  gender_id_ = 0;
  clear_has_gender_id();
}
inline ::google::protobuf::int32 chat_team_ntf::gender_id() const {
  return gender_id_;
}
inline void chat_team_ntf::set_gender_id(::google::protobuf::int32 value) {
  set_has_gender_id();
  gender_id_ = value;
}

// optional uint32 avatar_box_id = 8;
inline bool chat_team_ntf::has_avatar_box_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void chat_team_ntf::set_has_avatar_box_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void chat_team_ntf::clear_has_avatar_box_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void chat_team_ntf::clear_avatar_box_id() {
  avatar_box_id_ = 0u;
  clear_has_avatar_box_id();
}
inline ::google::protobuf::uint32 chat_team_ntf::avatar_box_id() const {
  return avatar_box_id_;
}
inline void chat_team_ntf::set_avatar_box_id(::google::protobuf::uint32 value) {
  set_has_avatar_box_id();
  avatar_box_id_ = value;
}

// optional int32 level = 9;
inline bool chat_team_ntf::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void chat_team_ntf::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void chat_team_ntf::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void chat_team_ntf::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 chat_team_ntf::level() const {
  return level_;
}
inline void chat_team_ntf::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 officer_grade = 10;
inline bool chat_team_ntf::has_officer_grade() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void chat_team_ntf::set_has_officer_grade() {
  _has_bits_[0] |= 0x00000200u;
}
inline void chat_team_ntf::clear_has_officer_grade() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void chat_team_ntf::clear_officer_grade() {
  officer_grade_ = 0u;
  clear_has_officer_grade();
}
inline ::google::protobuf::uint32 chat_team_ntf::officer_grade() const {
  return officer_grade_;
}
inline void chat_team_ntf::set_officer_grade(::google::protobuf::uint32 value) {
  set_has_officer_grade();
  officer_grade_ = value;
}

// -------------------------------------------------------------------

// chat_family_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_family_req_id];
inline bool chat_family_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_family_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_family_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_family_req::clear_protoid() {
  protoid_ = 6005;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID chat_family_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void chat_family_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool chat_family_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_family_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_family_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_family_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 chat_family_req::role_id() const {
  return role_id_;
}
inline void chat_family_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool chat_family_req::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_family_req::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_family_req::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_family_req::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& chat_family_req::role_name() const {
  return *role_name_;
}
inline void chat_family_req::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_family_req::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_family_req::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_family_req::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* chat_family_req::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_family_req::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string role_avatar_url = 4;
inline bool chat_family_req::has_role_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_family_req::set_has_role_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_family_req::clear_has_role_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_family_req::clear_role_avatar_url() {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_->clear();
  }
  clear_has_role_avatar_url();
}
inline const ::std::string& chat_family_req::role_avatar_url() const {
  return *role_avatar_url_;
}
inline void chat_family_req::set_role_avatar_url(const ::std::string& value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_family_req::set_role_avatar_url(const char* value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_family_req::set_role_avatar_url(const char* value, size_t size) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_family_req::mutable_role_avatar_url() {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  return role_avatar_url_;
}
inline ::std::string* chat_family_req::release_role_avatar_url() {
  clear_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_avatar_url_;
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_family_req::set_allocated_role_avatar_url(::std::string* role_avatar_url) {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (role_avatar_url) {
    set_has_role_avatar_url();
    role_avatar_url_ = role_avatar_url;
  } else {
    clear_has_role_avatar_url();
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 family_id = 5;
inline bool chat_family_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void chat_family_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void chat_family_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void chat_family_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 chat_family_req::family_id() const {
  return family_id_;
}
inline void chat_family_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional string content = 6;
inline bool chat_family_req::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void chat_family_req::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void chat_family_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void chat_family_req::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& chat_family_req::content() const {
  return *content_;
}
inline void chat_family_req::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_family_req::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_family_req::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_family_req::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* chat_family_req::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_family_req::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gender_id = 7;
inline bool chat_family_req::has_gender_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void chat_family_req::set_has_gender_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void chat_family_req::clear_has_gender_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void chat_family_req::clear_gender_id() {
  gender_id_ = 0;
  clear_has_gender_id();
}
inline ::google::protobuf::int32 chat_family_req::gender_id() const {
  return gender_id_;
}
inline void chat_family_req::set_gender_id(::google::protobuf::int32 value) {
  set_has_gender_id();
  gender_id_ = value;
}

// optional uint32 avatar_box_id = 8;
inline bool chat_family_req::has_avatar_box_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void chat_family_req::set_has_avatar_box_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void chat_family_req::clear_has_avatar_box_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void chat_family_req::clear_avatar_box_id() {
  avatar_box_id_ = 0u;
  clear_has_avatar_box_id();
}
inline ::google::protobuf::uint32 chat_family_req::avatar_box_id() const {
  return avatar_box_id_;
}
inline void chat_family_req::set_avatar_box_id(::google::protobuf::uint32 value) {
  set_has_avatar_box_id();
  avatar_box_id_ = value;
}

// optional int32 level = 9;
inline bool chat_family_req::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void chat_family_req::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void chat_family_req::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void chat_family_req::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 chat_family_req::level() const {
  return level_;
}
inline void chat_family_req::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 officer_grade = 10;
inline bool chat_family_req::has_officer_grade() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void chat_family_req::set_has_officer_grade() {
  _has_bits_[0] |= 0x00000200u;
}
inline void chat_family_req::clear_has_officer_grade() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void chat_family_req::clear_officer_grade() {
  officer_grade_ = 0u;
  clear_has_officer_grade();
}
inline ::google::protobuf::uint32 chat_family_req::officer_grade() const {
  return officer_grade_;
}
inline void chat_family_req::set_officer_grade(::google::protobuf::uint32 value) {
  set_has_officer_grade();
  officer_grade_ = value;
}

// -------------------------------------------------------------------

// chat_family_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_family_ntf_id];
inline bool chat_family_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_family_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_family_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_family_ntf::clear_protoid() {
  protoid_ = 6006;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID chat_family_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void chat_family_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool chat_family_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_family_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_family_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_family_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 chat_family_ntf::role_id() const {
  return role_id_;
}
inline void chat_family_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool chat_family_ntf::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_family_ntf::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_family_ntf::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_family_ntf::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& chat_family_ntf::role_name() const {
  return *role_name_;
}
inline void chat_family_ntf::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_family_ntf::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_family_ntf::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_family_ntf::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* chat_family_ntf::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_family_ntf::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string role_avatar_url = 4;
inline bool chat_family_ntf::has_role_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_family_ntf::set_has_role_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_family_ntf::clear_has_role_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_family_ntf::clear_role_avatar_url() {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_->clear();
  }
  clear_has_role_avatar_url();
}
inline const ::std::string& chat_family_ntf::role_avatar_url() const {
  return *role_avatar_url_;
}
inline void chat_family_ntf::set_role_avatar_url(const ::std::string& value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_family_ntf::set_role_avatar_url(const char* value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_family_ntf::set_role_avatar_url(const char* value, size_t size) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_family_ntf::mutable_role_avatar_url() {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  return role_avatar_url_;
}
inline ::std::string* chat_family_ntf::release_role_avatar_url() {
  clear_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_avatar_url_;
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_family_ntf::set_allocated_role_avatar_url(::std::string* role_avatar_url) {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (role_avatar_url) {
    set_has_role_avatar_url();
    role_avatar_url_ = role_avatar_url;
  } else {
    clear_has_role_avatar_url();
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 family_id = 5;
inline bool chat_family_ntf::has_family_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void chat_family_ntf::set_has_family_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void chat_family_ntf::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void chat_family_ntf::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 chat_family_ntf::family_id() const {
  return family_id_;
}
inline void chat_family_ntf::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional string content = 6;
inline bool chat_family_ntf::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void chat_family_ntf::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void chat_family_ntf::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void chat_family_ntf::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& chat_family_ntf::content() const {
  return *content_;
}
inline void chat_family_ntf::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_family_ntf::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_family_ntf::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_family_ntf::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* chat_family_ntf::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_family_ntf::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gender_id = 7;
inline bool chat_family_ntf::has_gender_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void chat_family_ntf::set_has_gender_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void chat_family_ntf::clear_has_gender_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void chat_family_ntf::clear_gender_id() {
  gender_id_ = 0;
  clear_has_gender_id();
}
inline ::google::protobuf::int32 chat_family_ntf::gender_id() const {
  return gender_id_;
}
inline void chat_family_ntf::set_gender_id(::google::protobuf::int32 value) {
  set_has_gender_id();
  gender_id_ = value;
}

// optional uint32 avatar_box_id = 8;
inline bool chat_family_ntf::has_avatar_box_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void chat_family_ntf::set_has_avatar_box_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void chat_family_ntf::clear_has_avatar_box_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void chat_family_ntf::clear_avatar_box_id() {
  avatar_box_id_ = 0u;
  clear_has_avatar_box_id();
}
inline ::google::protobuf::uint32 chat_family_ntf::avatar_box_id() const {
  return avatar_box_id_;
}
inline void chat_family_ntf::set_avatar_box_id(::google::protobuf::uint32 value) {
  set_has_avatar_box_id();
  avatar_box_id_ = value;
}

// optional int32 level = 9;
inline bool chat_family_ntf::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void chat_family_ntf::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void chat_family_ntf::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void chat_family_ntf::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 chat_family_ntf::level() const {
  return level_;
}
inline void chat_family_ntf::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 officer_grade = 10;
inline bool chat_family_ntf::has_officer_grade() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void chat_family_ntf::set_has_officer_grade() {
  _has_bits_[0] |= 0x00000200u;
}
inline void chat_family_ntf::clear_has_officer_grade() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void chat_family_ntf::clear_officer_grade() {
  officer_grade_ = 0u;
  clear_has_officer_grade();
}
inline ::google::protobuf::uint32 chat_family_ntf::officer_grade() const {
  return officer_grade_;
}
inline void chat_family_ntf::set_officer_grade(::google::protobuf::uint32 value) {
  set_has_officer_grade();
  officer_grade_ = value;
}

// -------------------------------------------------------------------

// chat_private_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_private_req_id];
inline bool chat_private_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_private_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_private_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_private_req::clear_protoid() {
  protoid_ = 6007;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID chat_private_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void chat_private_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 to_role_id = 2;
inline bool chat_private_req::has_to_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_private_req::set_has_to_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_private_req::clear_has_to_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_private_req::clear_to_role_id() {
  to_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_role_id();
}
inline ::google::protobuf::uint64 chat_private_req::to_role_id() const {
  return to_role_id_;
}
inline void chat_private_req::set_to_role_id(::google::protobuf::uint64 value) {
  set_has_to_role_id();
  to_role_id_ = value;
}

// optional string role_name = 3;
inline bool chat_private_req::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_private_req::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_private_req::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_private_req::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& chat_private_req::role_name() const {
  return *role_name_;
}
inline void chat_private_req::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_private_req::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_private_req::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_private_req::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* chat_private_req::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_private_req::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string role_avatar_url = 4;
inline bool chat_private_req::has_role_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_private_req::set_has_role_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_private_req::clear_has_role_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_private_req::clear_role_avatar_url() {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_->clear();
  }
  clear_has_role_avatar_url();
}
inline const ::std::string& chat_private_req::role_avatar_url() const {
  return *role_avatar_url_;
}
inline void chat_private_req::set_role_avatar_url(const ::std::string& value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_private_req::set_role_avatar_url(const char* value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_private_req::set_role_avatar_url(const char* value, size_t size) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_private_req::mutable_role_avatar_url() {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  return role_avatar_url_;
}
inline ::std::string* chat_private_req::release_role_avatar_url() {
  clear_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_avatar_url_;
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_private_req::set_allocated_role_avatar_url(::std::string* role_avatar_url) {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (role_avatar_url) {
    set_has_role_avatar_url();
    role_avatar_url_ = role_avatar_url;
  } else {
    clear_has_role_avatar_url();
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 from_role_id = 5;
inline bool chat_private_req::has_from_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void chat_private_req::set_has_from_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void chat_private_req::clear_has_from_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void chat_private_req::clear_from_role_id() {
  from_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_role_id();
}
inline ::google::protobuf::uint64 chat_private_req::from_role_id() const {
  return from_role_id_;
}
inline void chat_private_req::set_from_role_id(::google::protobuf::uint64 value) {
  set_has_from_role_id();
  from_role_id_ = value;
}

// optional string content = 6;
inline bool chat_private_req::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void chat_private_req::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void chat_private_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void chat_private_req::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& chat_private_req::content() const {
  return *content_;
}
inline void chat_private_req::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_private_req::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_private_req::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_private_req::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* chat_private_req::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_private_req::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gender_id = 7;
inline bool chat_private_req::has_gender_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void chat_private_req::set_has_gender_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void chat_private_req::clear_has_gender_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void chat_private_req::clear_gender_id() {
  gender_id_ = 0;
  clear_has_gender_id();
}
inline ::google::protobuf::int32 chat_private_req::gender_id() const {
  return gender_id_;
}
inline void chat_private_req::set_gender_id(::google::protobuf::int32 value) {
  set_has_gender_id();
  gender_id_ = value;
}

// optional uint32 avatar_box_id = 8;
inline bool chat_private_req::has_avatar_box_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void chat_private_req::set_has_avatar_box_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void chat_private_req::clear_has_avatar_box_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void chat_private_req::clear_avatar_box_id() {
  avatar_box_id_ = 0u;
  clear_has_avatar_box_id();
}
inline ::google::protobuf::uint32 chat_private_req::avatar_box_id() const {
  return avatar_box_id_;
}
inline void chat_private_req::set_avatar_box_id(::google::protobuf::uint32 value) {
  set_has_avatar_box_id();
  avatar_box_id_ = value;
}

// optional int32 level = 9;
inline bool chat_private_req::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void chat_private_req::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void chat_private_req::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void chat_private_req::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 chat_private_req::level() const {
  return level_;
}
inline void chat_private_req::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 officer_grade = 10;
inline bool chat_private_req::has_officer_grade() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void chat_private_req::set_has_officer_grade() {
  _has_bits_[0] |= 0x00000200u;
}
inline void chat_private_req::clear_has_officer_grade() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void chat_private_req::clear_officer_grade() {
  officer_grade_ = 0u;
  clear_has_officer_grade();
}
inline ::google::protobuf::uint32 chat_private_req::officer_grade() const {
  return officer_grade_;
}
inline void chat_private_req::set_officer_grade(::google::protobuf::uint32 value) {
  set_has_officer_grade();
  officer_grade_ = value;
}

// -------------------------------------------------------------------

// chat_private_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_private_ntf_id];
inline bool chat_private_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_private_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_private_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_private_ntf::clear_protoid() {
  protoid_ = 6008;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID chat_private_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void chat_private_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 to_role_id = 2;
inline bool chat_private_ntf::has_to_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_private_ntf::set_has_to_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_private_ntf::clear_has_to_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_private_ntf::clear_to_role_id() {
  to_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_role_id();
}
inline ::google::protobuf::uint64 chat_private_ntf::to_role_id() const {
  return to_role_id_;
}
inline void chat_private_ntf::set_to_role_id(::google::protobuf::uint64 value) {
  set_has_to_role_id();
  to_role_id_ = value;
}

// optional string role_name = 3;
inline bool chat_private_ntf::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_private_ntf::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_private_ntf::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_private_ntf::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& chat_private_ntf::role_name() const {
  return *role_name_;
}
inline void chat_private_ntf::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_private_ntf::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_private_ntf::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_private_ntf::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* chat_private_ntf::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_private_ntf::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string role_avatar_url = 4;
inline bool chat_private_ntf::has_role_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_private_ntf::set_has_role_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_private_ntf::clear_has_role_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_private_ntf::clear_role_avatar_url() {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_->clear();
  }
  clear_has_role_avatar_url();
}
inline const ::std::string& chat_private_ntf::role_avatar_url() const {
  return *role_avatar_url_;
}
inline void chat_private_ntf::set_role_avatar_url(const ::std::string& value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_private_ntf::set_role_avatar_url(const char* value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_private_ntf::set_role_avatar_url(const char* value, size_t size) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_private_ntf::mutable_role_avatar_url() {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  return role_avatar_url_;
}
inline ::std::string* chat_private_ntf::release_role_avatar_url() {
  clear_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_avatar_url_;
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_private_ntf::set_allocated_role_avatar_url(::std::string* role_avatar_url) {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (role_avatar_url) {
    set_has_role_avatar_url();
    role_avatar_url_ = role_avatar_url;
  } else {
    clear_has_role_avatar_url();
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 from_role_id = 5;
inline bool chat_private_ntf::has_from_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void chat_private_ntf::set_has_from_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void chat_private_ntf::clear_has_from_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void chat_private_ntf::clear_from_role_id() {
  from_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_role_id();
}
inline ::google::protobuf::uint64 chat_private_ntf::from_role_id() const {
  return from_role_id_;
}
inline void chat_private_ntf::set_from_role_id(::google::protobuf::uint64 value) {
  set_has_from_role_id();
  from_role_id_ = value;
}

// optional string content = 6;
inline bool chat_private_ntf::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void chat_private_ntf::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void chat_private_ntf::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void chat_private_ntf::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& chat_private_ntf::content() const {
  return *content_;
}
inline void chat_private_ntf::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_private_ntf::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_private_ntf::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_private_ntf::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* chat_private_ntf::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_private_ntf::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gender_id = 7;
inline bool chat_private_ntf::has_gender_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void chat_private_ntf::set_has_gender_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void chat_private_ntf::clear_has_gender_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void chat_private_ntf::clear_gender_id() {
  gender_id_ = 0;
  clear_has_gender_id();
}
inline ::google::protobuf::int32 chat_private_ntf::gender_id() const {
  return gender_id_;
}
inline void chat_private_ntf::set_gender_id(::google::protobuf::int32 value) {
  set_has_gender_id();
  gender_id_ = value;
}

// optional uint32 avatar_box_id = 8;
inline bool chat_private_ntf::has_avatar_box_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void chat_private_ntf::set_has_avatar_box_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void chat_private_ntf::clear_has_avatar_box_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void chat_private_ntf::clear_avatar_box_id() {
  avatar_box_id_ = 0u;
  clear_has_avatar_box_id();
}
inline ::google::protobuf::uint32 chat_private_ntf::avatar_box_id() const {
  return avatar_box_id_;
}
inline void chat_private_ntf::set_avatar_box_id(::google::protobuf::uint32 value) {
  set_has_avatar_box_id();
  avatar_box_id_ = value;
}

// optional int32 level = 9;
inline bool chat_private_ntf::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void chat_private_ntf::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void chat_private_ntf::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void chat_private_ntf::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 chat_private_ntf::level() const {
  return level_;
}
inline void chat_private_ntf::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 officer_grade = 10;
inline bool chat_private_ntf::has_officer_grade() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void chat_private_ntf::set_has_officer_grade() {
  _has_bits_[0] |= 0x00000200u;
}
inline void chat_private_ntf::clear_has_officer_grade() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void chat_private_ntf::clear_officer_grade() {
  officer_grade_ = 0u;
  clear_has_officer_grade();
}
inline ::google::protobuf::uint32 chat_private_ntf::officer_grade() const {
  return officer_grade_;
}
inline void chat_private_ntf::set_officer_grade(::google::protobuf::uint32 value) {
  set_has_officer_grade();
  officer_grade_ = value;
}

// -------------------------------------------------------------------

// chat_world_channel_change_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_channel_change_req_id];
inline bool chat_world_channel_change_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_world_channel_change_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_world_channel_change_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_world_channel_change_req::clear_protoid() {
  protoid_ = 6009;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID chat_world_channel_change_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void chat_world_channel_change_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 to_new_channel = 2;
inline bool chat_world_channel_change_req::has_to_new_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_world_channel_change_req::set_has_to_new_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_world_channel_change_req::clear_has_to_new_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_world_channel_change_req::clear_to_new_channel() {
  to_new_channel_ = 0u;
  clear_has_to_new_channel();
}
inline ::google::protobuf::uint32 chat_world_channel_change_req::to_new_channel() const {
  return to_new_channel_;
}
inline void chat_world_channel_change_req::set_to_new_channel(::google::protobuf::uint32 value) {
  set_has_to_new_channel();
  to_new_channel_ = value;
}

// -------------------------------------------------------------------

// chat_world_channel_change_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_channel_change_ack_id];
inline bool chat_world_channel_change_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_world_channel_change_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_world_channel_change_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_world_channel_change_ack::clear_protoid() {
  protoid_ = 6010;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID chat_world_channel_change_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void chat_world_channel_change_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 rec_code = 2;
inline bool chat_world_channel_change_ack::has_rec_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_world_channel_change_ack::set_has_rec_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_world_channel_change_ack::clear_has_rec_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_world_channel_change_ack::clear_rec_code() {
  rec_code_ = 0;
  clear_has_rec_code();
}
inline ::google::protobuf::int32 chat_world_channel_change_ack::rec_code() const {
  return rec_code_;
}
inline void chat_world_channel_change_ack::set_rec_code(::google::protobuf::int32 value) {
  set_has_rec_code();
  rec_code_ = value;
}

// optional uint32 new_channel = 3;
inline bool chat_world_channel_change_ack::has_new_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_world_channel_change_ack::set_has_new_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_world_channel_change_ack::clear_has_new_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_world_channel_change_ack::clear_new_channel() {
  new_channel_ = 0u;
  clear_has_new_channel();
}
inline ::google::protobuf::uint32 chat_world_channel_change_ack::new_channel() const {
  return new_channel_;
}
inline void chat_world_channel_change_ack::set_new_channel(::google::protobuf::uint32 value) {
  set_has_new_channel();
  new_channel_ = value;
}

// -------------------------------------------------------------------

// chat_world_channel_random_nft

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_world_channel_random_nft_id];
inline bool chat_world_channel_random_nft::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_world_channel_random_nft::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_world_channel_random_nft::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_world_channel_random_nft::clear_protoid() {
  protoid_ = 6011;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID chat_world_channel_random_nft::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void chat_world_channel_random_nft::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 channel = 2;
inline bool chat_world_channel_random_nft::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_world_channel_random_nft::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_world_channel_random_nft::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_world_channel_random_nft::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 chat_world_channel_random_nft::channel() const {
  return channel_;
}
inline void chat_world_channel_random_nft::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
}

// -------------------------------------------------------------------

// chat_broadcast_all_area_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_broadcast_all_area_req_id];
inline bool chat_broadcast_all_area_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_broadcast_all_area_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_broadcast_all_area_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_broadcast_all_area_req::clear_protoid() {
  protoid_ = 6012;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID chat_broadcast_all_area_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void chat_broadcast_all_area_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 to_role_id = 2;
inline bool chat_broadcast_all_area_req::has_to_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_broadcast_all_area_req::set_has_to_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_broadcast_all_area_req::clear_has_to_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_broadcast_all_area_req::clear_to_role_id() {
  to_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_role_id();
}
inline ::google::protobuf::uint64 chat_broadcast_all_area_req::to_role_id() const {
  return to_role_id_;
}
inline void chat_broadcast_all_area_req::set_to_role_id(::google::protobuf::uint64 value) {
  set_has_to_role_id();
  to_role_id_ = value;
}

// optional string role_name = 3;
inline bool chat_broadcast_all_area_req::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_broadcast_all_area_req::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_broadcast_all_area_req::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_broadcast_all_area_req::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& chat_broadcast_all_area_req::role_name() const {
  return *role_name_;
}
inline void chat_broadcast_all_area_req::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_broadcast_all_area_req::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_broadcast_all_area_req::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_broadcast_all_area_req::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* chat_broadcast_all_area_req::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_broadcast_all_area_req::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string role_avatar_url = 4;
inline bool chat_broadcast_all_area_req::has_role_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_broadcast_all_area_req::set_has_role_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_broadcast_all_area_req::clear_has_role_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_broadcast_all_area_req::clear_role_avatar_url() {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_->clear();
  }
  clear_has_role_avatar_url();
}
inline const ::std::string& chat_broadcast_all_area_req::role_avatar_url() const {
  return *role_avatar_url_;
}
inline void chat_broadcast_all_area_req::set_role_avatar_url(const ::std::string& value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_broadcast_all_area_req::set_role_avatar_url(const char* value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_broadcast_all_area_req::set_role_avatar_url(const char* value, size_t size) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_broadcast_all_area_req::mutable_role_avatar_url() {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  return role_avatar_url_;
}
inline ::std::string* chat_broadcast_all_area_req::release_role_avatar_url() {
  clear_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_avatar_url_;
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_broadcast_all_area_req::set_allocated_role_avatar_url(::std::string* role_avatar_url) {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (role_avatar_url) {
    set_has_role_avatar_url();
    role_avatar_url_ = role_avatar_url;
  } else {
    clear_has_role_avatar_url();
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 from_role_id = 5;
inline bool chat_broadcast_all_area_req::has_from_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void chat_broadcast_all_area_req::set_has_from_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void chat_broadcast_all_area_req::clear_has_from_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void chat_broadcast_all_area_req::clear_from_role_id() {
  from_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_role_id();
}
inline ::google::protobuf::uint64 chat_broadcast_all_area_req::from_role_id() const {
  return from_role_id_;
}
inline void chat_broadcast_all_area_req::set_from_role_id(::google::protobuf::uint64 value) {
  set_has_from_role_id();
  from_role_id_ = value;
}

// optional string content = 6;
inline bool chat_broadcast_all_area_req::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void chat_broadcast_all_area_req::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void chat_broadcast_all_area_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void chat_broadcast_all_area_req::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& chat_broadcast_all_area_req::content() const {
  return *content_;
}
inline void chat_broadcast_all_area_req::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_broadcast_all_area_req::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_broadcast_all_area_req::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_broadcast_all_area_req::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* chat_broadcast_all_area_req::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_broadcast_all_area_req::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gender_id = 7;
inline bool chat_broadcast_all_area_req::has_gender_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void chat_broadcast_all_area_req::set_has_gender_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void chat_broadcast_all_area_req::clear_has_gender_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void chat_broadcast_all_area_req::clear_gender_id() {
  gender_id_ = 0;
  clear_has_gender_id();
}
inline ::google::protobuf::int32 chat_broadcast_all_area_req::gender_id() const {
  return gender_id_;
}
inline void chat_broadcast_all_area_req::set_gender_id(::google::protobuf::int32 value) {
  set_has_gender_id();
  gender_id_ = value;
}

// optional uint32 avatar_box_id = 8;
inline bool chat_broadcast_all_area_req::has_avatar_box_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void chat_broadcast_all_area_req::set_has_avatar_box_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void chat_broadcast_all_area_req::clear_has_avatar_box_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void chat_broadcast_all_area_req::clear_avatar_box_id() {
  avatar_box_id_ = 0u;
  clear_has_avatar_box_id();
}
inline ::google::protobuf::uint32 chat_broadcast_all_area_req::avatar_box_id() const {
  return avatar_box_id_;
}
inline void chat_broadcast_all_area_req::set_avatar_box_id(::google::protobuf::uint32 value) {
  set_has_avatar_box_id();
  avatar_box_id_ = value;
}

// optional int32 level = 9;
inline bool chat_broadcast_all_area_req::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void chat_broadcast_all_area_req::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void chat_broadcast_all_area_req::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void chat_broadcast_all_area_req::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 chat_broadcast_all_area_req::level() const {
  return level_;
}
inline void chat_broadcast_all_area_req::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 officer_grade = 10;
inline bool chat_broadcast_all_area_req::has_officer_grade() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void chat_broadcast_all_area_req::set_has_officer_grade() {
  _has_bits_[0] |= 0x00000200u;
}
inline void chat_broadcast_all_area_req::clear_has_officer_grade() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void chat_broadcast_all_area_req::clear_officer_grade() {
  officer_grade_ = 0u;
  clear_has_officer_grade();
}
inline ::google::protobuf::uint32 chat_broadcast_all_area_req::officer_grade() const {
  return officer_grade_;
}
inline void chat_broadcast_all_area_req::set_officer_grade(::google::protobuf::uint32 value) {
  set_has_officer_grade();
  officer_grade_ = value;
}

// -------------------------------------------------------------------

// chat_broadcast_all_area_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_broadcast_all_area_ack_id];
inline bool chat_broadcast_all_area_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_broadcast_all_area_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_broadcast_all_area_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_broadcast_all_area_ack::clear_protoid() {
  protoid_ = 6013;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID chat_broadcast_all_area_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void chat_broadcast_all_area_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 rec_code = 2;
inline bool chat_broadcast_all_area_ack::has_rec_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_broadcast_all_area_ack::set_has_rec_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_broadcast_all_area_ack::clear_has_rec_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_broadcast_all_area_ack::clear_rec_code() {
  rec_code_ = 0;
  clear_has_rec_code();
}
inline ::google::protobuf::int32 chat_broadcast_all_area_ack::rec_code() const {
  return rec_code_;
}
inline void chat_broadcast_all_area_ack::set_rec_code(::google::protobuf::int32 value) {
  set_has_rec_code();
  rec_code_ = value;
}

// repeated uint64 succeed_areas = 3;
inline int chat_broadcast_all_area_ack::succeed_areas_size() const {
  return succeed_areas_.size();
}
inline void chat_broadcast_all_area_ack::clear_succeed_areas() {
  succeed_areas_.Clear();
}
inline ::google::protobuf::uint64 chat_broadcast_all_area_ack::succeed_areas(int index) const {
  return succeed_areas_.Get(index);
}
inline void chat_broadcast_all_area_ack::set_succeed_areas(int index, ::google::protobuf::uint64 value) {
  succeed_areas_.Set(index, value);
}
inline void chat_broadcast_all_area_ack::add_succeed_areas(::google::protobuf::uint64 value) {
  succeed_areas_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
chat_broadcast_all_area_ack::succeed_areas() const {
  return succeed_areas_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
chat_broadcast_all_area_ack::mutable_succeed_areas() {
  return &succeed_areas_;
}

// repeated uint64 failed_areas = 4;
inline int chat_broadcast_all_area_ack::failed_areas_size() const {
  return failed_areas_.size();
}
inline void chat_broadcast_all_area_ack::clear_failed_areas() {
  failed_areas_.Clear();
}
inline ::google::protobuf::uint64 chat_broadcast_all_area_ack::failed_areas(int index) const {
  return failed_areas_.Get(index);
}
inline void chat_broadcast_all_area_ack::set_failed_areas(int index, ::google::protobuf::uint64 value) {
  failed_areas_.Set(index, value);
}
inline void chat_broadcast_all_area_ack::add_failed_areas(::google::protobuf::uint64 value) {
  failed_areas_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
chat_broadcast_all_area_ack::failed_areas() const {
  return failed_areas_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
chat_broadcast_all_area_ack::mutable_failed_areas() {
  return &failed_areas_;
}

// -------------------------------------------------------------------

// chat_broadcast_all_area_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_broadcast_all_area_ntf_id];
inline bool chat_broadcast_all_area_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_broadcast_all_area_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_broadcast_all_area_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_broadcast_all_area_ntf::clear_protoid() {
  protoid_ = 6014;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID chat_broadcast_all_area_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void chat_broadcast_all_area_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 to_role_id = 2;
inline bool chat_broadcast_all_area_ntf::has_to_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_broadcast_all_area_ntf::set_has_to_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_broadcast_all_area_ntf::clear_has_to_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_broadcast_all_area_ntf::clear_to_role_id() {
  to_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_role_id();
}
inline ::google::protobuf::uint64 chat_broadcast_all_area_ntf::to_role_id() const {
  return to_role_id_;
}
inline void chat_broadcast_all_area_ntf::set_to_role_id(::google::protobuf::uint64 value) {
  set_has_to_role_id();
  to_role_id_ = value;
}

// optional string role_name = 3;
inline bool chat_broadcast_all_area_ntf::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_broadcast_all_area_ntf::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_broadcast_all_area_ntf::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_broadcast_all_area_ntf::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& chat_broadcast_all_area_ntf::role_name() const {
  return *role_name_;
}
inline void chat_broadcast_all_area_ntf::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_broadcast_all_area_ntf::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_broadcast_all_area_ntf::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_broadcast_all_area_ntf::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* chat_broadcast_all_area_ntf::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_broadcast_all_area_ntf::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string role_avatar_url = 4;
inline bool chat_broadcast_all_area_ntf::has_role_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_broadcast_all_area_ntf::set_has_role_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_broadcast_all_area_ntf::clear_has_role_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_broadcast_all_area_ntf::clear_role_avatar_url() {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_->clear();
  }
  clear_has_role_avatar_url();
}
inline const ::std::string& chat_broadcast_all_area_ntf::role_avatar_url() const {
  return *role_avatar_url_;
}
inline void chat_broadcast_all_area_ntf::set_role_avatar_url(const ::std::string& value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_broadcast_all_area_ntf::set_role_avatar_url(const char* value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_broadcast_all_area_ntf::set_role_avatar_url(const char* value, size_t size) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_broadcast_all_area_ntf::mutable_role_avatar_url() {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  return role_avatar_url_;
}
inline ::std::string* chat_broadcast_all_area_ntf::release_role_avatar_url() {
  clear_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_avatar_url_;
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_broadcast_all_area_ntf::set_allocated_role_avatar_url(::std::string* role_avatar_url) {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (role_avatar_url) {
    set_has_role_avatar_url();
    role_avatar_url_ = role_avatar_url;
  } else {
    clear_has_role_avatar_url();
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 from_role_id = 5;
inline bool chat_broadcast_all_area_ntf::has_from_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void chat_broadcast_all_area_ntf::set_has_from_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void chat_broadcast_all_area_ntf::clear_has_from_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void chat_broadcast_all_area_ntf::clear_from_role_id() {
  from_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_role_id();
}
inline ::google::protobuf::uint64 chat_broadcast_all_area_ntf::from_role_id() const {
  return from_role_id_;
}
inline void chat_broadcast_all_area_ntf::set_from_role_id(::google::protobuf::uint64 value) {
  set_has_from_role_id();
  from_role_id_ = value;
}

// optional string content = 6;
inline bool chat_broadcast_all_area_ntf::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void chat_broadcast_all_area_ntf::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void chat_broadcast_all_area_ntf::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void chat_broadcast_all_area_ntf::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& chat_broadcast_all_area_ntf::content() const {
  return *content_;
}
inline void chat_broadcast_all_area_ntf::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_broadcast_all_area_ntf::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_broadcast_all_area_ntf::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_broadcast_all_area_ntf::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* chat_broadcast_all_area_ntf::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_broadcast_all_area_ntf::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gender_id = 7;
inline bool chat_broadcast_all_area_ntf::has_gender_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void chat_broadcast_all_area_ntf::set_has_gender_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void chat_broadcast_all_area_ntf::clear_has_gender_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void chat_broadcast_all_area_ntf::clear_gender_id() {
  gender_id_ = 0;
  clear_has_gender_id();
}
inline ::google::protobuf::int32 chat_broadcast_all_area_ntf::gender_id() const {
  return gender_id_;
}
inline void chat_broadcast_all_area_ntf::set_gender_id(::google::protobuf::int32 value) {
  set_has_gender_id();
  gender_id_ = value;
}

// optional uint32 avatar_box_id = 8;
inline bool chat_broadcast_all_area_ntf::has_avatar_box_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void chat_broadcast_all_area_ntf::set_has_avatar_box_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void chat_broadcast_all_area_ntf::clear_has_avatar_box_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void chat_broadcast_all_area_ntf::clear_avatar_box_id() {
  avatar_box_id_ = 0u;
  clear_has_avatar_box_id();
}
inline ::google::protobuf::uint32 chat_broadcast_all_area_ntf::avatar_box_id() const {
  return avatar_box_id_;
}
inline void chat_broadcast_all_area_ntf::set_avatar_box_id(::google::protobuf::uint32 value) {
  set_has_avatar_box_id();
  avatar_box_id_ = value;
}

// optional int32 level = 9;
inline bool chat_broadcast_all_area_ntf::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void chat_broadcast_all_area_ntf::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void chat_broadcast_all_area_ntf::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void chat_broadcast_all_area_ntf::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 chat_broadcast_all_area_ntf::level() const {
  return level_;
}
inline void chat_broadcast_all_area_ntf::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 officer_grade = 10;
inline bool chat_broadcast_all_area_ntf::has_officer_grade() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void chat_broadcast_all_area_ntf::set_has_officer_grade() {
  _has_bits_[0] |= 0x00000200u;
}
inline void chat_broadcast_all_area_ntf::clear_has_officer_grade() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void chat_broadcast_all_area_ntf::clear_officer_grade() {
  officer_grade_ = 0u;
  clear_has_officer_grade();
}
inline ::google::protobuf::uint32 chat_broadcast_all_area_ntf::officer_grade() const {
  return officer_grade_;
}
inline void chat_broadcast_all_area_ntf::set_officer_grade(::google::protobuf::uint32 value) {
  set_has_officer_grade();
  officer_grade_ = value;
}

// -------------------------------------------------------------------

// chat_pack_ntf_world

// optional uint64 role_id = 2;
inline bool chat_pack_ntf_world::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_pack_ntf_world::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_pack_ntf_world::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_pack_ntf_world::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 chat_pack_ntf_world::role_id() const {
  return role_id_;
}
inline void chat_pack_ntf_world::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool chat_pack_ntf_world::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_pack_ntf_world::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_pack_ntf_world::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_pack_ntf_world::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& chat_pack_ntf_world::role_name() const {
  return *role_name_;
}
inline void chat_pack_ntf_world::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_pack_ntf_world::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_pack_ntf_world::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_pack_ntf_world::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* chat_pack_ntf_world::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_pack_ntf_world::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string role_avatar_url = 4;
inline bool chat_pack_ntf_world::has_role_avatar_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_pack_ntf_world::set_has_role_avatar_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_pack_ntf_world::clear_has_role_avatar_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_pack_ntf_world::clear_role_avatar_url() {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_->clear();
  }
  clear_has_role_avatar_url();
}
inline const ::std::string& chat_pack_ntf_world::role_avatar_url() const {
  return *role_avatar_url_;
}
inline void chat_pack_ntf_world::set_role_avatar_url(const ::std::string& value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_pack_ntf_world::set_role_avatar_url(const char* value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_pack_ntf_world::set_role_avatar_url(const char* value, size_t size) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_pack_ntf_world::mutable_role_avatar_url() {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  return role_avatar_url_;
}
inline ::std::string* chat_pack_ntf_world::release_role_avatar_url() {
  clear_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_avatar_url_;
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_pack_ntf_world::set_allocated_role_avatar_url(::std::string* role_avatar_url) {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (role_avatar_url) {
    set_has_role_avatar_url();
    role_avatar_url_ = role_avatar_url;
  } else {
    clear_has_role_avatar_url();
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 world_channel_id = 5;
inline bool chat_pack_ntf_world::has_world_channel_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_pack_ntf_world::set_has_world_channel_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_pack_ntf_world::clear_has_world_channel_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_pack_ntf_world::clear_world_channel_id() {
  world_channel_id_ = 0u;
  clear_has_world_channel_id();
}
inline ::google::protobuf::uint32 chat_pack_ntf_world::world_channel_id() const {
  return world_channel_id_;
}
inline void chat_pack_ntf_world::set_world_channel_id(::google::protobuf::uint32 value) {
  set_has_world_channel_id();
  world_channel_id_ = value;
}

// optional string content = 6;
inline bool chat_pack_ntf_world::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void chat_pack_ntf_world::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void chat_pack_ntf_world::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void chat_pack_ntf_world::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& chat_pack_ntf_world::content() const {
  return *content_;
}
inline void chat_pack_ntf_world::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_pack_ntf_world::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_pack_ntf_world::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_pack_ntf_world::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* chat_pack_ntf_world::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_pack_ntf_world::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gender_id = 7;
inline bool chat_pack_ntf_world::has_gender_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void chat_pack_ntf_world::set_has_gender_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void chat_pack_ntf_world::clear_has_gender_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void chat_pack_ntf_world::clear_gender_id() {
  gender_id_ = 0;
  clear_has_gender_id();
}
inline ::google::protobuf::int32 chat_pack_ntf_world::gender_id() const {
  return gender_id_;
}
inline void chat_pack_ntf_world::set_gender_id(::google::protobuf::int32 value) {
  set_has_gender_id();
  gender_id_ = value;
}

// optional uint32 avatar_box_id = 8;
inline bool chat_pack_ntf_world::has_avatar_box_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void chat_pack_ntf_world::set_has_avatar_box_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void chat_pack_ntf_world::clear_has_avatar_box_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void chat_pack_ntf_world::clear_avatar_box_id() {
  avatar_box_id_ = 0u;
  clear_has_avatar_box_id();
}
inline ::google::protobuf::uint32 chat_pack_ntf_world::avatar_box_id() const {
  return avatar_box_id_;
}
inline void chat_pack_ntf_world::set_avatar_box_id(::google::protobuf::uint32 value) {
  set_has_avatar_box_id();
  avatar_box_id_ = value;
}

// optional int32 level = 9;
inline bool chat_pack_ntf_world::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void chat_pack_ntf_world::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void chat_pack_ntf_world::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void chat_pack_ntf_world::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 chat_pack_ntf_world::level() const {
  return level_;
}
inline void chat_pack_ntf_world::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 officer_grade = 10;
inline bool chat_pack_ntf_world::has_officer_grade() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void chat_pack_ntf_world::set_has_officer_grade() {
  _has_bits_[0] |= 0x00000100u;
}
inline void chat_pack_ntf_world::clear_has_officer_grade() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void chat_pack_ntf_world::clear_officer_grade() {
  officer_grade_ = 0u;
  clear_has_officer_grade();
}
inline ::google::protobuf::uint32 chat_pack_ntf_world::officer_grade() const {
  return officer_grade_;
}
inline void chat_pack_ntf_world::set_officer_grade(::google::protobuf::uint32 value) {
  set_has_officer_grade();
  officer_grade_ = value;
}

// optional .SProtoSpace.eWorldChatType world_chat_type = 11;
inline bool chat_pack_ntf_world::has_world_chat_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void chat_pack_ntf_world::set_has_world_chat_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void chat_pack_ntf_world::clear_has_world_chat_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void chat_pack_ntf_world::clear_world_chat_type() {
  world_chat_type_ = 0;
  clear_has_world_chat_type();
}
inline ::SProtoSpace::eWorldChatType chat_pack_ntf_world::world_chat_type() const {
  return static_cast< ::SProtoSpace::eWorldChatType >(world_chat_type_);
}
inline void chat_pack_ntf_world::set_world_chat_type(::SProtoSpace::eWorldChatType value) {
  assert(::SProtoSpace::eWorldChatType_IsValid(value));
  set_has_world_chat_type();
  world_chat_type_ = value;
}

// optional uint64 event_data = 12;
inline bool chat_pack_ntf_world::has_event_data() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void chat_pack_ntf_world::set_has_event_data() {
  _has_bits_[0] |= 0x00000400u;
}
inline void chat_pack_ntf_world::clear_has_event_data() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void chat_pack_ntf_world::clear_event_data() {
  event_data_ = GOOGLE_ULONGLONG(0);
  clear_has_event_data();
}
inline ::google::protobuf::uint64 chat_pack_ntf_world::event_data() const {
  return event_data_;
}
inline void chat_pack_ntf_world::set_event_data(::google::protobuf::uint64 value) {
  set_has_event_data();
  event_data_ = value;
}

// -------------------------------------------------------------------

// chat_pack_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_pack_ntf_id];
inline bool chat_pack_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_pack_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_pack_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_pack_ntf::clear_protoid() {
  protoid_ = 6015;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID chat_pack_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void chat_pack_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.chat_pack_ntf_world chat_world = 2;
inline int chat_pack_ntf::chat_world_size() const {
  return chat_world_.size();
}
inline void chat_pack_ntf::clear_chat_world() {
  chat_world_.Clear();
}
inline const ::SProtoSpace::chat_pack_ntf_world& chat_pack_ntf::chat_world(int index) const {
  return chat_world_.Get(index);
}
inline ::SProtoSpace::chat_pack_ntf_world* chat_pack_ntf::mutable_chat_world(int index) {
  return chat_world_.Mutable(index);
}
inline ::SProtoSpace::chat_pack_ntf_world* chat_pack_ntf::add_chat_world() {
  return chat_world_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chat_pack_ntf_world >&
chat_pack_ntf::chat_world() const {
  return chat_world_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chat_pack_ntf_world >*
chat_pack_ntf::mutable_chat_world() {
  return &chat_world_;
}

// repeated .SProtoSpace.marquee_flower marq_flower = 5;
inline int chat_pack_ntf::marq_flower_size() const {
  return marq_flower_.size();
}
inline void chat_pack_ntf::clear_marq_flower() {
  marq_flower_.Clear();
}
inline const ::SProtoSpace::marquee_flower& chat_pack_ntf::marq_flower(int index) const {
  return marq_flower_.Get(index);
}
inline ::SProtoSpace::marquee_flower* chat_pack_ntf::mutable_marq_flower(int index) {
  return marq_flower_.Mutable(index);
}
inline ::SProtoSpace::marquee_flower* chat_pack_ntf::add_marq_flower() {
  return marq_flower_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::marquee_flower >&
chat_pack_ntf::marq_flower() const {
  return marq_flower_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::marquee_flower >*
chat_pack_ntf::mutable_marq_flower() {
  return &marq_flower_;
}

// repeated .SProtoSpace.marquee_common marq_common = 6;
inline int chat_pack_ntf::marq_common_size() const {
  return marq_common_.size();
}
inline void chat_pack_ntf::clear_marq_common() {
  marq_common_.Clear();
}
inline const ::SProtoSpace::marquee_common& chat_pack_ntf::marq_common(int index) const {
  return marq_common_.Get(index);
}
inline ::SProtoSpace::marquee_common* chat_pack_ntf::mutable_marq_common(int index) {
  return marq_common_.Mutable(index);
}
inline ::SProtoSpace::marquee_common* chat_pack_ntf::add_marq_common() {
  return marq_common_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::marquee_common >&
chat_pack_ntf::marq_common() const {
  return marq_common_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::marquee_common >*
chat_pack_ntf::mutable_marq_common() {
  return &marq_common_;
}

// -------------------------------------------------------------------

// marquee_all_type_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = marquee_all_type_ntf_id];
inline bool marquee_all_type_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void marquee_all_type_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void marquee_all_type_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void marquee_all_type_ntf::clear_protoid() {
  protoid_ = 6020;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID marquee_all_type_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void marquee_all_type_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.marquee_flower flower = 5;
inline int marquee_all_type_ntf::flower_size() const {
  return flower_.size();
}
inline void marquee_all_type_ntf::clear_flower() {
  flower_.Clear();
}
inline const ::SProtoSpace::marquee_flower& marquee_all_type_ntf::flower(int index) const {
  return flower_.Get(index);
}
inline ::SProtoSpace::marquee_flower* marquee_all_type_ntf::mutable_flower(int index) {
  return flower_.Mutable(index);
}
inline ::SProtoSpace::marquee_flower* marquee_all_type_ntf::add_flower() {
  return flower_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::marquee_flower >&
marquee_all_type_ntf::flower() const {
  return flower_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::marquee_flower >*
marquee_all_type_ntf::mutable_flower() {
  return &flower_;
}

// repeated .SProtoSpace.marquee_common common = 6;
inline int marquee_all_type_ntf::common_size() const {
  return common_.size();
}
inline void marquee_all_type_ntf::clear_common() {
  common_.Clear();
}
inline const ::SProtoSpace::marquee_common& marquee_all_type_ntf::common(int index) const {
  return common_.Get(index);
}
inline ::SProtoSpace::marquee_common* marquee_all_type_ntf::mutable_common(int index) {
  return common_.Mutable(index);
}
inline ::SProtoSpace::marquee_common* marquee_all_type_ntf::add_common() {
  return common_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::marquee_common >&
marquee_all_type_ntf::common() const {
  return common_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::marquee_common >*
marquee_all_type_ntf::mutable_common() {
  return &common_;
}

// -------------------------------------------------------------------

// marquee_common

// optional int32 config_type = 1;
inline bool marquee_common::has_config_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void marquee_common::set_has_config_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void marquee_common::clear_has_config_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void marquee_common::clear_config_type() {
  config_type_ = 0;
  clear_has_config_type();
}
inline ::google::protobuf::int32 marquee_common::config_type() const {
  return config_type_;
}
inline void marquee_common::set_config_type(::google::protobuf::int32 value) {
  set_has_config_type();
  config_type_ = value;
}

// optional int32 config_id = 2;
inline bool marquee_common::has_config_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void marquee_common::set_has_config_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void marquee_common::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void marquee_common::clear_config_id() {
  config_id_ = 0;
  clear_has_config_id();
}
inline ::google::protobuf::int32 marquee_common::config_id() const {
  return config_id_;
}
inline void marquee_common::set_config_id(::google::protobuf::int32 value) {
  set_has_config_id();
  config_id_ = value;
}

// optional int32 show_times = 3;
inline bool marquee_common::has_show_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void marquee_common::set_has_show_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void marquee_common::clear_has_show_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void marquee_common::clear_show_times() {
  show_times_ = 0;
  clear_has_show_times();
}
inline ::google::protobuf::int32 marquee_common::show_times() const {
  return show_times_;
}
inline void marquee_common::set_show_times(::google::protobuf::int32 value) {
  set_has_show_times();
  show_times_ = value;
}

// optional int32 priority = 4;
inline bool marquee_common::has_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void marquee_common::set_has_priority() {
  _has_bits_[0] |= 0x00000008u;
}
inline void marquee_common::clear_has_priority() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void marquee_common::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 marquee_common::priority() const {
  return priority_;
}
inline void marquee_common::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
}

// optional int32 contents_count = 5;
inline bool marquee_common::has_contents_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void marquee_common::set_has_contents_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void marquee_common::clear_has_contents_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void marquee_common::clear_contents_count() {
  contents_count_ = 0;
  clear_has_contents_count();
}
inline ::google::protobuf::int32 marquee_common::contents_count() const {
  return contents_count_;
}
inline void marquee_common::set_contents_count(::google::protobuf::int32 value) {
  set_has_contents_count();
  contents_count_ = value;
}

// repeated int32 numbers = 6;
inline int marquee_common::numbers_size() const {
  return numbers_.size();
}
inline void marquee_common::clear_numbers() {
  numbers_.Clear();
}
inline ::google::protobuf::int32 marquee_common::numbers(int index) const {
  return numbers_.Get(index);
}
inline void marquee_common::set_numbers(int index, ::google::protobuf::int32 value) {
  numbers_.Set(index, value);
}
inline void marquee_common::add_numbers(::google::protobuf::int32 value) {
  numbers_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
marquee_common::numbers() const {
  return numbers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
marquee_common::mutable_numbers() {
  return &numbers_;
}

// repeated string content = 7;
inline int marquee_common::content_size() const {
  return content_.size();
}
inline void marquee_common::clear_content() {
  content_.Clear();
}
inline const ::std::string& marquee_common::content(int index) const {
  return content_.Get(index);
}
inline ::std::string* marquee_common::mutable_content(int index) {
  return content_.Mutable(index);
}
inline void marquee_common::set_content(int index, const ::std::string& value) {
  content_.Mutable(index)->assign(value);
}
inline void marquee_common::set_content(int index, const char* value) {
  content_.Mutable(index)->assign(value);
}
inline void marquee_common::set_content(int index, const char* value, size_t size) {
  content_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* marquee_common::add_content() {
  return content_.Add();
}
inline void marquee_common::add_content(const ::std::string& value) {
  content_.Add()->assign(value);
}
inline void marquee_common::add_content(const char* value) {
  content_.Add()->assign(value);
}
inline void marquee_common::add_content(const char* value, size_t size) {
  content_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
marquee_common::content() const {
  return content_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
marquee_common::mutable_content() {
  return &content_;
}

// -------------------------------------------------------------------

// marquee_flower

// optional string to_role_name = 1;
inline bool marquee_flower::has_to_role_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void marquee_flower::set_has_to_role_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void marquee_flower::clear_has_to_role_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void marquee_flower::clear_to_role_name() {
  if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
    to_role_name_->clear();
  }
  clear_has_to_role_name();
}
inline const ::std::string& marquee_flower::to_role_name() const {
  return *to_role_name_;
}
inline void marquee_flower::set_to_role_name(const ::std::string& value) {
  set_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    to_role_name_ = new ::std::string;
  }
  to_role_name_->assign(value);
}
inline void marquee_flower::set_to_role_name(const char* value) {
  set_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    to_role_name_ = new ::std::string;
  }
  to_role_name_->assign(value);
}
inline void marquee_flower::set_to_role_name(const char* value, size_t size) {
  set_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    to_role_name_ = new ::std::string;
  }
  to_role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* marquee_flower::mutable_to_role_name() {
  set_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    to_role_name_ = new ::std::string;
  }
  return to_role_name_;
}
inline ::std::string* marquee_flower::release_to_role_name() {
  clear_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_role_name_;
    to_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void marquee_flower::set_allocated_to_role_name(::std::string* to_role_name) {
  if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_role_name_;
  }
  if (to_role_name) {
    set_has_to_role_name();
    to_role_name_ = to_role_name;
  } else {
    clear_has_to_role_name();
    to_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string from_role_name = 2;
inline bool marquee_flower::has_from_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void marquee_flower::set_has_from_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void marquee_flower::clear_has_from_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void marquee_flower::clear_from_role_name() {
  if (from_role_name_ != &::google::protobuf::internal::kEmptyString) {
    from_role_name_->clear();
  }
  clear_has_from_role_name();
}
inline const ::std::string& marquee_flower::from_role_name() const {
  return *from_role_name_;
}
inline void marquee_flower::set_from_role_name(const ::std::string& value) {
  set_has_from_role_name();
  if (from_role_name_ == &::google::protobuf::internal::kEmptyString) {
    from_role_name_ = new ::std::string;
  }
  from_role_name_->assign(value);
}
inline void marquee_flower::set_from_role_name(const char* value) {
  set_has_from_role_name();
  if (from_role_name_ == &::google::protobuf::internal::kEmptyString) {
    from_role_name_ = new ::std::string;
  }
  from_role_name_->assign(value);
}
inline void marquee_flower::set_from_role_name(const char* value, size_t size) {
  set_has_from_role_name();
  if (from_role_name_ == &::google::protobuf::internal::kEmptyString) {
    from_role_name_ = new ::std::string;
  }
  from_role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* marquee_flower::mutable_from_role_name() {
  set_has_from_role_name();
  if (from_role_name_ == &::google::protobuf::internal::kEmptyString) {
    from_role_name_ = new ::std::string;
  }
  return from_role_name_;
}
inline ::std::string* marquee_flower::release_from_role_name() {
  clear_has_from_role_name();
  if (from_role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_role_name_;
    from_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void marquee_flower::set_allocated_from_role_name(::std::string* from_role_name) {
  if (from_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_role_name_;
  }
  if (from_role_name) {
    set_has_from_role_name();
    from_role_name_ = from_role_name;
  } else {
    clear_has_from_role_name();
    from_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 flower_config_id = 3;
inline bool marquee_flower::has_flower_config_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void marquee_flower::set_has_flower_config_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void marquee_flower::clear_has_flower_config_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void marquee_flower::clear_flower_config_id() {
  flower_config_id_ = 0;
  clear_has_flower_config_id();
}
inline ::google::protobuf::int32 marquee_flower::flower_config_id() const {
  return flower_config_id_;
}
inline void marquee_flower::set_flower_config_id(::google::protobuf::int32 value) {
  set_has_flower_config_id();
  flower_config_id_ = value;
}

// optional int32 flower_send_count = 4;
inline bool marquee_flower::has_flower_send_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void marquee_flower::set_has_flower_send_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void marquee_flower::clear_has_flower_send_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void marquee_flower::clear_flower_send_count() {
  flower_send_count_ = 0;
  clear_has_flower_send_count();
}
inline ::google::protobuf::int32 marquee_flower::flower_send_count() const {
  return flower_send_count_;
}
inline void marquee_flower::set_flower_send_count(::google::protobuf::int32 value) {
  set_has_flower_send_count();
  flower_send_count_ = value;
}

// -------------------------------------------------------------------

// marquee_debug_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = marquee_debug_req_id];
inline bool marquee_debug_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void marquee_debug_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void marquee_debug_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void marquee_debug_req::clear_protoid() {
  protoid_ = 6021;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID marquee_debug_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void marquee_debug_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.marquee_all_type_ntf marquee = 2;
inline bool marquee_debug_req::has_marquee() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void marquee_debug_req::set_has_marquee() {
  _has_bits_[0] |= 0x00000002u;
}
inline void marquee_debug_req::clear_has_marquee() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void marquee_debug_req::clear_marquee() {
  if (marquee_ != NULL) marquee_->::SProtoSpace::marquee_all_type_ntf::Clear();
  clear_has_marquee();
}
inline const ::SProtoSpace::marquee_all_type_ntf& marquee_debug_req::marquee() const {
  return marquee_ != NULL ? *marquee_ : *default_instance_->marquee_;
}
inline ::SProtoSpace::marquee_all_type_ntf* marquee_debug_req::mutable_marquee() {
  set_has_marquee();
  if (marquee_ == NULL) marquee_ = new ::SProtoSpace::marquee_all_type_ntf;
  return marquee_;
}
inline ::SProtoSpace::marquee_all_type_ntf* marquee_debug_req::release_marquee() {
  clear_has_marquee();
  ::SProtoSpace::marquee_all_type_ntf* temp = marquee_;
  marquee_ = NULL;
  return temp;
}
inline void marquee_debug_req::set_allocated_marquee(::SProtoSpace::marquee_all_type_ntf* marquee) {
  delete marquee_;
  marquee_ = marquee;
  if (marquee) {
    set_has_marquee();
  } else {
    clear_has_marquee();
  }
}

// -------------------------------------------------------------------

// chat_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_req_id];
inline bool chat_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_req::clear_protoid() {
  protoid_ = 7312;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID chat_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void chat_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.CHAT_TYPE type = 2;
inline bool chat_req::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_req::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_req::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::SProtoSpace::CHAT_TYPE chat_req::type() const {
  return static_cast< ::SProtoSpace::CHAT_TYPE >(type_);
}
inline void chat_req::set_type(::SProtoSpace::CHAT_TYPE value) {
  assert(::SProtoSpace::CHAT_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint64 module_id = 3;
inline bool chat_req::has_module_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_req::set_has_module_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_req::clear_has_module_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_req::clear_module_id() {
  module_id_ = GOOGLE_ULONGLONG(0);
  clear_has_module_id();
}
inline ::google::protobuf::uint64 chat_req::module_id() const {
  return module_id_;
}
inline void chat_req::set_module_id(::google::protobuf::uint64 value) {
  set_has_module_id();
  module_id_ = value;
}

// optional string content = 4;
inline bool chat_req::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_req::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_req::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& chat_req::content() const {
  return *content_;
}
inline void chat_req::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_req::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_req::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_req::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* chat_req::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_req::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// chat_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = chat_ack_id];
inline bool chat_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_ack::clear_protoid() {
  protoid_ = 7313;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID chat_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void chat_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.CHAT_TYPE type = 2;
inline bool chat_ack::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_ack::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_ack::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::SProtoSpace::CHAT_TYPE chat_ack::type() const {
  return static_cast< ::SProtoSpace::CHAT_TYPE >(type_);
}
inline void chat_ack::set_type(::SProtoSpace::CHAT_TYPE value) {
  assert(::SProtoSpace::CHAT_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string content = 3;
inline bool chat_ack::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_ack::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_ack::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_ack::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& chat_ack::content() const {
  return *content_;
}
inline void chat_ack::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_ack::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_ack::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_ack::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* chat_ack::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_ack::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .SProtoSpace.public_role_base_info sour_data = 4;
inline bool chat_ack::has_sour_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_ack::set_has_sour_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_ack::clear_has_sour_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_ack::clear_sour_data() {
  if (sour_data_ != NULL) sour_data_->::SProtoSpace::public_role_base_info::Clear();
  clear_has_sour_data();
}
inline const ::SProtoSpace::public_role_base_info& chat_ack::sour_data() const {
  return sour_data_ != NULL ? *sour_data_ : *default_instance_->sour_data_;
}
inline ::SProtoSpace::public_role_base_info* chat_ack::mutable_sour_data() {
  set_has_sour_data();
  if (sour_data_ == NULL) sour_data_ = new ::SProtoSpace::public_role_base_info;
  return sour_data_;
}
inline ::SProtoSpace::public_role_base_info* chat_ack::release_sour_data() {
  clear_has_sour_data();
  ::SProtoSpace::public_role_base_info* temp = sour_data_;
  sour_data_ = NULL;
  return temp;
}
inline void chat_ack::set_allocated_sour_data(::SProtoSpace::public_role_base_info* sour_data) {
  delete sour_data_;
  sour_data_ = sour_data;
  if (sour_data) {
    set_has_sour_data();
  } else {
    clear_has_sour_data();
  }
}

// -------------------------------------------------------------------

// barrage_get_cs_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_get_cs_req_id];
inline bool barrage_get_cs_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void barrage_get_cs_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void barrage_get_cs_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void barrage_get_cs_req::clear_protoid() {
  protoid_ = 7800;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID barrage_get_cs_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void barrage_get_cs_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated int32 storage_id = 2;
inline int barrage_get_cs_req::storage_id_size() const {
  return storage_id_.size();
}
inline void barrage_get_cs_req::clear_storage_id() {
  storage_id_.Clear();
}
inline ::google::protobuf::int32 barrage_get_cs_req::storage_id(int index) const {
  return storage_id_.Get(index);
}
inline void barrage_get_cs_req::set_storage_id(int index, ::google::protobuf::int32 value) {
  storage_id_.Set(index, value);
}
inline void barrage_get_cs_req::add_storage_id(::google::protobuf::int32 value) {
  storage_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
barrage_get_cs_req::storage_id() const {
  return storage_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
barrage_get_cs_req::mutable_storage_id() {
  return &storage_id_;
}

// optional int32 desinty = 3;
inline bool barrage_get_cs_req::has_desinty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void barrage_get_cs_req::set_has_desinty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void barrage_get_cs_req::clear_has_desinty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void barrage_get_cs_req::clear_desinty() {
  desinty_ = 0;
  clear_has_desinty();
}
inline ::google::protobuf::int32 barrage_get_cs_req::desinty() const {
  return desinty_;
}
inline void barrage_get_cs_req::set_desinty(::google::protobuf::int32 value) {
  set_has_desinty();
  desinty_ = value;
}

// optional int32 start = 4;
inline bool barrage_get_cs_req::has_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void barrage_get_cs_req::set_has_start() {
  _has_bits_[0] |= 0x00000008u;
}
inline void barrage_get_cs_req::clear_has_start() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void barrage_get_cs_req::clear_start() {
  start_ = 0;
  clear_has_start();
}
inline ::google::protobuf::int32 barrage_get_cs_req::start() const {
  return start_;
}
inline void barrage_get_cs_req::set_start(::google::protobuf::int32 value) {
  set_has_start();
  start_ = value;
}

// optional int32 end = 5;
inline bool barrage_get_cs_req::has_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void barrage_get_cs_req::set_has_end() {
  _has_bits_[0] |= 0x00000010u;
}
inline void barrage_get_cs_req::clear_has_end() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void barrage_get_cs_req::clear_end() {
  end_ = 0;
  clear_has_end();
}
inline ::google::protobuf::int32 barrage_get_cs_req::end() const {
  return end_;
}
inline void barrage_get_cs_req::set_end(::google::protobuf::int32 value) {
  set_has_end();
  end_ = value;
}

// -------------------------------------------------------------------

// barrage_get_cs_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_get_cs_ack_id];
inline bool barrage_get_cs_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void barrage_get_cs_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void barrage_get_cs_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void barrage_get_cs_ack::clear_protoid() {
  protoid_ = 7801;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID barrage_get_cs_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void barrage_get_cs_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.barrage_pack barrage_s = 2;
inline bool barrage_get_cs_ack::has_barrage_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void barrage_get_cs_ack::set_has_barrage_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void barrage_get_cs_ack::clear_has_barrage_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void barrage_get_cs_ack::clear_barrage_s() {
  if (barrage_s_ != NULL) barrage_s_->::SProtoSpace::barrage_pack::Clear();
  clear_has_barrage_s();
}
inline const ::SProtoSpace::barrage_pack& barrage_get_cs_ack::barrage_s() const {
  return barrage_s_ != NULL ? *barrage_s_ : *default_instance_->barrage_s_;
}
inline ::SProtoSpace::barrage_pack* barrage_get_cs_ack::mutable_barrage_s() {
  set_has_barrage_s();
  if (barrage_s_ == NULL) barrage_s_ = new ::SProtoSpace::barrage_pack;
  return barrage_s_;
}
inline ::SProtoSpace::barrage_pack* barrage_get_cs_ack::release_barrage_s() {
  clear_has_barrage_s();
  ::SProtoSpace::barrage_pack* temp = barrage_s_;
  barrage_s_ = NULL;
  return temp;
}
inline void barrage_get_cs_ack::set_allocated_barrage_s(::SProtoSpace::barrage_pack* barrage_s) {
  delete barrage_s_;
  barrage_s_ = barrage_s;
  if (barrage_s) {
    set_has_barrage_s();
  } else {
    clear_has_barrage_s();
  }
}

// repeated .SProtoSpace.MsgErrorType error = 3;
inline int barrage_get_cs_ack::error_size() const {
  return error_.size();
}
inline void barrage_get_cs_ack::clear_error() {
  error_.Clear();
}
inline ::SProtoSpace::MsgErrorType barrage_get_cs_ack::error(int index) const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_.Get(index));
}
inline void barrage_get_cs_ack::set_error(int index, ::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  error_.Set(index, value);
}
inline void barrage_get_cs_ack::add_error(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  error_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
barrage_get_cs_ack::error() const {
  return error_;
}
inline ::google::protobuf::RepeatedField<int>*
barrage_get_cs_ack::mutable_error() {
  return &error_;
}

// -------------------------------------------------------------------

// barrage_send_cs_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_send_cs_req_id];
inline bool barrage_send_cs_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void barrage_send_cs_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void barrage_send_cs_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void barrage_send_cs_req::clear_protoid() {
  protoid_ = 7802;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID barrage_send_cs_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void barrage_send_cs_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated int32 storage_id = 2;
inline int barrage_send_cs_req::storage_id_size() const {
  return storage_id_.size();
}
inline void barrage_send_cs_req::clear_storage_id() {
  storage_id_.Clear();
}
inline ::google::protobuf::int32 barrage_send_cs_req::storage_id(int index) const {
  return storage_id_.Get(index);
}
inline void barrage_send_cs_req::set_storage_id(int index, ::google::protobuf::int32 value) {
  storage_id_.Set(index, value);
}
inline void barrage_send_cs_req::add_storage_id(::google::protobuf::int32 value) {
  storage_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
barrage_send_cs_req::storage_id() const {
  return storage_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
barrage_send_cs_req::mutable_storage_id() {
  return &storage_id_;
}

// optional .SProtoSpace.barrage_single barrage = 3;
inline bool barrage_send_cs_req::has_barrage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void barrage_send_cs_req::set_has_barrage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void barrage_send_cs_req::clear_has_barrage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void barrage_send_cs_req::clear_barrage() {
  if (barrage_ != NULL) barrage_->::SProtoSpace::barrage_single::Clear();
  clear_has_barrage();
}
inline const ::SProtoSpace::barrage_single& barrage_send_cs_req::barrage() const {
  return barrage_ != NULL ? *barrage_ : *default_instance_->barrage_;
}
inline ::SProtoSpace::barrage_single* barrage_send_cs_req::mutable_barrage() {
  set_has_barrage();
  if (barrage_ == NULL) barrage_ = new ::SProtoSpace::barrage_single;
  return barrage_;
}
inline ::SProtoSpace::barrage_single* barrage_send_cs_req::release_barrage() {
  clear_has_barrage();
  ::SProtoSpace::barrage_single* temp = barrage_;
  barrage_ = NULL;
  return temp;
}
inline void barrage_send_cs_req::set_allocated_barrage(::SProtoSpace::barrage_single* barrage) {
  delete barrage_;
  barrage_ = barrage;
  if (barrage) {
    set_has_barrage();
  } else {
    clear_has_barrage();
  }
}

// -------------------------------------------------------------------

// barrage_send_cs_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = barrage_send_cs_ack_id];
inline bool barrage_send_cs_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void barrage_send_cs_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void barrage_send_cs_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void barrage_send_cs_ack::clear_protoid() {
  protoid_ = 7803;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID barrage_send_cs_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void barrage_send_cs_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.MsgErrorType error = 2;
inline int barrage_send_cs_ack::error_size() const {
  return error_.size();
}
inline void barrage_send_cs_ack::clear_error() {
  error_.Clear();
}
inline ::SProtoSpace::MsgErrorType barrage_send_cs_ack::error(int index) const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_.Get(index));
}
inline void barrage_send_cs_ack::set_error(int index, ::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  error_.Set(index, value);
}
inline void barrage_send_cs_ack::add_error(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  error_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
barrage_send_cs_ack::error() const {
  return error_;
}
inline ::google::protobuf::RepeatedField<int>*
barrage_send_cs_ack::mutable_error() {
  return &error_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EChatDefine>() {
  return ::SProtoSpace::EChatDefine_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eMarqueeSystemType>() {
  return ::SProtoSpace::eMarqueeSystemType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_5fchat_2eproto__INCLUDED
