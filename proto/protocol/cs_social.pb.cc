// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_social.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_social.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* game_friends_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_friends_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_friend_refresh_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_friend_refresh_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_friend_refresh_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_friend_refresh_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_all_apply_info_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_all_apply_info_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_search_friend_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_search_friend_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_search_friend_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_search_friend_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_get_recommend_friend_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_get_recommend_friend_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_get_recommend_friend_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_get_recommend_friend_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_add_friend_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_add_friend_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_add_friend_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_add_friend_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_friend_opt_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_friend_opt_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_process_apply_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_process_apply_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_process_apply_info_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_process_apply_info_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_Onekey_apply_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_Onekey_apply_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_onekey_apply_info_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_onekey_apply_info_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_add_blacklist_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_add_blacklist_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_add_blacklist_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_add_blacklist_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_remove_friend_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_remove_friend_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_remove_friend_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_remove_friend_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_give_item_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_give_item_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_give_item_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_give_item_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_give_item_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_give_item_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_harem_compete_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_harem_compete_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_harem_compete_qingan_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_harem_compete_qingan_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_harem_compete_qingan_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_harem_compete_qingan_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_harem_compete_slap_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_harem_compete_slap_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_harem_compete_slap_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_harem_compete_slap_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_harem_compete_friends_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_harem_compete_friends_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_harem_compete_friends_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_harem_compete_friends_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_harem_compete_sync_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_harem_compete_sync_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_harem_compete_clear_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_harem_compete_clear_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_harem_compete_clear_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_harem_compete_clear_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_harem_compete_status_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_harem_compete_status_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_harem_compete_redpoint_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_harem_compete_redpoint_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_harem_compete_redpoint_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_harem_compete_redpoint_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_harem_compete_share_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_harem_compete_share_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_harem_compete_share_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_harem_compete_share_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_harem_compete_get_event_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_harem_compete_get_event_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_harem_compete_get_event_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_harem_compete_get_event_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_harem_compete_tribute_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_harem_compete_tribute_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_harem_compete_tribute_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_harem_compete_tribute_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* create_3dchat_room_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  create_3dchat_room_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* create_3dchat_room_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  create_3dchat_room_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_chat_room_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_chat_room_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_chat_room_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_chat_room_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* exit_chat_room_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  exit_chat_room_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* exit_chat_room_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  exit_chat_room_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_chat_room_players_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_chat_room_players_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_chat_view_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_chat_view_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* report_position_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  report_position_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* report_position_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  report_position_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_role_position_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_role_position_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_role_position_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_role_position_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_chat_room_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_chat_room_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_chat_room_list_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_chat_room_list_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* member_kick_3d_chat_room_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  member_kick_3d_chat_room_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* member_kick_3d_chat_room_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  member_kick_3d_chat_room_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_hang_up_award_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_hang_up_award_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_hang_up_info_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_hang_up_info_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_chat_room_data_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_chat_room_data_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_3d_chat_room_pos_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_3d_chat_room_pos_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_3d_chat_room_pos_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_3d_chat_room_pos_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* top_3d_chat_room_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  top_3d_chat_room_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* top_3d_chat_room_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  top_3d_chat_room_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* change_name_3d_chat_room_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  change_name_3d_chat_room_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* change_name_3d_chat_room_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  change_name_3d_chat_room_ack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5fsocial_2eproto() {
  protobuf_AddDesc_cs_5fsocial_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_social.proto");
  GOOGLE_CHECK(file != NULL);
  game_friends_ntf_descriptor_ = file->message_type(0);
  static const int game_friends_ntf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friends_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friends_ntf, fd_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friends_ntf, bl_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friends_ntf, give_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friends_ntf, draw_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friends_ntf, give_ids_),
  };
  game_friends_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_friends_ntf_descriptor_,
      game_friends_ntf::default_instance_,
      game_friends_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friends_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friends_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_friends_ntf));
  game_friend_refresh_req_descriptor_ = file->message_type(1);
  static const int game_friend_refresh_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend_refresh_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend_refresh_req, type_),
  };
  game_friend_refresh_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_friend_refresh_req_descriptor_,
      game_friend_refresh_req::default_instance_,
      game_friend_refresh_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend_refresh_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend_refresh_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_friend_refresh_req));
  game_friend_refresh_ack_descriptor_ = file->message_type(2);
  static const int game_friend_refresh_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend_refresh_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend_refresh_ack, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend_refresh_ack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend_refresh_ack, ret_),
  };
  game_friend_refresh_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_friend_refresh_ack_descriptor_,
      game_friend_refresh_ack::default_instance_,
      game_friend_refresh_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend_refresh_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend_refresh_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_friend_refresh_ack));
  friend_all_apply_info_ntf_descriptor_ = file->message_type(3);
  static const int friend_all_apply_info_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_all_apply_info_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_all_apply_info_ntf, apply_infos_),
  };
  friend_all_apply_info_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_all_apply_info_ntf_descriptor_,
      friend_all_apply_info_ntf::default_instance_,
      friend_all_apply_info_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_all_apply_info_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_all_apply_info_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_all_apply_info_ntf));
  game_search_friend_req_descriptor_ = file->message_type(4);
  static const int game_search_friend_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_search_friend_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_search_friend_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_search_friend_req, content_),
  };
  game_search_friend_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_search_friend_req_descriptor_,
      game_search_friend_req::default_instance_,
      game_search_friend_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_search_friend_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_search_friend_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_search_friend_req));
  game_search_friend_ack_descriptor_ = file->message_type(5);
  static const int game_search_friend_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_search_friend_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_search_friend_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_search_friend_ack, fd_infos_),
  };
  game_search_friend_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_search_friend_ack_descriptor_,
      game_search_friend_ack::default_instance_,
      game_search_friend_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_search_friend_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_search_friend_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_search_friend_ack));
  game_get_recommend_friend_req_descriptor_ = file->message_type(6);
  static const int game_get_recommend_friend_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_get_recommend_friend_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_get_recommend_friend_req, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_get_recommend_friend_req, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_get_recommend_friend_req, count_),
  };
  game_get_recommend_friend_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_get_recommend_friend_req_descriptor_,
      game_get_recommend_friend_req::default_instance_,
      game_get_recommend_friend_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_get_recommend_friend_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_get_recommend_friend_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_get_recommend_friend_req));
  game_get_recommend_friend_ack_descriptor_ = file->message_type(7);
  static const int game_get_recommend_friend_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_get_recommend_friend_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_get_recommend_friend_ack, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_get_recommend_friend_ack, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_get_recommend_friend_ack, fd_infos_),
  };
  game_get_recommend_friend_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_get_recommend_friend_ack_descriptor_,
      game_get_recommend_friend_ack::default_instance_,
      game_get_recommend_friend_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_get_recommend_friend_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_get_recommend_friend_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_get_recommend_friend_ack));
  game_add_friend_req_descriptor_ = file->message_type(8);
  static const int game_add_friend_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_friend_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_friend_req, accept_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_friend_req, apply_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_friend_req, content_),
  };
  game_add_friend_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_add_friend_req_descriptor_,
      game_add_friend_req::default_instance_,
      game_add_friend_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_friend_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_friend_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_add_friend_req));
  game_add_friend_ack_descriptor_ = file->message_type(9);
  static const int game_add_friend_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_friend_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_friend_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_friend_ack, accept_id_),
  };
  game_add_friend_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_add_friend_ack_descriptor_,
      game_add_friend_ack::default_instance_,
      game_add_friend_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_friend_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_friend_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_add_friend_ack));
  game_friend_opt_ntf_descriptor_ = file->message_type(10);
  static const int game_friend_opt_ntf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend_opt_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend_opt_ntf, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend_opt_ntf, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend_opt_ntf, opt_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend_opt_ntf, content_),
  };
  game_friend_opt_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_friend_opt_ntf_descriptor_,
      game_friend_opt_ntf::default_instance_,
      game_friend_opt_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend_opt_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend_opt_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_friend_opt_ntf));
  game_process_apply_info_req_descriptor_ = file->message_type(11);
  static const int game_process_apply_info_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_process_apply_info_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_process_apply_info_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_process_apply_info_req, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_process_apply_info_req, apply_id_),
  };
  game_process_apply_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_process_apply_info_req_descriptor_,
      game_process_apply_info_req::default_instance_,
      game_process_apply_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_process_apply_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_process_apply_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_process_apply_info_req));
  game_process_apply_info_ack_descriptor_ = file->message_type(12);
  static const int game_process_apply_info_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_process_apply_info_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_process_apply_info_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_process_apply_info_ack, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_process_apply_info_ack, type_),
  };
  game_process_apply_info_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_process_apply_info_ack_descriptor_,
      game_process_apply_info_ack::default_instance_,
      game_process_apply_info_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_process_apply_info_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_process_apply_info_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_process_apply_info_ack));
  game_Onekey_apply_info_req_descriptor_ = file->message_type(13);
  static const int game_Onekey_apply_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_Onekey_apply_info_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_Onekey_apply_info_req, type_),
  };
  game_Onekey_apply_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_Onekey_apply_info_req_descriptor_,
      game_Onekey_apply_info_req::default_instance_,
      game_Onekey_apply_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_Onekey_apply_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_Onekey_apply_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_Onekey_apply_info_req));
  game_onekey_apply_info_ack_descriptor_ = file->message_type(14);
  static const int game_onekey_apply_info_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_onekey_apply_info_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_onekey_apply_info_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_onekey_apply_info_ack, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_onekey_apply_info_ack, type_),
  };
  game_onekey_apply_info_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_onekey_apply_info_ack_descriptor_,
      game_onekey_apply_info_ack::default_instance_,
      game_onekey_apply_info_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_onekey_apply_info_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_onekey_apply_info_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_onekey_apply_info_ack));
  game_add_blacklist_req_descriptor_ = file->message_type(15);
  static const int game_add_blacklist_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_blacklist_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_blacklist_req, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_blacklist_req, target_id_),
  };
  game_add_blacklist_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_add_blacklist_req_descriptor_,
      game_add_blacklist_req::default_instance_,
      game_add_blacklist_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_blacklist_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_blacklist_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_add_blacklist_req));
  game_add_blacklist_ack_descriptor_ = file->message_type(16);
  static const int game_add_blacklist_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_blacklist_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_blacklist_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_blacklist_ack, info_),
  };
  game_add_blacklist_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_add_blacklist_ack_descriptor_,
      game_add_blacklist_ack::default_instance_,
      game_add_blacklist_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_blacklist_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_add_blacklist_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_add_blacklist_ack));
  game_remove_friend_req_descriptor_ = file->message_type(17);
  static const int game_remove_friend_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_remove_friend_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_remove_friend_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_remove_friend_req, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_remove_friend_req, target_id_),
  };
  game_remove_friend_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_remove_friend_req_descriptor_,
      game_remove_friend_req::default_instance_,
      game_remove_friend_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_remove_friend_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_remove_friend_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_remove_friend_req));
  game_remove_friend_ack_descriptor_ = file->message_type(18);
  static const int game_remove_friend_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_remove_friend_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_remove_friend_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_remove_friend_ack, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_remove_friend_ack, type_),
  };
  game_remove_friend_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_remove_friend_ack_descriptor_,
      game_remove_friend_ack::default_instance_,
      game_remove_friend_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_remove_friend_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_remove_friend_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_remove_friend_ack));
  game_give_item_req_descriptor_ = file->message_type(19);
  static const int game_give_item_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_give_item_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_give_item_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_give_item_req, giver_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_give_item_req, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_give_item_req, count_),
  };
  game_give_item_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_give_item_req_descriptor_,
      game_give_item_req::default_instance_,
      game_give_item_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_give_item_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_give_item_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_give_item_req));
  game_give_item_ack_descriptor_ = file->message_type(20);
  static const int game_give_item_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_give_item_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_give_item_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_give_item_ack, target_id_),
  };
  game_give_item_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_give_item_ack_descriptor_,
      game_give_item_ack::default_instance_,
      game_give_item_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_give_item_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_give_item_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_give_item_ack));
  game_give_item_ntf_descriptor_ = file->message_type(21);
  static const int game_give_item_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_give_item_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_give_item_ntf, info_),
  };
  game_give_item_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_give_item_ntf_descriptor_,
      game_give_item_ntf::default_instance_,
      game_give_item_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_give_item_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_give_item_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_give_item_ntf));
  game_harem_compete_ntf_descriptor_ = file->message_type(22);
  static const int game_harem_compete_ntf_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_ntf, qingan_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_ntf, slap_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_ntf, events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_ntf, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_ntf, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_ntf, red_point_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_ntf, tri_info_),
  };
  game_harem_compete_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_harem_compete_ntf_descriptor_,
      game_harem_compete_ntf::default_instance_,
      game_harem_compete_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_harem_compete_ntf));
  game_harem_compete_qingan_req_descriptor_ = file->message_type(23);
  static const int game_harem_compete_qingan_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_qingan_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_qingan_req, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_qingan_req, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_qingan_req, role_type_),
  };
  game_harem_compete_qingan_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_harem_compete_qingan_req_descriptor_,
      game_harem_compete_qingan_req::default_instance_,
      game_harem_compete_qingan_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_qingan_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_qingan_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_harem_compete_qingan_req));
  game_harem_compete_qingan_ack_descriptor_ = file->message_type(24);
  static const int game_harem_compete_qingan_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_qingan_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_qingan_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_qingan_ack, event_id_),
  };
  game_harem_compete_qingan_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_harem_compete_qingan_ack_descriptor_,
      game_harem_compete_qingan_ack::default_instance_,
      game_harem_compete_qingan_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_qingan_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_qingan_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_harem_compete_qingan_ack));
  game_harem_compete_slap_req_descriptor_ = file->message_type(25);
  static const int game_harem_compete_slap_req_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_slap_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_slap_req, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_slap_req, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_slap_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_slap_req, take_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_slap_req, slap_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_slap_req, info_),
  };
  game_harem_compete_slap_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_harem_compete_slap_req_descriptor_,
      game_harem_compete_slap_req::default_instance_,
      game_harem_compete_slap_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_slap_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_slap_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_harem_compete_slap_req));
  game_harem_compete_slap_ack_descriptor_ = file->message_type(26);
  static const int game_harem_compete_slap_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_slap_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_slap_ack, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_slap_ack, event_id_),
  };
  game_harem_compete_slap_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_harem_compete_slap_ack_descriptor_,
      game_harem_compete_slap_ack::default_instance_,
      game_harem_compete_slap_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_slap_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_slap_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_harem_compete_slap_ack));
  game_harem_compete_friends_req_descriptor_ = file->message_type(27);
  static const int game_harem_compete_friends_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_friends_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_friends_req, gd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_friends_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_friends_req, count_),
  };
  game_harem_compete_friends_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_harem_compete_friends_req_descriptor_,
      game_harem_compete_friends_req::default_instance_,
      game_harem_compete_friends_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_friends_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_friends_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_harem_compete_friends_req));
  game_harem_compete_friends_ack_descriptor_ = file->message_type(28);
  static const int game_harem_compete_friends_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_friends_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_friends_ack, friends_),
  };
  game_harem_compete_friends_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_harem_compete_friends_ack_descriptor_,
      game_harem_compete_friends_ack::default_instance_,
      game_harem_compete_friends_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_friends_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_friends_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_harem_compete_friends_ack));
  game_harem_compete_sync_ntf_descriptor_ = file->message_type(29);
  static const int game_harem_compete_sync_ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_sync_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_sync_ntf, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_sync_ntf, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_sync_ntf, end_time_),
  };
  game_harem_compete_sync_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_harem_compete_sync_ntf_descriptor_,
      game_harem_compete_sync_ntf::default_instance_,
      game_harem_compete_sync_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_sync_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_sync_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_harem_compete_sync_ntf));
  game_harem_compete_clear_req_descriptor_ = file->message_type(30);
  static const int game_harem_compete_clear_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_clear_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_clear_req, type_),
  };
  game_harem_compete_clear_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_harem_compete_clear_req_descriptor_,
      game_harem_compete_clear_req::default_instance_,
      game_harem_compete_clear_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_clear_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_clear_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_harem_compete_clear_req));
  game_harem_compete_clear_ack_descriptor_ = file->message_type(31);
  static const int game_harem_compete_clear_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_clear_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_clear_ack, ret_),
  };
  game_harem_compete_clear_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_harem_compete_clear_ack_descriptor_,
      game_harem_compete_clear_ack::default_instance_,
      game_harem_compete_clear_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_clear_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_clear_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_harem_compete_clear_ack));
  game_harem_compete_status_ntf_descriptor_ = file->message_type(32);
  static const int game_harem_compete_status_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_status_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_status_ntf, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_status_ntf, end_time_),
  };
  game_harem_compete_status_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_harem_compete_status_ntf_descriptor_,
      game_harem_compete_status_ntf::default_instance_,
      game_harem_compete_status_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_status_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_status_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_harem_compete_status_ntf));
  game_harem_compete_redpoint_req_descriptor_ = file->message_type(33);
  static const int game_harem_compete_redpoint_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_redpoint_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_redpoint_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_redpoint_req, red_time_),
  };
  game_harem_compete_redpoint_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_harem_compete_redpoint_req_descriptor_,
      game_harem_compete_redpoint_req::default_instance_,
      game_harem_compete_redpoint_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_redpoint_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_redpoint_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_harem_compete_redpoint_req));
  game_harem_compete_redpoint_ack_descriptor_ = file->message_type(34);
  static const int game_harem_compete_redpoint_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_redpoint_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_redpoint_ack, ret_),
  };
  game_harem_compete_redpoint_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_harem_compete_redpoint_ack_descriptor_,
      game_harem_compete_redpoint_ack::default_instance_,
      game_harem_compete_redpoint_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_redpoint_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_redpoint_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_harem_compete_redpoint_ack));
  game_harem_compete_share_req_descriptor_ = file->message_type(35);
  static const int game_harem_compete_share_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_share_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_share_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_share_req, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_share_req, world_channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_share_req, content_),
  };
  game_harem_compete_share_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_harem_compete_share_req_descriptor_,
      game_harem_compete_share_req::default_instance_,
      game_harem_compete_share_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_share_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_share_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_harem_compete_share_req));
  game_harem_compete_share_ack_descriptor_ = file->message_type(36);
  static const int game_harem_compete_share_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_share_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_share_ack, ret_),
  };
  game_harem_compete_share_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_harem_compete_share_ack_descriptor_,
      game_harem_compete_share_ack::default_instance_,
      game_harem_compete_share_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_share_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_share_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_harem_compete_share_ack));
  game_harem_compete_get_event_req_descriptor_ = file->message_type(37);
  static const int game_harem_compete_get_event_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_get_event_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_get_event_req, event_id_),
  };
  game_harem_compete_get_event_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_harem_compete_get_event_req_descriptor_,
      game_harem_compete_get_event_req::default_instance_,
      game_harem_compete_get_event_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_get_event_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_get_event_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_harem_compete_get_event_req));
  game_harem_compete_get_event_ack_descriptor_ = file->message_type(38);
  static const int game_harem_compete_get_event_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_get_event_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_get_event_ack, event_),
  };
  game_harem_compete_get_event_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_harem_compete_get_event_ack_descriptor_,
      game_harem_compete_get_event_ack::default_instance_,
      game_harem_compete_get_event_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_get_event_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_get_event_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_harem_compete_get_event_ack));
  game_harem_compete_tribute_req_descriptor_ = file->message_type(39);
  static const int game_harem_compete_tribute_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_tribute_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_tribute_req, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_tribute_req, target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_tribute_req, tribute_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_tribute_req, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_tribute_req, content_),
  };
  game_harem_compete_tribute_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_harem_compete_tribute_req_descriptor_,
      game_harem_compete_tribute_req::default_instance_,
      game_harem_compete_tribute_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_tribute_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_tribute_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_harem_compete_tribute_req));
  game_harem_compete_tribute_ack_descriptor_ = file->message_type(40);
  static const int game_harem_compete_tribute_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_tribute_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_tribute_ack, ret_),
  };
  game_harem_compete_tribute_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_harem_compete_tribute_ack_descriptor_,
      game_harem_compete_tribute_ack::default_instance_,
      game_harem_compete_tribute_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_tribute_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_harem_compete_tribute_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_harem_compete_tribute_ack));
  create_3dchat_room_req_descriptor_ = file->message_type(41);
  static const int create_3dchat_room_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_3dchat_room_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_3dchat_room_req, room_conf_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_3dchat_room_req, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_3dchat_room_req, token_),
  };
  create_3dchat_room_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      create_3dchat_room_req_descriptor_,
      create_3dchat_room_req::default_instance_,
      create_3dchat_room_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_3dchat_room_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_3dchat_room_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(create_3dchat_room_req));
  create_3dchat_room_ack_descriptor_ = file->message_type(42);
  static const int create_3dchat_room_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_3dchat_room_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_3dchat_room_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_3dchat_room_ack, room_conf_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_3dchat_room_ack, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_3dchat_room_ack, token_),
  };
  create_3dchat_room_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      create_3dchat_room_ack_descriptor_,
      create_3dchat_room_ack::default_instance_,
      create_3dchat_room_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_3dchat_room_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_3dchat_room_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(create_3dchat_room_ack));
  enter_chat_room_req_descriptor_ = file->message_type(43);
  static const int enter_chat_room_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_chat_room_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_chat_room_req, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_chat_room_req, token_),
  };
  enter_chat_room_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_chat_room_req_descriptor_,
      enter_chat_room_req::default_instance_,
      enter_chat_room_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_chat_room_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_chat_room_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_chat_room_req));
  enter_chat_room_ack_descriptor_ = file->message_type(44);
  static const int enter_chat_room_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_chat_room_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_chat_room_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_chat_room_ack, room_id_),
  };
  enter_chat_room_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_chat_room_ack_descriptor_,
      enter_chat_room_ack::default_instance_,
      enter_chat_room_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_chat_room_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_chat_room_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_chat_room_ack));
  exit_chat_room_req_descriptor_ = file->message_type(45);
  static const int exit_chat_room_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_chat_room_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_chat_room_req, room_id_),
  };
  exit_chat_room_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      exit_chat_room_req_descriptor_,
      exit_chat_room_req::default_instance_,
      exit_chat_room_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_chat_room_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_chat_room_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(exit_chat_room_req));
  exit_chat_room_ack_descriptor_ = file->message_type(46);
  static const int exit_chat_room_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_chat_room_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_chat_room_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_chat_room_ack, room_id_),
  };
  exit_chat_room_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      exit_chat_room_ack_descriptor_,
      exit_chat_room_ack::default_instance_,
      exit_chat_room_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_chat_room_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_chat_room_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(exit_chat_room_ack));
  update_chat_room_players_ntf_descriptor_ = file->message_type(47);
  static const int update_chat_room_players_ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_room_players_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_room_players_ntf, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_room_players_ntf, add_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_room_players_ntf, del_players_),
  };
  update_chat_room_players_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_chat_room_players_ntf_descriptor_,
      update_chat_room_players_ntf::default_instance_,
      update_chat_room_players_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_room_players_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_room_players_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_chat_room_players_ntf));
  update_chat_view_ntf_descriptor_ = file->message_type(48);
  static const int update_chat_view_ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_view_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_view_ntf, fix_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_view_ntf, add_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_view_ntf, del_list_),
  };
  update_chat_view_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_chat_view_ntf_descriptor_,
      update_chat_view_ntf::default_instance_,
      update_chat_view_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_view_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_view_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_chat_view_ntf));
  report_position_req_descriptor_ = file->message_type(49);
  static const int report_position_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(report_position_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(report_position_req, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(report_position_req, cur_pos_),
  };
  report_position_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      report_position_req_descriptor_,
      report_position_req::default_instance_,
      report_position_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(report_position_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(report_position_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(report_position_req));
  report_position_ack_descriptor_ = file->message_type(50);
  static const int report_position_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(report_position_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(report_position_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(report_position_ack, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(report_position_ack, cur_pos_),
  };
  report_position_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      report_position_ack_descriptor_,
      report_position_ack::default_instance_,
      report_position_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(report_position_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(report_position_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(report_position_ack));
  get_role_position_req_descriptor_ = file->message_type(51);
  static const int get_role_position_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_position_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_position_req, dest_id_),
  };
  get_role_position_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_role_position_req_descriptor_,
      get_role_position_req::default_instance_,
      get_role_position_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_position_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_position_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_role_position_req));
  get_role_position_ack_descriptor_ = file->message_type(52);
  static const int get_role_position_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_position_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_position_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_position_ack, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_position_ack, dest_pos_),
  };
  get_role_position_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_role_position_ack_descriptor_,
      get_role_position_ack::default_instance_,
      get_role_position_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_position_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_position_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_role_position_ack));
  get_chat_room_list_req_descriptor_ = file->message_type(53);
  static const int get_chat_room_list_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_chat_room_list_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_chat_room_list_req, index_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_chat_room_list_req, index_end_),
  };
  get_chat_room_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_chat_room_list_req_descriptor_,
      get_chat_room_list_req::default_instance_,
      get_chat_room_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_chat_room_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_chat_room_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_chat_room_list_req));
  get_chat_room_list_ack_descriptor_ = file->message_type(54);
  static const int get_chat_room_list_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_chat_room_list_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_chat_room_list_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_chat_room_list_ack, index_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_chat_room_list_ack, index_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_chat_room_list_ack, rooms_),
  };
  get_chat_room_list_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_chat_room_list_ack_descriptor_,
      get_chat_room_list_ack::default_instance_,
      get_chat_room_list_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_chat_room_list_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_chat_room_list_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_chat_room_list_ack));
  member_kick_3d_chat_room_req_descriptor_ = file->message_type(55);
  static const int member_kick_3d_chat_room_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(member_kick_3d_chat_room_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(member_kick_3d_chat_room_req, kicked_role_id_),
  };
  member_kick_3d_chat_room_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      member_kick_3d_chat_room_req_descriptor_,
      member_kick_3d_chat_room_req::default_instance_,
      member_kick_3d_chat_room_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(member_kick_3d_chat_room_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(member_kick_3d_chat_room_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(member_kick_3d_chat_room_req));
  member_kick_3d_chat_room_ack_descriptor_ = file->message_type(56);
  static const int member_kick_3d_chat_room_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(member_kick_3d_chat_room_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(member_kick_3d_chat_room_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(member_kick_3d_chat_room_ack, kicked_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(member_kick_3d_chat_room_ack, sour_role_id_),
  };
  member_kick_3d_chat_room_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      member_kick_3d_chat_room_ack_descriptor_,
      member_kick_3d_chat_room_ack::default_instance_,
      member_kick_3d_chat_room_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(member_kick_3d_chat_room_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(member_kick_3d_chat_room_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(member_kick_3d_chat_room_ack));
  get_hang_up_award_ntf_descriptor_ = file->message_type(57);
  static const int get_hang_up_award_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_hang_up_award_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_hang_up_award_ntf, fix_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_hang_up_award_ntf, random_items_),
  };
  get_hang_up_award_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_hang_up_award_ntf_descriptor_,
      get_hang_up_award_ntf::default_instance_,
      get_hang_up_award_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_hang_up_award_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_hang_up_award_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_hang_up_award_ntf));
  get_hang_up_info_ntf_descriptor_ = file->message_type(58);
  static const int get_hang_up_info_ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_hang_up_info_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_hang_up_info_ntf, count_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_hang_up_info_ntf, completion_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_hang_up_info_ntf, total_times_),
  };
  get_hang_up_info_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_hang_up_info_ntf_descriptor_,
      get_hang_up_info_ntf::default_instance_,
      get_hang_up_info_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_hang_up_info_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_hang_up_info_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_hang_up_info_ntf));
  update_chat_room_data_ntf_descriptor_ = file->message_type(59);
  static const int update_chat_room_data_ntf_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_room_data_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_room_data_ntf, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_room_data_ntf, room_conf_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_room_data_ntf, total_fight_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_room_data_ntf, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_room_data_ntf, is_top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_room_data_ntf, top_left_time_),
  };
  update_chat_room_data_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_chat_room_data_ntf_descriptor_,
      update_chat_room_data_ntf::default_instance_,
      update_chat_room_data_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_room_data_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chat_room_data_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_chat_room_data_ntf));
  get_3d_chat_room_pos_req_descriptor_ = file->message_type(60);
  static const int get_3d_chat_room_pos_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_3d_chat_room_pos_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_3d_chat_room_pos_req, room_id_),
  };
  get_3d_chat_room_pos_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_3d_chat_room_pos_req_descriptor_,
      get_3d_chat_room_pos_req::default_instance_,
      get_3d_chat_room_pos_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_3d_chat_room_pos_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_3d_chat_room_pos_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_3d_chat_room_pos_req));
  get_3d_chat_room_pos_ack_descriptor_ = file->message_type(61);
  static const int get_3d_chat_room_pos_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_3d_chat_room_pos_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_3d_chat_room_pos_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_3d_chat_room_pos_ack, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_3d_chat_room_pos_ack, pos_),
  };
  get_3d_chat_room_pos_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_3d_chat_room_pos_ack_descriptor_,
      get_3d_chat_room_pos_ack::default_instance_,
      get_3d_chat_room_pos_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_3d_chat_room_pos_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_3d_chat_room_pos_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_3d_chat_room_pos_ack));
  top_3d_chat_room_req_descriptor_ = file->message_type(62);
  static const int top_3d_chat_room_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(top_3d_chat_room_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(top_3d_chat_room_req, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(top_3d_chat_room_req, item_conf_id_),
  };
  top_3d_chat_room_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      top_3d_chat_room_req_descriptor_,
      top_3d_chat_room_req::default_instance_,
      top_3d_chat_room_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(top_3d_chat_room_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(top_3d_chat_room_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(top_3d_chat_room_req));
  top_3d_chat_room_ack_descriptor_ = file->message_type(63);
  static const int top_3d_chat_room_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(top_3d_chat_room_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(top_3d_chat_room_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(top_3d_chat_room_ack, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(top_3d_chat_room_ack, item_conf_id_),
  };
  top_3d_chat_room_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      top_3d_chat_room_ack_descriptor_,
      top_3d_chat_room_ack::default_instance_,
      top_3d_chat_room_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(top_3d_chat_room_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(top_3d_chat_room_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(top_3d_chat_room_ack));
  change_name_3d_chat_room_req_descriptor_ = file->message_type(64);
  static const int change_name_3d_chat_room_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_name_3d_chat_room_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_name_3d_chat_room_req, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_name_3d_chat_room_req, item_conf_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_name_3d_chat_room_req, name_),
  };
  change_name_3d_chat_room_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      change_name_3d_chat_room_req_descriptor_,
      change_name_3d_chat_room_req::default_instance_,
      change_name_3d_chat_room_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_name_3d_chat_room_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_name_3d_chat_room_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(change_name_3d_chat_room_req));
  change_name_3d_chat_room_ack_descriptor_ = file->message_type(65);
  static const int change_name_3d_chat_room_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_name_3d_chat_room_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_name_3d_chat_room_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_name_3d_chat_room_ack, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_name_3d_chat_room_ack, name_),
  };
  change_name_3d_chat_room_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      change_name_3d_chat_room_ack_descriptor_,
      change_name_3d_chat_room_ack::default_instance_,
      change_name_3d_chat_room_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_name_3d_chat_room_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(change_name_3d_chat_room_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(change_name_3d_chat_room_ack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5fsocial_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_friends_ntf_descriptor_, &game_friends_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_friend_refresh_req_descriptor_, &game_friend_refresh_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_friend_refresh_ack_descriptor_, &game_friend_refresh_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_all_apply_info_ntf_descriptor_, &friend_all_apply_info_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_search_friend_req_descriptor_, &game_search_friend_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_search_friend_ack_descriptor_, &game_search_friend_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_get_recommend_friend_req_descriptor_, &game_get_recommend_friend_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_get_recommend_friend_ack_descriptor_, &game_get_recommend_friend_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_add_friend_req_descriptor_, &game_add_friend_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_add_friend_ack_descriptor_, &game_add_friend_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_friend_opt_ntf_descriptor_, &game_friend_opt_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_process_apply_info_req_descriptor_, &game_process_apply_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_process_apply_info_ack_descriptor_, &game_process_apply_info_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_Onekey_apply_info_req_descriptor_, &game_Onekey_apply_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_onekey_apply_info_ack_descriptor_, &game_onekey_apply_info_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_add_blacklist_req_descriptor_, &game_add_blacklist_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_add_blacklist_ack_descriptor_, &game_add_blacklist_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_remove_friend_req_descriptor_, &game_remove_friend_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_remove_friend_ack_descriptor_, &game_remove_friend_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_give_item_req_descriptor_, &game_give_item_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_give_item_ack_descriptor_, &game_give_item_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_give_item_ntf_descriptor_, &game_give_item_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_harem_compete_ntf_descriptor_, &game_harem_compete_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_harem_compete_qingan_req_descriptor_, &game_harem_compete_qingan_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_harem_compete_qingan_ack_descriptor_, &game_harem_compete_qingan_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_harem_compete_slap_req_descriptor_, &game_harem_compete_slap_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_harem_compete_slap_ack_descriptor_, &game_harem_compete_slap_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_harem_compete_friends_req_descriptor_, &game_harem_compete_friends_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_harem_compete_friends_ack_descriptor_, &game_harem_compete_friends_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_harem_compete_sync_ntf_descriptor_, &game_harem_compete_sync_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_harem_compete_clear_req_descriptor_, &game_harem_compete_clear_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_harem_compete_clear_ack_descriptor_, &game_harem_compete_clear_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_harem_compete_status_ntf_descriptor_, &game_harem_compete_status_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_harem_compete_redpoint_req_descriptor_, &game_harem_compete_redpoint_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_harem_compete_redpoint_ack_descriptor_, &game_harem_compete_redpoint_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_harem_compete_share_req_descriptor_, &game_harem_compete_share_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_harem_compete_share_ack_descriptor_, &game_harem_compete_share_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_harem_compete_get_event_req_descriptor_, &game_harem_compete_get_event_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_harem_compete_get_event_ack_descriptor_, &game_harem_compete_get_event_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_harem_compete_tribute_req_descriptor_, &game_harem_compete_tribute_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_harem_compete_tribute_ack_descriptor_, &game_harem_compete_tribute_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    create_3dchat_room_req_descriptor_, &create_3dchat_room_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    create_3dchat_room_ack_descriptor_, &create_3dchat_room_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_chat_room_req_descriptor_, &enter_chat_room_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_chat_room_ack_descriptor_, &enter_chat_room_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    exit_chat_room_req_descriptor_, &exit_chat_room_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    exit_chat_room_ack_descriptor_, &exit_chat_room_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_chat_room_players_ntf_descriptor_, &update_chat_room_players_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_chat_view_ntf_descriptor_, &update_chat_view_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    report_position_req_descriptor_, &report_position_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    report_position_ack_descriptor_, &report_position_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_role_position_req_descriptor_, &get_role_position_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_role_position_ack_descriptor_, &get_role_position_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_chat_room_list_req_descriptor_, &get_chat_room_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_chat_room_list_ack_descriptor_, &get_chat_room_list_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    member_kick_3d_chat_room_req_descriptor_, &member_kick_3d_chat_room_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    member_kick_3d_chat_room_ack_descriptor_, &member_kick_3d_chat_room_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_hang_up_award_ntf_descriptor_, &get_hang_up_award_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_hang_up_info_ntf_descriptor_, &get_hang_up_info_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_chat_room_data_ntf_descriptor_, &update_chat_room_data_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_3d_chat_room_pos_req_descriptor_, &get_3d_chat_room_pos_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_3d_chat_room_pos_ack_descriptor_, &get_3d_chat_room_pos_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    top_3d_chat_room_req_descriptor_, &top_3d_chat_room_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    top_3d_chat_room_ack_descriptor_, &top_3d_chat_room_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    change_name_3d_chat_room_req_descriptor_, &change_name_3d_chat_room_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    change_name_3d_chat_room_ack_descriptor_, &change_name_3d_chat_room_ack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5fsocial_2eproto() {
  delete game_friends_ntf::default_instance_;
  delete game_friends_ntf_reflection_;
  delete game_friend_refresh_req::default_instance_;
  delete game_friend_refresh_req_reflection_;
  delete game_friend_refresh_ack::default_instance_;
  delete game_friend_refresh_ack_reflection_;
  delete friend_all_apply_info_ntf::default_instance_;
  delete friend_all_apply_info_ntf_reflection_;
  delete game_search_friend_req::default_instance_;
  delete game_search_friend_req_reflection_;
  delete game_search_friend_ack::default_instance_;
  delete game_search_friend_ack_reflection_;
  delete game_get_recommend_friend_req::default_instance_;
  delete game_get_recommend_friend_req_reflection_;
  delete game_get_recommend_friend_ack::default_instance_;
  delete game_get_recommend_friend_ack_reflection_;
  delete game_add_friend_req::default_instance_;
  delete game_add_friend_req_reflection_;
  delete game_add_friend_ack::default_instance_;
  delete game_add_friend_ack_reflection_;
  delete game_friend_opt_ntf::default_instance_;
  delete game_friend_opt_ntf_reflection_;
  delete game_process_apply_info_req::default_instance_;
  delete game_process_apply_info_req_reflection_;
  delete game_process_apply_info_ack::default_instance_;
  delete game_process_apply_info_ack_reflection_;
  delete game_Onekey_apply_info_req::default_instance_;
  delete game_Onekey_apply_info_req_reflection_;
  delete game_onekey_apply_info_ack::default_instance_;
  delete game_onekey_apply_info_ack_reflection_;
  delete game_add_blacklist_req::default_instance_;
  delete game_add_blacklist_req_reflection_;
  delete game_add_blacklist_ack::default_instance_;
  delete game_add_blacklist_ack_reflection_;
  delete game_remove_friend_req::default_instance_;
  delete game_remove_friend_req_reflection_;
  delete game_remove_friend_ack::default_instance_;
  delete game_remove_friend_ack_reflection_;
  delete game_give_item_req::default_instance_;
  delete game_give_item_req_reflection_;
  delete game_give_item_ack::default_instance_;
  delete game_give_item_ack_reflection_;
  delete game_give_item_ntf::default_instance_;
  delete game_give_item_ntf_reflection_;
  delete game_harem_compete_ntf::default_instance_;
  delete game_harem_compete_ntf_reflection_;
  delete game_harem_compete_qingan_req::default_instance_;
  delete game_harem_compete_qingan_req_reflection_;
  delete game_harem_compete_qingan_ack::default_instance_;
  delete game_harem_compete_qingan_ack_reflection_;
  delete game_harem_compete_slap_req::default_instance_;
  delete game_harem_compete_slap_req_reflection_;
  delete game_harem_compete_slap_ack::default_instance_;
  delete game_harem_compete_slap_ack_reflection_;
  delete game_harem_compete_friends_req::default_instance_;
  delete game_harem_compete_friends_req_reflection_;
  delete game_harem_compete_friends_ack::default_instance_;
  delete game_harem_compete_friends_ack_reflection_;
  delete game_harem_compete_sync_ntf::default_instance_;
  delete game_harem_compete_sync_ntf_reflection_;
  delete game_harem_compete_clear_req::default_instance_;
  delete game_harem_compete_clear_req_reflection_;
  delete game_harem_compete_clear_ack::default_instance_;
  delete game_harem_compete_clear_ack_reflection_;
  delete game_harem_compete_status_ntf::default_instance_;
  delete game_harem_compete_status_ntf_reflection_;
  delete game_harem_compete_redpoint_req::default_instance_;
  delete game_harem_compete_redpoint_req_reflection_;
  delete game_harem_compete_redpoint_ack::default_instance_;
  delete game_harem_compete_redpoint_ack_reflection_;
  delete game_harem_compete_share_req::default_instance_;
  delete game_harem_compete_share_req_reflection_;
  delete game_harem_compete_share_ack::default_instance_;
  delete game_harem_compete_share_ack_reflection_;
  delete game_harem_compete_get_event_req::default_instance_;
  delete game_harem_compete_get_event_req_reflection_;
  delete game_harem_compete_get_event_ack::default_instance_;
  delete game_harem_compete_get_event_ack_reflection_;
  delete game_harem_compete_tribute_req::default_instance_;
  delete game_harem_compete_tribute_req_reflection_;
  delete game_harem_compete_tribute_ack::default_instance_;
  delete game_harem_compete_tribute_ack_reflection_;
  delete create_3dchat_room_req::default_instance_;
  delete create_3dchat_room_req_reflection_;
  delete create_3dchat_room_ack::default_instance_;
  delete create_3dchat_room_ack_reflection_;
  delete enter_chat_room_req::default_instance_;
  delete enter_chat_room_req_reflection_;
  delete enter_chat_room_ack::default_instance_;
  delete enter_chat_room_ack_reflection_;
  delete exit_chat_room_req::default_instance_;
  delete exit_chat_room_req_reflection_;
  delete exit_chat_room_ack::default_instance_;
  delete exit_chat_room_ack_reflection_;
  delete update_chat_room_players_ntf::default_instance_;
  delete update_chat_room_players_ntf_reflection_;
  delete update_chat_view_ntf::default_instance_;
  delete update_chat_view_ntf_reflection_;
  delete report_position_req::default_instance_;
  delete report_position_req_reflection_;
  delete report_position_ack::default_instance_;
  delete report_position_ack_reflection_;
  delete get_role_position_req::default_instance_;
  delete get_role_position_req_reflection_;
  delete get_role_position_ack::default_instance_;
  delete get_role_position_ack_reflection_;
  delete get_chat_room_list_req::default_instance_;
  delete get_chat_room_list_req_reflection_;
  delete get_chat_room_list_ack::default_instance_;
  delete get_chat_room_list_ack_reflection_;
  delete member_kick_3d_chat_room_req::default_instance_;
  delete member_kick_3d_chat_room_req_reflection_;
  delete member_kick_3d_chat_room_ack::default_instance_;
  delete member_kick_3d_chat_room_ack_reflection_;
  delete get_hang_up_award_ntf::default_instance_;
  delete get_hang_up_award_ntf_reflection_;
  delete get_hang_up_info_ntf::default_instance_;
  delete get_hang_up_info_ntf_reflection_;
  delete update_chat_room_data_ntf::default_instance_;
  delete update_chat_room_data_ntf_reflection_;
  delete get_3d_chat_room_pos_req::default_instance_;
  delete get_3d_chat_room_pos_req_reflection_;
  delete get_3d_chat_room_pos_ack::default_instance_;
  delete get_3d_chat_room_pos_ack_reflection_;
  delete top_3d_chat_room_req::default_instance_;
  delete top_3d_chat_room_req_reflection_;
  delete top_3d_chat_room_ack::default_instance_;
  delete top_3d_chat_room_ack_reflection_;
  delete change_name_3d_chat_room_req::default_instance_;
  delete change_name_3d_chat_room_req_reflection_;
  delete change_name_3d_chat_room_ack::default_instance_;
  delete change_name_3d_chat_room_ack_reflection_;
}

void protobuf_AddDesc_cs_5fsocial_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SProtoSpace::protobuf_AddDesc_cs_5fprotoid_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5fsocialtype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5froletype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5fbattletype_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017cs_social.proto\022\013SProtoSpace\032\020cs_proto"
    "id.proto\032\023cm_socialtype.proto\032\021cm_rolety"
    "pe.proto\032\023cm_battletype.proto\"\356\001\n\020game_f"
    "riends_ntf\022>\n\010proto_id\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID:\023game_friends_ntf_id\022/\n\010fd"
    "_infos\030\002 \003(\0132\035.SProtoSpace.friend_base_i"
    "nfo\022/\n\010bl_infos\030\003 \003(\0132\035.SProtoSpace.frie"
    "nd_base_info\022\022\n\ngive_times\030\004 \001(\r\022\022\n\ndraw"
    "_times\030\005 \001(\r\022\020\n\010give_ids\030\006 \003(\004\"n\n\027game_f"
    "riend_refresh_req\022E\n\010proto_id\030\001 \001(\0162\027.SP"
    "rotoSpace.ECSProtoID:\032game_friend_refres"
    "h_req_id\022\014\n\004type\030\002 \001(\r\"\251\001\n\027game_friend_r"
    "efresh_ack\022E\n\010proto_id\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID:\032game_friend_refresh_ack_i"
    "d\022,\n\005infos\030\002 \003(\0132\035.SProtoSpace.friend_ba"
    "se_info\022\014\n\004type\030\003 \001(\r\022\013\n\003ret\030\004 \001(\r\"\231\001\n\031f"
    "riend_all_apply_info_ntf\022G\n\010proto_id\030\001 \001"
    "(\0162\027.SProtoSpace.ECSProtoID:\034friend_all_"
    "apply_info_ntf_id\0223\n\013apply_infos\030\002 \003(\0132\036"
    ".SProtoSpace.friend_apply_info\"}\n\026game_s"
    "earch_friend_req\022D\n\010proto_id\030\001 \001(\0162\027.SPr"
    "otoSpace.ECSProtoID:\031game_search_friend_"
    "req_id\022\014\n\004type\030\002 \001(\r\022\017\n\007content\030\003 \001(\t\"\234\001"
    "\n\026game_search_friend_ack\022D\n\010proto_id\030\001 \001"
    "(\0162\027.SProtoSpace.ECSProtoID:\031game_search"
    "_friend_ack_id\022\013\n\003ret\030\002 \001(\r\022/\n\010fd_infos\030"
    "\003 \003(\0132\035.SProtoSpace.friend_base_info\"\232\001\n"
    "\035game_get_recommend_friend_req\022K\n\010proto_"
    "id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID: game_"
    "get_recommend_friend_req_id\022\014\n\004uuid\030\002 \001("
    "\004\022\017\n\007area_id\030\003 \001(\r\022\r\n\005count\030\004 \001(\r\"\274\001\n\035ga"
    "me_get_recommend_friend_ack\022K\n\010proto_id\030"
    "\001 \001(\0162\027.SProtoSpace.ECSProtoID: game_get"
    "_recommend_friend_ack_id\022\014\n\004uuid\030\002 \001(\004\022\017"
    "\n\007area_id\030\003 \001(\r\022/\n\010fd_infos\030\004 \003(\0132\035.SPro"
    "toSpace.friend_base_info\"\216\001\n\023game_add_fr"
    "iend_req\022A\n\010proto_id\030\001 \001(\0162\027.SProtoSpace"
    ".ECSProtoID:\026game_add_friend_req_id\022\021\n\ta"
    "ccept_id\030\002 \001(\004\022\020\n\010apply_id\030\003 \001(\004\022\017\n\007cont"
    "ent\030\004 \001(\t\"x\n\023game_add_friend_ack\022A\n\010prot"
    "o_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\026gam"
    "e_add_friend_ack_id\022\013\n\003ret\030\002 \001(\r\022\021\n\tacce"
    "pt_id\030\003 \001(\004\"\266\001\n\023game_friend_opt_ntf\022A\n\010p"
    "roto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\026"
    "game_friend_opt_ntf_id\022\014\n\004type\030\002 \001(\r\022+\n\004"
    "info\030\003 \001(\0132\035.SProtoSpace.friend_base_inf"
    "o\022\020\n\010opt_time\030\004 \001(\004\022\017\n\007content\030\005 \001(\t\"\226\001\n"
    "\033game_process_apply_info_req\022I\n\010proto_id"
    "\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\036game_pr"
    "ocess_apply_info_req_id\022\014\n\004type\030\002 \001(\r\022\014\n"
    "\004uuid\030\003 \001(\004\022\020\n\010apply_id\030\004 \001(\004\"\260\001\n\033game_p"
    "rocess_apply_info_ack\022I\n\010proto_id\030\001 \001(\0162"
    "\027.SProtoSpace.ECSProtoID:\036game_process_a"
    "pply_info_ack_id\022\013\n\003ret\030\002 \001(\r\022+\n\004info\030\003 "
    "\001(\0132\035.SProtoSpace.friend_base_info\022\014\n\004ty"
    "pe\030\004 \001(\r\"t\n\032game_Onekey_apply_info_req\022H"
    "\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoI"
    "D:\035game_Onekey_apply_info_req_id\022\014\n\004type"
    "\030\002 \001(\r\"\257\001\n\032game_onekey_apply_info_ack\022H\n"
    "\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID"
    ":\035game_onekey_apply_info_ack_id\022\013\n\003ret\030\002"
    " \001(\r\022,\n\005infos\030\003 \003(\0132\035.SProtoSpace.friend"
    "_base_info\022\014\n\004type\030\004 \001(\r\"\177\n\026game_add_bla"
    "cklist_req\022D\n\010proto_id\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID:\031game_add_blacklist_req_id"
    "\022\014\n\004uuid\030\002 \001(\004\022\021\n\ttarget_id\030\003 \001(\004\"\230\001\n\026ga"
    "me_add_blacklist_ack\022D\n\010proto_id\030\001 \001(\0162\027"
    ".SProtoSpace.ECSProtoID:\031game_add_blackl"
    "ist_ack_id\022\013\n\003ret\030\002 \001(\r\022+\n\004info\030\003 \001(\0132\035."
    "SProtoSpace.friend_base_info\"\215\001\n\026game_re"
    "move_friend_req\022D\n\010proto_id\030\001 \001(\0162\027.SPro"
    "toSpace.ECSProtoID:\031game_remove_friend_r"
    "eq_id\022\014\n\004type\030\002 \001(\r\022\014\n\004uuid\030\003 \001(\004\022\021\n\ttar"
    "get_id\030\004 \001(\004\"\214\001\n\026game_remove_friend_ack\022"
    "D\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProto"
    "ID:\031game_remove_friend_ack_id\022\013\n\003ret\030\002 \001"
    "(\r\022\021\n\ttarget_id\030\003 \001(\004\022\014\n\004type\030\004 \001(\r\"\230\001\n\022"
    "game_give_item_req\022@\n\010proto_id\030\001 \001(\0162\027.S"
    "ProtoSpace.ECSProtoID:\025game_give_item_re"
    "q_id\022\014\n\004type\030\002 \001(\r\022\020\n\010giver_id\030\003 \001(\004\022\021\n\t"
    "target_id\030\004 \001(\004\022\r\n\005count\030\005 \001(\r\"v\n\022game_g"
    "ive_item_ack\022@\n\010proto_id\030\001 \001(\0162\027.SProtoS"
    "pace.ECSProtoID:\025game_give_item_ack_id\022\013"
    "\n\003ret\030\002 \001(\r\022\021\n\ttarget_id\030\003 \001(\004\"\201\001\n\022game_"
    "give_item_ntf\022@\n\010proto_id\030\001 \001(\0162\027.SProto"
    "Space.ECSProtoID:\025game_give_item_ntf_id\022"
    ")\n\004info\030\002 \001(\0132\033.SProtoSpace.give_item_in"
    "fo\"\277\002\n\026game_harem_compete_ntf\022D\n\010proto_i"
    "d\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\031game_h"
    "arem_compete_ntf_id\022\024\n\014qingan_times\030\002 \001("
    "\r\022\022\n\nslap_times\030\003 \001(\r\0220\n\006events\030\004 \003(\0132 ."
    "SProtoSpace.harem_compete_event\022,\n\010progr"
    "ess\030\005 \001(\0162\032.SProtoSpace.ESLAPPROGRESS\022\020\n"
    "\010end_time\030\006 \001(\004\022\026\n\016red_point_time\030\007 \003(\004\022"
    "+\n\010tri_info\030\010 \003(\0132\031.SProtoSpace.tribute_"
    "info\"\245\001\n\035game_harem_compete_qingan_req\022K"
    "\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoI"
    "D: game_harem_compete_qingan_req_id\022\021\n\tt"
    "arget_id\030\002 \001(\004\022\021\n\trole_name\030\003 \001(\t\022\021\n\trol"
    "e_type\030\004 \001(\r\"\213\001\n\035game_harem_compete_qing"
    "an_ack\022K\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.E"
    "CSProtoID: game_harem_compete_qingan_ack"
    "_id\022\013\n\003ret\030\002 \001(\r\022\020\n\010event_id\030\003 \001(\004\"\357\001\n\033g"
    "ame_harem_compete_slap_req\022I\n\010proto_id\030\001"
    " \001(\0162\027.SProtoSpace.ECSProtoID:\036game_hare"
    "m_compete_slap_req_id\022\021\n\ttarget_id\030\002 \001(\004"
    "\022\021\n\trole_name\030\003 \001(\t\022\014\n\004time\030\004 \001(\004\022\021\n\ttak"
    "e_time\030\005 \001(\004\022\022\n\nslap_count\030\006 \001(\r\022*\n\004info"
    "\030\007 \003(\0132\034.SProtoSpace.slap_emoji_info\"\250\001\n"
    "\033game_harem_compete_slap_ack\022I\n\010proto_id"
    "\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\036game_ha"
    "rem_compete_slap_ack_id\022,\n\010progress\030\002 \001("
    "\0162\032.SProtoSpace.ESLAPPROGRESS\022\020\n\010event_i"
    "d\030\003 \001(\004\"\234\001\n\036game_harem_compete_friends_r"
    "eq\022L\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSPr"
    "otoID:!game_harem_compete_friends_req_id"
    "\022\017\n\007gd_type\030\002 \001(\r\022\014\n\004type\030\003 \001(\r\022\r\n\005count"
    "\030\004 \001(\r\"\236\001\n\036game_harem_compete_friends_ac"
    "k\022L\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSPro"
    "toID:!game_harem_compete_friends_ack_id\022"
    ".\n\007friends\030\002 \003(\0132\035.SProtoSpace.friend_ba"
    "se_info\"\331\001\n\033game_harem_compete_sync_ntf\022"
    "I\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProto"
    "ID:\036game_harem_compete_sync_ntf_id\022/\n\005ev"
    "ent\030\002 \001(\0132 .SProtoSpace.harem_compete_ev"
    "ent\022,\n\010progress\030\003 \001(\0162\032.SProtoSpace.ESLA"
    "PPROGRESS\022\020\n\010end_time\030\004 \001(\004\"x\n\034game_hare"
    "m_compete_clear_req\022J\n\010proto_id\030\001 \001(\0162\027."
    "SProtoSpace.ECSProtoID:\037game_harem_compe"
    "te_clear_req_id\022\014\n\004type\030\002 \001(\r\"w\n\034game_ha"
    "rem_compete_clear_ack\022J\n\010proto_id\030\001 \001(\0162"
    "\027.SProtoSpace.ECSProtoID:\037game_harem_com"
    "pete_clear_ack_id\022\013\n\003ret\030\002 \001(\r\"\254\001\n\035game_"
    "harem_compete_status_ntf\022K\n\010proto_id\030\001 \001"
    "(\0162\027.SProtoSpace.ECSProtoID: game_harem_"
    "compete_status_ntf_id\022,\n\010progress\030\002 \001(\0162"
    "\032.SProtoSpace.ESLAPPROGRESS\022\020\n\010end_time\030"
    "\003 \001(\004\"\251\001\n\037game_harem_compete_redpoint_re"
    "q\022M\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSPro"
    "toID:\"game_harem_compete_redpoint_req_id"
    "\022%\n\004type\030\002 \001(\0162\027.SProtoSpace.EHAREMTYPE\022"
    "\020\n\010red_time\030\003 \001(\004\"}\n\037game_harem_compete_"
    "redpoint_ack\022M\n\010proto_id\030\001 \001(\0162\027.SProtoS"
    "pace.ECSProtoID:\"game_harem_compete_redp"
    "oint_ack_id\022\013\n\003ret\030\002 \001(\r\"\323\001\n\034game_harem_"
    "compete_share_req\022J\n\010proto_id\030\001 \001(\0162\027.SP"
    "rotoSpace.ECSProtoID:\037game_harem_compete"
    "_share_req_id\022*\n\004type\030\002 \001(\0162\034.SProtoSpac"
    "e.EHAREMSHARETYPE\022\020\n\010event_id\030\003 \001(\004\022\030\n\020w"
    "orld_channel_id\030\004 \001(\r\022\017\n\007content\030\005 \001(\t\"w"
    "\n\034game_harem_compete_share_ack\022J\n\010proto_"
    "id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\037game_"
    "harem_compete_share_ack_id\022\013\n\003ret\030\002 \001(\r\""
    "\204\001\n game_harem_compete_get_event_req\022N\n\010"
    "proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "#game_harem_compete_get_event_req_id\022\020\n\010"
    "event_id\030\002 \001(\004\"\243\001\n game_harem_compete_ge"
    "t_event_ack\022N\n\010proto_id\030\001 \001(\0162\027.SProtoSp"
    "ace.ECSProtoID:#game_harem_compete_get_e"
    "vent_ack_id\022/\n\005event\030\002 \001(\0132 .SProtoSpace"
    ".harem_compete_event\"\312\001\n\036game_harem_comp"
    "ete_tribute_req\022L\n\010proto_id\030\001 \001(\0162\027.SPro"
    "toSpace.ECSProtoID:!game_harem_compete_t"
    "ribute_req_id\022\021\n\ttarget_id\030\002 \001(\004\022\023\n\013targ"
    "et_name\030\003 \001(\t\022\022\n\ntribute_id\030\004 \001(\r\022\r\n\005cou"
    "nt\030\005 \001(\r\022\017\n\007content\030\006 \001(\t\"{\n\036game_harem_"
    "compete_tribute_ack\022L\n\010proto_id\030\001 \001(\0162\027."
    "SProtoSpace.ECSProtoID:!game_harem_compe"
    "te_tribute_ack_id\022\013\n\003ret\030\002 \001(\r\"\226\001\n\026creat"
    "e_3dchat_room_req\022D\n\010proto_id\030\001 \001(\0162\027.SP"
    "rotoSpace.ECSProtoID:\031create_3dchat_room"
    "_req_id\022\024\n\014room_conf_id\030\002 \001(\005\022\021\n\troom_na"
    "me\030\003 \001(\t\022\r\n\005token\030\004 \001(\t\"\243\001\n\026create_3dcha"
    "t_room_ack\022D\n\010proto_id\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID:\031create_3dchat_room_ack_id"
    "\022\013\n\003ret\030\002 \001(\r\022\024\n\014room_conf_id\030\003 \001(\005\022\021\n\tr"
    "oom_name\030\004 \001(\t\022\r\n\005token\030\005 \001(\t\"x\n\023enter_c"
    "hat_room_req\022A\n\010proto_id\030\001 \001(\0162\027.SProtoS"
    "pace.ECSProtoID:\026enter_chat_room_req_id\022"
    "\017\n\007room_id\030\002 \001(\005\022\r\n\005token\030\003 \001(\t\"v\n\023enter"
    "_chat_room_ack\022A\n\010proto_id\030\001 \001(\0162\027.SProt"
    "oSpace.ECSProtoID:\026enter_chat_room_ack_i"
    "d\022\013\n\003ret\030\002 \001(\r\022\017\n\007room_id\030\003 \001(\005\"g\n\022exit_"
    "chat_room_req\022@\n\010proto_id\030\001 \001(\0162\027.SProto"
    "Space.ECSProtoID:\025exit_chat_room_req_id\022"
    "\017\n\007room_id\030\002 \001(\005\"t\n\022exit_chat_room_ack\022@"
    "\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoI"
    "D:\025exit_chat_room_ack_id\022\013\n\003ret\030\002 \001(\r\022\017\n"
    "\007room_id\030\003 \001(\005\"\341\001\n\034update_chat_room_play"
    "ers_ntf\022J\n\010proto_id\030\001 \001(\0162\027.SProtoSpace."
    "ECSProtoID:\037update_chat_room_players_ntf"
    "_id\022\017\n\007room_id\030\002 \001(\005\0221\n\013add_players\030\003 \003("
    "\0132\034.SProtoSpace.role_base_3part\0221\n\013del_p"
    "layers\030\004 \003(\0132\034.SProtoSpace.role_base_3pa"
    "rt\"\344\001\n\024update_chat_view_ntf\022B\n\010proto_id\030"
    "\001 \001(\0162\027.SProtoSpace.ECSProtoID:\027update_c"
    "hat_view_ntf_id\022,\n\010fix_list\030\002 \003(\0132\032.SPro"
    "toSpace.role_position\022,\n\010add_list\030\003 \003(\0132"
    "\032.SProtoSpace.role_position\022,\n\010del_list\030"
    "\004 \003(\0132\032.SProtoSpace.role_position\"\226\001\n\023re"
    "port_position_req\022A\n\010proto_id\030\001 \001(\0162\027.SP"
    "rotoSpace.ECSProtoID:\026report_position_re"
    "q_id\022\017\n\007room_id\030\002 \001(\005\022+\n\007cur_pos\030\003 \001(\0132\032"
    ".SProtoSpace.role_position\"\243\001\n\023report_po"
    "sition_ack\022A\n\010proto_id\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID:\026report_position_ack_id\022\013\n"
    "\003ret\030\002 \001(\r\022\017\n\007room_id\030\003 \001(\005\022+\n\007cur_pos\030\004"
    " \001(\0132\032.SProtoSpace.role_position\"m\n\025get_"
    "role_position_req\022C\n\010proto_id\030\001 \001(\0162\027.SP"
    "rotoSpace.ECSProtoID:\030get_role_position_"
    "req_id\022\017\n\007dest_id\030\002 \001(\004\"\250\001\n\025get_role_pos"
    "ition_ack\022C\n\010proto_id\030\001 \001(\0162\027.SProtoSpac"
    "e.ECSProtoID:\030get_role_position_ack_id\022\013"
    "\n\003ret\030\002 \001(\r\022\017\n\007room_id\030\003 \001(\005\022,\n\010dest_pos"
    "\030\004 \001(\0132\032.SProtoSpace.role_position\"\206\001\n\026g"
    "et_chat_room_list_req\022D\n\010proto_id\030\001 \001(\0162"
    "\027.SProtoSpace.ECSProtoID:\031get_chat_room_"
    "list_req_id\022\023\n\013index_start\030\002 \001(\005\022\021\n\tinde"
    "x_end\030\003 \001(\005\"\300\001\n\026get_chat_room_list_ack\022D"
    "\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoI"
    "D:\031get_chat_room_list_ack_id\022\013\n\003ret\030\002 \001("
    "\005\022\023\n\013index_start\030\003 \001(\005\022\021\n\tindex_end\030\004 \001("
    "\005\022+\n\005rooms\030\005 \003(\0132\034.SProtoSpace.chat_room"
    "_state\"\202\001\n\034member_kick_3d_chat_room_req\022"
    "J\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProto"
    "ID:\037member_kick_3d_chat_room_req_id\022\026\n\016k"
    "icked_role_id\030\002 \001(\004\"\245\001\n\034member_kick_3d_c"
    "hat_room_ack\022J\n\010proto_id\030\001 \001(\0162\027.SProtoS"
    "pace.ECSProtoID:\037member_kick_3d_chat_roo"
    "m_ack_id\022\013\n\003ret\030\002 \001(\005\022\026\n\016kicked_role_id\030"
    "\003 \001(\004\022\024\n\014sour_role_id\030\004 \001(\004\"\271\001\n\025get_hang"
    "_up_award_ntf\022C\n\010proto_id\030\001 \001(\0162\027.SProto"
    "Space.ECSProtoID:\030get_hang_up_award_ntf_"
    "id\022+\n\tfix_items\030\002 \001(\0132\030.SProtoSpace.rewa"
    "rd_item\022.\n\014random_items\030\003 \001(\0132\030.SProtoSp"
    "ace.reward_item\"\235\001\n\024get_hang_up_info_ntf"
    "\022B\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProt"
    "oID:\027get_hang_up_info_ntf_id\022\022\n\ncount_do"
    "wn\030\002 \001(\005\022\030\n\020completion_times\030\003 \001(\005\022\023\n\013to"
    "tal_times\030\004 \001(\005\"\341\001\n\031update_chat_room_dat"
    "a_ntf\022G\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.EC"
    "SProtoID:\034update_chat_room_data_ntf_id\022\020"
    "\n\010owner_id\030\002 \001(\004\022\024\n\014room_conf_id\030\003 \001(\005\022\031"
    "\n\021total_fight_power\030\004 \001(\003\022\021\n\troom_name\030\005"
    " \001(\t\022\016\n\006is_top\030\006 \001(\010\022\025\n\rtop_left_time\030\007 "
    "\001(\005\"s\n\030get_3d_chat_room_pos_req\022F\n\010proto"
    "_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\033get_"
    "3d_chat_room_pos_req_id\022\017\n\007room_id\030\002 \001(\005"
    "\"\215\001\n\030get_3d_chat_room_pos_ack\022F\n\010proto_i"
    "d\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\033get_3d"
    "_chat_room_pos_ack_id\022\013\n\003ret\030\002 \001(\005\022\017\n\007ro"
    "om_id\030\003 \001(\005\022\013\n\003pos\030\004 \001(\005\"\201\001\n\024top_3d_chat"
    "_room_req\022B\n\010proto_id\030\001 \001(\0162\027.SProtoSpac"
    "e.ECSProtoID:\027top_3d_chat_room_req_id\022\017\n"
    "\007room_id\030\002 \001(\005\022\024\n\014item_conf_id\030\003 \001(\005\"\216\001\n"
    "\024top_3d_chat_room_ack\022B\n\010proto_id\030\001 \001(\0162"
    "\027.SProtoSpace.ECSProtoID:\027top_3d_chat_ro"
    "om_ack_id\022\013\n\003ret\030\002 \001(\005\022\017\n\007room_id\030\003 \001(\005\022"
    "\024\n\014item_conf_id\030\004 \001(\005\"\237\001\n\034change_name_3d"
    "_chat_room_req\022J\n\010proto_id\030\001 \001(\0162\027.SProt"
    "oSpace.ECSProtoID:\037change_name_3d_chat_r"
    "oom_req_id\022\017\n\007room_id\030\002 \001(\005\022\024\n\014item_conf"
    "_id\030\003 \001(\005\022\014\n\004name\030\004 \001(\t\"\226\001\n\034change_name_"
    "3d_chat_room_ack\022J\n\010proto_id\030\001 \001(\0162\027.SPr"
    "otoSpace.ECSProtoID:\037change_name_3d_chat"
    "_room_ack_id\022\013\n\003ret\030\002 \001(\005\022\017\n\007room_id\030\003 \001"
    "(\005\022\014\n\004name\030\004 \001(\t", 10656);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_social.proto", &protobuf_RegisterTypes);
  game_friends_ntf::default_instance_ = new game_friends_ntf();
  game_friend_refresh_req::default_instance_ = new game_friend_refresh_req();
  game_friend_refresh_ack::default_instance_ = new game_friend_refresh_ack();
  friend_all_apply_info_ntf::default_instance_ = new friend_all_apply_info_ntf();
  game_search_friend_req::default_instance_ = new game_search_friend_req();
  game_search_friend_ack::default_instance_ = new game_search_friend_ack();
  game_get_recommend_friend_req::default_instance_ = new game_get_recommend_friend_req();
  game_get_recommend_friend_ack::default_instance_ = new game_get_recommend_friend_ack();
  game_add_friend_req::default_instance_ = new game_add_friend_req();
  game_add_friend_ack::default_instance_ = new game_add_friend_ack();
  game_friend_opt_ntf::default_instance_ = new game_friend_opt_ntf();
  game_process_apply_info_req::default_instance_ = new game_process_apply_info_req();
  game_process_apply_info_ack::default_instance_ = new game_process_apply_info_ack();
  game_Onekey_apply_info_req::default_instance_ = new game_Onekey_apply_info_req();
  game_onekey_apply_info_ack::default_instance_ = new game_onekey_apply_info_ack();
  game_add_blacklist_req::default_instance_ = new game_add_blacklist_req();
  game_add_blacklist_ack::default_instance_ = new game_add_blacklist_ack();
  game_remove_friend_req::default_instance_ = new game_remove_friend_req();
  game_remove_friend_ack::default_instance_ = new game_remove_friend_ack();
  game_give_item_req::default_instance_ = new game_give_item_req();
  game_give_item_ack::default_instance_ = new game_give_item_ack();
  game_give_item_ntf::default_instance_ = new game_give_item_ntf();
  game_harem_compete_ntf::default_instance_ = new game_harem_compete_ntf();
  game_harem_compete_qingan_req::default_instance_ = new game_harem_compete_qingan_req();
  game_harem_compete_qingan_ack::default_instance_ = new game_harem_compete_qingan_ack();
  game_harem_compete_slap_req::default_instance_ = new game_harem_compete_slap_req();
  game_harem_compete_slap_ack::default_instance_ = new game_harem_compete_slap_ack();
  game_harem_compete_friends_req::default_instance_ = new game_harem_compete_friends_req();
  game_harem_compete_friends_ack::default_instance_ = new game_harem_compete_friends_ack();
  game_harem_compete_sync_ntf::default_instance_ = new game_harem_compete_sync_ntf();
  game_harem_compete_clear_req::default_instance_ = new game_harem_compete_clear_req();
  game_harem_compete_clear_ack::default_instance_ = new game_harem_compete_clear_ack();
  game_harem_compete_status_ntf::default_instance_ = new game_harem_compete_status_ntf();
  game_harem_compete_redpoint_req::default_instance_ = new game_harem_compete_redpoint_req();
  game_harem_compete_redpoint_ack::default_instance_ = new game_harem_compete_redpoint_ack();
  game_harem_compete_share_req::default_instance_ = new game_harem_compete_share_req();
  game_harem_compete_share_ack::default_instance_ = new game_harem_compete_share_ack();
  game_harem_compete_get_event_req::default_instance_ = new game_harem_compete_get_event_req();
  game_harem_compete_get_event_ack::default_instance_ = new game_harem_compete_get_event_ack();
  game_harem_compete_tribute_req::default_instance_ = new game_harem_compete_tribute_req();
  game_harem_compete_tribute_ack::default_instance_ = new game_harem_compete_tribute_ack();
  create_3dchat_room_req::default_instance_ = new create_3dchat_room_req();
  create_3dchat_room_ack::default_instance_ = new create_3dchat_room_ack();
  enter_chat_room_req::default_instance_ = new enter_chat_room_req();
  enter_chat_room_ack::default_instance_ = new enter_chat_room_ack();
  exit_chat_room_req::default_instance_ = new exit_chat_room_req();
  exit_chat_room_ack::default_instance_ = new exit_chat_room_ack();
  update_chat_room_players_ntf::default_instance_ = new update_chat_room_players_ntf();
  update_chat_view_ntf::default_instance_ = new update_chat_view_ntf();
  report_position_req::default_instance_ = new report_position_req();
  report_position_ack::default_instance_ = new report_position_ack();
  get_role_position_req::default_instance_ = new get_role_position_req();
  get_role_position_ack::default_instance_ = new get_role_position_ack();
  get_chat_room_list_req::default_instance_ = new get_chat_room_list_req();
  get_chat_room_list_ack::default_instance_ = new get_chat_room_list_ack();
  member_kick_3d_chat_room_req::default_instance_ = new member_kick_3d_chat_room_req();
  member_kick_3d_chat_room_ack::default_instance_ = new member_kick_3d_chat_room_ack();
  get_hang_up_award_ntf::default_instance_ = new get_hang_up_award_ntf();
  get_hang_up_info_ntf::default_instance_ = new get_hang_up_info_ntf();
  update_chat_room_data_ntf::default_instance_ = new update_chat_room_data_ntf();
  get_3d_chat_room_pos_req::default_instance_ = new get_3d_chat_room_pos_req();
  get_3d_chat_room_pos_ack::default_instance_ = new get_3d_chat_room_pos_ack();
  top_3d_chat_room_req::default_instance_ = new top_3d_chat_room_req();
  top_3d_chat_room_ack::default_instance_ = new top_3d_chat_room_ack();
  change_name_3d_chat_room_req::default_instance_ = new change_name_3d_chat_room_req();
  change_name_3d_chat_room_ack::default_instance_ = new change_name_3d_chat_room_ack();
  game_friends_ntf::default_instance_->InitAsDefaultInstance();
  game_friend_refresh_req::default_instance_->InitAsDefaultInstance();
  game_friend_refresh_ack::default_instance_->InitAsDefaultInstance();
  friend_all_apply_info_ntf::default_instance_->InitAsDefaultInstance();
  game_search_friend_req::default_instance_->InitAsDefaultInstance();
  game_search_friend_ack::default_instance_->InitAsDefaultInstance();
  game_get_recommend_friend_req::default_instance_->InitAsDefaultInstance();
  game_get_recommend_friend_ack::default_instance_->InitAsDefaultInstance();
  game_add_friend_req::default_instance_->InitAsDefaultInstance();
  game_add_friend_ack::default_instance_->InitAsDefaultInstance();
  game_friend_opt_ntf::default_instance_->InitAsDefaultInstance();
  game_process_apply_info_req::default_instance_->InitAsDefaultInstance();
  game_process_apply_info_ack::default_instance_->InitAsDefaultInstance();
  game_Onekey_apply_info_req::default_instance_->InitAsDefaultInstance();
  game_onekey_apply_info_ack::default_instance_->InitAsDefaultInstance();
  game_add_blacklist_req::default_instance_->InitAsDefaultInstance();
  game_add_blacklist_ack::default_instance_->InitAsDefaultInstance();
  game_remove_friend_req::default_instance_->InitAsDefaultInstance();
  game_remove_friend_ack::default_instance_->InitAsDefaultInstance();
  game_give_item_req::default_instance_->InitAsDefaultInstance();
  game_give_item_ack::default_instance_->InitAsDefaultInstance();
  game_give_item_ntf::default_instance_->InitAsDefaultInstance();
  game_harem_compete_ntf::default_instance_->InitAsDefaultInstance();
  game_harem_compete_qingan_req::default_instance_->InitAsDefaultInstance();
  game_harem_compete_qingan_ack::default_instance_->InitAsDefaultInstance();
  game_harem_compete_slap_req::default_instance_->InitAsDefaultInstance();
  game_harem_compete_slap_ack::default_instance_->InitAsDefaultInstance();
  game_harem_compete_friends_req::default_instance_->InitAsDefaultInstance();
  game_harem_compete_friends_ack::default_instance_->InitAsDefaultInstance();
  game_harem_compete_sync_ntf::default_instance_->InitAsDefaultInstance();
  game_harem_compete_clear_req::default_instance_->InitAsDefaultInstance();
  game_harem_compete_clear_ack::default_instance_->InitAsDefaultInstance();
  game_harem_compete_status_ntf::default_instance_->InitAsDefaultInstance();
  game_harem_compete_redpoint_req::default_instance_->InitAsDefaultInstance();
  game_harem_compete_redpoint_ack::default_instance_->InitAsDefaultInstance();
  game_harem_compete_share_req::default_instance_->InitAsDefaultInstance();
  game_harem_compete_share_ack::default_instance_->InitAsDefaultInstance();
  game_harem_compete_get_event_req::default_instance_->InitAsDefaultInstance();
  game_harem_compete_get_event_ack::default_instance_->InitAsDefaultInstance();
  game_harem_compete_tribute_req::default_instance_->InitAsDefaultInstance();
  game_harem_compete_tribute_ack::default_instance_->InitAsDefaultInstance();
  create_3dchat_room_req::default_instance_->InitAsDefaultInstance();
  create_3dchat_room_ack::default_instance_->InitAsDefaultInstance();
  enter_chat_room_req::default_instance_->InitAsDefaultInstance();
  enter_chat_room_ack::default_instance_->InitAsDefaultInstance();
  exit_chat_room_req::default_instance_->InitAsDefaultInstance();
  exit_chat_room_ack::default_instance_->InitAsDefaultInstance();
  update_chat_room_players_ntf::default_instance_->InitAsDefaultInstance();
  update_chat_view_ntf::default_instance_->InitAsDefaultInstance();
  report_position_req::default_instance_->InitAsDefaultInstance();
  report_position_ack::default_instance_->InitAsDefaultInstance();
  get_role_position_req::default_instance_->InitAsDefaultInstance();
  get_role_position_ack::default_instance_->InitAsDefaultInstance();
  get_chat_room_list_req::default_instance_->InitAsDefaultInstance();
  get_chat_room_list_ack::default_instance_->InitAsDefaultInstance();
  member_kick_3d_chat_room_req::default_instance_->InitAsDefaultInstance();
  member_kick_3d_chat_room_ack::default_instance_->InitAsDefaultInstance();
  get_hang_up_award_ntf::default_instance_->InitAsDefaultInstance();
  get_hang_up_info_ntf::default_instance_->InitAsDefaultInstance();
  update_chat_room_data_ntf::default_instance_->InitAsDefaultInstance();
  get_3d_chat_room_pos_req::default_instance_->InitAsDefaultInstance();
  get_3d_chat_room_pos_ack::default_instance_->InitAsDefaultInstance();
  top_3d_chat_room_req::default_instance_->InitAsDefaultInstance();
  top_3d_chat_room_ack::default_instance_->InitAsDefaultInstance();
  change_name_3d_chat_room_req::default_instance_->InitAsDefaultInstance();
  change_name_3d_chat_room_ack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5fsocial_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5fsocial_2eproto {
  StaticDescriptorInitializer_cs_5fsocial_2eproto() {
    protobuf_AddDesc_cs_5fsocial_2eproto();
  }
} static_descriptor_initializer_cs_5fsocial_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int game_friends_ntf::kProtoIdFieldNumber;
const int game_friends_ntf::kFdInfosFieldNumber;
const int game_friends_ntf::kBlInfosFieldNumber;
const int game_friends_ntf::kGiveTimesFieldNumber;
const int game_friends_ntf::kDrawTimesFieldNumber;
const int game_friends_ntf::kGiveIdsFieldNumber;
#endif  // !_MSC_VER

game_friends_ntf::game_friends_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_friends_ntf::InitAsDefaultInstance() {
}

game_friends_ntf::game_friends_ntf(const game_friends_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_friends_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6315;
  give_times_ = 0u;
  draw_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_friends_ntf::~game_friends_ntf() {
  SharedDtor();
}

void game_friends_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_friends_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_friends_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_friends_ntf_descriptor_;
}

const game_friends_ntf& game_friends_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_friends_ntf* game_friends_ntf::default_instance_ = NULL;

game_friends_ntf* game_friends_ntf::New() const {
  return new game_friends_ntf;
}

void game_friends_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6315;
    give_times_ = 0u;
    draw_times_ = 0u;
  }
  fd_infos_.Clear();
  bl_infos_.Clear();
  give_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_friends_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friends_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fd_infos;
        break;
      }

      // repeated .SProtoSpace.friend_base_info fd_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fd_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fd_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fd_infos;
        if (input->ExpectTag(26)) goto parse_bl_infos;
        break;
      }

      // repeated .SProtoSpace.friend_base_info bl_infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bl_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bl_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bl_infos;
        if (input->ExpectTag(32)) goto parse_give_times;
        break;
      }

      // optional uint32 give_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_give_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &give_times_)));
          set_has_give_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_draw_times;
        break;
      }

      // optional uint32 draw_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &draw_times_)));
          set_has_draw_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_give_ids;
        break;
      }

      // repeated uint64 give_ids = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_give_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48, input, this->mutable_give_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_give_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_give_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_friends_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friends_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // repeated .SProtoSpace.friend_base_info fd_infos = 2;
  for (int i = 0; i < this->fd_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fd_infos(i), output);
  }

  // repeated .SProtoSpace.friend_base_info bl_infos = 3;
  for (int i = 0; i < this->bl_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bl_infos(i), output);
  }

  // optional uint32 give_times = 4;
  if (has_give_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->give_times(), output);
  }

  // optional uint32 draw_times = 5;
  if (has_draw_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->draw_times(), output);
  }

  // repeated uint64 give_ids = 6;
  for (int i = 0; i < this->give_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->give_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_friends_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friends_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // repeated .SProtoSpace.friend_base_info fd_infos = 2;
  for (int i = 0; i < this->fd_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fd_infos(i), target);
  }

  // repeated .SProtoSpace.friend_base_info bl_infos = 3;
  for (int i = 0; i < this->bl_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bl_infos(i), target);
  }

  // optional uint32 give_times = 4;
  if (has_give_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->give_times(), target);
  }

  // optional uint32 draw_times = 5;
  if (has_draw_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->draw_times(), target);
  }

  // repeated uint64 give_ids = 6;
  for (int i = 0; i < this->give_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(6, this->give_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_friends_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friends_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 give_times = 4;
    if (has_give_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->give_times());
    }

    // optional uint32 draw_times = 5;
    if (has_draw_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->draw_times());
    }

  }
  // repeated .SProtoSpace.friend_base_info fd_infos = 2;
  total_size += 1 * this->fd_infos_size();
  for (int i = 0; i < this->fd_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fd_infos(i));
  }

  // repeated .SProtoSpace.friend_base_info bl_infos = 3;
  total_size += 1 * this->bl_infos_size();
  for (int i = 0; i < this->bl_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bl_infos(i));
  }

  // repeated uint64 give_ids = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->give_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->give_ids(i));
    }
    total_size += 1 * this->give_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_friends_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_friends_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_friends_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_friends_ntf::MergeFrom(const game_friends_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  fd_infos_.MergeFrom(from.fd_infos_);
  bl_infos_.MergeFrom(from.bl_infos_);
  give_ids_.MergeFrom(from.give_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_give_times()) {
      set_give_times(from.give_times());
    }
    if (from.has_draw_times()) {
      set_draw_times(from.draw_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_friends_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_friends_ntf::CopyFrom(const game_friends_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_friends_ntf::IsInitialized() const {

  return true;
}

void game_friends_ntf::Swap(game_friends_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    fd_infos_.Swap(&other->fd_infos_);
    bl_infos_.Swap(&other->bl_infos_);
    std::swap(give_times_, other->give_times_);
    std::swap(draw_times_, other->draw_times_);
    give_ids_.Swap(&other->give_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_friends_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_friends_ntf_descriptor_;
  metadata.reflection = game_friends_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_friend_refresh_req::kProtoIdFieldNumber;
const int game_friend_refresh_req::kTypeFieldNumber;
#endif  // !_MSC_VER

game_friend_refresh_req::game_friend_refresh_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_friend_refresh_req::InitAsDefaultInstance() {
}

game_friend_refresh_req::game_friend_refresh_req(const game_friend_refresh_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_friend_refresh_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6320;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_friend_refresh_req::~game_friend_refresh_req() {
  SharedDtor();
}

void game_friend_refresh_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_friend_refresh_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_friend_refresh_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_friend_refresh_req_descriptor_;
}

const game_friend_refresh_req& game_friend_refresh_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_friend_refresh_req* game_friend_refresh_req::default_instance_ = NULL;

game_friend_refresh_req* game_friend_refresh_req::New() const {
  return new game_friend_refresh_req;
}

void game_friend_refresh_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6320;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_friend_refresh_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friend_refresh_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_friend_refresh_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friend_refresh_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_friend_refresh_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friend_refresh_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_friend_refresh_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friend_refresh_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_friend_refresh_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_friend_refresh_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_friend_refresh_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_friend_refresh_req::MergeFrom(const game_friend_refresh_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_friend_refresh_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_friend_refresh_req::CopyFrom(const game_friend_refresh_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_friend_refresh_req::IsInitialized() const {

  return true;
}

void game_friend_refresh_req::Swap(game_friend_refresh_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_friend_refresh_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_friend_refresh_req_descriptor_;
  metadata.reflection = game_friend_refresh_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_friend_refresh_ack::kProtoIdFieldNumber;
const int game_friend_refresh_ack::kInfosFieldNumber;
const int game_friend_refresh_ack::kTypeFieldNumber;
const int game_friend_refresh_ack::kRetFieldNumber;
#endif  // !_MSC_VER

game_friend_refresh_ack::game_friend_refresh_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_friend_refresh_ack::InitAsDefaultInstance() {
}

game_friend_refresh_ack::game_friend_refresh_ack(const game_friend_refresh_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_friend_refresh_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6321;
  type_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_friend_refresh_ack::~game_friend_refresh_ack() {
  SharedDtor();
}

void game_friend_refresh_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_friend_refresh_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_friend_refresh_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_friend_refresh_ack_descriptor_;
}

const game_friend_refresh_ack& game_friend_refresh_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_friend_refresh_ack* game_friend_refresh_ack::default_instance_ = NULL;

game_friend_refresh_ack* game_friend_refresh_ack::New() const {
  return new game_friend_refresh_ack;
}

void game_friend_refresh_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6321;
    type_ = 0u;
    ret_ = 0u;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_friend_refresh_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friend_refresh_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .SProtoSpace.friend_base_info infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_friend_refresh_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friend_refresh_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // repeated .SProtoSpace.friend_base_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_friend_refresh_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friend_refresh_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // repeated .SProtoSpace.friend_base_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_friend_refresh_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friend_refresh_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .SProtoSpace.friend_base_info infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_friend_refresh_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_friend_refresh_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_friend_refresh_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_friend_refresh_ack::MergeFrom(const game_friend_refresh_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_friend_refresh_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_friend_refresh_ack::CopyFrom(const game_friend_refresh_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_friend_refresh_ack::IsInitialized() const {

  return true;
}

void game_friend_refresh_ack::Swap(game_friend_refresh_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    infos_.Swap(&other->infos_);
    std::swap(type_, other->type_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_friend_refresh_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_friend_refresh_ack_descriptor_;
  metadata.reflection = game_friend_refresh_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_all_apply_info_ntf::kProtoIdFieldNumber;
const int friend_all_apply_info_ntf::kApplyInfosFieldNumber;
#endif  // !_MSC_VER

friend_all_apply_info_ntf::friend_all_apply_info_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_all_apply_info_ntf::InitAsDefaultInstance() {
}

friend_all_apply_info_ntf::friend_all_apply_info_ntf(const friend_all_apply_info_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_all_apply_info_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6302;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_all_apply_info_ntf::~friend_all_apply_info_ntf() {
  SharedDtor();
}

void friend_all_apply_info_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void friend_all_apply_info_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_all_apply_info_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_all_apply_info_ntf_descriptor_;
}

const friend_all_apply_info_ntf& friend_all_apply_info_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

friend_all_apply_info_ntf* friend_all_apply_info_ntf::default_instance_ = NULL;

friend_all_apply_info_ntf* friend_all_apply_info_ntf::New() const {
  return new friend_all_apply_info_ntf;
}

void friend_all_apply_info_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6302;
  }
  apply_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_all_apply_info_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = friend_all_apply_info_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apply_infos;
        break;
      }

      // repeated .SProtoSpace.friend_apply_info apply_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apply_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apply_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_all_apply_info_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = friend_all_apply_info_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // repeated .SProtoSpace.friend_apply_info apply_infos = 2;
  for (int i = 0; i < this->apply_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->apply_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_all_apply_info_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = friend_all_apply_info_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // repeated .SProtoSpace.friend_apply_info apply_infos = 2;
  for (int i = 0; i < this->apply_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->apply_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_all_apply_info_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = friend_all_apply_info_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  // repeated .SProtoSpace.friend_apply_info apply_infos = 2;
  total_size += 1 * this->apply_infos_size();
  for (int i = 0; i < this->apply_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apply_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_all_apply_info_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_all_apply_info_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_all_apply_info_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_all_apply_info_ntf::MergeFrom(const friend_all_apply_info_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  apply_infos_.MergeFrom(from.apply_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_all_apply_info_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_all_apply_info_ntf::CopyFrom(const friend_all_apply_info_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_all_apply_info_ntf::IsInitialized() const {

  return true;
}

void friend_all_apply_info_ntf::Swap(friend_all_apply_info_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    apply_infos_.Swap(&other->apply_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_all_apply_info_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_all_apply_info_ntf_descriptor_;
  metadata.reflection = friend_all_apply_info_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_search_friend_req::kProtoIdFieldNumber;
const int game_search_friend_req::kTypeFieldNumber;
const int game_search_friend_req::kContentFieldNumber;
#endif  // !_MSC_VER

game_search_friend_req::game_search_friend_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_search_friend_req::InitAsDefaultInstance() {
}

game_search_friend_req::game_search_friend_req(const game_search_friend_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_search_friend_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6300;
  type_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_search_friend_req::~game_search_friend_req() {
  SharedDtor();
}

void game_search_friend_req::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void game_search_friend_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_search_friend_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_search_friend_req_descriptor_;
}

const game_search_friend_req& game_search_friend_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_search_friend_req* game_search_friend_req::default_instance_ = NULL;

game_search_friend_req* game_search_friend_req::New() const {
  return new game_search_friend_req;
}

void game_search_friend_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6300;
    type_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_search_friend_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_search_friend_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_search_friend_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_search_friend_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_search_friend_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_search_friend_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_search_friend_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_search_friend_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_search_friend_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_search_friend_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_search_friend_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_search_friend_req::MergeFrom(const game_search_friend_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_search_friend_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_search_friend_req::CopyFrom(const game_search_friend_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_search_friend_req::IsInitialized() const {

  return true;
}

void game_search_friend_req::Swap(game_search_friend_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_search_friend_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_search_friend_req_descriptor_;
  metadata.reflection = game_search_friend_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_search_friend_ack::kProtoIdFieldNumber;
const int game_search_friend_ack::kRetFieldNumber;
const int game_search_friend_ack::kFdInfosFieldNumber;
#endif  // !_MSC_VER

game_search_friend_ack::game_search_friend_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_search_friend_ack::InitAsDefaultInstance() {
}

game_search_friend_ack::game_search_friend_ack(const game_search_friend_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_search_friend_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6301;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_search_friend_ack::~game_search_friend_ack() {
  SharedDtor();
}

void game_search_friend_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_search_friend_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_search_friend_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_search_friend_ack_descriptor_;
}

const game_search_friend_ack& game_search_friend_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_search_friend_ack* game_search_friend_ack::default_instance_ = NULL;

game_search_friend_ack* game_search_friend_ack::New() const {
  return new game_search_friend_ack;
}

void game_search_friend_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6301;
    ret_ = 0u;
  }
  fd_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_search_friend_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_search_friend_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fd_infos;
        break;
      }

      // repeated .SProtoSpace.friend_base_info fd_infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fd_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fd_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fd_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_search_friend_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_search_friend_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // repeated .SProtoSpace.friend_base_info fd_infos = 3;
  for (int i = 0; i < this->fd_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fd_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_search_friend_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_search_friend_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // repeated .SProtoSpace.friend_base_info fd_infos = 3;
  for (int i = 0; i < this->fd_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fd_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_search_friend_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_search_friend_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .SProtoSpace.friend_base_info fd_infos = 3;
  total_size += 1 * this->fd_infos_size();
  for (int i = 0; i < this->fd_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fd_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_search_friend_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_search_friend_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_search_friend_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_search_friend_ack::MergeFrom(const game_search_friend_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  fd_infos_.MergeFrom(from.fd_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_search_friend_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_search_friend_ack::CopyFrom(const game_search_friend_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_search_friend_ack::IsInitialized() const {

  return true;
}

void game_search_friend_ack::Swap(game_search_friend_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    fd_infos_.Swap(&other->fd_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_search_friend_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_search_friend_ack_descriptor_;
  metadata.reflection = game_search_friend_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_get_recommend_friend_req::kProtoIdFieldNumber;
const int game_get_recommend_friend_req::kUuidFieldNumber;
const int game_get_recommend_friend_req::kAreaIdFieldNumber;
const int game_get_recommend_friend_req::kCountFieldNumber;
#endif  // !_MSC_VER

game_get_recommend_friend_req::game_get_recommend_friend_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_get_recommend_friend_req::InitAsDefaultInstance() {
}

game_get_recommend_friend_req::game_get_recommend_friend_req(const game_get_recommend_friend_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_get_recommend_friend_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6313;
  uuid_ = GOOGLE_ULONGLONG(0);
  area_id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_get_recommend_friend_req::~game_get_recommend_friend_req() {
  SharedDtor();
}

void game_get_recommend_friend_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_get_recommend_friend_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_get_recommend_friend_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_get_recommend_friend_req_descriptor_;
}

const game_get_recommend_friend_req& game_get_recommend_friend_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_get_recommend_friend_req* game_get_recommend_friend_req::default_instance_ = NULL;

game_get_recommend_friend_req* game_get_recommend_friend_req::New() const {
  return new game_get_recommend_friend_req;
}

void game_get_recommend_friend_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6313;
    uuid_ = GOOGLE_ULONGLONG(0);
    area_id_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_get_recommend_friend_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_get_recommend_friend_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional uint32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_get_recommend_friend_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_get_recommend_friend_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area_id(), output);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_get_recommend_friend_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_get_recommend_friend_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area_id(), target);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_get_recommend_friend_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_get_recommend_friend_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 area_id = 3;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_get_recommend_friend_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_get_recommend_friend_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_get_recommend_friend_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_get_recommend_friend_req::MergeFrom(const game_get_recommend_friend_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_get_recommend_friend_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_get_recommend_friend_req::CopyFrom(const game_get_recommend_friend_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_get_recommend_friend_req::IsInitialized() const {

  return true;
}

void game_get_recommend_friend_req::Swap(game_get_recommend_friend_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(area_id_, other->area_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_get_recommend_friend_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_get_recommend_friend_req_descriptor_;
  metadata.reflection = game_get_recommend_friend_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_get_recommend_friend_ack::kProtoIdFieldNumber;
const int game_get_recommend_friend_ack::kUuidFieldNumber;
const int game_get_recommend_friend_ack::kAreaIdFieldNumber;
const int game_get_recommend_friend_ack::kFdInfosFieldNumber;
#endif  // !_MSC_VER

game_get_recommend_friend_ack::game_get_recommend_friend_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_get_recommend_friend_ack::InitAsDefaultInstance() {
}

game_get_recommend_friend_ack::game_get_recommend_friend_ack(const game_get_recommend_friend_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_get_recommend_friend_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6314;
  uuid_ = GOOGLE_ULONGLONG(0);
  area_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_get_recommend_friend_ack::~game_get_recommend_friend_ack() {
  SharedDtor();
}

void game_get_recommend_friend_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_get_recommend_friend_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_get_recommend_friend_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_get_recommend_friend_ack_descriptor_;
}

const game_get_recommend_friend_ack& game_get_recommend_friend_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_get_recommend_friend_ack* game_get_recommend_friend_ack::default_instance_ = NULL;

game_get_recommend_friend_ack* game_get_recommend_friend_ack::New() const {
  return new game_get_recommend_friend_ack;
}

void game_get_recommend_friend_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6314;
    uuid_ = GOOGLE_ULONGLONG(0);
    area_id_ = 0u;
  }
  fd_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_get_recommend_friend_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_get_recommend_friend_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fd_infos;
        break;
      }

      // repeated .SProtoSpace.friend_base_info fd_infos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fd_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fd_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fd_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_get_recommend_friend_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_get_recommend_friend_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area_id(), output);
  }

  // repeated .SProtoSpace.friend_base_info fd_infos = 4;
  for (int i = 0; i < this->fd_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fd_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_get_recommend_friend_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_get_recommend_friend_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area_id(), target);
  }

  // repeated .SProtoSpace.friend_base_info fd_infos = 4;
  for (int i = 0; i < this->fd_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fd_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_get_recommend_friend_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_get_recommend_friend_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 area_id = 3;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

  }
  // repeated .SProtoSpace.friend_base_info fd_infos = 4;
  total_size += 1 * this->fd_infos_size();
  for (int i = 0; i < this->fd_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fd_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_get_recommend_friend_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_get_recommend_friend_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_get_recommend_friend_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_get_recommend_friend_ack::MergeFrom(const game_get_recommend_friend_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  fd_infos_.MergeFrom(from.fd_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_get_recommend_friend_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_get_recommend_friend_ack::CopyFrom(const game_get_recommend_friend_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_get_recommend_friend_ack::IsInitialized() const {

  return true;
}

void game_get_recommend_friend_ack::Swap(game_get_recommend_friend_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(area_id_, other->area_id_);
    fd_infos_.Swap(&other->fd_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_get_recommend_friend_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_get_recommend_friend_ack_descriptor_;
  metadata.reflection = game_get_recommend_friend_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_add_friend_req::kProtoIdFieldNumber;
const int game_add_friend_req::kAcceptIdFieldNumber;
const int game_add_friend_req::kApplyIdFieldNumber;
const int game_add_friend_req::kContentFieldNumber;
#endif  // !_MSC_VER

game_add_friend_req::game_add_friend_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_add_friend_req::InitAsDefaultInstance() {
}

game_add_friend_req::game_add_friend_req(const game_add_friend_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_add_friend_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6303;
  accept_id_ = GOOGLE_ULONGLONG(0);
  apply_id_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_add_friend_req::~game_add_friend_req() {
  SharedDtor();
}

void game_add_friend_req::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void game_add_friend_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_add_friend_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_add_friend_req_descriptor_;
}

const game_add_friend_req& game_add_friend_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_add_friend_req* game_add_friend_req::default_instance_ = NULL;

game_add_friend_req* game_add_friend_req::New() const {
  return new game_add_friend_req;
}

void game_add_friend_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6303;
    accept_id_ = GOOGLE_ULONGLONG(0);
    apply_id_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_add_friend_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_friend_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accept_id;
        break;
      }

      // optional uint64 accept_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accept_id_)));
          set_has_accept_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_apply_id;
        break;
      }

      // optional uint64 apply_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_id_)));
          set_has_apply_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_add_friend_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_friend_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 accept_id = 2;
  if (has_accept_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accept_id(), output);
  }

  // optional uint64 apply_id = 3;
  if (has_apply_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->apply_id(), output);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_add_friend_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_friend_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 accept_id = 2;
  if (has_accept_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accept_id(), target);
  }

  // optional uint64 apply_id = 3;
  if (has_apply_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->apply_id(), target);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_add_friend_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_friend_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 accept_id = 2;
    if (has_accept_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accept_id());
    }

    // optional uint64 apply_id = 3;
    if (has_apply_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_id());
    }

    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_add_friend_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_add_friend_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_add_friend_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_add_friend_req::MergeFrom(const game_add_friend_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_accept_id()) {
      set_accept_id(from.accept_id());
    }
    if (from.has_apply_id()) {
      set_apply_id(from.apply_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_add_friend_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_add_friend_req::CopyFrom(const game_add_friend_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_add_friend_req::IsInitialized() const {

  return true;
}

void game_add_friend_req::Swap(game_add_friend_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(accept_id_, other->accept_id_);
    std::swap(apply_id_, other->apply_id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_add_friend_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_add_friend_req_descriptor_;
  metadata.reflection = game_add_friend_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_add_friend_ack::kProtoIdFieldNumber;
const int game_add_friend_ack::kRetFieldNumber;
const int game_add_friend_ack::kAcceptIdFieldNumber;
#endif  // !_MSC_VER

game_add_friend_ack::game_add_friend_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_add_friend_ack::InitAsDefaultInstance() {
}

game_add_friend_ack::game_add_friend_ack(const game_add_friend_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_add_friend_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6304;
  ret_ = 0u;
  accept_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_add_friend_ack::~game_add_friend_ack() {
  SharedDtor();
}

void game_add_friend_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_add_friend_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_add_friend_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_add_friend_ack_descriptor_;
}

const game_add_friend_ack& game_add_friend_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_add_friend_ack* game_add_friend_ack::default_instance_ = NULL;

game_add_friend_ack* game_add_friend_ack::New() const {
  return new game_add_friend_ack;
}

void game_add_friend_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6304;
    ret_ = 0u;
    accept_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_add_friend_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_friend_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accept_id;
        break;
      }

      // optional uint64 accept_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accept_id_)));
          set_has_accept_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_add_friend_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_friend_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint64 accept_id = 3;
  if (has_accept_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->accept_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_add_friend_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_friend_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 accept_id = 3;
  if (has_accept_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->accept_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_add_friend_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_friend_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 accept_id = 3;
    if (has_accept_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accept_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_add_friend_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_add_friend_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_add_friend_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_add_friend_ack::MergeFrom(const game_add_friend_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_accept_id()) {
      set_accept_id(from.accept_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_add_friend_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_add_friend_ack::CopyFrom(const game_add_friend_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_add_friend_ack::IsInitialized() const {

  return true;
}

void game_add_friend_ack::Swap(game_add_friend_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(accept_id_, other->accept_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_add_friend_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_add_friend_ack_descriptor_;
  metadata.reflection = game_add_friend_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_friend_opt_ntf::kProtoIdFieldNumber;
const int game_friend_opt_ntf::kTypeFieldNumber;
const int game_friend_opt_ntf::kInfoFieldNumber;
const int game_friend_opt_ntf::kOptTimeFieldNumber;
const int game_friend_opt_ntf::kContentFieldNumber;
#endif  // !_MSC_VER

game_friend_opt_ntf::game_friend_opt_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_friend_opt_ntf::InitAsDefaultInstance() {
  info_ = const_cast< ::SProtoSpace::friend_base_info*>(&::SProtoSpace::friend_base_info::default_instance());
}

game_friend_opt_ntf::game_friend_opt_ntf(const game_friend_opt_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_friend_opt_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6316;
  type_ = 0u;
  info_ = NULL;
  opt_time_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_friend_opt_ntf::~game_friend_opt_ntf() {
  SharedDtor();
}

void game_friend_opt_ntf::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void game_friend_opt_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_friend_opt_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_friend_opt_ntf_descriptor_;
}

const game_friend_opt_ntf& game_friend_opt_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_friend_opt_ntf* game_friend_opt_ntf::default_instance_ = NULL;

game_friend_opt_ntf* game_friend_opt_ntf::New() const {
  return new game_friend_opt_ntf;
}

void game_friend_opt_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6316;
    type_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::SProtoSpace::friend_base_info::Clear();
    }
    opt_time_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_friend_opt_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friend_opt_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .SProtoSpace.friend_base_info info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opt_time;
        break;
      }

      // optional uint64 opt_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opt_time_)));
          set_has_opt_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional string content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_friend_opt_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friend_opt_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional .SProtoSpace.friend_base_info info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  // optional uint64 opt_time = 4;
  if (has_opt_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->opt_time(), output);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_friend_opt_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friend_opt_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional .SProtoSpace.friend_base_info info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  // optional uint64 opt_time = 4;
  if (has_opt_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->opt_time(), target);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_friend_opt_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_friend_opt_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .SProtoSpace.friend_base_info info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional uint64 opt_time = 4;
    if (has_opt_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opt_time());
    }

    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_friend_opt_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_friend_opt_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_friend_opt_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_friend_opt_ntf::MergeFrom(const game_friend_opt_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_info()) {
      mutable_info()->::SProtoSpace::friend_base_info::MergeFrom(from.info());
    }
    if (from.has_opt_time()) {
      set_opt_time(from.opt_time());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_friend_opt_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_friend_opt_ntf::CopyFrom(const game_friend_opt_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_friend_opt_ntf::IsInitialized() const {

  return true;
}

void game_friend_opt_ntf::Swap(game_friend_opt_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(type_, other->type_);
    std::swap(info_, other->info_);
    std::swap(opt_time_, other->opt_time_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_friend_opt_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_friend_opt_ntf_descriptor_;
  metadata.reflection = game_friend_opt_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_process_apply_info_req::kProtoIdFieldNumber;
const int game_process_apply_info_req::kTypeFieldNumber;
const int game_process_apply_info_req::kUuidFieldNumber;
const int game_process_apply_info_req::kApplyIdFieldNumber;
#endif  // !_MSC_VER

game_process_apply_info_req::game_process_apply_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_process_apply_info_req::InitAsDefaultInstance() {
}

game_process_apply_info_req::game_process_apply_info_req(const game_process_apply_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_process_apply_info_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6305;
  type_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  apply_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_process_apply_info_req::~game_process_apply_info_req() {
  SharedDtor();
}

void game_process_apply_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_process_apply_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_process_apply_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_process_apply_info_req_descriptor_;
}

const game_process_apply_info_req& game_process_apply_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_process_apply_info_req* game_process_apply_info_req::default_instance_ = NULL;

game_process_apply_info_req* game_process_apply_info_req::New() const {
  return new game_process_apply_info_req;
}

void game_process_apply_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6305;
    type_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    apply_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_process_apply_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_process_apply_info_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_apply_id;
        break;
      }

      // optional uint64 apply_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_id_)));
          set_has_apply_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_process_apply_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_process_apply_info_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint64 uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uuid(), output);
  }

  // optional uint64 apply_id = 4;
  if (has_apply_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->apply_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_process_apply_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_process_apply_info_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint64 uuid = 3;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uuid(), target);
  }

  // optional uint64 apply_id = 4;
  if (has_apply_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->apply_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_process_apply_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_process_apply_info_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint64 apply_id = 4;
    if (has_apply_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_process_apply_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_process_apply_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_process_apply_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_process_apply_info_req::MergeFrom(const game_process_apply_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_apply_id()) {
      set_apply_id(from.apply_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_process_apply_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_process_apply_info_req::CopyFrom(const game_process_apply_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_process_apply_info_req::IsInitialized() const {

  return true;
}

void game_process_apply_info_req::Swap(game_process_apply_info_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(type_, other->type_);
    std::swap(uuid_, other->uuid_);
    std::swap(apply_id_, other->apply_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_process_apply_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_process_apply_info_req_descriptor_;
  metadata.reflection = game_process_apply_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_process_apply_info_ack::kProtoIdFieldNumber;
const int game_process_apply_info_ack::kRetFieldNumber;
const int game_process_apply_info_ack::kInfoFieldNumber;
const int game_process_apply_info_ack::kTypeFieldNumber;
#endif  // !_MSC_VER

game_process_apply_info_ack::game_process_apply_info_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_process_apply_info_ack::InitAsDefaultInstance() {
  info_ = const_cast< ::SProtoSpace::friend_base_info*>(&::SProtoSpace::friend_base_info::default_instance());
}

game_process_apply_info_ack::game_process_apply_info_ack(const game_process_apply_info_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_process_apply_info_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6306;
  ret_ = 0u;
  info_ = NULL;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_process_apply_info_ack::~game_process_apply_info_ack() {
  SharedDtor();
}

void game_process_apply_info_ack::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void game_process_apply_info_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_process_apply_info_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_process_apply_info_ack_descriptor_;
}

const game_process_apply_info_ack& game_process_apply_info_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_process_apply_info_ack* game_process_apply_info_ack::default_instance_ = NULL;

game_process_apply_info_ack* game_process_apply_info_ack::New() const {
  return new game_process_apply_info_ack;
}

void game_process_apply_info_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6306;
    ret_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::SProtoSpace::friend_base_info::Clear();
    }
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_process_apply_info_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_process_apply_info_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .SProtoSpace.friend_base_info info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_process_apply_info_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_process_apply_info_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional .SProtoSpace.friend_base_info info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_process_apply_info_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_process_apply_info_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional .SProtoSpace.friend_base_info info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_process_apply_info_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_process_apply_info_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional .SProtoSpace.friend_base_info info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_process_apply_info_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_process_apply_info_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_process_apply_info_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_process_apply_info_ack::MergeFrom(const game_process_apply_info_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_info()) {
      mutable_info()->::SProtoSpace::friend_base_info::MergeFrom(from.info());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_process_apply_info_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_process_apply_info_ack::CopyFrom(const game_process_apply_info_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_process_apply_info_ack::IsInitialized() const {

  return true;
}

void game_process_apply_info_ack::Swap(game_process_apply_info_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(info_, other->info_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_process_apply_info_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_process_apply_info_ack_descriptor_;
  metadata.reflection = game_process_apply_info_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_Onekey_apply_info_req::kProtoIdFieldNumber;
const int game_Onekey_apply_info_req::kTypeFieldNumber;
#endif  // !_MSC_VER

game_Onekey_apply_info_req::game_Onekey_apply_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_Onekey_apply_info_req::InitAsDefaultInstance() {
}

game_Onekey_apply_info_req::game_Onekey_apply_info_req(const game_Onekey_apply_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_Onekey_apply_info_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6318;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_Onekey_apply_info_req::~game_Onekey_apply_info_req() {
  SharedDtor();
}

void game_Onekey_apply_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_Onekey_apply_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_Onekey_apply_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_Onekey_apply_info_req_descriptor_;
}

const game_Onekey_apply_info_req& game_Onekey_apply_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_Onekey_apply_info_req* game_Onekey_apply_info_req::default_instance_ = NULL;

game_Onekey_apply_info_req* game_Onekey_apply_info_req::New() const {
  return new game_Onekey_apply_info_req;
}

void game_Onekey_apply_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6318;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_Onekey_apply_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_Onekey_apply_info_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_Onekey_apply_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_Onekey_apply_info_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_Onekey_apply_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_Onekey_apply_info_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_Onekey_apply_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_Onekey_apply_info_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_Onekey_apply_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_Onekey_apply_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_Onekey_apply_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_Onekey_apply_info_req::MergeFrom(const game_Onekey_apply_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_Onekey_apply_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_Onekey_apply_info_req::CopyFrom(const game_Onekey_apply_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_Onekey_apply_info_req::IsInitialized() const {

  return true;
}

void game_Onekey_apply_info_req::Swap(game_Onekey_apply_info_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_Onekey_apply_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_Onekey_apply_info_req_descriptor_;
  metadata.reflection = game_Onekey_apply_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_onekey_apply_info_ack::kProtoIdFieldNumber;
const int game_onekey_apply_info_ack::kRetFieldNumber;
const int game_onekey_apply_info_ack::kInfosFieldNumber;
const int game_onekey_apply_info_ack::kTypeFieldNumber;
#endif  // !_MSC_VER

game_onekey_apply_info_ack::game_onekey_apply_info_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_onekey_apply_info_ack::InitAsDefaultInstance() {
}

game_onekey_apply_info_ack::game_onekey_apply_info_ack(const game_onekey_apply_info_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_onekey_apply_info_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6319;
  ret_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_onekey_apply_info_ack::~game_onekey_apply_info_ack() {
  SharedDtor();
}

void game_onekey_apply_info_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_onekey_apply_info_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_onekey_apply_info_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_onekey_apply_info_ack_descriptor_;
}

const game_onekey_apply_info_ack& game_onekey_apply_info_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_onekey_apply_info_ack* game_onekey_apply_info_ack::default_instance_ = NULL;

game_onekey_apply_info_ack* game_onekey_apply_info_ack::New() const {
  return new game_onekey_apply_info_ack;
}

void game_onekey_apply_info_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6319;
    ret_ = 0u;
    type_ = 0u;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_onekey_apply_info_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_onekey_apply_info_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        break;
      }

      // repeated .SProtoSpace.friend_base_info infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_onekey_apply_info_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_onekey_apply_info_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // repeated .SProtoSpace.friend_base_info infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infos(i), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_onekey_apply_info_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_onekey_apply_info_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // repeated .SProtoSpace.friend_base_info infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infos(i), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_onekey_apply_info_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_onekey_apply_info_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .SProtoSpace.friend_base_info infos = 3;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_onekey_apply_info_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_onekey_apply_info_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_onekey_apply_info_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_onekey_apply_info_ack::MergeFrom(const game_onekey_apply_info_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_onekey_apply_info_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_onekey_apply_info_ack::CopyFrom(const game_onekey_apply_info_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_onekey_apply_info_ack::IsInitialized() const {

  return true;
}

void game_onekey_apply_info_ack::Swap(game_onekey_apply_info_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    infos_.Swap(&other->infos_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_onekey_apply_info_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_onekey_apply_info_ack_descriptor_;
  metadata.reflection = game_onekey_apply_info_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_add_blacklist_req::kProtoIdFieldNumber;
const int game_add_blacklist_req::kUuidFieldNumber;
const int game_add_blacklist_req::kTargetIdFieldNumber;
#endif  // !_MSC_VER

game_add_blacklist_req::game_add_blacklist_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_add_blacklist_req::InitAsDefaultInstance() {
}

game_add_blacklist_req::game_add_blacklist_req(const game_add_blacklist_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_add_blacklist_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6307;
  uuid_ = GOOGLE_ULONGLONG(0);
  target_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_add_blacklist_req::~game_add_blacklist_req() {
  SharedDtor();
}

void game_add_blacklist_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_add_blacklist_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_add_blacklist_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_add_blacklist_req_descriptor_;
}

const game_add_blacklist_req& game_add_blacklist_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_add_blacklist_req* game_add_blacklist_req::default_instance_ = NULL;

game_add_blacklist_req* game_add_blacklist_req::New() const {
  return new game_add_blacklist_req;
}

void game_add_blacklist_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6307;
    uuid_ = GOOGLE_ULONGLONG(0);
    target_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_add_blacklist_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_blacklist_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_add_blacklist_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_blacklist_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint64 target_id = 3;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->target_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_add_blacklist_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_blacklist_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint64 target_id = 3;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->target_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_add_blacklist_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_blacklist_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint64 target_id = 3;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_add_blacklist_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_add_blacklist_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_add_blacklist_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_add_blacklist_req::MergeFrom(const game_add_blacklist_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_add_blacklist_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_add_blacklist_req::CopyFrom(const game_add_blacklist_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_add_blacklist_req::IsInitialized() const {

  return true;
}

void game_add_blacklist_req::Swap(game_add_blacklist_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(target_id_, other->target_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_add_blacklist_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_add_blacklist_req_descriptor_;
  metadata.reflection = game_add_blacklist_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_add_blacklist_ack::kProtoIdFieldNumber;
const int game_add_blacklist_ack::kRetFieldNumber;
const int game_add_blacklist_ack::kInfoFieldNumber;
#endif  // !_MSC_VER

game_add_blacklist_ack::game_add_blacklist_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_add_blacklist_ack::InitAsDefaultInstance() {
  info_ = const_cast< ::SProtoSpace::friend_base_info*>(&::SProtoSpace::friend_base_info::default_instance());
}

game_add_blacklist_ack::game_add_blacklist_ack(const game_add_blacklist_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_add_blacklist_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6308;
  ret_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_add_blacklist_ack::~game_add_blacklist_ack() {
  SharedDtor();
}

void game_add_blacklist_ack::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void game_add_blacklist_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_add_blacklist_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_add_blacklist_ack_descriptor_;
}

const game_add_blacklist_ack& game_add_blacklist_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_add_blacklist_ack* game_add_blacklist_ack::default_instance_ = NULL;

game_add_blacklist_ack* game_add_blacklist_ack::New() const {
  return new game_add_blacklist_ack;
}

void game_add_blacklist_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6308;
    ret_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::SProtoSpace::friend_base_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_add_blacklist_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_blacklist_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .SProtoSpace.friend_base_info info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_add_blacklist_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_blacklist_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional .SProtoSpace.friend_base_info info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_add_blacklist_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_blacklist_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional .SProtoSpace.friend_base_info info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_add_blacklist_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_add_blacklist_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional .SProtoSpace.friend_base_info info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_add_blacklist_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_add_blacklist_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_add_blacklist_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_add_blacklist_ack::MergeFrom(const game_add_blacklist_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_info()) {
      mutable_info()->::SProtoSpace::friend_base_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_add_blacklist_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_add_blacklist_ack::CopyFrom(const game_add_blacklist_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_add_blacklist_ack::IsInitialized() const {

  return true;
}

void game_add_blacklist_ack::Swap(game_add_blacklist_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_add_blacklist_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_add_blacklist_ack_descriptor_;
  metadata.reflection = game_add_blacklist_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_remove_friend_req::kProtoIdFieldNumber;
const int game_remove_friend_req::kTypeFieldNumber;
const int game_remove_friend_req::kUuidFieldNumber;
const int game_remove_friend_req::kTargetIdFieldNumber;
#endif  // !_MSC_VER

game_remove_friend_req::game_remove_friend_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_remove_friend_req::InitAsDefaultInstance() {
}

game_remove_friend_req::game_remove_friend_req(const game_remove_friend_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_remove_friend_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6309;
  type_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  target_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_remove_friend_req::~game_remove_friend_req() {
  SharedDtor();
}

void game_remove_friend_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_remove_friend_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_remove_friend_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_remove_friend_req_descriptor_;
}

const game_remove_friend_req& game_remove_friend_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_remove_friend_req* game_remove_friend_req::default_instance_ = NULL;

game_remove_friend_req* game_remove_friend_req::New() const {
  return new game_remove_friend_req;
}

void game_remove_friend_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6309;
    type_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    target_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_remove_friend_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_remove_friend_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_remove_friend_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_remove_friend_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint64 uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uuid(), output);
  }

  // optional uint64 target_id = 4;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->target_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_remove_friend_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_remove_friend_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint64 uuid = 3;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uuid(), target);
  }

  // optional uint64 target_id = 4;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->target_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_remove_friend_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_remove_friend_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint64 target_id = 4;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_remove_friend_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_remove_friend_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_remove_friend_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_remove_friend_req::MergeFrom(const game_remove_friend_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_remove_friend_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_remove_friend_req::CopyFrom(const game_remove_friend_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_remove_friend_req::IsInitialized() const {

  return true;
}

void game_remove_friend_req::Swap(game_remove_friend_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(type_, other->type_);
    std::swap(uuid_, other->uuid_);
    std::swap(target_id_, other->target_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_remove_friend_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_remove_friend_req_descriptor_;
  metadata.reflection = game_remove_friend_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_remove_friend_ack::kProtoIdFieldNumber;
const int game_remove_friend_ack::kRetFieldNumber;
const int game_remove_friend_ack::kTargetIdFieldNumber;
const int game_remove_friend_ack::kTypeFieldNumber;
#endif  // !_MSC_VER

game_remove_friend_ack::game_remove_friend_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_remove_friend_ack::InitAsDefaultInstance() {
}

game_remove_friend_ack::game_remove_friend_ack(const game_remove_friend_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_remove_friend_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6310;
  ret_ = 0u;
  target_id_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_remove_friend_ack::~game_remove_friend_ack() {
  SharedDtor();
}

void game_remove_friend_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_remove_friend_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_remove_friend_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_remove_friend_ack_descriptor_;
}

const game_remove_friend_ack& game_remove_friend_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_remove_friend_ack* game_remove_friend_ack::default_instance_ = NULL;

game_remove_friend_ack* game_remove_friend_ack::New() const {
  return new game_remove_friend_ack;
}

void game_remove_friend_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6310;
    ret_ = 0u;
    target_id_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_remove_friend_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_remove_friend_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_remove_friend_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_remove_friend_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint64 target_id = 3;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->target_id(), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_remove_friend_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_remove_friend_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 target_id = 3;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->target_id(), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_remove_friend_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_remove_friend_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 target_id = 3;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_remove_friend_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_remove_friend_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_remove_friend_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_remove_friend_ack::MergeFrom(const game_remove_friend_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_remove_friend_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_remove_friend_ack::CopyFrom(const game_remove_friend_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_remove_friend_ack::IsInitialized() const {

  return true;
}

void game_remove_friend_ack::Swap(game_remove_friend_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(target_id_, other->target_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_remove_friend_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_remove_friend_ack_descriptor_;
  metadata.reflection = game_remove_friend_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_give_item_req::kProtoIdFieldNumber;
const int game_give_item_req::kTypeFieldNumber;
const int game_give_item_req::kGiverIdFieldNumber;
const int game_give_item_req::kTargetIdFieldNumber;
const int game_give_item_req::kCountFieldNumber;
#endif  // !_MSC_VER

game_give_item_req::game_give_item_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_give_item_req::InitAsDefaultInstance() {
}

game_give_item_req::game_give_item_req(const game_give_item_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_give_item_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6311;
  type_ = 0u;
  giver_id_ = GOOGLE_ULONGLONG(0);
  target_id_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_give_item_req::~game_give_item_req() {
  SharedDtor();
}

void game_give_item_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_give_item_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_give_item_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_give_item_req_descriptor_;
}

const game_give_item_req& game_give_item_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_give_item_req* game_give_item_req::default_instance_ = NULL;

game_give_item_req* game_give_item_req::New() const {
  return new game_give_item_req;
}

void game_give_item_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6311;
    type_ = 0u;
    giver_id_ = GOOGLE_ULONGLONG(0);
    target_id_ = GOOGLE_ULONGLONG(0);
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_give_item_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_give_item_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_giver_id;
        break;
      }

      // optional uint64 giver_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giver_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &giver_id_)));
          set_has_giver_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional uint32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_give_item_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_give_item_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint64 giver_id = 3;
  if (has_giver_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->giver_id(), output);
  }

  // optional uint64 target_id = 4;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->target_id(), output);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_give_item_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_give_item_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint64 giver_id = 3;
  if (has_giver_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->giver_id(), target);
  }

  // optional uint64 target_id = 4;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->target_id(), target);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_give_item_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_give_item_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 giver_id = 3;
    if (has_giver_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->giver_id());
    }

    // optional uint64 target_id = 4;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional uint32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_give_item_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_give_item_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_give_item_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_give_item_req::MergeFrom(const game_give_item_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_giver_id()) {
      set_giver_id(from.giver_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_give_item_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_give_item_req::CopyFrom(const game_give_item_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_give_item_req::IsInitialized() const {

  return true;
}

void game_give_item_req::Swap(game_give_item_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(type_, other->type_);
    std::swap(giver_id_, other->giver_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_give_item_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_give_item_req_descriptor_;
  metadata.reflection = game_give_item_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_give_item_ack::kProtoIdFieldNumber;
const int game_give_item_ack::kRetFieldNumber;
const int game_give_item_ack::kTargetIdFieldNumber;
#endif  // !_MSC_VER

game_give_item_ack::game_give_item_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_give_item_ack::InitAsDefaultInstance() {
}

game_give_item_ack::game_give_item_ack(const game_give_item_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_give_item_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6312;
  ret_ = 0u;
  target_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_give_item_ack::~game_give_item_ack() {
  SharedDtor();
}

void game_give_item_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_give_item_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_give_item_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_give_item_ack_descriptor_;
}

const game_give_item_ack& game_give_item_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_give_item_ack* game_give_item_ack::default_instance_ = NULL;

game_give_item_ack* game_give_item_ack::New() const {
  return new game_give_item_ack;
}

void game_give_item_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6312;
    ret_ = 0u;
    target_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_give_item_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_give_item_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_give_item_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_give_item_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint64 target_id = 3;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->target_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_give_item_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_give_item_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 target_id = 3;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->target_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_give_item_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_give_item_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 target_id = 3;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_give_item_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_give_item_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_give_item_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_give_item_ack::MergeFrom(const game_give_item_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_give_item_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_give_item_ack::CopyFrom(const game_give_item_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_give_item_ack::IsInitialized() const {

  return true;
}

void game_give_item_ack::Swap(game_give_item_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(target_id_, other->target_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_give_item_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_give_item_ack_descriptor_;
  metadata.reflection = game_give_item_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_give_item_ntf::kProtoIdFieldNumber;
const int game_give_item_ntf::kInfoFieldNumber;
#endif  // !_MSC_VER

game_give_item_ntf::game_give_item_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_give_item_ntf::InitAsDefaultInstance() {
  info_ = const_cast< ::SProtoSpace::give_item_info*>(&::SProtoSpace::give_item_info::default_instance());
}

game_give_item_ntf::game_give_item_ntf(const game_give_item_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_give_item_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6317;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_give_item_ntf::~game_give_item_ntf() {
  SharedDtor();
}

void game_give_item_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void game_give_item_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_give_item_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_give_item_ntf_descriptor_;
}

const game_give_item_ntf& game_give_item_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_give_item_ntf* game_give_item_ntf::default_instance_ = NULL;

game_give_item_ntf* game_give_item_ntf::New() const {
  return new game_give_item_ntf;
}

void game_give_item_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6317;
    if (has_info()) {
      if (info_ != NULL) info_->::SProtoSpace::give_item_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_give_item_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_give_item_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .SProtoSpace.give_item_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_give_item_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_give_item_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.give_item_info info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_give_item_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_give_item_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.give_item_info info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_give_item_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_give_item_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.give_item_info info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_give_item_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_give_item_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_give_item_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_give_item_ntf::MergeFrom(const game_give_item_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_info()) {
      mutable_info()->::SProtoSpace::give_item_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_give_item_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_give_item_ntf::CopyFrom(const game_give_item_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_give_item_ntf::IsInitialized() const {

  return true;
}

void game_give_item_ntf::Swap(game_give_item_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_give_item_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_give_item_ntf_descriptor_;
  metadata.reflection = game_give_item_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_harem_compete_ntf::kProtoIdFieldNumber;
const int game_harem_compete_ntf::kQinganTimesFieldNumber;
const int game_harem_compete_ntf::kSlapTimesFieldNumber;
const int game_harem_compete_ntf::kEventsFieldNumber;
const int game_harem_compete_ntf::kProgressFieldNumber;
const int game_harem_compete_ntf::kEndTimeFieldNumber;
const int game_harem_compete_ntf::kRedPointTimeFieldNumber;
const int game_harem_compete_ntf::kTriInfoFieldNumber;
#endif  // !_MSC_VER

game_harem_compete_ntf::game_harem_compete_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_harem_compete_ntf::InitAsDefaultInstance() {
}

game_harem_compete_ntf::game_harem_compete_ntf(const game_harem_compete_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_harem_compete_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6400;
  qingan_times_ = 0u;
  slap_times_ = 0u;
  progress_ = 1;
  end_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_harem_compete_ntf::~game_harem_compete_ntf() {
  SharedDtor();
}

void game_harem_compete_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_harem_compete_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_harem_compete_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_harem_compete_ntf_descriptor_;
}

const game_harem_compete_ntf& game_harem_compete_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_harem_compete_ntf* game_harem_compete_ntf::default_instance_ = NULL;

game_harem_compete_ntf* game_harem_compete_ntf::New() const {
  return new game_harem_compete_ntf;
}

void game_harem_compete_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6400;
    qingan_times_ = 0u;
    slap_times_ = 0u;
    progress_ = 1;
    end_time_ = GOOGLE_ULONGLONG(0);
  }
  events_.Clear();
  red_point_time_.Clear();
  tri_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_harem_compete_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_qingan_times;
        break;
      }

      // optional uint32 qingan_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qingan_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qingan_times_)));
          set_has_qingan_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slap_times;
        break;
      }

      // optional uint32 slap_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slap_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slap_times_)));
          set_has_slap_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_events;
        break;
      }

      // repeated .SProtoSpace.harem_compete_event events = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_events;
        if (input->ExpectTag(40)) goto parse_progress;
        break;
      }

      // optional .SProtoSpace.ESLAPPROGRESS progress = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESLAPPROGRESS_IsValid(value)) {
            set_progress(static_cast< ::SProtoSpace::ESLAPPROGRESS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_red_point_time;
        break;
      }

      // repeated uint64 red_point_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_red_point_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 56, input, this->mutable_red_point_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_red_point_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_red_point_time;
        if (input->ExpectTag(66)) goto parse_tri_info;
        break;
      }

      // repeated .SProtoSpace.tribute_info tri_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tri_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tri_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_tri_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_harem_compete_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 qingan_times = 2;
  if (has_qingan_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->qingan_times(), output);
  }

  // optional uint32 slap_times = 3;
  if (has_slap_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slap_times(), output);
  }

  // repeated .SProtoSpace.harem_compete_event events = 4;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->events(i), output);
  }

  // optional .SProtoSpace.ESLAPPROGRESS progress = 5;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->progress(), output);
  }

  // optional uint64 end_time = 6;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->end_time(), output);
  }

  // repeated uint64 red_point_time = 7;
  for (int i = 0; i < this->red_point_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      7, this->red_point_time(i), output);
  }

  // repeated .SProtoSpace.tribute_info tri_info = 8;
  for (int i = 0; i < this->tri_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->tri_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_harem_compete_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 qingan_times = 2;
  if (has_qingan_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->qingan_times(), target);
  }

  // optional uint32 slap_times = 3;
  if (has_slap_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slap_times(), target);
  }

  // repeated .SProtoSpace.harem_compete_event events = 4;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->events(i), target);
  }

  // optional .SProtoSpace.ESLAPPROGRESS progress = 5;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->progress(), target);
  }

  // optional uint64 end_time = 6;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->end_time(), target);
  }

  // repeated uint64 red_point_time = 7;
  for (int i = 0; i < this->red_point_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(7, this->red_point_time(i), target);
  }

  // repeated .SProtoSpace.tribute_info tri_info = 8;
  for (int i = 0; i < this->tri_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->tri_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_harem_compete_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 qingan_times = 2;
    if (has_qingan_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qingan_times());
    }

    // optional uint32 slap_times = 3;
    if (has_slap_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slap_times());
    }

    // optional .SProtoSpace.ESLAPPROGRESS progress = 5;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->progress());
    }

    // optional uint64 end_time = 6;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

  }
  // repeated .SProtoSpace.harem_compete_event events = 4;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  // repeated uint64 red_point_time = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->red_point_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->red_point_time(i));
    }
    total_size += 1 * this->red_point_time_size() + data_size;
  }

  // repeated .SProtoSpace.tribute_info tri_info = 8;
  total_size += 1 * this->tri_info_size();
  for (int i = 0; i < this->tri_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tri_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_harem_compete_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_harem_compete_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_harem_compete_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_harem_compete_ntf::MergeFrom(const game_harem_compete_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  red_point_time_.MergeFrom(from.red_point_time_);
  tri_info_.MergeFrom(from.tri_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_qingan_times()) {
      set_qingan_times(from.qingan_times());
    }
    if (from.has_slap_times()) {
      set_slap_times(from.slap_times());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_harem_compete_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_harem_compete_ntf::CopyFrom(const game_harem_compete_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_harem_compete_ntf::IsInitialized() const {

  return true;
}

void game_harem_compete_ntf::Swap(game_harem_compete_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(qingan_times_, other->qingan_times_);
    std::swap(slap_times_, other->slap_times_);
    events_.Swap(&other->events_);
    std::swap(progress_, other->progress_);
    std::swap(end_time_, other->end_time_);
    red_point_time_.Swap(&other->red_point_time_);
    tri_info_.Swap(&other->tri_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_harem_compete_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_harem_compete_ntf_descriptor_;
  metadata.reflection = game_harem_compete_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_harem_compete_qingan_req::kProtoIdFieldNumber;
const int game_harem_compete_qingan_req::kTargetIdFieldNumber;
const int game_harem_compete_qingan_req::kRoleNameFieldNumber;
const int game_harem_compete_qingan_req::kRoleTypeFieldNumber;
#endif  // !_MSC_VER

game_harem_compete_qingan_req::game_harem_compete_qingan_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_harem_compete_qingan_req::InitAsDefaultInstance() {
}

game_harem_compete_qingan_req::game_harem_compete_qingan_req(const game_harem_compete_qingan_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_harem_compete_qingan_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6401;
  target_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_harem_compete_qingan_req::~game_harem_compete_qingan_req() {
  SharedDtor();
}

void game_harem_compete_qingan_req::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void game_harem_compete_qingan_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_harem_compete_qingan_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_harem_compete_qingan_req_descriptor_;
}

const game_harem_compete_qingan_req& game_harem_compete_qingan_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_harem_compete_qingan_req* game_harem_compete_qingan_req::default_instance_ = NULL;

game_harem_compete_qingan_req* game_harem_compete_qingan_req::New() const {
  return new game_harem_compete_qingan_req;
}

void game_harem_compete_qingan_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6401;
    target_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    role_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_harem_compete_qingan_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_qingan_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_type;
        break;
      }

      // optional uint32 role_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_type_)));
          set_has_role_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_harem_compete_qingan_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_qingan_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional uint32 role_type = 4;
  if (has_role_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->role_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_harem_compete_qingan_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_qingan_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional uint32 role_type = 4;
  if (has_role_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->role_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_harem_compete_qingan_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_qingan_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint32 role_type = 4;
    if (has_role_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_harem_compete_qingan_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_harem_compete_qingan_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_harem_compete_qingan_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_harem_compete_qingan_req::MergeFrom(const game_harem_compete_qingan_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_type()) {
      set_role_type(from.role_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_harem_compete_qingan_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_harem_compete_qingan_req::CopyFrom(const game_harem_compete_qingan_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_harem_compete_qingan_req::IsInitialized() const {

  return true;
}

void game_harem_compete_qingan_req::Swap(game_harem_compete_qingan_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_type_, other->role_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_harem_compete_qingan_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_harem_compete_qingan_req_descriptor_;
  metadata.reflection = game_harem_compete_qingan_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_harem_compete_qingan_ack::kProtoIdFieldNumber;
const int game_harem_compete_qingan_ack::kRetFieldNumber;
const int game_harem_compete_qingan_ack::kEventIdFieldNumber;
#endif  // !_MSC_VER

game_harem_compete_qingan_ack::game_harem_compete_qingan_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_harem_compete_qingan_ack::InitAsDefaultInstance() {
}

game_harem_compete_qingan_ack::game_harem_compete_qingan_ack(const game_harem_compete_qingan_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_harem_compete_qingan_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6402;
  ret_ = 0u;
  event_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_harem_compete_qingan_ack::~game_harem_compete_qingan_ack() {
  SharedDtor();
}

void game_harem_compete_qingan_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_harem_compete_qingan_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_harem_compete_qingan_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_harem_compete_qingan_ack_descriptor_;
}

const game_harem_compete_qingan_ack& game_harem_compete_qingan_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_harem_compete_qingan_ack* game_harem_compete_qingan_ack::default_instance_ = NULL;

game_harem_compete_qingan_ack* game_harem_compete_qingan_ack::New() const {
  return new game_harem_compete_qingan_ack;
}

void game_harem_compete_qingan_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6402;
    ret_ = 0u;
    event_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_harem_compete_qingan_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_qingan_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event_id;
        break;
      }

      // optional uint64 event_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_harem_compete_qingan_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_qingan_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint64 event_id = 3;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->event_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_harem_compete_qingan_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_qingan_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 event_id = 3;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->event_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_harem_compete_qingan_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_qingan_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 event_id = 3;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_harem_compete_qingan_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_harem_compete_qingan_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_harem_compete_qingan_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_harem_compete_qingan_ack::MergeFrom(const game_harem_compete_qingan_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_harem_compete_qingan_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_harem_compete_qingan_ack::CopyFrom(const game_harem_compete_qingan_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_harem_compete_qingan_ack::IsInitialized() const {

  return true;
}

void game_harem_compete_qingan_ack::Swap(game_harem_compete_qingan_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(event_id_, other->event_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_harem_compete_qingan_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_harem_compete_qingan_ack_descriptor_;
  metadata.reflection = game_harem_compete_qingan_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_harem_compete_slap_req::kProtoIdFieldNumber;
const int game_harem_compete_slap_req::kTargetIdFieldNumber;
const int game_harem_compete_slap_req::kRoleNameFieldNumber;
const int game_harem_compete_slap_req::kTimeFieldNumber;
const int game_harem_compete_slap_req::kTakeTimeFieldNumber;
const int game_harem_compete_slap_req::kSlapCountFieldNumber;
const int game_harem_compete_slap_req::kInfoFieldNumber;
#endif  // !_MSC_VER

game_harem_compete_slap_req::game_harem_compete_slap_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_harem_compete_slap_req::InitAsDefaultInstance() {
}

game_harem_compete_slap_req::game_harem_compete_slap_req(const game_harem_compete_slap_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_harem_compete_slap_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6403;
  target_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  take_time_ = GOOGLE_ULONGLONG(0);
  slap_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_harem_compete_slap_req::~game_harem_compete_slap_req() {
  SharedDtor();
}

void game_harem_compete_slap_req::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void game_harem_compete_slap_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_harem_compete_slap_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_harem_compete_slap_req_descriptor_;
}

const game_harem_compete_slap_req& game_harem_compete_slap_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_harem_compete_slap_req* game_harem_compete_slap_req::default_instance_ = NULL;

game_harem_compete_slap_req* game_harem_compete_slap_req::New() const {
  return new game_harem_compete_slap_req;
}

void game_harem_compete_slap_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6403;
    target_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
    take_time_ = GOOGLE_ULONGLONG(0);
    slap_count_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_harem_compete_slap_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_slap_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_take_time;
        break;
      }

      // optional uint64 take_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_take_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &take_time_)));
          set_has_take_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_slap_count;
        break;
      }

      // optional uint32 slap_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slap_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slap_count_)));
          set_has_slap_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_info;
        break;
      }

      // repeated .SProtoSpace.slap_emoji_info info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_harem_compete_slap_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_slap_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  // optional uint64 take_time = 5;
  if (has_take_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->take_time(), output);
  }

  // optional uint32 slap_count = 6;
  if (has_slap_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->slap_count(), output);
  }

  // repeated .SProtoSpace.slap_emoji_info info = 7;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_harem_compete_slap_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_slap_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time(), target);
  }

  // optional uint64 take_time = 5;
  if (has_take_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->take_time(), target);
  }

  // optional uint32 slap_count = 6;
  if (has_slap_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->slap_count(), target);
  }

  // repeated .SProtoSpace.slap_emoji_info info = 7;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_harem_compete_slap_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_slap_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint64 take_time = 5;
    if (has_take_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->take_time());
    }

    // optional uint32 slap_count = 6;
    if (has_slap_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slap_count());
    }

  }
  // repeated .SProtoSpace.slap_emoji_info info = 7;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_harem_compete_slap_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_harem_compete_slap_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_harem_compete_slap_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_harem_compete_slap_req::MergeFrom(const game_harem_compete_slap_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_take_time()) {
      set_take_time(from.take_time());
    }
    if (from.has_slap_count()) {
      set_slap_count(from.slap_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_harem_compete_slap_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_harem_compete_slap_req::CopyFrom(const game_harem_compete_slap_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_harem_compete_slap_req::IsInitialized() const {

  return true;
}

void game_harem_compete_slap_req::Swap(game_harem_compete_slap_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(time_, other->time_);
    std::swap(take_time_, other->take_time_);
    std::swap(slap_count_, other->slap_count_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_harem_compete_slap_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_harem_compete_slap_req_descriptor_;
  metadata.reflection = game_harem_compete_slap_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_harem_compete_slap_ack::kProtoIdFieldNumber;
const int game_harem_compete_slap_ack::kProgressFieldNumber;
const int game_harem_compete_slap_ack::kEventIdFieldNumber;
#endif  // !_MSC_VER

game_harem_compete_slap_ack::game_harem_compete_slap_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_harem_compete_slap_ack::InitAsDefaultInstance() {
}

game_harem_compete_slap_ack::game_harem_compete_slap_ack(const game_harem_compete_slap_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_harem_compete_slap_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6404;
  progress_ = 1;
  event_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_harem_compete_slap_ack::~game_harem_compete_slap_ack() {
  SharedDtor();
}

void game_harem_compete_slap_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_harem_compete_slap_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_harem_compete_slap_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_harem_compete_slap_ack_descriptor_;
}

const game_harem_compete_slap_ack& game_harem_compete_slap_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_harem_compete_slap_ack* game_harem_compete_slap_ack::default_instance_ = NULL;

game_harem_compete_slap_ack* game_harem_compete_slap_ack::New() const {
  return new game_harem_compete_slap_ack;
}

void game_harem_compete_slap_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6404;
    progress_ = 1;
    event_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_harem_compete_slap_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_slap_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_progress;
        break;
      }

      // optional .SProtoSpace.ESLAPPROGRESS progress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESLAPPROGRESS_IsValid(value)) {
            set_progress(static_cast< ::SProtoSpace::ESLAPPROGRESS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event_id;
        break;
      }

      // optional uint64 event_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_harem_compete_slap_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_slap_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.ESLAPPROGRESS progress = 2;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->progress(), output);
  }

  // optional uint64 event_id = 3;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->event_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_harem_compete_slap_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_slap_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.ESLAPPROGRESS progress = 2;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->progress(), target);
  }

  // optional uint64 event_id = 3;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->event_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_harem_compete_slap_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_slap_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.ESLAPPROGRESS progress = 2;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->progress());
    }

    // optional uint64 event_id = 3;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_harem_compete_slap_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_harem_compete_slap_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_harem_compete_slap_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_harem_compete_slap_ack::MergeFrom(const game_harem_compete_slap_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_harem_compete_slap_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_harem_compete_slap_ack::CopyFrom(const game_harem_compete_slap_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_harem_compete_slap_ack::IsInitialized() const {

  return true;
}

void game_harem_compete_slap_ack::Swap(game_harem_compete_slap_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(progress_, other->progress_);
    std::swap(event_id_, other->event_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_harem_compete_slap_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_harem_compete_slap_ack_descriptor_;
  metadata.reflection = game_harem_compete_slap_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_harem_compete_friends_req::kProtoIdFieldNumber;
const int game_harem_compete_friends_req::kGdTypeFieldNumber;
const int game_harem_compete_friends_req::kTypeFieldNumber;
const int game_harem_compete_friends_req::kCountFieldNumber;
#endif  // !_MSC_VER

game_harem_compete_friends_req::game_harem_compete_friends_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_harem_compete_friends_req::InitAsDefaultInstance() {
}

game_harem_compete_friends_req::game_harem_compete_friends_req(const game_harem_compete_friends_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_harem_compete_friends_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6405;
  gd_type_ = 0u;
  type_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_harem_compete_friends_req::~game_harem_compete_friends_req() {
  SharedDtor();
}

void game_harem_compete_friends_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_harem_compete_friends_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_harem_compete_friends_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_harem_compete_friends_req_descriptor_;
}

const game_harem_compete_friends_req& game_harem_compete_friends_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_harem_compete_friends_req* game_harem_compete_friends_req::default_instance_ = NULL;

game_harem_compete_friends_req* game_harem_compete_friends_req::New() const {
  return new game_harem_compete_friends_req;
}

void game_harem_compete_friends_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6405;
    gd_type_ = 0u;
    type_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_harem_compete_friends_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_friends_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gd_type;
        break;
      }

      // optional uint32 gd_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gd_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gd_type_)));
          set_has_gd_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional uint32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_harem_compete_friends_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_friends_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 gd_type = 2;
  if (has_gd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gd_type(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_harem_compete_friends_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_friends_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 gd_type = 2;
  if (has_gd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gd_type(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_harem_compete_friends_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_friends_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 gd_type = 2;
    if (has_gd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gd_type());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_harem_compete_friends_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_harem_compete_friends_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_harem_compete_friends_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_harem_compete_friends_req::MergeFrom(const game_harem_compete_friends_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_gd_type()) {
      set_gd_type(from.gd_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_harem_compete_friends_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_harem_compete_friends_req::CopyFrom(const game_harem_compete_friends_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_harem_compete_friends_req::IsInitialized() const {

  return true;
}

void game_harem_compete_friends_req::Swap(game_harem_compete_friends_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(gd_type_, other->gd_type_);
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_harem_compete_friends_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_harem_compete_friends_req_descriptor_;
  metadata.reflection = game_harem_compete_friends_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_harem_compete_friends_ack::kProtoIdFieldNumber;
const int game_harem_compete_friends_ack::kFriendsFieldNumber;
#endif  // !_MSC_VER

game_harem_compete_friends_ack::game_harem_compete_friends_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_harem_compete_friends_ack::InitAsDefaultInstance() {
}

game_harem_compete_friends_ack::game_harem_compete_friends_ack(const game_harem_compete_friends_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_harem_compete_friends_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6406;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_harem_compete_friends_ack::~game_harem_compete_friends_ack() {
  SharedDtor();
}

void game_harem_compete_friends_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_harem_compete_friends_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_harem_compete_friends_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_harem_compete_friends_ack_descriptor_;
}

const game_harem_compete_friends_ack& game_harem_compete_friends_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_harem_compete_friends_ack* game_harem_compete_friends_ack::default_instance_ = NULL;

game_harem_compete_friends_ack* game_harem_compete_friends_ack::New() const {
  return new game_harem_compete_friends_ack;
}

void game_harem_compete_friends_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6406;
  }
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_harem_compete_friends_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_friends_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        break;
      }

      // repeated .SProtoSpace.friend_base_info friends = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_harem_compete_friends_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_friends_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // repeated .SProtoSpace.friend_base_info friends = 2;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_harem_compete_friends_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_friends_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // repeated .SProtoSpace.friend_base_info friends = 2;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_harem_compete_friends_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_friends_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  // repeated .SProtoSpace.friend_base_info friends = 2;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_harem_compete_friends_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_harem_compete_friends_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_harem_compete_friends_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_harem_compete_friends_ack::MergeFrom(const game_harem_compete_friends_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_harem_compete_friends_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_harem_compete_friends_ack::CopyFrom(const game_harem_compete_friends_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_harem_compete_friends_ack::IsInitialized() const {

  return true;
}

void game_harem_compete_friends_ack::Swap(game_harem_compete_friends_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_harem_compete_friends_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_harem_compete_friends_ack_descriptor_;
  metadata.reflection = game_harem_compete_friends_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_harem_compete_sync_ntf::kProtoIdFieldNumber;
const int game_harem_compete_sync_ntf::kEventFieldNumber;
const int game_harem_compete_sync_ntf::kProgressFieldNumber;
const int game_harem_compete_sync_ntf::kEndTimeFieldNumber;
#endif  // !_MSC_VER

game_harem_compete_sync_ntf::game_harem_compete_sync_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_harem_compete_sync_ntf::InitAsDefaultInstance() {
  event_ = const_cast< ::SProtoSpace::harem_compete_event*>(&::SProtoSpace::harem_compete_event::default_instance());
}

game_harem_compete_sync_ntf::game_harem_compete_sync_ntf(const game_harem_compete_sync_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_harem_compete_sync_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6407;
  event_ = NULL;
  progress_ = 1;
  end_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_harem_compete_sync_ntf::~game_harem_compete_sync_ntf() {
  SharedDtor();
}

void game_harem_compete_sync_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete event_;
  }
}

void game_harem_compete_sync_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_harem_compete_sync_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_harem_compete_sync_ntf_descriptor_;
}

const game_harem_compete_sync_ntf& game_harem_compete_sync_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_harem_compete_sync_ntf* game_harem_compete_sync_ntf::default_instance_ = NULL;

game_harem_compete_sync_ntf* game_harem_compete_sync_ntf::New() const {
  return new game_harem_compete_sync_ntf;
}

void game_harem_compete_sync_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6407;
    if (has_event()) {
      if (event_ != NULL) event_->::SProtoSpace::harem_compete_event::Clear();
    }
    progress_ = 1;
    end_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_harem_compete_sync_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_sync_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_event;
        break;
      }

      // optional .SProtoSpace.harem_compete_event event = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_progress;
        break;
      }

      // optional .SProtoSpace.ESLAPPROGRESS progress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESLAPPROGRESS_IsValid(value)) {
            set_progress(static_cast< ::SProtoSpace::ESLAPPROGRESS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_harem_compete_sync_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_sync_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.harem_compete_event event = 2;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->event(), output);
  }

  // optional .SProtoSpace.ESLAPPROGRESS progress = 3;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->progress(), output);
  }

  // optional uint64 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_harem_compete_sync_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_sync_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.harem_compete_event event = 2;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->event(), target);
  }

  // optional .SProtoSpace.ESLAPPROGRESS progress = 3;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->progress(), target);
  }

  // optional uint64 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_harem_compete_sync_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_sync_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.harem_compete_event event = 2;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event());
    }

    // optional .SProtoSpace.ESLAPPROGRESS progress = 3;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->progress());
    }

    // optional uint64 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_harem_compete_sync_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_harem_compete_sync_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_harem_compete_sync_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_harem_compete_sync_ntf::MergeFrom(const game_harem_compete_sync_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_event()) {
      mutable_event()->::SProtoSpace::harem_compete_event::MergeFrom(from.event());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_harem_compete_sync_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_harem_compete_sync_ntf::CopyFrom(const game_harem_compete_sync_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_harem_compete_sync_ntf::IsInitialized() const {

  return true;
}

void game_harem_compete_sync_ntf::Swap(game_harem_compete_sync_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(event_, other->event_);
    std::swap(progress_, other->progress_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_harem_compete_sync_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_harem_compete_sync_ntf_descriptor_;
  metadata.reflection = game_harem_compete_sync_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_harem_compete_clear_req::kProtoIdFieldNumber;
const int game_harem_compete_clear_req::kTypeFieldNumber;
#endif  // !_MSC_VER

game_harem_compete_clear_req::game_harem_compete_clear_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_harem_compete_clear_req::InitAsDefaultInstance() {
}

game_harem_compete_clear_req::game_harem_compete_clear_req(const game_harem_compete_clear_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_harem_compete_clear_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6408;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_harem_compete_clear_req::~game_harem_compete_clear_req() {
  SharedDtor();
}

void game_harem_compete_clear_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_harem_compete_clear_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_harem_compete_clear_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_harem_compete_clear_req_descriptor_;
}

const game_harem_compete_clear_req& game_harem_compete_clear_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_harem_compete_clear_req* game_harem_compete_clear_req::default_instance_ = NULL;

game_harem_compete_clear_req* game_harem_compete_clear_req::New() const {
  return new game_harem_compete_clear_req;
}

void game_harem_compete_clear_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6408;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_harem_compete_clear_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_clear_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_harem_compete_clear_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_clear_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_harem_compete_clear_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_clear_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_harem_compete_clear_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_clear_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_harem_compete_clear_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_harem_compete_clear_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_harem_compete_clear_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_harem_compete_clear_req::MergeFrom(const game_harem_compete_clear_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_harem_compete_clear_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_harem_compete_clear_req::CopyFrom(const game_harem_compete_clear_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_harem_compete_clear_req::IsInitialized() const {

  return true;
}

void game_harem_compete_clear_req::Swap(game_harem_compete_clear_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_harem_compete_clear_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_harem_compete_clear_req_descriptor_;
  metadata.reflection = game_harem_compete_clear_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_harem_compete_clear_ack::kProtoIdFieldNumber;
const int game_harem_compete_clear_ack::kRetFieldNumber;
#endif  // !_MSC_VER

game_harem_compete_clear_ack::game_harem_compete_clear_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_harem_compete_clear_ack::InitAsDefaultInstance() {
}

game_harem_compete_clear_ack::game_harem_compete_clear_ack(const game_harem_compete_clear_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_harem_compete_clear_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6409;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_harem_compete_clear_ack::~game_harem_compete_clear_ack() {
  SharedDtor();
}

void game_harem_compete_clear_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_harem_compete_clear_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_harem_compete_clear_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_harem_compete_clear_ack_descriptor_;
}

const game_harem_compete_clear_ack& game_harem_compete_clear_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_harem_compete_clear_ack* game_harem_compete_clear_ack::default_instance_ = NULL;

game_harem_compete_clear_ack* game_harem_compete_clear_ack::New() const {
  return new game_harem_compete_clear_ack;
}

void game_harem_compete_clear_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6409;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_harem_compete_clear_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_clear_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_harem_compete_clear_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_clear_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_harem_compete_clear_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_clear_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_harem_compete_clear_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_clear_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_harem_compete_clear_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_harem_compete_clear_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_harem_compete_clear_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_harem_compete_clear_ack::MergeFrom(const game_harem_compete_clear_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_harem_compete_clear_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_harem_compete_clear_ack::CopyFrom(const game_harem_compete_clear_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_harem_compete_clear_ack::IsInitialized() const {

  return true;
}

void game_harem_compete_clear_ack::Swap(game_harem_compete_clear_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_harem_compete_clear_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_harem_compete_clear_ack_descriptor_;
  metadata.reflection = game_harem_compete_clear_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_harem_compete_status_ntf::kProtoIdFieldNumber;
const int game_harem_compete_status_ntf::kProgressFieldNumber;
const int game_harem_compete_status_ntf::kEndTimeFieldNumber;
#endif  // !_MSC_VER

game_harem_compete_status_ntf::game_harem_compete_status_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_harem_compete_status_ntf::InitAsDefaultInstance() {
}

game_harem_compete_status_ntf::game_harem_compete_status_ntf(const game_harem_compete_status_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_harem_compete_status_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6410;
  progress_ = 1;
  end_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_harem_compete_status_ntf::~game_harem_compete_status_ntf() {
  SharedDtor();
}

void game_harem_compete_status_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_harem_compete_status_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_harem_compete_status_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_harem_compete_status_ntf_descriptor_;
}

const game_harem_compete_status_ntf& game_harem_compete_status_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_harem_compete_status_ntf* game_harem_compete_status_ntf::default_instance_ = NULL;

game_harem_compete_status_ntf* game_harem_compete_status_ntf::New() const {
  return new game_harem_compete_status_ntf;
}

void game_harem_compete_status_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6410;
    progress_ = 1;
    end_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_harem_compete_status_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_status_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_progress;
        break;
      }

      // optional .SProtoSpace.ESLAPPROGRESS progress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESLAPPROGRESS_IsValid(value)) {
            set_progress(static_cast< ::SProtoSpace::ESLAPPROGRESS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_harem_compete_status_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_status_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.ESLAPPROGRESS progress = 2;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->progress(), output);
  }

  // optional uint64 end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_harem_compete_status_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_status_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.ESLAPPROGRESS progress = 2;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->progress(), target);
  }

  // optional uint64 end_time = 3;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_harem_compete_status_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_status_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.ESLAPPROGRESS progress = 2;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->progress());
    }

    // optional uint64 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_harem_compete_status_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_harem_compete_status_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_harem_compete_status_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_harem_compete_status_ntf::MergeFrom(const game_harem_compete_status_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_harem_compete_status_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_harem_compete_status_ntf::CopyFrom(const game_harem_compete_status_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_harem_compete_status_ntf::IsInitialized() const {

  return true;
}

void game_harem_compete_status_ntf::Swap(game_harem_compete_status_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(progress_, other->progress_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_harem_compete_status_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_harem_compete_status_ntf_descriptor_;
  metadata.reflection = game_harem_compete_status_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_harem_compete_redpoint_req::kProtoIdFieldNumber;
const int game_harem_compete_redpoint_req::kTypeFieldNumber;
const int game_harem_compete_redpoint_req::kRedTimeFieldNumber;
#endif  // !_MSC_VER

game_harem_compete_redpoint_req::game_harem_compete_redpoint_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_harem_compete_redpoint_req::InitAsDefaultInstance() {
}

game_harem_compete_redpoint_req::game_harem_compete_redpoint_req(const game_harem_compete_redpoint_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_harem_compete_redpoint_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6411;
  type_ = 1;
  red_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_harem_compete_redpoint_req::~game_harem_compete_redpoint_req() {
  SharedDtor();
}

void game_harem_compete_redpoint_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_harem_compete_redpoint_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_harem_compete_redpoint_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_harem_compete_redpoint_req_descriptor_;
}

const game_harem_compete_redpoint_req& game_harem_compete_redpoint_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_harem_compete_redpoint_req* game_harem_compete_redpoint_req::default_instance_ = NULL;

game_harem_compete_redpoint_req* game_harem_compete_redpoint_req::New() const {
  return new game_harem_compete_redpoint_req;
}

void game_harem_compete_redpoint_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6411;
    type_ = 1;
    red_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_harem_compete_redpoint_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_redpoint_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.EHAREMTYPE type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EHAREMTYPE_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EHAREMTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_red_time;
        break;
      }

      // optional uint64 red_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_red_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &red_time_)));
          set_has_red_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_harem_compete_redpoint_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_redpoint_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.EHAREMTYPE type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint64 red_time = 3;
  if (has_red_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->red_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_harem_compete_redpoint_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_redpoint_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.EHAREMTYPE type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint64 red_time = 3;
  if (has_red_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->red_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_harem_compete_redpoint_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_redpoint_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.EHAREMTYPE type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 red_time = 3;
    if (has_red_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->red_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_harem_compete_redpoint_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_harem_compete_redpoint_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_harem_compete_redpoint_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_harem_compete_redpoint_req::MergeFrom(const game_harem_compete_redpoint_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_red_time()) {
      set_red_time(from.red_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_harem_compete_redpoint_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_harem_compete_redpoint_req::CopyFrom(const game_harem_compete_redpoint_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_harem_compete_redpoint_req::IsInitialized() const {

  return true;
}

void game_harem_compete_redpoint_req::Swap(game_harem_compete_redpoint_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(type_, other->type_);
    std::swap(red_time_, other->red_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_harem_compete_redpoint_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_harem_compete_redpoint_req_descriptor_;
  metadata.reflection = game_harem_compete_redpoint_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_harem_compete_redpoint_ack::kProtoIdFieldNumber;
const int game_harem_compete_redpoint_ack::kRetFieldNumber;
#endif  // !_MSC_VER

game_harem_compete_redpoint_ack::game_harem_compete_redpoint_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_harem_compete_redpoint_ack::InitAsDefaultInstance() {
}

game_harem_compete_redpoint_ack::game_harem_compete_redpoint_ack(const game_harem_compete_redpoint_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_harem_compete_redpoint_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6412;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_harem_compete_redpoint_ack::~game_harem_compete_redpoint_ack() {
  SharedDtor();
}

void game_harem_compete_redpoint_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_harem_compete_redpoint_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_harem_compete_redpoint_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_harem_compete_redpoint_ack_descriptor_;
}

const game_harem_compete_redpoint_ack& game_harem_compete_redpoint_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_harem_compete_redpoint_ack* game_harem_compete_redpoint_ack::default_instance_ = NULL;

game_harem_compete_redpoint_ack* game_harem_compete_redpoint_ack::New() const {
  return new game_harem_compete_redpoint_ack;
}

void game_harem_compete_redpoint_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6412;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_harem_compete_redpoint_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_redpoint_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_harem_compete_redpoint_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_redpoint_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_harem_compete_redpoint_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_redpoint_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_harem_compete_redpoint_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_redpoint_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_harem_compete_redpoint_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_harem_compete_redpoint_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_harem_compete_redpoint_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_harem_compete_redpoint_ack::MergeFrom(const game_harem_compete_redpoint_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_harem_compete_redpoint_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_harem_compete_redpoint_ack::CopyFrom(const game_harem_compete_redpoint_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_harem_compete_redpoint_ack::IsInitialized() const {

  return true;
}

void game_harem_compete_redpoint_ack::Swap(game_harem_compete_redpoint_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_harem_compete_redpoint_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_harem_compete_redpoint_ack_descriptor_;
  metadata.reflection = game_harem_compete_redpoint_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_harem_compete_share_req::kProtoIdFieldNumber;
const int game_harem_compete_share_req::kTypeFieldNumber;
const int game_harem_compete_share_req::kEventIdFieldNumber;
const int game_harem_compete_share_req::kWorldChannelIdFieldNumber;
const int game_harem_compete_share_req::kContentFieldNumber;
#endif  // !_MSC_VER

game_harem_compete_share_req::game_harem_compete_share_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_harem_compete_share_req::InitAsDefaultInstance() {
}

game_harem_compete_share_req::game_harem_compete_share_req(const game_harem_compete_share_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_harem_compete_share_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6413;
  type_ = 0;
  event_id_ = GOOGLE_ULONGLONG(0);
  world_channel_id_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_harem_compete_share_req::~game_harem_compete_share_req() {
  SharedDtor();
}

void game_harem_compete_share_req::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void game_harem_compete_share_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_harem_compete_share_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_harem_compete_share_req_descriptor_;
}

const game_harem_compete_share_req& game_harem_compete_share_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_harem_compete_share_req* game_harem_compete_share_req::default_instance_ = NULL;

game_harem_compete_share_req* game_harem_compete_share_req::New() const {
  return new game_harem_compete_share_req;
}

void game_harem_compete_share_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6413;
    type_ = 0;
    event_id_ = GOOGLE_ULONGLONG(0);
    world_channel_id_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_harem_compete_share_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_share_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.EHAREMSHARETYPE type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EHAREMSHARETYPE_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EHAREMSHARETYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event_id;
        break;
      }

      // optional uint64 event_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_world_channel_id;
        break;
      }

      // optional uint32 world_channel_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &world_channel_id_)));
          set_has_world_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional string content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_harem_compete_share_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_share_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.EHAREMSHARETYPE type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint64 event_id = 3;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->event_id(), output);
  }

  // optional uint32 world_channel_id = 4;
  if (has_world_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->world_channel_id(), output);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_harem_compete_share_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_share_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.EHAREMSHARETYPE type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint64 event_id = 3;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->event_id(), target);
  }

  // optional uint32 world_channel_id = 4;
  if (has_world_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->world_channel_id(), target);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_harem_compete_share_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_share_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.EHAREMSHARETYPE type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 event_id = 3;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_id());
    }

    // optional uint32 world_channel_id = 4;
    if (has_world_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->world_channel_id());
    }

    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_harem_compete_share_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_harem_compete_share_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_harem_compete_share_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_harem_compete_share_req::MergeFrom(const game_harem_compete_share_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_world_channel_id()) {
      set_world_channel_id(from.world_channel_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_harem_compete_share_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_harem_compete_share_req::CopyFrom(const game_harem_compete_share_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_harem_compete_share_req::IsInitialized() const {

  return true;
}

void game_harem_compete_share_req::Swap(game_harem_compete_share_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(type_, other->type_);
    std::swap(event_id_, other->event_id_);
    std::swap(world_channel_id_, other->world_channel_id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_harem_compete_share_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_harem_compete_share_req_descriptor_;
  metadata.reflection = game_harem_compete_share_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_harem_compete_share_ack::kProtoIdFieldNumber;
const int game_harem_compete_share_ack::kRetFieldNumber;
#endif  // !_MSC_VER

game_harem_compete_share_ack::game_harem_compete_share_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_harem_compete_share_ack::InitAsDefaultInstance() {
}

game_harem_compete_share_ack::game_harem_compete_share_ack(const game_harem_compete_share_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_harem_compete_share_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6414;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_harem_compete_share_ack::~game_harem_compete_share_ack() {
  SharedDtor();
}

void game_harem_compete_share_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_harem_compete_share_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_harem_compete_share_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_harem_compete_share_ack_descriptor_;
}

const game_harem_compete_share_ack& game_harem_compete_share_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_harem_compete_share_ack* game_harem_compete_share_ack::default_instance_ = NULL;

game_harem_compete_share_ack* game_harem_compete_share_ack::New() const {
  return new game_harem_compete_share_ack;
}

void game_harem_compete_share_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6414;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_harem_compete_share_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_share_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_harem_compete_share_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_share_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_harem_compete_share_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_share_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_harem_compete_share_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_share_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_harem_compete_share_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_harem_compete_share_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_harem_compete_share_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_harem_compete_share_ack::MergeFrom(const game_harem_compete_share_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_harem_compete_share_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_harem_compete_share_ack::CopyFrom(const game_harem_compete_share_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_harem_compete_share_ack::IsInitialized() const {

  return true;
}

void game_harem_compete_share_ack::Swap(game_harem_compete_share_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_harem_compete_share_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_harem_compete_share_ack_descriptor_;
  metadata.reflection = game_harem_compete_share_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_harem_compete_get_event_req::kProtoIdFieldNumber;
const int game_harem_compete_get_event_req::kEventIdFieldNumber;
#endif  // !_MSC_VER

game_harem_compete_get_event_req::game_harem_compete_get_event_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_harem_compete_get_event_req::InitAsDefaultInstance() {
}

game_harem_compete_get_event_req::game_harem_compete_get_event_req(const game_harem_compete_get_event_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_harem_compete_get_event_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6415;
  event_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_harem_compete_get_event_req::~game_harem_compete_get_event_req() {
  SharedDtor();
}

void game_harem_compete_get_event_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_harem_compete_get_event_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_harem_compete_get_event_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_harem_compete_get_event_req_descriptor_;
}

const game_harem_compete_get_event_req& game_harem_compete_get_event_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_harem_compete_get_event_req* game_harem_compete_get_event_req::default_instance_ = NULL;

game_harem_compete_get_event_req* game_harem_compete_get_event_req::New() const {
  return new game_harem_compete_get_event_req;
}

void game_harem_compete_get_event_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6415;
    event_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_harem_compete_get_event_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_get_event_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_id;
        break;
      }

      // optional uint64 event_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_harem_compete_get_event_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_get_event_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 event_id = 2;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->event_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_harem_compete_get_event_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_get_event_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 event_id = 2;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->event_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_harem_compete_get_event_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_get_event_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 event_id = 2;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_harem_compete_get_event_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_harem_compete_get_event_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_harem_compete_get_event_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_harem_compete_get_event_req::MergeFrom(const game_harem_compete_get_event_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_harem_compete_get_event_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_harem_compete_get_event_req::CopyFrom(const game_harem_compete_get_event_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_harem_compete_get_event_req::IsInitialized() const {

  return true;
}

void game_harem_compete_get_event_req::Swap(game_harem_compete_get_event_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(event_id_, other->event_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_harem_compete_get_event_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_harem_compete_get_event_req_descriptor_;
  metadata.reflection = game_harem_compete_get_event_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_harem_compete_get_event_ack::kProtoIdFieldNumber;
const int game_harem_compete_get_event_ack::kEventFieldNumber;
#endif  // !_MSC_VER

game_harem_compete_get_event_ack::game_harem_compete_get_event_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_harem_compete_get_event_ack::InitAsDefaultInstance() {
  event_ = const_cast< ::SProtoSpace::harem_compete_event*>(&::SProtoSpace::harem_compete_event::default_instance());
}

game_harem_compete_get_event_ack::game_harem_compete_get_event_ack(const game_harem_compete_get_event_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_harem_compete_get_event_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6416;
  event_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_harem_compete_get_event_ack::~game_harem_compete_get_event_ack() {
  SharedDtor();
}

void game_harem_compete_get_event_ack::SharedDtor() {
  if (this != default_instance_) {
    delete event_;
  }
}

void game_harem_compete_get_event_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_harem_compete_get_event_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_harem_compete_get_event_ack_descriptor_;
}

const game_harem_compete_get_event_ack& game_harem_compete_get_event_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_harem_compete_get_event_ack* game_harem_compete_get_event_ack::default_instance_ = NULL;

game_harem_compete_get_event_ack* game_harem_compete_get_event_ack::New() const {
  return new game_harem_compete_get_event_ack;
}

void game_harem_compete_get_event_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6416;
    if (has_event()) {
      if (event_ != NULL) event_->::SProtoSpace::harem_compete_event::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_harem_compete_get_event_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_get_event_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_event;
        break;
      }

      // optional .SProtoSpace.harem_compete_event event = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_harem_compete_get_event_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_get_event_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.harem_compete_event event = 2;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->event(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_harem_compete_get_event_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_get_event_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.harem_compete_event event = 2;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->event(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_harem_compete_get_event_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_get_event_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.harem_compete_event event = 2;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_harem_compete_get_event_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_harem_compete_get_event_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_harem_compete_get_event_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_harem_compete_get_event_ack::MergeFrom(const game_harem_compete_get_event_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_event()) {
      mutable_event()->::SProtoSpace::harem_compete_event::MergeFrom(from.event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_harem_compete_get_event_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_harem_compete_get_event_ack::CopyFrom(const game_harem_compete_get_event_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_harem_compete_get_event_ack::IsInitialized() const {

  return true;
}

void game_harem_compete_get_event_ack::Swap(game_harem_compete_get_event_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(event_, other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_harem_compete_get_event_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_harem_compete_get_event_ack_descriptor_;
  metadata.reflection = game_harem_compete_get_event_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_harem_compete_tribute_req::kProtoIdFieldNumber;
const int game_harem_compete_tribute_req::kTargetIdFieldNumber;
const int game_harem_compete_tribute_req::kTargetNameFieldNumber;
const int game_harem_compete_tribute_req::kTributeIdFieldNumber;
const int game_harem_compete_tribute_req::kCountFieldNumber;
const int game_harem_compete_tribute_req::kContentFieldNumber;
#endif  // !_MSC_VER

game_harem_compete_tribute_req::game_harem_compete_tribute_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_harem_compete_tribute_req::InitAsDefaultInstance() {
}

game_harem_compete_tribute_req::game_harem_compete_tribute_req(const game_harem_compete_tribute_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_harem_compete_tribute_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6417;
  target_id_ = GOOGLE_ULONGLONG(0);
  target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tribute_id_ = 0u;
  count_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_harem_compete_tribute_req::~game_harem_compete_tribute_req() {
  SharedDtor();
}

void game_harem_compete_tribute_req::SharedDtor() {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_name_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void game_harem_compete_tribute_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_harem_compete_tribute_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_harem_compete_tribute_req_descriptor_;
}

const game_harem_compete_tribute_req& game_harem_compete_tribute_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_harem_compete_tribute_req* game_harem_compete_tribute_req::default_instance_ = NULL;

game_harem_compete_tribute_req* game_harem_compete_tribute_req::New() const {
  return new game_harem_compete_tribute_req;
}

void game_harem_compete_tribute_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6417;
    target_id_ = GOOGLE_ULONGLONG(0);
    if (has_target_name()) {
      if (target_name_ != &::google::protobuf::internal::kEmptyString) {
        target_name_->clear();
      }
    }
    tribute_id_ = 0u;
    count_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_harem_compete_tribute_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_tribute_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target_name;
        break;
      }

      // optional string target_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_name().data(), this->target_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tribute_id;
        break;
      }

      // optional uint32 tribute_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tribute_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tribute_id_)));
          set_has_tribute_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional uint32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_harem_compete_tribute_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_tribute_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_id(), output);
  }

  // optional string target_name = 3;
  if (has_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_name().data(), this->target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->target_name(), output);
  }

  // optional uint32 tribute_id = 4;
  if (has_tribute_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tribute_id(), output);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_harem_compete_tribute_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_tribute_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_id(), target);
  }

  // optional string target_name = 3;
  if (has_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_name().data(), this->target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->target_name(), target);
  }

  // optional uint32 tribute_id = 4;
  if (has_tribute_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tribute_id(), target);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_harem_compete_tribute_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_tribute_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional string target_name = 3;
    if (has_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_name());
    }

    // optional uint32 tribute_id = 4;
    if (has_tribute_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tribute_id());
    }

    // optional uint32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_harem_compete_tribute_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_harem_compete_tribute_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_harem_compete_tribute_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_harem_compete_tribute_req::MergeFrom(const game_harem_compete_tribute_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_target_name()) {
      set_target_name(from.target_name());
    }
    if (from.has_tribute_id()) {
      set_tribute_id(from.tribute_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_harem_compete_tribute_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_harem_compete_tribute_req::CopyFrom(const game_harem_compete_tribute_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_harem_compete_tribute_req::IsInitialized() const {

  return true;
}

void game_harem_compete_tribute_req::Swap(game_harem_compete_tribute_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(target_name_, other->target_name_);
    std::swap(tribute_id_, other->tribute_id_);
    std::swap(count_, other->count_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_harem_compete_tribute_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_harem_compete_tribute_req_descriptor_;
  metadata.reflection = game_harem_compete_tribute_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_harem_compete_tribute_ack::kProtoIdFieldNumber;
const int game_harem_compete_tribute_ack::kRetFieldNumber;
#endif  // !_MSC_VER

game_harem_compete_tribute_ack::game_harem_compete_tribute_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_harem_compete_tribute_ack::InitAsDefaultInstance() {
}

game_harem_compete_tribute_ack::game_harem_compete_tribute_ack(const game_harem_compete_tribute_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_harem_compete_tribute_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6418;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_harem_compete_tribute_ack::~game_harem_compete_tribute_ack() {
  SharedDtor();
}

void game_harem_compete_tribute_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_harem_compete_tribute_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_harem_compete_tribute_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_harem_compete_tribute_ack_descriptor_;
}

const game_harem_compete_tribute_ack& game_harem_compete_tribute_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

game_harem_compete_tribute_ack* game_harem_compete_tribute_ack::default_instance_ = NULL;

game_harem_compete_tribute_ack* game_harem_compete_tribute_ack::New() const {
  return new game_harem_compete_tribute_ack;
}

void game_harem_compete_tribute_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6418;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_harem_compete_tribute_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_tribute_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_harem_compete_tribute_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_tribute_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_harem_compete_tribute_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_tribute_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_harem_compete_tribute_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_harem_compete_tribute_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_harem_compete_tribute_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_harem_compete_tribute_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_harem_compete_tribute_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_harem_compete_tribute_ack::MergeFrom(const game_harem_compete_tribute_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_harem_compete_tribute_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_harem_compete_tribute_ack::CopyFrom(const game_harem_compete_tribute_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_harem_compete_tribute_ack::IsInitialized() const {

  return true;
}

void game_harem_compete_tribute_ack::Swap(game_harem_compete_tribute_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_harem_compete_tribute_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_harem_compete_tribute_ack_descriptor_;
  metadata.reflection = game_harem_compete_tribute_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int create_3dchat_room_req::kProtoIdFieldNumber;
const int create_3dchat_room_req::kRoomConfIdFieldNumber;
const int create_3dchat_room_req::kRoomNameFieldNumber;
const int create_3dchat_room_req::kTokenFieldNumber;
#endif  // !_MSC_VER

create_3dchat_room_req::create_3dchat_room_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void create_3dchat_room_req::InitAsDefaultInstance() {
}

create_3dchat_room_req::create_3dchat_room_req(const create_3dchat_room_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void create_3dchat_room_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7314;
  room_conf_id_ = 0;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

create_3dchat_room_req::~create_3dchat_room_req() {
  SharedDtor();
}

void create_3dchat_room_req::SharedDtor() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void create_3dchat_room_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_3dchat_room_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return create_3dchat_room_req_descriptor_;
}

const create_3dchat_room_req& create_3dchat_room_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

create_3dchat_room_req* create_3dchat_room_req::default_instance_ = NULL;

create_3dchat_room_req* create_3dchat_room_req::New() const {
  return new create_3dchat_room_req;
}

void create_3dchat_room_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7314;
    room_conf_id_ = 0;
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::kEmptyString) {
        room_name_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool create_3dchat_room_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_3dchat_room_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_conf_id;
        break;
      }

      // optional int32 room_conf_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_conf_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_conf_id_)));
          set_has_room_conf_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_name;
        break;
      }

      // optional string room_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // optional string token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void create_3dchat_room_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_3dchat_room_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 room_conf_id = 2;
  if (has_room_conf_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_conf_id(), output);
  }

  // optional string room_name = 3;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->room_name(), output);
  }

  // optional string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* create_3dchat_room_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_3dchat_room_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 room_conf_id = 2;
  if (has_room_conf_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_conf_id(), target);
  }

  // optional string room_name = 3;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->room_name(), target);
  }

  // optional string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int create_3dchat_room_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_3dchat_room_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 room_conf_id = 2;
    if (has_room_conf_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_conf_id());
    }

    // optional string room_name = 3;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

    // optional string token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_3dchat_room_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const create_3dchat_room_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const create_3dchat_room_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void create_3dchat_room_req::MergeFrom(const create_3dchat_room_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_room_conf_id()) {
      set_room_conf_id(from.room_conf_id());
    }
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void create_3dchat_room_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_3dchat_room_req::CopyFrom(const create_3dchat_room_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_3dchat_room_req::IsInitialized() const {

  return true;
}

void create_3dchat_room_req::Swap(create_3dchat_room_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(room_conf_id_, other->room_conf_id_);
    std::swap(room_name_, other->room_name_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata create_3dchat_room_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = create_3dchat_room_req_descriptor_;
  metadata.reflection = create_3dchat_room_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int create_3dchat_room_ack::kProtoIdFieldNumber;
const int create_3dchat_room_ack::kRetFieldNumber;
const int create_3dchat_room_ack::kRoomConfIdFieldNumber;
const int create_3dchat_room_ack::kRoomNameFieldNumber;
const int create_3dchat_room_ack::kTokenFieldNumber;
#endif  // !_MSC_VER

create_3dchat_room_ack::create_3dchat_room_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void create_3dchat_room_ack::InitAsDefaultInstance() {
}

create_3dchat_room_ack::create_3dchat_room_ack(const create_3dchat_room_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void create_3dchat_room_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7315;
  ret_ = 0u;
  room_conf_id_ = 0;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

create_3dchat_room_ack::~create_3dchat_room_ack() {
  SharedDtor();
}

void create_3dchat_room_ack::SharedDtor() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void create_3dchat_room_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_3dchat_room_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return create_3dchat_room_ack_descriptor_;
}

const create_3dchat_room_ack& create_3dchat_room_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

create_3dchat_room_ack* create_3dchat_room_ack::default_instance_ = NULL;

create_3dchat_room_ack* create_3dchat_room_ack::New() const {
  return new create_3dchat_room_ack;
}

void create_3dchat_room_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7315;
    ret_ = 0u;
    room_conf_id_ = 0;
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::kEmptyString) {
        room_name_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool create_3dchat_room_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_3dchat_room_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_conf_id;
        break;
      }

      // optional int32 room_conf_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_conf_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_conf_id_)));
          set_has_room_conf_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_room_name;
        break;
      }

      // optional string room_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_token;
        break;
      }

      // optional string token = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void create_3dchat_room_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_3dchat_room_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional int32 room_conf_id = 3;
  if (has_room_conf_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_conf_id(), output);
  }

  // optional string room_name = 4;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->room_name(), output);
  }

  // optional string token = 5;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* create_3dchat_room_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_3dchat_room_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional int32 room_conf_id = 3;
  if (has_room_conf_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_conf_id(), target);
  }

  // optional string room_name = 4;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->room_name(), target);
  }

  // optional string token = 5;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int create_3dchat_room_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_3dchat_room_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional int32 room_conf_id = 3;
    if (has_room_conf_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_conf_id());
    }

    // optional string room_name = 4;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

    // optional string token = 5;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_3dchat_room_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const create_3dchat_room_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const create_3dchat_room_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void create_3dchat_room_ack::MergeFrom(const create_3dchat_room_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_room_conf_id()) {
      set_room_conf_id(from.room_conf_id());
    }
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void create_3dchat_room_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_3dchat_room_ack::CopyFrom(const create_3dchat_room_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_3dchat_room_ack::IsInitialized() const {

  return true;
}

void create_3dchat_room_ack::Swap(create_3dchat_room_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(room_conf_id_, other->room_conf_id_);
    std::swap(room_name_, other->room_name_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata create_3dchat_room_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = create_3dchat_room_ack_descriptor_;
  metadata.reflection = create_3dchat_room_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enter_chat_room_req::kProtoIdFieldNumber;
const int enter_chat_room_req::kRoomIdFieldNumber;
const int enter_chat_room_req::kTokenFieldNumber;
#endif  // !_MSC_VER

enter_chat_room_req::enter_chat_room_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_chat_room_req::InitAsDefaultInstance() {
}

enter_chat_room_req::enter_chat_room_req(const enter_chat_room_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_chat_room_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7300;
  room_id_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_chat_room_req::~enter_chat_room_req() {
  SharedDtor();
}

void enter_chat_room_req::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void enter_chat_room_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_chat_room_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_chat_room_req_descriptor_;
}

const enter_chat_room_req& enter_chat_room_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

enter_chat_room_req* enter_chat_room_req::default_instance_ = NULL;

enter_chat_room_req* enter_chat_room_req::New() const {
  return new enter_chat_room_req;
}

void enter_chat_room_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7300;
    room_id_ = 0;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_chat_room_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_chat_room_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_chat_room_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_chat_room_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_chat_room_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_chat_room_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_chat_room_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_chat_room_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_chat_room_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_chat_room_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_chat_room_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_chat_room_req::MergeFrom(const enter_chat_room_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_chat_room_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_chat_room_req::CopyFrom(const enter_chat_room_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_chat_room_req::IsInitialized() const {

  return true;
}

void enter_chat_room_req::Swap(enter_chat_room_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_chat_room_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_chat_room_req_descriptor_;
  metadata.reflection = enter_chat_room_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enter_chat_room_ack::kProtoIdFieldNumber;
const int enter_chat_room_ack::kRetFieldNumber;
const int enter_chat_room_ack::kRoomIdFieldNumber;
#endif  // !_MSC_VER

enter_chat_room_ack::enter_chat_room_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_chat_room_ack::InitAsDefaultInstance() {
}

enter_chat_room_ack::enter_chat_room_ack(const enter_chat_room_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_chat_room_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7301;
  ret_ = 0u;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_chat_room_ack::~enter_chat_room_ack() {
  SharedDtor();
}

void enter_chat_room_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void enter_chat_room_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_chat_room_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_chat_room_ack_descriptor_;
}

const enter_chat_room_ack& enter_chat_room_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

enter_chat_room_ack* enter_chat_room_ack::default_instance_ = NULL;

enter_chat_room_ack* enter_chat_room_ack::New() const {
  return new enter_chat_room_ack;
}

void enter_chat_room_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7301;
    ret_ = 0u;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_chat_room_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_chat_room_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_chat_room_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_chat_room_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_chat_room_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_chat_room_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_chat_room_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_chat_room_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_chat_room_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_chat_room_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_chat_room_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_chat_room_ack::MergeFrom(const enter_chat_room_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_chat_room_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_chat_room_ack::CopyFrom(const enter_chat_room_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_chat_room_ack::IsInitialized() const {

  return true;
}

void enter_chat_room_ack::Swap(enter_chat_room_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_chat_room_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_chat_room_ack_descriptor_;
  metadata.reflection = enter_chat_room_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int exit_chat_room_req::kProtoIdFieldNumber;
const int exit_chat_room_req::kRoomIdFieldNumber;
#endif  // !_MSC_VER

exit_chat_room_req::exit_chat_room_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void exit_chat_room_req::InitAsDefaultInstance() {
}

exit_chat_room_req::exit_chat_room_req(const exit_chat_room_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void exit_chat_room_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7302;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

exit_chat_room_req::~exit_chat_room_req() {
  SharedDtor();
}

void exit_chat_room_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void exit_chat_room_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* exit_chat_room_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return exit_chat_room_req_descriptor_;
}

const exit_chat_room_req& exit_chat_room_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

exit_chat_room_req* exit_chat_room_req::default_instance_ = NULL;

exit_chat_room_req* exit_chat_room_req::New() const {
  return new exit_chat_room_req;
}

void exit_chat_room_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7302;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool exit_chat_room_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_chat_room_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void exit_chat_room_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_chat_room_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* exit_chat_room_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_chat_room_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int exit_chat_room_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_chat_room_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void exit_chat_room_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const exit_chat_room_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const exit_chat_room_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void exit_chat_room_req::MergeFrom(const exit_chat_room_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void exit_chat_room_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exit_chat_room_req::CopyFrom(const exit_chat_room_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_chat_room_req::IsInitialized() const {

  return true;
}

void exit_chat_room_req::Swap(exit_chat_room_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata exit_chat_room_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = exit_chat_room_req_descriptor_;
  metadata.reflection = exit_chat_room_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int exit_chat_room_ack::kProtoIdFieldNumber;
const int exit_chat_room_ack::kRetFieldNumber;
const int exit_chat_room_ack::kRoomIdFieldNumber;
#endif  // !_MSC_VER

exit_chat_room_ack::exit_chat_room_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void exit_chat_room_ack::InitAsDefaultInstance() {
}

exit_chat_room_ack::exit_chat_room_ack(const exit_chat_room_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void exit_chat_room_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7303;
  ret_ = 0u;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

exit_chat_room_ack::~exit_chat_room_ack() {
  SharedDtor();
}

void exit_chat_room_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void exit_chat_room_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* exit_chat_room_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return exit_chat_room_ack_descriptor_;
}

const exit_chat_room_ack& exit_chat_room_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

exit_chat_room_ack* exit_chat_room_ack::default_instance_ = NULL;

exit_chat_room_ack* exit_chat_room_ack::New() const {
  return new exit_chat_room_ack;
}

void exit_chat_room_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7303;
    ret_ = 0u;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool exit_chat_room_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_chat_room_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void exit_chat_room_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_chat_room_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* exit_chat_room_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_chat_room_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int exit_chat_room_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_chat_room_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void exit_chat_room_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const exit_chat_room_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const exit_chat_room_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void exit_chat_room_ack::MergeFrom(const exit_chat_room_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void exit_chat_room_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exit_chat_room_ack::CopyFrom(const exit_chat_room_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_chat_room_ack::IsInitialized() const {

  return true;
}

void exit_chat_room_ack::Swap(exit_chat_room_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata exit_chat_room_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = exit_chat_room_ack_descriptor_;
  metadata.reflection = exit_chat_room_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_chat_room_players_ntf::kProtoIdFieldNumber;
const int update_chat_room_players_ntf::kRoomIdFieldNumber;
const int update_chat_room_players_ntf::kAddPlayersFieldNumber;
const int update_chat_room_players_ntf::kDelPlayersFieldNumber;
#endif  // !_MSC_VER

update_chat_room_players_ntf::update_chat_room_players_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_chat_room_players_ntf::InitAsDefaultInstance() {
}

update_chat_room_players_ntf::update_chat_room_players_ntf(const update_chat_room_players_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_chat_room_players_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7304;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_chat_room_players_ntf::~update_chat_room_players_ntf() {
  SharedDtor();
}

void update_chat_room_players_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void update_chat_room_players_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_chat_room_players_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_chat_room_players_ntf_descriptor_;
}

const update_chat_room_players_ntf& update_chat_room_players_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

update_chat_room_players_ntf* update_chat_room_players_ntf::default_instance_ = NULL;

update_chat_room_players_ntf* update_chat_room_players_ntf::New() const {
  return new update_chat_room_players_ntf;
}

void update_chat_room_players_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7304;
    room_id_ = 0;
  }
  add_players_.Clear();
  del_players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_chat_room_players_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_chat_room_players_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_add_players;
        break;
      }

      // repeated .SProtoSpace.role_base_3part add_players = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_add_players;
        if (input->ExpectTag(34)) goto parse_del_players;
        break;
      }

      // repeated .SProtoSpace.role_base_3part del_players = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_del_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_del_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_del_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_chat_room_players_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_chat_room_players_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  // repeated .SProtoSpace.role_base_3part add_players = 3;
  for (int i = 0; i < this->add_players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->add_players(i), output);
  }

  // repeated .SProtoSpace.role_base_3part del_players = 4;
  for (int i = 0; i < this->del_players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->del_players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_chat_room_players_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_chat_room_players_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  // repeated .SProtoSpace.role_base_3part add_players = 3;
  for (int i = 0; i < this->add_players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->add_players(i), target);
  }

  // repeated .SProtoSpace.role_base_3part del_players = 4;
  for (int i = 0; i < this->del_players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->del_players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_chat_room_players_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_chat_room_players_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  // repeated .SProtoSpace.role_base_3part add_players = 3;
  total_size += 1 * this->add_players_size();
  for (int i = 0; i < this->add_players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->add_players(i));
  }

  // repeated .SProtoSpace.role_base_3part del_players = 4;
  total_size += 1 * this->del_players_size();
  for (int i = 0; i < this->del_players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->del_players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_chat_room_players_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_chat_room_players_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_chat_room_players_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_chat_room_players_ntf::MergeFrom(const update_chat_room_players_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  add_players_.MergeFrom(from.add_players_);
  del_players_.MergeFrom(from.del_players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_chat_room_players_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_chat_room_players_ntf::CopyFrom(const update_chat_room_players_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_chat_room_players_ntf::IsInitialized() const {

  return true;
}

void update_chat_room_players_ntf::Swap(update_chat_room_players_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(room_id_, other->room_id_);
    add_players_.Swap(&other->add_players_);
    del_players_.Swap(&other->del_players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_chat_room_players_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_chat_room_players_ntf_descriptor_;
  metadata.reflection = update_chat_room_players_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_chat_view_ntf::kProtoIdFieldNumber;
const int update_chat_view_ntf::kFixListFieldNumber;
const int update_chat_view_ntf::kAddListFieldNumber;
const int update_chat_view_ntf::kDelListFieldNumber;
#endif  // !_MSC_VER

update_chat_view_ntf::update_chat_view_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_chat_view_ntf::InitAsDefaultInstance() {
}

update_chat_view_ntf::update_chat_view_ntf(const update_chat_view_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_chat_view_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7305;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_chat_view_ntf::~update_chat_view_ntf() {
  SharedDtor();
}

void update_chat_view_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void update_chat_view_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_chat_view_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_chat_view_ntf_descriptor_;
}

const update_chat_view_ntf& update_chat_view_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

update_chat_view_ntf* update_chat_view_ntf::default_instance_ = NULL;

update_chat_view_ntf* update_chat_view_ntf::New() const {
  return new update_chat_view_ntf;
}

void update_chat_view_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7305;
  }
  fix_list_.Clear();
  add_list_.Clear();
  del_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_chat_view_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_chat_view_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fix_list;
        break;
      }

      // repeated .SProtoSpace.role_position fix_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fix_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fix_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fix_list;
        if (input->ExpectTag(26)) goto parse_add_list;
        break;
      }

      // repeated .SProtoSpace.role_position add_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_add_list;
        if (input->ExpectTag(34)) goto parse_del_list;
        break;
      }

      // repeated .SProtoSpace.role_position del_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_del_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_del_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_del_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_chat_view_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_chat_view_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // repeated .SProtoSpace.role_position fix_list = 2;
  for (int i = 0; i < this->fix_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fix_list(i), output);
  }

  // repeated .SProtoSpace.role_position add_list = 3;
  for (int i = 0; i < this->add_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->add_list(i), output);
  }

  // repeated .SProtoSpace.role_position del_list = 4;
  for (int i = 0; i < this->del_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->del_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_chat_view_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_chat_view_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // repeated .SProtoSpace.role_position fix_list = 2;
  for (int i = 0; i < this->fix_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fix_list(i), target);
  }

  // repeated .SProtoSpace.role_position add_list = 3;
  for (int i = 0; i < this->add_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->add_list(i), target);
  }

  // repeated .SProtoSpace.role_position del_list = 4;
  for (int i = 0; i < this->del_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->del_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_chat_view_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_chat_view_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  // repeated .SProtoSpace.role_position fix_list = 2;
  total_size += 1 * this->fix_list_size();
  for (int i = 0; i < this->fix_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fix_list(i));
  }

  // repeated .SProtoSpace.role_position add_list = 3;
  total_size += 1 * this->add_list_size();
  for (int i = 0; i < this->add_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->add_list(i));
  }

  // repeated .SProtoSpace.role_position del_list = 4;
  total_size += 1 * this->del_list_size();
  for (int i = 0; i < this->del_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->del_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_chat_view_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_chat_view_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_chat_view_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_chat_view_ntf::MergeFrom(const update_chat_view_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  fix_list_.MergeFrom(from.fix_list_);
  add_list_.MergeFrom(from.add_list_);
  del_list_.MergeFrom(from.del_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_chat_view_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_chat_view_ntf::CopyFrom(const update_chat_view_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_chat_view_ntf::IsInitialized() const {

  return true;
}

void update_chat_view_ntf::Swap(update_chat_view_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    fix_list_.Swap(&other->fix_list_);
    add_list_.Swap(&other->add_list_);
    del_list_.Swap(&other->del_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_chat_view_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_chat_view_ntf_descriptor_;
  metadata.reflection = update_chat_view_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int report_position_req::kProtoIdFieldNumber;
const int report_position_req::kRoomIdFieldNumber;
const int report_position_req::kCurPosFieldNumber;
#endif  // !_MSC_VER

report_position_req::report_position_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void report_position_req::InitAsDefaultInstance() {
  cur_pos_ = const_cast< ::SProtoSpace::role_position*>(&::SProtoSpace::role_position::default_instance());
}

report_position_req::report_position_req(const report_position_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void report_position_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7306;
  room_id_ = 0;
  cur_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

report_position_req::~report_position_req() {
  SharedDtor();
}

void report_position_req::SharedDtor() {
  if (this != default_instance_) {
    delete cur_pos_;
  }
}

void report_position_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* report_position_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return report_position_req_descriptor_;
}

const report_position_req& report_position_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

report_position_req* report_position_req::default_instance_ = NULL;

report_position_req* report_position_req::New() const {
  return new report_position_req;
}

void report_position_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7306;
    room_id_ = 0;
    if (has_cur_pos()) {
      if (cur_pos_ != NULL) cur_pos_->::SProtoSpace::role_position::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool report_position_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = report_position_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cur_pos;
        break;
      }

      // optional .SProtoSpace.role_position cur_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cur_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cur_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void report_position_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = report_position_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  // optional .SProtoSpace.role_position cur_pos = 3;
  if (has_cur_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cur_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* report_position_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = report_position_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  // optional .SProtoSpace.role_position cur_pos = 3;
  if (has_cur_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cur_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int report_position_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = report_position_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional .SProtoSpace.role_position cur_pos = 3;
    if (has_cur_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cur_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void report_position_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const report_position_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const report_position_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void report_position_req::MergeFrom(const report_position_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_cur_pos()) {
      mutable_cur_pos()->::SProtoSpace::role_position::MergeFrom(from.cur_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void report_position_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void report_position_req::CopyFrom(const report_position_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool report_position_req::IsInitialized() const {

  return true;
}

void report_position_req::Swap(report_position_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(cur_pos_, other->cur_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata report_position_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = report_position_req_descriptor_;
  metadata.reflection = report_position_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int report_position_ack::kProtoIdFieldNumber;
const int report_position_ack::kRetFieldNumber;
const int report_position_ack::kRoomIdFieldNumber;
const int report_position_ack::kCurPosFieldNumber;
#endif  // !_MSC_VER

report_position_ack::report_position_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void report_position_ack::InitAsDefaultInstance() {
  cur_pos_ = const_cast< ::SProtoSpace::role_position*>(&::SProtoSpace::role_position::default_instance());
}

report_position_ack::report_position_ack(const report_position_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void report_position_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7307;
  ret_ = 0u;
  room_id_ = 0;
  cur_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

report_position_ack::~report_position_ack() {
  SharedDtor();
}

void report_position_ack::SharedDtor() {
  if (this != default_instance_) {
    delete cur_pos_;
  }
}

void report_position_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* report_position_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return report_position_ack_descriptor_;
}

const report_position_ack& report_position_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

report_position_ack* report_position_ack::default_instance_ = NULL;

report_position_ack* report_position_ack::New() const {
  return new report_position_ack;
}

void report_position_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7307;
    ret_ = 0u;
    room_id_ = 0;
    if (has_cur_pos()) {
      if (cur_pos_ != NULL) cur_pos_->::SProtoSpace::role_position::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool report_position_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = report_position_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cur_pos;
        break;
      }

      // optional .SProtoSpace.role_position cur_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cur_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cur_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void report_position_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = report_position_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  // optional .SProtoSpace.role_position cur_pos = 4;
  if (has_cur_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cur_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* report_position_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = report_position_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  // optional .SProtoSpace.role_position cur_pos = 4;
  if (has_cur_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cur_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int report_position_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = report_position_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional .SProtoSpace.role_position cur_pos = 4;
    if (has_cur_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cur_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void report_position_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const report_position_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const report_position_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void report_position_ack::MergeFrom(const report_position_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_cur_pos()) {
      mutable_cur_pos()->::SProtoSpace::role_position::MergeFrom(from.cur_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void report_position_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void report_position_ack::CopyFrom(const report_position_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool report_position_ack::IsInitialized() const {

  return true;
}

void report_position_ack::Swap(report_position_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(room_id_, other->room_id_);
    std::swap(cur_pos_, other->cur_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata report_position_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = report_position_ack_descriptor_;
  metadata.reflection = report_position_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_role_position_req::kProtoIdFieldNumber;
const int get_role_position_req::kDestIdFieldNumber;
#endif  // !_MSC_VER

get_role_position_req::get_role_position_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_role_position_req::InitAsDefaultInstance() {
}

get_role_position_req::get_role_position_req(const get_role_position_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_role_position_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7308;
  dest_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_role_position_req::~get_role_position_req() {
  SharedDtor();
}

void get_role_position_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_role_position_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_role_position_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_role_position_req_descriptor_;
}

const get_role_position_req& get_role_position_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

get_role_position_req* get_role_position_req::default_instance_ = NULL;

get_role_position_req* get_role_position_req::New() const {
  return new get_role_position_req;
}

void get_role_position_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7308;
    dest_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_role_position_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_position_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dest_id;
        break;
      }

      // optional uint64 dest_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_id_)));
          set_has_dest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_role_position_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_position_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 dest_id = 2;
  if (has_dest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dest_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_role_position_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_position_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 dest_id = 2;
  if (has_dest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dest_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_role_position_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_position_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 dest_id = 2;
    if (has_dest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_role_position_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_role_position_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_role_position_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_role_position_req::MergeFrom(const get_role_position_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_dest_id()) {
      set_dest_id(from.dest_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_role_position_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_role_position_req::CopyFrom(const get_role_position_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_role_position_req::IsInitialized() const {

  return true;
}

void get_role_position_req::Swap(get_role_position_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(dest_id_, other->dest_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_role_position_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_role_position_req_descriptor_;
  metadata.reflection = get_role_position_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_role_position_ack::kProtoIdFieldNumber;
const int get_role_position_ack::kRetFieldNumber;
const int get_role_position_ack::kRoomIdFieldNumber;
const int get_role_position_ack::kDestPosFieldNumber;
#endif  // !_MSC_VER

get_role_position_ack::get_role_position_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_role_position_ack::InitAsDefaultInstance() {
  dest_pos_ = const_cast< ::SProtoSpace::role_position*>(&::SProtoSpace::role_position::default_instance());
}

get_role_position_ack::get_role_position_ack(const get_role_position_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_role_position_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7309;
  ret_ = 0u;
  room_id_ = 0;
  dest_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_role_position_ack::~get_role_position_ack() {
  SharedDtor();
}

void get_role_position_ack::SharedDtor() {
  if (this != default_instance_) {
    delete dest_pos_;
  }
}

void get_role_position_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_role_position_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_role_position_ack_descriptor_;
}

const get_role_position_ack& get_role_position_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

get_role_position_ack* get_role_position_ack::default_instance_ = NULL;

get_role_position_ack* get_role_position_ack::New() const {
  return new get_role_position_ack;
}

void get_role_position_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7309;
    ret_ = 0u;
    room_id_ = 0;
    if (has_dest_pos()) {
      if (dest_pos_ != NULL) dest_pos_->::SProtoSpace::role_position::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_role_position_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_position_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dest_pos;
        break;
      }

      // optional .SProtoSpace.role_position dest_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_role_position_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_position_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  // optional .SProtoSpace.role_position dest_pos = 4;
  if (has_dest_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dest_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_role_position_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_position_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  // optional .SProtoSpace.role_position dest_pos = 4;
  if (has_dest_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dest_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_role_position_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_position_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional .SProtoSpace.role_position dest_pos = 4;
    if (has_dest_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_role_position_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_role_position_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_role_position_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_role_position_ack::MergeFrom(const get_role_position_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_dest_pos()) {
      mutable_dest_pos()->::SProtoSpace::role_position::MergeFrom(from.dest_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_role_position_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_role_position_ack::CopyFrom(const get_role_position_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_role_position_ack::IsInitialized() const {

  return true;
}

void get_role_position_ack::Swap(get_role_position_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(room_id_, other->room_id_);
    std::swap(dest_pos_, other->dest_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_role_position_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_role_position_ack_descriptor_;
  metadata.reflection = get_role_position_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_chat_room_list_req::kProtoIdFieldNumber;
const int get_chat_room_list_req::kIndexStartFieldNumber;
const int get_chat_room_list_req::kIndexEndFieldNumber;
#endif  // !_MSC_VER

get_chat_room_list_req::get_chat_room_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_chat_room_list_req::InitAsDefaultInstance() {
}

get_chat_room_list_req::get_chat_room_list_req(const get_chat_room_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_chat_room_list_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7310;
  index_start_ = 0;
  index_end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_chat_room_list_req::~get_chat_room_list_req() {
  SharedDtor();
}

void get_chat_room_list_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_chat_room_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_chat_room_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_chat_room_list_req_descriptor_;
}

const get_chat_room_list_req& get_chat_room_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

get_chat_room_list_req* get_chat_room_list_req::default_instance_ = NULL;

get_chat_room_list_req* get_chat_room_list_req::New() const {
  return new get_chat_room_list_req;
}

void get_chat_room_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7310;
    index_start_ = 0;
    index_end_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_chat_room_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_chat_room_list_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index_start;
        break;
      }

      // optional int32 index_start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_start_)));
          set_has_index_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index_end;
        break;
      }

      // optional int32 index_end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_end_)));
          set_has_index_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_chat_room_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_chat_room_list_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 index_start = 2;
  if (has_index_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index_start(), output);
  }

  // optional int32 index_end = 3;
  if (has_index_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index_end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_chat_room_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_chat_room_list_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 index_start = 2;
  if (has_index_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index_start(), target);
  }

  // optional int32 index_end = 3;
  if (has_index_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index_end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_chat_room_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_chat_room_list_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 index_start = 2;
    if (has_index_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index_start());
    }

    // optional int32 index_end = 3;
    if (has_index_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index_end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_chat_room_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_chat_room_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_chat_room_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_chat_room_list_req::MergeFrom(const get_chat_room_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_index_start()) {
      set_index_start(from.index_start());
    }
    if (from.has_index_end()) {
      set_index_end(from.index_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_chat_room_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_chat_room_list_req::CopyFrom(const get_chat_room_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_chat_room_list_req::IsInitialized() const {

  return true;
}

void get_chat_room_list_req::Swap(get_chat_room_list_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(index_start_, other->index_start_);
    std::swap(index_end_, other->index_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_chat_room_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_chat_room_list_req_descriptor_;
  metadata.reflection = get_chat_room_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_chat_room_list_ack::kProtoIdFieldNumber;
const int get_chat_room_list_ack::kRetFieldNumber;
const int get_chat_room_list_ack::kIndexStartFieldNumber;
const int get_chat_room_list_ack::kIndexEndFieldNumber;
const int get_chat_room_list_ack::kRoomsFieldNumber;
#endif  // !_MSC_VER

get_chat_room_list_ack::get_chat_room_list_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_chat_room_list_ack::InitAsDefaultInstance() {
}

get_chat_room_list_ack::get_chat_room_list_ack(const get_chat_room_list_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_chat_room_list_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7311;
  ret_ = 0;
  index_start_ = 0;
  index_end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_chat_room_list_ack::~get_chat_room_list_ack() {
  SharedDtor();
}

void get_chat_room_list_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_chat_room_list_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_chat_room_list_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_chat_room_list_ack_descriptor_;
}

const get_chat_room_list_ack& get_chat_room_list_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

get_chat_room_list_ack* get_chat_room_list_ack::default_instance_ = NULL;

get_chat_room_list_ack* get_chat_room_list_ack::New() const {
  return new get_chat_room_list_ack;
}

void get_chat_room_list_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7311;
    ret_ = 0;
    index_start_ = 0;
    index_end_ = 0;
  }
  rooms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_chat_room_list_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_chat_room_list_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index_start;
        break;
      }

      // optional int32 index_start = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_start_)));
          set_has_index_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index_end;
        break;
      }

      // optional int32 index_end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_end_)));
          set_has_index_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rooms;
        break;
      }

      // repeated .SProtoSpace.chat_room_state rooms = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rooms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rooms;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_chat_room_list_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_chat_room_list_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 index_start = 3;
  if (has_index_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index_start(), output);
  }

  // optional int32 index_end = 4;
  if (has_index_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index_end(), output);
  }

  // repeated .SProtoSpace.chat_room_state rooms = 5;
  for (int i = 0; i < this->rooms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rooms(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_chat_room_list_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_chat_room_list_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 index_start = 3;
  if (has_index_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index_start(), target);
  }

  // optional int32 index_end = 4;
  if (has_index_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index_end(), target);
  }

  // repeated .SProtoSpace.chat_room_state rooms = 5;
  for (int i = 0; i < this->rooms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rooms(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_chat_room_list_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_chat_room_list_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 index_start = 3;
    if (has_index_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index_start());
    }

    // optional int32 index_end = 4;
    if (has_index_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index_end());
    }

  }
  // repeated .SProtoSpace.chat_room_state rooms = 5;
  total_size += 1 * this->rooms_size();
  for (int i = 0; i < this->rooms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rooms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_chat_room_list_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_chat_room_list_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_chat_room_list_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_chat_room_list_ack::MergeFrom(const get_chat_room_list_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  rooms_.MergeFrom(from.rooms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_index_start()) {
      set_index_start(from.index_start());
    }
    if (from.has_index_end()) {
      set_index_end(from.index_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_chat_room_list_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_chat_room_list_ack::CopyFrom(const get_chat_room_list_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_chat_room_list_ack::IsInitialized() const {

  return true;
}

void get_chat_room_list_ack::Swap(get_chat_room_list_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(index_start_, other->index_start_);
    std::swap(index_end_, other->index_end_);
    rooms_.Swap(&other->rooms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_chat_room_list_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_chat_room_list_ack_descriptor_;
  metadata.reflection = get_chat_room_list_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int member_kick_3d_chat_room_req::kProtoIdFieldNumber;
const int member_kick_3d_chat_room_req::kKickedRoleIdFieldNumber;
#endif  // !_MSC_VER

member_kick_3d_chat_room_req::member_kick_3d_chat_room_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void member_kick_3d_chat_room_req::InitAsDefaultInstance() {
}

member_kick_3d_chat_room_req::member_kick_3d_chat_room_req(const member_kick_3d_chat_room_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void member_kick_3d_chat_room_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7319;
  kicked_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

member_kick_3d_chat_room_req::~member_kick_3d_chat_room_req() {
  SharedDtor();
}

void member_kick_3d_chat_room_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void member_kick_3d_chat_room_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* member_kick_3d_chat_room_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return member_kick_3d_chat_room_req_descriptor_;
}

const member_kick_3d_chat_room_req& member_kick_3d_chat_room_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

member_kick_3d_chat_room_req* member_kick_3d_chat_room_req::default_instance_ = NULL;

member_kick_3d_chat_room_req* member_kick_3d_chat_room_req::New() const {
  return new member_kick_3d_chat_room_req;
}

void member_kick_3d_chat_room_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7319;
    kicked_role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool member_kick_3d_chat_room_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = member_kick_3d_chat_room_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kicked_role_id;
        break;
      }

      // optional uint64 kicked_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kicked_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kicked_role_id_)));
          set_has_kicked_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void member_kick_3d_chat_room_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = member_kick_3d_chat_room_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 kicked_role_id = 2;
  if (has_kicked_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->kicked_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* member_kick_3d_chat_room_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = member_kick_3d_chat_room_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 kicked_role_id = 2;
  if (has_kicked_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->kicked_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int member_kick_3d_chat_room_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = member_kick_3d_chat_room_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 kicked_role_id = 2;
    if (has_kicked_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kicked_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void member_kick_3d_chat_room_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const member_kick_3d_chat_room_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const member_kick_3d_chat_room_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void member_kick_3d_chat_room_req::MergeFrom(const member_kick_3d_chat_room_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_kicked_role_id()) {
      set_kicked_role_id(from.kicked_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void member_kick_3d_chat_room_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void member_kick_3d_chat_room_req::CopyFrom(const member_kick_3d_chat_room_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool member_kick_3d_chat_room_req::IsInitialized() const {

  return true;
}

void member_kick_3d_chat_room_req::Swap(member_kick_3d_chat_room_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(kicked_role_id_, other->kicked_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata member_kick_3d_chat_room_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = member_kick_3d_chat_room_req_descriptor_;
  metadata.reflection = member_kick_3d_chat_room_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int member_kick_3d_chat_room_ack::kProtoIdFieldNumber;
const int member_kick_3d_chat_room_ack::kRetFieldNumber;
const int member_kick_3d_chat_room_ack::kKickedRoleIdFieldNumber;
const int member_kick_3d_chat_room_ack::kSourRoleIdFieldNumber;
#endif  // !_MSC_VER

member_kick_3d_chat_room_ack::member_kick_3d_chat_room_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void member_kick_3d_chat_room_ack::InitAsDefaultInstance() {
}

member_kick_3d_chat_room_ack::member_kick_3d_chat_room_ack(const member_kick_3d_chat_room_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void member_kick_3d_chat_room_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7320;
  ret_ = 0;
  kicked_role_id_ = GOOGLE_ULONGLONG(0);
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

member_kick_3d_chat_room_ack::~member_kick_3d_chat_room_ack() {
  SharedDtor();
}

void member_kick_3d_chat_room_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void member_kick_3d_chat_room_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* member_kick_3d_chat_room_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return member_kick_3d_chat_room_ack_descriptor_;
}

const member_kick_3d_chat_room_ack& member_kick_3d_chat_room_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

member_kick_3d_chat_room_ack* member_kick_3d_chat_room_ack::default_instance_ = NULL;

member_kick_3d_chat_room_ack* member_kick_3d_chat_room_ack::New() const {
  return new member_kick_3d_chat_room_ack;
}

void member_kick_3d_chat_room_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7320;
    ret_ = 0;
    kicked_role_id_ = GOOGLE_ULONGLONG(0);
    sour_role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool member_kick_3d_chat_room_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = member_kick_3d_chat_room_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kicked_role_id;
        break;
      }

      // optional uint64 kicked_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kicked_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kicked_role_id_)));
          set_has_kicked_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sour_role_id;
        break;
      }

      // optional uint64 sour_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sour_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sour_role_id_)));
          set_has_sour_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void member_kick_3d_chat_room_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = member_kick_3d_chat_room_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint64 kicked_role_id = 3;
  if (has_kicked_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->kicked_role_id(), output);
  }

  // optional uint64 sour_role_id = 4;
  if (has_sour_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sour_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* member_kick_3d_chat_room_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = member_kick_3d_chat_room_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 kicked_role_id = 3;
  if (has_kicked_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->kicked_role_id(), target);
  }

  // optional uint64 sour_role_id = 4;
  if (has_sour_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sour_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int member_kick_3d_chat_room_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = member_kick_3d_chat_room_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 kicked_role_id = 3;
    if (has_kicked_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kicked_role_id());
    }

    // optional uint64 sour_role_id = 4;
    if (has_sour_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sour_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void member_kick_3d_chat_room_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const member_kick_3d_chat_room_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const member_kick_3d_chat_room_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void member_kick_3d_chat_room_ack::MergeFrom(const member_kick_3d_chat_room_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_kicked_role_id()) {
      set_kicked_role_id(from.kicked_role_id());
    }
    if (from.has_sour_role_id()) {
      set_sour_role_id(from.sour_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void member_kick_3d_chat_room_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void member_kick_3d_chat_room_ack::CopyFrom(const member_kick_3d_chat_room_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool member_kick_3d_chat_room_ack::IsInitialized() const {

  return true;
}

void member_kick_3d_chat_room_ack::Swap(member_kick_3d_chat_room_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(kicked_role_id_, other->kicked_role_id_);
    std::swap(sour_role_id_, other->sour_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata member_kick_3d_chat_room_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = member_kick_3d_chat_room_ack_descriptor_;
  metadata.reflection = member_kick_3d_chat_room_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_hang_up_award_ntf::kProtoIdFieldNumber;
const int get_hang_up_award_ntf::kFixItemsFieldNumber;
const int get_hang_up_award_ntf::kRandomItemsFieldNumber;
#endif  // !_MSC_VER

get_hang_up_award_ntf::get_hang_up_award_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_hang_up_award_ntf::InitAsDefaultInstance() {
  fix_items_ = const_cast< ::SProtoSpace::reward_item*>(&::SProtoSpace::reward_item::default_instance());
  random_items_ = const_cast< ::SProtoSpace::reward_item*>(&::SProtoSpace::reward_item::default_instance());
}

get_hang_up_award_ntf::get_hang_up_award_ntf(const get_hang_up_award_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_hang_up_award_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7317;
  fix_items_ = NULL;
  random_items_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_hang_up_award_ntf::~get_hang_up_award_ntf() {
  SharedDtor();
}

void get_hang_up_award_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete fix_items_;
    delete random_items_;
  }
}

void get_hang_up_award_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_hang_up_award_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_hang_up_award_ntf_descriptor_;
}

const get_hang_up_award_ntf& get_hang_up_award_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

get_hang_up_award_ntf* get_hang_up_award_ntf::default_instance_ = NULL;

get_hang_up_award_ntf* get_hang_up_award_ntf::New() const {
  return new get_hang_up_award_ntf;
}

void get_hang_up_award_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7317;
    if (has_fix_items()) {
      if (fix_items_ != NULL) fix_items_->::SProtoSpace::reward_item::Clear();
    }
    if (has_random_items()) {
      if (random_items_ != NULL) random_items_->::SProtoSpace::reward_item::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_hang_up_award_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_hang_up_award_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fix_items;
        break;
      }

      // optional .SProtoSpace.reward_item fix_items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fix_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fix_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_random_items;
        break;
      }

      // optional .SProtoSpace.reward_item random_items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_random_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_hang_up_award_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_hang_up_award_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.reward_item fix_items = 2;
  if (has_fix_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fix_items(), output);
  }

  // optional .SProtoSpace.reward_item random_items = 3;
  if (has_random_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->random_items(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_hang_up_award_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_hang_up_award_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.reward_item fix_items = 2;
  if (has_fix_items()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fix_items(), target);
  }

  // optional .SProtoSpace.reward_item random_items = 3;
  if (has_random_items()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->random_items(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_hang_up_award_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_hang_up_award_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.reward_item fix_items = 2;
    if (has_fix_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fix_items());
    }

    // optional .SProtoSpace.reward_item random_items = 3;
    if (has_random_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->random_items());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_hang_up_award_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_hang_up_award_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_hang_up_award_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_hang_up_award_ntf::MergeFrom(const get_hang_up_award_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_fix_items()) {
      mutable_fix_items()->::SProtoSpace::reward_item::MergeFrom(from.fix_items());
    }
    if (from.has_random_items()) {
      mutable_random_items()->::SProtoSpace::reward_item::MergeFrom(from.random_items());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_hang_up_award_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_hang_up_award_ntf::CopyFrom(const get_hang_up_award_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_hang_up_award_ntf::IsInitialized() const {

  return true;
}

void get_hang_up_award_ntf::Swap(get_hang_up_award_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(fix_items_, other->fix_items_);
    std::swap(random_items_, other->random_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_hang_up_award_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_hang_up_award_ntf_descriptor_;
  metadata.reflection = get_hang_up_award_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_hang_up_info_ntf::kProtoIdFieldNumber;
const int get_hang_up_info_ntf::kCountDownFieldNumber;
const int get_hang_up_info_ntf::kCompletionTimesFieldNumber;
const int get_hang_up_info_ntf::kTotalTimesFieldNumber;
#endif  // !_MSC_VER

get_hang_up_info_ntf::get_hang_up_info_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_hang_up_info_ntf::InitAsDefaultInstance() {
}

get_hang_up_info_ntf::get_hang_up_info_ntf(const get_hang_up_info_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_hang_up_info_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7318;
  count_down_ = 0;
  completion_times_ = 0;
  total_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_hang_up_info_ntf::~get_hang_up_info_ntf() {
  SharedDtor();
}

void get_hang_up_info_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_hang_up_info_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_hang_up_info_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_hang_up_info_ntf_descriptor_;
}

const get_hang_up_info_ntf& get_hang_up_info_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

get_hang_up_info_ntf* get_hang_up_info_ntf::default_instance_ = NULL;

get_hang_up_info_ntf* get_hang_up_info_ntf::New() const {
  return new get_hang_up_info_ntf;
}

void get_hang_up_info_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7318;
    count_down_ = 0;
    completion_times_ = 0;
    total_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_hang_up_info_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_hang_up_info_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count_down;
        break;
      }

      // optional int32 count_down = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_down_)));
          set_has_count_down();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_completion_times;
        break;
      }

      // optional int32 completion_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completion_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &completion_times_)));
          set_has_completion_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_times;
        break;
      }

      // optional int32 total_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_times_)));
          set_has_total_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_hang_up_info_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_hang_up_info_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 count_down = 2;
  if (has_count_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count_down(), output);
  }

  // optional int32 completion_times = 3;
  if (has_completion_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->completion_times(), output);
  }

  // optional int32 total_times = 4;
  if (has_total_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_hang_up_info_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_hang_up_info_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 count_down = 2;
  if (has_count_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count_down(), target);
  }

  // optional int32 completion_times = 3;
  if (has_completion_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->completion_times(), target);
  }

  // optional int32 total_times = 4;
  if (has_total_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_hang_up_info_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_hang_up_info_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 count_down = 2;
    if (has_count_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_down());
    }

    // optional int32 completion_times = 3;
    if (has_completion_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->completion_times());
    }

    // optional int32 total_times = 4;
    if (has_total_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_hang_up_info_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_hang_up_info_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_hang_up_info_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_hang_up_info_ntf::MergeFrom(const get_hang_up_info_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_count_down()) {
      set_count_down(from.count_down());
    }
    if (from.has_completion_times()) {
      set_completion_times(from.completion_times());
    }
    if (from.has_total_times()) {
      set_total_times(from.total_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_hang_up_info_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_hang_up_info_ntf::CopyFrom(const get_hang_up_info_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_hang_up_info_ntf::IsInitialized() const {

  return true;
}

void get_hang_up_info_ntf::Swap(get_hang_up_info_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(count_down_, other->count_down_);
    std::swap(completion_times_, other->completion_times_);
    std::swap(total_times_, other->total_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_hang_up_info_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_hang_up_info_ntf_descriptor_;
  metadata.reflection = get_hang_up_info_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_chat_room_data_ntf::kProtoIdFieldNumber;
const int update_chat_room_data_ntf::kOwnerIdFieldNumber;
const int update_chat_room_data_ntf::kRoomConfIdFieldNumber;
const int update_chat_room_data_ntf::kTotalFightPowerFieldNumber;
const int update_chat_room_data_ntf::kRoomNameFieldNumber;
const int update_chat_room_data_ntf::kIsTopFieldNumber;
const int update_chat_room_data_ntf::kTopLeftTimeFieldNumber;
#endif  // !_MSC_VER

update_chat_room_data_ntf::update_chat_room_data_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_chat_room_data_ntf::InitAsDefaultInstance() {
}

update_chat_room_data_ntf::update_chat_room_data_ntf(const update_chat_room_data_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_chat_room_data_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7316;
  owner_id_ = GOOGLE_ULONGLONG(0);
  room_conf_id_ = 0;
  total_fight_power_ = GOOGLE_LONGLONG(0);
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_top_ = false;
  top_left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_chat_room_data_ntf::~update_chat_room_data_ntf() {
  SharedDtor();
}

void update_chat_room_data_ntf::SharedDtor() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void update_chat_room_data_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_chat_room_data_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_chat_room_data_ntf_descriptor_;
}

const update_chat_room_data_ntf& update_chat_room_data_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

update_chat_room_data_ntf* update_chat_room_data_ntf::default_instance_ = NULL;

update_chat_room_data_ntf* update_chat_room_data_ntf::New() const {
  return new update_chat_room_data_ntf;
}

void update_chat_room_data_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7316;
    owner_id_ = GOOGLE_ULONGLONG(0);
    room_conf_id_ = 0;
    total_fight_power_ = GOOGLE_LONGLONG(0);
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::kEmptyString) {
        room_name_->clear();
      }
    }
    is_top_ = false;
    top_left_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_chat_room_data_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_chat_room_data_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_owner_id;
        break;
      }

      // optional uint64 owner_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_conf_id;
        break;
      }

      // optional int32 room_conf_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_conf_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_conf_id_)));
          set_has_room_conf_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_fight_power;
        break;
      }

      // optional int64 total_fight_power = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_fight_power_)));
          set_has_total_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_room_name;
        break;
      }

      // optional string room_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_top;
        break;
      }

      // optional bool is_top = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_top_)));
          set_has_is_top();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_top_left_time;
        break;
      }

      // optional int32 top_left_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_left_time_)));
          set_has_top_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_chat_room_data_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_chat_room_data_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 owner_id = 2;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->owner_id(), output);
  }

  // optional int32 room_conf_id = 3;
  if (has_room_conf_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_conf_id(), output);
  }

  // optional int64 total_fight_power = 4;
  if (has_total_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_fight_power(), output);
  }

  // optional string room_name = 5;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->room_name(), output);
  }

  // optional bool is_top = 6;
  if (has_is_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_top(), output);
  }

  // optional int32 top_left_time = 7;
  if (has_top_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->top_left_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_chat_room_data_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_chat_room_data_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 owner_id = 2;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->owner_id(), target);
  }

  // optional int32 room_conf_id = 3;
  if (has_room_conf_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_conf_id(), target);
  }

  // optional int64 total_fight_power = 4;
  if (has_total_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_fight_power(), target);
  }

  // optional string room_name = 5;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->room_name(), target);
  }

  // optional bool is_top = 6;
  if (has_is_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_top(), target);
  }

  // optional int32 top_left_time = 7;
  if (has_top_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->top_left_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_chat_room_data_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_chat_room_data_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 owner_id = 2;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->owner_id());
    }

    // optional int32 room_conf_id = 3;
    if (has_room_conf_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_conf_id());
    }

    // optional int64 total_fight_power = 4;
    if (has_total_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_fight_power());
    }

    // optional string room_name = 5;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

    // optional bool is_top = 6;
    if (has_is_top()) {
      total_size += 1 + 1;
    }

    // optional int32 top_left_time = 7;
    if (has_top_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top_left_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_chat_room_data_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_chat_room_data_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_chat_room_data_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_chat_room_data_ntf::MergeFrom(const update_chat_room_data_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
    if (from.has_room_conf_id()) {
      set_room_conf_id(from.room_conf_id());
    }
    if (from.has_total_fight_power()) {
      set_total_fight_power(from.total_fight_power());
    }
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
    if (from.has_is_top()) {
      set_is_top(from.is_top());
    }
    if (from.has_top_left_time()) {
      set_top_left_time(from.top_left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_chat_room_data_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_chat_room_data_ntf::CopyFrom(const update_chat_room_data_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_chat_room_data_ntf::IsInitialized() const {

  return true;
}

void update_chat_room_data_ntf::Swap(update_chat_room_data_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(owner_id_, other->owner_id_);
    std::swap(room_conf_id_, other->room_conf_id_);
    std::swap(total_fight_power_, other->total_fight_power_);
    std::swap(room_name_, other->room_name_);
    std::swap(is_top_, other->is_top_);
    std::swap(top_left_time_, other->top_left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_chat_room_data_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_chat_room_data_ntf_descriptor_;
  metadata.reflection = update_chat_room_data_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_3d_chat_room_pos_req::kProtoIdFieldNumber;
const int get_3d_chat_room_pos_req::kRoomIdFieldNumber;
#endif  // !_MSC_VER

get_3d_chat_room_pos_req::get_3d_chat_room_pos_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_3d_chat_room_pos_req::InitAsDefaultInstance() {
}

get_3d_chat_room_pos_req::get_3d_chat_room_pos_req(const get_3d_chat_room_pos_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_3d_chat_room_pos_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7321;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_3d_chat_room_pos_req::~get_3d_chat_room_pos_req() {
  SharedDtor();
}

void get_3d_chat_room_pos_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_3d_chat_room_pos_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_3d_chat_room_pos_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_3d_chat_room_pos_req_descriptor_;
}

const get_3d_chat_room_pos_req& get_3d_chat_room_pos_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

get_3d_chat_room_pos_req* get_3d_chat_room_pos_req::default_instance_ = NULL;

get_3d_chat_room_pos_req* get_3d_chat_room_pos_req::New() const {
  return new get_3d_chat_room_pos_req;
}

void get_3d_chat_room_pos_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7321;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_3d_chat_room_pos_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_3d_chat_room_pos_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_3d_chat_room_pos_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_3d_chat_room_pos_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_3d_chat_room_pos_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_3d_chat_room_pos_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_3d_chat_room_pos_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_3d_chat_room_pos_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_3d_chat_room_pos_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_3d_chat_room_pos_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_3d_chat_room_pos_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_3d_chat_room_pos_req::MergeFrom(const get_3d_chat_room_pos_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_3d_chat_room_pos_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_3d_chat_room_pos_req::CopyFrom(const get_3d_chat_room_pos_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_3d_chat_room_pos_req::IsInitialized() const {

  return true;
}

void get_3d_chat_room_pos_req::Swap(get_3d_chat_room_pos_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_3d_chat_room_pos_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_3d_chat_room_pos_req_descriptor_;
  metadata.reflection = get_3d_chat_room_pos_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_3d_chat_room_pos_ack::kProtoIdFieldNumber;
const int get_3d_chat_room_pos_ack::kRetFieldNumber;
const int get_3d_chat_room_pos_ack::kRoomIdFieldNumber;
const int get_3d_chat_room_pos_ack::kPosFieldNumber;
#endif  // !_MSC_VER

get_3d_chat_room_pos_ack::get_3d_chat_room_pos_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_3d_chat_room_pos_ack::InitAsDefaultInstance() {
}

get_3d_chat_room_pos_ack::get_3d_chat_room_pos_ack(const get_3d_chat_room_pos_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_3d_chat_room_pos_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7322;
  ret_ = 0;
  room_id_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_3d_chat_room_pos_ack::~get_3d_chat_room_pos_ack() {
  SharedDtor();
}

void get_3d_chat_room_pos_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_3d_chat_room_pos_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_3d_chat_room_pos_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_3d_chat_room_pos_ack_descriptor_;
}

const get_3d_chat_room_pos_ack& get_3d_chat_room_pos_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

get_3d_chat_room_pos_ack* get_3d_chat_room_pos_ack::default_instance_ = NULL;

get_3d_chat_room_pos_ack* get_3d_chat_room_pos_ack::New() const {
  return new get_3d_chat_room_pos_ack;
}

void get_3d_chat_room_pos_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7322;
    ret_ = 0;
    room_id_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_3d_chat_room_pos_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_3d_chat_room_pos_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }

      // optional int32 pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_3d_chat_room_pos_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_3d_chat_room_pos_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  // optional int32 pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_3d_chat_room_pos_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_3d_chat_room_pos_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  // optional int32 pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_3d_chat_room_pos_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_3d_chat_room_pos_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_3d_chat_room_pos_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_3d_chat_room_pos_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_3d_chat_room_pos_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_3d_chat_room_pos_ack::MergeFrom(const get_3d_chat_room_pos_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_3d_chat_room_pos_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_3d_chat_room_pos_ack::CopyFrom(const get_3d_chat_room_pos_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_3d_chat_room_pos_ack::IsInitialized() const {

  return true;
}

void get_3d_chat_room_pos_ack::Swap(get_3d_chat_room_pos_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(room_id_, other->room_id_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_3d_chat_room_pos_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_3d_chat_room_pos_ack_descriptor_;
  metadata.reflection = get_3d_chat_room_pos_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int top_3d_chat_room_req::kProtoIdFieldNumber;
const int top_3d_chat_room_req::kRoomIdFieldNumber;
const int top_3d_chat_room_req::kItemConfIdFieldNumber;
#endif  // !_MSC_VER

top_3d_chat_room_req::top_3d_chat_room_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void top_3d_chat_room_req::InitAsDefaultInstance() {
}

top_3d_chat_room_req::top_3d_chat_room_req(const top_3d_chat_room_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void top_3d_chat_room_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7323;
  room_id_ = 0;
  item_conf_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

top_3d_chat_room_req::~top_3d_chat_room_req() {
  SharedDtor();
}

void top_3d_chat_room_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void top_3d_chat_room_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* top_3d_chat_room_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return top_3d_chat_room_req_descriptor_;
}

const top_3d_chat_room_req& top_3d_chat_room_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

top_3d_chat_room_req* top_3d_chat_room_req::default_instance_ = NULL;

top_3d_chat_room_req* top_3d_chat_room_req::New() const {
  return new top_3d_chat_room_req;
}

void top_3d_chat_room_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7323;
    room_id_ = 0;
    item_conf_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool top_3d_chat_room_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = top_3d_chat_room_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_conf_id;
        break;
      }

      // optional int32 item_conf_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_conf_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_conf_id_)));
          set_has_item_conf_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void top_3d_chat_room_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = top_3d_chat_room_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  // optional int32 item_conf_id = 3;
  if (has_item_conf_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_conf_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* top_3d_chat_room_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = top_3d_chat_room_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  // optional int32 item_conf_id = 3;
  if (has_item_conf_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_conf_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int top_3d_chat_room_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = top_3d_chat_room_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 item_conf_id = 3;
    if (has_item_conf_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_conf_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void top_3d_chat_room_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const top_3d_chat_room_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const top_3d_chat_room_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void top_3d_chat_room_req::MergeFrom(const top_3d_chat_room_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_item_conf_id()) {
      set_item_conf_id(from.item_conf_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void top_3d_chat_room_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void top_3d_chat_room_req::CopyFrom(const top_3d_chat_room_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool top_3d_chat_room_req::IsInitialized() const {

  return true;
}

void top_3d_chat_room_req::Swap(top_3d_chat_room_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(item_conf_id_, other->item_conf_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata top_3d_chat_room_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = top_3d_chat_room_req_descriptor_;
  metadata.reflection = top_3d_chat_room_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int top_3d_chat_room_ack::kProtoIdFieldNumber;
const int top_3d_chat_room_ack::kRetFieldNumber;
const int top_3d_chat_room_ack::kRoomIdFieldNumber;
const int top_3d_chat_room_ack::kItemConfIdFieldNumber;
#endif  // !_MSC_VER

top_3d_chat_room_ack::top_3d_chat_room_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void top_3d_chat_room_ack::InitAsDefaultInstance() {
}

top_3d_chat_room_ack::top_3d_chat_room_ack(const top_3d_chat_room_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void top_3d_chat_room_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7324;
  ret_ = 0;
  room_id_ = 0;
  item_conf_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

top_3d_chat_room_ack::~top_3d_chat_room_ack() {
  SharedDtor();
}

void top_3d_chat_room_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void top_3d_chat_room_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* top_3d_chat_room_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return top_3d_chat_room_ack_descriptor_;
}

const top_3d_chat_room_ack& top_3d_chat_room_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

top_3d_chat_room_ack* top_3d_chat_room_ack::default_instance_ = NULL;

top_3d_chat_room_ack* top_3d_chat_room_ack::New() const {
  return new top_3d_chat_room_ack;
}

void top_3d_chat_room_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7324;
    ret_ = 0;
    room_id_ = 0;
    item_conf_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool top_3d_chat_room_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = top_3d_chat_room_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_conf_id;
        break;
      }

      // optional int32 item_conf_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_conf_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_conf_id_)));
          set_has_item_conf_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void top_3d_chat_room_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = top_3d_chat_room_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  // optional int32 item_conf_id = 4;
  if (has_item_conf_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_conf_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* top_3d_chat_room_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = top_3d_chat_room_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  // optional int32 item_conf_id = 4;
  if (has_item_conf_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item_conf_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int top_3d_chat_room_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = top_3d_chat_room_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 item_conf_id = 4;
    if (has_item_conf_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_conf_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void top_3d_chat_room_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const top_3d_chat_room_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const top_3d_chat_room_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void top_3d_chat_room_ack::MergeFrom(const top_3d_chat_room_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_item_conf_id()) {
      set_item_conf_id(from.item_conf_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void top_3d_chat_room_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void top_3d_chat_room_ack::CopyFrom(const top_3d_chat_room_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool top_3d_chat_room_ack::IsInitialized() const {

  return true;
}

void top_3d_chat_room_ack::Swap(top_3d_chat_room_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(room_id_, other->room_id_);
    std::swap(item_conf_id_, other->item_conf_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata top_3d_chat_room_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = top_3d_chat_room_ack_descriptor_;
  metadata.reflection = top_3d_chat_room_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int change_name_3d_chat_room_req::kProtoIdFieldNumber;
const int change_name_3d_chat_room_req::kRoomIdFieldNumber;
const int change_name_3d_chat_room_req::kItemConfIdFieldNumber;
const int change_name_3d_chat_room_req::kNameFieldNumber;
#endif  // !_MSC_VER

change_name_3d_chat_room_req::change_name_3d_chat_room_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void change_name_3d_chat_room_req::InitAsDefaultInstance() {
}

change_name_3d_chat_room_req::change_name_3d_chat_room_req(const change_name_3d_chat_room_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void change_name_3d_chat_room_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7325;
  room_id_ = 0;
  item_conf_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

change_name_3d_chat_room_req::~change_name_3d_chat_room_req() {
  SharedDtor();
}

void change_name_3d_chat_room_req::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void change_name_3d_chat_room_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* change_name_3d_chat_room_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return change_name_3d_chat_room_req_descriptor_;
}

const change_name_3d_chat_room_req& change_name_3d_chat_room_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

change_name_3d_chat_room_req* change_name_3d_chat_room_req::default_instance_ = NULL;

change_name_3d_chat_room_req* change_name_3d_chat_room_req::New() const {
  return new change_name_3d_chat_room_req;
}

void change_name_3d_chat_room_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7325;
    room_id_ = 0;
    item_conf_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool change_name_3d_chat_room_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = change_name_3d_chat_room_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_conf_id;
        break;
      }

      // optional int32 item_conf_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_conf_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_conf_id_)));
          set_has_item_conf_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void change_name_3d_chat_room_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = change_name_3d_chat_room_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  // optional int32 item_conf_id = 3;
  if (has_item_conf_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_conf_id(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* change_name_3d_chat_room_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = change_name_3d_chat_room_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  // optional int32 item_conf_id = 3;
  if (has_item_conf_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_conf_id(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int change_name_3d_chat_room_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = change_name_3d_chat_room_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 item_conf_id = 3;
    if (has_item_conf_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_conf_id());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void change_name_3d_chat_room_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const change_name_3d_chat_room_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const change_name_3d_chat_room_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void change_name_3d_chat_room_req::MergeFrom(const change_name_3d_chat_room_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_item_conf_id()) {
      set_item_conf_id(from.item_conf_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void change_name_3d_chat_room_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void change_name_3d_chat_room_req::CopyFrom(const change_name_3d_chat_room_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool change_name_3d_chat_room_req::IsInitialized() const {

  return true;
}

void change_name_3d_chat_room_req::Swap(change_name_3d_chat_room_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(item_conf_id_, other->item_conf_id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata change_name_3d_chat_room_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = change_name_3d_chat_room_req_descriptor_;
  metadata.reflection = change_name_3d_chat_room_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int change_name_3d_chat_room_ack::kProtoIdFieldNumber;
const int change_name_3d_chat_room_ack::kRetFieldNumber;
const int change_name_3d_chat_room_ack::kRoomIdFieldNumber;
const int change_name_3d_chat_room_ack::kNameFieldNumber;
#endif  // !_MSC_VER

change_name_3d_chat_room_ack::change_name_3d_chat_room_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void change_name_3d_chat_room_ack::InitAsDefaultInstance() {
}

change_name_3d_chat_room_ack::change_name_3d_chat_room_ack(const change_name_3d_chat_room_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void change_name_3d_chat_room_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7326;
  ret_ = 0;
  room_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

change_name_3d_chat_room_ack::~change_name_3d_chat_room_ack() {
  SharedDtor();
}

void change_name_3d_chat_room_ack::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void change_name_3d_chat_room_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* change_name_3d_chat_room_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return change_name_3d_chat_room_ack_descriptor_;
}

const change_name_3d_chat_room_ack& change_name_3d_chat_room_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fsocial_2eproto();
  return *default_instance_;
}

change_name_3d_chat_room_ack* change_name_3d_chat_room_ack::default_instance_ = NULL;

change_name_3d_chat_room_ack* change_name_3d_chat_room_ack::New() const {
  return new change_name_3d_chat_room_ack;
}

void change_name_3d_chat_room_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7326;
    ret_ = 0;
    room_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool change_name_3d_chat_room_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = change_name_3d_chat_room_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void change_name_3d_chat_room_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = change_name_3d_chat_room_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* change_name_3d_chat_room_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = change_name_3d_chat_room_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int change_name_3d_chat_room_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = change_name_3d_chat_room_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void change_name_3d_chat_room_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const change_name_3d_chat_room_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const change_name_3d_chat_room_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void change_name_3d_chat_room_ack::MergeFrom(const change_name_3d_chat_room_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void change_name_3d_chat_room_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void change_name_3d_chat_room_ack::CopyFrom(const change_name_3d_chat_room_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool change_name_3d_chat_room_ack::IsInitialized() const {

  return true;
}

void change_name_3d_chat_room_ack::Swap(change_name_3d_chat_room_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(room_id_, other->room_id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata change_name_3d_chat_room_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = change_name_3d_chat_room_ack_descriptor_;
  metadata.reflection = change_name_3d_chat_room_ack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
