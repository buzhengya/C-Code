// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_cross.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ss_cross.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* cross_sign_in_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cross_sign_in_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* cross_sign_in_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cross_sign_in_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* cross_ft_sync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cross_ft_sync_reflection_ = NULL;
const ::google::protobuf::Descriptor* cross_ft_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cross_ft_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* cross_ft_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cross_ft_ack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ss_5fcross_2eproto() {
  protobuf_AddDesc_ss_5fcross_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ss_cross.proto");
  GOOGLE_CHECK(file != NULL);
  cross_sign_in_req_descriptor_ = file->message_type(0);
  static const int cross_sign_in_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_sign_in_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_sign_in_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_sign_in_req, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_sign_in_req, score_),
  };
  cross_sign_in_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cross_sign_in_req_descriptor_,
      cross_sign_in_req::default_instance_,
      cross_sign_in_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_sign_in_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_sign_in_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cross_sign_in_req));
  cross_sign_in_ack_descriptor_ = file->message_type(1);
  static const int cross_sign_in_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_sign_in_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_sign_in_ack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_sign_in_ack, rslt_),
  };
  cross_sign_in_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cross_sign_in_ack_descriptor_,
      cross_sign_in_ack::default_instance_,
      cross_sign_in_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_sign_in_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_sign_in_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cross_sign_in_ack));
  cross_ft_sync_descriptor_ = file->message_type(2);
  static const int cross_ft_sync_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_ft_sync, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_ft_sync, ft_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_ft_sync, data_),
  };
  cross_ft_sync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cross_ft_sync_descriptor_,
      cross_ft_sync::default_instance_,
      cross_ft_sync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_ft_sync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_ft_sync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cross_ft_sync));
  cross_ft_req_descriptor_ = file->message_type(3);
  static const int cross_ft_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_ft_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_ft_req, data_),
  };
  cross_ft_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cross_ft_req_descriptor_,
      cross_ft_req::default_instance_,
      cross_ft_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_ft_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_ft_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cross_ft_req));
  cross_ft_ack_descriptor_ = file->message_type(4);
  static const int cross_ft_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_ft_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_ft_ack, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_ft_ack, rslt_),
  };
  cross_ft_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cross_ft_ack_descriptor_,
      cross_ft_ack::default_instance_,
      cross_ft_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_ft_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cross_ft_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cross_ft_ack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ss_5fcross_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cross_sign_in_req_descriptor_, &cross_sign_in_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cross_sign_in_ack_descriptor_, &cross_sign_in_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cross_ft_sync_descriptor_, &cross_ft_sync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cross_ft_req_descriptor_, &cross_ft_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cross_ft_ack_descriptor_, &cross_ft_ack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ss_5fcross_2eproto() {
  delete cross_sign_in_req::default_instance_;
  delete cross_sign_in_req_reflection_;
  delete cross_sign_in_ack::default_instance_;
  delete cross_sign_in_ack_reflection_;
  delete cross_ft_sync::default_instance_;
  delete cross_ft_sync_reflection_;
  delete cross_ft_req::default_instance_;
  delete cross_ft_req_reflection_;
  delete cross_ft_ack::default_instance_;
  delete cross_ft_ack_reflection_;
}

void protobuf_AddDesc_ss_5fcross_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SProtoSpace::protobuf_AddDesc_ss_5fprotoid_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5fbattletype_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ss_cross.proto\022\013SProtoSpace\032\020ss_protoi"
    "d.proto\032\023cm_battletype.proto\"\271\001\n\021cross_s"
    "ign_in_req\022>\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ESSProtoID:\024cross_sign_in_req_id\022&\n\004ty"
    "pe\030\002 \001(\0162\030.SProtoSpace.EBattleType\022-\n\004da"
    "ta\030\003 \001(\0132\037.SProtoSpace.battle_player_inf"
    "o\022\r\n\005score\030\004 \001(\004\"\211\001\n\021cross_sign_in_ack\022>"
    "\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID"
    ":\024cross_sign_in_ack_id\022&\n\004type\030\002 \001(\0162\030.S"
    "ProtoSpace.EBattleType\022\014\n\004rslt\030\003 \001(\005\"\211\001\n"
    "\rcross_ft_sync\022:\n\007protoid\030\001 \001(\0162\027.SProto"
    "Space.ESSProtoID:\020cross_ft_sync_id\022\r\n\005ft"
    "_id\030\002 \001(\004\022-\n\004data\030\003 \003(\0132\037.SProtoSpace.cr"
    "eate_battle_data\"x\n\014cross_ft_req\0229\n\007prot"
    "oid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\017cros"
    "s_ft_req_id\022-\n\004data\030\002 \001(\0132\037.SProtoSpace."
    "create_battle_data\"\206\001\n\014cross_ft_ack\0229\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\017c"
    "ross_ft_ack_id\022-\n\004data\030\002 \001(\0132\037.SProtoSpa"
    "ce.create_battle_data\022\014\n\004rslt\030\003 \001(\005", 795);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ss_cross.proto", &protobuf_RegisterTypes);
  cross_sign_in_req::default_instance_ = new cross_sign_in_req();
  cross_sign_in_ack::default_instance_ = new cross_sign_in_ack();
  cross_ft_sync::default_instance_ = new cross_ft_sync();
  cross_ft_req::default_instance_ = new cross_ft_req();
  cross_ft_ack::default_instance_ = new cross_ft_ack();
  cross_sign_in_req::default_instance_->InitAsDefaultInstance();
  cross_sign_in_ack::default_instance_->InitAsDefaultInstance();
  cross_ft_sync::default_instance_->InitAsDefaultInstance();
  cross_ft_req::default_instance_->InitAsDefaultInstance();
  cross_ft_ack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ss_5fcross_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ss_5fcross_2eproto {
  StaticDescriptorInitializer_ss_5fcross_2eproto() {
    protobuf_AddDesc_ss_5fcross_2eproto();
  }
} static_descriptor_initializer_ss_5fcross_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int cross_sign_in_req::kProtoidFieldNumber;
const int cross_sign_in_req::kTypeFieldNumber;
const int cross_sign_in_req::kDataFieldNumber;
const int cross_sign_in_req::kScoreFieldNumber;
#endif  // !_MSC_VER

cross_sign_in_req::cross_sign_in_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cross_sign_in_req::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::battle_player_info*>(&::SProtoSpace::battle_player_info::default_instance());
}

cross_sign_in_req::cross_sign_in_req(const cross_sign_in_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cross_sign_in_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 500;
  type_ = 1;
  data_ = NULL;
  score_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cross_sign_in_req::~cross_sign_in_req() {
  SharedDtor();
}

void cross_sign_in_req::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void cross_sign_in_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cross_sign_in_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cross_sign_in_req_descriptor_;
}

const cross_sign_in_req& cross_sign_in_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcross_2eproto();
  return *default_instance_;
}

cross_sign_in_req* cross_sign_in_req::default_instance_ = NULL;

cross_sign_in_req* cross_sign_in_req::New() const {
  return new cross_sign_in_req;
}

void cross_sign_in_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 500;
    type_ = 1;
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::battle_player_info::Clear();
    }
    score_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cross_sign_in_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_sign_in_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.EBattleType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EBattleType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EBattleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.battle_player_info data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional uint64 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cross_sign_in_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_sign_in_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.EBattleType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .SProtoSpace.battle_player_info data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  // optional uint64 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cross_sign_in_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_sign_in_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.EBattleType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .SProtoSpace.battle_player_info data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  // optional uint64 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cross_sign_in_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_sign_in_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.EBattleType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .SProtoSpace.battle_player_info data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional uint64 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cross_sign_in_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cross_sign_in_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cross_sign_in_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cross_sign_in_req::MergeFrom(const cross_sign_in_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::battle_player_info::MergeFrom(from.data());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cross_sign_in_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cross_sign_in_req::CopyFrom(const cross_sign_in_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cross_sign_in_req::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void cross_sign_in_req::Swap(cross_sign_in_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cross_sign_in_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cross_sign_in_req_descriptor_;
  metadata.reflection = cross_sign_in_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cross_sign_in_ack::kProtoidFieldNumber;
const int cross_sign_in_ack::kTypeFieldNumber;
const int cross_sign_in_ack::kRsltFieldNumber;
#endif  // !_MSC_VER

cross_sign_in_ack::cross_sign_in_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cross_sign_in_ack::InitAsDefaultInstance() {
}

cross_sign_in_ack::cross_sign_in_ack(const cross_sign_in_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cross_sign_in_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 501;
  type_ = 1;
  rslt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cross_sign_in_ack::~cross_sign_in_ack() {
  SharedDtor();
}

void cross_sign_in_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cross_sign_in_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cross_sign_in_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cross_sign_in_ack_descriptor_;
}

const cross_sign_in_ack& cross_sign_in_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcross_2eproto();
  return *default_instance_;
}

cross_sign_in_ack* cross_sign_in_ack::default_instance_ = NULL;

cross_sign_in_ack* cross_sign_in_ack::New() const {
  return new cross_sign_in_ack;
}

void cross_sign_in_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 501;
    type_ = 1;
    rslt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cross_sign_in_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_sign_in_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.EBattleType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EBattleType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EBattleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rslt;
        break;
      }

      // optional int32 rslt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rslt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rslt_)));
          set_has_rslt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cross_sign_in_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_sign_in_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.EBattleType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 rslt = 3;
  if (has_rslt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rslt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cross_sign_in_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_sign_in_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.EBattleType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 rslt = 3;
  if (has_rslt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rslt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cross_sign_in_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_sign_in_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.EBattleType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 rslt = 3;
    if (has_rslt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rslt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cross_sign_in_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cross_sign_in_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cross_sign_in_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cross_sign_in_ack::MergeFrom(const cross_sign_in_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_rslt()) {
      set_rslt(from.rslt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cross_sign_in_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cross_sign_in_ack::CopyFrom(const cross_sign_in_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cross_sign_in_ack::IsInitialized() const {

  return true;
}

void cross_sign_in_ack::Swap(cross_sign_in_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(type_, other->type_);
    std::swap(rslt_, other->rslt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cross_sign_in_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cross_sign_in_ack_descriptor_;
  metadata.reflection = cross_sign_in_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cross_ft_sync::kProtoidFieldNumber;
const int cross_ft_sync::kFtIdFieldNumber;
const int cross_ft_sync::kDataFieldNumber;
#endif  // !_MSC_VER

cross_ft_sync::cross_ft_sync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cross_ft_sync::InitAsDefaultInstance() {
}

cross_ft_sync::cross_ft_sync(const cross_ft_sync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cross_ft_sync::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 502;
  ft_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cross_ft_sync::~cross_ft_sync() {
  SharedDtor();
}

void cross_ft_sync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cross_ft_sync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cross_ft_sync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cross_ft_sync_descriptor_;
}

const cross_ft_sync& cross_ft_sync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcross_2eproto();
  return *default_instance_;
}

cross_ft_sync* cross_ft_sync::default_instance_ = NULL;

cross_ft_sync* cross_ft_sync::New() const {
  return new cross_ft_sync;
}

void cross_ft_sync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 502;
    ft_id_ = GOOGLE_ULONGLONG(0);
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cross_ft_sync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_ft_sync_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ft_id;
        break;
      }

      // optional uint64 ft_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ft_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ft_id_)));
          set_has_ft_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .SProtoSpace.create_battle_data data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cross_ft_sync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_ft_sync_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 ft_id = 2;
  if (has_ft_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ft_id(), output);
  }

  // repeated .SProtoSpace.create_battle_data data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cross_ft_sync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_ft_sync_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 ft_id = 2;
  if (has_ft_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ft_id(), target);
  }

  // repeated .SProtoSpace.create_battle_data data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cross_ft_sync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_ft_sync_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 ft_id = 2;
    if (has_ft_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ft_id());
    }

  }
  // repeated .SProtoSpace.create_battle_data data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cross_ft_sync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cross_ft_sync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cross_ft_sync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cross_ft_sync::MergeFrom(const cross_ft_sync& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ft_id()) {
      set_ft_id(from.ft_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cross_ft_sync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cross_ft_sync::CopyFrom(const cross_ft_sync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cross_ft_sync::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void cross_ft_sync::Swap(cross_ft_sync* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ft_id_, other->ft_id_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cross_ft_sync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cross_ft_sync_descriptor_;
  metadata.reflection = cross_ft_sync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cross_ft_req::kProtoidFieldNumber;
const int cross_ft_req::kDataFieldNumber;
#endif  // !_MSC_VER

cross_ft_req::cross_ft_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cross_ft_req::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::create_battle_data*>(&::SProtoSpace::create_battle_data::default_instance());
}

cross_ft_req::cross_ft_req(const cross_ft_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cross_ft_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 503;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cross_ft_req::~cross_ft_req() {
  SharedDtor();
}

void cross_ft_req::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void cross_ft_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cross_ft_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cross_ft_req_descriptor_;
}

const cross_ft_req& cross_ft_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcross_2eproto();
  return *default_instance_;
}

cross_ft_req* cross_ft_req::default_instance_ = NULL;

cross_ft_req* cross_ft_req::New() const {
  return new cross_ft_req;
}

void cross_ft_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 503;
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::create_battle_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cross_ft_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_ft_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.create_battle_data data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cross_ft_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_ft_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.create_battle_data data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cross_ft_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_ft_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.create_battle_data data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cross_ft_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_ft_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.create_battle_data data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cross_ft_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cross_ft_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cross_ft_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cross_ft_req::MergeFrom(const cross_ft_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::create_battle_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cross_ft_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cross_ft_req::CopyFrom(const cross_ft_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cross_ft_req::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void cross_ft_req::Swap(cross_ft_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cross_ft_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cross_ft_req_descriptor_;
  metadata.reflection = cross_ft_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cross_ft_ack::kProtoidFieldNumber;
const int cross_ft_ack::kDataFieldNumber;
const int cross_ft_ack::kRsltFieldNumber;
#endif  // !_MSC_VER

cross_ft_ack::cross_ft_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cross_ft_ack::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::create_battle_data*>(&::SProtoSpace::create_battle_data::default_instance());
}

cross_ft_ack::cross_ft_ack(const cross_ft_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cross_ft_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 504;
  data_ = NULL;
  rslt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cross_ft_ack::~cross_ft_ack() {
  SharedDtor();
}

void cross_ft_ack::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void cross_ft_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cross_ft_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cross_ft_ack_descriptor_;
}

const cross_ft_ack& cross_ft_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fcross_2eproto();
  return *default_instance_;
}

cross_ft_ack* cross_ft_ack::default_instance_ = NULL;

cross_ft_ack* cross_ft_ack::New() const {
  return new cross_ft_ack;
}

void cross_ft_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 504;
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::create_battle_data::Clear();
    }
    rslt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cross_ft_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_ft_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.create_battle_data data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rslt;
        break;
      }

      // optional int32 rslt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rslt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rslt_)));
          set_has_rslt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cross_ft_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_ft_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.create_battle_data data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  // optional int32 rslt = 3;
  if (has_rslt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rslt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cross_ft_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_ft_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.create_battle_data data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  // optional int32 rslt = 3;
  if (has_rslt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rslt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cross_ft_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = cross_ft_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.create_battle_data data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional int32 rslt = 3;
    if (has_rslt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rslt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cross_ft_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cross_ft_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cross_ft_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cross_ft_ack::MergeFrom(const cross_ft_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::create_battle_data::MergeFrom(from.data());
    }
    if (from.has_rslt()) {
      set_rslt(from.rslt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cross_ft_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cross_ft_ack::CopyFrom(const cross_ft_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cross_ft_ack::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void cross_ft_ack::Swap(cross_ft_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(data_, other->data_);
    std::swap(rslt_, other->rslt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cross_ft_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cross_ft_ack_descriptor_;
  metadata.reflection = cross_ft_ack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
