// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_mail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ss_mail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* mail_role_enter_game_get_mail_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_role_enter_game_get_mail_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_role_enter_game_get_mail_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_role_enter_game_get_mail_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_one_role_mail_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_one_role_mail_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_multi_role_mail_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_multi_role_mail_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_role_set_multi_mail_status_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_role_set_multi_mail_status_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_role_del_multi_mail_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_role_del_multi_mail_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_role_del_multi_mail_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_role_del_multi_mail_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_role_del_multi_mail_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_role_del_multi_mail_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_send_all_type_mail_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_send_all_type_mail_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_send_all_type_mail_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_send_all_type_mail_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_get_game_all_role_ids_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_get_game_all_role_ids_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_get_game_all_role_ids_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_get_game_all_role_ids_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_svr_pressure_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_svr_pressure_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* del_ss_mul_mails_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  del_ss_mul_mails_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* del_ss_mul_mails_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  del_ss_mul_mails_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* sync_ss_mul_mails_state_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sync_ss_mul_mails_state_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* sync_ss_mul_mails_state_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sync_ss_mul_mails_state_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_mails_ss_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_mails_ss_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_mails_ss_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_mails_ss_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* gen_mails_ss_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gen_mails_ss_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gen_mails_ss_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gen_mails_ss_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* send_mail_ss_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  send_mail_ss_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* send_mail_ss_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  send_mail_ss_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* recv_mail_ss_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  recv_mail_ss_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_add_template_ss_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_add_template_ss_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_add_template_ss_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_add_template_ss_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_add_template_ss_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_add_template_ss_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_new_template_ss_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_new_template_ss_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_red_pt_ss_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_red_pt_ss_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_red_pt_ss_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_red_pt_ss_ack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* eMailAddTemplateType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ss_5fmail_2eproto() {
  protobuf_AddDesc_ss_5fmail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ss_mail.proto");
  GOOGLE_CHECK(file != NULL);
  mail_role_enter_game_get_mail_req_descriptor_ = file->message_type(0);
  static const int mail_role_enter_game_get_mail_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_enter_game_get_mail_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_enter_game_get_mail_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_enter_game_get_mail_req, role_mail_time_point_),
  };
  mail_role_enter_game_get_mail_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_role_enter_game_get_mail_req_descriptor_,
      mail_role_enter_game_get_mail_req::default_instance_,
      mail_role_enter_game_get_mail_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_enter_game_get_mail_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_enter_game_get_mail_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_role_enter_game_get_mail_req));
  mail_role_enter_game_get_mail_ack_descriptor_ = file->message_type(1);
  static const int mail_role_enter_game_get_mail_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_enter_game_get_mail_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_enter_game_get_mail_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_enter_game_get_mail_ack, role_mail_time_point_),
  };
  mail_role_enter_game_get_mail_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_role_enter_game_get_mail_ack_descriptor_,
      mail_role_enter_game_get_mail_ack::default_instance_,
      mail_role_enter_game_get_mail_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_enter_game_get_mail_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_enter_game_get_mail_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_role_enter_game_get_mail_ack));
  mail_one_role_mail_ntf_descriptor_ = file->message_type(2);
  static const int mail_one_role_mail_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_one_role_mail_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_one_role_mail_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_one_role_mail_ntf, mails_),
  };
  mail_one_role_mail_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_one_role_mail_ntf_descriptor_,
      mail_one_role_mail_ntf::default_instance_,
      mail_one_role_mail_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_one_role_mail_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_one_role_mail_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_one_role_mail_ntf));
  mail_multi_role_mail_ntf_descriptor_ = file->message_type(3);
  static const int mail_multi_role_mail_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_multi_role_mail_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_multi_role_mail_ntf, mails_),
  };
  mail_multi_role_mail_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_multi_role_mail_ntf_descriptor_,
      mail_multi_role_mail_ntf::default_instance_,
      mail_multi_role_mail_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_multi_role_mail_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_multi_role_mail_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_multi_role_mail_ntf));
  mail_role_set_multi_mail_status_ntf_descriptor_ = file->message_type(4);
  static const int mail_role_set_multi_mail_status_ntf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_set_multi_mail_status_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_set_multi_mail_status_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_set_multi_mail_status_ntf, mail_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_set_multi_mail_status_ntf, to_set_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_set_multi_mail_status_ntf, to_set_attach_getted_),
  };
  mail_role_set_multi_mail_status_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_role_set_multi_mail_status_ntf_descriptor_,
      mail_role_set_multi_mail_status_ntf::default_instance_,
      mail_role_set_multi_mail_status_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_set_multi_mail_status_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_set_multi_mail_status_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_role_set_multi_mail_status_ntf));
  mail_role_del_multi_mail_ntf_descriptor_ = file->message_type(5);
  static const int mail_role_del_multi_mail_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_del_multi_mail_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_del_multi_mail_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_del_multi_mail_ntf, mail_ids_),
  };
  mail_role_del_multi_mail_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_role_del_multi_mail_ntf_descriptor_,
      mail_role_del_multi_mail_ntf::default_instance_,
      mail_role_del_multi_mail_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_del_multi_mail_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_del_multi_mail_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_role_del_multi_mail_ntf));
  mail_role_del_multi_mail_req_descriptor_ = file->message_type(6);
  static const int mail_role_del_multi_mail_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_del_multi_mail_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_del_multi_mail_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_del_multi_mail_req, mail_ids_),
  };
  mail_role_del_multi_mail_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_role_del_multi_mail_req_descriptor_,
      mail_role_del_multi_mail_req::default_instance_,
      mail_role_del_multi_mail_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_del_multi_mail_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_del_multi_mail_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_role_del_multi_mail_req));
  mail_role_del_multi_mail_ack_descriptor_ = file->message_type(7);
  static const int mail_role_del_multi_mail_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_del_multi_mail_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_del_multi_mail_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_del_multi_mail_ack, suceed_mail_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_del_multi_mail_ack, failed_mail_ids_),
  };
  mail_role_del_multi_mail_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_role_del_multi_mail_ack_descriptor_,
      mail_role_del_multi_mail_ack::default_instance_,
      mail_role_del_multi_mail_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_del_multi_mail_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_role_del_multi_mail_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_role_del_multi_mail_ack));
  mail_send_all_type_mail_req_descriptor_ = file->message_type(8);
  static const int mail_send_all_type_mail_req_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_req, private_mails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_req, to_role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_req, game_session_back_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_req, global_mail_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_req, group_mail_to_role_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_req, group_mail_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_req, family_mail_family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_req, family_mail_config_id_),
  };
  mail_send_all_type_mail_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_send_all_type_mail_req_descriptor_,
      mail_send_all_type_mail_req::default_instance_,
      mail_send_all_type_mail_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_send_all_type_mail_req));
  mail_send_all_type_mail_ack_descriptor_ = file->message_type(9);
  static const int mail_send_all_type_mail_ack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_ack, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_ack, rec_code_private_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_ack, rec_code_global_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_ack, rec_code_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_ack, rec_code_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_ack, from_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_ack, suceed_mails_),
  };
  mail_send_all_type_mail_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_send_all_type_mail_ack_descriptor_,
      mail_send_all_type_mail_ack::default_instance_,
      mail_send_all_type_mail_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_all_type_mail_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_send_all_type_mail_ack));
  mail_get_game_all_role_ids_req_descriptor_ = file->message_type(10);
  static const int mail_get_game_all_role_ids_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_get_game_all_role_ids_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_get_game_all_role_ids_req, mail_template_id_),
  };
  mail_get_game_all_role_ids_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_get_game_all_role_ids_req_descriptor_,
      mail_get_game_all_role_ids_req::default_instance_,
      mail_get_game_all_role_ids_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_get_game_all_role_ids_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_get_game_all_role_ids_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_get_game_all_role_ids_req));
  mail_get_game_all_role_ids_ack_descriptor_ = file->message_type(11);
  static const int mail_get_game_all_role_ids_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_get_game_all_role_ids_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_get_game_all_role_ids_ack, role_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_get_game_all_role_ids_ack, mail_template_id_),
  };
  mail_get_game_all_role_ids_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_get_game_all_role_ids_ack_descriptor_,
      mail_get_game_all_role_ids_ack::default_instance_,
      mail_get_game_all_role_ids_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_get_game_all_role_ids_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_get_game_all_role_ids_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_get_game_all_role_ids_ack));
  mail_svr_pressure_ntf_descriptor_ = file->message_type(12);
  static const int mail_svr_pressure_ntf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_svr_pressure_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_svr_pressure_ntf, sql_pre_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_svr_pressure_ntf, sql_run_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_svr_pressure_ntf, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_svr_pressure_ntf, mail_count_),
  };
  mail_svr_pressure_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_svr_pressure_ntf_descriptor_,
      mail_svr_pressure_ntf::default_instance_,
      mail_svr_pressure_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_svr_pressure_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_svr_pressure_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_svr_pressure_ntf));
  del_ss_mul_mails_req_descriptor_ = file->message_type(13);
  static const int del_ss_mul_mails_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_ss_mul_mails_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_ss_mul_mails_req, mail_id_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_ss_mul_mails_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_ss_mul_mails_req, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_ss_mul_mails_req, server_side_opt_),
  };
  del_ss_mul_mails_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      del_ss_mul_mails_req_descriptor_,
      del_ss_mul_mails_req::default_instance_,
      del_ss_mul_mails_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_ss_mul_mails_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_ss_mul_mails_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(del_ss_mul_mails_req));
  del_ss_mul_mails_ack_descriptor_ = file->message_type(14);
  static const int del_ss_mul_mails_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_ss_mul_mails_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_ss_mul_mails_ack, mail_id_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_ss_mul_mails_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_ss_mul_mails_ack, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_ss_mul_mails_ack, server_side_opt_),
  };
  del_ss_mul_mails_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      del_ss_mul_mails_ack_descriptor_,
      del_ss_mul_mails_ack::default_instance_,
      del_ss_mul_mails_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_ss_mul_mails_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_ss_mul_mails_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(del_ss_mul_mails_ack));
  sync_ss_mul_mails_state_req_descriptor_ = file->message_type(15);
  static const int sync_ss_mul_mails_state_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_ss_mul_mails_state_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_ss_mul_mails_state_req, mail_id_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_ss_mul_mails_state_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_ss_mul_mails_state_req, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_ss_mul_mails_state_req, read_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_ss_mul_mails_state_req, get_attach_state_),
  };
  sync_ss_mul_mails_state_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sync_ss_mul_mails_state_req_descriptor_,
      sync_ss_mul_mails_state_req::default_instance_,
      sync_ss_mul_mails_state_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_ss_mul_mails_state_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_ss_mul_mails_state_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sync_ss_mul_mails_state_req));
  sync_ss_mul_mails_state_ack_descriptor_ = file->message_type(16);
  static const int sync_ss_mul_mails_state_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_ss_mul_mails_state_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_ss_mul_mails_state_ack, mail_id_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_ss_mul_mails_state_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_ss_mul_mails_state_ack, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_ss_mul_mails_state_ack, read_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_ss_mul_mails_state_ack, get_attach_state_),
  };
  sync_ss_mul_mails_state_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sync_ss_mul_mails_state_ack_descriptor_,
      sync_ss_mul_mails_state_ack::default_instance_,
      sync_ss_mul_mails_state_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_ss_mul_mails_state_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_ss_mul_mails_state_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sync_ss_mul_mails_state_ack));
  get_mails_ss_req_descriptor_ = file->message_type(17);
  static const int get_mails_ss_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mails_ss_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mails_ss_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mails_ss_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mails_ss_req, game_id_),
  };
  get_mails_ss_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_mails_ss_req_descriptor_,
      get_mails_ss_req::default_instance_,
      get_mails_ss_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mails_ss_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mails_ss_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_mails_ss_req));
  get_mails_ss_ack_descriptor_ = file->message_type(18);
  static const int get_mails_ss_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mails_ss_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mails_ss_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mails_ss_ack, time_),
  };
  get_mails_ss_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_mails_ss_ack_descriptor_,
      get_mails_ss_ack::default_instance_,
      get_mails_ss_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mails_ss_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_mails_ss_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_mails_ss_ack));
  gen_mails_ss_req_descriptor_ = file->message_type(19);
  static const int gen_mails_ss_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gen_mails_ss_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gen_mails_ss_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gen_mails_ss_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gen_mails_ss_req, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gen_mails_ss_req, max_id_),
  };
  gen_mails_ss_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gen_mails_ss_req_descriptor_,
      gen_mails_ss_req::default_instance_,
      gen_mails_ss_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gen_mails_ss_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gen_mails_ss_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gen_mails_ss_req));
  gen_mails_ss_ack_descriptor_ = file->message_type(20);
  static const int gen_mails_ss_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gen_mails_ss_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gen_mails_ss_ack, mails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gen_mails_ss_ack, role_id_),
  };
  gen_mails_ss_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gen_mails_ss_ack_descriptor_,
      gen_mails_ss_ack::default_instance_,
      gen_mails_ss_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gen_mails_ss_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gen_mails_ss_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gen_mails_ss_ack));
  send_mail_ss_req_descriptor_ = file->message_type(21);
  static const int send_mail_ss_req_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_ss_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_ss_req, mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_ss_req, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_ss_req, to_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_ss_req, to_role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_ss_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_ss_req, send_back_),
  };
  send_mail_ss_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      send_mail_ss_req_descriptor_,
      send_mail_ss_req::default_instance_,
      send_mail_ss_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_ss_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_ss_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(send_mail_ss_req));
  send_mail_ss_ack_descriptor_ = file->message_type(22);
  static const int send_mail_ss_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_ss_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_ss_ack, mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_ss_ack, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_ss_ack, error_),
  };
  send_mail_ss_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      send_mail_ss_ack_descriptor_,
      send_mail_ss_ack::default_instance_,
      send_mail_ss_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_ss_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_ss_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(send_mail_ss_ack));
  recv_mail_ss_ntf_descriptor_ = file->message_type(23);
  static const int recv_mail_ss_ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recv_mail_ss_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recv_mail_ss_ntf, mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recv_mail_ss_ntf, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recv_mail_ss_ntf, error_),
  };
  recv_mail_ss_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      recv_mail_ss_ntf_descriptor_,
      recv_mail_ss_ntf::default_instance_,
      recv_mail_ss_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recv_mail_ss_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recv_mail_ss_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(recv_mail_ss_ntf));
  mail_add_template_ss_req_descriptor_ = file->message_type(24);
  static const int mail_add_template_ss_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_add_template_ss_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_add_template_ss_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_add_template_ss_req, template__),
  };
  mail_add_template_ss_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_add_template_ss_req_descriptor_,
      mail_add_template_ss_req::default_instance_,
      mail_add_template_ss_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_add_template_ss_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_add_template_ss_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_add_template_ss_req));
  mail_add_template_ss_ack_descriptor_ = file->message_type(25);
  static const int mail_add_template_ss_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_add_template_ss_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_add_template_ss_ack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_add_template_ss_ack, template__),
  };
  mail_add_template_ss_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_add_template_ss_ack_descriptor_,
      mail_add_template_ss_ack::default_instance_,
      mail_add_template_ss_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_add_template_ss_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_add_template_ss_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_add_template_ss_ack));
  mail_add_template_ss_ntf_descriptor_ = file->message_type(26);
  static const int mail_add_template_ss_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_add_template_ss_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_add_template_ss_ntf, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_add_template_ss_ntf, template__),
  };
  mail_add_template_ss_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_add_template_ss_ntf_descriptor_,
      mail_add_template_ss_ntf::default_instance_,
      mail_add_template_ss_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_add_template_ss_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_add_template_ss_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_add_template_ss_ntf));
  mail_new_template_ss_ntf_descriptor_ = file->message_type(27);
  static const int mail_new_template_ss_ntf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_new_template_ss_ntf, protoid_),
  };
  mail_new_template_ss_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_new_template_ss_ntf_descriptor_,
      mail_new_template_ss_ntf::default_instance_,
      mail_new_template_ss_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_new_template_ss_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_new_template_ss_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_new_template_ss_ntf));
  mail_red_pt_ss_req_descriptor_ = file->message_type(28);
  static const int mail_red_pt_ss_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_red_pt_ss_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_red_pt_ss_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_red_pt_ss_req, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_red_pt_ss_req, mail_g_template_),
  };
  mail_red_pt_ss_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_red_pt_ss_req_descriptor_,
      mail_red_pt_ss_req::default_instance_,
      mail_red_pt_ss_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_red_pt_ss_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_red_pt_ss_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_red_pt_ss_req));
  mail_red_pt_ss_ack_descriptor_ = file->message_type(29);
  static const int mail_red_pt_ss_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_red_pt_ss_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_red_pt_ss_ack, role_id_),
  };
  mail_red_pt_ss_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_red_pt_ss_ack_descriptor_,
      mail_red_pt_ss_ack::default_instance_,
      mail_red_pt_ss_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_red_pt_ss_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_red_pt_ss_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_red_pt_ss_ack));
  eMailAddTemplateType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ss_5fmail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_role_enter_game_get_mail_req_descriptor_, &mail_role_enter_game_get_mail_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_role_enter_game_get_mail_ack_descriptor_, &mail_role_enter_game_get_mail_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_one_role_mail_ntf_descriptor_, &mail_one_role_mail_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_multi_role_mail_ntf_descriptor_, &mail_multi_role_mail_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_role_set_multi_mail_status_ntf_descriptor_, &mail_role_set_multi_mail_status_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_role_del_multi_mail_ntf_descriptor_, &mail_role_del_multi_mail_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_role_del_multi_mail_req_descriptor_, &mail_role_del_multi_mail_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_role_del_multi_mail_ack_descriptor_, &mail_role_del_multi_mail_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_send_all_type_mail_req_descriptor_, &mail_send_all_type_mail_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_send_all_type_mail_ack_descriptor_, &mail_send_all_type_mail_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_get_game_all_role_ids_req_descriptor_, &mail_get_game_all_role_ids_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_get_game_all_role_ids_ack_descriptor_, &mail_get_game_all_role_ids_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_svr_pressure_ntf_descriptor_, &mail_svr_pressure_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    del_ss_mul_mails_req_descriptor_, &del_ss_mul_mails_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    del_ss_mul_mails_ack_descriptor_, &del_ss_mul_mails_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sync_ss_mul_mails_state_req_descriptor_, &sync_ss_mul_mails_state_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sync_ss_mul_mails_state_ack_descriptor_, &sync_ss_mul_mails_state_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_mails_ss_req_descriptor_, &get_mails_ss_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_mails_ss_ack_descriptor_, &get_mails_ss_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gen_mails_ss_req_descriptor_, &gen_mails_ss_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gen_mails_ss_ack_descriptor_, &gen_mails_ss_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    send_mail_ss_req_descriptor_, &send_mail_ss_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    send_mail_ss_ack_descriptor_, &send_mail_ss_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    recv_mail_ss_ntf_descriptor_, &recv_mail_ss_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_add_template_ss_req_descriptor_, &mail_add_template_ss_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_add_template_ss_ack_descriptor_, &mail_add_template_ss_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_add_template_ss_ntf_descriptor_, &mail_add_template_ss_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_new_template_ss_ntf_descriptor_, &mail_new_template_ss_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_red_pt_ss_req_descriptor_, &mail_red_pt_ss_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_red_pt_ss_ack_descriptor_, &mail_red_pt_ss_ack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ss_5fmail_2eproto() {
  delete mail_role_enter_game_get_mail_req::default_instance_;
  delete mail_role_enter_game_get_mail_req_reflection_;
  delete mail_role_enter_game_get_mail_ack::default_instance_;
  delete mail_role_enter_game_get_mail_ack_reflection_;
  delete mail_one_role_mail_ntf::default_instance_;
  delete mail_one_role_mail_ntf_reflection_;
  delete mail_multi_role_mail_ntf::default_instance_;
  delete mail_multi_role_mail_ntf_reflection_;
  delete mail_role_set_multi_mail_status_ntf::default_instance_;
  delete mail_role_set_multi_mail_status_ntf_reflection_;
  delete mail_role_del_multi_mail_ntf::default_instance_;
  delete mail_role_del_multi_mail_ntf_reflection_;
  delete mail_role_del_multi_mail_req::default_instance_;
  delete mail_role_del_multi_mail_req_reflection_;
  delete mail_role_del_multi_mail_ack::default_instance_;
  delete mail_role_del_multi_mail_ack_reflection_;
  delete mail_send_all_type_mail_req::default_instance_;
  delete mail_send_all_type_mail_req_reflection_;
  delete mail_send_all_type_mail_ack::default_instance_;
  delete mail_send_all_type_mail_ack_reflection_;
  delete mail_get_game_all_role_ids_req::default_instance_;
  delete mail_get_game_all_role_ids_req_reflection_;
  delete mail_get_game_all_role_ids_ack::default_instance_;
  delete mail_get_game_all_role_ids_ack_reflection_;
  delete mail_svr_pressure_ntf::default_instance_;
  delete mail_svr_pressure_ntf_reflection_;
  delete del_ss_mul_mails_req::default_instance_;
  delete del_ss_mul_mails_req_reflection_;
  delete del_ss_mul_mails_ack::default_instance_;
  delete del_ss_mul_mails_ack_reflection_;
  delete sync_ss_mul_mails_state_req::default_instance_;
  delete sync_ss_mul_mails_state_req_reflection_;
  delete sync_ss_mul_mails_state_ack::default_instance_;
  delete sync_ss_mul_mails_state_ack_reflection_;
  delete get_mails_ss_req::default_instance_;
  delete get_mails_ss_req_reflection_;
  delete get_mails_ss_ack::default_instance_;
  delete get_mails_ss_ack_reflection_;
  delete gen_mails_ss_req::default_instance_;
  delete gen_mails_ss_req_reflection_;
  delete gen_mails_ss_ack::default_instance_;
  delete gen_mails_ss_ack_reflection_;
  delete send_mail_ss_req::default_instance_;
  delete send_mail_ss_req_reflection_;
  delete send_mail_ss_ack::default_instance_;
  delete send_mail_ss_ack_reflection_;
  delete recv_mail_ss_ntf::default_instance_;
  delete recv_mail_ss_ntf_reflection_;
  delete mail_add_template_ss_req::default_instance_;
  delete mail_add_template_ss_req_reflection_;
  delete mail_add_template_ss_ack::default_instance_;
  delete mail_add_template_ss_ack_reflection_;
  delete mail_add_template_ss_ntf::default_instance_;
  delete mail_add_template_ss_ntf_reflection_;
  delete mail_new_template_ss_ntf::default_instance_;
  delete mail_new_template_ss_ntf_reflection_;
  delete mail_red_pt_ss_req::default_instance_;
  delete mail_red_pt_ss_req_reflection_;
  delete mail_red_pt_ss_ack::default_instance_;
  delete mail_red_pt_ss_ack_reflection_;
}

void protobuf_AddDesc_ss_5fmail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SProtoSpace::protobuf_AddDesc_ss_5fprotoid_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5froletype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cs_5ferrorcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rss_mail.proto\022\013SProtoSpace\032\020ss_protoid"
    ".proto\032\021cm_roletype.proto\032\022cs_errorcode."
    "proto\"\242\001\n!mail_role_enter_game_get_mail_"
    "req\022N\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSPr"
    "otoID:$mail_role_enter_game_get_mail_req"
    "_id\022\017\n\007role_id\030\002 \001(\004\022\034\n\024role_mail_time_p"
    "oint\030\003 \001(\004\"\242\001\n!mail_role_enter_game_get_"
    "mail_ack\022N\n\007protoid\030\001 \001(\0162\027.SProtoSpace."
    "ESSProtoID:$mail_role_enter_game_get_mai"
    "l_ack_id\022\017\n\007role_id\030\002 \001(\004\022\034\n\024role_mail_t"
    "ime_point\030\003 \001(\004\"\231\001\n\026mail_one_role_mail_n"
    "tf\022C\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSPro"
    "toID:\031mail_one_role_mail_ntf_id\022\017\n\007role_"
    "id\030\002 \001(\004\022)\n\005mails\030\003 \003(\0132\032.SProtoSpace.ma"
    "il_instance\"\214\001\n\030mail_multi_role_mail_ntf"
    "\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProto"
    "ID:\033mail_multi_role_mail_ntf_id\022)\n\005mails"
    "\030\002 \003(\0132\032.SProtoSpace.mail_instance\"\315\001\n#m"
    "ail_role_set_multi_mail_status_ntf\022P\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:&ma"
    "il_role_set_multi_mail_status_ntf_id\022\017\n\007"
    "role_id\030\002 \001(\004\022\020\n\010mail_ids\030\003 \003(\004\022\023\n\013to_se"
    "t_read\030\004 \001(\010\022\034\n\024to_set_attach_getted\030\005 \001"
    "(\010\"\214\001\n\034mail_role_del_multi_mail_ntf\022I\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\037m"
    "ail_role_del_multi_mail_ntf_id\022\017\n\007role_i"
    "d\030\002 \001(\004\022\020\n\010mail_ids\030\003 \003(\004\"\214\001\n\034mail_role_"
    "del_multi_mail_req\022I\n\007protoid\030\001 \001(\0162\027.SP"
    "rotoSpace.ESSProtoID:\037mail_role_del_mult"
    "i_mail_req_id\022\017\n\007role_id\030\002 \001(\004\022\020\n\010mail_i"
    "ds\030\003 \003(\004\"\254\001\n\034mail_role_del_multi_mail_ac"
    "k\022I\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProt"
    "oID:\037mail_role_del_multi_mail_ack_id\022\017\n\007"
    "role_id\030\002 \001(\004\022\027\n\017suceed_mail_ids\030\003 \003(\004\022\027"
    "\n\017failed_mail_ids\030\004 \003(\004\"\346\002\n\033mail_send_al"
    "l_type_mail_req\022H\n\007protoid\030\001 \001(\0162\027.SProt"
    "oSpace.ESSProtoID:\036mail_send_all_type_ma"
    "il_req_id\0221\n\rprivate_mails\030\002 \003(\0132\032.SProt"
    "oSpace.mail_instance\022\024\n\014to_role_name\030\003 \001"
    "(\t\022\031\n\021game_session_back\030\t \001(\004\022\035\n\025global_"
    "mail_config_id\030\004 \001(\005\022\036\n\026group_mail_to_ro"
    "le_ids\030\005 \003(\004\022\034\n\024group_mail_config_id\030\006 \001"
    "(\005\022\035\n\025family_mail_family_id\030\007 \001(\004\022\035\n\025fam"
    "ily_mail_config_id\030\010 \001(\005\"\222\003\n\033mail_send_a"
    "ll_type_mail_ack\022H\n\007protoid\030\001 \001(\0162\027.SPro"
    "toSpace.ESSProtoID:\036mail_send_all_type_m"
    "ail_ack_id\022\021\n\tconfig_id\030\002 \003(\005\0223\n\020rec_cod"
    "e_private\030\003 \001(\0162\031.SProtoSpace.MsgErrorTy"
    "pe\0222\n\017rec_code_global\030\004 \001(\0162\031.SProtoSpac"
    "e.MsgErrorType\0221\n\016rec_code_group\030\005 \001(\0162\031"
    ".SProtoSpace.MsgErrorType\0222\n\017rec_code_fa"
    "mily\030\006 \001(\0162\031.SProtoSpace.MsgErrorType\022\024\n"
    "\014from_role_id\030\007 \001(\004\0220\n\014suceed_mails\030\010 \003("
    "\0132\032.SProtoSpace.mail_instance\"\207\001\n\036mail_g"
    "et_game_all_role_ids_req\022K\n\007protoid\030\001 \001("
    "\0162\027.SProtoSpace.ESSProtoID:!mail_get_gam"
    "e_all_role_ids_req_id\022\030\n\020mail_template_i"
    "d\030\002 \001(\004\"\231\001\n\036mail_get_game_all_role_ids_a"
    "ck\022K\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSPro"
    "toID:!mail_get_game_all_role_ids_ack_id\022"
    "\020\n\010role_ids\030\002 \003(\004\022\030\n\020mail_template_id\030\003 "
    "\001(\004\"\261\001\n\025mail_svr_pressure_ntf\022B\n\007protoid"
    "\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\030mail_sv"
    "r_pressure_ntf_id\022\025\n\rsql_pre_count\030\002 \001(\004"
    "\022\025\n\rsql_run_count\030\003 \001(\004\022\022\n\ngame_count\030\004 "
    "\001(\005\022\022\n\nmail_count\030\005 \001(\005\"\247\001\n\024del_ss_mul_m"
    "ails_req\022A\n\007protoid\030\001 \001(\0162\027.SProtoSpace."
    "ESSProtoID:\027del_ss_mul_mails_req_id\022\021\n\tm"
    "ail_id_s\030\002 \003(\004\022\017\n\007role_id\030\003 \001(\004\022\017\n\007game_"
    "id\030\004 \001(\004\022\027\n\017server_side_opt\030\005 \001(\010\"\300\001\n\024de"
    "l_ss_mul_mails_ack\022A\n\007protoid\030\001 \001(\0162\027.SP"
    "rotoSpace.ESSProtoID:\027del_ss_mul_mails_a"
    "ck_id\022\021\n\tmail_id_s\030\002 \003(\004\022\017\n\007role_id\030\003 \001("
    "\004\022(\n\005error\030\004 \001(\0162\031.SProtoSpace.MsgErrorT"
    "ype\022\027\n\017server_side_opt\030\005 \001(\010\"\312\001\n\033sync_ss"
    "_mul_mails_state_req\022H\n\007protoid\030\001 \001(\0162\027."
    "SProtoSpace.ESSProtoID:\036sync_ss_mul_mail"
    "s_state_req_id\022\021\n\tmail_id_s\030\002 \003(\004\022\017\n\007rol"
    "e_id\030\003 \001(\004\022\017\n\007game_id\030\004 \001(\004\022\022\n\nread_stat"
    "e\030\005 \001(\010\022\030\n\020get_attach_state\030\006 \001(\010\"\343\001\n\033sy"
    "nc_ss_mul_mails_state_ack\022H\n\007protoid\030\001 \001"
    "(\0162\027.SProtoSpace.ESSProtoID:\036sync_ss_mul"
    "_mails_state_ack_id\022\021\n\tmail_id_s\030\002 \003(\004\022\017"
    "\n\007role_id\030\003 \001(\004\022(\n\005error\030\004 \001(\0162\031.SProtoS"
    "pace.MsgErrorType\022\022\n\nread_state\030\005 \001(\010\022\030\n"
    "\020get_attach_state\030\006 \001(\010\"\201\001\n\020get_mails_ss"
    "_req\022=\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSP"
    "rotoID:\023get_mails_ss_req_id\022\017\n\007role_id\030\002"
    " \001(\004\022\014\n\004time\030\003 \001(\004\022\017\n\007game_id\030\004 \001(\004\"p\n\020g"
    "et_mails_ss_ack\022=\n\007protoid\030\001 \001(\0162\027.SProt"
    "oSpace.ESSProtoID:\023get_mails_ss_ack_id\022\017"
    "\n\007role_id\030\002 \001(\004\022\014\n\004time\030\003 \001(\004\"\221\001\n\020gen_ma"
    "ils_ss_req\022=\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ESSProtoID:\023gen_mails_ss_req_id\022\017\n\007rol"
    "e_id\030\002 \001(\004\022\014\n\004time\030\003 \001(\004\022\017\n\007game_id\030\004 \001("
    "\004\022\016\n\006max_id\030\005 \001(\004\"\204\001\n\020gen_mails_ss_ack\022="
    "\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID"
    ":\023gen_mails_ss_ack_id\022 \n\005mails\030\002 \003(\0132\021.S"
    "ProtoSpace.mail\022\017\n\007role_id\030\003 \001(\004\"\352\001\n\020sen"
    "d_mail_ss_req\022=\n\007protoid\030\001 \001(\0162\027.SProtoS"
    "pace.ESSProtoID:\023send_mail_ss_req_id\022\037\n\004"
    "mail\030\002 \001(\0132\021.SProtoSpace.mail\022\017\n\007game_id"
    "\030\003 \001(\004\022\022\n\nto_role_id\030\004 \001(\004\022\024\n\014to_role_na"
    "me\030\005 \001(\t\022(\n\004type\030\006 \001(\0162\032.SProtoSpace.eSe"
    "ndMailType\022\021\n\tsend_back\030\007 \001(\010\"\255\001\n\020send_m"
    "ail_ss_ack\022=\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ESSProtoID:\023send_mail_ss_ack_id\022\037\n\004mai"
    "l\030\002 \001(\0132\021.SProtoSpace.mail\022\017\n\007game_id\030\003 "
    "\001(\004\022(\n\005error\030\004 \001(\0162\031.SProtoSpace.MsgErro"
    "rType\"\255\001\n\020recv_mail_ss_ntf\022=\n\007protoid\030\001 "
    "\001(\0162\027.SProtoSpace.ESSProtoID:\023recv_mail_"
    "ss_ntf_id\022\037\n\004mail\030\002 \001(\0132\021.SProtoSpace.ma"
    "il\022\017\n\007game_id\030\003 \001(\004\022(\n\005error\030\004 \001(\0162\031.SPr"
    "otoSpace.MsgErrorType\"\300\001\n\030mail_add_templ"
    "ate_ss_req\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ESSProtoID:\033mail_add_template_ss_req_i"
    "d\022/\n\004type\030\002 \001(\0162!.SProtoSpace.eMailAddTe"
    "mplateType\022,\n\010template\030\003 \001(\0132\032.SProtoSpa"
    "ce.mail_template\"\300\001\n\030mail_add_template_s"
    "s_ack\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESS"
    "ProtoID:\033mail_add_template_ss_ack_id\022/\n\004"
    "type\030\002 \001(\0162!.SProtoSpace.eMailAddTemplat"
    "eType\022,\n\010template\030\003 \001(\0132\032.SProtoSpace.ma"
    "il_template\"\300\001\n\030mail_add_template_ss_ntf"
    "\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProto"
    "ID:\033mail_add_template_ss_ntf_id\022/\n\004type\030"
    "\002 \001(\0162!.SProtoSpace.eMailAddTemplateType"
    "\022,\n\010template\030\003 \001(\0132\032.SProtoSpace.mail_te"
    "mplate\"a\n\030mail_new_template_ss_ntf\022E\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\033ma"
    "il_new_template_ss_ntf_id\"\220\001\n\022mail_red_p"
    "t_ss_req\022\?\n\007protoid\030\001 \001(\0162\027.SProtoSpace."
    "ESSProtoID:\025mail_red_pt_ss_req_id\022\017\n\007rol"
    "e_id\030\002 \001(\004\022\017\n\007game_id\030\003 \001(\004\022\027\n\017mail_g_te"
    "mplate\030\004 \001(\004\"f\n\022mail_red_pt_ss_ack\022\?\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\025ma"
    "il_red_pt_ss_ack_id\022\017\n\007role_id\030\002 \001(\004*Z\n\024"
    "eMailAddTemplateType\022\037\n\033MAIL_ADD_TEMPLAT"
    "E_TYPE_NONE\020\000\022!\n\035MAIL_ADD_TEMPLATE_TYPE_"
    "GLOBAL\020\001", 5568);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ss_mail.proto", &protobuf_RegisterTypes);
  mail_role_enter_game_get_mail_req::default_instance_ = new mail_role_enter_game_get_mail_req();
  mail_role_enter_game_get_mail_ack::default_instance_ = new mail_role_enter_game_get_mail_ack();
  mail_one_role_mail_ntf::default_instance_ = new mail_one_role_mail_ntf();
  mail_multi_role_mail_ntf::default_instance_ = new mail_multi_role_mail_ntf();
  mail_role_set_multi_mail_status_ntf::default_instance_ = new mail_role_set_multi_mail_status_ntf();
  mail_role_del_multi_mail_ntf::default_instance_ = new mail_role_del_multi_mail_ntf();
  mail_role_del_multi_mail_req::default_instance_ = new mail_role_del_multi_mail_req();
  mail_role_del_multi_mail_ack::default_instance_ = new mail_role_del_multi_mail_ack();
  mail_send_all_type_mail_req::default_instance_ = new mail_send_all_type_mail_req();
  mail_send_all_type_mail_ack::default_instance_ = new mail_send_all_type_mail_ack();
  mail_get_game_all_role_ids_req::default_instance_ = new mail_get_game_all_role_ids_req();
  mail_get_game_all_role_ids_ack::default_instance_ = new mail_get_game_all_role_ids_ack();
  mail_svr_pressure_ntf::default_instance_ = new mail_svr_pressure_ntf();
  del_ss_mul_mails_req::default_instance_ = new del_ss_mul_mails_req();
  del_ss_mul_mails_ack::default_instance_ = new del_ss_mul_mails_ack();
  sync_ss_mul_mails_state_req::default_instance_ = new sync_ss_mul_mails_state_req();
  sync_ss_mul_mails_state_ack::default_instance_ = new sync_ss_mul_mails_state_ack();
  get_mails_ss_req::default_instance_ = new get_mails_ss_req();
  get_mails_ss_ack::default_instance_ = new get_mails_ss_ack();
  gen_mails_ss_req::default_instance_ = new gen_mails_ss_req();
  gen_mails_ss_ack::default_instance_ = new gen_mails_ss_ack();
  send_mail_ss_req::default_instance_ = new send_mail_ss_req();
  send_mail_ss_ack::default_instance_ = new send_mail_ss_ack();
  recv_mail_ss_ntf::default_instance_ = new recv_mail_ss_ntf();
  mail_add_template_ss_req::default_instance_ = new mail_add_template_ss_req();
  mail_add_template_ss_ack::default_instance_ = new mail_add_template_ss_ack();
  mail_add_template_ss_ntf::default_instance_ = new mail_add_template_ss_ntf();
  mail_new_template_ss_ntf::default_instance_ = new mail_new_template_ss_ntf();
  mail_red_pt_ss_req::default_instance_ = new mail_red_pt_ss_req();
  mail_red_pt_ss_ack::default_instance_ = new mail_red_pt_ss_ack();
  mail_role_enter_game_get_mail_req::default_instance_->InitAsDefaultInstance();
  mail_role_enter_game_get_mail_ack::default_instance_->InitAsDefaultInstance();
  mail_one_role_mail_ntf::default_instance_->InitAsDefaultInstance();
  mail_multi_role_mail_ntf::default_instance_->InitAsDefaultInstance();
  mail_role_set_multi_mail_status_ntf::default_instance_->InitAsDefaultInstance();
  mail_role_del_multi_mail_ntf::default_instance_->InitAsDefaultInstance();
  mail_role_del_multi_mail_req::default_instance_->InitAsDefaultInstance();
  mail_role_del_multi_mail_ack::default_instance_->InitAsDefaultInstance();
  mail_send_all_type_mail_req::default_instance_->InitAsDefaultInstance();
  mail_send_all_type_mail_ack::default_instance_->InitAsDefaultInstance();
  mail_get_game_all_role_ids_req::default_instance_->InitAsDefaultInstance();
  mail_get_game_all_role_ids_ack::default_instance_->InitAsDefaultInstance();
  mail_svr_pressure_ntf::default_instance_->InitAsDefaultInstance();
  del_ss_mul_mails_req::default_instance_->InitAsDefaultInstance();
  del_ss_mul_mails_ack::default_instance_->InitAsDefaultInstance();
  sync_ss_mul_mails_state_req::default_instance_->InitAsDefaultInstance();
  sync_ss_mul_mails_state_ack::default_instance_->InitAsDefaultInstance();
  get_mails_ss_req::default_instance_->InitAsDefaultInstance();
  get_mails_ss_ack::default_instance_->InitAsDefaultInstance();
  gen_mails_ss_req::default_instance_->InitAsDefaultInstance();
  gen_mails_ss_ack::default_instance_->InitAsDefaultInstance();
  send_mail_ss_req::default_instance_->InitAsDefaultInstance();
  send_mail_ss_ack::default_instance_->InitAsDefaultInstance();
  recv_mail_ss_ntf::default_instance_->InitAsDefaultInstance();
  mail_add_template_ss_req::default_instance_->InitAsDefaultInstance();
  mail_add_template_ss_ack::default_instance_->InitAsDefaultInstance();
  mail_add_template_ss_ntf::default_instance_->InitAsDefaultInstance();
  mail_new_template_ss_ntf::default_instance_->InitAsDefaultInstance();
  mail_red_pt_ss_req::default_instance_->InitAsDefaultInstance();
  mail_red_pt_ss_ack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ss_5fmail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ss_5fmail_2eproto {
  StaticDescriptorInitializer_ss_5fmail_2eproto() {
    protobuf_AddDesc_ss_5fmail_2eproto();
  }
} static_descriptor_initializer_ss_5fmail_2eproto_;
const ::google::protobuf::EnumDescriptor* eMailAddTemplateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eMailAddTemplateType_descriptor_;
}
bool eMailAddTemplateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int mail_role_enter_game_get_mail_req::kProtoidFieldNumber;
const int mail_role_enter_game_get_mail_req::kRoleIdFieldNumber;
const int mail_role_enter_game_get_mail_req::kRoleMailTimePointFieldNumber;
#endif  // !_MSC_VER

mail_role_enter_game_get_mail_req::mail_role_enter_game_get_mail_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_role_enter_game_get_mail_req::InitAsDefaultInstance() {
}

mail_role_enter_game_get_mail_req::mail_role_enter_game_get_mail_req(const mail_role_enter_game_get_mail_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_role_enter_game_get_mail_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 317;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_mail_time_point_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_role_enter_game_get_mail_req::~mail_role_enter_game_get_mail_req() {
  SharedDtor();
}

void mail_role_enter_game_get_mail_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_role_enter_game_get_mail_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_role_enter_game_get_mail_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_role_enter_game_get_mail_req_descriptor_;
}

const mail_role_enter_game_get_mail_req& mail_role_enter_game_get_mail_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

mail_role_enter_game_get_mail_req* mail_role_enter_game_get_mail_req::default_instance_ = NULL;

mail_role_enter_game_get_mail_req* mail_role_enter_game_get_mail_req::New() const {
  return new mail_role_enter_game_get_mail_req;
}

void mail_role_enter_game_get_mail_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 317;
    role_id_ = GOOGLE_ULONGLONG(0);
    role_mail_time_point_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_role_enter_game_get_mail_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_enter_game_get_mail_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_mail_time_point;
        break;
      }

      // optional uint64 role_mail_time_point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_mail_time_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_mail_time_point_)));
          set_has_role_mail_time_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_role_enter_game_get_mail_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_enter_game_get_mail_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint64 role_mail_time_point = 3;
  if (has_role_mail_time_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_mail_time_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_role_enter_game_get_mail_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_enter_game_get_mail_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint64 role_mail_time_point = 3;
  if (has_role_mail_time_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_mail_time_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_role_enter_game_get_mail_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_enter_game_get_mail_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 role_mail_time_point = 3;
    if (has_role_mail_time_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_mail_time_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_role_enter_game_get_mail_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_role_enter_game_get_mail_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_role_enter_game_get_mail_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_role_enter_game_get_mail_req::MergeFrom(const mail_role_enter_game_get_mail_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_mail_time_point()) {
      set_role_mail_time_point(from.role_mail_time_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_role_enter_game_get_mail_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_role_enter_game_get_mail_req::CopyFrom(const mail_role_enter_game_get_mail_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_role_enter_game_get_mail_req::IsInitialized() const {

  return true;
}

void mail_role_enter_game_get_mail_req::Swap(mail_role_enter_game_get_mail_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_mail_time_point_, other->role_mail_time_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_role_enter_game_get_mail_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_role_enter_game_get_mail_req_descriptor_;
  metadata.reflection = mail_role_enter_game_get_mail_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_role_enter_game_get_mail_ack::kProtoidFieldNumber;
const int mail_role_enter_game_get_mail_ack::kRoleIdFieldNumber;
const int mail_role_enter_game_get_mail_ack::kRoleMailTimePointFieldNumber;
#endif  // !_MSC_VER

mail_role_enter_game_get_mail_ack::mail_role_enter_game_get_mail_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_role_enter_game_get_mail_ack::InitAsDefaultInstance() {
}

mail_role_enter_game_get_mail_ack::mail_role_enter_game_get_mail_ack(const mail_role_enter_game_get_mail_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_role_enter_game_get_mail_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 318;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_mail_time_point_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_role_enter_game_get_mail_ack::~mail_role_enter_game_get_mail_ack() {
  SharedDtor();
}

void mail_role_enter_game_get_mail_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_role_enter_game_get_mail_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_role_enter_game_get_mail_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_role_enter_game_get_mail_ack_descriptor_;
}

const mail_role_enter_game_get_mail_ack& mail_role_enter_game_get_mail_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

mail_role_enter_game_get_mail_ack* mail_role_enter_game_get_mail_ack::default_instance_ = NULL;

mail_role_enter_game_get_mail_ack* mail_role_enter_game_get_mail_ack::New() const {
  return new mail_role_enter_game_get_mail_ack;
}

void mail_role_enter_game_get_mail_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 318;
    role_id_ = GOOGLE_ULONGLONG(0);
    role_mail_time_point_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_role_enter_game_get_mail_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_enter_game_get_mail_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_mail_time_point;
        break;
      }

      // optional uint64 role_mail_time_point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_mail_time_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_mail_time_point_)));
          set_has_role_mail_time_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_role_enter_game_get_mail_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_enter_game_get_mail_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint64 role_mail_time_point = 3;
  if (has_role_mail_time_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_mail_time_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_role_enter_game_get_mail_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_enter_game_get_mail_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint64 role_mail_time_point = 3;
  if (has_role_mail_time_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_mail_time_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_role_enter_game_get_mail_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_enter_game_get_mail_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 role_mail_time_point = 3;
    if (has_role_mail_time_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_mail_time_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_role_enter_game_get_mail_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_role_enter_game_get_mail_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_role_enter_game_get_mail_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_role_enter_game_get_mail_ack::MergeFrom(const mail_role_enter_game_get_mail_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_mail_time_point()) {
      set_role_mail_time_point(from.role_mail_time_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_role_enter_game_get_mail_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_role_enter_game_get_mail_ack::CopyFrom(const mail_role_enter_game_get_mail_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_role_enter_game_get_mail_ack::IsInitialized() const {

  return true;
}

void mail_role_enter_game_get_mail_ack::Swap(mail_role_enter_game_get_mail_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_mail_time_point_, other->role_mail_time_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_role_enter_game_get_mail_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_role_enter_game_get_mail_ack_descriptor_;
  metadata.reflection = mail_role_enter_game_get_mail_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_one_role_mail_ntf::kProtoidFieldNumber;
const int mail_one_role_mail_ntf::kRoleIdFieldNumber;
const int mail_one_role_mail_ntf::kMailsFieldNumber;
#endif  // !_MSC_VER

mail_one_role_mail_ntf::mail_one_role_mail_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_one_role_mail_ntf::InitAsDefaultInstance() {
}

mail_one_role_mail_ntf::mail_one_role_mail_ntf(const mail_one_role_mail_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_one_role_mail_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 327;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_one_role_mail_ntf::~mail_one_role_mail_ntf() {
  SharedDtor();
}

void mail_one_role_mail_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_one_role_mail_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_one_role_mail_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_one_role_mail_ntf_descriptor_;
}

const mail_one_role_mail_ntf& mail_one_role_mail_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

mail_one_role_mail_ntf* mail_one_role_mail_ntf::default_instance_ = NULL;

mail_one_role_mail_ntf* mail_one_role_mail_ntf::New() const {
  return new mail_one_role_mail_ntf;
}

void mail_one_role_mail_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 327;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  mails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_one_role_mail_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_one_role_mail_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mails;
        break;
      }

      // repeated .SProtoSpace.mail_instance mails = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mails;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_one_role_mail_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_one_role_mail_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // repeated .SProtoSpace.mail_instance mails = 3;
  for (int i = 0; i < this->mails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mails(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_one_role_mail_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_one_role_mail_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // repeated .SProtoSpace.mail_instance mails = 3;
  for (int i = 0; i < this->mails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mails(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_one_role_mail_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_one_role_mail_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  // repeated .SProtoSpace.mail_instance mails = 3;
  total_size += 1 * this->mails_size();
  for (int i = 0; i < this->mails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_one_role_mail_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_one_role_mail_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_one_role_mail_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_one_role_mail_ntf::MergeFrom(const mail_one_role_mail_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mails_.MergeFrom(from.mails_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_one_role_mail_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_one_role_mail_ntf::CopyFrom(const mail_one_role_mail_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_one_role_mail_ntf::IsInitialized() const {

  return true;
}

void mail_one_role_mail_ntf::Swap(mail_one_role_mail_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    mails_.Swap(&other->mails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_one_role_mail_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_one_role_mail_ntf_descriptor_;
  metadata.reflection = mail_one_role_mail_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_multi_role_mail_ntf::kProtoidFieldNumber;
const int mail_multi_role_mail_ntf::kMailsFieldNumber;
#endif  // !_MSC_VER

mail_multi_role_mail_ntf::mail_multi_role_mail_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_multi_role_mail_ntf::InitAsDefaultInstance() {
}

mail_multi_role_mail_ntf::mail_multi_role_mail_ntf(const mail_multi_role_mail_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_multi_role_mail_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 328;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_multi_role_mail_ntf::~mail_multi_role_mail_ntf() {
  SharedDtor();
}

void mail_multi_role_mail_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_multi_role_mail_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_multi_role_mail_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_multi_role_mail_ntf_descriptor_;
}

const mail_multi_role_mail_ntf& mail_multi_role_mail_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

mail_multi_role_mail_ntf* mail_multi_role_mail_ntf::default_instance_ = NULL;

mail_multi_role_mail_ntf* mail_multi_role_mail_ntf::New() const {
  return new mail_multi_role_mail_ntf;
}

void mail_multi_role_mail_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 328;
  }
  mails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_multi_role_mail_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_multi_role_mail_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mails;
        break;
      }

      // repeated .SProtoSpace.mail_instance mails = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mails;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_multi_role_mail_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_multi_role_mail_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.mail_instance mails = 2;
  for (int i = 0; i < this->mails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mails(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_multi_role_mail_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_multi_role_mail_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.mail_instance mails = 2;
  for (int i = 0; i < this->mails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mails(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_multi_role_mail_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_multi_role_mail_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.mail_instance mails = 2;
  total_size += 1 * this->mails_size();
  for (int i = 0; i < this->mails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_multi_role_mail_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_multi_role_mail_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_multi_role_mail_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_multi_role_mail_ntf::MergeFrom(const mail_multi_role_mail_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mails_.MergeFrom(from.mails_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_multi_role_mail_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_multi_role_mail_ntf::CopyFrom(const mail_multi_role_mail_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_multi_role_mail_ntf::IsInitialized() const {

  return true;
}

void mail_multi_role_mail_ntf::Swap(mail_multi_role_mail_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    mails_.Swap(&other->mails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_multi_role_mail_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_multi_role_mail_ntf_descriptor_;
  metadata.reflection = mail_multi_role_mail_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_role_set_multi_mail_status_ntf::kProtoidFieldNumber;
const int mail_role_set_multi_mail_status_ntf::kRoleIdFieldNumber;
const int mail_role_set_multi_mail_status_ntf::kMailIdsFieldNumber;
const int mail_role_set_multi_mail_status_ntf::kToSetReadFieldNumber;
const int mail_role_set_multi_mail_status_ntf::kToSetAttachGettedFieldNumber;
#endif  // !_MSC_VER

mail_role_set_multi_mail_status_ntf::mail_role_set_multi_mail_status_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_role_set_multi_mail_status_ntf::InitAsDefaultInstance() {
}

mail_role_set_multi_mail_status_ntf::mail_role_set_multi_mail_status_ntf(const mail_role_set_multi_mail_status_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_role_set_multi_mail_status_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 319;
  role_id_ = GOOGLE_ULONGLONG(0);
  to_set_read_ = false;
  to_set_attach_getted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_role_set_multi_mail_status_ntf::~mail_role_set_multi_mail_status_ntf() {
  SharedDtor();
}

void mail_role_set_multi_mail_status_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_role_set_multi_mail_status_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_role_set_multi_mail_status_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_role_set_multi_mail_status_ntf_descriptor_;
}

const mail_role_set_multi_mail_status_ntf& mail_role_set_multi_mail_status_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

mail_role_set_multi_mail_status_ntf* mail_role_set_multi_mail_status_ntf::default_instance_ = NULL;

mail_role_set_multi_mail_status_ntf* mail_role_set_multi_mail_status_ntf::New() const {
  return new mail_role_set_multi_mail_status_ntf;
}

void mail_role_set_multi_mail_status_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 319;
    role_id_ = GOOGLE_ULONGLONG(0);
    to_set_read_ = false;
    to_set_attach_getted_ = false;
  }
  mail_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_role_set_multi_mail_status_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_set_multi_mail_status_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mail_ids;
        break;
      }

      // repeated uint64 mail_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_mail_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mail_ids;
        if (input->ExpectTag(32)) goto parse_to_set_read;
        break;
      }

      // optional bool to_set_read = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_set_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_set_read_)));
          set_has_to_set_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_to_set_attach_getted;
        break;
      }

      // optional bool to_set_attach_getted = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_set_attach_getted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_set_attach_getted_)));
          set_has_to_set_attach_getted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_role_set_multi_mail_status_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_set_multi_mail_status_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // repeated uint64 mail_ids = 3;
  for (int i = 0; i < this->mail_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->mail_ids(i), output);
  }

  // optional bool to_set_read = 4;
  if (has_to_set_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->to_set_read(), output);
  }

  // optional bool to_set_attach_getted = 5;
  if (has_to_set_attach_getted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->to_set_attach_getted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_role_set_multi_mail_status_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_set_multi_mail_status_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // repeated uint64 mail_ids = 3;
  for (int i = 0; i < this->mail_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->mail_ids(i), target);
  }

  // optional bool to_set_read = 4;
  if (has_to_set_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->to_set_read(), target);
  }

  // optional bool to_set_attach_getted = 5;
  if (has_to_set_attach_getted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->to_set_attach_getted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_role_set_multi_mail_status_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_set_multi_mail_status_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional bool to_set_read = 4;
    if (has_to_set_read()) {
      total_size += 1 + 1;
    }

    // optional bool to_set_attach_getted = 5;
    if (has_to_set_attach_getted()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 mail_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_ids(i));
    }
    total_size += 1 * this->mail_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_role_set_multi_mail_status_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_role_set_multi_mail_status_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_role_set_multi_mail_status_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_role_set_multi_mail_status_ntf::MergeFrom(const mail_role_set_multi_mail_status_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_ids_.MergeFrom(from.mail_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_to_set_read()) {
      set_to_set_read(from.to_set_read());
    }
    if (from.has_to_set_attach_getted()) {
      set_to_set_attach_getted(from.to_set_attach_getted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_role_set_multi_mail_status_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_role_set_multi_mail_status_ntf::CopyFrom(const mail_role_set_multi_mail_status_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_role_set_multi_mail_status_ntf::IsInitialized() const {

  return true;
}

void mail_role_set_multi_mail_status_ntf::Swap(mail_role_set_multi_mail_status_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    mail_ids_.Swap(&other->mail_ids_);
    std::swap(to_set_read_, other->to_set_read_);
    std::swap(to_set_attach_getted_, other->to_set_attach_getted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_role_set_multi_mail_status_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_role_set_multi_mail_status_ntf_descriptor_;
  metadata.reflection = mail_role_set_multi_mail_status_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_role_del_multi_mail_ntf::kProtoidFieldNumber;
const int mail_role_del_multi_mail_ntf::kRoleIdFieldNumber;
const int mail_role_del_multi_mail_ntf::kMailIdsFieldNumber;
#endif  // !_MSC_VER

mail_role_del_multi_mail_ntf::mail_role_del_multi_mail_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_role_del_multi_mail_ntf::InitAsDefaultInstance() {
}

mail_role_del_multi_mail_ntf::mail_role_del_multi_mail_ntf(const mail_role_del_multi_mail_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_role_del_multi_mail_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 320;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_role_del_multi_mail_ntf::~mail_role_del_multi_mail_ntf() {
  SharedDtor();
}

void mail_role_del_multi_mail_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_role_del_multi_mail_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_role_del_multi_mail_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_role_del_multi_mail_ntf_descriptor_;
}

const mail_role_del_multi_mail_ntf& mail_role_del_multi_mail_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

mail_role_del_multi_mail_ntf* mail_role_del_multi_mail_ntf::default_instance_ = NULL;

mail_role_del_multi_mail_ntf* mail_role_del_multi_mail_ntf::New() const {
  return new mail_role_del_multi_mail_ntf;
}

void mail_role_del_multi_mail_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 320;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  mail_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_role_del_multi_mail_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_del_multi_mail_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mail_ids;
        break;
      }

      // repeated uint64 mail_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_mail_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mail_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_role_del_multi_mail_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_del_multi_mail_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // repeated uint64 mail_ids = 3;
  for (int i = 0; i < this->mail_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->mail_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_role_del_multi_mail_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_del_multi_mail_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // repeated uint64 mail_ids = 3;
  for (int i = 0; i < this->mail_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->mail_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_role_del_multi_mail_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_del_multi_mail_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  // repeated uint64 mail_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_ids(i));
    }
    total_size += 1 * this->mail_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_role_del_multi_mail_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_role_del_multi_mail_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_role_del_multi_mail_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_role_del_multi_mail_ntf::MergeFrom(const mail_role_del_multi_mail_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_ids_.MergeFrom(from.mail_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_role_del_multi_mail_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_role_del_multi_mail_ntf::CopyFrom(const mail_role_del_multi_mail_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_role_del_multi_mail_ntf::IsInitialized() const {

  return true;
}

void mail_role_del_multi_mail_ntf::Swap(mail_role_del_multi_mail_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    mail_ids_.Swap(&other->mail_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_role_del_multi_mail_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_role_del_multi_mail_ntf_descriptor_;
  metadata.reflection = mail_role_del_multi_mail_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_role_del_multi_mail_req::kProtoidFieldNumber;
const int mail_role_del_multi_mail_req::kRoleIdFieldNumber;
const int mail_role_del_multi_mail_req::kMailIdsFieldNumber;
#endif  // !_MSC_VER

mail_role_del_multi_mail_req::mail_role_del_multi_mail_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_role_del_multi_mail_req::InitAsDefaultInstance() {
}

mail_role_del_multi_mail_req::mail_role_del_multi_mail_req(const mail_role_del_multi_mail_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_role_del_multi_mail_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 323;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_role_del_multi_mail_req::~mail_role_del_multi_mail_req() {
  SharedDtor();
}

void mail_role_del_multi_mail_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_role_del_multi_mail_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_role_del_multi_mail_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_role_del_multi_mail_req_descriptor_;
}

const mail_role_del_multi_mail_req& mail_role_del_multi_mail_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

mail_role_del_multi_mail_req* mail_role_del_multi_mail_req::default_instance_ = NULL;

mail_role_del_multi_mail_req* mail_role_del_multi_mail_req::New() const {
  return new mail_role_del_multi_mail_req;
}

void mail_role_del_multi_mail_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 323;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  mail_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_role_del_multi_mail_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_del_multi_mail_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mail_ids;
        break;
      }

      // repeated uint64 mail_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_mail_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mail_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_role_del_multi_mail_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_del_multi_mail_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // repeated uint64 mail_ids = 3;
  for (int i = 0; i < this->mail_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->mail_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_role_del_multi_mail_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_del_multi_mail_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // repeated uint64 mail_ids = 3;
  for (int i = 0; i < this->mail_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->mail_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_role_del_multi_mail_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_del_multi_mail_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  // repeated uint64 mail_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_ids(i));
    }
    total_size += 1 * this->mail_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_role_del_multi_mail_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_role_del_multi_mail_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_role_del_multi_mail_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_role_del_multi_mail_req::MergeFrom(const mail_role_del_multi_mail_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_ids_.MergeFrom(from.mail_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_role_del_multi_mail_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_role_del_multi_mail_req::CopyFrom(const mail_role_del_multi_mail_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_role_del_multi_mail_req::IsInitialized() const {

  return true;
}

void mail_role_del_multi_mail_req::Swap(mail_role_del_multi_mail_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    mail_ids_.Swap(&other->mail_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_role_del_multi_mail_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_role_del_multi_mail_req_descriptor_;
  metadata.reflection = mail_role_del_multi_mail_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_role_del_multi_mail_ack::kProtoidFieldNumber;
const int mail_role_del_multi_mail_ack::kRoleIdFieldNumber;
const int mail_role_del_multi_mail_ack::kSuceedMailIdsFieldNumber;
const int mail_role_del_multi_mail_ack::kFailedMailIdsFieldNumber;
#endif  // !_MSC_VER

mail_role_del_multi_mail_ack::mail_role_del_multi_mail_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_role_del_multi_mail_ack::InitAsDefaultInstance() {
}

mail_role_del_multi_mail_ack::mail_role_del_multi_mail_ack(const mail_role_del_multi_mail_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_role_del_multi_mail_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 324;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_role_del_multi_mail_ack::~mail_role_del_multi_mail_ack() {
  SharedDtor();
}

void mail_role_del_multi_mail_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_role_del_multi_mail_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_role_del_multi_mail_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_role_del_multi_mail_ack_descriptor_;
}

const mail_role_del_multi_mail_ack& mail_role_del_multi_mail_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

mail_role_del_multi_mail_ack* mail_role_del_multi_mail_ack::default_instance_ = NULL;

mail_role_del_multi_mail_ack* mail_role_del_multi_mail_ack::New() const {
  return new mail_role_del_multi_mail_ack;
}

void mail_role_del_multi_mail_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 324;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  suceed_mail_ids_.Clear();
  failed_mail_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_role_del_multi_mail_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_del_multi_mail_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_suceed_mail_ids;
        break;
      }

      // repeated uint64 suceed_mail_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suceed_mail_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_suceed_mail_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_suceed_mail_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_suceed_mail_ids;
        if (input->ExpectTag(32)) goto parse_failed_mail_ids;
        break;
      }

      // repeated uint64 failed_mail_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failed_mail_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_failed_mail_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_failed_mail_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_failed_mail_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_role_del_multi_mail_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_del_multi_mail_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // repeated uint64 suceed_mail_ids = 3;
  for (int i = 0; i < this->suceed_mail_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->suceed_mail_ids(i), output);
  }

  // repeated uint64 failed_mail_ids = 4;
  for (int i = 0; i < this->failed_mail_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->failed_mail_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_role_del_multi_mail_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_del_multi_mail_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // repeated uint64 suceed_mail_ids = 3;
  for (int i = 0; i < this->suceed_mail_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->suceed_mail_ids(i), target);
  }

  // repeated uint64 failed_mail_ids = 4;
  for (int i = 0; i < this->failed_mail_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->failed_mail_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_role_del_multi_mail_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_role_del_multi_mail_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  // repeated uint64 suceed_mail_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->suceed_mail_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->suceed_mail_ids(i));
    }
    total_size += 1 * this->suceed_mail_ids_size() + data_size;
  }

  // repeated uint64 failed_mail_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->failed_mail_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->failed_mail_ids(i));
    }
    total_size += 1 * this->failed_mail_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_role_del_multi_mail_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_role_del_multi_mail_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_role_del_multi_mail_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_role_del_multi_mail_ack::MergeFrom(const mail_role_del_multi_mail_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  suceed_mail_ids_.MergeFrom(from.suceed_mail_ids_);
  failed_mail_ids_.MergeFrom(from.failed_mail_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_role_del_multi_mail_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_role_del_multi_mail_ack::CopyFrom(const mail_role_del_multi_mail_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_role_del_multi_mail_ack::IsInitialized() const {

  return true;
}

void mail_role_del_multi_mail_ack::Swap(mail_role_del_multi_mail_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    suceed_mail_ids_.Swap(&other->suceed_mail_ids_);
    failed_mail_ids_.Swap(&other->failed_mail_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_role_del_multi_mail_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_role_del_multi_mail_ack_descriptor_;
  metadata.reflection = mail_role_del_multi_mail_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_send_all_type_mail_req::kProtoidFieldNumber;
const int mail_send_all_type_mail_req::kPrivateMailsFieldNumber;
const int mail_send_all_type_mail_req::kToRoleNameFieldNumber;
const int mail_send_all_type_mail_req::kGameSessionBackFieldNumber;
const int mail_send_all_type_mail_req::kGlobalMailConfigIdFieldNumber;
const int mail_send_all_type_mail_req::kGroupMailToRoleIdsFieldNumber;
const int mail_send_all_type_mail_req::kGroupMailConfigIdFieldNumber;
const int mail_send_all_type_mail_req::kFamilyMailFamilyIdFieldNumber;
const int mail_send_all_type_mail_req::kFamilyMailConfigIdFieldNumber;
#endif  // !_MSC_VER

mail_send_all_type_mail_req::mail_send_all_type_mail_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_send_all_type_mail_req::InitAsDefaultInstance() {
}

mail_send_all_type_mail_req::mail_send_all_type_mail_req(const mail_send_all_type_mail_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_send_all_type_mail_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 321;
  to_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_session_back_ = GOOGLE_ULONGLONG(0);
  global_mail_config_id_ = 0;
  group_mail_config_id_ = 0;
  family_mail_family_id_ = GOOGLE_ULONGLONG(0);
  family_mail_config_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_send_all_type_mail_req::~mail_send_all_type_mail_req() {
  SharedDtor();
}

void mail_send_all_type_mail_req::SharedDtor() {
  if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_role_name_;
  }
  if (this != default_instance_) {
  }
}

void mail_send_all_type_mail_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_send_all_type_mail_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_send_all_type_mail_req_descriptor_;
}

const mail_send_all_type_mail_req& mail_send_all_type_mail_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

mail_send_all_type_mail_req* mail_send_all_type_mail_req::default_instance_ = NULL;

mail_send_all_type_mail_req* mail_send_all_type_mail_req::New() const {
  return new mail_send_all_type_mail_req;
}

void mail_send_all_type_mail_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 321;
    if (has_to_role_name()) {
      if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
        to_role_name_->clear();
      }
    }
    game_session_back_ = GOOGLE_ULONGLONG(0);
    global_mail_config_id_ = 0;
    group_mail_config_id_ = 0;
    family_mail_family_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    family_mail_config_id_ = 0;
  }
  private_mails_.Clear();
  group_mail_to_role_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_send_all_type_mail_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_send_all_type_mail_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_private_mails;
        break;
      }

      // repeated .SProtoSpace.mail_instance private_mails = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_private_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_private_mails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_private_mails;
        if (input->ExpectTag(26)) goto parse_to_role_name;
        break;
      }

      // optional string to_role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_role_name().data(), this->to_role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_global_mail_config_id;
        break;
      }

      // optional int32 global_mail_config_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_global_mail_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &global_mail_config_id_)));
          set_has_global_mail_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_group_mail_to_role_ids;
        break;
      }

      // repeated uint64 group_mail_to_role_ids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_mail_to_role_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_group_mail_to_role_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_group_mail_to_role_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_group_mail_to_role_ids;
        if (input->ExpectTag(48)) goto parse_group_mail_config_id;
        break;
      }

      // optional int32 group_mail_config_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_mail_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_mail_config_id_)));
          set_has_group_mail_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_family_mail_family_id;
        break;
      }

      // optional uint64 family_mail_family_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_mail_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &family_mail_family_id_)));
          set_has_family_mail_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_family_mail_config_id;
        break;
      }

      // optional int32 family_mail_config_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_mail_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &family_mail_config_id_)));
          set_has_family_mail_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_game_session_back;
        break;
      }

      // optional uint64 game_session_back = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_session_back:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_session_back_)));
          set_has_game_session_back();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_send_all_type_mail_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_send_all_type_mail_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.mail_instance private_mails = 2;
  for (int i = 0; i < this->private_mails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->private_mails(i), output);
  }

  // optional string to_role_name = 3;
  if (has_to_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_role_name().data(), this->to_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->to_role_name(), output);
  }

  // optional int32 global_mail_config_id = 4;
  if (has_global_mail_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->global_mail_config_id(), output);
  }

  // repeated uint64 group_mail_to_role_ids = 5;
  for (int i = 0; i < this->group_mail_to_role_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->group_mail_to_role_ids(i), output);
  }

  // optional int32 group_mail_config_id = 6;
  if (has_group_mail_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->group_mail_config_id(), output);
  }

  // optional uint64 family_mail_family_id = 7;
  if (has_family_mail_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->family_mail_family_id(), output);
  }

  // optional int32 family_mail_config_id = 8;
  if (has_family_mail_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->family_mail_config_id(), output);
  }

  // optional uint64 game_session_back = 9;
  if (has_game_session_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->game_session_back(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_send_all_type_mail_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_send_all_type_mail_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.mail_instance private_mails = 2;
  for (int i = 0; i < this->private_mails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->private_mails(i), target);
  }

  // optional string to_role_name = 3;
  if (has_to_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_role_name().data(), this->to_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->to_role_name(), target);
  }

  // optional int32 global_mail_config_id = 4;
  if (has_global_mail_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->global_mail_config_id(), target);
  }

  // repeated uint64 group_mail_to_role_ids = 5;
  for (int i = 0; i < this->group_mail_to_role_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->group_mail_to_role_ids(i), target);
  }

  // optional int32 group_mail_config_id = 6;
  if (has_group_mail_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->group_mail_config_id(), target);
  }

  // optional uint64 family_mail_family_id = 7;
  if (has_family_mail_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->family_mail_family_id(), target);
  }

  // optional int32 family_mail_config_id = 8;
  if (has_family_mail_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->family_mail_config_id(), target);
  }

  // optional uint64 game_session_back = 9;
  if (has_game_session_back()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->game_session_back(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_send_all_type_mail_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_send_all_type_mail_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string to_role_name = 3;
    if (has_to_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_role_name());
    }

    // optional uint64 game_session_back = 9;
    if (has_game_session_back()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_session_back());
    }

    // optional int32 global_mail_config_id = 4;
    if (has_global_mail_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->global_mail_config_id());
    }

    // optional int32 group_mail_config_id = 6;
    if (has_group_mail_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_mail_config_id());
    }

    // optional uint64 family_mail_family_id = 7;
    if (has_family_mail_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->family_mail_family_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 family_mail_config_id = 8;
    if (has_family_mail_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->family_mail_config_id());
    }

  }
  // repeated .SProtoSpace.mail_instance private_mails = 2;
  total_size += 1 * this->private_mails_size();
  for (int i = 0; i < this->private_mails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->private_mails(i));
  }

  // repeated uint64 group_mail_to_role_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->group_mail_to_role_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->group_mail_to_role_ids(i));
    }
    total_size += 1 * this->group_mail_to_role_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_send_all_type_mail_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_send_all_type_mail_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_send_all_type_mail_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_send_all_type_mail_req::MergeFrom(const mail_send_all_type_mail_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  private_mails_.MergeFrom(from.private_mails_);
  group_mail_to_role_ids_.MergeFrom(from.group_mail_to_role_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_to_role_name()) {
      set_to_role_name(from.to_role_name());
    }
    if (from.has_game_session_back()) {
      set_game_session_back(from.game_session_back());
    }
    if (from.has_global_mail_config_id()) {
      set_global_mail_config_id(from.global_mail_config_id());
    }
    if (from.has_group_mail_config_id()) {
      set_group_mail_config_id(from.group_mail_config_id());
    }
    if (from.has_family_mail_family_id()) {
      set_family_mail_family_id(from.family_mail_family_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_family_mail_config_id()) {
      set_family_mail_config_id(from.family_mail_config_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_send_all_type_mail_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_send_all_type_mail_req::CopyFrom(const mail_send_all_type_mail_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_send_all_type_mail_req::IsInitialized() const {

  return true;
}

void mail_send_all_type_mail_req::Swap(mail_send_all_type_mail_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    private_mails_.Swap(&other->private_mails_);
    std::swap(to_role_name_, other->to_role_name_);
    std::swap(game_session_back_, other->game_session_back_);
    std::swap(global_mail_config_id_, other->global_mail_config_id_);
    group_mail_to_role_ids_.Swap(&other->group_mail_to_role_ids_);
    std::swap(group_mail_config_id_, other->group_mail_config_id_);
    std::swap(family_mail_family_id_, other->family_mail_family_id_);
    std::swap(family_mail_config_id_, other->family_mail_config_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_send_all_type_mail_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_send_all_type_mail_req_descriptor_;
  metadata.reflection = mail_send_all_type_mail_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_send_all_type_mail_ack::kProtoidFieldNumber;
const int mail_send_all_type_mail_ack::kConfigIdFieldNumber;
const int mail_send_all_type_mail_ack::kRecCodePrivateFieldNumber;
const int mail_send_all_type_mail_ack::kRecCodeGlobalFieldNumber;
const int mail_send_all_type_mail_ack::kRecCodeGroupFieldNumber;
const int mail_send_all_type_mail_ack::kRecCodeFamilyFieldNumber;
const int mail_send_all_type_mail_ack::kFromRoleIdFieldNumber;
const int mail_send_all_type_mail_ack::kSuceedMailsFieldNumber;
#endif  // !_MSC_VER

mail_send_all_type_mail_ack::mail_send_all_type_mail_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_send_all_type_mail_ack::InitAsDefaultInstance() {
}

mail_send_all_type_mail_ack::mail_send_all_type_mail_ack(const mail_send_all_type_mail_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_send_all_type_mail_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 322;
  rec_code_private_ = 0;
  rec_code_global_ = 0;
  rec_code_group_ = 0;
  rec_code_family_ = 0;
  from_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_send_all_type_mail_ack::~mail_send_all_type_mail_ack() {
  SharedDtor();
}

void mail_send_all_type_mail_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_send_all_type_mail_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_send_all_type_mail_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_send_all_type_mail_ack_descriptor_;
}

const mail_send_all_type_mail_ack& mail_send_all_type_mail_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

mail_send_all_type_mail_ack* mail_send_all_type_mail_ack::default_instance_ = NULL;

mail_send_all_type_mail_ack* mail_send_all_type_mail_ack::New() const {
  return new mail_send_all_type_mail_ack;
}

void mail_send_all_type_mail_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 322;
    rec_code_private_ = 0;
    rec_code_global_ = 0;
    rec_code_group_ = 0;
    rec_code_family_ = 0;
    from_role_id_ = GOOGLE_ULONGLONG(0);
  }
  config_id_.Clear();
  suceed_mails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_send_all_type_mail_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_send_all_type_mail_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_config_id;
        break;
      }

      // repeated int32 config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_config_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_config_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_config_id;
        if (input->ExpectTag(24)) goto parse_rec_code_private;
        break;
      }

      // optional .SProtoSpace.MsgErrorType rec_code_private = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec_code_private:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_rec_code_private(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rec_code_global;
        break;
      }

      // optional .SProtoSpace.MsgErrorType rec_code_global = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec_code_global:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_rec_code_global(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rec_code_group;
        break;
      }

      // optional .SProtoSpace.MsgErrorType rec_code_group = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec_code_group:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_rec_code_group(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rec_code_family;
        break;
      }

      // optional .SProtoSpace.MsgErrorType rec_code_family = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec_code_family:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_rec_code_family(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_from_role_id;
        break;
      }

      // optional uint64 from_role_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_role_id_)));
          set_has_from_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_suceed_mails;
        break;
      }

      // repeated .SProtoSpace.mail_instance suceed_mails = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suceed_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suceed_mails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_suceed_mails;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_send_all_type_mail_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_send_all_type_mail_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated int32 config_id = 2;
  for (int i = 0; i < this->config_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->config_id(i), output);
  }

  // optional .SProtoSpace.MsgErrorType rec_code_private = 3;
  if (has_rec_code_private()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->rec_code_private(), output);
  }

  // optional .SProtoSpace.MsgErrorType rec_code_global = 4;
  if (has_rec_code_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->rec_code_global(), output);
  }

  // optional .SProtoSpace.MsgErrorType rec_code_group = 5;
  if (has_rec_code_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->rec_code_group(), output);
  }

  // optional .SProtoSpace.MsgErrorType rec_code_family = 6;
  if (has_rec_code_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->rec_code_family(), output);
  }

  // optional uint64 from_role_id = 7;
  if (has_from_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->from_role_id(), output);
  }

  // repeated .SProtoSpace.mail_instance suceed_mails = 8;
  for (int i = 0; i < this->suceed_mails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->suceed_mails(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_send_all_type_mail_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_send_all_type_mail_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated int32 config_id = 2;
  for (int i = 0; i < this->config_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->config_id(i), target);
  }

  // optional .SProtoSpace.MsgErrorType rec_code_private = 3;
  if (has_rec_code_private()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->rec_code_private(), target);
  }

  // optional .SProtoSpace.MsgErrorType rec_code_global = 4;
  if (has_rec_code_global()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->rec_code_global(), target);
  }

  // optional .SProtoSpace.MsgErrorType rec_code_group = 5;
  if (has_rec_code_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->rec_code_group(), target);
  }

  // optional .SProtoSpace.MsgErrorType rec_code_family = 6;
  if (has_rec_code_family()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->rec_code_family(), target);
  }

  // optional uint64 from_role_id = 7;
  if (has_from_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->from_role_id(), target);
  }

  // repeated .SProtoSpace.mail_instance suceed_mails = 8;
  for (int i = 0; i < this->suceed_mails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->suceed_mails(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_send_all_type_mail_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_send_all_type_mail_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.MsgErrorType rec_code_private = 3;
    if (has_rec_code_private()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rec_code_private());
    }

    // optional .SProtoSpace.MsgErrorType rec_code_global = 4;
    if (has_rec_code_global()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rec_code_global());
    }

    // optional .SProtoSpace.MsgErrorType rec_code_group = 5;
    if (has_rec_code_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rec_code_group());
    }

    // optional .SProtoSpace.MsgErrorType rec_code_family = 6;
    if (has_rec_code_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rec_code_family());
    }

    // optional uint64 from_role_id = 7;
    if (has_from_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_role_id());
    }

  }
  // repeated int32 config_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->config_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->config_id(i));
    }
    total_size += 1 * this->config_id_size() + data_size;
  }

  // repeated .SProtoSpace.mail_instance suceed_mails = 8;
  total_size += 1 * this->suceed_mails_size();
  for (int i = 0; i < this->suceed_mails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->suceed_mails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_send_all_type_mail_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_send_all_type_mail_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_send_all_type_mail_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_send_all_type_mail_ack::MergeFrom(const mail_send_all_type_mail_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  config_id_.MergeFrom(from.config_id_);
  suceed_mails_.MergeFrom(from.suceed_mails_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_rec_code_private()) {
      set_rec_code_private(from.rec_code_private());
    }
    if (from.has_rec_code_global()) {
      set_rec_code_global(from.rec_code_global());
    }
    if (from.has_rec_code_group()) {
      set_rec_code_group(from.rec_code_group());
    }
    if (from.has_rec_code_family()) {
      set_rec_code_family(from.rec_code_family());
    }
    if (from.has_from_role_id()) {
      set_from_role_id(from.from_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_send_all_type_mail_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_send_all_type_mail_ack::CopyFrom(const mail_send_all_type_mail_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_send_all_type_mail_ack::IsInitialized() const {

  return true;
}

void mail_send_all_type_mail_ack::Swap(mail_send_all_type_mail_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    config_id_.Swap(&other->config_id_);
    std::swap(rec_code_private_, other->rec_code_private_);
    std::swap(rec_code_global_, other->rec_code_global_);
    std::swap(rec_code_group_, other->rec_code_group_);
    std::swap(rec_code_family_, other->rec_code_family_);
    std::swap(from_role_id_, other->from_role_id_);
    suceed_mails_.Swap(&other->suceed_mails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_send_all_type_mail_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_send_all_type_mail_ack_descriptor_;
  metadata.reflection = mail_send_all_type_mail_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_get_game_all_role_ids_req::kProtoidFieldNumber;
const int mail_get_game_all_role_ids_req::kMailTemplateIdFieldNumber;
#endif  // !_MSC_VER

mail_get_game_all_role_ids_req::mail_get_game_all_role_ids_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_get_game_all_role_ids_req::InitAsDefaultInstance() {
}

mail_get_game_all_role_ids_req::mail_get_game_all_role_ids_req(const mail_get_game_all_role_ids_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_get_game_all_role_ids_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 325;
  mail_template_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_get_game_all_role_ids_req::~mail_get_game_all_role_ids_req() {
  SharedDtor();
}

void mail_get_game_all_role_ids_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_get_game_all_role_ids_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_get_game_all_role_ids_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_get_game_all_role_ids_req_descriptor_;
}

const mail_get_game_all_role_ids_req& mail_get_game_all_role_ids_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

mail_get_game_all_role_ids_req* mail_get_game_all_role_ids_req::default_instance_ = NULL;

mail_get_game_all_role_ids_req* mail_get_game_all_role_ids_req::New() const {
  return new mail_get_game_all_role_ids_req;
}

void mail_get_game_all_role_ids_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 325;
    mail_template_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_get_game_all_role_ids_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_get_game_all_role_ids_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_template_id;
        break;
      }

      // optional uint64 mail_template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_template_id_)));
          set_has_mail_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_get_game_all_role_ids_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_get_game_all_role_ids_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 mail_template_id = 2;
  if (has_mail_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mail_template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_get_game_all_role_ids_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_get_game_all_role_ids_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 mail_template_id = 2;
  if (has_mail_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mail_template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_get_game_all_role_ids_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_get_game_all_role_ids_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 mail_template_id = 2;
    if (has_mail_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_get_game_all_role_ids_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_get_game_all_role_ids_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_get_game_all_role_ids_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_get_game_all_role_ids_req::MergeFrom(const mail_get_game_all_role_ids_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_mail_template_id()) {
      set_mail_template_id(from.mail_template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_get_game_all_role_ids_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_get_game_all_role_ids_req::CopyFrom(const mail_get_game_all_role_ids_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_get_game_all_role_ids_req::IsInitialized() const {

  return true;
}

void mail_get_game_all_role_ids_req::Swap(mail_get_game_all_role_ids_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(mail_template_id_, other->mail_template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_get_game_all_role_ids_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_get_game_all_role_ids_req_descriptor_;
  metadata.reflection = mail_get_game_all_role_ids_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_get_game_all_role_ids_ack::kProtoidFieldNumber;
const int mail_get_game_all_role_ids_ack::kRoleIdsFieldNumber;
const int mail_get_game_all_role_ids_ack::kMailTemplateIdFieldNumber;
#endif  // !_MSC_VER

mail_get_game_all_role_ids_ack::mail_get_game_all_role_ids_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_get_game_all_role_ids_ack::InitAsDefaultInstance() {
}

mail_get_game_all_role_ids_ack::mail_get_game_all_role_ids_ack(const mail_get_game_all_role_ids_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_get_game_all_role_ids_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 326;
  mail_template_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_get_game_all_role_ids_ack::~mail_get_game_all_role_ids_ack() {
  SharedDtor();
}

void mail_get_game_all_role_ids_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_get_game_all_role_ids_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_get_game_all_role_ids_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_get_game_all_role_ids_ack_descriptor_;
}

const mail_get_game_all_role_ids_ack& mail_get_game_all_role_ids_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

mail_get_game_all_role_ids_ack* mail_get_game_all_role_ids_ack::default_instance_ = NULL;

mail_get_game_all_role_ids_ack* mail_get_game_all_role_ids_ack::New() const {
  return new mail_get_game_all_role_ids_ack;
}

void mail_get_game_all_role_ids_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 326;
    mail_template_id_ = GOOGLE_ULONGLONG(0);
  }
  role_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_get_game_all_role_ids_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_get_game_all_role_ids_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_ids;
        break;
      }

      // repeated uint64 role_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_role_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_role_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_ids;
        if (input->ExpectTag(24)) goto parse_mail_template_id;
        break;
      }

      // optional uint64 mail_template_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_template_id_)));
          set_has_mail_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_get_game_all_role_ids_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_get_game_all_role_ids_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 role_ids = 2;
  for (int i = 0; i < this->role_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->role_ids(i), output);
  }

  // optional uint64 mail_template_id = 3;
  if (has_mail_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->mail_template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_get_game_all_role_ids_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_get_game_all_role_ids_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 role_ids = 2;
  for (int i = 0; i < this->role_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->role_ids(i), target);
  }

  // optional uint64 mail_template_id = 3;
  if (has_mail_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->mail_template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_get_game_all_role_ids_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_get_game_all_role_ids_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 mail_template_id = 3;
    if (has_mail_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_template_id());
    }

  }
  // repeated uint64 role_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->role_ids(i));
    }
    total_size += 1 * this->role_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_get_game_all_role_ids_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_get_game_all_role_ids_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_get_game_all_role_ids_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_get_game_all_role_ids_ack::MergeFrom(const mail_get_game_all_role_ids_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_ids_.MergeFrom(from.role_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_mail_template_id()) {
      set_mail_template_id(from.mail_template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_get_game_all_role_ids_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_get_game_all_role_ids_ack::CopyFrom(const mail_get_game_all_role_ids_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_get_game_all_role_ids_ack::IsInitialized() const {

  return true;
}

void mail_get_game_all_role_ids_ack::Swap(mail_get_game_all_role_ids_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    role_ids_.Swap(&other->role_ids_);
    std::swap(mail_template_id_, other->mail_template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_get_game_all_role_ids_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_get_game_all_role_ids_ack_descriptor_;
  metadata.reflection = mail_get_game_all_role_ids_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_svr_pressure_ntf::kProtoidFieldNumber;
const int mail_svr_pressure_ntf::kSqlPreCountFieldNumber;
const int mail_svr_pressure_ntf::kSqlRunCountFieldNumber;
const int mail_svr_pressure_ntf::kGameCountFieldNumber;
const int mail_svr_pressure_ntf::kMailCountFieldNumber;
#endif  // !_MSC_VER

mail_svr_pressure_ntf::mail_svr_pressure_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_svr_pressure_ntf::InitAsDefaultInstance() {
}

mail_svr_pressure_ntf::mail_svr_pressure_ntf(const mail_svr_pressure_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_svr_pressure_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 329;
  sql_pre_count_ = GOOGLE_ULONGLONG(0);
  sql_run_count_ = GOOGLE_ULONGLONG(0);
  game_count_ = 0;
  mail_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_svr_pressure_ntf::~mail_svr_pressure_ntf() {
  SharedDtor();
}

void mail_svr_pressure_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_svr_pressure_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_svr_pressure_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_svr_pressure_ntf_descriptor_;
}

const mail_svr_pressure_ntf& mail_svr_pressure_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

mail_svr_pressure_ntf* mail_svr_pressure_ntf::default_instance_ = NULL;

mail_svr_pressure_ntf* mail_svr_pressure_ntf::New() const {
  return new mail_svr_pressure_ntf;
}

void mail_svr_pressure_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 329;
    sql_pre_count_ = GOOGLE_ULONGLONG(0);
    sql_run_count_ = GOOGLE_ULONGLONG(0);
    game_count_ = 0;
    mail_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_svr_pressure_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_svr_pressure_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sql_pre_count;
        break;
      }

      // optional uint64 sql_pre_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sql_pre_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sql_pre_count_)));
          set_has_sql_pre_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sql_run_count;
        break;
      }

      // optional uint64 sql_run_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sql_run_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sql_run_count_)));
          set_has_sql_run_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_count;
        break;
      }

      // optional int32 game_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mail_count;
        break;
      }

      // optional int32 mail_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_count_)));
          set_has_mail_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_svr_pressure_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_svr_pressure_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 sql_pre_count = 2;
  if (has_sql_pre_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sql_pre_count(), output);
  }

  // optional uint64 sql_run_count = 3;
  if (has_sql_run_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sql_run_count(), output);
  }

  // optional int32 game_count = 4;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->game_count(), output);
  }

  // optional int32 mail_count = 5;
  if (has_mail_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mail_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_svr_pressure_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_svr_pressure_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 sql_pre_count = 2;
  if (has_sql_pre_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sql_pre_count(), target);
  }

  // optional uint64 sql_run_count = 3;
  if (has_sql_run_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sql_run_count(), target);
  }

  // optional int32 game_count = 4;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->game_count(), target);
  }

  // optional int32 mail_count = 5;
  if (has_mail_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mail_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_svr_pressure_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_svr_pressure_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 sql_pre_count = 2;
    if (has_sql_pre_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sql_pre_count());
    }

    // optional uint64 sql_run_count = 3;
    if (has_sql_run_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sql_run_count());
    }

    // optional int32 game_count = 4;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_count());
    }

    // optional int32 mail_count = 5;
    if (has_mail_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_svr_pressure_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_svr_pressure_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_svr_pressure_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_svr_pressure_ntf::MergeFrom(const mail_svr_pressure_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_sql_pre_count()) {
      set_sql_pre_count(from.sql_pre_count());
    }
    if (from.has_sql_run_count()) {
      set_sql_run_count(from.sql_run_count());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_mail_count()) {
      set_mail_count(from.mail_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_svr_pressure_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_svr_pressure_ntf::CopyFrom(const mail_svr_pressure_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_svr_pressure_ntf::IsInitialized() const {

  return true;
}

void mail_svr_pressure_ntf::Swap(mail_svr_pressure_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(sql_pre_count_, other->sql_pre_count_);
    std::swap(sql_run_count_, other->sql_run_count_);
    std::swap(game_count_, other->game_count_);
    std::swap(mail_count_, other->mail_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_svr_pressure_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_svr_pressure_ntf_descriptor_;
  metadata.reflection = mail_svr_pressure_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int del_ss_mul_mails_req::kProtoidFieldNumber;
const int del_ss_mul_mails_req::kMailIdSFieldNumber;
const int del_ss_mul_mails_req::kRoleIdFieldNumber;
const int del_ss_mul_mails_req::kGameIdFieldNumber;
const int del_ss_mul_mails_req::kServerSideOptFieldNumber;
#endif  // !_MSC_VER

del_ss_mul_mails_req::del_ss_mul_mails_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void del_ss_mul_mails_req::InitAsDefaultInstance() {
}

del_ss_mul_mails_req::del_ss_mul_mails_req(const del_ss_mul_mails_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void del_ss_mul_mails_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 350;
  role_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = GOOGLE_ULONGLONG(0);
  server_side_opt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

del_ss_mul_mails_req::~del_ss_mul_mails_req() {
  SharedDtor();
}

void del_ss_mul_mails_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void del_ss_mul_mails_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* del_ss_mul_mails_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return del_ss_mul_mails_req_descriptor_;
}

const del_ss_mul_mails_req& del_ss_mul_mails_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

del_ss_mul_mails_req* del_ss_mul_mails_req::default_instance_ = NULL;

del_ss_mul_mails_req* del_ss_mul_mails_req::New() const {
  return new del_ss_mul_mails_req;
}

void del_ss_mul_mails_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 350;
    role_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = GOOGLE_ULONGLONG(0);
    server_side_opt_ = false;
  }
  mail_id_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool del_ss_mul_mails_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = del_ss_mul_mails_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id_s;
        break;
      }

      // repeated uint64 mail_id_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_mail_id_s())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_id_s())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id_s;
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_id;
        break;
      }

      // optional uint64 game_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_server_side_opt;
        break;
      }

      // optional bool server_side_opt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_side_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &server_side_opt_)));
          set_has_server_side_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void del_ss_mul_mails_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = del_ss_mul_mails_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 mail_id_s = 2;
  for (int i = 0; i < this->mail_id_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->mail_id_s(i), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional uint64 game_id = 4;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->game_id(), output);
  }

  // optional bool server_side_opt = 5;
  if (has_server_side_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->server_side_opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* del_ss_mul_mails_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = del_ss_mul_mails_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 mail_id_s = 2;
  for (int i = 0; i < this->mail_id_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->mail_id_s(i), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional uint64 game_id = 4;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->game_id(), target);
  }

  // optional bool server_side_opt = 5;
  if (has_server_side_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->server_side_opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int del_ss_mul_mails_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = del_ss_mul_mails_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 game_id = 4;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_id());
    }

    // optional bool server_side_opt = 5;
    if (has_server_side_opt()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 mail_id_s = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_id_s_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_id_s(i));
    }
    total_size += 1 * this->mail_id_s_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void del_ss_mul_mails_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const del_ss_mul_mails_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const del_ss_mul_mails_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void del_ss_mul_mails_req::MergeFrom(const del_ss_mul_mails_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_id_s_.MergeFrom(from.mail_id_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_server_side_opt()) {
      set_server_side_opt(from.server_side_opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void del_ss_mul_mails_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void del_ss_mul_mails_req::CopyFrom(const del_ss_mul_mails_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool del_ss_mul_mails_req::IsInitialized() const {

  return true;
}

void del_ss_mul_mails_req::Swap(del_ss_mul_mails_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    mail_id_s_.Swap(&other->mail_id_s_);
    std::swap(role_id_, other->role_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(server_side_opt_, other->server_side_opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata del_ss_mul_mails_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = del_ss_mul_mails_req_descriptor_;
  metadata.reflection = del_ss_mul_mails_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int del_ss_mul_mails_ack::kProtoidFieldNumber;
const int del_ss_mul_mails_ack::kMailIdSFieldNumber;
const int del_ss_mul_mails_ack::kRoleIdFieldNumber;
const int del_ss_mul_mails_ack::kErrorFieldNumber;
const int del_ss_mul_mails_ack::kServerSideOptFieldNumber;
#endif  // !_MSC_VER

del_ss_mul_mails_ack::del_ss_mul_mails_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void del_ss_mul_mails_ack::InitAsDefaultInstance() {
}

del_ss_mul_mails_ack::del_ss_mul_mails_ack(const del_ss_mul_mails_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void del_ss_mul_mails_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 351;
  role_id_ = GOOGLE_ULONGLONG(0);
  error_ = 0;
  server_side_opt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

del_ss_mul_mails_ack::~del_ss_mul_mails_ack() {
  SharedDtor();
}

void del_ss_mul_mails_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void del_ss_mul_mails_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* del_ss_mul_mails_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return del_ss_mul_mails_ack_descriptor_;
}

const del_ss_mul_mails_ack& del_ss_mul_mails_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

del_ss_mul_mails_ack* del_ss_mul_mails_ack::default_instance_ = NULL;

del_ss_mul_mails_ack* del_ss_mul_mails_ack::New() const {
  return new del_ss_mul_mails_ack;
}

void del_ss_mul_mails_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 351;
    role_id_ = GOOGLE_ULONGLONG(0);
    error_ = 0;
    server_side_opt_ = false;
  }
  mail_id_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool del_ss_mul_mails_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = del_ss_mul_mails_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id_s;
        break;
      }

      // repeated uint64 mail_id_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_mail_id_s())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_id_s())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id_s;
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_server_side_opt;
        break;
      }

      // optional bool server_side_opt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_side_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &server_side_opt_)));
          set_has_server_side_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void del_ss_mul_mails_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = del_ss_mul_mails_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 mail_id_s = 2;
  for (int i = 0; i < this->mail_id_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->mail_id_s(i), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional .SProtoSpace.MsgErrorType error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error(), output);
  }

  // optional bool server_side_opt = 5;
  if (has_server_side_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->server_side_opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* del_ss_mul_mails_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = del_ss_mul_mails_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 mail_id_s = 2;
  for (int i = 0; i < this->mail_id_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->mail_id_s(i), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional .SProtoSpace.MsgErrorType error = 4;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->error(), target);
  }

  // optional bool server_side_opt = 5;
  if (has_server_side_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->server_side_opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int del_ss_mul_mails_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = del_ss_mul_mails_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.MsgErrorType error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional bool server_side_opt = 5;
    if (has_server_side_opt()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 mail_id_s = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_id_s_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_id_s(i));
    }
    total_size += 1 * this->mail_id_s_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void del_ss_mul_mails_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const del_ss_mul_mails_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const del_ss_mul_mails_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void del_ss_mul_mails_ack::MergeFrom(const del_ss_mul_mails_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_id_s_.MergeFrom(from.mail_id_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_server_side_opt()) {
      set_server_side_opt(from.server_side_opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void del_ss_mul_mails_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void del_ss_mul_mails_ack::CopyFrom(const del_ss_mul_mails_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool del_ss_mul_mails_ack::IsInitialized() const {

  return true;
}

void del_ss_mul_mails_ack::Swap(del_ss_mul_mails_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    mail_id_s_.Swap(&other->mail_id_s_);
    std::swap(role_id_, other->role_id_);
    std::swap(error_, other->error_);
    std::swap(server_side_opt_, other->server_side_opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata del_ss_mul_mails_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = del_ss_mul_mails_ack_descriptor_;
  metadata.reflection = del_ss_mul_mails_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sync_ss_mul_mails_state_req::kProtoidFieldNumber;
const int sync_ss_mul_mails_state_req::kMailIdSFieldNumber;
const int sync_ss_mul_mails_state_req::kRoleIdFieldNumber;
const int sync_ss_mul_mails_state_req::kGameIdFieldNumber;
const int sync_ss_mul_mails_state_req::kReadStateFieldNumber;
const int sync_ss_mul_mails_state_req::kGetAttachStateFieldNumber;
#endif  // !_MSC_VER

sync_ss_mul_mails_state_req::sync_ss_mul_mails_state_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sync_ss_mul_mails_state_req::InitAsDefaultInstance() {
}

sync_ss_mul_mails_state_req::sync_ss_mul_mails_state_req(const sync_ss_mul_mails_state_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sync_ss_mul_mails_state_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 352;
  role_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = GOOGLE_ULONGLONG(0);
  read_state_ = false;
  get_attach_state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sync_ss_mul_mails_state_req::~sync_ss_mul_mails_state_req() {
  SharedDtor();
}

void sync_ss_mul_mails_state_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sync_ss_mul_mails_state_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sync_ss_mul_mails_state_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sync_ss_mul_mails_state_req_descriptor_;
}

const sync_ss_mul_mails_state_req& sync_ss_mul_mails_state_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

sync_ss_mul_mails_state_req* sync_ss_mul_mails_state_req::default_instance_ = NULL;

sync_ss_mul_mails_state_req* sync_ss_mul_mails_state_req::New() const {
  return new sync_ss_mul_mails_state_req;
}

void sync_ss_mul_mails_state_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 352;
    role_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = GOOGLE_ULONGLONG(0);
    read_state_ = false;
    get_attach_state_ = false;
  }
  mail_id_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sync_ss_mul_mails_state_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = sync_ss_mul_mails_state_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id_s;
        break;
      }

      // repeated uint64 mail_id_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_mail_id_s())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_id_s())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id_s;
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_id;
        break;
      }

      // optional uint64 game_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_read_state;
        break;
      }

      // optional bool read_state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_state_)));
          set_has_read_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_get_attach_state;
        break;
      }

      // optional bool get_attach_state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_attach_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_attach_state_)));
          set_has_get_attach_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sync_ss_mul_mails_state_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = sync_ss_mul_mails_state_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 mail_id_s = 2;
  for (int i = 0; i < this->mail_id_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->mail_id_s(i), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional uint64 game_id = 4;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->game_id(), output);
  }

  // optional bool read_state = 5;
  if (has_read_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->read_state(), output);
  }

  // optional bool get_attach_state = 6;
  if (has_get_attach_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->get_attach_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sync_ss_mul_mails_state_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = sync_ss_mul_mails_state_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 mail_id_s = 2;
  for (int i = 0; i < this->mail_id_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->mail_id_s(i), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional uint64 game_id = 4;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->game_id(), target);
  }

  // optional bool read_state = 5;
  if (has_read_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->read_state(), target);
  }

  // optional bool get_attach_state = 6;
  if (has_get_attach_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->get_attach_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sync_ss_mul_mails_state_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = sync_ss_mul_mails_state_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 game_id = 4;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_id());
    }

    // optional bool read_state = 5;
    if (has_read_state()) {
      total_size += 1 + 1;
    }

    // optional bool get_attach_state = 6;
    if (has_get_attach_state()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 mail_id_s = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_id_s_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_id_s(i));
    }
    total_size += 1 * this->mail_id_s_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sync_ss_mul_mails_state_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sync_ss_mul_mails_state_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sync_ss_mul_mails_state_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sync_ss_mul_mails_state_req::MergeFrom(const sync_ss_mul_mails_state_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_id_s_.MergeFrom(from.mail_id_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_read_state()) {
      set_read_state(from.read_state());
    }
    if (from.has_get_attach_state()) {
      set_get_attach_state(from.get_attach_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sync_ss_mul_mails_state_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sync_ss_mul_mails_state_req::CopyFrom(const sync_ss_mul_mails_state_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sync_ss_mul_mails_state_req::IsInitialized() const {

  return true;
}

void sync_ss_mul_mails_state_req::Swap(sync_ss_mul_mails_state_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    mail_id_s_.Swap(&other->mail_id_s_);
    std::swap(role_id_, other->role_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(read_state_, other->read_state_);
    std::swap(get_attach_state_, other->get_attach_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sync_ss_mul_mails_state_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sync_ss_mul_mails_state_req_descriptor_;
  metadata.reflection = sync_ss_mul_mails_state_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sync_ss_mul_mails_state_ack::kProtoidFieldNumber;
const int sync_ss_mul_mails_state_ack::kMailIdSFieldNumber;
const int sync_ss_mul_mails_state_ack::kRoleIdFieldNumber;
const int sync_ss_mul_mails_state_ack::kErrorFieldNumber;
const int sync_ss_mul_mails_state_ack::kReadStateFieldNumber;
const int sync_ss_mul_mails_state_ack::kGetAttachStateFieldNumber;
#endif  // !_MSC_VER

sync_ss_mul_mails_state_ack::sync_ss_mul_mails_state_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sync_ss_mul_mails_state_ack::InitAsDefaultInstance() {
}

sync_ss_mul_mails_state_ack::sync_ss_mul_mails_state_ack(const sync_ss_mul_mails_state_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sync_ss_mul_mails_state_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 353;
  role_id_ = GOOGLE_ULONGLONG(0);
  error_ = 0;
  read_state_ = false;
  get_attach_state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sync_ss_mul_mails_state_ack::~sync_ss_mul_mails_state_ack() {
  SharedDtor();
}

void sync_ss_mul_mails_state_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sync_ss_mul_mails_state_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sync_ss_mul_mails_state_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sync_ss_mul_mails_state_ack_descriptor_;
}

const sync_ss_mul_mails_state_ack& sync_ss_mul_mails_state_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

sync_ss_mul_mails_state_ack* sync_ss_mul_mails_state_ack::default_instance_ = NULL;

sync_ss_mul_mails_state_ack* sync_ss_mul_mails_state_ack::New() const {
  return new sync_ss_mul_mails_state_ack;
}

void sync_ss_mul_mails_state_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 353;
    role_id_ = GOOGLE_ULONGLONG(0);
    error_ = 0;
    read_state_ = false;
    get_attach_state_ = false;
  }
  mail_id_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sync_ss_mul_mails_state_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = sync_ss_mul_mails_state_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id_s;
        break;
      }

      // repeated uint64 mail_id_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_mail_id_s())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_id_s())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id_s;
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_read_state;
        break;
      }

      // optional bool read_state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_state_)));
          set_has_read_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_get_attach_state;
        break;
      }

      // optional bool get_attach_state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_attach_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_attach_state_)));
          set_has_get_attach_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sync_ss_mul_mails_state_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = sync_ss_mul_mails_state_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 mail_id_s = 2;
  for (int i = 0; i < this->mail_id_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->mail_id_s(i), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional .SProtoSpace.MsgErrorType error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error(), output);
  }

  // optional bool read_state = 5;
  if (has_read_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->read_state(), output);
  }

  // optional bool get_attach_state = 6;
  if (has_get_attach_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->get_attach_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sync_ss_mul_mails_state_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = sync_ss_mul_mails_state_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 mail_id_s = 2;
  for (int i = 0; i < this->mail_id_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->mail_id_s(i), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional .SProtoSpace.MsgErrorType error = 4;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->error(), target);
  }

  // optional bool read_state = 5;
  if (has_read_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->read_state(), target);
  }

  // optional bool get_attach_state = 6;
  if (has_get_attach_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->get_attach_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sync_ss_mul_mails_state_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = sync_ss_mul_mails_state_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.MsgErrorType error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional bool read_state = 5;
    if (has_read_state()) {
      total_size += 1 + 1;
    }

    // optional bool get_attach_state = 6;
    if (has_get_attach_state()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 mail_id_s = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_id_s_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_id_s(i));
    }
    total_size += 1 * this->mail_id_s_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sync_ss_mul_mails_state_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sync_ss_mul_mails_state_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sync_ss_mul_mails_state_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sync_ss_mul_mails_state_ack::MergeFrom(const sync_ss_mul_mails_state_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_id_s_.MergeFrom(from.mail_id_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_read_state()) {
      set_read_state(from.read_state());
    }
    if (from.has_get_attach_state()) {
      set_get_attach_state(from.get_attach_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sync_ss_mul_mails_state_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sync_ss_mul_mails_state_ack::CopyFrom(const sync_ss_mul_mails_state_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sync_ss_mul_mails_state_ack::IsInitialized() const {

  return true;
}

void sync_ss_mul_mails_state_ack::Swap(sync_ss_mul_mails_state_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    mail_id_s_.Swap(&other->mail_id_s_);
    std::swap(role_id_, other->role_id_);
    std::swap(error_, other->error_);
    std::swap(read_state_, other->read_state_);
    std::swap(get_attach_state_, other->get_attach_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sync_ss_mul_mails_state_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sync_ss_mul_mails_state_ack_descriptor_;
  metadata.reflection = sync_ss_mul_mails_state_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_mails_ss_req::kProtoidFieldNumber;
const int get_mails_ss_req::kRoleIdFieldNumber;
const int get_mails_ss_req::kTimeFieldNumber;
const int get_mails_ss_req::kGameIdFieldNumber;
#endif  // !_MSC_VER

get_mails_ss_req::get_mails_ss_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_mails_ss_req::InitAsDefaultInstance() {
}

get_mails_ss_req::get_mails_ss_req(const get_mails_ss_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_mails_ss_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 354;
  role_id_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  game_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_mails_ss_req::~get_mails_ss_req() {
  SharedDtor();
}

void get_mails_ss_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_mails_ss_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_mails_ss_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_mails_ss_req_descriptor_;
}

const get_mails_ss_req& get_mails_ss_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

get_mails_ss_req* get_mails_ss_req::default_instance_ = NULL;

get_mails_ss_req* get_mails_ss_req::New() const {
  return new get_mails_ss_req;
}

void get_mails_ss_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 354;
    role_id_ = GOOGLE_ULONGLONG(0);
    time_ = GOOGLE_ULONGLONG(0);
    game_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_mails_ss_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = get_mails_ss_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_id;
        break;
      }

      // optional uint64 game_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_mails_ss_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = get_mails_ss_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // optional uint64 game_id = 4;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_mails_ss_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = get_mails_ss_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // optional uint64 game_id = 4;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_mails_ss_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = get_mails_ss_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint64 game_id = 4;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_mails_ss_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_mails_ss_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_mails_ss_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_mails_ss_req::MergeFrom(const get_mails_ss_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_mails_ss_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_mails_ss_req::CopyFrom(const get_mails_ss_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_mails_ss_req::IsInitialized() const {

  return true;
}

void get_mails_ss_req::Swap(get_mails_ss_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(time_, other->time_);
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_mails_ss_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_mails_ss_req_descriptor_;
  metadata.reflection = get_mails_ss_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_mails_ss_ack::kProtoidFieldNumber;
const int get_mails_ss_ack::kRoleIdFieldNumber;
const int get_mails_ss_ack::kTimeFieldNumber;
#endif  // !_MSC_VER

get_mails_ss_ack::get_mails_ss_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_mails_ss_ack::InitAsDefaultInstance() {
}

get_mails_ss_ack::get_mails_ss_ack(const get_mails_ss_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_mails_ss_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 355;
  role_id_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_mails_ss_ack::~get_mails_ss_ack() {
  SharedDtor();
}

void get_mails_ss_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_mails_ss_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_mails_ss_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_mails_ss_ack_descriptor_;
}

const get_mails_ss_ack& get_mails_ss_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

get_mails_ss_ack* get_mails_ss_ack::default_instance_ = NULL;

get_mails_ss_ack* get_mails_ss_ack::New() const {
  return new get_mails_ss_ack;
}

void get_mails_ss_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 355;
    role_id_ = GOOGLE_ULONGLONG(0);
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_mails_ss_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = get_mails_ss_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_mails_ss_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = get_mails_ss_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_mails_ss_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = get_mails_ss_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_mails_ss_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = get_mails_ss_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_mails_ss_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_mails_ss_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_mails_ss_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_mails_ss_ack::MergeFrom(const get_mails_ss_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_mails_ss_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_mails_ss_ack::CopyFrom(const get_mails_ss_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_mails_ss_ack::IsInitialized() const {

  return true;
}

void get_mails_ss_ack::Swap(get_mails_ss_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_mails_ss_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_mails_ss_ack_descriptor_;
  metadata.reflection = get_mails_ss_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gen_mails_ss_req::kProtoidFieldNumber;
const int gen_mails_ss_req::kRoleIdFieldNumber;
const int gen_mails_ss_req::kTimeFieldNumber;
const int gen_mails_ss_req::kGameIdFieldNumber;
const int gen_mails_ss_req::kMaxIdFieldNumber;
#endif  // !_MSC_VER

gen_mails_ss_req::gen_mails_ss_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gen_mails_ss_req::InitAsDefaultInstance() {
}

gen_mails_ss_req::gen_mails_ss_req(const gen_mails_ss_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gen_mails_ss_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 356;
  role_id_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  game_id_ = GOOGLE_ULONGLONG(0);
  max_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gen_mails_ss_req::~gen_mails_ss_req() {
  SharedDtor();
}

void gen_mails_ss_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gen_mails_ss_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gen_mails_ss_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gen_mails_ss_req_descriptor_;
}

const gen_mails_ss_req& gen_mails_ss_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

gen_mails_ss_req* gen_mails_ss_req::default_instance_ = NULL;

gen_mails_ss_req* gen_mails_ss_req::New() const {
  return new gen_mails_ss_req;
}

void gen_mails_ss_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 356;
    role_id_ = GOOGLE_ULONGLONG(0);
    time_ = GOOGLE_ULONGLONG(0);
    game_id_ = GOOGLE_ULONGLONG(0);
    max_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gen_mails_ss_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gen_mails_ss_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_id;
        break;
      }

      // optional uint64 game_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_id;
        break;
      }

      // optional uint64 max_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_id_)));
          set_has_max_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gen_mails_ss_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gen_mails_ss_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // optional uint64 game_id = 4;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->game_id(), output);
  }

  // optional uint64 max_id = 5;
  if (has_max_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->max_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gen_mails_ss_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gen_mails_ss_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // optional uint64 game_id = 4;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->game_id(), target);
  }

  // optional uint64 max_id = 5;
  if (has_max_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->max_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gen_mails_ss_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gen_mails_ss_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint64 game_id = 4;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_id());
    }

    // optional uint64 max_id = 5;
    if (has_max_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gen_mails_ss_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gen_mails_ss_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gen_mails_ss_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gen_mails_ss_req::MergeFrom(const gen_mails_ss_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_max_id()) {
      set_max_id(from.max_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gen_mails_ss_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gen_mails_ss_req::CopyFrom(const gen_mails_ss_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gen_mails_ss_req::IsInitialized() const {

  return true;
}

void gen_mails_ss_req::Swap(gen_mails_ss_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(time_, other->time_);
    std::swap(game_id_, other->game_id_);
    std::swap(max_id_, other->max_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gen_mails_ss_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gen_mails_ss_req_descriptor_;
  metadata.reflection = gen_mails_ss_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gen_mails_ss_ack::kProtoidFieldNumber;
const int gen_mails_ss_ack::kMailsFieldNumber;
const int gen_mails_ss_ack::kRoleIdFieldNumber;
#endif  // !_MSC_VER

gen_mails_ss_ack::gen_mails_ss_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gen_mails_ss_ack::InitAsDefaultInstance() {
}

gen_mails_ss_ack::gen_mails_ss_ack(const gen_mails_ss_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gen_mails_ss_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 357;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gen_mails_ss_ack::~gen_mails_ss_ack() {
  SharedDtor();
}

void gen_mails_ss_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gen_mails_ss_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gen_mails_ss_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gen_mails_ss_ack_descriptor_;
}

const gen_mails_ss_ack& gen_mails_ss_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

gen_mails_ss_ack* gen_mails_ss_ack::default_instance_ = NULL;

gen_mails_ss_ack* gen_mails_ss_ack::New() const {
  return new gen_mails_ss_ack;
}

void gen_mails_ss_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 357;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  mails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gen_mails_ss_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gen_mails_ss_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mails;
        break;
      }

      // repeated .SProtoSpace.mail mails = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mails;
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gen_mails_ss_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gen_mails_ss_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.mail mails = 2;
  for (int i = 0; i < this->mails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mails(i), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gen_mails_ss_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gen_mails_ss_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.mail mails = 2;
  for (int i = 0; i < this->mails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mails(i), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gen_mails_ss_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gen_mails_ss_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  // repeated .SProtoSpace.mail mails = 2;
  total_size += 1 * this->mails_size();
  for (int i = 0; i < this->mails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gen_mails_ss_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gen_mails_ss_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gen_mails_ss_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gen_mails_ss_ack::MergeFrom(const gen_mails_ss_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mails_.MergeFrom(from.mails_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gen_mails_ss_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gen_mails_ss_ack::CopyFrom(const gen_mails_ss_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gen_mails_ss_ack::IsInitialized() const {

  return true;
}

void gen_mails_ss_ack::Swap(gen_mails_ss_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    mails_.Swap(&other->mails_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gen_mails_ss_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gen_mails_ss_ack_descriptor_;
  metadata.reflection = gen_mails_ss_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int send_mail_ss_req::kProtoidFieldNumber;
const int send_mail_ss_req::kMailFieldNumber;
const int send_mail_ss_req::kGameIdFieldNumber;
const int send_mail_ss_req::kToRoleIdFieldNumber;
const int send_mail_ss_req::kToRoleNameFieldNumber;
const int send_mail_ss_req::kTypeFieldNumber;
const int send_mail_ss_req::kSendBackFieldNumber;
#endif  // !_MSC_VER

send_mail_ss_req::send_mail_ss_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void send_mail_ss_req::InitAsDefaultInstance() {
  mail_ = const_cast< ::SProtoSpace::mail*>(&::SProtoSpace::mail::default_instance());
}

send_mail_ss_req::send_mail_ss_req(const send_mail_ss_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void send_mail_ss_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 358;
  mail_ = NULL;
  game_id_ = GOOGLE_ULONGLONG(0);
  to_role_id_ = GOOGLE_ULONGLONG(0);
  to_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  send_back_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

send_mail_ss_req::~send_mail_ss_req() {
  SharedDtor();
}

void send_mail_ss_req::SharedDtor() {
  if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_role_name_;
  }
  if (this != default_instance_) {
    delete mail_;
  }
}

void send_mail_ss_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* send_mail_ss_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return send_mail_ss_req_descriptor_;
}

const send_mail_ss_req& send_mail_ss_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

send_mail_ss_req* send_mail_ss_req::default_instance_ = NULL;

send_mail_ss_req* send_mail_ss_req::New() const {
  return new send_mail_ss_req;
}

void send_mail_ss_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 358;
    if (has_mail()) {
      if (mail_ != NULL) mail_->::SProtoSpace::mail::Clear();
    }
    game_id_ = GOOGLE_ULONGLONG(0);
    to_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_to_role_name()) {
      if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
        to_role_name_->clear();
      }
    }
    type_ = 1;
    send_back_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool send_mail_ss_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = send_mail_ss_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail;
        break;
      }

      // optional .SProtoSpace.mail mail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_id;
        break;
      }

      // optional uint64 game_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_to_role_id;
        break;
      }

      // optional uint64 to_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_role_id_)));
          set_has_to_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_to_role_name;
        break;
      }

      // optional string to_role_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_role_name().data(), this->to_role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.eSendMailType type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eSendMailType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::eSendMailType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_send_back;
        break;
      }

      // optional bool send_back = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_back:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_back_)));
          set_has_send_back();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void send_mail_ss_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = send_mail_ss_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.mail mail = 2;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mail(), output);
  }

  // optional uint64 game_id = 3;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->game_id(), output);
  }

  // optional uint64 to_role_id = 4;
  if (has_to_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->to_role_id(), output);
  }

  // optional string to_role_name = 5;
  if (has_to_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_role_name().data(), this->to_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->to_role_name(), output);
  }

  // optional .SProtoSpace.eSendMailType type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  // optional bool send_back = 7;
  if (has_send_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->send_back(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* send_mail_ss_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = send_mail_ss_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.mail mail = 2;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mail(), target);
  }

  // optional uint64 game_id = 3;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->game_id(), target);
  }

  // optional uint64 to_role_id = 4;
  if (has_to_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->to_role_id(), target);
  }

  // optional string to_role_name = 5;
  if (has_to_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_role_name().data(), this->to_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->to_role_name(), target);
  }

  // optional .SProtoSpace.eSendMailType type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  // optional bool send_back = 7;
  if (has_send_back()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->send_back(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int send_mail_ss_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = send_mail_ss_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.mail mail = 2;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

    // optional uint64 game_id = 3;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_id());
    }

    // optional uint64 to_role_id = 4;
    if (has_to_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_role_id());
    }

    // optional string to_role_name = 5;
    if (has_to_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_role_name());
    }

    // optional .SProtoSpace.eSendMailType type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool send_back = 7;
    if (has_send_back()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void send_mail_ss_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const send_mail_ss_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const send_mail_ss_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void send_mail_ss_req::MergeFrom(const send_mail_ss_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_mail()) {
      mutable_mail()->::SProtoSpace::mail::MergeFrom(from.mail());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_to_role_id()) {
      set_to_role_id(from.to_role_id());
    }
    if (from.has_to_role_name()) {
      set_to_role_name(from.to_role_name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_send_back()) {
      set_send_back(from.send_back());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void send_mail_ss_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void send_mail_ss_req::CopyFrom(const send_mail_ss_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_mail_ss_req::IsInitialized() const {

  return true;
}

void send_mail_ss_req::Swap(send_mail_ss_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(mail_, other->mail_);
    std::swap(game_id_, other->game_id_);
    std::swap(to_role_id_, other->to_role_id_);
    std::swap(to_role_name_, other->to_role_name_);
    std::swap(type_, other->type_);
    std::swap(send_back_, other->send_back_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata send_mail_ss_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = send_mail_ss_req_descriptor_;
  metadata.reflection = send_mail_ss_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int send_mail_ss_ack::kProtoidFieldNumber;
const int send_mail_ss_ack::kMailFieldNumber;
const int send_mail_ss_ack::kGameIdFieldNumber;
const int send_mail_ss_ack::kErrorFieldNumber;
#endif  // !_MSC_VER

send_mail_ss_ack::send_mail_ss_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void send_mail_ss_ack::InitAsDefaultInstance() {
  mail_ = const_cast< ::SProtoSpace::mail*>(&::SProtoSpace::mail::default_instance());
}

send_mail_ss_ack::send_mail_ss_ack(const send_mail_ss_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void send_mail_ss_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 359;
  mail_ = NULL;
  game_id_ = GOOGLE_ULONGLONG(0);
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

send_mail_ss_ack::~send_mail_ss_ack() {
  SharedDtor();
}

void send_mail_ss_ack::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void send_mail_ss_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* send_mail_ss_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return send_mail_ss_ack_descriptor_;
}

const send_mail_ss_ack& send_mail_ss_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

send_mail_ss_ack* send_mail_ss_ack::default_instance_ = NULL;

send_mail_ss_ack* send_mail_ss_ack::New() const {
  return new send_mail_ss_ack;
}

void send_mail_ss_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 359;
    if (has_mail()) {
      if (mail_ != NULL) mail_->::SProtoSpace::mail::Clear();
    }
    game_id_ = GOOGLE_ULONGLONG(0);
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool send_mail_ss_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = send_mail_ss_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail;
        break;
      }

      // optional .SProtoSpace.mail mail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_id;
        break;
      }

      // optional uint64 game_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void send_mail_ss_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = send_mail_ss_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.mail mail = 2;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mail(), output);
  }

  // optional uint64 game_id = 3;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->game_id(), output);
  }

  // optional .SProtoSpace.MsgErrorType error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* send_mail_ss_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = send_mail_ss_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.mail mail = 2;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mail(), target);
  }

  // optional uint64 game_id = 3;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->game_id(), target);
  }

  // optional .SProtoSpace.MsgErrorType error = 4;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int send_mail_ss_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = send_mail_ss_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.mail mail = 2;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

    // optional uint64 game_id = 3;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_id());
    }

    // optional .SProtoSpace.MsgErrorType error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void send_mail_ss_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const send_mail_ss_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const send_mail_ss_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void send_mail_ss_ack::MergeFrom(const send_mail_ss_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_mail()) {
      mutable_mail()->::SProtoSpace::mail::MergeFrom(from.mail());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void send_mail_ss_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void send_mail_ss_ack::CopyFrom(const send_mail_ss_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_mail_ss_ack::IsInitialized() const {

  return true;
}

void send_mail_ss_ack::Swap(send_mail_ss_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(mail_, other->mail_);
    std::swap(game_id_, other->game_id_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata send_mail_ss_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = send_mail_ss_ack_descriptor_;
  metadata.reflection = send_mail_ss_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int recv_mail_ss_ntf::kProtoidFieldNumber;
const int recv_mail_ss_ntf::kMailFieldNumber;
const int recv_mail_ss_ntf::kGameIdFieldNumber;
const int recv_mail_ss_ntf::kErrorFieldNumber;
#endif  // !_MSC_VER

recv_mail_ss_ntf::recv_mail_ss_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void recv_mail_ss_ntf::InitAsDefaultInstance() {
  mail_ = const_cast< ::SProtoSpace::mail*>(&::SProtoSpace::mail::default_instance());
}

recv_mail_ss_ntf::recv_mail_ss_ntf(const recv_mail_ss_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void recv_mail_ss_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 360;
  mail_ = NULL;
  game_id_ = GOOGLE_ULONGLONG(0);
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

recv_mail_ss_ntf::~recv_mail_ss_ntf() {
  SharedDtor();
}

void recv_mail_ss_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void recv_mail_ss_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* recv_mail_ss_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return recv_mail_ss_ntf_descriptor_;
}

const recv_mail_ss_ntf& recv_mail_ss_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

recv_mail_ss_ntf* recv_mail_ss_ntf::default_instance_ = NULL;

recv_mail_ss_ntf* recv_mail_ss_ntf::New() const {
  return new recv_mail_ss_ntf;
}

void recv_mail_ss_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 360;
    if (has_mail()) {
      if (mail_ != NULL) mail_->::SProtoSpace::mail::Clear();
    }
    game_id_ = GOOGLE_ULONGLONG(0);
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool recv_mail_ss_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = recv_mail_ss_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail;
        break;
      }

      // optional .SProtoSpace.mail mail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_id;
        break;
      }

      // optional uint64 game_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void recv_mail_ss_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = recv_mail_ss_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.mail mail = 2;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mail(), output);
  }

  // optional uint64 game_id = 3;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->game_id(), output);
  }

  // optional .SProtoSpace.MsgErrorType error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* recv_mail_ss_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = recv_mail_ss_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.mail mail = 2;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mail(), target);
  }

  // optional uint64 game_id = 3;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->game_id(), target);
  }

  // optional .SProtoSpace.MsgErrorType error = 4;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int recv_mail_ss_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = recv_mail_ss_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.mail mail = 2;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

    // optional uint64 game_id = 3;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_id());
    }

    // optional .SProtoSpace.MsgErrorType error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void recv_mail_ss_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const recv_mail_ss_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const recv_mail_ss_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void recv_mail_ss_ntf::MergeFrom(const recv_mail_ss_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_mail()) {
      mutable_mail()->::SProtoSpace::mail::MergeFrom(from.mail());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void recv_mail_ss_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recv_mail_ss_ntf::CopyFrom(const recv_mail_ss_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recv_mail_ss_ntf::IsInitialized() const {

  return true;
}

void recv_mail_ss_ntf::Swap(recv_mail_ss_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(mail_, other->mail_);
    std::swap(game_id_, other->game_id_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata recv_mail_ss_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = recv_mail_ss_ntf_descriptor_;
  metadata.reflection = recv_mail_ss_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_add_template_ss_req::kProtoidFieldNumber;
const int mail_add_template_ss_req::kTypeFieldNumber;
const int mail_add_template_ss_req::kTemplateFieldNumber;
#endif  // !_MSC_VER

mail_add_template_ss_req::mail_add_template_ss_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_add_template_ss_req::InitAsDefaultInstance() {
  template__ = const_cast< ::SProtoSpace::mail_template*>(&::SProtoSpace::mail_template::default_instance());
}

mail_add_template_ss_req::mail_add_template_ss_req(const mail_add_template_ss_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_add_template_ss_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 361;
  type_ = 0;
  template__ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_add_template_ss_req::~mail_add_template_ss_req() {
  SharedDtor();
}

void mail_add_template_ss_req::SharedDtor() {
  if (this != default_instance_) {
    delete template__;
  }
}

void mail_add_template_ss_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_add_template_ss_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_add_template_ss_req_descriptor_;
}

const mail_add_template_ss_req& mail_add_template_ss_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

mail_add_template_ss_req* mail_add_template_ss_req::default_instance_ = NULL;

mail_add_template_ss_req* mail_add_template_ss_req::New() const {
  return new mail_add_template_ss_req;
}

void mail_add_template_ss_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 361;
    type_ = 0;
    if (has_template_()) {
      if (template__ != NULL) template__->::SProtoSpace::mail_template::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_add_template_ss_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_add_template_ss_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.eMailAddTemplateType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eMailAddTemplateType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::eMailAddTemplateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_template;
        break;
      }

      // optional .SProtoSpace.mail_template template = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_template:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_template_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_add_template_ss_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_add_template_ss_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.eMailAddTemplateType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .SProtoSpace.mail_template template = 3;
  if (has_template_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->template_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_add_template_ss_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_add_template_ss_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.eMailAddTemplateType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .SProtoSpace.mail_template template = 3;
  if (has_template_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->template_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_add_template_ss_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_add_template_ss_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.eMailAddTemplateType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .SProtoSpace.mail_template template = 3;
    if (has_template_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->template_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_add_template_ss_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_add_template_ss_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_add_template_ss_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_add_template_ss_req::MergeFrom(const mail_add_template_ss_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_template_()) {
      mutable_template_()->::SProtoSpace::mail_template::MergeFrom(from.template_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_add_template_ss_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_add_template_ss_req::CopyFrom(const mail_add_template_ss_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_add_template_ss_req::IsInitialized() const {

  return true;
}

void mail_add_template_ss_req::Swap(mail_add_template_ss_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(type_, other->type_);
    std::swap(template__, other->template__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_add_template_ss_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_add_template_ss_req_descriptor_;
  metadata.reflection = mail_add_template_ss_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_add_template_ss_ack::kProtoidFieldNumber;
const int mail_add_template_ss_ack::kTypeFieldNumber;
const int mail_add_template_ss_ack::kTemplateFieldNumber;
#endif  // !_MSC_VER

mail_add_template_ss_ack::mail_add_template_ss_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_add_template_ss_ack::InitAsDefaultInstance() {
  template__ = const_cast< ::SProtoSpace::mail_template*>(&::SProtoSpace::mail_template::default_instance());
}

mail_add_template_ss_ack::mail_add_template_ss_ack(const mail_add_template_ss_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_add_template_ss_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 362;
  type_ = 0;
  template__ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_add_template_ss_ack::~mail_add_template_ss_ack() {
  SharedDtor();
}

void mail_add_template_ss_ack::SharedDtor() {
  if (this != default_instance_) {
    delete template__;
  }
}

void mail_add_template_ss_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_add_template_ss_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_add_template_ss_ack_descriptor_;
}

const mail_add_template_ss_ack& mail_add_template_ss_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

mail_add_template_ss_ack* mail_add_template_ss_ack::default_instance_ = NULL;

mail_add_template_ss_ack* mail_add_template_ss_ack::New() const {
  return new mail_add_template_ss_ack;
}

void mail_add_template_ss_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 362;
    type_ = 0;
    if (has_template_()) {
      if (template__ != NULL) template__->::SProtoSpace::mail_template::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_add_template_ss_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_add_template_ss_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.eMailAddTemplateType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eMailAddTemplateType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::eMailAddTemplateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_template;
        break;
      }

      // optional .SProtoSpace.mail_template template = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_template:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_template_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_add_template_ss_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_add_template_ss_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.eMailAddTemplateType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .SProtoSpace.mail_template template = 3;
  if (has_template_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->template_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_add_template_ss_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_add_template_ss_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.eMailAddTemplateType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .SProtoSpace.mail_template template = 3;
  if (has_template_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->template_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_add_template_ss_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_add_template_ss_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.eMailAddTemplateType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .SProtoSpace.mail_template template = 3;
    if (has_template_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->template_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_add_template_ss_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_add_template_ss_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_add_template_ss_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_add_template_ss_ack::MergeFrom(const mail_add_template_ss_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_template_()) {
      mutable_template_()->::SProtoSpace::mail_template::MergeFrom(from.template_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_add_template_ss_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_add_template_ss_ack::CopyFrom(const mail_add_template_ss_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_add_template_ss_ack::IsInitialized() const {

  return true;
}

void mail_add_template_ss_ack::Swap(mail_add_template_ss_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(type_, other->type_);
    std::swap(template__, other->template__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_add_template_ss_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_add_template_ss_ack_descriptor_;
  metadata.reflection = mail_add_template_ss_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_add_template_ss_ntf::kProtoidFieldNumber;
const int mail_add_template_ss_ntf::kTypeFieldNumber;
const int mail_add_template_ss_ntf::kTemplateFieldNumber;
#endif  // !_MSC_VER

mail_add_template_ss_ntf::mail_add_template_ss_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_add_template_ss_ntf::InitAsDefaultInstance() {
  template__ = const_cast< ::SProtoSpace::mail_template*>(&::SProtoSpace::mail_template::default_instance());
}

mail_add_template_ss_ntf::mail_add_template_ss_ntf(const mail_add_template_ss_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_add_template_ss_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 363;
  type_ = 0;
  template__ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_add_template_ss_ntf::~mail_add_template_ss_ntf() {
  SharedDtor();
}

void mail_add_template_ss_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete template__;
  }
}

void mail_add_template_ss_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_add_template_ss_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_add_template_ss_ntf_descriptor_;
}

const mail_add_template_ss_ntf& mail_add_template_ss_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

mail_add_template_ss_ntf* mail_add_template_ss_ntf::default_instance_ = NULL;

mail_add_template_ss_ntf* mail_add_template_ss_ntf::New() const {
  return new mail_add_template_ss_ntf;
}

void mail_add_template_ss_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 363;
    type_ = 0;
    if (has_template_()) {
      if (template__ != NULL) template__->::SProtoSpace::mail_template::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_add_template_ss_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_add_template_ss_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.eMailAddTemplateType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eMailAddTemplateType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::eMailAddTemplateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_template;
        break;
      }

      // optional .SProtoSpace.mail_template template = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_template:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_template_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_add_template_ss_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_add_template_ss_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.eMailAddTemplateType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .SProtoSpace.mail_template template = 3;
  if (has_template_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->template_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_add_template_ss_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_add_template_ss_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.eMailAddTemplateType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .SProtoSpace.mail_template template = 3;
  if (has_template_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->template_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_add_template_ss_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_add_template_ss_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.eMailAddTemplateType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .SProtoSpace.mail_template template = 3;
    if (has_template_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->template_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_add_template_ss_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_add_template_ss_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_add_template_ss_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_add_template_ss_ntf::MergeFrom(const mail_add_template_ss_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_template_()) {
      mutable_template_()->::SProtoSpace::mail_template::MergeFrom(from.template_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_add_template_ss_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_add_template_ss_ntf::CopyFrom(const mail_add_template_ss_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_add_template_ss_ntf::IsInitialized() const {

  return true;
}

void mail_add_template_ss_ntf::Swap(mail_add_template_ss_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(type_, other->type_);
    std::swap(template__, other->template__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_add_template_ss_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_add_template_ss_ntf_descriptor_;
  metadata.reflection = mail_add_template_ss_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_new_template_ss_ntf::kProtoidFieldNumber;
#endif  // !_MSC_VER

mail_new_template_ss_ntf::mail_new_template_ss_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_new_template_ss_ntf::InitAsDefaultInstance() {
}

mail_new_template_ss_ntf::mail_new_template_ss_ntf(const mail_new_template_ss_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_new_template_ss_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 364;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_new_template_ss_ntf::~mail_new_template_ss_ntf() {
  SharedDtor();
}

void mail_new_template_ss_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_new_template_ss_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_new_template_ss_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_new_template_ss_ntf_descriptor_;
}

const mail_new_template_ss_ntf& mail_new_template_ss_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

mail_new_template_ss_ntf* mail_new_template_ss_ntf::default_instance_ = NULL;

mail_new_template_ss_ntf* mail_new_template_ss_ntf::New() const {
  return new mail_new_template_ss_ntf;
}

void mail_new_template_ss_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 364;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_new_template_ss_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_new_template_ss_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_new_template_ss_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_new_template_ss_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_new_template_ss_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_new_template_ss_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_new_template_ss_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_new_template_ss_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_new_template_ss_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_new_template_ss_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_new_template_ss_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_new_template_ss_ntf::MergeFrom(const mail_new_template_ss_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_new_template_ss_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_new_template_ss_ntf::CopyFrom(const mail_new_template_ss_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_new_template_ss_ntf::IsInitialized() const {

  return true;
}

void mail_new_template_ss_ntf::Swap(mail_new_template_ss_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_new_template_ss_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_new_template_ss_ntf_descriptor_;
  metadata.reflection = mail_new_template_ss_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_red_pt_ss_req::kProtoidFieldNumber;
const int mail_red_pt_ss_req::kRoleIdFieldNumber;
const int mail_red_pt_ss_req::kGameIdFieldNumber;
const int mail_red_pt_ss_req::kMailGTemplateFieldNumber;
#endif  // !_MSC_VER

mail_red_pt_ss_req::mail_red_pt_ss_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_red_pt_ss_req::InitAsDefaultInstance() {
}

mail_red_pt_ss_req::mail_red_pt_ss_req(const mail_red_pt_ss_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_red_pt_ss_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 365;
  role_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = GOOGLE_ULONGLONG(0);
  mail_g_template_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_red_pt_ss_req::~mail_red_pt_ss_req() {
  SharedDtor();
}

void mail_red_pt_ss_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_red_pt_ss_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_red_pt_ss_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_red_pt_ss_req_descriptor_;
}

const mail_red_pt_ss_req& mail_red_pt_ss_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

mail_red_pt_ss_req* mail_red_pt_ss_req::default_instance_ = NULL;

mail_red_pt_ss_req* mail_red_pt_ss_req::New() const {
  return new mail_red_pt_ss_req;
}

void mail_red_pt_ss_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 365;
    role_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = GOOGLE_ULONGLONG(0);
    mail_g_template_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_red_pt_ss_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_red_pt_ss_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_id;
        break;
      }

      // optional uint64 game_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mail_g_template;
        break;
      }

      // optional uint64 mail_g_template = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_g_template:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_g_template_)));
          set_has_mail_g_template();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_red_pt_ss_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_red_pt_ss_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint64 game_id = 3;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->game_id(), output);
  }

  // optional uint64 mail_g_template = 4;
  if (has_mail_g_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->mail_g_template(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_red_pt_ss_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_red_pt_ss_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint64 game_id = 3;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->game_id(), target);
  }

  // optional uint64 mail_g_template = 4;
  if (has_mail_g_template()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->mail_g_template(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_red_pt_ss_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_red_pt_ss_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 game_id = 3;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_id());
    }

    // optional uint64 mail_g_template = 4;
    if (has_mail_g_template()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_g_template());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_red_pt_ss_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_red_pt_ss_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_red_pt_ss_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_red_pt_ss_req::MergeFrom(const mail_red_pt_ss_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_mail_g_template()) {
      set_mail_g_template(from.mail_g_template());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_red_pt_ss_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_red_pt_ss_req::CopyFrom(const mail_red_pt_ss_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_red_pt_ss_req::IsInitialized() const {

  return true;
}

void mail_red_pt_ss_req::Swap(mail_red_pt_ss_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(mail_g_template_, other->mail_g_template_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_red_pt_ss_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_red_pt_ss_req_descriptor_;
  metadata.reflection = mail_red_pt_ss_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_red_pt_ss_ack::kProtoidFieldNumber;
const int mail_red_pt_ss_ack::kRoleIdFieldNumber;
#endif  // !_MSC_VER

mail_red_pt_ss_ack::mail_red_pt_ss_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_red_pt_ss_ack::InitAsDefaultInstance() {
}

mail_red_pt_ss_ack::mail_red_pt_ss_ack(const mail_red_pt_ss_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_red_pt_ss_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 366;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_red_pt_ss_ack::~mail_red_pt_ss_ack() {
  SharedDtor();
}

void mail_red_pt_ss_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_red_pt_ss_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_red_pt_ss_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_red_pt_ss_ack_descriptor_;
}

const mail_red_pt_ss_ack& mail_red_pt_ss_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fmail_2eproto();
  return *default_instance_;
}

mail_red_pt_ss_ack* mail_red_pt_ss_ack::default_instance_ = NULL;

mail_red_pt_ss_ack* mail_red_pt_ss_ack::New() const {
  return new mail_red_pt_ss_ack;
}

void mail_red_pt_ss_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 366;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_red_pt_ss_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_red_pt_ss_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_red_pt_ss_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_red_pt_ss_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_red_pt_ss_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_red_pt_ss_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_red_pt_ss_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = mail_red_pt_ss_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_red_pt_ss_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_red_pt_ss_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_red_pt_ss_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_red_pt_ss_ack::MergeFrom(const mail_red_pt_ss_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_red_pt_ss_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_red_pt_ss_ack::CopyFrom(const mail_red_pt_ss_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_red_pt_ss_ack::IsInitialized() const {

  return true;
}

void mail_red_pt_ss_ack::Swap(mail_red_pt_ss_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_red_pt_ss_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_red_pt_ss_ack_descriptor_;
  metadata.reflection = mail_red_pt_ss_ack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
