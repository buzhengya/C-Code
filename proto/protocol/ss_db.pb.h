// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_db.proto

#ifndef PROTOBUF_ss_5fdb_2eproto__INCLUDED
#define PROTOBUF_ss_5fdb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ss_protoid.pb.h"
#include "cm_roletype.pb.h"
#include "cm_battletype.pb.h"
#include "cm_activitytype.pb.h"
#include "cm_socialtype.pb.h"
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ss_5fdb_2eproto();
void protobuf_AssignDesc_ss_5fdb_2eproto();
void protobuf_ShutdownFile_ss_5fdb_2eproto();

class DataSaveInfo;
class role_show_info;
class db_offical_data;
class friend_intimacy;
class couple_love;
class role_base_data;
class unit_chest_data;
class unit_free_times_draw_card;
class unit_limit_draw_card;
class db_unit_draw_card;
class db_unit_draw_card_special;
class db_unit_mail_data;
class db_unit_mail_send_data;
class role_item_data;
class skill_data;
class db_skin_info;
class db_equip_data;
class unit_player_data;
class unit_player_base;
class role_player_data;
class role_show_data;
class hero_soul_data;
class bag_data;
class unit_hero_data;
class unit_formation_data;
class unit_role_pet_data;
class unit_role_pet_all;
class role_hero_data;
class unit_quest_data;
class unit_activity_data;
class unit_achieve_pt_award_data;
class role_quest_data;
class db_drop_spid;
class unit_soul_attr;
class unit_soul_data;
class role_soul_data;
class unit_discover_data;
class unit_chapter_data;
class res_instance_data;
class unit_res_instance_data;
class unit_section_star_data;
class unit_tower_data;
class hero_event_info;
class city_event_info;
class special_event_data;
class unit_adv_data;
class guide_step_data;
class unit_guide_data;
class unit_plot_little_game_data;
class role_level_data;
class unit_royal_data;
class royal_opt_info;
class role_royal_data;
class royal_task_data;
class friend_operation_info;
class unit_friend_data;
class unit_black_data;
class give_record_info;
class role_friend_data;
class db_shop_refresh_info;
class db_shop_item_info;
class buy_record_info;
class unit_shop_info;
class role_shop_data;
class harem_compete_info;
class role_harem_data;
class growing_flower_info;
class unit_flower_info;
class role_flower_data;
class unit_plot_screen_data;
class officer_apply_info;
class officer_base_info;
class role_officer_data;
class offical_battle_report_data;
class offical_battle_report;
class db_offical_apply_battle_data;
class offical_apply_battle_result_db;
class all_offical_apply_battle_result_db;
class db_offical_result_rank_data;
class db_my_offical_result_data;
class offical_rank_db;
class all_offical_rank_db;
class db_unit_fashion_data;
class role_fashion_data;
class db_role_all_data;
class redis_role_base;
class redis_role_show_hero;
class redis_role_battle_hero;
class redis_comment_all;
class redis_role_data;
class arena_user_data;
class db_get_redis_role_data_req;
class db_get_redis_role_data_ack;
class db_update_redis_role_data_ntf;
class db_check_apply_info_req;
class db_check_apply_info_ack;
class db_save_apply_info_req;
class db_update_apply_req;
class db_process_apply_info_req;
class db_process_apply_info_ack;
class db_search_friend_req;
class db_search_friend_ack;
class db_save_friend_opt_req;
class opt_record_info;
class db_check_opt_record_req;
class db_check_opt_record_ack;
class db_update_opt_record_req;
class db_get_recommend_friend_req;
class db_get_recommend_friend_ack;
class gs_get_role_data_req;
class db_role_data_ack;
class gs_role_leave_game;
class save_role_req;
class db_role_show_like_req;
class db_role_show_like_ack;
class db_role_show_comment_req;
class db_role_show_comment_ack;
class db_role_show_delete_comment_req;
class db_role_show_delete_comment_ack;
class db_role_show_get_comment_req;
class db_role_show_get_comment_ack;
class db_role_show_change_name_req;
class db_role_show_change_name_ack;
class db_role_show_get_like_req;
class db_role_show_get_like_ack;
class db_role_show_get_emotion_req;
class db_role_show_get_emotion_ack;
class db_role_show_write_emotion_req;
class db_role_show_write_emotion_ack;
class db_role_show_like_emotion_req;
class db_role_show_like_emotion_ack;
class db_role_show_comment_emotion_req;
class db_role_show_comment_emotion_ack;
class db_role_show_remove_emotion_req;
class db_role_show_remove_emotion_ack;
class db_role_show_remove_comment_req;
class db_role_show_remove_comment_ack;
class db_role_battle_info_req;
class db_role_battle_info_ack;
class db_account_role_data_req;
class db_account_role_data_ack;
class db_create_role_of_game;
class db_create_role_ack;
class game_role_info_req;
class game_role_info_ack;
class db_check_harem_compete_req;
class db_check_harem_compete_ack;
class db_harem_compete_clear_req;
class db_slap_emoji_info;
class db_get_harem_event_req;
class db_get_harem_event_ack;
class db_share_officer_upgrade_req;
class db_share_officer_upgrade_ack;
class db_get_share_officer_upgrade_req;
class db_get_share_officer_upgrade_ack;
class db_add_role_popularity;
class db_kick_role_req;
class db_kick_role_ack;
class db_load_offical_data_req;
class db_load_offical_data_ack;
class db_save_offical_data_req;

enum ERoleDataType {
  ROLE_DATA_NONE = 0,
  ROLE_DATA_BASE = 1,
  ROLE_DATA_ITEM = 2,
  ROLE_DATA_PLAYER = 3,
  ROLE_DATA_LEVEL = 4,
  ROLE_DATA_HERO = 5,
  ROLE_DATA_SOUL = 6,
  ROLE_DATA_TASK = 7,
  ROLE_DATA_ROYAL = 8,
  ROLE_DATA_SHOW = 9,
  ROLE_DATA_FRIEND = 10,
  ROLE_DATA_SHOP = 11,
  ROLE_DATA_HAREM = 12,
  ROLE_DATA_FLOWER = 13,
  ROLE_DATA_MAX = 14
};
bool ERoleDataType_IsValid(int value);
const ERoleDataType ERoleDataType_MIN = ROLE_DATA_NONE;
const ERoleDataType ERoleDataType_MAX = ROLE_DATA_MAX;
const int ERoleDataType_ARRAYSIZE = ERoleDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERoleDataType_descriptor();
inline const ::std::string& ERoleDataType_Name(ERoleDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERoleDataType_descriptor(), value);
}
inline bool ERoleDataType_Parse(
    const ::std::string& name, ERoleDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERoleDataType>(
    ERoleDataType_descriptor(), name, value);
}
enum ESQLMode {
  SQL_UPDATE = 1,
  SQL_DELETE = 2
};
bool ESQLMode_IsValid(int value);
const ESQLMode ESQLMode_MIN = SQL_UPDATE;
const ESQLMode ESQLMode_MAX = SQL_DELETE;
const int ESQLMode_ARRAYSIZE = ESQLMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESQLMode_descriptor();
inline const ::std::string& ESQLMode_Name(ESQLMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESQLMode_descriptor(), value);
}
inline bool ESQLMode_Parse(
    const ::std::string& name, ESQLMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESQLMode>(
    ESQLMode_descriptor(), name, value);
}
enum EGetRoleShowDataResult {
  GET_ROLE_SHOW_DATA_RESULT_SUCCESS = 1,
  GET_ROLE_SHOW_DATA_RESULT_DB_DATA = 2,
  GET_ROLE_SHOW_DATA_RESULT_ERROR = 3
};
bool EGetRoleShowDataResult_IsValid(int value);
const EGetRoleShowDataResult EGetRoleShowDataResult_MIN = GET_ROLE_SHOW_DATA_RESULT_SUCCESS;
const EGetRoleShowDataResult EGetRoleShowDataResult_MAX = GET_ROLE_SHOW_DATA_RESULT_ERROR;
const int EGetRoleShowDataResult_ARRAYSIZE = EGetRoleShowDataResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGetRoleShowDataResult_descriptor();
inline const ::std::string& EGetRoleShowDataResult_Name(EGetRoleShowDataResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGetRoleShowDataResult_descriptor(), value);
}
inline bool EGetRoleShowDataResult_Parse(
    const ::std::string& name, EGetRoleShowDataResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGetRoleShowDataResult>(
    EGetRoleShowDataResult_descriptor(), name, value);
}
enum EOnlineType {
  ONLINE_TYPE_LOGIN = 1,
  ONLINE_TYPE_CHANGE_SVR = 2
};
bool EOnlineType_IsValid(int value);
const EOnlineType EOnlineType_MIN = ONLINE_TYPE_LOGIN;
const EOnlineType EOnlineType_MAX = ONLINE_TYPE_CHANGE_SVR;
const int EOnlineType_ARRAYSIZE = EOnlineType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EOnlineType_descriptor();
inline const ::std::string& EOnlineType_Name(EOnlineType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EOnlineType_descriptor(), value);
}
inline bool EOnlineType_Parse(
    const ::std::string& name, EOnlineType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EOnlineType>(
    EOnlineType_descriptor(), name, value);
}
enum ESaveDataMode {
  SAVE_TO_CACHE = 1,
  SAVE_TO_DB = 2
};
bool ESaveDataMode_IsValid(int value);
const ESaveDataMode ESaveDataMode_MIN = SAVE_TO_CACHE;
const ESaveDataMode ESaveDataMode_MAX = SAVE_TO_DB;
const int ESaveDataMode_ARRAYSIZE = ESaveDataMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESaveDataMode_descriptor();
inline const ::std::string& ESaveDataMode_Name(ESaveDataMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESaveDataMode_descriptor(), value);
}
inline bool ESaveDataMode_Parse(
    const ::std::string& name, ESaveDataMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESaveDataMode>(
    ESaveDataMode_descriptor(), name, value);
}
// ===================================================================

class DataSaveInfo : public ::google::protobuf::Message {
 public:
  DataSaveInfo();
  virtual ~DataSaveInfo();

  DataSaveInfo(const DataSaveInfo& from);

  inline DataSaveInfo& operator=(const DataSaveInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataSaveInfo& default_instance();

  void Swap(DataSaveInfo* other);

  // implements Message ----------------------------------------------

  DataSaveInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataSaveInfo& from);
  void MergeFrom(const DataSaveInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ERoleDataType data_type = 1;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 1;
  inline ::SProtoSpace::ERoleDataType data_type() const;
  inline void set_data_type(::SProtoSpace::ERoleDataType value);

  // optional .SProtoSpace.ESQLMode sql_mode = 2;
  inline bool has_sql_mode() const;
  inline void clear_sql_mode();
  static const int kSqlModeFieldNumber = 2;
  inline ::SProtoSpace::ESQLMode sql_mode() const;
  inline void set_sql_mode(::SProtoSpace::ESQLMode value);

  // optional uint64 key_id = 3;
  inline bool has_key_id() const;
  inline void clear_key_id();
  static const int kKeyIdFieldNumber = 3;
  inline ::google::protobuf::uint64 key_id() const;
  inline void set_key_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.DataSaveInfo)
 private:
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_sql_mode();
  inline void clear_has_sql_mode();
  inline void set_has_key_id();
  inline void clear_has_key_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int data_type_;
  int sql_mode_;
  ::google::protobuf::uint64 key_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static DataSaveInfo* default_instance_;
};
// -------------------------------------------------------------------

class role_show_info : public ::google::protobuf::Message {
 public:
  role_show_info();
  virtual ~role_show_info();

  role_show_info(const role_show_info& from);

  inline role_show_info& operator=(const role_show_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_info& default_instance();

  void Swap(role_show_info* other);

  // implements Message ----------------------------------------------

  role_show_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_info& from);
  void MergeFrom(const role_show_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // repeated uint64 liked_list = 3;
  inline int liked_list_size() const;
  inline void clear_liked_list();
  static const int kLikedListFieldNumber = 3;
  inline ::google::protobuf::uint64 liked_list(int index) const;
  inline void set_liked_list(int index, ::google::protobuf::uint64 value);
  inline void add_liked_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      liked_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_liked_list();

  // optional uint32 like = 4;
  inline bool has_like() const;
  inline void clear_like();
  static const int kLikeFieldNumber = 4;
  inline ::google::protobuf::uint32 like() const;
  inline void set_like(::google::protobuf::uint32 value);

  // optional string signature = 5;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 5;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // optional .SProtoSpace.lsg_position_info position = 6;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 6;
  inline const ::SProtoSpace::lsg_position_info& position() const;
  inline ::SProtoSpace::lsg_position_info* mutable_position();
  inline ::SProtoSpace::lsg_position_info* release_position();
  inline void set_allocated_position(::SProtoSpace::lsg_position_info* position);

  // repeated uint64 show_hero_list = 7;
  inline int show_hero_list_size() const;
  inline void clear_show_hero_list();
  static const int kShowHeroListFieldNumber = 7;
  inline ::google::protobuf::uint64 show_hero_list(int index) const;
  inline void set_show_hero_list(int index, ::google::protobuf::uint64 value);
  inline void add_show_hero_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      show_hero_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_show_hero_list();

  // optional uint32 border = 8 [default = 1];
  inline bool has_border() const;
  inline void clear_border();
  static const int kBorderFieldNumber = 8;
  inline ::google::protobuf::uint32 border() const;
  inline void set_border(::google::protobuf::uint32 value);

  // optional .SProtoSpace.date_info birthday = 9;
  inline bool has_birthday() const;
  inline void clear_birthday();
  static const int kBirthdayFieldNumber = 9;
  inline const ::SProtoSpace::date_info& birthday() const;
  inline ::SProtoSpace::date_info* mutable_birthday();
  inline ::SProtoSpace::date_info* release_birthday();
  inline void set_allocated_birthday(::SProtoSpace::date_info* birthday);

  // optional uint32 star_sign = 10 [default = 1];
  inline bool has_star_sign() const;
  inline void clear_star_sign();
  static const int kStarSignFieldNumber = 10;
  inline ::google::protobuf::uint32 star_sign() const;
  inline void set_star_sign(::google::protobuf::uint32 value);

  // optional uint32 popularity = 11 [default = 0];
  inline bool has_popularity() const;
  inline void clear_popularity();
  static const int kPopularityFieldNumber = 11;
  inline ::google::protobuf::uint32 popularity() const;
  inline void set_popularity(::google::protobuf::uint32 value);

  // optional uint32 charm = 12 [default = 0];
  inline bool has_charm() const;
  inline void clear_charm();
  static const int kCharmFieldNumber = 12;
  inline ::google::protobuf::uint32 charm() const;
  inline void set_charm(::google::protobuf::uint32 value);

  // repeated uint32 labels = 13;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 13;
  inline ::google::protobuf::uint32 labels(int index) const;
  inline void set_labels(int index, ::google::protobuf::uint32 value);
  inline void add_labels(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      labels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_labels();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_info)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_like();
  inline void clear_has_like();
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_border();
  inline void clear_has_border();
  inline void set_has_birthday();
  inline void clear_has_birthday();
  inline void set_has_star_sign();
  inline void clear_has_star_sign();
  inline void set_has_popularity();
  inline void clear_has_popularity();
  inline void set_has_charm();
  inline void clear_has_charm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::uint32 like_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > liked_list_;
  ::std::string* signature_;
  ::SProtoSpace::lsg_position_info* position_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > show_hero_list_;
  ::SProtoSpace::date_info* birthday_;
  ::google::protobuf::uint32 border_;
  ::google::protobuf::uint32 star_sign_;
  ::google::protobuf::uint32 popularity_;
  ::google::protobuf::uint32 charm_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > labels_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static role_show_info* default_instance_;
};
// -------------------------------------------------------------------

class db_offical_data : public ::google::protobuf::Message {
 public:
  db_offical_data();
  virtual ~db_offical_data();

  db_offical_data(const db_offical_data& from);

  inline db_offical_data& operator=(const db_offical_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_offical_data& default_instance();

  void Swap(db_offical_data* other);

  // implements Message ----------------------------------------------

  db_offical_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_offical_data& from);
  void MergeFrom(const db_offical_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cur_grade = 1;
  inline bool has_cur_grade() const;
  inline void clear_cur_grade();
  static const int kCurGradeFieldNumber = 1;
  inline ::google::protobuf::uint32 cur_grade() const;
  inline void set_cur_grade(::google::protobuf::uint32 value);

  // optional uint32 max_grade = 2;
  inline bool has_max_grade() const;
  inline void clear_max_grade();
  static const int kMaxGradeFieldNumber = 2;
  inline ::google::protobuf::uint32 max_grade() const;
  inline void set_max_grade(::google::protobuf::uint32 value);

  // optional uint32 apply_grade = 3;
  inline bool has_apply_grade() const;
  inline void clear_apply_grade();
  static const int kApplyGradeFieldNumber = 3;
  inline ::google::protobuf::uint32 apply_grade() const;
  inline void set_apply_grade(::google::protobuf::uint32 value);

  // optional uint32 apply_time = 4;
  inline bool has_apply_time() const;
  inline void clear_apply_time();
  static const int kApplyTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 apply_time() const;
  inline void set_apply_time(::google::protobuf::uint32 value);

  // optional uint32 last_grade = 5;
  inline bool has_last_grade() const;
  inline void clear_last_grade();
  static const int kLastGradeFieldNumber = 5;
  inline ::google::protobuf::uint32 last_grade() const;
  inline void set_last_grade(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_offical_data)
 private:
  inline void set_has_cur_grade();
  inline void clear_has_cur_grade();
  inline void set_has_max_grade();
  inline void clear_has_max_grade();
  inline void set_has_apply_grade();
  inline void clear_has_apply_grade();
  inline void set_has_apply_time();
  inline void clear_has_apply_time();
  inline void set_has_last_grade();
  inline void clear_has_last_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cur_grade_;
  ::google::protobuf::uint32 max_grade_;
  ::google::protobuf::uint32 apply_grade_;
  ::google::protobuf::uint32 apply_time_;
  ::google::protobuf::uint32 last_grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_offical_data* default_instance_;
};
// -------------------------------------------------------------------

class friend_intimacy : public ::google::protobuf::Message {
 public:
  friend_intimacy();
  virtual ~friend_intimacy();

  friend_intimacy(const friend_intimacy& from);

  inline friend_intimacy& operator=(const friend_intimacy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_intimacy& default_instance();

  void Swap(friend_intimacy* other);

  // implements Message ----------------------------------------------

  friend_intimacy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_intimacy& from);
  void MergeFrom(const friend_intimacy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 intimacy_value = 2;
  inline bool has_intimacy_value() const;
  inline void clear_intimacy_value();
  static const int kIntimacyValueFieldNumber = 2;
  inline ::google::protobuf::uint32 intimacy_value() const;
  inline void set_intimacy_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.friend_intimacy)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_intimacy_value();
  inline void clear_has_intimacy_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint32 intimacy_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static friend_intimacy* default_instance_;
};
// -------------------------------------------------------------------

class couple_love : public ::google::protobuf::Message {
 public:
  couple_love();
  virtual ~couple_love();

  couple_love(const couple_love& from);

  inline couple_love& operator=(const couple_love& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const couple_love& default_instance();

  void Swap(couple_love* other);

  // implements Message ----------------------------------------------

  couple_love* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const couple_love& from);
  void MergeFrom(const couple_love& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 love_value = 2;
  inline bool has_love_value() const;
  inline void clear_love_value();
  static const int kLoveValueFieldNumber = 2;
  inline ::google::protobuf::uint32 love_value() const;
  inline void set_love_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.couple_love)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_love_value();
  inline void clear_has_love_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint32 love_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static couple_love* default_instance_;
};
// -------------------------------------------------------------------

class role_base_data : public ::google::protobuf::Message {
 public:
  role_base_data();
  virtual ~role_base_data();

  role_base_data(const role_base_data& from);

  inline role_base_data& operator=(const role_base_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_base_data& default_instance();

  void Swap(role_base_data* other);

  // implements Message ----------------------------------------------

  role_base_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_base_data& from);
  void MergeFrom(const role_base_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string account_id = 3;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 3;
  inline const ::std::string& account_id() const;
  inline void set_account_id(const ::std::string& value);
  inline void set_account_id(const char* value);
  inline void set_account_id(const char* value, size_t size);
  inline ::std::string* mutable_account_id();
  inline ::std::string* release_account_id();
  inline void set_allocated_account_id(::std::string* account_id);

  // optional uint32 area_id = 4;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 4;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint64 offline_time = 6;
  inline bool has_offline_time() const;
  inline void clear_offline_time();
  static const int kOfflineTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 offline_time() const;
  inline void set_offline_time(::google::protobuf::uint64 value);

  // optional uint64 db_svr_id = 7;
  inline bool has_db_svr_id() const;
  inline void clear_db_svr_id();
  static const int kDbSvrIdFieldNumber = 7;
  inline ::google::protobuf::uint64 db_svr_id() const;
  inline void set_db_svr_id(::google::protobuf::uint64 value);

  // optional int32 lv = 8;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 8;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 exp = 9;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 9;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 buy_power_times = 11;
  inline bool has_buy_power_times() const;
  inline void clear_buy_power_times();
  static const int kBuyPowerTimesFieldNumber = 11;
  inline ::google::protobuf::int32 buy_power_times() const;
  inline void set_buy_power_times(::google::protobuf::int32 value);

  // optional int32 gold = 12;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 12;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // optional int32 jade = 13;
  inline bool has_jade() const;
  inline void clear_jade();
  static const int kJadeFieldNumber = 13;
  inline ::google::protobuf::int32 jade() const;
  inline void set_jade(::google::protobuf::int32 value);

  // optional int32 power = 14;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 14;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // optional int32 last_disc_id = 15;
  inline bool has_last_disc_id() const;
  inline void clear_last_disc_id();
  static const int kLastDiscIdFieldNumber = 15;
  inline ::google::protobuf::int32 last_disc_id() const;
  inline void set_last_disc_id(::google::protobuf::int32 value);

  // optional int32 task_activity = 16;
  inline bool has_task_activity() const;
  inline void clear_task_activity();
  static const int kTaskActivityFieldNumber = 16;
  inline ::google::protobuf::int32 task_activity() const;
  inline void set_task_activity(::google::protobuf::int32 value);

  // repeated .SProtoSpace.game_system g_system = 17;
  inline int g_system_size() const;
  inline void clear_g_system();
  static const int kGSystemFieldNumber = 17;
  inline const ::SProtoSpace::game_system& g_system(int index) const;
  inline ::SProtoSpace::game_system* mutable_g_system(int index);
  inline ::SProtoSpace::game_system* add_g_system();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_system >&
      g_system() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_system >*
      mutable_g_system();

  // optional uint64 login_time = 18;
  inline bool has_login_time() const;
  inline void clear_login_time();
  static const int kLoginTimeFieldNumber = 18;
  inline ::google::protobuf::uint64 login_time() const;
  inline void set_login_time(::google::protobuf::uint64 value);

  // optional int32 tender = 19;
  inline bool has_tender() const;
  inline void clear_tender();
  static const int kTenderFieldNumber = 19;
  inline ::google::protobuf::int32 tender() const;
  inline void set_tender(::google::protobuf::int32 value);

  // optional int32 treason = 20;
  inline bool has_treason() const;
  inline void clear_treason();
  static const int kTreasonFieldNumber = 20;
  inline ::google::protobuf::int32 treason() const;
  inline void set_treason(::google::protobuf::int32 value);

  // optional int32 wise = 21;
  inline bool has_wise() const;
  inline void clear_wise();
  static const int kWiseFieldNumber = 21;
  inline ::google::protobuf::int32 wise() const;
  inline void set_wise(::google::protobuf::int32 value);

  // optional int32 adorkable = 22;
  inline bool has_adorkable() const;
  inline void clear_adorkable();
  static const int kAdorkableFieldNumber = 22;
  inline ::google::protobuf::int32 adorkable() const;
  inline void set_adorkable(::google::protobuf::int32 value);

  // optional int32 good = 23;
  inline bool has_good() const;
  inline void clear_good();
  static const int kGoodFieldNumber = 23;
  inline ::google::protobuf::int32 good() const;
  inline void set_good(::google::protobuf::int32 value);

  // optional int32 scheming = 24;
  inline bool has_scheming() const;
  inline void clear_scheming();
  static const int kSchemingFieldNumber = 24;
  inline ::google::protobuf::int32 scheming() const;
  inline void set_scheming(::google::protobuf::int32 value);

  // optional int32 merit = 25;
  inline bool has_merit() const;
  inline void clear_merit();
  static const int kMeritFieldNumber = 25;
  inline ::google::protobuf::int32 merit() const;
  inline void set_merit(::google::protobuf::int32 value);

  // optional bool offical_salary = 26;
  inline bool has_offical_salary() const;
  inline void clear_offical_salary();
  static const int kOfficalSalaryFieldNumber = 26;
  inline bool offical_salary() const;
  inline void set_offical_salary(bool value);

  // optional int32 offical_salary_tm = 27;
  inline bool has_offical_salary_tm() const;
  inline void clear_offical_salary_tm();
  static const int kOfficalSalaryTmFieldNumber = 27;
  inline ::google::protobuf::int32 offical_salary_tm() const;
  inline void set_offical_salary_tm(::google::protobuf::int32 value);

  // optional int32 offical_challenge_num = 28;
  inline bool has_offical_challenge_num() const;
  inline void clear_offical_challenge_num();
  static const int kOfficalChallengeNumFieldNumber = 28;
  inline ::google::protobuf::int32 offical_challenge_num() const;
  inline void set_offical_challenge_num(::google::protobuf::int32 value);

  // optional int32 offical_challenge_buy = 29;
  inline bool has_offical_challenge_buy() const;
  inline void clear_offical_challenge_buy();
  static const int kOfficalChallengeBuyFieldNumber = 29;
  inline ::google::protobuf::int32 offical_challenge_buy() const;
  inline void set_offical_challenge_buy(::google::protobuf::int32 value);

  // optional int32 offical_share_num = 30;
  inline bool has_offical_share_num() const;
  inline void clear_offical_share_num();
  static const int kOfficalShareNumFieldNumber = 30;
  inline ::google::protobuf::int32 offical_share_num() const;
  inline void set_offical_share_num(::google::protobuf::int32 value);

  // optional uint32 bag_capacity = 31;
  inline bool has_bag_capacity() const;
  inline void clear_bag_capacity();
  static const int kBagCapacityFieldNumber = 31;
  inline ::google::protobuf::uint32 bag_capacity() const;
  inline void set_bag_capacity(::google::protobuf::uint32 value);

  // optional uint64 mail_global_last_checktime = 32;
  inline bool has_mail_global_last_checktime() const;
  inline void clear_mail_global_last_checktime();
  static const int kMailGlobalLastChecktimeFieldNumber = 32;
  inline ::google::protobuf::uint64 mail_global_last_checktime() const;
  inline void set_mail_global_last_checktime(::google::protobuf::uint64 value);

  // optional uint32 mail_send_private_limit_day = 33;
  inline bool has_mail_send_private_limit_day() const;
  inline void clear_mail_send_private_limit_day();
  static const int kMailSendPrivateLimitDayFieldNumber = 33;
  inline ::google::protobuf::uint32 mail_send_private_limit_day() const;
  inline void set_mail_send_private_limit_day(::google::protobuf::uint32 value);

  // optional uint64 fight_power = 34;
  inline bool has_fight_power() const;
  inline void clear_fight_power();
  static const int kFightPowerFieldNumber = 34;
  inline ::google::protobuf::uint64 fight_power() const;
  inline void set_fight_power(::google::protobuf::uint64 value);

  // optional uint32 first_offical_award = 35;
  inline bool has_first_offical_award() const;
  inline void clear_first_offical_award();
  static const int kFirstOfficalAwardFieldNumber = 35;
  inline ::google::protobuf::uint32 first_offical_award() const;
  inline void set_first_offical_award(::google::protobuf::uint32 value);

  // optional uint32 cur_mainline_task_id = 36;
  inline bool has_cur_mainline_task_id() const;
  inline void clear_cur_mainline_task_id();
  static const int kCurMainlineTaskIdFieldNumber = 36;
  inline ::google::protobuf::uint32 cur_mainline_task_id() const;
  inline void set_cur_mainline_task_id(::google::protobuf::uint32 value);

  // optional uint32 offical_apply_count = 37;
  inline bool has_offical_apply_count() const;
  inline void clear_offical_apply_count();
  static const int kOfficalApplyCountFieldNumber = 37;
  inline ::google::protobuf::uint32 offical_apply_count() const;
  inline void set_offical_apply_count(::google::protobuf::uint32 value);

  // optional uint32 acc_login_count = 38;
  inline bool has_acc_login_count() const;
  inline void clear_acc_login_count();
  static const int kAccLoginCountFieldNumber = 38;
  inline ::google::protobuf::uint32 acc_login_count() const;
  inline void set_acc_login_count(::google::protobuf::uint32 value);

  // optional bool has_first_common = 39;
  inline bool has_has_first_common() const;
  inline void clear_has_first_common();
  static const int kHasFirstCommonFieldNumber = 39;
  inline bool has_first_common() const;
  inline void set_has_first_common(bool value);

  // optional bool has_first_special = 40;
  inline bool has_has_first_special() const;
  inline void clear_has_first_special();
  static const int kHasFirstSpecialFieldNumber = 40;
  inline bool has_first_special() const;
  inline void set_has_first_special(bool value);

  // optional bool has_first_ten_in_one_row = 41;
  inline bool has_has_first_ten_in_one_row() const;
  inline void clear_has_first_ten_in_one_row();
  static const int kHasFirstTenInOneRowFieldNumber = 41;
  inline bool has_first_ten_in_one_row() const;
  inline void set_has_first_ten_in_one_row(bool value);

  // optional uint32 skill_point = 42;
  inline bool has_skill_point() const;
  inline void clear_skill_point();
  static const int kSkillPointFieldNumber = 42;
  inline ::google::protobuf::uint32 skill_point() const;
  inline void set_skill_point(::google::protobuf::uint32 value);

  // optional uint32 skill_point_revocer_tm = 43;
  inline bool has_skill_point_revocer_tm() const;
  inline void clear_skill_point_revocer_tm();
  static const int kSkillPointRevocerTmFieldNumber = 43;
  inline ::google::protobuf::uint32 skill_point_revocer_tm() const;
  inline void set_skill_point_revocer_tm(::google::protobuf::uint32 value);

  // optional uint32 wine = 44 [default = 0];
  inline bool has_wine() const;
  inline void clear_wine();
  static const int kWineFieldNumber = 44;
  inline ::google::protobuf::uint32 wine() const;
  inline void set_wine(::google::protobuf::uint32 value);

  // optional int32 gm_auth = 45;
  inline bool has_gm_auth() const;
  inline void clear_gm_auth();
  static const int kGmAuthFieldNumber = 45;
  inline ::google::protobuf::int32 gm_auth() const;
  inline void set_gm_auth(::google::protobuf::int32 value);

  // optional uint32 wine_cup = 46 [default = 0];
  inline bool has_wine_cup() const;
  inline void clear_wine_cup();
  static const int kWineCupFieldNumber = 46;
  inline ::google::protobuf::uint32 wine_cup() const;
  inline void set_wine_cup(::google::protobuf::uint32 value);

  // optional int32 daily_fortune = 48;
  inline bool has_daily_fortune() const;
  inline void clear_daily_fortune();
  static const int kDailyFortuneFieldNumber = 48;
  inline ::google::protobuf::int32 daily_fortune() const;
  inline void set_daily_fortune(::google::protobuf::int32 value);

  // optional int32 energy = 49;
  inline bool has_energy() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 49;
  inline ::google::protobuf::int32 energy() const;
  inline void set_energy(::google::protobuf::int32 value);

  // optional int32 adv_times = 50;
  inline bool has_adv_times() const;
  inline void clear_adv_times();
  static const int kAdvTimesFieldNumber = 50;
  inline ::google::protobuf::int32 adv_times() const;
  inline void set_adv_times(::google::protobuf::int32 value);

  // optional int32 talent_point = 51;
  inline bool has_talent_point() const;
  inline void clear_talent_point();
  static const int kTalentPointFieldNumber = 51;
  inline ::google::protobuf::int32 talent_point() const;
  inline void set_talent_point(::google::protobuf::int32 value);

  // repeated int32 lock_module_ids = 52;
  inline int lock_module_ids_size() const;
  inline void clear_lock_module_ids();
  static const int kLockModuleIdsFieldNumber = 52;
  inline ::google::protobuf::int32 lock_module_ids(int index) const;
  inline void set_lock_module_ids(int index, ::google::protobuf::int32 value);
  inline void add_lock_module_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lock_module_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lock_module_ids();

  // optional bool pass_all = 53;
  inline bool has_pass_all() const;
  inline void clear_pass_all();
  static const int kPassAllFieldNumber = 53;
  inline bool pass_all() const;
  inline void set_pass_all(bool value);

  // optional bool skip = 54;
  inline bool has_skip() const;
  inline void clear_skip();
  static const int kSkipFieldNumber = 54;
  inline bool skip() const;
  inline void set_skip(bool value);

  // repeated int32 guide_ids = 55;
  inline int guide_ids_size() const;
  inline void clear_guide_ids();
  static const int kGuideIdsFieldNumber = 55;
  inline ::google::protobuf::int32 guide_ids(int index) const;
  inline void set_guide_ids(int index, ::google::protobuf::int32 value);
  inline void add_guide_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      guide_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_guide_ids();

  // optional int32 chat_room_award_times = 56;
  inline bool has_chat_room_award_times() const;
  inline void clear_chat_room_award_times();
  static const int kChatRoomAwardTimesFieldNumber = 56;
  inline ::google::protobuf::int32 chat_room_award_times() const;
  inline void set_chat_room_award_times(::google::protobuf::int32 value);

  // optional int32 charm = 57;
  inline bool has_charm() const;
  inline void clear_charm();
  static const int kCharmFieldNumber = 57;
  inline ::google::protobuf::int32 charm() const;
  inline void set_charm(::google::protobuf::int32 value);

  // optional int32 popularity = 58;
  inline bool has_popularity() const;
  inline void clear_popularity();
  static const int kPopularityFieldNumber = 58;
  inline ::google::protobuf::int32 popularity() const;
  inline void set_popularity(::google::protobuf::int32 value);

  // repeated .SProtoSpace.friend_intimacy intimacy = 59;
  inline int intimacy_size() const;
  inline void clear_intimacy();
  static const int kIntimacyFieldNumber = 59;
  inline const ::SProtoSpace::friend_intimacy& intimacy(int index) const;
  inline ::SProtoSpace::friend_intimacy* mutable_intimacy(int index);
  inline ::SProtoSpace::friend_intimacy* add_intimacy();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_intimacy >&
      intimacy() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_intimacy >*
      mutable_intimacy();

  // repeated .SProtoSpace.couple_love love = 60;
  inline int love_size() const;
  inline void clear_love();
  static const int kLoveFieldNumber = 60;
  inline const ::SProtoSpace::couple_love& love(int index) const;
  inline ::SProtoSpace::couple_love* mutable_love(int index);
  inline ::SProtoSpace::couple_love* add_love();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::couple_love >&
      love() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::couple_love >*
      mutable_love();

  // optional int32 change_name_time = 61 [default = 0];
  inline bool has_change_name_time() const;
  inline void clear_change_name_time();
  static const int kChangeNameTimeFieldNumber = 61;
  inline ::google::protobuf::int32 change_name_time() const;
  inline void set_change_name_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_base_data)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_offline_time();
  inline void clear_has_offline_time();
  inline void set_has_db_svr_id();
  inline void clear_has_db_svr_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_buy_power_times();
  inline void clear_has_buy_power_times();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_jade();
  inline void clear_has_jade();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_last_disc_id();
  inline void clear_has_last_disc_id();
  inline void set_has_task_activity();
  inline void clear_has_task_activity();
  inline void set_has_login_time();
  inline void clear_has_login_time();
  inline void set_has_tender();
  inline void clear_has_tender();
  inline void set_has_treason();
  inline void clear_has_treason();
  inline void set_has_wise();
  inline void clear_has_wise();
  inline void set_has_adorkable();
  inline void clear_has_adorkable();
  inline void set_has_good();
  inline void clear_has_good();
  inline void set_has_scheming();
  inline void clear_has_scheming();
  inline void set_has_merit();
  inline void clear_has_merit();
  inline void set_has_offical_salary();
  inline void clear_has_offical_salary();
  inline void set_has_offical_salary_tm();
  inline void clear_has_offical_salary_tm();
  inline void set_has_offical_challenge_num();
  inline void clear_has_offical_challenge_num();
  inline void set_has_offical_challenge_buy();
  inline void clear_has_offical_challenge_buy();
  inline void set_has_offical_share_num();
  inline void clear_has_offical_share_num();
  inline void set_has_bag_capacity();
  inline void clear_has_bag_capacity();
  inline void set_has_mail_global_last_checktime();
  inline void clear_has_mail_global_last_checktime();
  inline void set_has_mail_send_private_limit_day();
  inline void clear_has_mail_send_private_limit_day();
  inline void set_has_fight_power();
  inline void clear_has_fight_power();
  inline void set_has_first_offical_award();
  inline void clear_has_first_offical_award();
  inline void set_has_cur_mainline_task_id();
  inline void clear_has_cur_mainline_task_id();
  inline void set_has_offical_apply_count();
  inline void clear_has_offical_apply_count();
  inline void set_has_acc_login_count();
  inline void clear_has_acc_login_count();
  inline void set_has_has_first_common();
  inline void clear_has_has_first_common();
  inline void set_has_has_first_special();
  inline void clear_has_has_first_special();
  inline void set_has_has_first_ten_in_one_row();
  inline void clear_has_has_first_ten_in_one_row();
  inline void set_has_skill_point();
  inline void clear_has_skill_point();
  inline void set_has_skill_point_revocer_tm();
  inline void clear_has_skill_point_revocer_tm();
  inline void set_has_wine();
  inline void clear_has_wine();
  inline void set_has_gm_auth();
  inline void clear_has_gm_auth();
  inline void set_has_wine_cup();
  inline void clear_has_wine_cup();
  inline void set_has_daily_fortune();
  inline void clear_has_daily_fortune();
  inline void set_has_energy();
  inline void clear_has_energy();
  inline void set_has_adv_times();
  inline void clear_has_adv_times();
  inline void set_has_talent_point();
  inline void clear_has_talent_point();
  inline void set_has_pass_all();
  inline void clear_has_pass_all();
  inline void set_has_skip();
  inline void clear_has_skip();
  inline void set_has_chat_room_award_times();
  inline void clear_has_chat_room_award_times();
  inline void set_has_charm();
  inline void clear_has_charm();
  inline void set_has_popularity();
  inline void clear_has_popularity();
  inline void set_has_change_name_time();
  inline void clear_has_change_name_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  ::std::string* account_id_;
  ::google::protobuf::uint32 area_id_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint64 offline_time_;
  ::google::protobuf::uint64 db_svr_id_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 buy_power_times_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 jade_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 last_disc_id_;
  ::google::protobuf::int32 task_activity_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_system > g_system_;
  ::google::protobuf::uint64 login_time_;
  ::google::protobuf::int32 tender_;
  ::google::protobuf::int32 treason_;
  ::google::protobuf::int32 wise_;
  ::google::protobuf::int32 adorkable_;
  ::google::protobuf::int32 good_;
  ::google::protobuf::int32 scheming_;
  ::google::protobuf::int32 merit_;
  ::google::protobuf::int32 offical_salary_tm_;
  ::google::protobuf::int32 offical_challenge_num_;
  ::google::protobuf::int32 offical_challenge_buy_;
  ::google::protobuf::int32 offical_share_num_;
  ::google::protobuf::uint32 bag_capacity_;
  ::google::protobuf::uint64 mail_global_last_checktime_;
  ::google::protobuf::uint64 fight_power_;
  ::google::protobuf::uint32 mail_send_private_limit_day_;
  ::google::protobuf::uint32 first_offical_award_;
  ::google::protobuf::uint32 cur_mainline_task_id_;
  bool offical_salary_;
  bool has_first_common_;
  bool has_first_special_;
  bool has_first_ten_in_one_row_;
  ::google::protobuf::uint32 offical_apply_count_;
  ::google::protobuf::uint32 acc_login_count_;
  ::google::protobuf::uint32 skill_point_;
  ::google::protobuf::uint32 skill_point_revocer_tm_;
  ::google::protobuf::uint32 wine_;
  ::google::protobuf::int32 gm_auth_;
  ::google::protobuf::uint32 wine_cup_;
  ::google::protobuf::int32 daily_fortune_;
  ::google::protobuf::int32 energy_;
  ::google::protobuf::int32 adv_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lock_module_ids_;
  ::google::protobuf::int32 talent_point_;
  bool pass_all_;
  bool skip_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > guide_ids_;
  ::google::protobuf::int32 chat_room_award_times_;
  ::google::protobuf::int32 charm_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_intimacy > intimacy_;
  ::google::protobuf::int32 popularity_;
  ::google::protobuf::int32 change_name_time_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::couple_love > love_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(59 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static role_base_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_chest_data : public ::google::protobuf::Message {
 public:
  unit_chest_data();
  virtual ~unit_chest_data();

  unit_chest_data(const unit_chest_data& from);

  inline unit_chest_data& operator=(const unit_chest_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_chest_data& default_instance();

  void Swap(unit_chest_data* other);

  // implements Message ----------------------------------------------

  unit_chest_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_chest_data& from);
  void MergeFrom(const unit_chest_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional .SProtoSpace.role_chest chest = 3;
  inline bool has_chest() const;
  inline void clear_chest();
  static const int kChestFieldNumber = 3;
  inline const ::SProtoSpace::role_chest& chest() const;
  inline ::SProtoSpace::role_chest* mutable_chest();
  inline ::SProtoSpace::role_chest* release_chest();
  inline void set_allocated_chest(::SProtoSpace::role_chest* chest);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_chest_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_chest();
  inline void clear_has_chest();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::SProtoSpace::role_chest* chest_;
  ::google::protobuf::uint32 db_mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_chest_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_free_times_draw_card : public ::google::protobuf::Message {
 public:
  unit_free_times_draw_card();
  virtual ~unit_free_times_draw_card();

  unit_free_times_draw_card(const unit_free_times_draw_card& from);

  inline unit_free_times_draw_card& operator=(const unit_free_times_draw_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_free_times_draw_card& default_instance();

  void Swap(unit_free_times_draw_card* other);

  // implements Message ----------------------------------------------

  unit_free_times_draw_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_free_times_draw_card& from);
  void MergeFrom(const unit_free_times_draw_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional int32 draw_type = 3;
  inline bool has_draw_type() const;
  inline void clear_draw_type();
  static const int kDrawTypeFieldNumber = 3;
  inline ::google::protobuf::int32 draw_type() const;
  inline void set_draw_type(::google::protobuf::int32 value);

  // optional int32 used_today = 4;
  inline bool has_used_today() const;
  inline void clear_used_today();
  static const int kUsedTodayFieldNumber = 4;
  inline ::google::protobuf::int32 used_today() const;
  inline void set_used_today(::google::protobuf::int32 value);

  // optional int32 now_has_times = 5;
  inline bool has_now_has_times() const;
  inline void clear_now_has_times();
  static const int kNowHasTimesFieldNumber = 5;
  inline ::google::protobuf::int32 now_has_times() const;
  inline void set_now_has_times(::google::protobuf::int32 value);

  // optional uint32 time_last_used = 6;
  inline bool has_time_last_used() const;
  inline void clear_time_last_used();
  static const int kTimeLastUsedFieldNumber = 6;
  inline ::google::protobuf::uint32 time_last_used() const;
  inline void set_time_last_used(::google::protobuf::uint32 value);

  // optional int32 free_left_day = 7;
  inline bool has_free_left_day() const;
  inline void clear_free_left_day();
  static const int kFreeLeftDayFieldNumber = 7;
  inline ::google::protobuf::int32 free_left_day() const;
  inline void set_free_left_day(::google::protobuf::int32 value);

  // optional int32 limit_left_day = 8;
  inline bool has_limit_left_day() const;
  inline void clear_limit_left_day();
  static const int kLimitLeftDayFieldNumber = 8;
  inline ::google::protobuf::int32 limit_left_day() const;
  inline void set_limit_left_day(::google::protobuf::int32 value);

  // optional int32 total_time = 9;
  inline bool has_total_time() const;
  inline void clear_total_time();
  static const int kTotalTimeFieldNumber = 9;
  inline ::google::protobuf::int32 total_time() const;
  inline void set_total_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_free_times_draw_card)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_draw_type();
  inline void clear_has_draw_type();
  inline void set_has_used_today();
  inline void clear_has_used_today();
  inline void set_has_now_has_times();
  inline void clear_has_now_has_times();
  inline void set_has_time_last_used();
  inline void clear_has_time_last_used();
  inline void set_has_free_left_day();
  inline void clear_has_free_left_day();
  inline void set_has_limit_left_day();
  inline void clear_has_limit_left_day();
  inline void set_has_total_time();
  inline void clear_has_total_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::int32 draw_type_;
  ::google::protobuf::int32 used_today_;
  ::google::protobuf::int32 now_has_times_;
  ::google::protobuf::uint32 time_last_used_;
  ::google::protobuf::int32 free_left_day_;
  ::google::protobuf::int32 limit_left_day_;
  ::google::protobuf::int32 total_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_free_times_draw_card* default_instance_;
};
// -------------------------------------------------------------------

class unit_limit_draw_card : public ::google::protobuf::Message {
 public:
  unit_limit_draw_card();
  virtual ~unit_limit_draw_card();

  unit_limit_draw_card(const unit_limit_draw_card& from);

  inline unit_limit_draw_card& operator=(const unit_limit_draw_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_limit_draw_card& default_instance();

  void Swap(unit_limit_draw_card* other);

  // implements Message ----------------------------------------------

  unit_limit_draw_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_limit_draw_card& from);
  void MergeFrom(const unit_limit_draw_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional int32 draw_type = 3;
  inline bool has_draw_type() const;
  inline void clear_draw_type();
  static const int kDrawTypeFieldNumber = 3;
  inline ::google::protobuf::int32 draw_type() const;
  inline void set_draw_type(::google::protobuf::int32 value);

  // optional int32 used_today = 4;
  inline bool has_used_today() const;
  inline void clear_used_today();
  static const int kUsedTodayFieldNumber = 4;
  inline ::google::protobuf::int32 used_today() const;
  inline void set_used_today(::google::protobuf::int32 value);

  // optional uint32 time_last_draw = 5;
  inline bool has_time_last_draw() const;
  inline void clear_time_last_draw();
  static const int kTimeLastDrawFieldNumber = 5;
  inline ::google::protobuf::uint32 time_last_draw() const;
  inline void set_time_last_draw(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_limit_draw_card)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_draw_type();
  inline void clear_has_draw_type();
  inline void set_has_used_today();
  inline void clear_has_used_today();
  inline void set_has_time_last_draw();
  inline void clear_has_time_last_draw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::int32 draw_type_;
  ::google::protobuf::int32 used_today_;
  ::google::protobuf::uint32 time_last_draw_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_limit_draw_card* default_instance_;
};
// -------------------------------------------------------------------

class db_unit_draw_card : public ::google::protobuf::Message {
 public:
  db_unit_draw_card();
  virtual ~db_unit_draw_card();

  db_unit_draw_card(const db_unit_draw_card& from);

  inline db_unit_draw_card& operator=(const db_unit_draw_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_unit_draw_card& default_instance();

  void Swap(db_unit_draw_card* other);

  // implements Message ----------------------------------------------

  db_unit_draw_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_unit_draw_card& from);
  void MergeFrom(const db_unit_draw_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional int32 draw_type = 3;
  inline bool has_draw_type() const;
  inline void clear_draw_type();
  static const int kDrawTypeFieldNumber = 3;
  inline ::google::protobuf::int32 draw_type() const;
  inline void set_draw_type(::google::protobuf::int32 value);

  // optional int32 now_remain_times = 4;
  inline bool has_now_remain_times() const;
  inline void clear_now_remain_times();
  static const int kNowRemainTimesFieldNumber = 4;
  inline ::google::protobuf::int32 now_remain_times() const;
  inline void set_now_remain_times(::google::protobuf::int32 value);

  // optional int32 tody_remain_free_times = 5;
  inline bool has_tody_remain_free_times() const;
  inline void clear_tody_remain_free_times();
  static const int kTodyRemainFreeTimesFieldNumber = 5;
  inline ::google::protobuf::int32 tody_remain_free_times() const;
  inline void set_tody_remain_free_times(::google::protobuf::int32 value);

  // optional int32 tody_remain_limit_times = 6;
  inline bool has_tody_remain_limit_times() const;
  inline void clear_tody_remain_limit_times();
  static const int kTodyRemainLimitTimesFieldNumber = 6;
  inline ::google::protobuf::int32 tody_remain_limit_times() const;
  inline void set_tody_remain_limit_times(::google::protobuf::int32 value);

  // optional int32 total_times = 7;
  inline bool has_total_times() const;
  inline void clear_total_times();
  static const int kTotalTimesFieldNumber = 7;
  inline ::google::protobuf::int32 total_times() const;
  inline void set_total_times(::google::protobuf::int32 value);

  // optional uint32 last_opt_time = 8;
  inline bool has_last_opt_time() const;
  inline void clear_last_opt_time();
  static const int kLastOptTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 last_opt_time() const;
  inline void set_last_opt_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_unit_draw_card)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_draw_type();
  inline void clear_has_draw_type();
  inline void set_has_now_remain_times();
  inline void clear_has_now_remain_times();
  inline void set_has_tody_remain_free_times();
  inline void clear_has_tody_remain_free_times();
  inline void set_has_tody_remain_limit_times();
  inline void clear_has_tody_remain_limit_times();
  inline void set_has_total_times();
  inline void clear_has_total_times();
  inline void set_has_last_opt_time();
  inline void clear_has_last_opt_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::int32 draw_type_;
  ::google::protobuf::int32 now_remain_times_;
  ::google::protobuf::int32 tody_remain_free_times_;
  ::google::protobuf::int32 tody_remain_limit_times_;
  ::google::protobuf::int32 total_times_;
  ::google::protobuf::uint32 last_opt_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_unit_draw_card* default_instance_;
};
// -------------------------------------------------------------------

class db_unit_draw_card_special : public ::google::protobuf::Message {
 public:
  db_unit_draw_card_special();
  virtual ~db_unit_draw_card_special();

  db_unit_draw_card_special(const db_unit_draw_card_special& from);

  inline db_unit_draw_card_special& operator=(const db_unit_draw_card_special& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_unit_draw_card_special& default_instance();

  void Swap(db_unit_draw_card_special* other);

  // implements Message ----------------------------------------------

  db_unit_draw_card_special* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_unit_draw_card_special& from);
  void MergeFrom(const db_unit_draw_card_special& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional int32 draw_type = 3;
  inline bool has_draw_type() const;
  inline void clear_draw_type();
  static const int kDrawTypeFieldNumber = 3;
  inline ::google::protobuf::int32 draw_type() const;
  inline void set_draw_type(::google::protobuf::int32 value);

  // optional int32 rem_special_time_s = 4;
  inline bool has_rem_special_time_s() const;
  inline void clear_rem_special_time_s();
  static const int kRemSpecialTimeSFieldNumber = 4;
  inline ::google::protobuf::int32 rem_special_time_s() const;
  inline void set_rem_special_time_s(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_unit_draw_card_special)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_draw_type();
  inline void clear_has_draw_type();
  inline void set_has_rem_special_time_s();
  inline void clear_has_rem_special_time_s();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::int32 draw_type_;
  ::google::protobuf::int32 rem_special_time_s_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_unit_draw_card_special* default_instance_;
};
// -------------------------------------------------------------------

class db_unit_mail_data : public ::google::protobuf::Message {
 public:
  db_unit_mail_data();
  virtual ~db_unit_mail_data();

  db_unit_mail_data(const db_unit_mail_data& from);

  inline db_unit_mail_data& operator=(const db_unit_mail_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_unit_mail_data& default_instance();

  void Swap(db_unit_mail_data* other);

  // implements Message ----------------------------------------------

  db_unit_mail_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_unit_mail_data& from);
  void MergeFrom(const db_unit_mail_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint64 time_id = 4;
  inline bool has_time_id() const;
  inline void clear_time_id();
  static const int kTimeIdFieldNumber = 4;
  inline ::google::protobuf::uint64 time_id() const;
  inline void set_time_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_unit_mail_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_time_id();
  inline void clear_has_time_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint64 time_id_;
  ::google::protobuf::uint32 db_mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_unit_mail_data* default_instance_;
};
// -------------------------------------------------------------------

class db_unit_mail_send_data : public ::google::protobuf::Message {
 public:
  db_unit_mail_send_data();
  virtual ~db_unit_mail_send_data();

  db_unit_mail_send_data(const db_unit_mail_send_data& from);

  inline db_unit_mail_send_data& operator=(const db_unit_mail_send_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_unit_mail_send_data& default_instance();

  void Swap(db_unit_mail_send_data* other);

  // implements Message ----------------------------------------------

  db_unit_mail_send_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_unit_mail_send_data& from);
  void MergeFrom(const db_unit_mail_send_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional int32 free_left_day = 5;
  inline bool has_free_left_day() const;
  inline void clear_free_left_day();
  static const int kFreeLeftDayFieldNumber = 5;
  inline ::google::protobuf::int32 free_left_day() const;
  inline void set_free_left_day(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_unit_mail_send_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_free_left_day();
  inline void clear_has_free_left_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::int32 free_left_day_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_unit_mail_send_data* default_instance_;
};
// -------------------------------------------------------------------

class role_item_data : public ::google::protobuf::Message {
 public:
  role_item_data();
  virtual ~role_item_data();

  role_item_data(const role_item_data& from);

  inline role_item_data& operator=(const role_item_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_item_data& default_instance();

  void Swap(role_item_data* other);

  // implements Message ----------------------------------------------

  role_item_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_item_data& from);
  void MergeFrom(const role_item_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.unit_item_data item_datas = 1;
  inline int item_datas_size() const;
  inline void clear_item_datas();
  static const int kItemDatasFieldNumber = 1;
  inline const ::SProtoSpace::unit_item_data& item_datas(int index) const;
  inline ::SProtoSpace::unit_item_data* mutable_item_datas(int index);
  inline ::SProtoSpace::unit_item_data* add_item_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_item_data >&
      item_datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_item_data >*
      mutable_item_datas();

  // repeated .SProtoSpace.unit_chest_data chests = 2;
  inline int chests_size() const;
  inline void clear_chests();
  static const int kChestsFieldNumber = 2;
  inline const ::SProtoSpace::unit_chest_data& chests(int index) const;
  inline ::SProtoSpace::unit_chest_data* mutable_chests(int index);
  inline ::SProtoSpace::unit_chest_data* add_chests();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_chest_data >&
      chests() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_chest_data >*
      mutable_chests();

  // repeated .SProtoSpace.unit_free_times_draw_card draw_card_free_times = 3;
  inline int draw_card_free_times_size() const;
  inline void clear_draw_card_free_times();
  static const int kDrawCardFreeTimesFieldNumber = 3;
  inline const ::SProtoSpace::unit_free_times_draw_card& draw_card_free_times(int index) const;
  inline ::SProtoSpace::unit_free_times_draw_card* mutable_draw_card_free_times(int index);
  inline ::SProtoSpace::unit_free_times_draw_card* add_draw_card_free_times();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_free_times_draw_card >&
      draw_card_free_times() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_free_times_draw_card >*
      mutable_draw_card_free_times();

  // repeated .SProtoSpace.unit_limit_draw_card draw_card_limit = 4;
  inline int draw_card_limit_size() const;
  inline void clear_draw_card_limit();
  static const int kDrawCardLimitFieldNumber = 4;
  inline const ::SProtoSpace::unit_limit_draw_card& draw_card_limit(int index) const;
  inline ::SProtoSpace::unit_limit_draw_card* mutable_draw_card_limit(int index);
  inline ::SProtoSpace::unit_limit_draw_card* add_draw_card_limit();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_limit_draw_card >&
      draw_card_limit() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_limit_draw_card >*
      mutable_draw_card_limit();

  // repeated .SProtoSpace.db_unit_fashion_data fashions = 5;
  inline int fashions_size() const;
  inline void clear_fashions();
  static const int kFashionsFieldNumber = 5;
  inline const ::SProtoSpace::db_unit_fashion_data& fashions(int index) const;
  inline ::SProtoSpace::db_unit_fashion_data* mutable_fashions(int index);
  inline ::SProtoSpace::db_unit_fashion_data* add_fashions();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_fashion_data >&
      fashions() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_fashion_data >*
      mutable_fashions();

  // repeated .SProtoSpace.db_unit_draw_card draw_card_s = 6;
  inline int draw_card_s_size() const;
  inline void clear_draw_card_s();
  static const int kDrawCardSFieldNumber = 6;
  inline const ::SProtoSpace::db_unit_draw_card& draw_card_s(int index) const;
  inline ::SProtoSpace::db_unit_draw_card* mutable_draw_card_s(int index);
  inline ::SProtoSpace::db_unit_draw_card* add_draw_card_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_draw_card >&
      draw_card_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_draw_card >*
      mutable_draw_card_s();

  // repeated .SProtoSpace.db_unit_draw_card_special draw_card_specail_s = 7;
  inline int draw_card_specail_s_size() const;
  inline void clear_draw_card_specail_s();
  static const int kDrawCardSpecailSFieldNumber = 7;
  inline const ::SProtoSpace::db_unit_draw_card_special& draw_card_specail_s(int index) const;
  inline ::SProtoSpace::db_unit_draw_card_special* mutable_draw_card_specail_s(int index);
  inline ::SProtoSpace::db_unit_draw_card_special* add_draw_card_specail_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_draw_card_special >&
      draw_card_specail_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_draw_card_special >*
      mutable_draw_card_specail_s();

  // repeated .SProtoSpace.unit_item_data item_role_fashion_s = 8;
  inline int item_role_fashion_s_size() const;
  inline void clear_item_role_fashion_s();
  static const int kItemRoleFashionSFieldNumber = 8;
  inline const ::SProtoSpace::unit_item_data& item_role_fashion_s(int index) const;
  inline ::SProtoSpace::unit_item_data* mutable_item_role_fashion_s(int index);
  inline ::SProtoSpace::unit_item_data* add_item_role_fashion_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_item_data >&
      item_role_fashion_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_item_data >*
      mutable_item_role_fashion_s();

  // repeated .SProtoSpace.db_unit_mail_data mail_data = 9;
  inline int mail_data_size() const;
  inline void clear_mail_data();
  static const int kMailDataFieldNumber = 9;
  inline const ::SProtoSpace::db_unit_mail_data& mail_data(int index) const;
  inline ::SProtoSpace::db_unit_mail_data* mutable_mail_data(int index);
  inline ::SProtoSpace::db_unit_mail_data* add_mail_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_mail_data >&
      mail_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_mail_data >*
      mutable_mail_data();

  // repeated .SProtoSpace.db_unit_mail_send_data mail_send = 10;
  inline int mail_send_size() const;
  inline void clear_mail_send();
  static const int kMailSendFieldNumber = 10;
  inline const ::SProtoSpace::db_unit_mail_send_data& mail_send(int index) const;
  inline ::SProtoSpace::db_unit_mail_send_data* mutable_mail_send(int index);
  inline ::SProtoSpace::db_unit_mail_send_data* add_mail_send();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_mail_send_data >&
      mail_send() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_mail_send_data >*
      mutable_mail_send();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_item_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_item_data > item_datas_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_chest_data > chests_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_free_times_draw_card > draw_card_free_times_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_limit_draw_card > draw_card_limit_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_fashion_data > fashions_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_draw_card > draw_card_s_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_draw_card_special > draw_card_specail_s_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_item_data > item_role_fashion_s_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_mail_data > mail_data_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_mail_send_data > mail_send_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static role_item_data* default_instance_;
};
// -------------------------------------------------------------------

class skill_data : public ::google::protobuf::Message {
 public:
  skill_data();
  virtual ~skill_data();

  skill_data(const skill_data& from);

  inline skill_data& operator=(const skill_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const skill_data& default_instance();

  void Swap(skill_data* other);

  // implements Message ----------------------------------------------

  skill_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const skill_data& from);
  void MergeFrom(const skill_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::uint32 template_id() const;
  inline void set_template_id(::google::protobuf::uint32 value);

  // optional int32 slot = 2;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 2;
  inline ::google::protobuf::int32 slot() const;
  inline void set_slot(::google::protobuf::int32 value);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 unLock = 4;
  inline bool has_unlock() const;
  inline void clear_unlock();
  static const int kUnLockFieldNumber = 4;
  inline ::google::protobuf::int32 unlock() const;
  inline void set_unlock(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.skill_data)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_slot();
  inline void clear_has_slot();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_unlock();
  inline void clear_has_unlock();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 template_id_;
  ::google::protobuf::int32 slot_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 unlock_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static skill_data* default_instance_;
};
// -------------------------------------------------------------------

class db_skin_info : public ::google::protobuf::Message {
 public:
  db_skin_info();
  virtual ~db_skin_info();

  db_skin_info(const db_skin_info& from);

  inline db_skin_info& operator=(const db_skin_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_skin_info& default_instance();

  void Swap(db_skin_info* other);

  // implements Message ----------------------------------------------

  db_skin_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_skin_info& from);
  void MergeFrom(const db_skin_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::uint32 template_id() const;
  inline void set_template_id(::google::protobuf::uint32 value);

  // optional uint64 end_time = 2;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_skin_info)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_end_time();
  inline void clear_has_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 end_time_;
  ::google::protobuf::uint32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_skin_info* default_instance_;
};
// -------------------------------------------------------------------

class db_equip_data : public ::google::protobuf::Message {
 public:
  db_equip_data();
  virtual ~db_equip_data();

  db_equip_data(const db_equip_data& from);

  inline db_equip_data& operator=(const db_equip_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_equip_data& default_instance();

  void Swap(db_equip_data* other);

  // implements Message ----------------------------------------------

  db_equip_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_equip_data& from);
  void MergeFrom(const db_equip_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::uint32 template_id() const;
  inline void set_template_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_equip_data)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_equip_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_player_data : public ::google::protobuf::Message {
 public:
  unit_player_data();
  virtual ~unit_player_data();

  unit_player_data(const unit_player_data& from);

  inline unit_player_data& operator=(const unit_player_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_player_data& default_instance();

  void Swap(unit_player_data* other);

  // implements Message ----------------------------------------------

  unit_player_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_player_data& from);
  void MergeFrom(const unit_player_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 template_id = 3;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 3;
  inline ::google::protobuf::uint32 template_id() const;
  inline void set_template_id(::google::protobuf::uint32 value);

  // optional int32 talent_grade = 4;
  inline bool has_talent_grade() const;
  inline void clear_talent_grade();
  static const int kTalentGradeFieldNumber = 4;
  inline ::google::protobuf::int32 talent_grade() const;
  inline void set_talent_grade(::google::protobuf::int32 value);

  // repeated .SProtoSpace.player_skill_info skill_data = 5;
  inline int skill_data_size() const;
  inline void clear_skill_data();
  static const int kSkillDataFieldNumber = 5;
  inline const ::SProtoSpace::player_skill_info& skill_data(int index) const;
  inline ::SProtoSpace::player_skill_info* mutable_skill_data(int index);
  inline ::SProtoSpace::player_skill_info* add_skill_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::player_skill_info >&
      skill_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::player_skill_info >*
      mutable_skill_data();

  // optional .SProtoSpace.skin_data skin_data = 6;
  inline bool has_skin_data() const;
  inline void clear_skin_data();
  static const int kSkinDataFieldNumber = 6;
  inline const ::SProtoSpace::skin_data& skin_data() const;
  inline ::SProtoSpace::skin_data* mutable_skin_data();
  inline ::SProtoSpace::skin_data* release_skin_data();
  inline void set_allocated_skin_data(::SProtoSpace::skin_data* skin_data);

  // repeated .SProtoSpace.db_equip_data equips = 7;
  inline int equips_size() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 7;
  inline const ::SProtoSpace::db_equip_data& equips(int index) const;
  inline ::SProtoSpace::db_equip_data* mutable_equips(int index);
  inline ::SProtoSpace::db_equip_data* add_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_equip_data >&
      equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_equip_data >*
      mutable_equips();

  // repeated .SProtoSpace.talent_info talent_data = 8;
  inline int talent_data_size() const;
  inline void clear_talent_data();
  static const int kTalentDataFieldNumber = 8;
  inline const ::SProtoSpace::talent_info& talent_data(int index) const;
  inline ::SProtoSpace::talent_info* mutable_talent_data(int index);
  inline ::SProtoSpace::talent_info* add_talent_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talent_info >&
      talent_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talent_info >*
      mutable_talent_data();

  // optional bool active = 9;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 9;
  inline bool active() const;
  inline void set_active(bool value);

  // optional .SProtoSpace.bag_data bag = 10;
  inline bool has_bag() const;
  inline void clear_bag();
  static const int kBagFieldNumber = 10;
  inline const ::SProtoSpace::bag_data& bag() const;
  inline ::SProtoSpace::bag_data* mutable_bag();
  inline ::SProtoSpace::bag_data* release_bag();
  inline void set_allocated_bag(::SProtoSpace::bag_data* bag);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_player_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_talent_grade();
  inline void clear_has_talent_grade();
  inline void set_has_skin_data();
  inline void clear_has_skin_data();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_bag();
  inline void clear_has_bag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::uint32 template_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::player_skill_info > skill_data_;
  ::SProtoSpace::skin_data* skin_data_;
  ::google::protobuf::int32 talent_grade_;
  bool active_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_equip_data > equips_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talent_info > talent_data_;
  ::SProtoSpace::bag_data* bag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_player_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_player_base : public ::google::protobuf::Message {
 public:
  unit_player_base();
  virtual ~unit_player_base();

  unit_player_base(const unit_player_base& from);

  inline unit_player_base& operator=(const unit_player_base& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_player_base& default_instance();

  void Swap(unit_player_base* other);

  // implements Message ----------------------------------------------

  unit_player_base* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_player_base& from);
  void MergeFrom(const unit_player_base& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // repeated uint64 liked_list = 3;
  inline int liked_list_size() const;
  inline void clear_liked_list();
  static const int kLikedListFieldNumber = 3;
  inline ::google::protobuf::uint64 liked_list(int index) const;
  inline void set_liked_list(int index, ::google::protobuf::uint64 value);
  inline void add_liked_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      liked_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_liked_list();

  // optional uint32 like = 4;
  inline bool has_like() const;
  inline void clear_like();
  static const int kLikeFieldNumber = 4;
  inline ::google::protobuf::uint32 like() const;
  inline void set_like(::google::protobuf::uint32 value);

  // optional string signature = 5;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 5;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // optional .SProtoSpace.lsg_position_info position = 6;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 6;
  inline const ::SProtoSpace::lsg_position_info& position() const;
  inline ::SProtoSpace::lsg_position_info* mutable_position();
  inline ::SProtoSpace::lsg_position_info* release_position();
  inline void set_allocated_position(::SProtoSpace::lsg_position_info* position);

  // repeated uint64 show_hero_list = 7;
  inline int show_hero_list_size() const;
  inline void clear_show_hero_list();
  static const int kShowHeroListFieldNumber = 7;
  inline ::google::protobuf::uint64 show_hero_list(int index) const;
  inline void set_show_hero_list(int index, ::google::protobuf::uint64 value);
  inline void add_show_hero_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      show_hero_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_show_hero_list();

  // optional uint32 border = 8;
  inline bool has_border() const;
  inline void clear_border();
  static const int kBorderFieldNumber = 8;
  inline ::google::protobuf::uint32 border() const;
  inline void set_border(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_player_base)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_like();
  inline void clear_has_like();
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_border();
  inline void clear_has_border();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::uint32 like_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > liked_list_;
  ::std::string* signature_;
  ::SProtoSpace::lsg_position_info* position_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > show_hero_list_;
  ::google::protobuf::uint32 border_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_player_base* default_instance_;
};
// -------------------------------------------------------------------

class role_player_data : public ::google::protobuf::Message {
 public:
  role_player_data();
  virtual ~role_player_data();

  role_player_data(const role_player_data& from);

  inline role_player_data& operator=(const role_player_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_player_data& default_instance();

  void Swap(role_player_data* other);

  // implements Message ----------------------------------------------

  role_player_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_player_data& from);
  void MergeFrom(const role_player_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.unit_player_data players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::SProtoSpace::unit_player_data& players(int index) const;
  inline ::SProtoSpace::unit_player_data* mutable_players(int index);
  inline ::SProtoSpace::unit_player_data* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_player_data >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_player_data >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_player_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_player_data > players_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static role_player_data* default_instance_;
};
// -------------------------------------------------------------------

class role_show_data : public ::google::protobuf::Message {
 public:
  role_show_data();
  virtual ~role_show_data();

  role_show_data(const role_show_data& from);

  inline role_show_data& operator=(const role_show_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_data& default_instance();

  void Swap(role_show_data* other);

  // implements Message ----------------------------------------------

  role_show_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_data& from);
  void MergeFrom(const role_show_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.role_show_info show_info = 1;
  inline int show_info_size() const;
  inline void clear_show_info();
  static const int kShowInfoFieldNumber = 1;
  inline const ::SProtoSpace::role_show_info& show_info(int index) const;
  inline ::SProtoSpace::role_show_info* mutable_show_info(int index);
  inline ::SProtoSpace::role_show_info* add_show_info();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_show_info >&
      show_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_show_info >*
      mutable_show_info();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_show_info > show_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static role_show_data* default_instance_;
};
// -------------------------------------------------------------------

class hero_soul_data : public ::google::protobuf::Message {
 public:
  hero_soul_data();
  virtual ~hero_soul_data();

  hero_soul_data(const hero_soul_data& from);

  inline hero_soul_data& operator=(const hero_soul_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_soul_data& default_instance();

  void Swap(hero_soul_data* other);

  // implements Message ----------------------------------------------

  hero_soul_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_soul_data& from);
  void MergeFrom(const hero_soul_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional int32 slot = 2;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 2;
  inline ::google::protobuf::int32 slot() const;
  inline void set_slot(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_soul_data)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_slot();
  inline void clear_has_slot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::int32 slot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static hero_soul_data* default_instance_;
};
// -------------------------------------------------------------------

class bag_data : public ::google::protobuf::Message {
 public:
  bag_data();
  virtual ~bag_data();

  bag_data(const bag_data& from);

  inline bag_data& operator=(const bag_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bag_data& default_instance();

  void Swap(bag_data* other);

  // implements Message ----------------------------------------------

  bag_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bag_data& from);
  void MergeFrom(const bag_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 item_ids = 1;
  inline int item_ids_size() const;
  inline void clear_item_ids();
  static const int kItemIdsFieldNumber = 1;
  inline ::google::protobuf::uint64 item_ids(int index) const;
  inline void set_item_ids(int index, ::google::protobuf::uint64 value);
  inline void add_item_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      item_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_item_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.bag_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > item_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static bag_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_hero_data : public ::google::protobuf::Message {
 public:
  unit_hero_data();
  virtual ~unit_hero_data();

  unit_hero_data(const unit_hero_data& from);

  inline unit_hero_data& operator=(const unit_hero_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_hero_data& default_instance();

  void Swap(unit_hero_data* other);

  // implements Message ----------------------------------------------

  unit_hero_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_hero_data& from);
  void MergeFrom(const unit_hero_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 template_id = 3;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 3;
  inline ::google::protobuf::uint32 template_id() const;
  inline void set_template_id(::google::protobuf::uint32 value);

  // optional int32 lv = 4;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 4;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 star = 5;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 5;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // optional int32 quality = 6;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 6;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional bool awaken = 7;
  inline bool has_awaken() const;
  inline void clear_awaken();
  static const int kAwakenFieldNumber = 7;
  inline bool awaken() const;
  inline void set_awaken(bool value);

  // optional int32 exp = 8;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 8;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional bool locked = 9;
  inline bool has_locked() const;
  inline void clear_locked();
  static const int kLockedFieldNumber = 9;
  inline bool locked() const;
  inline void set_locked(bool value);

  // optional uint32 create_time = 10;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 10;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // optional .SProtoSpace.skin_data skin_info = 11;
  inline bool has_skin_info() const;
  inline void clear_skin_info();
  static const int kSkinInfoFieldNumber = 11;
  inline const ::SProtoSpace::skin_data& skin_info() const;
  inline ::SProtoSpace::skin_data* mutable_skin_info();
  inline ::SProtoSpace::skin_data* release_skin_info();
  inline void set_allocated_skin_info(::SProtoSpace::skin_data* skin_info);

  // repeated .SProtoSpace.skill_data skills = 12;
  inline int skills_size() const;
  inline void clear_skills();
  static const int kSkillsFieldNumber = 12;
  inline const ::SProtoSpace::skill_data& skills(int index) const;
  inline ::SProtoSpace::skill_data* mutable_skills(int index);
  inline ::SProtoSpace::skill_data* add_skills();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::skill_data >&
      skills() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::skill_data >*
      mutable_skills();

  // repeated .SProtoSpace.hero_soul_data souls = 13;
  inline int souls_size() const;
  inline void clear_souls();
  static const int kSoulsFieldNumber = 13;
  inline const ::SProtoSpace::hero_soul_data& souls(int index) const;
  inline ::SProtoSpace::hero_soul_data* mutable_souls(int index);
  inline ::SProtoSpace::hero_soul_data* add_souls();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_soul_data >&
      souls() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_soul_data >*
      mutable_souls();

  // repeated .SProtoSpace.hero_attr_value awaken_attr = 14;
  inline int awaken_attr_size() const;
  inline void clear_awaken_attr();
  static const int kAwakenAttrFieldNumber = 14;
  inline const ::SProtoSpace::hero_attr_value& awaken_attr(int index) const;
  inline ::SProtoSpace::hero_attr_value* mutable_awaken_attr(int index);
  inline ::SProtoSpace::hero_attr_value* add_awaken_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value >&
      awaken_attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value >*
      mutable_awaken_attr();

  // optional string name = 15;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 15;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .SProtoSpace.hero_equip_data equips = 16;
  inline int equips_size() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 16;
  inline const ::SProtoSpace::hero_equip_data& equips(int index) const;
  inline ::SProtoSpace::hero_equip_data* mutable_equips(int index);
  inline ::SProtoSpace::hero_equip_data* add_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >&
      equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >*
      mutable_equips();

  // repeated .SProtoSpace.talisman_data talismans = 17;
  inline int talismans_size() const;
  inline void clear_talismans();
  static const int kTalismansFieldNumber = 17;
  inline const ::SProtoSpace::talisman_data& talismans(int index) const;
  inline ::SProtoSpace::talisman_data* mutable_talismans(int index);
  inline ::SProtoSpace::talisman_data* add_talismans();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talisman_data >&
      talismans() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talisman_data >*
      mutable_talismans();

  // optional .SProtoSpace.bag_data bag = 18;
  inline bool has_bag() const;
  inline void clear_bag();
  static const int kBagFieldNumber = 18;
  inline const ::SProtoSpace::bag_data& bag() const;
  inline ::SProtoSpace::bag_data* mutable_bag();
  inline ::SProtoSpace::bag_data* release_bag();
  inline void set_allocated_bag(::SProtoSpace::bag_data* bag);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_hero_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_awaken();
  inline void clear_has_awaken();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_locked();
  inline void clear_has_locked();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_skin_info();
  inline void clear_has_skin_info();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_bag();
  inline void clear_has_bag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::uint32 template_id_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 exp_;
  bool awaken_;
  bool locked_;
  ::google::protobuf::uint32 create_time_;
  ::SProtoSpace::skin_data* skin_info_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::skill_data > skills_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_soul_data > souls_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value > awaken_attr_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data > equips_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talisman_data > talismans_;
  ::SProtoSpace::bag_data* bag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_hero_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_formation_data : public ::google::protobuf::Message {
 public:
  unit_formation_data();
  virtual ~unit_formation_data();

  unit_formation_data(const unit_formation_data& from);

  inline unit_formation_data& operator=(const unit_formation_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_formation_data& default_instance();

  void Swap(unit_formation_data* other);

  // implements Message ----------------------------------------------

  unit_formation_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_formation_data& from);
  void MergeFrom(const unit_formation_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated uint64 hero_ids = 4;
  inline int hero_ids_size() const;
  inline void clear_hero_ids();
  static const int kHeroIdsFieldNumber = 4;
  inline ::google::protobuf::uint64 hero_ids(int index) const;
  inline void set_hero_ids(int index, ::google::protobuf::uint64 value);
  inline void add_hero_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      hero_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_hero_ids();

  // optional int32 role_position = 5;
  inline bool has_role_position() const;
  inline void clear_role_position();
  static const int kRolePositionFieldNumber = 5;
  inline ::google::protobuf::int32 role_position() const;
  inline void set_role_position(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_formation_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_role_position();
  inline void clear_has_role_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > hero_ids_;
  ::google::protobuf::int32 role_position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_formation_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_role_pet_data : public ::google::protobuf::Message {
 public:
  unit_role_pet_data();
  virtual ~unit_role_pet_data();

  unit_role_pet_data(const unit_role_pet_data& from);

  inline unit_role_pet_data& operator=(const unit_role_pet_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_role_pet_data& default_instance();

  void Swap(unit_role_pet_data* other);

  // implements Message ----------------------------------------------

  unit_role_pet_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_role_pet_data& from);
  void MergeFrom(const unit_role_pet_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional .SProtoSpace.pet_single_data pet_data = 3;
  inline bool has_pet_data() const;
  inline void clear_pet_data();
  static const int kPetDataFieldNumber = 3;
  inline const ::SProtoSpace::pet_single_data& pet_data() const;
  inline ::SProtoSpace::pet_single_data* mutable_pet_data();
  inline ::SProtoSpace::pet_single_data* release_pet_data();
  inline void set_allocated_pet_data(::SProtoSpace::pet_single_data* pet_data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_role_pet_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_pet_data();
  inline void clear_has_pet_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::SProtoSpace::pet_single_data* pet_data_;
  ::google::protobuf::uint32 db_mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_role_pet_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_role_pet_all : public ::google::protobuf::Message {
 public:
  unit_role_pet_all();
  virtual ~unit_role_pet_all();

  unit_role_pet_all(const unit_role_pet_all& from);

  inline unit_role_pet_all& operator=(const unit_role_pet_all& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_role_pet_all& default_instance();

  void Swap(unit_role_pet_all* other);

  // implements Message ----------------------------------------------

  unit_role_pet_all* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_role_pet_all& from);
  void MergeFrom(const unit_role_pet_all& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional int32 out_time_today = 3;
  inline bool has_out_time_today() const;
  inline void clear_out_time_today();
  static const int kOutTimeTodayFieldNumber = 3;
  inline ::google::protobuf::int32 out_time_today() const;
  inline void set_out_time_today(::google::protobuf::int32 value);

  // optional uint32 last_reset_time = 4;
  inline bool has_last_reset_time() const;
  inline void clear_last_reset_time();
  static const int kLastResetTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 last_reset_time() const;
  inline void set_last_reset_time(::google::protobuf::uint32 value);

  // optional uint32 next_out_time = 5;
  inline bool has_next_out_time() const;
  inline void clear_next_out_time();
  static const int kNextOutTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 next_out_time() const;
  inline void set_next_out_time(::google::protobuf::uint32 value);

  // optional int32 cur_show_pet_id = 6;
  inline bool has_cur_show_pet_id() const;
  inline void clear_cur_show_pet_id();
  static const int kCurShowPetIdFieldNumber = 6;
  inline ::google::protobuf::int32 cur_show_pet_id() const;
  inline void set_cur_show_pet_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_role_pet_all)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_out_time_today();
  inline void clear_has_out_time_today();
  inline void set_has_last_reset_time();
  inline void clear_has_last_reset_time();
  inline void set_has_next_out_time();
  inline void clear_has_next_out_time();
  inline void set_has_cur_show_pet_id();
  inline void clear_has_cur_show_pet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::int32 out_time_today_;
  ::google::protobuf::uint32 last_reset_time_;
  ::google::protobuf::uint32 next_out_time_;
  ::google::protobuf::int32 cur_show_pet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_role_pet_all* default_instance_;
};
// -------------------------------------------------------------------

class role_hero_data : public ::google::protobuf::Message {
 public:
  role_hero_data();
  virtual ~role_hero_data();

  role_hero_data(const role_hero_data& from);

  inline role_hero_data& operator=(const role_hero_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_hero_data& default_instance();

  void Swap(role_hero_data* other);

  // implements Message ----------------------------------------------

  role_hero_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_hero_data& from);
  void MergeFrom(const role_hero_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.unit_hero_data heros = 1;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 1;
  inline const ::SProtoSpace::unit_hero_data& heros(int index) const;
  inline ::SProtoSpace::unit_hero_data* mutable_heros(int index);
  inline ::SProtoSpace::unit_hero_data* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_hero_data >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_hero_data >*
      mutable_heros();

  // repeated .SProtoSpace.unit_formation_data formations = 2;
  inline int formations_size() const;
  inline void clear_formations();
  static const int kFormationsFieldNumber = 2;
  inline const ::SProtoSpace::unit_formation_data& formations(int index) const;
  inline ::SProtoSpace::unit_formation_data* mutable_formations(int index);
  inline ::SProtoSpace::unit_formation_data* add_formations();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_formation_data >&
      formations() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_formation_data >*
      mutable_formations();

  // repeated .SProtoSpace.unit_role_pet_data pet_s = 3;
  inline int pet_s_size() const;
  inline void clear_pet_s();
  static const int kPetSFieldNumber = 3;
  inline const ::SProtoSpace::unit_role_pet_data& pet_s(int index) const;
  inline ::SProtoSpace::unit_role_pet_data* mutable_pet_s(int index);
  inline ::SProtoSpace::unit_role_pet_data* add_pet_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_role_pet_data >&
      pet_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_role_pet_data >*
      mutable_pet_s();

  // repeated .SProtoSpace.unit_role_pet_all pet_all = 4;
  inline int pet_all_size() const;
  inline void clear_pet_all();
  static const int kPetAllFieldNumber = 4;
  inline const ::SProtoSpace::unit_role_pet_all& pet_all(int index) const;
  inline ::SProtoSpace::unit_role_pet_all* mutable_pet_all(int index);
  inline ::SProtoSpace::unit_role_pet_all* add_pet_all();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_role_pet_all >&
      pet_all() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_role_pet_all >*
      mutable_pet_all();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_hero_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_hero_data > heros_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_formation_data > formations_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_role_pet_data > pet_s_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_role_pet_all > pet_all_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static role_hero_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_quest_data : public ::google::protobuf::Message {
 public:
  unit_quest_data();
  virtual ~unit_quest_data();

  unit_quest_data(const unit_quest_data& from);

  inline unit_quest_data& operator=(const unit_quest_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_quest_data& default_instance();

  void Swap(unit_quest_data* other);

  // implements Message ----------------------------------------------

  unit_quest_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_quest_data& from);
  void MergeFrom(const unit_quest_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional .SProtoSpace.quest_data data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::SProtoSpace::quest_data& data() const;
  inline ::SProtoSpace::quest_data* mutable_data();
  inline ::SProtoSpace::quest_data* release_data();
  inline void set_allocated_data(::SProtoSpace::quest_data* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_quest_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::SProtoSpace::quest_data* data_;
  ::google::protobuf::uint32 db_mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_quest_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_activity_data : public ::google::protobuf::Message {
 public:
  unit_activity_data();
  virtual ~unit_activity_data();

  unit_activity_data(const unit_activity_data& from);

  inline unit_activity_data& operator=(const unit_activity_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_activity_data& default_instance();

  void Swap(unit_activity_data* other);

  // implements Message ----------------------------------------------

  unit_activity_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_activity_data& from);
  void MergeFrom(const unit_activity_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional int32 activity_id = 3;
  inline bool has_activity_id() const;
  inline void clear_activity_id();
  static const int kActivityIdFieldNumber = 3;
  inline ::google::protobuf::int32 activity_id() const;
  inline void set_activity_id(::google::protobuf::int32 value);

  // optional bool finish = 4;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 4;
  inline bool finish() const;
  inline void set_finish(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_activity_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_activity_id();
  inline void clear_has_activity_id();
  inline void set_has_finish();
  inline void clear_has_finish();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::int32 activity_id_;
  bool finish_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_activity_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_achieve_pt_award_data : public ::google::protobuf::Message {
 public:
  unit_achieve_pt_award_data();
  virtual ~unit_achieve_pt_award_data();

  unit_achieve_pt_award_data(const unit_achieve_pt_award_data& from);

  inline unit_achieve_pt_award_data& operator=(const unit_achieve_pt_award_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_achieve_pt_award_data& default_instance();

  void Swap(unit_achieve_pt_award_data* other);

  // implements Message ----------------------------------------------

  unit_achieve_pt_award_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_achieve_pt_award_data& from);
  void MergeFrom(const unit_achieve_pt_award_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional int32 award_id = 3;
  inline bool has_award_id() const;
  inline void clear_award_id();
  static const int kAwardIdFieldNumber = 3;
  inline ::google::protobuf::int32 award_id() const;
  inline void set_award_id(::google::protobuf::int32 value);

  // optional bool finish = 4;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 4;
  inline bool finish() const;
  inline void set_finish(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_achieve_pt_award_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_award_id();
  inline void clear_has_award_id();
  inline void set_has_finish();
  inline void clear_has_finish();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::int32 award_id_;
  bool finish_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_achieve_pt_award_data* default_instance_;
};
// -------------------------------------------------------------------

class role_quest_data : public ::google::protobuf::Message {
 public:
  role_quest_data();
  virtual ~role_quest_data();

  role_quest_data(const role_quest_data& from);

  inline role_quest_data& operator=(const role_quest_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_quest_data& default_instance();

  void Swap(role_quest_data* other);

  // implements Message ----------------------------------------------

  role_quest_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_quest_data& from);
  void MergeFrom(const role_quest_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.unit_quest_data quests = 1;
  inline int quests_size() const;
  inline void clear_quests();
  static const int kQuestsFieldNumber = 1;
  inline const ::SProtoSpace::unit_quest_data& quests(int index) const;
  inline ::SProtoSpace::unit_quest_data* mutable_quests(int index);
  inline ::SProtoSpace::unit_quest_data* add_quests();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_quest_data >&
      quests() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_quest_data >*
      mutable_quests();

  // repeated .SProtoSpace.unit_activity_data activities = 2;
  inline int activities_size() const;
  inline void clear_activities();
  static const int kActivitiesFieldNumber = 2;
  inline const ::SProtoSpace::unit_activity_data& activities(int index) const;
  inline ::SProtoSpace::unit_activity_data* mutable_activities(int index);
  inline ::SProtoSpace::unit_activity_data* add_activities();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_activity_data >&
      activities() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_activity_data >*
      mutable_activities();

  // repeated .SProtoSpace.unit_achieve_pt_award_data pt_awards = 3;
  inline int pt_awards_size() const;
  inline void clear_pt_awards();
  static const int kPtAwardsFieldNumber = 3;
  inline const ::SProtoSpace::unit_achieve_pt_award_data& pt_awards(int index) const;
  inline ::SProtoSpace::unit_achieve_pt_award_data* mutable_pt_awards(int index);
  inline ::SProtoSpace::unit_achieve_pt_award_data* add_pt_awards();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_achieve_pt_award_data >&
      pt_awards() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_achieve_pt_award_data >*
      mutable_pt_awards();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_quest_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_quest_data > quests_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_activity_data > activities_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_achieve_pt_award_data > pt_awards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static role_quest_data* default_instance_;
};
// -------------------------------------------------------------------

class db_drop_spid : public ::google::protobuf::Message {
 public:
  db_drop_spid();
  virtual ~db_drop_spid();

  db_drop_spid(const db_drop_spid& from);

  inline db_drop_spid& operator=(const db_drop_spid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_drop_spid& default_instance();

  void Swap(db_drop_spid* other);

  // implements Message ----------------------------------------------

  db_drop_spid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_drop_spid& from);
  void MergeFrom(const db_drop_spid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 step = 2;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 2;
  inline ::google::protobuf::int32 step() const;
  inline void set_step(::google::protobuf::int32 value);

  // optional int32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_drop_spid)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 step_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_drop_spid* default_instance_;
};
// -------------------------------------------------------------------

class unit_soul_attr : public ::google::protobuf::Message {
 public:
  unit_soul_attr();
  virtual ~unit_soul_attr();

  unit_soul_attr(const unit_soul_attr& from);

  inline unit_soul_attr& operator=(const unit_soul_attr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_soul_attr& default_instance();

  void Swap(unit_soul_attr* other);

  // implements Message ----------------------------------------------

  unit_soul_attr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_soul_attr& from);
  void MergeFrom(const unit_soul_attr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::uint32 template_id() const;
  inline void set_template_id(::google::protobuf::uint32 value);

  // optional int32 init_value = 2;
  inline bool has_init_value() const;
  inline void clear_init_value();
  static const int kInitValueFieldNumber = 2;
  inline ::google::protobuf::int32 init_value() const;
  inline void set_init_value(::google::protobuf::int32 value);

  // optional int32 cur_value = 3;
  inline bool has_cur_value() const;
  inline void clear_cur_value();
  static const int kCurValueFieldNumber = 3;
  inline ::google::protobuf::int32 cur_value() const;
  inline void set_cur_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_soul_attr)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_init_value();
  inline void clear_has_init_value();
  inline void set_has_cur_value();
  inline void clear_has_cur_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 template_id_;
  ::google::protobuf::int32 init_value_;
  ::google::protobuf::int32 cur_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_soul_attr* default_instance_;
};
// -------------------------------------------------------------------

class unit_soul_data : public ::google::protobuf::Message {
 public:
  unit_soul_data();
  virtual ~unit_soul_data();

  unit_soul_data(const unit_soul_data& from);

  inline unit_soul_data& operator=(const unit_soul_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_soul_data& default_instance();

  void Swap(unit_soul_data* other);

  // implements Message ----------------------------------------------

  unit_soul_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_soul_data& from);
  void MergeFrom(const unit_soul_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 template_id = 3;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 3;
  inline ::google::protobuf::uint32 template_id() const;
  inline void set_template_id(::google::protobuf::uint32 value);

  // optional uint32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 mask = 5;
  inline bool has_mask() const;
  inline void clear_mask();
  static const int kMaskFieldNumber = 5;
  inline ::google::protobuf::uint32 mask() const;
  inline void set_mask(::google::protobuf::uint32 value);

  // optional uint32 create_time = 6;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.unit_soul_attr main_attrs = 7;
  inline int main_attrs_size() const;
  inline void clear_main_attrs();
  static const int kMainAttrsFieldNumber = 7;
  inline const ::SProtoSpace::unit_soul_attr& main_attrs(int index) const;
  inline ::SProtoSpace::unit_soul_attr* mutable_main_attrs(int index);
  inline ::SProtoSpace::unit_soul_attr* add_main_attrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_soul_attr >&
      main_attrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_soul_attr >*
      mutable_main_attrs();

  // repeated .SProtoSpace.unit_soul_attr add_attrs = 8;
  inline int add_attrs_size() const;
  inline void clear_add_attrs();
  static const int kAddAttrsFieldNumber = 8;
  inline const ::SProtoSpace::unit_soul_attr& add_attrs(int index) const;
  inline ::SProtoSpace::unit_soul_attr* mutable_add_attrs(int index);
  inline ::SProtoSpace::unit_soul_attr* add_add_attrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_soul_attr >&
      add_attrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_soul_attr >*
      mutable_add_attrs();

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_soul_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_mask();
  inline void clear_has_mask();
  inline void set_has_create_time();
  inline void clear_has_create_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::uint32 template_id_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 mask_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_soul_attr > main_attrs_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_soul_attr > add_attrs_;
  ::google::protobuf::uint32 create_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_soul_data* default_instance_;
};
// -------------------------------------------------------------------

class role_soul_data : public ::google::protobuf::Message {
 public:
  role_soul_data();
  virtual ~role_soul_data();

  role_soul_data(const role_soul_data& from);

  inline role_soul_data& operator=(const role_soul_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_soul_data& default_instance();

  void Swap(role_soul_data* other);

  // implements Message ----------------------------------------------

  role_soul_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_soul_data& from);
  void MergeFrom(const role_soul_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.unit_soul_data souls = 1;
  inline int souls_size() const;
  inline void clear_souls();
  static const int kSoulsFieldNumber = 1;
  inline const ::SProtoSpace::unit_soul_data& souls(int index) const;
  inline ::SProtoSpace::unit_soul_data* mutable_souls(int index);
  inline ::SProtoSpace::unit_soul_data* add_souls();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_soul_data >&
      souls() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_soul_data >*
      mutable_souls();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_soul_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_soul_data > souls_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static role_soul_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_discover_data : public ::google::protobuf::Message {
 public:
  unit_discover_data();
  virtual ~unit_discover_data();

  unit_discover_data(const unit_discover_data& from);

  inline unit_discover_data& operator=(const unit_discover_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_discover_data& default_instance();

  void Swap(unit_discover_data* other);

  // implements Message ----------------------------------------------

  unit_discover_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_discover_data& from);
  void MergeFrom(const unit_discover_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional .SProtoSpace.discover_data discover = 3;
  inline bool has_discover() const;
  inline void clear_discover();
  static const int kDiscoverFieldNumber = 3;
  inline const ::SProtoSpace::discover_data& discover() const;
  inline ::SProtoSpace::discover_data* mutable_discover();
  inline ::SProtoSpace::discover_data* release_discover();
  inline void set_allocated_discover(::SProtoSpace::discover_data* discover);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_discover_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_discover();
  inline void clear_has_discover();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::SProtoSpace::discover_data* discover_;
  ::google::protobuf::uint32 db_mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_discover_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_chapter_data : public ::google::protobuf::Message {
 public:
  unit_chapter_data();
  virtual ~unit_chapter_data();

  unit_chapter_data(const unit_chapter_data& from);

  inline unit_chapter_data& operator=(const unit_chapter_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_chapter_data& default_instance();

  void Swap(unit_chapter_data* other);

  // implements Message ----------------------------------------------

  unit_chapter_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_chapter_data& from);
  void MergeFrom(const unit_chapter_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bool simple_open = 4;
  inline bool has_simple_open() const;
  inline void clear_simple_open();
  static const int kSimpleOpenFieldNumber = 4;
  inline bool simple_open() const;
  inline void set_simple_open(bool value);

  // optional bool diff_open = 5;
  inline bool has_diff_open() const;
  inline void clear_diff_open();
  static const int kDiffOpenFieldNumber = 5;
  inline bool diff_open() const;
  inline void set_diff_open(bool value);

  // optional bool simple_pass = 6;
  inline bool has_simple_pass() const;
  inline void clear_simple_pass();
  static const int kSimplePassFieldNumber = 6;
  inline bool simple_pass() const;
  inline void set_simple_pass(bool value);

  // optional bool diff_pass = 7;
  inline bool has_diff_pass() const;
  inline void clear_diff_pass();
  static const int kDiffPassFieldNumber = 7;
  inline bool diff_pass() const;
  inline void set_diff_pass(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_chapter_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_simple_open();
  inline void clear_has_simple_open();
  inline void set_has_diff_open();
  inline void clear_has_diff_open();
  inline void set_has_simple_pass();
  inline void clear_has_simple_pass();
  inline void set_has_diff_pass();
  inline void clear_has_diff_pass();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::int32 id_;
  bool simple_open_;
  bool diff_open_;
  bool simple_pass_;
  bool diff_pass_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_chapter_data* default_instance_;
};
// -------------------------------------------------------------------

class res_instance_data : public ::google::protobuf::Message {
 public:
  res_instance_data();
  virtual ~res_instance_data();

  res_instance_data(const res_instance_data& from);

  inline res_instance_data& operator=(const res_instance_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const res_instance_data& default_instance();

  void Swap(res_instance_data* other);

  // implements Message ----------------------------------------------

  res_instance_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const res_instance_data& from);
  void MergeFrom(const res_instance_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 instance_index = 1;
  inline bool has_instance_index() const;
  inline void clear_instance_index();
  static const int kInstanceIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 instance_index() const;
  inline void set_instance_index(::google::protobuf::uint32 value);

  // optional int32 level_index = 2;
  inline bool has_level_index() const;
  inline void clear_level_index();
  static const int kLevelIndexFieldNumber = 2;
  inline ::google::protobuf::int32 level_index() const;
  inline void set_level_index(::google::protobuf::int32 value);

  // repeated .SProtoSpace.discover_monster boss = 3;
  inline int boss_size() const;
  inline void clear_boss();
  static const int kBossFieldNumber = 3;
  inline const ::SProtoSpace::discover_monster& boss(int index) const;
  inline ::SProtoSpace::discover_monster* mutable_boss(int index);
  inline ::SProtoSpace::discover_monster* add_boss();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discover_monster >&
      boss() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discover_monster >*
      mutable_boss();

  // @@protoc_insertion_point(class_scope:SProtoSpace.res_instance_data)
 private:
  inline void set_has_instance_index();
  inline void clear_has_instance_index();
  inline void set_has_level_index();
  inline void clear_has_level_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 instance_index_;
  ::google::protobuf::int32 level_index_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discover_monster > boss_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static res_instance_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_res_instance_data : public ::google::protobuf::Message {
 public:
  unit_res_instance_data();
  virtual ~unit_res_instance_data();

  unit_res_instance_data(const unit_res_instance_data& from);

  inline unit_res_instance_data& operator=(const unit_res_instance_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_res_instance_data& default_instance();

  void Swap(unit_res_instance_data* other);

  // implements Message ----------------------------------------------

  unit_res_instance_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_res_instance_data& from);
  void MergeFrom(const unit_res_instance_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional .SProtoSpace.res_instance_data data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::SProtoSpace::res_instance_data& data() const;
  inline ::SProtoSpace::res_instance_data* mutable_data();
  inline ::SProtoSpace::res_instance_data* release_data();
  inline void set_allocated_data(::SProtoSpace::res_instance_data* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_res_instance_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::uint32 type_;
  ::SProtoSpace::res_instance_data* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_res_instance_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_section_star_data : public ::google::protobuf::Message {
 public:
  unit_section_star_data();
  virtual ~unit_section_star_data();

  unit_section_star_data(const unit_section_star_data& from);

  inline unit_section_star_data& operator=(const unit_section_star_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_section_star_data& default_instance();

  void Swap(unit_section_star_data* other);

  // implements Message ----------------------------------------------

  unit_section_star_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_section_star_data& from);
  void MergeFrom(const unit_section_star_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional int32 reward_id = 4;
  inline bool has_reward_id() const;
  inline void clear_reward_id();
  static const int kRewardIdFieldNumber = 4;
  inline ::google::protobuf::int32 reward_id() const;
  inline void set_reward_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_section_star_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_reward_id();
  inline void clear_has_reward_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::int32 reward_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_section_star_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_tower_data : public ::google::protobuf::Message {
 public:
  unit_tower_data();
  virtual ~unit_tower_data();

  unit_tower_data(const unit_tower_data& from);

  inline unit_tower_data& operator=(const unit_tower_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_tower_data& default_instance();

  void Swap(unit_tower_data* other);

  // implements Message ----------------------------------------------

  unit_tower_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_tower_data& from);
  void MergeFrom(const unit_tower_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 max_floor = 3 [default = 0];
  inline bool has_max_floor() const;
  inline void clear_max_floor();
  static const int kMaxFloorFieldNumber = 3;
  inline ::google::protobuf::uint32 max_floor() const;
  inline void set_max_floor(::google::protobuf::uint32 value);

  // optional uint32 reset_times = 4 [default = 1];
  inline bool has_reset_times() const;
  inline void clear_reset_times();
  static const int kResetTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 reset_times() const;
  inline void set_reset_times(::google::protobuf::uint32 value);

  // optional uint32 cur_floor = 5 [default = 1];
  inline bool has_cur_floor() const;
  inline void clear_cur_floor();
  static const int kCurFloorFieldNumber = 5;
  inline ::google::protobuf::uint32 cur_floor() const;
  inline void set_cur_floor(::google::protobuf::uint32 value);

  // optional uint32 cur_step = 6;
  inline bool has_cur_step() const;
  inline void clear_cur_step();
  static const int kCurStepFieldNumber = 6;
  inline ::google::protobuf::uint32 cur_step() const;
  inline void set_cur_step(::google::protobuf::uint32 value);

  // optional bool first_in = 7;
  inline bool has_first_in() const;
  inline void clear_first_in();
  static const int kFirstInFieldNumber = 7;
  inline bool first_in() const;
  inline void set_first_in(bool value);

  // optional bool step_has_pass = 8;
  inline bool has_step_has_pass() const;
  inline void clear_step_has_pass();
  static const int kStepHasPassFieldNumber = 8;
  inline bool step_has_pass() const;
  inline void set_step_has_pass(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_tower_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_max_floor();
  inline void clear_has_max_floor();
  inline void set_has_reset_times();
  inline void clear_has_reset_times();
  inline void set_has_cur_floor();
  inline void clear_has_cur_floor();
  inline void set_has_cur_step();
  inline void clear_has_cur_step();
  inline void set_has_first_in();
  inline void clear_has_first_in();
  inline void set_has_step_has_pass();
  inline void clear_has_step_has_pass();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::uint32 max_floor_;
  ::google::protobuf::uint32 reset_times_;
  ::google::protobuf::uint32 cur_floor_;
  ::google::protobuf::uint32 cur_step_;
  bool first_in_;
  bool step_has_pass_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_tower_data* default_instance_;
};
// -------------------------------------------------------------------

class hero_event_info : public ::google::protobuf::Message {
 public:
  hero_event_info();
  virtual ~hero_event_info();

  hero_event_info(const hero_event_info& from);

  inline hero_event_info& operator=(const hero_event_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_event_info& default_instance();

  void Swap(hero_event_info* other);

  // implements Message ----------------------------------------------

  hero_event_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_event_info& from);
  void MergeFrom(const hero_event_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::int32 hero_id() const;
  inline void set_hero_id(::google::protobuf::int32 value);

  // repeated int32 event_ids = 2;
  inline int event_ids_size() const;
  inline void clear_event_ids();
  static const int kEventIdsFieldNumber = 2;
  inline ::google::protobuf::int32 event_ids(int index) const;
  inline void set_event_ids(int index, ::google::protobuf::int32 value);
  inline void add_event_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      event_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_event_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_event_info)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > event_ids_;
  ::google::protobuf::int32 hero_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static hero_event_info* default_instance_;
};
// -------------------------------------------------------------------

class city_event_info : public ::google::protobuf::Message {
 public:
  city_event_info();
  virtual ~city_event_info();

  city_event_info(const city_event_info& from);

  inline city_event_info& operator=(const city_event_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const city_event_info& default_instance();

  void Swap(city_event_info* other);

  // implements Message ----------------------------------------------

  city_event_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const city_event_info& from);
  void MergeFrom(const city_event_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 city_id = 1;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 1;
  inline ::google::protobuf::int32 city_id() const;
  inline void set_city_id(::google::protobuf::int32 value);

  // repeated int32 event_ids = 2;
  inline int event_ids_size() const;
  inline void clear_event_ids();
  static const int kEventIdsFieldNumber = 2;
  inline ::google::protobuf::int32 event_ids(int index) const;
  inline void set_event_ids(int index, ::google::protobuf::int32 value);
  inline void add_event_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      event_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_event_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.city_event_info)
 private:
  inline void set_has_city_id();
  inline void clear_has_city_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > event_ids_;
  ::google::protobuf::int32 city_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static city_event_info* default_instance_;
};
// -------------------------------------------------------------------

class special_event_data : public ::google::protobuf::Message {
 public:
  special_event_data();
  virtual ~special_event_data();

  special_event_data(const special_event_data& from);

  inline special_event_data& operator=(const special_event_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const special_event_data& default_instance();

  void Swap(special_event_data* other);

  // implements Message ----------------------------------------------

  special_event_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const special_event_data& from);
  void MergeFrom(const special_event_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::int32 event_id() const;
  inline void set_event_id(::google::protobuf::int32 value);

  // optional int32 shi_chen = 2;
  inline bool has_shi_chen() const;
  inline void clear_shi_chen();
  static const int kShiChenFieldNumber = 2;
  inline ::google::protobuf::int32 shi_chen() const;
  inline void set_shi_chen(::google::protobuf::int32 value);

  // optional int32 weather = 3;
  inline bool has_weather() const;
  inline void clear_weather();
  static const int kWeatherFieldNumber = 3;
  inline ::google::protobuf::int32 weather() const;
  inline void set_weather(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.special_event_data)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_shi_chen();
  inline void clear_has_shi_chen();
  inline void set_has_weather();
  inline void clear_has_weather();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 event_id_;
  ::google::protobuf::int32 shi_chen_;
  ::google::protobuf::int32 weather_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static special_event_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_adv_data : public ::google::protobuf::Message {
 public:
  unit_adv_data();
  virtual ~unit_adv_data();

  unit_adv_data(const unit_adv_data& from);

  inline unit_adv_data& operator=(const unit_adv_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_adv_data& default_instance();

  void Swap(unit_adv_data* other);

  // implements Message ----------------------------------------------

  unit_adv_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_adv_data& from);
  void MergeFrom(const unit_adv_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // repeated int32 city_ids = 5;
  inline int city_ids_size() const;
  inline void clear_city_ids();
  static const int kCityIdsFieldNumber = 5;
  inline ::google::protobuf::int32 city_ids(int index) const;
  inline void set_city_ids(int index, ::google::protobuf::int32 value);
  inline void add_city_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      city_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_city_ids();

  // repeated int32 event_ids = 6;
  inline int event_ids_size() const;
  inline void clear_event_ids();
  static const int kEventIdsFieldNumber = 6;
  inline ::google::protobuf::int32 event_ids(int index) const;
  inline void set_event_ids(int index, ::google::protobuf::int32 value);
  inline void add_event_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      event_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_event_ids();

  // repeated .SProtoSpace.hero_favor_info hero_favors = 7;
  inline int hero_favors_size() const;
  inline void clear_hero_favors();
  static const int kHeroFavorsFieldNumber = 7;
  inline const ::SProtoSpace::hero_favor_info& hero_favors(int index) const;
  inline ::SProtoSpace::hero_favor_info* mutable_hero_favors(int index);
  inline ::SProtoSpace::hero_favor_info* add_hero_favors();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_favor_info >&
      hero_favors() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_favor_info >*
      mutable_hero_favors();

  // repeated .SProtoSpace.hero_event_info hero_events = 8;
  inline int hero_events_size() const;
  inline void clear_hero_events();
  static const int kHeroEventsFieldNumber = 8;
  inline const ::SProtoSpace::hero_event_info& hero_events(int index) const;
  inline ::SProtoSpace::hero_event_info* mutable_hero_events(int index);
  inline ::SProtoSpace::hero_event_info* add_hero_events();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_event_info >&
      hero_events() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_event_info >*
      mutable_hero_events();

  // repeated .SProtoSpace.city_event_info city_events = 9;
  inline int city_events_size() const;
  inline void clear_city_events();
  static const int kCityEventsFieldNumber = 9;
  inline const ::SProtoSpace::city_event_info& city_events(int index) const;
  inline ::SProtoSpace::city_event_info* mutable_city_events(int index);
  inline ::SProtoSpace::city_event_info* add_city_events();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::city_event_info >&
      city_events() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::city_event_info >*
      mutable_city_events();

  // repeated int32 cur_ask_ids = 10;
  inline int cur_ask_ids_size() const;
  inline void clear_cur_ask_ids();
  static const int kCurAskIdsFieldNumber = 10;
  inline ::google::protobuf::int32 cur_ask_ids(int index) const;
  inline void set_cur_ask_ids(int index, ::google::protobuf::int32 value);
  inline void add_cur_ask_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cur_ask_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cur_ask_ids();

  // repeated .SProtoSpace.special_event_data sp_data = 11;
  inline int sp_data_size() const;
  inline void clear_sp_data();
  static const int kSpDataFieldNumber = 11;
  inline const ::SProtoSpace::special_event_data& sp_data(int index) const;
  inline ::SProtoSpace::special_event_data* mutable_sp_data(int index);
  inline ::SProtoSpace::special_event_data* add_sp_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::special_event_data >&
      sp_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::special_event_data >*
      mutable_sp_data();

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_adv_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > city_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > event_ids_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_favor_info > hero_favors_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_event_info > hero_events_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::city_event_info > city_events_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cur_ask_ids_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::special_event_data > sp_data_;
  ::google::protobuf::uint32 db_mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_adv_data* default_instance_;
};
// -------------------------------------------------------------------

class guide_step_data : public ::google::protobuf::Message {
 public:
  guide_step_data();
  virtual ~guide_step_data();

  guide_step_data(const guide_step_data& from);

  inline guide_step_data& operator=(const guide_step_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const guide_step_data& default_instance();

  void Swap(guide_step_data* other);

  // implements Message ----------------------------------------------

  guide_step_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const guide_step_data& from);
  void MergeFrom(const guide_step_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 step_id = 1;
  inline bool has_step_id() const;
  inline void clear_step_id();
  static const int kStepIdFieldNumber = 1;
  inline ::google::protobuf::int32 step_id() const;
  inline void set_step_id(::google::protobuf::int32 value);

  // optional bool skip = 2;
  inline bool has_skip() const;
  inline void clear_skip();
  static const int kSkipFieldNumber = 2;
  inline bool skip() const;
  inline void set_skip(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.guide_step_data)
 private:
  inline void set_has_step_id();
  inline void clear_has_step_id();
  inline void set_has_skip();
  inline void clear_has_skip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 step_id_;
  bool skip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static guide_step_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_guide_data : public ::google::protobuf::Message {
 public:
  unit_guide_data();
  virtual ~unit_guide_data();

  unit_guide_data(const unit_guide_data& from);

  inline unit_guide_data& operator=(const unit_guide_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_guide_data& default_instance();

  void Swap(unit_guide_data* other);

  // implements Message ----------------------------------------------

  unit_guide_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_guide_data& from);
  void MergeFrom(const unit_guide_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional int32 guide_id = 3;
  inline bool has_guide_id() const;
  inline void clear_guide_id();
  static const int kGuideIdFieldNumber = 3;
  inline ::google::protobuf::int32 guide_id() const;
  inline void set_guide_id(::google::protobuf::int32 value);

  // optional bool skip = 4;
  inline bool has_skip() const;
  inline void clear_skip();
  static const int kSkipFieldNumber = 4;
  inline bool skip() const;
  inline void set_skip(bool value);

  // repeated .SProtoSpace.guide_step_data step_data = 5;
  inline int step_data_size() const;
  inline void clear_step_data();
  static const int kStepDataFieldNumber = 5;
  inline const ::SProtoSpace::guide_step_data& step_data(int index) const;
  inline ::SProtoSpace::guide_step_data* mutable_step_data(int index);
  inline ::SProtoSpace::guide_step_data* add_step_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::guide_step_data >&
      step_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::guide_step_data >*
      mutable_step_data();

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_guide_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_guide_id();
  inline void clear_has_guide_id();
  inline void set_has_skip();
  inline void clear_has_skip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::int32 guide_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::guide_step_data > step_data_;
  bool skip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_guide_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_plot_little_game_data : public ::google::protobuf::Message {
 public:
  unit_plot_little_game_data();
  virtual ~unit_plot_little_game_data();

  unit_plot_little_game_data(const unit_plot_little_game_data& from);

  inline unit_plot_little_game_data& operator=(const unit_plot_little_game_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_plot_little_game_data& default_instance();

  void Swap(unit_plot_little_game_data* other);

  // implements Message ----------------------------------------------

  unit_plot_little_game_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_plot_little_game_data& from);
  void MergeFrom(const unit_plot_little_game_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional .SProtoSpace.single_plot_little_game data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::SProtoSpace::single_plot_little_game& data() const;
  inline ::SProtoSpace::single_plot_little_game* mutable_data();
  inline ::SProtoSpace::single_plot_little_game* release_data();
  inline void set_allocated_data(::SProtoSpace::single_plot_little_game* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_plot_little_game_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::SProtoSpace::single_plot_little_game* data_;
  ::google::protobuf::uint32 db_mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_plot_little_game_data* default_instance_;
};
// -------------------------------------------------------------------

class role_level_data : public ::google::protobuf::Message {
 public:
  role_level_data();
  virtual ~role_level_data();

  role_level_data(const role_level_data& from);

  inline role_level_data& operator=(const role_level_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_level_data& default_instance();

  void Swap(role_level_data* other);

  // implements Message ----------------------------------------------

  role_level_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_level_data& from);
  void MergeFrom(const role_level_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.unit_discover_data discovers = 1;
  inline int discovers_size() const;
  inline void clear_discovers();
  static const int kDiscoversFieldNumber = 1;
  inline const ::SProtoSpace::unit_discover_data& discovers(int index) const;
  inline ::SProtoSpace::unit_discover_data* mutable_discovers(int index);
  inline ::SProtoSpace::unit_discover_data* add_discovers();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_discover_data >&
      discovers() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_discover_data >*
      mutable_discovers();

  // repeated .SProtoSpace.unit_chapter_data chapters = 2;
  inline int chapters_size() const;
  inline void clear_chapters();
  static const int kChaptersFieldNumber = 2;
  inline const ::SProtoSpace::unit_chapter_data& chapters(int index) const;
  inline ::SProtoSpace::unit_chapter_data* mutable_chapters(int index);
  inline ::SProtoSpace::unit_chapter_data* add_chapters();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_chapter_data >&
      chapters() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_chapter_data >*
      mutable_chapters();

  // repeated .SProtoSpace.unit_res_instance_data res_data = 3;
  inline int res_data_size() const;
  inline void clear_res_data();
  static const int kResDataFieldNumber = 3;
  inline const ::SProtoSpace::unit_res_instance_data& res_data(int index) const;
  inline ::SProtoSpace::unit_res_instance_data* mutable_res_data(int index);
  inline ::SProtoSpace::unit_res_instance_data* add_res_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_res_instance_data >&
      res_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_res_instance_data >*
      mutable_res_data();

  // repeated .SProtoSpace.unit_plot_screen_data plot_data = 4;
  inline int plot_data_size() const;
  inline void clear_plot_data();
  static const int kPlotDataFieldNumber = 4;
  inline const ::SProtoSpace::unit_plot_screen_data& plot_data(int index) const;
  inline ::SProtoSpace::unit_plot_screen_data* mutable_plot_data(int index);
  inline ::SProtoSpace::unit_plot_screen_data* add_plot_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_plot_screen_data >&
      plot_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_plot_screen_data >*
      mutable_plot_data();

  // repeated .SProtoSpace.unit_section_star_data section_star = 5;
  inline int section_star_size() const;
  inline void clear_section_star();
  static const int kSectionStarFieldNumber = 5;
  inline const ::SProtoSpace::unit_section_star_data& section_star(int index) const;
  inline ::SProtoSpace::unit_section_star_data* mutable_section_star(int index);
  inline ::SProtoSpace::unit_section_star_data* add_section_star();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_section_star_data >&
      section_star() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_section_star_data >*
      mutable_section_star();

  // repeated .SProtoSpace.unit_tower_data tower_data = 6;
  inline int tower_data_size() const;
  inline void clear_tower_data();
  static const int kTowerDataFieldNumber = 6;
  inline const ::SProtoSpace::unit_tower_data& tower_data(int index) const;
  inline ::SProtoSpace::unit_tower_data* mutable_tower_data(int index);
  inline ::SProtoSpace::unit_tower_data* add_tower_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_tower_data >&
      tower_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_tower_data >*
      mutable_tower_data();

  // repeated .SProtoSpace.unit_adv_data adv_data = 7;
  inline int adv_data_size() const;
  inline void clear_adv_data();
  static const int kAdvDataFieldNumber = 7;
  inline const ::SProtoSpace::unit_adv_data& adv_data(int index) const;
  inline ::SProtoSpace::unit_adv_data* mutable_adv_data(int index);
  inline ::SProtoSpace::unit_adv_data* add_adv_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_adv_data >&
      adv_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_adv_data >*
      mutable_adv_data();

  // repeated .SProtoSpace.unit_guide_data guide_data = 8;
  inline int guide_data_size() const;
  inline void clear_guide_data();
  static const int kGuideDataFieldNumber = 8;
  inline const ::SProtoSpace::unit_guide_data& guide_data(int index) const;
  inline ::SProtoSpace::unit_guide_data* mutable_guide_data(int index);
  inline ::SProtoSpace::unit_guide_data* add_guide_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_guide_data >&
      guide_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_guide_data >*
      mutable_guide_data();

  // repeated .SProtoSpace.unit_plot_little_game_data plot_little_game_data = 9;
  inline int plot_little_game_data_size() const;
  inline void clear_plot_little_game_data();
  static const int kPlotLittleGameDataFieldNumber = 9;
  inline const ::SProtoSpace::unit_plot_little_game_data& plot_little_game_data(int index) const;
  inline ::SProtoSpace::unit_plot_little_game_data* mutable_plot_little_game_data(int index);
  inline ::SProtoSpace::unit_plot_little_game_data* add_plot_little_game_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_plot_little_game_data >&
      plot_little_game_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_plot_little_game_data >*
      mutable_plot_little_game_data();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_level_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_discover_data > discovers_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_chapter_data > chapters_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_res_instance_data > res_data_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_plot_screen_data > plot_data_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_section_star_data > section_star_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_tower_data > tower_data_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_adv_data > adv_data_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_guide_data > guide_data_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_plot_little_game_data > plot_little_game_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static role_level_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_royal_data : public ::google::protobuf::Message {
 public:
  unit_royal_data();
  virtual ~unit_royal_data();

  unit_royal_data(const unit_royal_data& from);

  inline unit_royal_data& operator=(const unit_royal_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_royal_data& default_instance();

  void Swap(unit_royal_data* other);

  // implements Message ----------------------------------------------

  unit_royal_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_royal_data& from);
  void MergeFrom(const unit_royal_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 config_id = 3;
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 3;
  inline ::google::protobuf::uint32 config_id() const;
  inline void set_config_id(::google::protobuf::uint32 value);

  // optional uint32 intimacy_value = 5;
  inline bool has_intimacy_value() const;
  inline void clear_intimacy_value();
  static const int kIntimacyValueFieldNumber = 5;
  inline ::google::protobuf::uint32 intimacy_value() const;
  inline void set_intimacy_value(::google::protobuf::uint32 value);

  // repeated uint32 has_received = 8;
  inline int has_received_size() const;
  inline void clear_has_received();
  static const int kHasReceivedFieldNumber = 8;
  inline ::google::protobuf::uint32 has_received(int index) const;
  inline void set_has_received(int index, ::google::protobuf::uint32 value);
  inline void add_has_received(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      has_received() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_has_received();

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_royal_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_intimacy_value();
  inline void clear_has_intimacy_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::uint32 config_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > has_received_;
  ::google::protobuf::uint32 intimacy_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_royal_data* default_instance_;
};
// -------------------------------------------------------------------

class royal_opt_info : public ::google::protobuf::Message {
 public:
  royal_opt_info();
  virtual ~royal_opt_info();

  royal_opt_info(const royal_opt_info& from);

  inline royal_opt_info& operator=(const royal_opt_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const royal_opt_info& default_instance();

  void Swap(royal_opt_info* other);

  // implements Message ----------------------------------------------

  royal_opt_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const royal_opt_info& from);
  void MergeFrom(const royal_opt_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 refresh_times = 7;
  inline bool has_refresh_times() const;
  inline void clear_refresh_times();
  static const int kRefreshTimesFieldNumber = 7;
  inline ::google::protobuf::uint32 refresh_times() const;
  inline void set_refresh_times(::google::protobuf::uint32 value);

  // optional uint32 visit_times = 8;
  inline bool has_visit_times() const;
  inline void clear_visit_times();
  static const int kVisitTimesFieldNumber = 8;
  inline ::google::protobuf::uint32 visit_times() const;
  inline void set_visit_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.royal_opt_info)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_refresh_times();
  inline void clear_has_refresh_times();
  inline void set_has_visit_times();
  inline void clear_has_visit_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::uint32 refresh_times_;
  ::google::protobuf::uint32 visit_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static royal_opt_info* default_instance_;
};
// -------------------------------------------------------------------

class role_royal_data : public ::google::protobuf::Message {
 public:
  role_royal_data();
  virtual ~role_royal_data();

  role_royal_data(const role_royal_data& from);

  inline role_royal_data& operator=(const role_royal_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_royal_data& default_instance();

  void Swap(role_royal_data* other);

  // implements Message ----------------------------------------------

  role_royal_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_royal_data& from);
  void MergeFrom(const role_royal_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.unit_royal_data royals = 1;
  inline int royals_size() const;
  inline void clear_royals();
  static const int kRoyalsFieldNumber = 1;
  inline const ::SProtoSpace::unit_royal_data& royals(int index) const;
  inline ::SProtoSpace::unit_royal_data* mutable_royals(int index);
  inline ::SProtoSpace::unit_royal_data* add_royals();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_royal_data >&
      royals() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_royal_data >*
      mutable_royals();

  // repeated .SProtoSpace.royal_opt_info infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::SProtoSpace::royal_opt_info& infos(int index) const;
  inline ::SProtoSpace::royal_opt_info* mutable_infos(int index);
  inline ::SProtoSpace::royal_opt_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_opt_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_opt_info >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_royal_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_royal_data > royals_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_opt_info > infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static role_royal_data* default_instance_;
};
// -------------------------------------------------------------------

class royal_task_data : public ::google::protobuf::Message {
 public:
  royal_task_data();
  virtual ~royal_task_data();

  royal_task_data(const royal_task_data& from);

  inline royal_task_data& operator=(const royal_task_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const royal_task_data& default_instance();

  void Swap(royal_task_data* other);

  // implements Message ----------------------------------------------

  royal_task_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const royal_task_data& from);
  void MergeFrom(const royal_task_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 max_step = 1;
  inline bool has_max_step() const;
  inline void clear_max_step();
  static const int kMaxStepFieldNumber = 1;
  inline ::google::protobuf::int32 max_step() const;
  inline void set_max_step(::google::protobuf::int32 value);

  // optional int32 cur_step = 2;
  inline bool has_cur_step() const;
  inline void clear_cur_step();
  static const int kCurStepFieldNumber = 2;
  inline ::google::protobuf::int32 cur_step() const;
  inline void set_cur_step(::google::protobuf::int32 value);

  // optional uint32 config_id = 3;
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 3;
  inline ::google::protobuf::uint32 config_id() const;
  inline void set_config_id(::google::protobuf::uint32 value);

  // optional uint32 star = 4;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 4;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional .SProtoSpace.ERoyalTaskStatus status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::SProtoSpace::ERoyalTaskStatus status() const;
  inline void set_status(::SProtoSpace::ERoyalTaskStatus value);

  // optional int32 value = 6;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 6;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // optional int32 type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.royal_task_data)
 private:
  inline void set_has_max_step();
  inline void clear_has_max_step();
  inline void set_has_cur_step();
  inline void clear_has_cur_step();
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 max_step_;
  ::google::protobuf::int32 cur_step_;
  ::google::protobuf::uint32 config_id_;
  ::google::protobuf::uint32 star_;
  int status_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static royal_task_data* default_instance_;
};
// -------------------------------------------------------------------

class friend_operation_info : public ::google::protobuf::Message {
 public:
  friend_operation_info();
  virtual ~friend_operation_info();

  friend_operation_info(const friend_operation_info& from);

  inline friend_operation_info& operator=(const friend_operation_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_operation_info& default_instance();

  void Swap(friend_operation_info* other);

  // implements Message ----------------------------------------------

  friend_operation_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_operation_info& from);
  void MergeFrom(const friend_operation_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 give_times = 3;
  inline bool has_give_times() const;
  inline void clear_give_times();
  static const int kGiveTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 give_times() const;
  inline void set_give_times(::google::protobuf::uint32 value);

  // optional uint32 draw_times = 4;
  inline bool has_draw_times() const;
  inline void clear_draw_times();
  static const int kDrawTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 draw_times() const;
  inline void set_draw_times(::google::protobuf::uint32 value);

  // repeated uint64 accept_ids = 5;
  inline int accept_ids_size() const;
  inline void clear_accept_ids();
  static const int kAcceptIdsFieldNumber = 5;
  inline ::google::protobuf::uint64 accept_ids(int index) const;
  inline void set_accept_ids(int index, ::google::protobuf::uint64 value);
  inline void add_accept_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      accept_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_accept_ids();

  // optional uint32 last_search_time = 6;
  inline bool has_last_search_time() const;
  inline void clear_last_search_time();
  static const int kLastSearchTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 last_search_time() const;
  inline void set_last_search_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.friend_operation_info)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_give_times();
  inline void clear_has_give_times();
  inline void set_has_draw_times();
  inline void clear_has_draw_times();
  inline void set_has_last_search_time();
  inline void clear_has_last_search_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::uint32 give_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > accept_ids_;
  ::google::protobuf::uint32 draw_times_;
  ::google::protobuf::uint32 last_search_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static friend_operation_info* default_instance_;
};
// -------------------------------------------------------------------

class unit_friend_data : public ::google::protobuf::Message {
 public:
  unit_friend_data();
  virtual ~unit_friend_data();

  unit_friend_data(const unit_friend_data& from);

  inline unit_friend_data& operator=(const unit_friend_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_friend_data& default_instance();

  void Swap(unit_friend_data* other);

  // implements Message ----------------------------------------------

  unit_friend_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_friend_data& from);
  void MergeFrom(const unit_friend_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 intimacy_value = 3;
  inline bool has_intimacy_value() const;
  inline void clear_intimacy_value();
  static const int kIntimacyValueFieldNumber = 3;
  inline ::google::protobuf::uint32 intimacy_value() const;
  inline void set_intimacy_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_friend_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_intimacy_value();
  inline void clear_has_intimacy_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::uint32 intimacy_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_friend_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_black_data : public ::google::protobuf::Message {
 public:
  unit_black_data();
  virtual ~unit_black_data();

  unit_black_data(const unit_black_data& from);

  inline unit_black_data& operator=(const unit_black_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_black_data& default_instance();

  void Swap(unit_black_data* other);

  // implements Message ----------------------------------------------

  unit_black_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_black_data& from);
  void MergeFrom(const unit_black_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // repeated uint64 role_ids = 3;
  inline int role_ids_size() const;
  inline void clear_role_ids();
  static const int kRoleIdsFieldNumber = 3;
  inline ::google::protobuf::uint64 role_ids(int index) const;
  inline void set_role_ids(int index, ::google::protobuf::uint64 value);
  inline void add_role_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      role_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_role_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_black_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > role_ids_;
  ::google::protobuf::uint32 db_mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_black_data* default_instance_;
};
// -------------------------------------------------------------------

class give_record_info : public ::google::protobuf::Message {
 public:
  give_record_info();
  virtual ~give_record_info();

  give_record_info(const give_record_info& from);

  inline give_record_info& operator=(const give_record_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const give_record_info& default_instance();

  void Swap(give_record_info* other);

  // implements Message ----------------------------------------------

  give_record_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const give_record_info& from);
  void MergeFrom(const give_record_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // repeated uint64 friend_ids = 3;
  inline int friend_ids_size() const;
  inline void clear_friend_ids();
  static const int kFriendIdsFieldNumber = 3;
  inline ::google::protobuf::uint64 friend_ids(int index) const;
  inline void set_friend_ids(int index, ::google::protobuf::uint64 value);
  inline void add_friend_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      friend_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_friend_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.give_record_info)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > friend_ids_;
  ::google::protobuf::uint32 db_mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static give_record_info* default_instance_;
};
// -------------------------------------------------------------------

class role_friend_data : public ::google::protobuf::Message {
 public:
  role_friend_data();
  virtual ~role_friend_data();

  role_friend_data(const role_friend_data& from);

  inline role_friend_data& operator=(const role_friend_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_friend_data& default_instance();

  void Swap(role_friend_data* other);

  // implements Message ----------------------------------------------

  role_friend_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_friend_data& from);
  void MergeFrom(const role_friend_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.friend_operation_info operation_info = 1;
  inline int operation_info_size() const;
  inline void clear_operation_info();
  static const int kOperationInfoFieldNumber = 1;
  inline const ::SProtoSpace::friend_operation_info& operation_info(int index) const;
  inline ::SProtoSpace::friend_operation_info* mutable_operation_info(int index);
  inline ::SProtoSpace::friend_operation_info* add_operation_info();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_operation_info >&
      operation_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_operation_info >*
      mutable_operation_info();

  // repeated .SProtoSpace.unit_black_data blacklist = 2;
  inline int blacklist_size() const;
  inline void clear_blacklist();
  static const int kBlacklistFieldNumber = 2;
  inline const ::SProtoSpace::unit_black_data& blacklist(int index) const;
  inline ::SProtoSpace::unit_black_data* mutable_blacklist(int index);
  inline ::SProtoSpace::unit_black_data* add_blacklist();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_black_data >&
      blacklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_black_data >*
      mutable_blacklist();

  // repeated .SProtoSpace.unit_friend_data friends = 3;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 3;
  inline const ::SProtoSpace::unit_friend_data& friends(int index) const;
  inline ::SProtoSpace::unit_friend_data* mutable_friends(int index);
  inline ::SProtoSpace::unit_friend_data* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_friend_data >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_friend_data >*
      mutable_friends();

  // repeated .SProtoSpace.give_record_info give_records = 4;
  inline int give_records_size() const;
  inline void clear_give_records();
  static const int kGiveRecordsFieldNumber = 4;
  inline const ::SProtoSpace::give_record_info& give_records(int index) const;
  inline ::SProtoSpace::give_record_info* mutable_give_records(int index);
  inline ::SProtoSpace::give_record_info* add_give_records();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::give_record_info >&
      give_records() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::give_record_info >*
      mutable_give_records();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_friend_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_operation_info > operation_info_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_black_data > blacklist_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_friend_data > friends_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::give_record_info > give_records_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static role_friend_data* default_instance_;
};
// -------------------------------------------------------------------

class db_shop_refresh_info : public ::google::protobuf::Message {
 public:
  db_shop_refresh_info();
  virtual ~db_shop_refresh_info();

  db_shop_refresh_info(const db_shop_refresh_info& from);

  inline db_shop_refresh_info& operator=(const db_shop_refresh_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_shop_refresh_info& default_instance();

  void Swap(db_shop_refresh_info* other);

  // implements Message ----------------------------------------------

  db_shop_refresh_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_shop_refresh_info& from);
  void MergeFrom(const db_shop_refresh_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 user_refresh_times = 1 [default = 0];
  inline bool has_user_refresh_times() const;
  inline void clear_user_refresh_times();
  static const int kUserRefreshTimesFieldNumber = 1;
  inline ::google::protobuf::int32 user_refresh_times() const;
  inline void set_user_refresh_times(::google::protobuf::int32 value);

  // optional uint64 last_user_refresh_time = 2 [default = 0];
  inline bool has_last_user_refresh_time() const;
  inline void clear_last_user_refresh_time();
  static const int kLastUserRefreshTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 last_user_refresh_time() const;
  inline void set_last_user_refresh_time(::google::protobuf::uint64 value);

  // optional uint64 last_sys_refresh_time = 3 [default = 0];
  inline bool has_last_sys_refresh_time() const;
  inline void clear_last_sys_refresh_time();
  static const int kLastSysRefreshTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 last_sys_refresh_time() const;
  inline void set_last_sys_refresh_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_shop_refresh_info)
 private:
  inline void set_has_user_refresh_times();
  inline void clear_has_user_refresh_times();
  inline void set_has_last_user_refresh_time();
  inline void clear_has_last_user_refresh_time();
  inline void set_has_last_sys_refresh_time();
  inline void clear_has_last_sys_refresh_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 last_user_refresh_time_;
  ::google::protobuf::uint64 last_sys_refresh_time_;
  ::google::protobuf::int32 user_refresh_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_shop_refresh_info* default_instance_;
};
// -------------------------------------------------------------------

class db_shop_item_info : public ::google::protobuf::Message {
 public:
  db_shop_item_info();
  virtual ~db_shop_item_info();

  db_shop_item_info(const db_shop_item_info& from);

  inline db_shop_item_info& operator=(const db_shop_item_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_shop_item_info& default_instance();

  void Swap(db_shop_item_info* other);

  // implements Message ----------------------------------------------

  db_shop_item_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_shop_item_info& from);
  void MergeFrom(const db_shop_item_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sale_config_id = 1;
  inline bool has_sale_config_id() const;
  inline void clear_sale_config_id();
  static const int kSaleConfigIdFieldNumber = 1;
  inline ::google::protobuf::uint32 sale_config_id() const;
  inline void set_sale_config_id(::google::protobuf::uint32 value);

  // optional uint32 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional uint32 buy_cur_num = 3;
  inline bool has_buy_cur_num() const;
  inline void clear_buy_cur_num();
  static const int kBuyCurNumFieldNumber = 3;
  inline ::google::protobuf::uint32 buy_cur_num() const;
  inline void set_buy_cur_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_shop_item_info)
 private:
  inline void set_has_sale_config_id();
  inline void clear_has_sale_config_id();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_buy_cur_num();
  inline void clear_has_buy_cur_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 sale_config_id_;
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 buy_cur_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_shop_item_info* default_instance_;
};
// -------------------------------------------------------------------

class buy_record_info : public ::google::protobuf::Message {
 public:
  buy_record_info();
  virtual ~buy_record_info();

  buy_record_info(const buy_record_info& from);

  inline buy_record_info& operator=(const buy_record_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const buy_record_info& default_instance();

  void Swap(buy_record_info* other);

  // implements Message ----------------------------------------------

  buy_record_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const buy_record_info& from);
  void MergeFrom(const buy_record_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional int32 sale_config_id = 3 [default = 0];
  inline bool has_sale_config_id() const;
  inline void clear_sale_config_id();
  static const int kSaleConfigIdFieldNumber = 3;
  inline ::google::protobuf::int32 sale_config_id() const;
  inline void set_sale_config_id(::google::protobuf::int32 value);

  // optional uint32 first_buy_time = 4 [default = 0];
  inline bool has_first_buy_time() const;
  inline void clear_first_buy_time();
  static const int kFirstBuyTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 first_buy_time() const;
  inline void set_first_buy_time(::google::protobuf::uint32 value);

  // optional uint32 last_buy_time = 5 [default = 0];
  inline bool has_last_buy_time() const;
  inline void clear_last_buy_time();
  static const int kLastBuyTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 last_buy_time() const;
  inline void set_last_buy_time(::google::protobuf::uint32 value);

  // optional int32 buy_num = 6 [default = 0];
  inline bool has_buy_num() const;
  inline void clear_buy_num();
  static const int kBuyNumFieldNumber = 6;
  inline ::google::protobuf::int32 buy_num() const;
  inline void set_buy_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.buy_record_info)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_sale_config_id();
  inline void clear_has_sale_config_id();
  inline void set_has_first_buy_time();
  inline void clear_has_first_buy_time();
  inline void set_has_last_buy_time();
  inline void clear_has_last_buy_time();
  inline void set_has_buy_num();
  inline void clear_has_buy_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::int32 sale_config_id_;
  ::google::protobuf::uint32 first_buy_time_;
  ::google::protobuf::uint32 last_buy_time_;
  ::google::protobuf::int32 buy_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static buy_record_info* default_instance_;
};
// -------------------------------------------------------------------

class unit_shop_info : public ::google::protobuf::Message {
 public:
  unit_shop_info();
  virtual ~unit_shop_info();

  unit_shop_info(const unit_shop_info& from);

  inline unit_shop_info& operator=(const unit_shop_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_shop_info& default_instance();

  void Swap(unit_shop_info* other);

  // implements Message ----------------------------------------------

  unit_shop_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_shop_info& from);
  void MergeFrom(const unit_shop_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional int32 config_id = 3;
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 3;
  inline ::google::protobuf::int32 config_id() const;
  inline void set_config_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.db_shop_refresh_info refresh_info = 4;
  inline bool has_refresh_info() const;
  inline void clear_refresh_info();
  static const int kRefreshInfoFieldNumber = 4;
  inline const ::SProtoSpace::db_shop_refresh_info& refresh_info() const;
  inline ::SProtoSpace::db_shop_refresh_info* mutable_refresh_info();
  inline ::SProtoSpace::db_shop_refresh_info* release_refresh_info();
  inline void set_allocated_refresh_info(::SProtoSpace::db_shop_refresh_info* refresh_info);

  // repeated .SProtoSpace.shop_item_info item_infos = 5;
  inline int item_infos_size() const;
  inline void clear_item_infos();
  static const int kItemInfosFieldNumber = 5;
  inline const ::SProtoSpace::shop_item_info& item_infos(int index) const;
  inline ::SProtoSpace::shop_item_info* mutable_item_infos(int index);
  inline ::SProtoSpace::shop_item_info* add_item_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::shop_item_info >&
      item_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::shop_item_info >*
      mutable_item_infos();

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_shop_info)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_refresh_info();
  inline void clear_has_refresh_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::int32 config_id_;
  ::SProtoSpace::db_shop_refresh_info* refresh_info_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::shop_item_info > item_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_shop_info* default_instance_;
};
// -------------------------------------------------------------------

class role_shop_data : public ::google::protobuf::Message {
 public:
  role_shop_data();
  virtual ~role_shop_data();

  role_shop_data(const role_shop_data& from);

  inline role_shop_data& operator=(const role_shop_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_shop_data& default_instance();

  void Swap(role_shop_data* other);

  // implements Message ----------------------------------------------

  role_shop_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_shop_data& from);
  void MergeFrom(const role_shop_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.unit_shop_info shop_infos = 1;
  inline int shop_infos_size() const;
  inline void clear_shop_infos();
  static const int kShopInfosFieldNumber = 1;
  inline const ::SProtoSpace::unit_shop_info& shop_infos(int index) const;
  inline ::SProtoSpace::unit_shop_info* mutable_shop_infos(int index);
  inline ::SProtoSpace::unit_shop_info* add_shop_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_shop_info >&
      shop_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_shop_info >*
      mutable_shop_infos();

  // repeated .SProtoSpace.buy_record_info record_infos = 2;
  inline int record_infos_size() const;
  inline void clear_record_infos();
  static const int kRecordInfosFieldNumber = 2;
  inline const ::SProtoSpace::buy_record_info& record_infos(int index) const;
  inline ::SProtoSpace::buy_record_info* mutable_record_infos(int index);
  inline ::SProtoSpace::buy_record_info* add_record_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::buy_record_info >&
      record_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::buy_record_info >*
      mutable_record_infos();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_shop_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_shop_info > shop_infos_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::buy_record_info > record_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static role_shop_data* default_instance_;
};
// -------------------------------------------------------------------

class harem_compete_info : public ::google::protobuf::Message {
 public:
  harem_compete_info();
  virtual ~harem_compete_info();

  harem_compete_info(const harem_compete_info& from);

  inline harem_compete_info& operator=(const harem_compete_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const harem_compete_info& default_instance();

  void Swap(harem_compete_info* other);

  // implements Message ----------------------------------------------

  harem_compete_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const harem_compete_info& from);
  void MergeFrom(const harem_compete_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 qingan_times = 3;
  inline bool has_qingan_times() const;
  inline void clear_qingan_times();
  static const int kQinganTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 qingan_times() const;
  inline void set_qingan_times(::google::protobuf::uint32 value);

  // optional uint32 slap_times = 4;
  inline bool has_slap_times() const;
  inline void clear_slap_times();
  static const int kSlapTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 slap_times() const;
  inline void set_slap_times(::google::protobuf::uint32 value);

  // optional uint64 end_time = 5;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);

  // optional .SProtoSpace.ESLAPPROGRESS progress = 6;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 6;
  inline ::SProtoSpace::ESLAPPROGRESS progress() const;
  inline void set_progress(::SProtoSpace::ESLAPPROGRESS value);

  // repeated uint64 red_point_time = 7;
  inline int red_point_time_size() const;
  inline void clear_red_point_time();
  static const int kRedPointTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 red_point_time(int index) const;
  inline void set_red_point_time(int index, ::google::protobuf::uint64 value);
  inline void add_red_point_time(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      red_point_time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_red_point_time();

  // repeated .SProtoSpace.tribute_info infos = 8;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 8;
  inline const ::SProtoSpace::tribute_info& infos(int index) const;
  inline ::SProtoSpace::tribute_info* mutable_infos(int index);
  inline ::SProtoSpace::tribute_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::tribute_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::tribute_info >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:SProtoSpace.harem_compete_info)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_qingan_times();
  inline void clear_has_qingan_times();
  inline void set_has_slap_times();
  inline void clear_has_slap_times();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_progress();
  inline void clear_has_progress();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::uint32 qingan_times_;
  ::google::protobuf::uint64 end_time_;
  ::google::protobuf::uint32 slap_times_;
  int progress_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > red_point_time_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::tribute_info > infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static harem_compete_info* default_instance_;
};
// -------------------------------------------------------------------

class role_harem_data : public ::google::protobuf::Message {
 public:
  role_harem_data();
  virtual ~role_harem_data();

  role_harem_data(const role_harem_data& from);

  inline role_harem_data& operator=(const role_harem_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_harem_data& default_instance();

  void Swap(role_harem_data* other);

  // implements Message ----------------------------------------------

  role_harem_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_harem_data& from);
  void MergeFrom(const role_harem_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.harem_compete_info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::SProtoSpace::harem_compete_info& info(int index) const;
  inline ::SProtoSpace::harem_compete_info* mutable_info(int index);
  inline ::SProtoSpace::harem_compete_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::harem_compete_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::harem_compete_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_harem_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::harem_compete_info > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static role_harem_data* default_instance_;
};
// -------------------------------------------------------------------

class growing_flower_info : public ::google::protobuf::Message {
 public:
  growing_flower_info();
  virtual ~growing_flower_info();

  growing_flower_info(const growing_flower_info& from);

  inline growing_flower_info& operator=(const growing_flower_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const growing_flower_info& default_instance();

  void Swap(growing_flower_info* other);

  // implements Message ----------------------------------------------

  growing_flower_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const growing_flower_info& from);
  void MergeFrom(const growing_flower_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional int32 template_id = 3;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 3;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 cur_status = 4;
  inline bool has_cur_status() const;
  inline void clear_cur_status();
  static const int kCurStatusFieldNumber = 4;
  inline ::google::protobuf::int32 cur_status() const;
  inline void set_cur_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.growing_flower_info)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_cur_status();
  inline void clear_has_cur_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 cur_status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static growing_flower_info* default_instance_;
};
// -------------------------------------------------------------------

class unit_flower_info : public ::google::protobuf::Message {
 public:
  unit_flower_info();
  virtual ~unit_flower_info();

  unit_flower_info(const unit_flower_info& from);

  inline unit_flower_info& operator=(const unit_flower_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_flower_info& default_instance();

  void Swap(unit_flower_info* other);

  // implements Message ----------------------------------------------

  unit_flower_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_flower_info& from);
  void MergeFrom(const unit_flower_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional int32 template_id = 3;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 3;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 count_num = 4;
  inline bool has_count_num() const;
  inline void clear_count_num();
  static const int kCountNumFieldNumber = 4;
  inline ::google::protobuf::int32 count_num() const;
  inline void set_count_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_flower_info)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_count_num();
  inline void clear_has_count_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 count_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_flower_info* default_instance_;
};
// -------------------------------------------------------------------

class role_flower_data : public ::google::protobuf::Message {
 public:
  role_flower_data();
  virtual ~role_flower_data();

  role_flower_data(const role_flower_data& from);

  inline role_flower_data& operator=(const role_flower_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_flower_data& default_instance();

  void Swap(role_flower_data* other);

  // implements Message ----------------------------------------------

  role_flower_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_flower_data& from);
  void MergeFrom(const role_flower_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.unit_flower_info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::SProtoSpace::unit_flower_info& info(int index) const;
  inline ::SProtoSpace::unit_flower_info* mutable_info(int index);
  inline ::SProtoSpace::unit_flower_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_flower_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_flower_info >*
      mutable_info();

  // repeated .SProtoSpace.growing_flower_info grow_info = 2;
  inline int grow_info_size() const;
  inline void clear_grow_info();
  static const int kGrowInfoFieldNumber = 2;
  inline const ::SProtoSpace::growing_flower_info& grow_info(int index) const;
  inline ::SProtoSpace::growing_flower_info* mutable_grow_info(int index);
  inline ::SProtoSpace::growing_flower_info* add_grow_info();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::growing_flower_info >&
      grow_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::growing_flower_info >*
      mutable_grow_info();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_flower_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_flower_info > info_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::growing_flower_info > grow_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static role_flower_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_plot_screen_data : public ::google::protobuf::Message {
 public:
  unit_plot_screen_data();
  virtual ~unit_plot_screen_data();

  unit_plot_screen_data(const unit_plot_screen_data& from);

  inline unit_plot_screen_data& operator=(const unit_plot_screen_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_plot_screen_data& default_instance();

  void Swap(unit_plot_screen_data* other);

  // implements Message ----------------------------------------------

  unit_plot_screen_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_plot_screen_data& from);
  void MergeFrom(const unit_plot_screen_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 chapter_id = 3;
  inline bool has_chapter_id() const;
  inline void clear_chapter_id();
  static const int kChapterIdFieldNumber = 3;
  inline ::google::protobuf::uint32 chapter_id() const;
  inline void set_chapter_id(::google::protobuf::uint32 value);

  // optional uint32 screen_id = 4;
  inline bool has_screen_id() const;
  inline void clear_screen_id();
  static const int kScreenIdFieldNumber = 4;
  inline ::google::protobuf::uint32 screen_id() const;
  inline void set_screen_id(::google::protobuf::uint32 value);

  // repeated uint32 branch_ids = 5;
  inline int branch_ids_size() const;
  inline void clear_branch_ids();
  static const int kBranchIdsFieldNumber = 5;
  inline ::google::protobuf::uint32 branch_ids(int index) const;
  inline void set_branch_ids(int index, ::google::protobuf::uint32 value);
  inline void add_branch_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      branch_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_branch_ids();

  // repeated int32 section_ids = 6;
  inline int section_ids_size() const;
  inline void clear_section_ids();
  static const int kSectionIdsFieldNumber = 6;
  inline ::google::protobuf::int32 section_ids(int index) const;
  inline void set_section_ids(int index, ::google::protobuf::int32 value);
  inline void add_section_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      section_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_section_ids();

  // repeated uint32 get_end_ids = 7;
  inline int get_end_ids_size() const;
  inline void clear_get_end_ids();
  static const int kGetEndIdsFieldNumber = 7;
  inline ::google::protobuf::uint32 get_end_ids(int index) const;
  inline void set_get_end_ids(int index, ::google::protobuf::uint32 value);
  inline void add_get_end_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      get_end_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_get_end_ids();

  // repeated uint32 action_ids = 8;
  inline int action_ids_size() const;
  inline void clear_action_ids();
  static const int kActionIdsFieldNumber = 8;
  inline ::google::protobuf::uint32 action_ids(int index) const;
  inline void set_action_ids(int index, ::google::protobuf::uint32 value);
  inline void add_action_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      action_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_action_ids();

  // optional bool chapter_is_end = 9;
  inline bool has_chapter_is_end() const;
  inline void clear_chapter_is_end();
  static const int kChapterIsEndFieldNumber = 9;
  inline bool chapter_is_end() const;
  inline void set_chapter_is_end(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_plot_screen_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_chapter_id();
  inline void clear_has_chapter_id();
  inline void set_has_screen_id();
  inline void clear_has_screen_id();
  inline void set_has_chapter_is_end();
  inline void clear_has_chapter_is_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::uint32 chapter_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > branch_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > section_ids_;
  ::google::protobuf::uint32 screen_id_;
  bool chapter_is_end_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > get_end_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > action_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static unit_plot_screen_data* default_instance_;
};
// -------------------------------------------------------------------

class officer_apply_info : public ::google::protobuf::Message {
 public:
  officer_apply_info();
  virtual ~officer_apply_info();

  officer_apply_info(const officer_apply_info& from);

  inline officer_apply_info& operator=(const officer_apply_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const officer_apply_info& default_instance();

  void Swap(officer_apply_info* other);

  // implements Message ----------------------------------------------

  officer_apply_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const officer_apply_info& from);
  void MergeFrom(const officer_apply_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 cur_grade = 3;
  inline bool has_cur_grade() const;
  inline void clear_cur_grade();
  static const int kCurGradeFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_grade() const;
  inline void set_cur_grade(::google::protobuf::uint32 value);

  // optional uint64 apply_time = 4;
  inline bool has_apply_time() const;
  inline void clear_apply_time();
  static const int kApplyTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 apply_time() const;
  inline void set_apply_time(::google::protobuf::uint64 value);

  // optional uint64 check_time = 5;
  inline bool has_check_time() const;
  inline void clear_check_time();
  static const int kCheckTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 check_time() const;
  inline void set_check_time(::google::protobuf::uint64 value);

  // optional bool ret = 6;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 6;
  inline bool ret() const;
  inline void set_ret(bool value);

  // optional uint32 next_grade = 7;
  inline bool has_next_grade() const;
  inline void clear_next_grade();
  static const int kNextGradeFieldNumber = 7;
  inline ::google::protobuf::uint32 next_grade() const;
  inline void set_next_grade(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.officer_apply_info)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_cur_grade();
  inline void clear_has_cur_grade();
  inline void set_has_apply_time();
  inline void clear_has_apply_time();
  inline void set_has_check_time();
  inline void clear_has_check_time();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_next_grade();
  inline void clear_has_next_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::uint32 cur_grade_;
  ::google::protobuf::uint64 apply_time_;
  ::google::protobuf::uint64 check_time_;
  bool ret_;
  ::google::protobuf::uint32 next_grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static officer_apply_info* default_instance_;
};
// -------------------------------------------------------------------

class officer_base_info : public ::google::protobuf::Message {
 public:
  officer_base_info();
  virtual ~officer_base_info();

  officer_base_info(const officer_base_info& from);

  inline officer_base_info& operator=(const officer_base_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const officer_base_info& default_instance();

  void Swap(officer_base_info* other);

  // implements Message ----------------------------------------------

  officer_base_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const officer_base_info& from);
  void MergeFrom(const officer_base_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 cur_grade = 3;
  inline bool has_cur_grade() const;
  inline void clear_cur_grade();
  static const int kCurGradeFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_grade() const;
  inline void set_cur_grade(::google::protobuf::uint32 value);

  // optional uint32 max_grade = 4;
  inline bool has_max_grade() const;
  inline void clear_max_grade();
  static const int kMaxGradeFieldNumber = 4;
  inline ::google::protobuf::uint32 max_grade() const;
  inline void set_max_grade(::google::protobuf::uint32 value);

  // optional uint32 apply_grade = 5;
  inline bool has_apply_grade() const;
  inline void clear_apply_grade();
  static const int kApplyGradeFieldNumber = 5;
  inline ::google::protobuf::uint32 apply_grade() const;
  inline void set_apply_grade(::google::protobuf::uint32 value);

  // optional uint64 apply_time = 6;
  inline bool has_apply_time() const;
  inline void clear_apply_time();
  static const int kApplyTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 apply_time() const;
  inline void set_apply_time(::google::protobuf::uint64 value);

  // optional bool is_draw = 7;
  inline bool has_is_draw() const;
  inline void clear_is_draw();
  static const int kIsDrawFieldNumber = 7;
  inline bool is_draw() const;
  inline void set_is_draw(bool value);

  // optional uint64 last_draw_time = 8;
  inline bool has_last_draw_time() const;
  inline void clear_last_draw_time();
  static const int kLastDrawTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 last_draw_time() const;
  inline void set_last_draw_time(::google::protobuf::uint64 value);

  // optional int32 daily_offical_chal_num = 9;
  inline bool has_daily_offical_chal_num() const;
  inline void clear_daily_offical_chal_num();
  static const int kDailyOfficalChalNumFieldNumber = 9;
  inline ::google::protobuf::int32 daily_offical_chal_num() const;
  inline void set_daily_offical_chal_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.officer_base_info)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_cur_grade();
  inline void clear_has_cur_grade();
  inline void set_has_max_grade();
  inline void clear_has_max_grade();
  inline void set_has_apply_grade();
  inline void clear_has_apply_grade();
  inline void set_has_apply_time();
  inline void clear_has_apply_time();
  inline void set_has_is_draw();
  inline void clear_has_is_draw();
  inline void set_has_last_draw_time();
  inline void clear_has_last_draw_time();
  inline void set_has_daily_offical_chal_num();
  inline void clear_has_daily_offical_chal_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::uint32 cur_grade_;
  ::google::protobuf::uint32 max_grade_;
  ::google::protobuf::uint32 apply_grade_;
  ::google::protobuf::uint64 apply_time_;
  ::google::protobuf::uint64 last_draw_time_;
  bool is_draw_;
  ::google::protobuf::int32 daily_offical_chal_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static officer_base_info* default_instance_;
};
// -------------------------------------------------------------------

class role_officer_data : public ::google::protobuf::Message {
 public:
  role_officer_data();
  virtual ~role_officer_data();

  role_officer_data(const role_officer_data& from);

  inline role_officer_data& operator=(const role_officer_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_officer_data& default_instance();

  void Swap(role_officer_data* other);

  // implements Message ----------------------------------------------

  role_officer_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_officer_data& from);
  void MergeFrom(const role_officer_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.officer_apply_info applys = 1;
  inline int applys_size() const;
  inline void clear_applys();
  static const int kApplysFieldNumber = 1;
  inline const ::SProtoSpace::officer_apply_info& applys(int index) const;
  inline ::SProtoSpace::officer_apply_info* mutable_applys(int index);
  inline ::SProtoSpace::officer_apply_info* add_applys();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::officer_apply_info >&
      applys() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::officer_apply_info >*
      mutable_applys();

  // repeated .SProtoSpace.officer_base_info infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::SProtoSpace::officer_base_info& infos(int index) const;
  inline ::SProtoSpace::officer_base_info* mutable_infos(int index);
  inline ::SProtoSpace::officer_base_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::officer_base_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::officer_base_info >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_officer_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::officer_apply_info > applys_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::officer_base_info > infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static role_officer_data* default_instance_;
};
// -------------------------------------------------------------------

class offical_battle_report_data : public ::google::protobuf::Message {
 public:
  offical_battle_report_data();
  virtual ~offical_battle_report_data();

  offical_battle_report_data(const offical_battle_report_data& from);

  inline offical_battle_report_data& operator=(const offical_battle_report_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_battle_report_data& default_instance();

  void Swap(offical_battle_report_data* other);

  // implements Message ----------------------------------------------

  offical_battle_report_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offical_battle_report_data& from);
  void MergeFrom(const offical_battle_report_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional bool win = 2;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 2;
  inline bool win() const;
  inline void set_win(bool value);

  // optional uint64 attacker_id = 3;
  inline bool has_attacker_id() const;
  inline void clear_attacker_id();
  static const int kAttackerIdFieldNumber = 3;
  inline ::google::protobuf::uint64 attacker_id() const;
  inline void set_attacker_id(::google::protobuf::uint64 value);

  // optional int32 attacker_old_ranking_id = 4;
  inline bool has_attacker_old_ranking_id() const;
  inline void clear_attacker_old_ranking_id();
  static const int kAttackerOldRankingIdFieldNumber = 4;
  inline ::google::protobuf::int32 attacker_old_ranking_id() const;
  inline void set_attacker_old_ranking_id(::google::protobuf::int32 value);

  // optional int32 attacker_new_ranking_id = 5;
  inline bool has_attacker_new_ranking_id() const;
  inline void clear_attacker_new_ranking_id();
  static const int kAttackerNewRankingIdFieldNumber = 5;
  inline ::google::protobuf::int32 attacker_new_ranking_id() const;
  inline void set_attacker_new_ranking_id(::google::protobuf::int32 value);

  // optional int32 my_old_ranking_id = 6;
  inline bool has_my_old_ranking_id() const;
  inline void clear_my_old_ranking_id();
  static const int kMyOldRankingIdFieldNumber = 6;
  inline ::google::protobuf::int32 my_old_ranking_id() const;
  inline void set_my_old_ranking_id(::google::protobuf::int32 value);

  // optional int32 my_new_ranking_id = 7;
  inline bool has_my_new_ranking_id() const;
  inline void clear_my_new_ranking_id();
  static const int kMyNewRankingIdFieldNumber = 7;
  inline ::google::protobuf::int32 my_new_ranking_id() const;
  inline void set_my_new_ranking_id(::google::protobuf::int32 value);

  // optional int32 battle_time = 8;
  inline bool has_battle_time() const;
  inline void clear_battle_time();
  static const int kBattleTimeFieldNumber = 8;
  inline ::google::protobuf::int32 battle_time() const;
  inline void set_battle_time(::google::protobuf::int32 value);

  // optional uint64 battle_id = 9;
  inline bool has_battle_id() const;
  inline void clear_battle_id();
  static const int kBattleIdFieldNumber = 9;
  inline ::google::protobuf::uint64 battle_id() const;
  inline void set_battle_id(::google::protobuf::uint64 value);

  // optional int32 grade = 10;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 10;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // repeated .SProtoSpace.hero_base_info heros = 11;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 11;
  inline const ::SProtoSpace::hero_base_info& heros(int index) const;
  inline ::SProtoSpace::hero_base_info* mutable_heros(int index);
  inline ::SProtoSpace::hero_base_info* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info >*
      mutable_heros();

  // @@protoc_insertion_point(class_scope:SProtoSpace.offical_battle_report_data)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_attacker_id();
  inline void clear_has_attacker_id();
  inline void set_has_attacker_old_ranking_id();
  inline void clear_has_attacker_old_ranking_id();
  inline void set_has_attacker_new_ranking_id();
  inline void clear_has_attacker_new_ranking_id();
  inline void set_has_my_old_ranking_id();
  inline void clear_has_my_old_ranking_id();
  inline void set_has_my_new_ranking_id();
  inline void clear_has_my_new_ranking_id();
  inline void set_has_battle_time();
  inline void clear_has_battle_time();
  inline void set_has_battle_id();
  inline void clear_has_battle_id();
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 attacker_id_;
  bool win_;
  ::google::protobuf::int32 attacker_old_ranking_id_;
  ::google::protobuf::int32 attacker_new_ranking_id_;
  ::google::protobuf::int32 my_old_ranking_id_;
  ::google::protobuf::int32 my_new_ranking_id_;
  ::google::protobuf::int32 battle_time_;
  ::google::protobuf::uint64 battle_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info > heros_;
  ::google::protobuf::int32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static offical_battle_report_data* default_instance_;
};
// -------------------------------------------------------------------

class offical_battle_report : public ::google::protobuf::Message {
 public:
  offical_battle_report();
  virtual ~offical_battle_report();

  offical_battle_report(const offical_battle_report& from);

  inline offical_battle_report& operator=(const offical_battle_report& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_battle_report& default_instance();

  void Swap(offical_battle_report* other);

  // implements Message ----------------------------------------------

  offical_battle_report* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offical_battle_report& from);
  void MergeFrom(const offical_battle_report& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // repeated .SProtoSpace.offical_battle_report_data reports = 2;
  inline int reports_size() const;
  inline void clear_reports();
  static const int kReportsFieldNumber = 2;
  inline const ::SProtoSpace::offical_battle_report_data& reports(int index) const;
  inline ::SProtoSpace::offical_battle_report_data* mutable_reports(int index);
  inline ::SProtoSpace::offical_battle_report_data* add_reports();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_battle_report_data >&
      reports() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_battle_report_data >*
      mutable_reports();

  // @@protoc_insertion_point(class_scope:SProtoSpace.offical_battle_report)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_battle_report_data > reports_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static offical_battle_report* default_instance_;
};
// -------------------------------------------------------------------

class db_offical_apply_battle_data : public ::google::protobuf::Message {
 public:
  db_offical_apply_battle_data();
  virtual ~db_offical_apply_battle_data();

  db_offical_apply_battle_data(const db_offical_apply_battle_data& from);

  inline db_offical_apply_battle_data& operator=(const db_offical_apply_battle_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_offical_apply_battle_data& default_instance();

  void Swap(db_offical_apply_battle_data* other);

  // implements Message ----------------------------------------------

  db_offical_apply_battle_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_offical_apply_battle_data& from);
  void MergeFrom(const db_offical_apply_battle_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.offical_apply_battle_data battle_data = 1;
  inline bool has_battle_data() const;
  inline void clear_battle_data();
  static const int kBattleDataFieldNumber = 1;
  inline const ::SProtoSpace::offical_apply_battle_data& battle_data() const;
  inline ::SProtoSpace::offical_apply_battle_data* mutable_battle_data();
  inline ::SProtoSpace::offical_apply_battle_data* release_battle_data();
  inline void set_allocated_battle_data(::SProtoSpace::offical_apply_battle_data* battle_data);

  // repeated .SProtoSpace.offical_apply_my_battle_data my_records = 2;
  inline int my_records_size() const;
  inline void clear_my_records();
  static const int kMyRecordsFieldNumber = 2;
  inline const ::SProtoSpace::offical_apply_my_battle_data& my_records(int index) const;
  inline ::SProtoSpace::offical_apply_my_battle_data* mutable_my_records(int index);
  inline ::SProtoSpace::offical_apply_my_battle_data* add_my_records();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_my_battle_data >&
      my_records() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_my_battle_data >*
      mutable_my_records();

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_offical_apply_battle_data)
 private:
  inline void set_has_battle_data();
  inline void clear_has_battle_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::offical_apply_battle_data* battle_data_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_my_battle_data > my_records_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_offical_apply_battle_data* default_instance_;
};
// -------------------------------------------------------------------

class offical_apply_battle_result_db : public ::google::protobuf::Message {
 public:
  offical_apply_battle_result_db();
  virtual ~offical_apply_battle_result_db();

  offical_apply_battle_result_db(const offical_apply_battle_result_db& from);

  inline offical_apply_battle_result_db& operator=(const offical_apply_battle_result_db& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_apply_battle_result_db& default_instance();

  void Swap(offical_apply_battle_result_db* other);

  // implements Message ----------------------------------------------

  offical_apply_battle_result_db* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offical_apply_battle_result_db& from);
  void MergeFrom(const offical_apply_battle_result_db& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.EGrade office_lv = 1;
  inline bool has_office_lv() const;
  inline void clear_office_lv();
  static const int kOfficeLvFieldNumber = 1;
  inline ::SProtoSpace::EGrade office_lv() const;
  inline void set_office_lv(::SProtoSpace::EGrade value);

  // repeated .SProtoSpace.db_offical_apply_battle_data battle_data = 2;
  inline int battle_data_size() const;
  inline void clear_battle_data();
  static const int kBattleDataFieldNumber = 2;
  inline const ::SProtoSpace::db_offical_apply_battle_data& battle_data(int index) const;
  inline ::SProtoSpace::db_offical_apply_battle_data* mutable_battle_data(int index);
  inline ::SProtoSpace::db_offical_apply_battle_data* add_battle_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_offical_apply_battle_data >&
      battle_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_offical_apply_battle_data >*
      mutable_battle_data();

  // @@protoc_insertion_point(class_scope:SProtoSpace.offical_apply_battle_result_db)
 private:
  inline void set_has_office_lv();
  inline void clear_has_office_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_offical_apply_battle_data > battle_data_;
  int office_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static offical_apply_battle_result_db* default_instance_;
};
// -------------------------------------------------------------------

class all_offical_apply_battle_result_db : public ::google::protobuf::Message {
 public:
  all_offical_apply_battle_result_db();
  virtual ~all_offical_apply_battle_result_db();

  all_offical_apply_battle_result_db(const all_offical_apply_battle_result_db& from);

  inline all_offical_apply_battle_result_db& operator=(const all_offical_apply_battle_result_db& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const all_offical_apply_battle_result_db& default_instance();

  void Swap(all_offical_apply_battle_result_db* other);

  // implements Message ----------------------------------------------

  all_offical_apply_battle_result_db* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const all_offical_apply_battle_result_db& from);
  void MergeFrom(const all_offical_apply_battle_result_db& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.offical_apply_battle_result_db results = 1;
  inline int results_size() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 1;
  inline const ::SProtoSpace::offical_apply_battle_result_db& results(int index) const;
  inline ::SProtoSpace::offical_apply_battle_result_db* mutable_results(int index);
  inline ::SProtoSpace::offical_apply_battle_result_db* add_results();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_battle_result_db >&
      results() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_battle_result_db >*
      mutable_results();

  // @@protoc_insertion_point(class_scope:SProtoSpace.all_offical_apply_battle_result_db)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_battle_result_db > results_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static all_offical_apply_battle_result_db* default_instance_;
};
// -------------------------------------------------------------------

class db_offical_result_rank_data : public ::google::protobuf::Message {
 public:
  db_offical_result_rank_data();
  virtual ~db_offical_result_rank_data();

  db_offical_result_rank_data(const db_offical_result_rank_data& from);

  inline db_offical_result_rank_data& operator=(const db_offical_result_rank_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_offical_result_rank_data& default_instance();

  void Swap(db_offical_result_rank_data* other);

  // implements Message ----------------------------------------------

  db_offical_result_rank_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_offical_result_rank_data& from);
  void MergeFrom(const db_offical_result_rank_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.offical_apply_battle_data data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::SProtoSpace::offical_apply_battle_data& data(int index) const;
  inline ::SProtoSpace::offical_apply_battle_data* mutable_data(int index);
  inline ::SProtoSpace::offical_apply_battle_data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_battle_data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_battle_data >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_offical_result_rank_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_battle_data > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_offical_result_rank_data* default_instance_;
};
// -------------------------------------------------------------------

class db_my_offical_result_data : public ::google::protobuf::Message {
 public:
  db_my_offical_result_data();
  virtual ~db_my_offical_result_data();

  db_my_offical_result_data(const db_my_offical_result_data& from);

  inline db_my_offical_result_data& operator=(const db_my_offical_result_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_my_offical_result_data& default_instance();

  void Swap(db_my_offical_result_data* other);

  // implements Message ----------------------------------------------

  db_my_offical_result_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_my_offical_result_data& from);
  void MergeFrom(const db_my_offical_result_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 grade = 1;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 1;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // repeated .SProtoSpace.offical_apply_my_battle_data mydata = 2;
  inline int mydata_size() const;
  inline void clear_mydata();
  static const int kMydataFieldNumber = 2;
  inline const ::SProtoSpace::offical_apply_my_battle_data& mydata(int index) const;
  inline ::SProtoSpace::offical_apply_my_battle_data* mutable_mydata(int index);
  inline ::SProtoSpace::offical_apply_my_battle_data* add_mydata();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_my_battle_data >&
      mydata() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_my_battle_data >*
      mutable_mydata();

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_my_offical_result_data)
 private:
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_my_battle_data > mydata_;
  ::google::protobuf::int32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_my_offical_result_data* default_instance_;
};
// -------------------------------------------------------------------

class offical_rank_db : public ::google::protobuf::Message {
 public:
  offical_rank_db();
  virtual ~offical_rank_db();

  offical_rank_db(const offical_rank_db& from);

  inline offical_rank_db& operator=(const offical_rank_db& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_rank_db& default_instance();

  void Swap(offical_rank_db* other);

  // implements Message ----------------------------------------------

  offical_rank_db* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offical_rank_db& from);
  void MergeFrom(const offical_rank_db& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.EGrade office_lv = 1;
  inline bool has_office_lv() const;
  inline void clear_office_lv();
  static const int kOfficeLvFieldNumber = 1;
  inline ::SProtoSpace::EGrade office_lv() const;
  inline void set_office_lv(::SProtoSpace::EGrade value);

  // repeated uint64 role_ids = 2;
  inline int role_ids_size() const;
  inline void clear_role_ids();
  static const int kRoleIdsFieldNumber = 2;
  inline ::google::protobuf::uint64 role_ids(int index) const;
  inline void set_role_ids(int index, ::google::protobuf::uint64 value);
  inline void add_role_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      role_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_role_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.offical_rank_db)
 private:
  inline void set_has_office_lv();
  inline void clear_has_office_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > role_ids_;
  int office_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static offical_rank_db* default_instance_;
};
// -------------------------------------------------------------------

class all_offical_rank_db : public ::google::protobuf::Message {
 public:
  all_offical_rank_db();
  virtual ~all_offical_rank_db();

  all_offical_rank_db(const all_offical_rank_db& from);

  inline all_offical_rank_db& operator=(const all_offical_rank_db& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const all_offical_rank_db& default_instance();

  void Swap(all_offical_rank_db* other);

  // implements Message ----------------------------------------------

  all_offical_rank_db* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const all_offical_rank_db& from);
  void MergeFrom(const all_offical_rank_db& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.offical_rank_db ranks = 1;
  inline int ranks_size() const;
  inline void clear_ranks();
  static const int kRanksFieldNumber = 1;
  inline const ::SProtoSpace::offical_rank_db& ranks(int index) const;
  inline ::SProtoSpace::offical_rank_db* mutable_ranks(int index);
  inline ::SProtoSpace::offical_rank_db* add_ranks();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_rank_db >&
      ranks() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_rank_db >*
      mutable_ranks();

  // @@protoc_insertion_point(class_scope:SProtoSpace.all_offical_rank_db)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_rank_db > ranks_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static all_offical_rank_db* default_instance_;
};
// -------------------------------------------------------------------

class db_unit_fashion_data : public ::google::protobuf::Message {
 public:
  db_unit_fashion_data();
  virtual ~db_unit_fashion_data();

  db_unit_fashion_data(const db_unit_fashion_data& from);

  inline db_unit_fashion_data& operator=(const db_unit_fashion_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_unit_fashion_data& default_instance();

  void Swap(db_unit_fashion_data* other);

  // implements Message ----------------------------------------------

  db_unit_fashion_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_unit_fashion_data& from);
  void MergeFrom(const db_unit_fashion_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional int32 config_id = 3;
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 3;
  inline ::google::protobuf::int32 config_id() const;
  inline void set_config_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.FASHION_STATE state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::SProtoSpace::FASHION_STATE state() const;
  inline void set_state(::SProtoSpace::FASHION_STATE value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_unit_fashion_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::int32 config_id_;
  int state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_unit_fashion_data* default_instance_;
};
// -------------------------------------------------------------------

class role_fashion_data : public ::google::protobuf::Message {
 public:
  role_fashion_data();
  virtual ~role_fashion_data();

  role_fashion_data(const role_fashion_data& from);

  inline role_fashion_data& operator=(const role_fashion_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_fashion_data& default_instance();

  void Swap(role_fashion_data* other);

  // implements Message ----------------------------------------------

  role_fashion_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_fashion_data& from);
  void MergeFrom(const role_fashion_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.db_unit_fashion_data fashions = 3;
  inline int fashions_size() const;
  inline void clear_fashions();
  static const int kFashionsFieldNumber = 3;
  inline const ::SProtoSpace::db_unit_fashion_data& fashions(int index) const;
  inline ::SProtoSpace::db_unit_fashion_data* mutable_fashions(int index);
  inline ::SProtoSpace::db_unit_fashion_data* add_fashions();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_fashion_data >&
      fashions() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_fashion_data >*
      mutable_fashions();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_fashion_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_fashion_data > fashions_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static role_fashion_data* default_instance_;
};
// -------------------------------------------------------------------

class db_role_all_data : public ::google::protobuf::Message {
 public:
  db_role_all_data();
  virtual ~db_role_all_data();

  db_role_all_data(const db_role_all_data& from);

  inline db_role_all_data& operator=(const db_role_all_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_all_data& default_instance();

  void Swap(db_role_all_data* other);

  // implements Message ----------------------------------------------

  db_role_all_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_all_data& from);
  void MergeFrom(const db_role_all_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.role_base_data base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::SProtoSpace::role_base_data& base_data() const;
  inline ::SProtoSpace::role_base_data* mutable_base_data();
  inline ::SProtoSpace::role_base_data* release_base_data();
  inline void set_allocated_base_data(::SProtoSpace::role_base_data* base_data);

  // optional .SProtoSpace.role_item_data item_data = 2;
  inline bool has_item_data() const;
  inline void clear_item_data();
  static const int kItemDataFieldNumber = 2;
  inline const ::SProtoSpace::role_item_data& item_data() const;
  inline ::SProtoSpace::role_item_data* mutable_item_data();
  inline ::SProtoSpace::role_item_data* release_item_data();
  inline void set_allocated_item_data(::SProtoSpace::role_item_data* item_data);

  // optional .SProtoSpace.role_player_data player_data = 3;
  inline bool has_player_data() const;
  inline void clear_player_data();
  static const int kPlayerDataFieldNumber = 3;
  inline const ::SProtoSpace::role_player_data& player_data() const;
  inline ::SProtoSpace::role_player_data* mutable_player_data();
  inline ::SProtoSpace::role_player_data* release_player_data();
  inline void set_allocated_player_data(::SProtoSpace::role_player_data* player_data);

  // optional .SProtoSpace.role_hero_data hero_data = 4;
  inline bool has_hero_data() const;
  inline void clear_hero_data();
  static const int kHeroDataFieldNumber = 4;
  inline const ::SProtoSpace::role_hero_data& hero_data() const;
  inline ::SProtoSpace::role_hero_data* mutable_hero_data();
  inline ::SProtoSpace::role_hero_data* release_hero_data();
  inline void set_allocated_hero_data(::SProtoSpace::role_hero_data* hero_data);

  // optional .SProtoSpace.role_soul_data soul_data = 5;
  inline bool has_soul_data() const;
  inline void clear_soul_data();
  static const int kSoulDataFieldNumber = 5;
  inline const ::SProtoSpace::role_soul_data& soul_data() const;
  inline ::SProtoSpace::role_soul_data* mutable_soul_data();
  inline ::SProtoSpace::role_soul_data* release_soul_data();
  inline void set_allocated_soul_data(::SProtoSpace::role_soul_data* soul_data);

  // optional .SProtoSpace.role_level_data level_data = 6;
  inline bool has_level_data() const;
  inline void clear_level_data();
  static const int kLevelDataFieldNumber = 6;
  inline const ::SProtoSpace::role_level_data& level_data() const;
  inline ::SProtoSpace::role_level_data* mutable_level_data();
  inline ::SProtoSpace::role_level_data* release_level_data();
  inline void set_allocated_level_data(::SProtoSpace::role_level_data* level_data);

  // optional .SProtoSpace.role_quest_data quest_data = 7;
  inline bool has_quest_data() const;
  inline void clear_quest_data();
  static const int kQuestDataFieldNumber = 7;
  inline const ::SProtoSpace::role_quest_data& quest_data() const;
  inline ::SProtoSpace::role_quest_data* mutable_quest_data();
  inline ::SProtoSpace::role_quest_data* release_quest_data();
  inline void set_allocated_quest_data(::SProtoSpace::role_quest_data* quest_data);

  // optional .SProtoSpace.role_royal_data royal_data = 8;
  inline bool has_royal_data() const;
  inline void clear_royal_data();
  static const int kRoyalDataFieldNumber = 8;
  inline const ::SProtoSpace::role_royal_data& royal_data() const;
  inline ::SProtoSpace::role_royal_data* mutable_royal_data();
  inline ::SProtoSpace::role_royal_data* release_royal_data();
  inline void set_allocated_royal_data(::SProtoSpace::role_royal_data* royal_data);

  // optional .SProtoSpace.role_show_data show_data = 9;
  inline bool has_show_data() const;
  inline void clear_show_data();
  static const int kShowDataFieldNumber = 9;
  inline const ::SProtoSpace::role_show_data& show_data() const;
  inline ::SProtoSpace::role_show_data* mutable_show_data();
  inline ::SProtoSpace::role_show_data* release_show_data();
  inline void set_allocated_show_data(::SProtoSpace::role_show_data* show_data);

  // optional .SProtoSpace.role_friend_data friend_data = 10;
  inline bool has_friend_data() const;
  inline void clear_friend_data();
  static const int kFriendDataFieldNumber = 10;
  inline const ::SProtoSpace::role_friend_data& friend_data() const;
  inline ::SProtoSpace::role_friend_data* mutable_friend_data();
  inline ::SProtoSpace::role_friend_data* release_friend_data();
  inline void set_allocated_friend_data(::SProtoSpace::role_friend_data* friend_data);

  // optional .SProtoSpace.role_shop_data shop_data = 11;
  inline bool has_shop_data() const;
  inline void clear_shop_data();
  static const int kShopDataFieldNumber = 11;
  inline const ::SProtoSpace::role_shop_data& shop_data() const;
  inline ::SProtoSpace::role_shop_data* mutable_shop_data();
  inline ::SProtoSpace::role_shop_data* release_shop_data();
  inline void set_allocated_shop_data(::SProtoSpace::role_shop_data* shop_data);

  // optional .SProtoSpace.role_harem_data harem_data = 12;
  inline bool has_harem_data() const;
  inline void clear_harem_data();
  static const int kHaremDataFieldNumber = 12;
  inline const ::SProtoSpace::role_harem_data& harem_data() const;
  inline ::SProtoSpace::role_harem_data* mutable_harem_data();
  inline ::SProtoSpace::role_harem_data* release_harem_data();
  inline void set_allocated_harem_data(::SProtoSpace::role_harem_data* harem_data);

  // optional .SProtoSpace.role_flower_data flower_data = 13;
  inline bool has_flower_data() const;
  inline void clear_flower_data();
  static const int kFlowerDataFieldNumber = 13;
  inline const ::SProtoSpace::role_flower_data& flower_data() const;
  inline ::SProtoSpace::role_flower_data* mutable_flower_data();
  inline ::SProtoSpace::role_flower_data* release_flower_data();
  inline void set_allocated_flower_data(::SProtoSpace::role_flower_data* flower_data);

  // optional uint32 last_used_time = 14;
  inline bool has_last_used_time() const;
  inline void clear_last_used_time();
  static const int kLastUsedTimeFieldNumber = 14;
  inline ::google::protobuf::uint32 last_used_time() const;
  inline void set_last_used_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_all_data)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_item_data();
  inline void clear_has_item_data();
  inline void set_has_player_data();
  inline void clear_has_player_data();
  inline void set_has_hero_data();
  inline void clear_has_hero_data();
  inline void set_has_soul_data();
  inline void clear_has_soul_data();
  inline void set_has_level_data();
  inline void clear_has_level_data();
  inline void set_has_quest_data();
  inline void clear_has_quest_data();
  inline void set_has_royal_data();
  inline void clear_has_royal_data();
  inline void set_has_show_data();
  inline void clear_has_show_data();
  inline void set_has_friend_data();
  inline void clear_has_friend_data();
  inline void set_has_shop_data();
  inline void clear_has_shop_data();
  inline void set_has_harem_data();
  inline void clear_has_harem_data();
  inline void set_has_flower_data();
  inline void clear_has_flower_data();
  inline void set_has_last_used_time();
  inline void clear_has_last_used_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::role_base_data* base_data_;
  ::SProtoSpace::role_item_data* item_data_;
  ::SProtoSpace::role_player_data* player_data_;
  ::SProtoSpace::role_hero_data* hero_data_;
  ::SProtoSpace::role_soul_data* soul_data_;
  ::SProtoSpace::role_level_data* level_data_;
  ::SProtoSpace::role_quest_data* quest_data_;
  ::SProtoSpace::role_royal_data* royal_data_;
  ::SProtoSpace::role_show_data* show_data_;
  ::SProtoSpace::role_friend_data* friend_data_;
  ::SProtoSpace::role_shop_data* shop_data_;
  ::SProtoSpace::role_harem_data* harem_data_;
  ::SProtoSpace::role_flower_data* flower_data_;
  ::google::protobuf::uint32 last_used_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_all_data* default_instance_;
};
// -------------------------------------------------------------------

class redis_role_base : public ::google::protobuf::Message {
 public:
  redis_role_base();
  virtual ~redis_role_base();

  redis_role_base(const redis_role_base& from);

  inline redis_role_base& operator=(const redis_role_base& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const redis_role_base& default_instance();

  void Swap(redis_role_base* other);

  // implements Message ----------------------------------------------

  redis_role_base* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const redis_role_base& from);
  void MergeFrom(const redis_role_base& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 lv = 3;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional uint32 like = 6;
  inline bool has_like() const;
  inline void clear_like();
  static const int kLikeFieldNumber = 6;
  inline ::google::protobuf::uint32 like() const;
  inline void set_like(::google::protobuf::uint32 value);

  // optional uint32 title = 7;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 7;
  inline ::google::protobuf::uint32 title() const;
  inline void set_title(::google::protobuf::uint32 value);

  // optional uint64 partner_id = 8;
  inline bool has_partner_id() const;
  inline void clear_partner_id();
  static const int kPartnerIdFieldNumber = 8;
  inline ::google::protobuf::uint64 partner_id() const;
  inline void set_partner_id(::google::protobuf::uint64 value);

  // optional string partner_name = 9;
  inline bool has_partner_name() const;
  inline void clear_partner_name();
  static const int kPartnerNameFieldNumber = 9;
  inline const ::std::string& partner_name() const;
  inline void set_partner_name(const ::std::string& value);
  inline void set_partner_name(const char* value);
  inline void set_partner_name(const char* value, size_t size);
  inline ::std::string* mutable_partner_name();
  inline ::std::string* release_partner_name();
  inline void set_allocated_partner_name(::std::string* partner_name);

  // optional uint32 office = 10;
  inline bool has_office() const;
  inline void clear_office();
  static const int kOfficeFieldNumber = 10;
  inline ::google::protobuf::uint32 office() const;
  inline void set_office(::google::protobuf::uint32 value);

  // optional uint64 fimily_id = 11;
  inline bool has_fimily_id() const;
  inline void clear_fimily_id();
  static const int kFimilyIdFieldNumber = 11;
  inline ::google::protobuf::uint64 fimily_id() const;
  inline void set_fimily_id(::google::protobuf::uint64 value);

  // optional string fimily_name = 12;
  inline bool has_fimily_name() const;
  inline void clear_fimily_name();
  static const int kFimilyNameFieldNumber = 12;
  inline const ::std::string& fimily_name() const;
  inline void set_fimily_name(const ::std::string& value);
  inline void set_fimily_name(const char* value);
  inline void set_fimily_name(const char* value, size_t size);
  inline ::std::string* mutable_fimily_name();
  inline ::std::string* release_fimily_name();
  inline void set_allocated_fimily_name(::std::string* fimily_name);

  // optional string signature = 13;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 13;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // optional .SProtoSpace.lsg_position_info position = 14;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 14;
  inline const ::SProtoSpace::lsg_position_info& position() const;
  inline ::SProtoSpace::lsg_position_info* mutable_position();
  inline ::SProtoSpace::lsg_position_info* release_position();
  inline void set_allocated_position(::SProtoSpace::lsg_position_info* position);

  // repeated uint64 liked_list = 16;
  inline int liked_list_size() const;
  inline void clear_liked_list();
  static const int kLikedListFieldNumber = 16;
  inline ::google::protobuf::uint64 liked_list(int index) const;
  inline void set_liked_list(int index, ::google::protobuf::uint64 value);
  inline void add_liked_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      liked_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_liked_list();

  // optional uint32 border = 18;
  inline bool has_border() const;
  inline void clear_border();
  static const int kBorderFieldNumber = 18;
  inline ::google::protobuf::uint32 border() const;
  inline void set_border(::google::protobuf::uint32 value);

  // optional .SProtoSpace.date_info birthday = 19;
  inline bool has_birthday() const;
  inline void clear_birthday();
  static const int kBirthdayFieldNumber = 19;
  inline const ::SProtoSpace::date_info& birthday() const;
  inline ::SProtoSpace::date_info* mutable_birthday();
  inline ::SProtoSpace::date_info* release_birthday();
  inline void set_allocated_birthday(::SProtoSpace::date_info* birthday);

  // optional uint32 star_sign = 20 [default = 1];
  inline bool has_star_sign() const;
  inline void clear_star_sign();
  static const int kStarSignFieldNumber = 20;
  inline ::google::protobuf::uint32 star_sign() const;
  inline void set_star_sign(::google::protobuf::uint32 value);

  // optional uint32 popularity = 21 [default = 0];
  inline bool has_popularity() const;
  inline void clear_popularity();
  static const int kPopularityFieldNumber = 21;
  inline ::google::protobuf::uint32 popularity() const;
  inline void set_popularity(::google::protobuf::uint32 value);

  // optional uint32 charm = 22 [default = 0];
  inline bool has_charm() const;
  inline void clear_charm();
  static const int kCharmFieldNumber = 22;
  inline ::google::protobuf::uint32 charm() const;
  inline void set_charm(::google::protobuf::uint32 value);

  // repeated uint32 labels = 23;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 23;
  inline ::google::protobuf::uint32 labels(int index) const;
  inline void set_labels(int index, ::google::protobuf::uint32 value);
  inline void add_labels(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      labels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_labels();

  // optional uint32 fight_value = 24;
  inline bool has_fight_value() const;
  inline void clear_fight_value();
  static const int kFightValueFieldNumber = 24;
  inline ::google::protobuf::uint32 fight_value() const;
  inline void set_fight_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.redis_role_base)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_like();
  inline void clear_has_like();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_partner_id();
  inline void clear_has_partner_id();
  inline void set_has_partner_name();
  inline void clear_has_partner_name();
  inline void set_has_office();
  inline void clear_has_office();
  inline void set_has_fimily_id();
  inline void clear_has_fimily_id();
  inline void set_has_fimily_name();
  inline void clear_has_fimily_name();
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_border();
  inline void clear_has_border();
  inline void set_has_birthday();
  inline void clear_has_birthday();
  inline void set_has_star_sign();
  inline void clear_has_star_sign();
  inline void set_has_popularity();
  inline void clear_has_popularity();
  inline void set_has_charm();
  inline void clear_has_charm();
  inline void set_has_fight_value();
  inline void clear_has_fight_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::std::string* name_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::uint32 like_;
  ::google::protobuf::uint32 title_;
  ::google::protobuf::uint64 partner_id_;
  ::std::string* partner_name_;
  ::google::protobuf::uint64 fimily_id_;
  ::std::string* fimily_name_;
  ::std::string* signature_;
  ::google::protobuf::uint32 office_;
  ::google::protobuf::uint32 border_;
  ::SProtoSpace::lsg_position_info* position_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > liked_list_;
  ::SProtoSpace::date_info* birthday_;
  ::google::protobuf::uint32 star_sign_;
  ::google::protobuf::uint32 popularity_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > labels_;
  ::google::protobuf::uint32 charm_;
  ::google::protobuf::uint32 fight_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static redis_role_base* default_instance_;
};
// -------------------------------------------------------------------

class redis_role_show_hero : public ::google::protobuf::Message {
 public:
  redis_role_show_hero();
  virtual ~redis_role_show_hero();

  redis_role_show_hero(const redis_role_show_hero& from);

  inline redis_role_show_hero& operator=(const redis_role_show_hero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const redis_role_show_hero& default_instance();

  void Swap(redis_role_show_hero* other);

  // implements Message ----------------------------------------------

  redis_role_show_hero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const redis_role_show_hero& from);
  void MergeFrom(const redis_role_show_hero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.battle_hero_info show_hero_list = 15;
  inline int show_hero_list_size() const;
  inline void clear_show_hero_list();
  static const int kShowHeroListFieldNumber = 15;
  inline const ::SProtoSpace::battle_hero_info& show_hero_list(int index) const;
  inline ::SProtoSpace::battle_hero_info* mutable_show_hero_list(int index);
  inline ::SProtoSpace::battle_hero_info* add_show_hero_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info >&
      show_hero_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info >*
      mutable_show_hero_list();

  // repeated uint64 show_hero_id_list = 17;
  inline int show_hero_id_list_size() const;
  inline void clear_show_hero_id_list();
  static const int kShowHeroIdListFieldNumber = 17;
  inline ::google::protobuf::uint64 show_hero_id_list(int index) const;
  inline void set_show_hero_id_list(int index, ::google::protobuf::uint64 value);
  inline void add_show_hero_id_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      show_hero_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_show_hero_id_list();

  // @@protoc_insertion_point(class_scope:SProtoSpace.redis_role_show_hero)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info > show_hero_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > show_hero_id_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static redis_role_show_hero* default_instance_;
};
// -------------------------------------------------------------------

class redis_role_battle_hero : public ::google::protobuf::Message {
 public:
  redis_role_battle_hero();
  virtual ~redis_role_battle_hero();

  redis_role_battle_hero(const redis_role_battle_hero& from);

  inline redis_role_battle_hero& operator=(const redis_role_battle_hero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const redis_role_battle_hero& default_instance();

  void Swap(redis_role_battle_hero* other);

  // implements Message ----------------------------------------------

  redis_role_battle_hero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const redis_role_battle_hero& from);
  void MergeFrom(const redis_role_battle_hero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.battle_hero_info battle_hero_list = 15;
  inline int battle_hero_list_size() const;
  inline void clear_battle_hero_list();
  static const int kBattleHeroListFieldNumber = 15;
  inline const ::SProtoSpace::battle_hero_info& battle_hero_list(int index) const;
  inline ::SProtoSpace::battle_hero_info* mutable_battle_hero_list(int index);
  inline ::SProtoSpace::battle_hero_info* add_battle_hero_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info >&
      battle_hero_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info >*
      mutable_battle_hero_list();

  // @@protoc_insertion_point(class_scope:SProtoSpace.redis_role_battle_hero)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info > battle_hero_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static redis_role_battle_hero* default_instance_;
};
// -------------------------------------------------------------------

class redis_comment_all : public ::google::protobuf::Message {
 public:
  redis_comment_all();
  virtual ~redis_comment_all();

  redis_comment_all(const redis_comment_all& from);

  inline redis_comment_all& operator=(const redis_comment_all& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const redis_comment_all& default_instance();

  void Swap(redis_comment_all* other);

  // implements Message ----------------------------------------------

  redis_comment_all* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const redis_comment_all& from);
  void MergeFrom(const redis_comment_all& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.comment_info comment_list = 1;
  inline int comment_list_size() const;
  inline void clear_comment_list();
  static const int kCommentListFieldNumber = 1;
  inline const ::SProtoSpace::comment_info& comment_list(int index) const;
  inline ::SProtoSpace::comment_info* mutable_comment_list(int index);
  inline ::SProtoSpace::comment_info* add_comment_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::comment_info >&
      comment_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::comment_info >*
      mutable_comment_list();

  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.redis_comment_all)
 private:
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::comment_info > comment_list_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static redis_comment_all* default_instance_;
};
// -------------------------------------------------------------------

class redis_role_data : public ::google::protobuf::Message {
 public:
  redis_role_data();
  virtual ~redis_role_data();

  redis_role_data(const redis_role_data& from);

  inline redis_role_data& operator=(const redis_role_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const redis_role_data& default_instance();

  void Swap(redis_role_data* other);

  // implements Message ----------------------------------------------

  redis_role_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const redis_role_data& from);
  void MergeFrom(const redis_role_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.redis_role_base base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::SProtoSpace::redis_role_base& base_data() const;
  inline ::SProtoSpace::redis_role_base* mutable_base_data();
  inline ::SProtoSpace::redis_role_base* release_base_data();
  inline void set_allocated_base_data(::SProtoSpace::redis_role_base* base_data);

  // optional .SProtoSpace.redis_role_show_hero show_hero_data = 2;
  inline bool has_show_hero_data() const;
  inline void clear_show_hero_data();
  static const int kShowHeroDataFieldNumber = 2;
  inline const ::SProtoSpace::redis_role_show_hero& show_hero_data() const;
  inline ::SProtoSpace::redis_role_show_hero* mutable_show_hero_data();
  inline ::SProtoSpace::redis_role_show_hero* release_show_hero_data();
  inline void set_allocated_show_hero_data(::SProtoSpace::redis_role_show_hero* show_hero_data);

  // optional .SProtoSpace.redis_role_battle_hero battle_hero_data = 3;
  inline bool has_battle_hero_data() const;
  inline void clear_battle_hero_data();
  static const int kBattleHeroDataFieldNumber = 3;
  inline const ::SProtoSpace::redis_role_battle_hero& battle_hero_data() const;
  inline ::SProtoSpace::redis_role_battle_hero* mutable_battle_hero_data();
  inline ::SProtoSpace::redis_role_battle_hero* release_battle_hero_data();
  inline void set_allocated_battle_hero_data(::SProtoSpace::redis_role_battle_hero* battle_hero_data);

  // optional .SProtoSpace.fashions_pack fashion_data = 5;
  inline bool has_fashion_data() const;
  inline void clear_fashion_data();
  static const int kFashionDataFieldNumber = 5;
  inline const ::SProtoSpace::fashions_pack& fashion_data() const;
  inline ::SProtoSpace::fashions_pack* mutable_fashion_data();
  inline ::SProtoSpace::fashions_pack* release_fashion_data();
  inline void set_allocated_fashion_data(::SProtoSpace::fashions_pack* fashion_data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.redis_role_data)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_show_hero_data();
  inline void clear_has_show_hero_data();
  inline void set_has_battle_hero_data();
  inline void clear_has_battle_hero_data();
  inline void set_has_fashion_data();
  inline void clear_has_fashion_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::redis_role_base* base_data_;
  ::SProtoSpace::redis_role_show_hero* show_hero_data_;
  ::SProtoSpace::redis_role_battle_hero* battle_hero_data_;
  ::SProtoSpace::fashions_pack* fashion_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static redis_role_data* default_instance_;
};
// -------------------------------------------------------------------

class arena_user_data : public ::google::protobuf::Message {
 public:
  arena_user_data();
  virtual ~arena_user_data();

  arena_user_data(const arena_user_data& from);

  inline arena_user_data& operator=(const arena_user_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const arena_user_data& default_instance();

  void Swap(arena_user_data* other);

  // implements Message ----------------------------------------------

  arena_user_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const arena_user_data& from);
  void MergeFrom(const arena_user_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional int32 challenged_num = 2;
  inline bool has_challenged_num() const;
  inline void clear_challenged_num();
  static const int kChallengedNumFieldNumber = 2;
  inline ::google::protobuf::int32 challenged_num() const;
  inline void set_challenged_num(::google::protobuf::int32 value);

  // optional bool is_robot = 3;
  inline bool has_is_robot() const;
  inline void clear_is_robot();
  static const int kIsRobotFieldNumber = 3;
  inline bool is_robot() const;
  inline void set_is_robot(bool value);

  // optional int32 win_count = 4;
  inline bool has_win_count() const;
  inline void clear_win_count();
  static const int kWinCountFieldNumber = 4;
  inline ::google::protobuf::int32 win_count() const;
  inline void set_win_count(::google::protobuf::int32 value);

  // optional int32 fail_count = 5;
  inline bool has_fail_count() const;
  inline void clear_fail_count();
  static const int kFailCountFieldNumber = 5;
  inline ::google::protobuf::int32 fail_count() const;
  inline void set_fail_count(::google::protobuf::int32 value);

  // optional .SProtoSpace.battle_role_info battle_data = 6;
  inline bool has_battle_data() const;
  inline void clear_battle_data();
  static const int kBattleDataFieldNumber = 6;
  inline const ::SProtoSpace::battle_role_info& battle_data() const;
  inline ::SProtoSpace::battle_role_info* mutable_battle_data();
  inline ::SProtoSpace::battle_role_info* release_battle_data();
  inline void set_allocated_battle_data(::SProtoSpace::battle_role_info* battle_data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.arena_user_data)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_challenged_num();
  inline void clear_has_challenged_num();
  inline void set_has_is_robot();
  inline void clear_has_is_robot();
  inline void set_has_win_count();
  inline void clear_has_win_count();
  inline void set_has_fail_count();
  inline void clear_has_fail_count();
  inline void set_has_battle_data();
  inline void clear_has_battle_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::int32 challenged_num_;
  bool is_robot_;
  ::google::protobuf::int32 win_count_;
  ::google::protobuf::int32 fail_count_;
  ::SProtoSpace::battle_role_info* battle_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static arena_user_data* default_instance_;
};
// -------------------------------------------------------------------

class db_get_redis_role_data_req : public ::google::protobuf::Message {
 public:
  db_get_redis_role_data_req();
  virtual ~db_get_redis_role_data_req();

  db_get_redis_role_data_req(const db_get_redis_role_data_req& from);

  inline db_get_redis_role_data_req& operator=(const db_get_redis_role_data_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_redis_role_data_req& default_instance();

  void Swap(db_get_redis_role_data_req* other);

  // implements Message ----------------------------------------------

  db_get_redis_role_data_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_redis_role_data_req& from);
  void MergeFrom(const db_get_redis_role_data_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_get_redis_role_data_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.eDBGetRedisRoleDataType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::SProtoSpace::eDBGetRedisRoleDataType type() const;
  inline void set_type(::SProtoSpace::eDBGetRedisRoleDataType value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 target_role_id = 4;
  inline bool has_target_role_id() const;
  inline void clear_target_role_id();
  static const int kTargetRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 target_role_id() const;
  inline void set_target_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_get_redis_role_data_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_target_role_id();
  inline void clear_has_target_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int type_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 target_role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_get_redis_role_data_req* default_instance_;
};
// -------------------------------------------------------------------

class db_get_redis_role_data_ack : public ::google::protobuf::Message {
 public:
  db_get_redis_role_data_ack();
  virtual ~db_get_redis_role_data_ack();

  db_get_redis_role_data_ack(const db_get_redis_role_data_ack& from);

  inline db_get_redis_role_data_ack& operator=(const db_get_redis_role_data_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_redis_role_data_ack& default_instance();

  void Swap(db_get_redis_role_data_ack* other);

  // implements Message ----------------------------------------------

  db_get_redis_role_data_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_redis_role_data_ack& from);
  void MergeFrom(const db_get_redis_role_data_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_get_redis_role_data_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.eDBGetRedisRoleDataType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::SProtoSpace::eDBGetRedisRoleDataType type() const;
  inline void set_type(::SProtoSpace::eDBGetRedisRoleDataType value);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 role_id = 4;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 target_role_id = 5;
  inline bool has_target_role_id() const;
  inline void clear_target_role_id();
  static const int kTargetRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint64 target_role_id() const;
  inline void set_target_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.redis_role_data data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::SProtoSpace::redis_role_data& data() const;
  inline ::SProtoSpace::redis_role_data* mutable_data();
  inline ::SProtoSpace::redis_role_data* release_data();
  inline void set_allocated_data(::SProtoSpace::redis_role_data* data);

  // optional .SProtoSpace.db_role_all_data role_all_data = 7;
  inline bool has_role_all_data() const;
  inline void clear_role_all_data();
  static const int kRoleAllDataFieldNumber = 7;
  inline const ::SProtoSpace::db_role_all_data& role_all_data() const;
  inline ::SProtoSpace::db_role_all_data* mutable_role_all_data();
  inline ::SProtoSpace::db_role_all_data* release_role_all_data();
  inline void set_allocated_role_all_data(::SProtoSpace::db_role_all_data* role_all_data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_get_redis_role_data_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_target_role_id();
  inline void clear_has_target_role_id();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_role_all_data();
  inline void clear_has_role_all_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int type_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 target_role_id_;
  ::SProtoSpace::redis_role_data* data_;
  ::SProtoSpace::db_role_all_data* role_all_data_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_get_redis_role_data_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_update_redis_role_data_ntf : public ::google::protobuf::Message {
 public:
  db_update_redis_role_data_ntf();
  virtual ~db_update_redis_role_data_ntf();

  db_update_redis_role_data_ntf(const db_update_redis_role_data_ntf& from);

  inline db_update_redis_role_data_ntf& operator=(const db_update_redis_role_data_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_update_redis_role_data_ntf& default_instance();

  void Swap(db_update_redis_role_data_ntf* other);

  // implements Message ----------------------------------------------

  db_update_redis_role_data_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_update_redis_role_data_ntf& from);
  void MergeFrom(const db_update_redis_role_data_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_update_redis_role_data_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.redis_role_data data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::SProtoSpace::redis_role_data& data() const;
  inline ::SProtoSpace::redis_role_data* mutable_data();
  inline ::SProtoSpace::redis_role_data* release_data();
  inline void set_allocated_data(::SProtoSpace::redis_role_data* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_update_redis_role_data_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::SProtoSpace::redis_role_data* data_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_update_redis_role_data_ntf* default_instance_;
};
// -------------------------------------------------------------------

class db_check_apply_info_req : public ::google::protobuf::Message {
 public:
  db_check_apply_info_req();
  virtual ~db_check_apply_info_req();

  db_check_apply_info_req(const db_check_apply_info_req& from);

  inline db_check_apply_info_req& operator=(const db_check_apply_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_check_apply_info_req& default_instance();

  void Swap(db_check_apply_info_req* other);

  // implements Message ----------------------------------------------

  db_check_apply_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_check_apply_info_req& from);
  void MergeFrom(const db_check_apply_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_check_apply_info_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 area_id = 3;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 3;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_check_apply_info_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_area_id();
  inline void clear_has_area_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  int protoid_;
  ::google::protobuf::uint32 area_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_check_apply_info_req* default_instance_;
};
// -------------------------------------------------------------------

class db_check_apply_info_ack : public ::google::protobuf::Message {
 public:
  db_check_apply_info_ack();
  virtual ~db_check_apply_info_ack();

  db_check_apply_info_ack(const db_check_apply_info_ack& from);

  inline db_check_apply_info_ack& operator=(const db_check_apply_info_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_check_apply_info_ack& default_instance();

  void Swap(db_check_apply_info_ack* other);

  // implements Message ----------------------------------------------

  db_check_apply_info_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_check_apply_info_ack& from);
  void MergeFrom(const db_check_apply_info_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_check_apply_info_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // repeated .SProtoSpace.friend_apply_info apply_infos = 3;
  inline int apply_infos_size() const;
  inline void clear_apply_infos();
  static const int kApplyInfosFieldNumber = 3;
  inline const ::SProtoSpace::friend_apply_info& apply_infos(int index) const;
  inline ::SProtoSpace::friend_apply_info* mutable_apply_infos(int index);
  inline ::SProtoSpace::friend_apply_info* add_apply_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_apply_info >&
      apply_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_apply_info >*
      mutable_apply_infos();

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_check_apply_info_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_apply_info > apply_infos_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_check_apply_info_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_save_apply_info_req : public ::google::protobuf::Message {
 public:
  db_save_apply_info_req();
  virtual ~db_save_apply_info_req();

  db_save_apply_info_req(const db_save_apply_info_req& from);

  inline db_save_apply_info_req& operator=(const db_save_apply_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_save_apply_info_req& default_instance();

  void Swap(db_save_apply_info_req* other);

  // implements Message ----------------------------------------------

  db_save_apply_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_save_apply_info_req& from);
  void MergeFrom(const db_save_apply_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_save_apply_info_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 accept_id = 2;
  inline bool has_accept_id() const;
  inline void clear_accept_id();
  static const int kAcceptIdFieldNumber = 2;
  inline ::google::protobuf::uint64 accept_id() const;
  inline void set_accept_id(::google::protobuf::uint64 value);

  // optional uint64 apply_id = 3;
  inline bool has_apply_id() const;
  inline void clear_apply_id();
  static const int kApplyIdFieldNumber = 3;
  inline ::google::protobuf::uint64 apply_id() const;
  inline void set_apply_id(::google::protobuf::uint64 value);

  // optional uint32 area_id = 4;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 4;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // optional string content = 5;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 5;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_save_apply_info_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_accept_id();
  inline void clear_has_accept_id();
  inline void set_has_apply_id();
  inline void clear_has_apply_id();
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 accept_id_;
  int protoid_;
  ::google::protobuf::uint32 area_id_;
  ::google::protobuf::uint64 apply_id_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_save_apply_info_req* default_instance_;
};
// -------------------------------------------------------------------

class db_update_apply_req : public ::google::protobuf::Message {
 public:
  db_update_apply_req();
  virtual ~db_update_apply_req();

  db_update_apply_req(const db_update_apply_req& from);

  inline db_update_apply_req& operator=(const db_update_apply_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_update_apply_req& default_instance();

  void Swap(db_update_apply_req* other);

  // implements Message ----------------------------------------------

  db_update_apply_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_update_apply_req& from);
  void MergeFrom(const db_update_apply_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_update_apply_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 accept_id = 2;
  inline bool has_accept_id() const;
  inline void clear_accept_id();
  static const int kAcceptIdFieldNumber = 2;
  inline ::google::protobuf::uint64 accept_id() const;
  inline void set_accept_id(::google::protobuf::uint64 value);

  // optional uint64 apply_id = 3;
  inline bool has_apply_id() const;
  inline void clear_apply_id();
  static const int kApplyIdFieldNumber = 3;
  inline ::google::protobuf::uint64 apply_id() const;
  inline void set_apply_id(::google::protobuf::uint64 value);

  // optional uint32 area_id = 4;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 4;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // optional uint32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_update_apply_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_accept_id();
  inline void clear_has_accept_id();
  inline void set_has_apply_id();
  inline void clear_has_apply_id();
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 accept_id_;
  int proto_id_;
  ::google::protobuf::uint32 area_id_;
  ::google::protobuf::uint64 apply_id_;
  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_update_apply_req* default_instance_;
};
// -------------------------------------------------------------------

class db_process_apply_info_req : public ::google::protobuf::Message {
 public:
  db_process_apply_info_req();
  virtual ~db_process_apply_info_req();

  db_process_apply_info_req(const db_process_apply_info_req& from);

  inline db_process_apply_info_req& operator=(const db_process_apply_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_process_apply_info_req& default_instance();

  void Swap(db_process_apply_info_req* other);

  // implements Message ----------------------------------------------

  db_process_apply_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_process_apply_info_req& from);
  void MergeFrom(const db_process_apply_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_process_apply_info_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 apply_id = 2;
  inline bool has_apply_id() const;
  inline void clear_apply_id();
  static const int kApplyIdFieldNumber = 2;
  inline ::google::protobuf::uint64 apply_id() const;
  inline void set_apply_id(::google::protobuf::uint64 value);

  // optional uint32 area_id = 3;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 3;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_process_apply_info_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_apply_id();
  inline void clear_has_apply_id();
  inline void set_has_area_id();
  inline void clear_has_area_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 apply_id_;
  int proto_id_;
  ::google::protobuf::uint32 area_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_process_apply_info_req* default_instance_;
};
// -------------------------------------------------------------------

class db_process_apply_info_ack : public ::google::protobuf::Message {
 public:
  db_process_apply_info_ack();
  virtual ~db_process_apply_info_ack();

  db_process_apply_info_ack(const db_process_apply_info_ack& from);

  inline db_process_apply_info_ack& operator=(const db_process_apply_info_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_process_apply_info_ack& default_instance();

  void Swap(db_process_apply_info_ack* other);

  // implements Message ----------------------------------------------

  db_process_apply_info_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_process_apply_info_ack& from);
  void MergeFrom(const db_process_apply_info_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_process_apply_info_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // repeated .SProtoSpace.friend_apply_info apply_infos = 3;
  inline int apply_infos_size() const;
  inline void clear_apply_infos();
  static const int kApplyInfosFieldNumber = 3;
  inline const ::SProtoSpace::friend_apply_info& apply_infos(int index) const;
  inline ::SProtoSpace::friend_apply_info* mutable_apply_infos(int index);
  inline ::SProtoSpace::friend_apply_info* add_apply_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_apply_info >&
      apply_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_apply_info >*
      mutable_apply_infos();

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_process_apply_info_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_apply_info > apply_infos_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_process_apply_info_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_search_friend_req : public ::google::protobuf::Message {
 public:
  db_search_friend_req();
  virtual ~db_search_friend_req();

  db_search_friend_req(const db_search_friend_req& from);

  inline db_search_friend_req& operator=(const db_search_friend_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_search_friend_req& default_instance();

  void Swap(db_search_friend_req* other);

  // implements Message ----------------------------------------------

  db_search_friend_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_search_friend_req& from);
  void MergeFrom(const db_search_friend_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_search_friend_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 area_id = 3;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 3;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // optional uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string content = 5;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 5;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_search_friend_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  int proto_id_;
  ::google::protobuf::uint32 area_id_;
  ::std::string* content_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_search_friend_req* default_instance_;
};
// -------------------------------------------------------------------

class db_search_friend_ack : public ::google::protobuf::Message {
 public:
  db_search_friend_ack();
  virtual ~db_search_friend_ack();

  db_search_friend_ack(const db_search_friend_ack& from);

  inline db_search_friend_ack& operator=(const db_search_friend_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_search_friend_ack& default_instance();

  void Swap(db_search_friend_ack* other);

  // implements Message ----------------------------------------------

  db_search_friend_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_search_friend_ack& from);
  void MergeFrom(const db_search_friend_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_search_friend_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional .SProtoSpace.friend_base_info info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::SProtoSpace::friend_base_info& info() const;
  inline ::SProtoSpace::friend_base_info* mutable_info();
  inline ::SProtoSpace::friend_base_info* release_info();
  inline void set_allocated_info(::SProtoSpace::friend_base_info* info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_search_friend_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::SProtoSpace::friend_base_info* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_search_friend_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_save_friend_opt_req : public ::google::protobuf::Message {
 public:
  db_save_friend_opt_req();
  virtual ~db_save_friend_opt_req();

  db_save_friend_opt_req(const db_save_friend_opt_req& from);

  inline db_save_friend_opt_req& operator=(const db_save_friend_opt_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_save_friend_opt_req& default_instance();

  void Swap(db_save_friend_opt_req* other);

  // implements Message ----------------------------------------------

  db_save_friend_opt_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_save_friend_opt_req& from);
  void MergeFrom(const db_save_friend_opt_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_save_friend_opt_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint64 target_id = 3;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 3;
  inline ::google::protobuf::uint64 target_id() const;
  inline void set_target_id(::google::protobuf::uint64 value);

  // optional uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 opt_time = 5;
  inline bool has_opt_time() const;
  inline void clear_opt_time();
  static const int kOptTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 opt_time() const;
  inline void set_opt_time(::google::protobuf::uint64 value);

  // optional uint32 status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_save_friend_opt_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_opt_time();
  inline void clear_has_opt_time();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  int proto_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint64 target_id_;
  ::google::protobuf::uint64 opt_time_;
  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_save_friend_opt_req* default_instance_;
};
// -------------------------------------------------------------------

class opt_record_info : public ::google::protobuf::Message {
 public:
  opt_record_info();
  virtual ~opt_record_info();

  opt_record_info(const opt_record_info& from);

  inline opt_record_info& operator=(const opt_record_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const opt_record_info& default_instance();

  void Swap(opt_record_info* other);

  // implements Message ----------------------------------------------

  opt_record_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const opt_record_info& from);
  void MergeFrom(const opt_record_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint64 target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  inline ::google::protobuf::uint64 target_id() const;
  inline void set_target_id(::google::protobuf::uint64 value);

  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 opt_time = 4;
  inline bool has_opt_time() const;
  inline void clear_opt_time();
  static const int kOptTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 opt_time() const;
  inline void set_opt_time(::google::protobuf::uint64 value);

  // optional uint32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.opt_record_info)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_opt_time();
  inline void clear_has_opt_time();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint64 target_id_;
  ::google::protobuf::uint64 opt_time_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static opt_record_info* default_instance_;
};
// -------------------------------------------------------------------

class db_check_opt_record_req : public ::google::protobuf::Message {
 public:
  db_check_opt_record_req();
  virtual ~db_check_opt_record_req();

  db_check_opt_record_req(const db_check_opt_record_req& from);

  inline db_check_opt_record_req& operator=(const db_check_opt_record_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_check_opt_record_req& default_instance();

  void Swap(db_check_opt_record_req* other);

  // implements Message ----------------------------------------------

  db_check_opt_record_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_check_opt_record_req& from);
  void MergeFrom(const db_check_opt_record_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_opt_record_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 area_id = 3;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 3;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_check_opt_record_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_area_id();
  inline void clear_has_area_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  int proto_id_;
  ::google::protobuf::uint32 area_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_check_opt_record_req* default_instance_;
};
// -------------------------------------------------------------------

class db_check_opt_record_ack : public ::google::protobuf::Message {
 public:
  db_check_opt_record_ack();
  virtual ~db_check_opt_record_ack();

  db_check_opt_record_ack(const db_check_opt_record_ack& from);

  inline db_check_opt_record_ack& operator=(const db_check_opt_record_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_check_opt_record_ack& default_instance();

  void Swap(db_check_opt_record_ack* other);

  // implements Message ----------------------------------------------

  db_check_opt_record_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_check_opt_record_ack& from);
  void MergeFrom(const db_check_opt_record_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_opt_record_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 area_id = 3;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 3;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.opt_record_info infos = 4;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 4;
  inline const ::SProtoSpace::opt_record_info& infos(int index) const;
  inline ::SProtoSpace::opt_record_info* mutable_infos(int index);
  inline ::SProtoSpace::opt_record_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::opt_record_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::opt_record_info >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_check_opt_record_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_area_id();
  inline void clear_has_area_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  int proto_id_;
  ::google::protobuf::uint32 area_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::opt_record_info > infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_check_opt_record_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_update_opt_record_req : public ::google::protobuf::Message {
 public:
  db_update_opt_record_req();
  virtual ~db_update_opt_record_req();

  db_update_opt_record_req(const db_update_opt_record_req& from);

  inline db_update_opt_record_req& operator=(const db_update_opt_record_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_update_opt_record_req& default_instance();

  void Swap(db_update_opt_record_req* other);

  // implements Message ----------------------------------------------

  db_update_opt_record_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_update_opt_record_req& from);
  void MergeFrom(const db_update_opt_record_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_update_opt_record_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 area_id = 3;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 3;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.opt_record_info infos = 4;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 4;
  inline const ::SProtoSpace::opt_record_info& infos(int index) const;
  inline ::SProtoSpace::opt_record_info* mutable_infos(int index);
  inline ::SProtoSpace::opt_record_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::opt_record_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::opt_record_info >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_update_opt_record_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_area_id();
  inline void clear_has_area_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  int proto_id_;
  ::google::protobuf::uint32 area_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::opt_record_info > infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_update_opt_record_req* default_instance_;
};
// -------------------------------------------------------------------

class db_get_recommend_friend_req : public ::google::protobuf::Message {
 public:
  db_get_recommend_friend_req();
  virtual ~db_get_recommend_friend_req();

  db_get_recommend_friend_req(const db_get_recommend_friend_req& from);

  inline db_get_recommend_friend_req& operator=(const db_get_recommend_friend_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_recommend_friend_req& default_instance();

  void Swap(db_get_recommend_friend_req* other);

  // implements Message ----------------------------------------------

  db_get_recommend_friend_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_recommend_friend_req& from);
  void MergeFrom(const db_get_recommend_friend_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_recommend_friend_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 area_id = 3;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 3;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // optional uint32 lv = 4;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 4;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional uint32 grade = 5;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 5;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional uint32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 count = 7;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 7;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // repeated uint64 fd_ids = 8;
  inline int fd_ids_size() const;
  inline void clear_fd_ids();
  static const int kFdIdsFieldNumber = 8;
  inline ::google::protobuf::uint64 fd_ids(int index) const;
  inline void set_fd_ids(int index, ::google::protobuf::uint64 value);
  inline void add_fd_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      fd_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_fd_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_get_recommend_friend_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  int proto_id_;
  ::google::protobuf::uint32 area_id_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > fd_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_get_recommend_friend_req* default_instance_;
};
// -------------------------------------------------------------------

class db_get_recommend_friend_ack : public ::google::protobuf::Message {
 public:
  db_get_recommend_friend_ack();
  virtual ~db_get_recommend_friend_ack();

  db_get_recommend_friend_ack(const db_get_recommend_friend_ack& from);

  inline db_get_recommend_friend_ack& operator=(const db_get_recommend_friend_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_recommend_friend_ack& default_instance();

  void Swap(db_get_recommend_friend_ack* other);

  // implements Message ----------------------------------------------

  db_get_recommend_friend_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_recommend_friend_ack& from);
  void MergeFrom(const db_get_recommend_friend_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_recommend_friend_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 area_id = 3;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 3;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.friend_base_info fd_infos = 4;
  inline int fd_infos_size() const;
  inline void clear_fd_infos();
  static const int kFdInfosFieldNumber = 4;
  inline const ::SProtoSpace::friend_base_info& fd_infos(int index) const;
  inline ::SProtoSpace::friend_base_info* mutable_fd_infos(int index);
  inline ::SProtoSpace::friend_base_info* add_fd_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >&
      fd_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >*
      mutable_fd_infos();

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_get_recommend_friend_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_area_id();
  inline void clear_has_area_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  int proto_id_;
  ::google::protobuf::uint32 area_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info > fd_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_get_recommend_friend_ack* default_instance_;
};
// -------------------------------------------------------------------

class gs_get_role_data_req : public ::google::protobuf::Message {
 public:
  gs_get_role_data_req();
  virtual ~gs_get_role_data_req();

  gs_get_role_data_req(const gs_get_role_data_req& from);

  inline gs_get_role_data_req& operator=(const gs_get_role_data_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_get_role_data_req& default_instance();

  void Swap(gs_get_role_data_req* other);

  // implements Message ----------------------------------------------

  gs_get_role_data_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_get_role_data_req& from);
  void MergeFrom(const gs_get_role_data_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_get_role_data_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 gate_id = 3;
  inline bool has_gate_id() const;
  inline void clear_gate_id();
  static const int kGateIdFieldNumber = 3;
  inline ::google::protobuf::uint64 gate_id() const;
  inline void set_gate_id(::google::protobuf::uint64 value);

  // optional uint32 area_id = 4;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 4;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // optional uint32 online_type = 5;
  inline bool has_online_type() const;
  inline void clear_online_type();
  static const int kOnlineTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 online_type() const;
  inline void set_online_type(::google::protobuf::uint32 value);

  // optional uint64 new_db_svr_id = 6;
  inline bool has_new_db_svr_id() const;
  inline void clear_new_db_svr_id();
  static const int kNewDbSvrIdFieldNumber = 6;
  inline ::google::protobuf::uint64 new_db_svr_id() const;
  inline void set_new_db_svr_id(::google::protobuf::uint64 value);

  // optional bool is_switch_scene = 7 [default = false];
  inline bool has_is_switch_scene() const;
  inline void clear_is_switch_scene();
  static const int kIsSwitchSceneFieldNumber = 7;
  inline bool is_switch_scene() const;
  inline void set_is_switch_scene(bool value);

  // optional uint32 scene_id = 8 [default = 0];
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 8;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // optional uint32 scene_type = 9 [default = 0];
  inline bool has_scene_type() const;
  inline void clear_scene_type();
  static const int kSceneTypeFieldNumber = 9;
  inline ::google::protobuf::uint32 scene_type() const;
  inline void set_scene_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.gs_get_role_data_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_gate_id();
  inline void clear_has_gate_id();
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_online_type();
  inline void clear_has_online_type();
  inline void set_has_new_db_svr_id();
  inline void clear_has_new_db_svr_id();
  inline void set_has_is_switch_scene();
  inline void clear_has_is_switch_scene();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_type();
  inline void clear_has_scene_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int protoid_;
  ::google::protobuf::uint32 area_id_;
  ::google::protobuf::uint64 gate_id_;
  ::google::protobuf::uint64 new_db_svr_id_;
  ::google::protobuf::uint32 online_type_;
  bool is_switch_scene_;
  ::google::protobuf::uint32 scene_id_;
  ::google::protobuf::uint32 scene_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static gs_get_role_data_req* default_instance_;
};
// -------------------------------------------------------------------

class db_role_data_ack : public ::google::protobuf::Message {
 public:
  db_role_data_ack();
  virtual ~db_role_data_ack();

  db_role_data_ack(const db_role_data_ack& from);

  inline db_role_data_ack& operator=(const db_role_data_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_data_ack& default_instance();

  void Swap(db_role_data_ack* other);

  // implements Message ----------------------------------------------

  db_role_data_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_data_ack& from);
  void MergeFrom(const db_role_data_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_data_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional int32 ret_code = 2;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 2;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 gate_id = 4;
  inline bool has_gate_id() const;
  inline void clear_gate_id();
  static const int kGateIdFieldNumber = 4;
  inline ::google::protobuf::uint64 gate_id() const;
  inline void set_gate_id(::google::protobuf::uint64 value);

  // optional uint32 area_id = 5;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 5;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // optional bool online_type = 6;
  inline bool has_online_type() const;
  inline void clear_online_type();
  static const int kOnlineTypeFieldNumber = 6;
  inline bool online_type() const;
  inline void set_online_type(bool value);

  // optional .SProtoSpace.db_role_all_data data = 7;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 7;
  inline const ::SProtoSpace::db_role_all_data& data() const;
  inline ::SProtoSpace::db_role_all_data* mutable_data();
  inline ::SProtoSpace::db_role_all_data* release_data();
  inline void set_allocated_data(::SProtoSpace::db_role_all_data* data);

  // optional bool is_switch_scene = 8 [default = false];
  inline bool has_is_switch_scene() const;
  inline void clear_is_switch_scene();
  static const int kIsSwitchSceneFieldNumber = 8;
  inline bool is_switch_scene() const;
  inline void set_is_switch_scene(bool value);

  // optional uint32 scene_id = 9 [default = 0];
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 9;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // optional uint32 scene_type = 10 [default = 0];
  inline bool has_scene_type() const;
  inline void clear_scene_type();
  static const int kSceneTypeFieldNumber = 10;
  inline ::google::protobuf::uint32 scene_type() const;
  inline void set_scene_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_data_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_gate_id();
  inline void clear_has_gate_id();
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_online_type();
  inline void clear_has_online_type();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_is_switch_scene();
  inline void clear_has_is_switch_scene();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_type();
  inline void clear_has_scene_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 gate_id_;
  ::google::protobuf::uint32 area_id_;
  bool online_type_;
  bool is_switch_scene_;
  ::SProtoSpace::db_role_all_data* data_;
  ::google::protobuf::uint32 scene_id_;
  ::google::protobuf::uint32 scene_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_data_ack* default_instance_;
};
// -------------------------------------------------------------------

class gs_role_leave_game : public ::google::protobuf::Message {
 public:
  gs_role_leave_game();
  virtual ~gs_role_leave_game();

  gs_role_leave_game(const gs_role_leave_game& from);

  inline gs_role_leave_game& operator=(const gs_role_leave_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_role_leave_game& default_instance();

  void Swap(gs_role_leave_game* other);

  // implements Message ----------------------------------------------

  gs_role_leave_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_role_leave_game& from);
  void MergeFrom(const gs_role_leave_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_role_leave_game_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.gs_role_leave_game)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static gs_role_leave_game* default_instance_;
};
// -------------------------------------------------------------------

class save_role_req : public ::google::protobuf::Message {
 public:
  save_role_req();
  virtual ~save_role_req();

  save_role_req(const save_role_req& from);

  inline save_role_req& operator=(const save_role_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const save_role_req& default_instance();

  void Swap(save_role_req* other);

  // implements Message ----------------------------------------------

  save_role_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const save_role_req& from);
  void MergeFrom(const save_role_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = save_role_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.db_role_all_data data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::SProtoSpace::db_role_all_data& data() const;
  inline ::SProtoSpace::db_role_all_data* mutable_data();
  inline ::SProtoSpace::db_role_all_data* release_data();
  inline void set_allocated_data(::SProtoSpace::db_role_all_data* data);

  // optional .SProtoSpace.ESaveDataMode mode = 4;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 4;
  inline ::SProtoSpace::ESaveDataMode mode() const;
  inline void set_mode(::SProtoSpace::ESaveDataMode value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.save_role_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_mode();
  inline void clear_has_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int protoid_;
  int mode_;
  ::SProtoSpace::db_role_all_data* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static save_role_req* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_like_req : public ::google::protobuf::Message {
 public:
  db_role_show_like_req();
  virtual ~db_role_show_like_req();

  db_role_show_like_req(const db_role_show_like_req& from);

  inline db_role_show_like_req& operator=(const db_role_show_like_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_like_req& default_instance();

  void Swap(db_role_show_like_req* other);

  // implements Message ----------------------------------------------

  db_role_show_like_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_like_req& from);
  void MergeFrom(const db_role_show_like_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 show_role_id = 3;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_like_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 show_role_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_like_req* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_like_ack : public ::google::protobuf::Message {
 public:
  db_role_show_like_ack();
  virtual ~db_role_show_like_ack();

  db_role_show_like_ack(const db_role_show_like_ack& from);

  inline db_role_show_like_ack& operator=(const db_role_show_like_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_like_ack& default_instance();

  void Swap(db_role_show_like_ack* other);

  // implements Message ----------------------------------------------

  db_role_show_like_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_like_ack& from);
  void MergeFrom(const db_role_show_like_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 show_role_id = 4;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional int32 likes = 5;
  inline bool has_likes() const;
  inline void clear_likes();
  static const int kLikesFieldNumber = 5;
  inline ::google::protobuf::int32 likes() const;
  inline void set_likes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_like_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_likes();
  inline void clear_has_likes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 show_role_id_;
  ::google::protobuf::int32 likes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_like_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_comment_req : public ::google::protobuf::Message {
 public:
  db_role_show_comment_req();
  virtual ~db_role_show_comment_req();

  db_role_show_comment_req(const db_role_show_comment_req& from);

  inline db_role_show_comment_req& operator=(const db_role_show_comment_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_comment_req& default_instance();

  void Swap(db_role_show_comment_req* other);

  // implements Message ----------------------------------------------

  db_role_show_comment_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_comment_req& from);
  void MergeFrom(const db_role_show_comment_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 show_role_id = 3;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.comment_info comment = 4;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 4;
  inline const ::SProtoSpace::comment_info& comment() const;
  inline ::SProtoSpace::comment_info* mutable_comment();
  inline ::SProtoSpace::comment_info* release_comment();
  inline void set_allocated_comment(::SProtoSpace::comment_info* comment);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_comment_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 show_role_id_;
  ::SProtoSpace::comment_info* comment_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_comment_req* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_comment_ack : public ::google::protobuf::Message {
 public:
  db_role_show_comment_ack();
  virtual ~db_role_show_comment_ack();

  db_role_show_comment_ack(const db_role_show_comment_ack& from);

  inline db_role_show_comment_ack& operator=(const db_role_show_comment_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_comment_ack& default_instance();

  void Swap(db_role_show_comment_ack* other);

  // implements Message ----------------------------------------------

  db_role_show_comment_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_comment_ack& from);
  void MergeFrom(const db_role_show_comment_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 show_role_id = 4;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.comment_info comment = 5;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 5;
  inline const ::SProtoSpace::comment_info& comment() const;
  inline ::SProtoSpace::comment_info* mutable_comment();
  inline ::SProtoSpace::comment_info* release_comment();
  inline void set_allocated_comment(::SProtoSpace::comment_info* comment);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_comment_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 show_role_id_;
  ::SProtoSpace::comment_info* comment_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_comment_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_delete_comment_req : public ::google::protobuf::Message {
 public:
  db_role_show_delete_comment_req();
  virtual ~db_role_show_delete_comment_req();

  db_role_show_delete_comment_req(const db_role_show_delete_comment_req& from);

  inline db_role_show_delete_comment_req& operator=(const db_role_show_delete_comment_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_delete_comment_req& default_instance();

  void Swap(db_role_show_delete_comment_req* other);

  // implements Message ----------------------------------------------

  db_role_show_delete_comment_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_delete_comment_req& from);
  void MergeFrom(const db_role_show_delete_comment_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_delete_comment_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 show_role_id = 2;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 to_role_id = 4;
  inline bool has_to_role_id() const;
  inline void clear_to_role_id();
  static const int kToRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 to_role_id() const;
  inline void set_to_role_id(::google::protobuf::uint64 value);

  // optional uint64 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_delete_comment_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_to_role_id();
  inline void clear_has_to_role_id();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 show_role_id_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 to_role_id_;
  ::google::protobuf::uint64 time_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_delete_comment_req* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_delete_comment_ack : public ::google::protobuf::Message {
 public:
  db_role_show_delete_comment_ack();
  virtual ~db_role_show_delete_comment_ack();

  db_role_show_delete_comment_ack(const db_role_show_delete_comment_ack& from);

  inline db_role_show_delete_comment_ack& operator=(const db_role_show_delete_comment_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_delete_comment_ack& default_instance();

  void Swap(db_role_show_delete_comment_ack* other);

  // implements Message ----------------------------------------------

  db_role_show_delete_comment_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_delete_comment_ack& from);
  void MergeFrom(const db_role_show_delete_comment_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_delete_comment_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 show_role_id = 3;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_delete_comment_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint64 show_role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_delete_comment_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_get_comment_req : public ::google::protobuf::Message {
 public:
  db_role_show_get_comment_req();
  virtual ~db_role_show_get_comment_req();

  db_role_show_get_comment_req(const db_role_show_get_comment_req& from);

  inline db_role_show_get_comment_req& operator=(const db_role_show_get_comment_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_get_comment_req& default_instance();

  void Swap(db_role_show_get_comment_req* other);

  // implements Message ----------------------------------------------

  db_role_show_get_comment_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_get_comment_req& from);
  void MergeFrom(const db_role_show_get_comment_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_comment_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 show_role_id = 3;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_get_comment_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 show_role_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_get_comment_req* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_get_comment_ack : public ::google::protobuf::Message {
 public:
  db_role_show_get_comment_ack();
  virtual ~db_role_show_get_comment_ack();

  db_role_show_get_comment_ack(const db_role_show_get_comment_ack& from);

  inline db_role_show_get_comment_ack& operator=(const db_role_show_get_comment_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_get_comment_ack& default_instance();

  void Swap(db_role_show_get_comment_ack* other);

  // implements Message ----------------------------------------------

  db_role_show_get_comment_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_get_comment_ack& from);
  void MergeFrom(const db_role_show_get_comment_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_comment_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 show_role_id = 4;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.comment_all comment_all = 5;
  inline bool has_comment_all() const;
  inline void clear_comment_all();
  static const int kCommentAllFieldNumber = 5;
  inline const ::SProtoSpace::comment_all& comment_all() const;
  inline ::SProtoSpace::comment_all* mutable_comment_all();
  inline ::SProtoSpace::comment_all* release_comment_all();
  inline void set_allocated_comment_all(::SProtoSpace::comment_all* comment_all);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_get_comment_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_comment_all();
  inline void clear_has_comment_all();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 show_role_id_;
  ::SProtoSpace::comment_all* comment_all_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_get_comment_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_change_name_req : public ::google::protobuf::Message {
 public:
  db_role_show_change_name_req();
  virtual ~db_role_show_change_name_req();

  db_role_show_change_name_req(const db_role_show_change_name_req& from);

  inline db_role_show_change_name_req& operator=(const db_role_show_change_name_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_change_name_req& default_instance();

  void Swap(db_role_show_change_name_req* other);

  // implements Message ----------------------------------------------

  db_role_show_change_name_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_change_name_req& from);
  void MergeFrom(const db_role_show_change_name_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_change_name_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string new_name = 4;
  inline bool has_new_name() const;
  inline void clear_new_name();
  static const int kNewNameFieldNumber = 4;
  inline const ::std::string& new_name() const;
  inline void set_new_name(const ::std::string& value);
  inline void set_new_name(const char* value);
  inline void set_new_name(const char* value, size_t size);
  inline ::std::string* mutable_new_name();
  inline ::std::string* release_new_name();
  inline void set_allocated_new_name(::std::string* new_name);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_change_name_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_new_name();
  inline void clear_has_new_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::uint64 role_id_;
  ::std::string* new_name_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_change_name_req* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_change_name_ack : public ::google::protobuf::Message {
 public:
  db_role_show_change_name_ack();
  virtual ~db_role_show_change_name_ack();

  db_role_show_change_name_ack(const db_role_show_change_name_ack& from);

  inline db_role_show_change_name_ack& operator=(const db_role_show_change_name_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_change_name_ack& default_instance();

  void Swap(db_role_show_change_name_ack* other);

  // implements Message ----------------------------------------------

  db_role_show_change_name_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_change_name_ack& from);
  void MergeFrom(const db_role_show_change_name_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_change_name_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string new_name = 4;
  inline bool has_new_name() const;
  inline void clear_new_name();
  static const int kNewNameFieldNumber = 4;
  inline const ::std::string& new_name() const;
  inline void set_new_name(const ::std::string& value);
  inline void set_new_name(const char* value);
  inline void set_new_name(const char* value, size_t size);
  inline ::std::string* mutable_new_name();
  inline ::std::string* release_new_name();
  inline void set_allocated_new_name(::std::string* new_name);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_change_name_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_new_name();
  inline void clear_has_new_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint64 role_id_;
  ::std::string* new_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_change_name_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_get_like_req : public ::google::protobuf::Message {
 public:
  db_role_show_get_like_req();
  virtual ~db_role_show_get_like_req();

  db_role_show_get_like_req(const db_role_show_get_like_req& from);

  inline db_role_show_get_like_req& operator=(const db_role_show_get_like_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_get_like_req& default_instance();

  void Swap(db_role_show_get_like_req* other);

  // implements Message ----------------------------------------------

  db_role_show_get_like_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_get_like_req& from);
  void MergeFrom(const db_role_show_get_like_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_like_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 show_role_id = 3;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_get_like_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 show_role_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_get_like_req* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_get_like_ack : public ::google::protobuf::Message {
 public:
  db_role_show_get_like_ack();
  virtual ~db_role_show_get_like_ack();

  db_role_show_get_like_ack(const db_role_show_get_like_ack& from);

  inline db_role_show_get_like_ack& operator=(const db_role_show_get_like_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_get_like_ack& default_instance();

  void Swap(db_role_show_get_like_ack* other);

  // implements Message ----------------------------------------------

  db_role_show_get_like_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_get_like_ack& from);
  void MergeFrom(const db_role_show_get_like_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_like_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 show_role_id = 4;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional int32 likes = 5;
  inline bool has_likes() const;
  inline void clear_likes();
  static const int kLikesFieldNumber = 5;
  inline ::google::protobuf::int32 likes() const;
  inline void set_likes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_get_like_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_likes();
  inline void clear_has_likes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 show_role_id_;
  ::google::protobuf::int32 likes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_get_like_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_get_emotion_req : public ::google::protobuf::Message {
 public:
  db_role_show_get_emotion_req();
  virtual ~db_role_show_get_emotion_req();

  db_role_show_get_emotion_req(const db_role_show_get_emotion_req& from);

  inline db_role_show_get_emotion_req& operator=(const db_role_show_get_emotion_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_get_emotion_req& default_instance();

  void Swap(db_role_show_get_emotion_req* other);

  // implements Message ----------------------------------------------

  db_role_show_get_emotion_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_get_emotion_req& from);
  void MergeFrom(const db_role_show_get_emotion_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_emotion_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 show_role_id = 3;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional uint32 start_index = 4;
  inline bool has_start_index() const;
  inline void clear_start_index();
  static const int kStartIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 start_index() const;
  inline void set_start_index(::google::protobuf::uint32 value);

  // optional uint32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_get_emotion_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_start_index();
  inline void clear_has_start_index();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int protoid_;
  ::google::protobuf::uint32 start_index_;
  ::google::protobuf::uint64 show_role_id_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_get_emotion_req* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_get_emotion_ack : public ::google::protobuf::Message {
 public:
  db_role_show_get_emotion_ack();
  virtual ~db_role_show_get_emotion_ack();

  db_role_show_get_emotion_ack(const db_role_show_get_emotion_ack& from);

  inline db_role_show_get_emotion_ack& operator=(const db_role_show_get_emotion_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_get_emotion_ack& default_instance();

  void Swap(db_role_show_get_emotion_ack* other);

  // implements Message ----------------------------------------------

  db_role_show_get_emotion_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_get_emotion_ack& from);
  void MergeFrom(const db_role_show_get_emotion_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_emotion_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 show_role_id = 3;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.show_emotion_all_info emotion_all = 4;
  inline bool has_emotion_all() const;
  inline void clear_emotion_all();
  static const int kEmotionAllFieldNumber = 4;
  inline const ::SProtoSpace::show_emotion_all_info& emotion_all() const;
  inline ::SProtoSpace::show_emotion_all_info* mutable_emotion_all();
  inline ::SProtoSpace::show_emotion_all_info* release_emotion_all();
  inline void set_allocated_emotion_all(::SProtoSpace::show_emotion_all_info* emotion_all);

  // optional uint32 ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_get_emotion_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_emotion_all();
  inline void clear_has_emotion_all();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 show_role_id_;
  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::SProtoSpace::show_emotion_all_info* emotion_all_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_get_emotion_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_write_emotion_req : public ::google::protobuf::Message {
 public:
  db_role_show_write_emotion_req();
  virtual ~db_role_show_write_emotion_req();

  db_role_show_write_emotion_req(const db_role_show_write_emotion_req& from);

  inline db_role_show_write_emotion_req& operator=(const db_role_show_write_emotion_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_write_emotion_req& default_instance();

  void Swap(db_role_show_write_emotion_req* other);

  // implements Message ----------------------------------------------

  db_role_show_write_emotion_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_write_emotion_req& from);
  void MergeFrom(const db_role_show_write_emotion_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_write_emotion_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string msg_content = 3;
  inline bool has_msg_content() const;
  inline void clear_msg_content();
  static const int kMsgContentFieldNumber = 3;
  inline const ::std::string& msg_content() const;
  inline void set_msg_content(const ::std::string& value);
  inline void set_msg_content(const char* value);
  inline void set_msg_content(const char* value, size_t size);
  inline ::std::string* mutable_msg_content();
  inline ::std::string* release_msg_content();
  inline void set_allocated_msg_content(::std::string* msg_content);

  // repeated string img_urls = 4;
  inline int img_urls_size() const;
  inline void clear_img_urls();
  static const int kImgUrlsFieldNumber = 4;
  inline const ::std::string& img_urls(int index) const;
  inline ::std::string* mutable_img_urls(int index);
  inline void set_img_urls(int index, const ::std::string& value);
  inline void set_img_urls(int index, const char* value);
  inline void set_img_urls(int index, const char* value, size_t size);
  inline ::std::string* add_img_urls();
  inline void add_img_urls(const ::std::string& value);
  inline void add_img_urls(const char* value);
  inline void add_img_urls(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& img_urls() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_img_urls();

  // optional .SProtoSpace.EmotionType msg_type = 5;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 5;
  inline ::SProtoSpace::EmotionType msg_type() const;
  inline void set_msg_type(::SProtoSpace::EmotionType value);

  // optional uint64 id = 6;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 6;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_write_emotion_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_msg_content();
  inline void clear_has_msg_content();
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::std::string* msg_content_;
  int protoid_;
  int msg_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> img_urls_;
  ::google::protobuf::uint64 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_write_emotion_req* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_write_emotion_ack : public ::google::protobuf::Message {
 public:
  db_role_show_write_emotion_ack();
  virtual ~db_role_show_write_emotion_ack();

  db_role_show_write_emotion_ack(const db_role_show_write_emotion_ack& from);

  inline db_role_show_write_emotion_ack& operator=(const db_role_show_write_emotion_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_write_emotion_ack& default_instance();

  void Swap(db_role_show_write_emotion_ack* other);

  // implements Message ----------------------------------------------

  db_role_show_write_emotion_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_write_emotion_ack& from);
  void MergeFrom(const db_role_show_write_emotion_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_write_emotion_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint64 emotion_id = 3;
  inline bool has_emotion_id() const;
  inline void clear_emotion_id();
  static const int kEmotionIdFieldNumber = 3;
  inline ::google::protobuf::uint64 emotion_id() const;
  inline void set_emotion_id(::google::protobuf::uint64 value);

  // optional uint64 role_id = 5;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string msg_content = 6;
  inline bool has_msg_content() const;
  inline void clear_msg_content();
  static const int kMsgContentFieldNumber = 6;
  inline const ::std::string& msg_content() const;
  inline void set_msg_content(const ::std::string& value);
  inline void set_msg_content(const char* value);
  inline void set_msg_content(const char* value, size_t size);
  inline ::std::string* mutable_msg_content();
  inline ::std::string* release_msg_content();
  inline void set_allocated_msg_content(::std::string* msg_content);

  // repeated string img_urls = 7;
  inline int img_urls_size() const;
  inline void clear_img_urls();
  static const int kImgUrlsFieldNumber = 7;
  inline const ::std::string& img_urls(int index) const;
  inline ::std::string* mutable_img_urls(int index);
  inline void set_img_urls(int index, const ::std::string& value);
  inline void set_img_urls(int index, const char* value);
  inline void set_img_urls(int index, const char* value, size_t size);
  inline ::std::string* add_img_urls();
  inline void add_img_urls(const ::std::string& value);
  inline void add_img_urls(const char* value);
  inline void add_img_urls(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& img_urls() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_img_urls();

  // optional .SProtoSpace.EmotionType msg_type = 8;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 8;
  inline ::SProtoSpace::EmotionType msg_type() const;
  inline void set_msg_type(::SProtoSpace::EmotionType value);

  // optional uint64 create_time = 9;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 9;
  inline ::google::protobuf::uint64 create_time() const;
  inline void set_create_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_write_emotion_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_emotion_id();
  inline void clear_has_emotion_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_msg_content();
  inline void clear_has_msg_content();
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_create_time();
  inline void clear_has_create_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint64 emotion_id_;
  ::google::protobuf::uint64 role_id_;
  ::std::string* msg_content_;
  ::google::protobuf::RepeatedPtrField< ::std::string> img_urls_;
  ::google::protobuf::uint64 create_time_;
  int msg_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_write_emotion_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_like_emotion_req : public ::google::protobuf::Message {
 public:
  db_role_show_like_emotion_req();
  virtual ~db_role_show_like_emotion_req();

  db_role_show_like_emotion_req(const db_role_show_like_emotion_req& from);

  inline db_role_show_like_emotion_req& operator=(const db_role_show_like_emotion_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_like_emotion_req& default_instance();

  void Swap(db_role_show_like_emotion_req* other);

  // implements Message ----------------------------------------------

  db_role_show_like_emotion_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_like_emotion_req& from);
  void MergeFrom(const db_role_show_like_emotion_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_emotion_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional uint64 emotion_id = 4;
  inline bool has_emotion_id() const;
  inline void clear_emotion_id();
  static const int kEmotionIdFieldNumber = 4;
  inline ::google::protobuf::uint64 emotion_id() const;
  inline void set_emotion_id(::google::protobuf::uint64 value);

  // optional uint64 show_role_id = 5;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_like_emotion_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_emotion_id();
  inline void clear_has_emotion_id();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::uint64 emotion_id_;
  ::google::protobuf::uint64 show_role_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_like_emotion_req* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_like_emotion_ack : public ::google::protobuf::Message {
 public:
  db_role_show_like_emotion_ack();
  virtual ~db_role_show_like_emotion_ack();

  db_role_show_like_emotion_ack(const db_role_show_like_emotion_ack& from);

  inline db_role_show_like_emotion_ack& operator=(const db_role_show_like_emotion_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_like_emotion_ack& default_instance();

  void Swap(db_role_show_like_emotion_ack* other);

  // implements Message ----------------------------------------------

  db_role_show_like_emotion_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_like_emotion_ack& from);
  void MergeFrom(const db_role_show_like_emotion_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_emotion_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 4;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 4;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional uint64 emotion_id = 5;
  inline bool has_emotion_id() const;
  inline void clear_emotion_id();
  static const int kEmotionIdFieldNumber = 5;
  inline ::google::protobuf::uint64 emotion_id() const;
  inline void set_emotion_id(::google::protobuf::uint64 value);

  // optional uint64 show_role_id = 6;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 6;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_like_emotion_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_emotion_id();
  inline void clear_has_emotion_id();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::uint64 emotion_id_;
  ::google::protobuf::uint64 show_role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_like_emotion_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_comment_emotion_req : public ::google::protobuf::Message {
 public:
  db_role_show_comment_emotion_req();
  virtual ~db_role_show_comment_emotion_req();

  db_role_show_comment_emotion_req(const db_role_show_comment_emotion_req& from);

  inline db_role_show_comment_emotion_req& operator=(const db_role_show_comment_emotion_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_comment_emotion_req& default_instance();

  void Swap(db_role_show_comment_emotion_req* other);

  // implements Message ----------------------------------------------

  db_role_show_comment_emotion_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_comment_emotion_req& from);
  void MergeFrom(const db_role_show_comment_emotion_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_emotion_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 from_id = 2;
  inline bool has_from_id() const;
  inline void clear_from_id();
  static const int kFromIdFieldNumber = 2;
  inline ::google::protobuf::uint64 from_id() const;
  inline void set_from_id(::google::protobuf::uint64 value);

  // optional string from_name = 3;
  inline bool has_from_name() const;
  inline void clear_from_name();
  static const int kFromNameFieldNumber = 3;
  inline const ::std::string& from_name() const;
  inline void set_from_name(const ::std::string& value);
  inline void set_from_name(const char* value);
  inline void set_from_name(const char* value, size_t size);
  inline ::std::string* mutable_from_name();
  inline ::std::string* release_from_name();
  inline void set_allocated_from_name(::std::string* from_name);

  // optional uint64 to_id = 4;
  inline bool has_to_id() const;
  inline void clear_to_id();
  static const int kToIdFieldNumber = 4;
  inline ::google::protobuf::uint64 to_id() const;
  inline void set_to_id(::google::protobuf::uint64 value);

  // optional string to_name = 5;
  inline bool has_to_name() const;
  inline void clear_to_name();
  static const int kToNameFieldNumber = 5;
  inline const ::std::string& to_name() const;
  inline void set_to_name(const ::std::string& value);
  inline void set_to_name(const char* value);
  inline void set_to_name(const char* value, size_t size);
  inline ::std::string* mutable_to_name();
  inline ::std::string* release_to_name();
  inline void set_allocated_to_name(::std::string* to_name);

  // optional string msg_content = 6;
  inline bool has_msg_content() const;
  inline void clear_msg_content();
  static const int kMsgContentFieldNumber = 6;
  inline const ::std::string& msg_content() const;
  inline void set_msg_content(const ::std::string& value);
  inline void set_msg_content(const char* value);
  inline void set_msg_content(const char* value, size_t size);
  inline ::std::string* mutable_msg_content();
  inline ::std::string* release_msg_content();
  inline void set_allocated_msg_content(::std::string* msg_content);

  // optional uint64 show_role_id = 7;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 7;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional uint64 emotion_id = 8;
  inline bool has_emotion_id() const;
  inline void clear_emotion_id();
  static const int kEmotionIdFieldNumber = 8;
  inline ::google::protobuf::uint64 emotion_id() const;
  inline void set_emotion_id(::google::protobuf::uint64 value);

  // optional uint64 id = 9;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 9;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_comment_emotion_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_from_id();
  inline void clear_has_from_id();
  inline void set_has_from_name();
  inline void clear_has_from_name();
  inline void set_has_to_id();
  inline void clear_has_to_id();
  inline void set_has_to_name();
  inline void clear_has_to_name();
  inline void set_has_msg_content();
  inline void clear_has_msg_content();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_emotion_id();
  inline void clear_has_emotion_id();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 from_id_;
  ::std::string* from_name_;
  ::google::protobuf::uint64 to_id_;
  ::std::string* to_name_;
  ::std::string* msg_content_;
  ::google::protobuf::uint64 show_role_id_;
  ::google::protobuf::uint64 emotion_id_;
  ::google::protobuf::uint64 id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_comment_emotion_req* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_comment_emotion_ack : public ::google::protobuf::Message {
 public:
  db_role_show_comment_emotion_ack();
  virtual ~db_role_show_comment_emotion_ack();

  db_role_show_comment_emotion_ack(const db_role_show_comment_emotion_ack& from);

  inline db_role_show_comment_emotion_ack& operator=(const db_role_show_comment_emotion_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_comment_emotion_ack& default_instance();

  void Swap(db_role_show_comment_emotion_ack* other);

  // implements Message ----------------------------------------------

  db_role_show_comment_emotion_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_comment_emotion_ack& from);
  void MergeFrom(const db_role_show_comment_emotion_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_emotion_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 from_id = 2;
  inline bool has_from_id() const;
  inline void clear_from_id();
  static const int kFromIdFieldNumber = 2;
  inline ::google::protobuf::uint64 from_id() const;
  inline void set_from_id(::google::protobuf::uint64 value);

  // optional string from_name = 3;
  inline bool has_from_name() const;
  inline void clear_from_name();
  static const int kFromNameFieldNumber = 3;
  inline const ::std::string& from_name() const;
  inline void set_from_name(const ::std::string& value);
  inline void set_from_name(const char* value);
  inline void set_from_name(const char* value, size_t size);
  inline ::std::string* mutable_from_name();
  inline ::std::string* release_from_name();
  inline void set_allocated_from_name(::std::string* from_name);

  // optional uint64 to_id = 4;
  inline bool has_to_id() const;
  inline void clear_to_id();
  static const int kToIdFieldNumber = 4;
  inline ::google::protobuf::uint64 to_id() const;
  inline void set_to_id(::google::protobuf::uint64 value);

  // optional string to_name = 5;
  inline bool has_to_name() const;
  inline void clear_to_name();
  static const int kToNameFieldNumber = 5;
  inline const ::std::string& to_name() const;
  inline void set_to_name(const ::std::string& value);
  inline void set_to_name(const char* value);
  inline void set_to_name(const char* value, size_t size);
  inline ::std::string* mutable_to_name();
  inline ::std::string* release_to_name();
  inline void set_allocated_to_name(::std::string* to_name);

  // optional string msg_content = 6;
  inline bool has_msg_content() const;
  inline void clear_msg_content();
  static const int kMsgContentFieldNumber = 6;
  inline const ::std::string& msg_content() const;
  inline void set_msg_content(const ::std::string& value);
  inline void set_msg_content(const char* value);
  inline void set_msg_content(const char* value, size_t size);
  inline ::std::string* mutable_msg_content();
  inline ::std::string* release_msg_content();
  inline void set_allocated_msg_content(::std::string* msg_content);

  // optional uint64 show_role_id = 7;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 7;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional uint64 emotion_id = 8;
  inline bool has_emotion_id() const;
  inline void clear_emotion_id();
  static const int kEmotionIdFieldNumber = 8;
  inline ::google::protobuf::uint64 emotion_id() const;
  inline void set_emotion_id(::google::protobuf::uint64 value);

  // optional uint32 ret = 9;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 9;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint64 id = 10;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 10;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_comment_emotion_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_from_id();
  inline void clear_has_from_id();
  inline void set_has_from_name();
  inline void clear_has_from_name();
  inline void set_has_to_id();
  inline void clear_has_to_id();
  inline void set_has_to_name();
  inline void clear_has_to_name();
  inline void set_has_msg_content();
  inline void clear_has_msg_content();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_emotion_id();
  inline void clear_has_emotion_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 from_id_;
  ::std::string* from_name_;
  ::google::protobuf::uint64 to_id_;
  ::std::string* to_name_;
  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::std::string* msg_content_;
  ::google::protobuf::uint64 show_role_id_;
  ::google::protobuf::uint64 emotion_id_;
  ::google::protobuf::uint64 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_comment_emotion_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_remove_emotion_req : public ::google::protobuf::Message {
 public:
  db_role_show_remove_emotion_req();
  virtual ~db_role_show_remove_emotion_req();

  db_role_show_remove_emotion_req(const db_role_show_remove_emotion_req& from);

  inline db_role_show_remove_emotion_req& operator=(const db_role_show_remove_emotion_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_remove_emotion_req& default_instance();

  void Swap(db_role_show_remove_emotion_req* other);

  // implements Message ----------------------------------------------

  db_role_show_remove_emotion_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_remove_emotion_req& from);
  void MergeFrom(const db_role_show_remove_emotion_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_emotion_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 emotion_id = 3;
  inline bool has_emotion_id() const;
  inline void clear_emotion_id();
  static const int kEmotionIdFieldNumber = 3;
  inline ::google::protobuf::uint64 emotion_id() const;
  inline void set_emotion_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_remove_emotion_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_emotion_id();
  inline void clear_has_emotion_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 emotion_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_remove_emotion_req* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_remove_emotion_ack : public ::google::protobuf::Message {
 public:
  db_role_show_remove_emotion_ack();
  virtual ~db_role_show_remove_emotion_ack();

  db_role_show_remove_emotion_ack(const db_role_show_remove_emotion_ack& from);

  inline db_role_show_remove_emotion_ack& operator=(const db_role_show_remove_emotion_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_remove_emotion_ack& default_instance();

  void Swap(db_role_show_remove_emotion_ack* other);

  // implements Message ----------------------------------------------

  db_role_show_remove_emotion_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_remove_emotion_ack& from);
  void MergeFrom(const db_role_show_remove_emotion_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_emotion_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 emotion_id = 2;
  inline bool has_emotion_id() const;
  inline void clear_emotion_id();
  static const int kEmotionIdFieldNumber = 2;
  inline ::google::protobuf::uint64 emotion_id() const;
  inline void set_emotion_id(::google::protobuf::uint64 value);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint64 role_id = 4;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_remove_emotion_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_emotion_id();
  inline void clear_has_emotion_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 emotion_id_;
  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint64 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_remove_emotion_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_remove_comment_req : public ::google::protobuf::Message {
 public:
  db_role_show_remove_comment_req();
  virtual ~db_role_show_remove_comment_req();

  db_role_show_remove_comment_req(const db_role_show_remove_comment_req& from);

  inline db_role_show_remove_comment_req& operator=(const db_role_show_remove_comment_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_remove_comment_req& default_instance();

  void Swap(db_role_show_remove_comment_req* other);

  // implements Message ----------------------------------------------

  db_role_show_remove_comment_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_remove_comment_req& from);
  void MergeFrom(const db_role_show_remove_comment_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_comment_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 from_id = 2;
  inline bool has_from_id() const;
  inline void clear_from_id();
  static const int kFromIdFieldNumber = 2;
  inline ::google::protobuf::uint64 from_id() const;
  inline void set_from_id(::google::protobuf::uint64 value);

  // optional uint64 to_id = 3;
  inline bool has_to_id() const;
  inline void clear_to_id();
  static const int kToIdFieldNumber = 3;
  inline ::google::protobuf::uint64 to_id() const;
  inline void set_to_id(::google::protobuf::uint64 value);

  // optional uint64 show_role_id = 4;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional uint64 emotion_id = 5;
  inline bool has_emotion_id() const;
  inline void clear_emotion_id();
  static const int kEmotionIdFieldNumber = 5;
  inline ::google::protobuf::uint64 emotion_id() const;
  inline void set_emotion_id(::google::protobuf::uint64 value);

  // optional uint64 comment_id = 6;
  inline bool has_comment_id() const;
  inline void clear_comment_id();
  static const int kCommentIdFieldNumber = 6;
  inline ::google::protobuf::uint64 comment_id() const;
  inline void set_comment_id(::google::protobuf::uint64 value);

  // optional uint64 role_id = 7;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 7;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_remove_comment_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_from_id();
  inline void clear_has_from_id();
  inline void set_has_to_id();
  inline void clear_has_to_id();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_emotion_id();
  inline void clear_has_emotion_id();
  inline void set_has_comment_id();
  inline void clear_has_comment_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 from_id_;
  ::google::protobuf::uint64 to_id_;
  ::google::protobuf::uint64 show_role_id_;
  ::google::protobuf::uint64 emotion_id_;
  ::google::protobuf::uint64 comment_id_;
  ::google::protobuf::uint64 role_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_remove_comment_req* default_instance_;
};
// -------------------------------------------------------------------

class db_role_show_remove_comment_ack : public ::google::protobuf::Message {
 public:
  db_role_show_remove_comment_ack();
  virtual ~db_role_show_remove_comment_ack();

  db_role_show_remove_comment_ack(const db_role_show_remove_comment_ack& from);

  inline db_role_show_remove_comment_ack& operator=(const db_role_show_remove_comment_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_show_remove_comment_ack& default_instance();

  void Swap(db_role_show_remove_comment_ack* other);

  // implements Message ----------------------------------------------

  db_role_show_remove_comment_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_show_remove_comment_ack& from);
  void MergeFrom(const db_role_show_remove_comment_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_comment_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 from_id = 2;
  inline bool has_from_id() const;
  inline void clear_from_id();
  static const int kFromIdFieldNumber = 2;
  inline ::google::protobuf::uint64 from_id() const;
  inline void set_from_id(::google::protobuf::uint64 value);

  // optional uint64 to_id = 3;
  inline bool has_to_id() const;
  inline void clear_to_id();
  static const int kToIdFieldNumber = 3;
  inline ::google::protobuf::uint64 to_id() const;
  inline void set_to_id(::google::protobuf::uint64 value);

  // optional uint64 show_role_id = 4;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional uint64 emotion_id = 5;
  inline bool has_emotion_id() const;
  inline void clear_emotion_id();
  static const int kEmotionIdFieldNumber = 5;
  inline ::google::protobuf::uint64 emotion_id() const;
  inline void set_emotion_id(::google::protobuf::uint64 value);

  // optional uint64 comment_id = 6;
  inline bool has_comment_id() const;
  inline void clear_comment_id();
  static const int kCommentIdFieldNumber = 6;
  inline ::google::protobuf::uint64 comment_id() const;
  inline void set_comment_id(::google::protobuf::uint64 value);

  // optional uint32 ret = 7;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 7;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint64 role_id = 8;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 8;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_show_remove_comment_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_from_id();
  inline void clear_has_from_id();
  inline void set_has_to_id();
  inline void clear_has_to_id();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_emotion_id();
  inline void clear_has_emotion_id();
  inline void set_has_comment_id();
  inline void clear_has_comment_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 from_id_;
  ::google::protobuf::uint64 to_id_;
  ::google::protobuf::uint64 show_role_id_;
  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint64 emotion_id_;
  ::google::protobuf::uint64 comment_id_;
  ::google::protobuf::uint64 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_show_remove_comment_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_role_battle_info_req : public ::google::protobuf::Message {
 public:
  db_role_battle_info_req();
  virtual ~db_role_battle_info_req();

  db_role_battle_info_req(const db_role_battle_info_req& from);

  inline db_role_battle_info_req& operator=(const db_role_battle_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_battle_info_req& default_instance();

  void Swap(db_role_battle_info_req* other);

  // implements Message ----------------------------------------------

  db_role_battle_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_battle_info_req& from);
  void MergeFrom(const db_role_battle_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_battle_info_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional int32 battle_id = 4;
  inline bool has_battle_id() const;
  inline void clear_battle_id();
  static const int kBattleIdFieldNumber = 4;
  inline ::google::protobuf::int32 battle_id() const;
  inline void set_battle_id(::google::protobuf::int32 value);

  // optional int32 module_id = 5;
  inline bool has_module_id() const;
  inline void clear_module_id();
  static const int kModuleIdFieldNumber = 5;
  inline ::google::protobuf::int32 module_id() const;
  inline void set_module_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_battle_info_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_battle_id();
  inline void clear_has_battle_id();
  inline void set_has_module_id();
  inline void clear_has_module_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::int32 battle_id_;
  ::google::protobuf::int32 module_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_battle_info_req* default_instance_;
};
// -------------------------------------------------------------------

class db_role_battle_info_ack : public ::google::protobuf::Message {
 public:
  db_role_battle_info_ack();
  virtual ~db_role_battle_info_ack();

  db_role_battle_info_ack(const db_role_battle_info_ack& from);

  inline db_role_battle_info_ack& operator=(const db_role_battle_info_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_battle_info_ack& default_instance();

  void Swap(db_role_battle_info_ack* other);

  // implements Message ----------------------------------------------

  db_role_battle_info_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_battle_info_ack& from);
  void MergeFrom(const db_role_battle_info_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_battle_info_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional uint64 role_id = 4;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.battle_role_info info = 5;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 5;
  inline const ::SProtoSpace::battle_role_info& info() const;
  inline ::SProtoSpace::battle_role_info* mutable_info();
  inline ::SProtoSpace::battle_role_info* release_info();
  inline void set_allocated_info(::SProtoSpace::battle_role_info* info);

  // optional int32 battle_id = 6;
  inline bool has_battle_id() const;
  inline void clear_battle_id();
  static const int kBattleIdFieldNumber = 6;
  inline ::google::protobuf::int32 battle_id() const;
  inline void set_battle_id(::google::protobuf::int32 value);

  // optional int32 module_id = 7;
  inline bool has_module_id() const;
  inline void clear_module_id();
  static const int kModuleIdFieldNumber = 7;
  inline ::google::protobuf::int32 module_id() const;
  inline void set_module_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_role_battle_info_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_battle_id();
  inline void clear_has_battle_id();
  inline void set_has_module_id();
  inline void clear_has_module_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 battle_id_;
  ::SProtoSpace::battle_role_info* info_;
  ::google::protobuf::int32 module_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_role_battle_info_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_account_role_data_req : public ::google::protobuf::Message {
 public:
  db_account_role_data_req();
  virtual ~db_account_role_data_req();

  db_account_role_data_req(const db_account_role_data_req& from);

  inline db_account_role_data_req& operator=(const db_account_role_data_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_account_role_data_req& default_instance();

  void Swap(db_account_role_data_req* other);

  // implements Message ----------------------------------------------

  db_account_role_data_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_account_role_data_req& from);
  void MergeFrom(const db_account_role_data_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_account_role_data_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 area_id = 3;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 3;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_account_role_data_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_area_id();
  inline void clear_has_area_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  int protoid_;
  ::google::protobuf::uint32 area_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_account_role_data_req* default_instance_;
};
// -------------------------------------------------------------------

class db_account_role_data_ack : public ::google::protobuf::Message {
 public:
  db_account_role_data_ack();
  virtual ~db_account_role_data_ack();

  db_account_role_data_ack(const db_account_role_data_ack& from);

  inline db_account_role_data_ack& operator=(const db_account_role_data_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_account_role_data_ack& default_instance();

  void Swap(db_account_role_data_ack* other);

  // implements Message ----------------------------------------------

  db_account_role_data_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_account_role_data_ack& from);
  void MergeFrom(const db_account_role_data_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_account_role_data_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 ret_code = 3;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 ret_code() const;
  inline void set_ret_code(::google::protobuf::uint32 value);

  // optional .SProtoSpace.account_role_data data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::SProtoSpace::account_role_data& data() const;
  inline ::SProtoSpace::account_role_data* mutable_data();
  inline ::SProtoSpace::account_role_data* release_data();
  inline void set_allocated_data(::SProtoSpace::account_role_data* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_account_role_data_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  int protoid_;
  ::google::protobuf::uint32 ret_code_;
  ::SProtoSpace::account_role_data* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_account_role_data_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_create_role_of_game : public ::google::protobuf::Message {
 public:
  db_create_role_of_game();
  virtual ~db_create_role_of_game();

  db_create_role_of_game(const db_create_role_of_game& from);

  inline db_create_role_of_game& operator=(const db_create_role_of_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_create_role_of_game& default_instance();

  void Swap(db_create_role_of_game* other);

  // implements Message ----------------------------------------------

  db_create_role_of_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_create_role_of_game& from);
  void MergeFrom(const db_create_role_of_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_create_role_of_game_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 area_id = 3;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 3;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // optional string role_name = 4;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 4;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional int32 role_sex = 5;
  inline bool has_role_sex() const;
  inline void clear_role_sex();
  static const int kRoleSexFieldNumber = 5;
  inline ::google::protobuf::int32 role_sex() const;
  inline void set_role_sex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_create_role_of_game)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_sex();
  inline void clear_has_role_sex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  int protoid_;
  ::google::protobuf::uint32 area_id_;
  ::std::string* role_name_;
  ::google::protobuf::int32 role_sex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_create_role_of_game* default_instance_;
};
// -------------------------------------------------------------------

class db_create_role_ack : public ::google::protobuf::Message {
 public:
  db_create_role_ack();
  virtual ~db_create_role_ack();

  db_create_role_ack(const db_create_role_ack& from);

  inline db_create_role_ack& operator=(const db_create_role_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_create_role_ack& default_instance();

  void Swap(db_create_role_ack* other);

  // implements Message ----------------------------------------------

  db_create_role_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_create_role_ack& from);
  void MergeFrom(const db_create_role_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_create_role_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional int32 ret_code = 2;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 2;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // optional string account = 3;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 3;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional .SProtoSpace.account_role_data data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::SProtoSpace::account_role_data& data() const;
  inline ::SProtoSpace::account_role_data* mutable_data();
  inline ::SProtoSpace::account_role_data* release_data();
  inline void set_allocated_data(::SProtoSpace::account_role_data* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_create_role_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_code_;
  ::std::string* account_;
  ::SProtoSpace::account_role_data* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_create_role_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_role_info_req : public ::google::protobuf::Message {
 public:
  game_role_info_req();
  virtual ~game_role_info_req();

  game_role_info_req(const game_role_info_req& from);

  inline game_role_info_req& operator=(const game_role_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_role_info_req& default_instance();

  void Swap(game_role_info_req* other);

  // implements Message ----------------------------------------------

  game_role_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_role_info_req& from);
  void MergeFrom(const game_role_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_role_info_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint32 client_id = 2;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  inline ::google::protobuf::uint32 client_id() const;
  inline void set_client_id(::google::protobuf::uint32 value);

  // optional string account = 3;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 3;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 game_id = 4;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 4;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_role_info_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_game_id();
  inline void clear_has_game_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 client_id_;
  ::std::string* account_;
  ::google::protobuf::uint32 game_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static game_role_info_req* default_instance_;
};
// -------------------------------------------------------------------

class game_role_info_ack : public ::google::protobuf::Message {
 public:
  game_role_info_ack();
  virtual ~game_role_info_ack();

  game_role_info_ack(const game_role_info_ack& from);

  inline game_role_info_ack& operator=(const game_role_info_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_role_info_ack& default_instance();

  void Swap(game_role_info_ack* other);

  // implements Message ----------------------------------------------

  game_role_info_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_role_info_ack& from);
  void MergeFrom(const game_role_info_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_role_info_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint32 client_id = 2;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  inline ::google::protobuf::uint32 client_id() const;
  inline void set_client_id(::google::protobuf::uint32 value);

  // optional string account = 3;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 3;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 game_id = 4;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 4;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);

  // optional uint64 role_id = 5;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 6;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 6;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional bool can_ignore = 7;
  inline bool has_can_ignore() const;
  inline void clear_can_ignore();
  static const int kCanIgnoreFieldNumber = 7;
  inline bool can_ignore() const;
  inline void set_can_ignore(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_role_info_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_can_ignore();
  inline void clear_has_can_ignore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 client_id_;
  ::std::string* account_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint32 game_id_;
  bool can_ignore_;
  ::std::string* role_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static game_role_info_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_check_harem_compete_req : public ::google::protobuf::Message {
 public:
  db_check_harem_compete_req();
  virtual ~db_check_harem_compete_req();

  db_check_harem_compete_req(const db_check_harem_compete_req& from);

  inline db_check_harem_compete_req& operator=(const db_check_harem_compete_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_check_harem_compete_req& default_instance();

  void Swap(db_check_harem_compete_req* other);

  // implements Message ----------------------------------------------

  db_check_harem_compete_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_check_harem_compete_req& from);
  void MergeFrom(const db_check_harem_compete_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_harem_compete_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 area_id = 3;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 3;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_check_harem_compete_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_area_id();
  inline void clear_has_area_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  int proto_id_;
  ::google::protobuf::uint32 area_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_check_harem_compete_req* default_instance_;
};
// -------------------------------------------------------------------

class db_check_harem_compete_ack : public ::google::protobuf::Message {
 public:
  db_check_harem_compete_ack();
  virtual ~db_check_harem_compete_ack();

  db_check_harem_compete_ack(const db_check_harem_compete_ack& from);

  inline db_check_harem_compete_ack& operator=(const db_check_harem_compete_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_check_harem_compete_ack& default_instance();

  void Swap(db_check_harem_compete_ack* other);

  // implements Message ----------------------------------------------

  db_check_harem_compete_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_check_harem_compete_ack& from);
  void MergeFrom(const db_check_harem_compete_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_harem_compete_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // repeated .SProtoSpace.harem_compete_event events = 3;
  inline int events_size() const;
  inline void clear_events();
  static const int kEventsFieldNumber = 3;
  inline const ::SProtoSpace::harem_compete_event& events(int index) const;
  inline ::SProtoSpace::harem_compete_event* mutable_events(int index);
  inline ::SProtoSpace::harem_compete_event* add_events();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::harem_compete_event >&
      events() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::harem_compete_event >*
      mutable_events();

  // optional .SProtoSpace.ESLAPPROGRESS progress = 4;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 4;
  inline ::SProtoSpace::ESLAPPROGRESS progress() const;
  inline void set_progress(::SProtoSpace::ESLAPPROGRESS value);

  // optional uint64 end_time = 5;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_check_harem_compete_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_progress();
  inline void clear_has_progress();
  inline void set_has_end_time();
  inline void clear_has_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  int proto_id_;
  int progress_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::harem_compete_event > events_;
  ::google::protobuf::uint64 end_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_check_harem_compete_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_harem_compete_clear_req : public ::google::protobuf::Message {
 public:
  db_harem_compete_clear_req();
  virtual ~db_harem_compete_clear_req();

  db_harem_compete_clear_req(const db_harem_compete_clear_req& from);

  inline db_harem_compete_clear_req& operator=(const db_harem_compete_clear_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_harem_compete_clear_req& default_instance();

  void Swap(db_harem_compete_clear_req* other);

  // implements Message ----------------------------------------------

  db_harem_compete_clear_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_harem_compete_clear_req& from);
  void MergeFrom(const db_harem_compete_clear_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_harem_compete_clear_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_harem_compete_clear_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  int proto_id_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_harem_compete_clear_req* default_instance_;
};
// -------------------------------------------------------------------

class db_slap_emoji_info : public ::google::protobuf::Message {
 public:
  db_slap_emoji_info();
  virtual ~db_slap_emoji_info();

  db_slap_emoji_info(const db_slap_emoji_info& from);

  inline db_slap_emoji_info& operator=(const db_slap_emoji_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_slap_emoji_info& default_instance();

  void Swap(db_slap_emoji_info* other);

  // implements Message ----------------------------------------------

  db_slap_emoji_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_slap_emoji_info& from);
  void MergeFrom(const db_slap_emoji_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.slap_emoji_info infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::SProtoSpace::slap_emoji_info& infos(int index) const;
  inline ::SProtoSpace::slap_emoji_info* mutable_infos(int index);
  inline ::SProtoSpace::slap_emoji_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::slap_emoji_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::slap_emoji_info >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_slap_emoji_info)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::slap_emoji_info > infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_slap_emoji_info* default_instance_;
};
// -------------------------------------------------------------------

class db_get_harem_event_req : public ::google::protobuf::Message {
 public:
  db_get_harem_event_req();
  virtual ~db_get_harem_event_req();

  db_get_harem_event_req(const db_get_harem_event_req& from);

  inline db_get_harem_event_req& operator=(const db_get_harem_event_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_harem_event_req& default_instance();

  void Swap(db_get_harem_event_req* other);

  // implements Message ----------------------------------------------

  db_get_harem_event_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_harem_event_req& from);
  void MergeFrom(const db_get_harem_event_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_harem_event_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint64 event_uuid = 3;
  inline bool has_event_uuid() const;
  inline void clear_event_uuid();
  static const int kEventUuidFieldNumber = 3;
  inline ::google::protobuf::uint64 event_uuid() const;
  inline void set_event_uuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_get_harem_event_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_event_uuid();
  inline void clear_has_event_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint64 event_uuid_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_get_harem_event_req* default_instance_;
};
// -------------------------------------------------------------------

class db_get_harem_event_ack : public ::google::protobuf::Message {
 public:
  db_get_harem_event_ack();
  virtual ~db_get_harem_event_ack();

  db_get_harem_event_ack(const db_get_harem_event_ack& from);

  inline db_get_harem_event_ack& operator=(const db_get_harem_event_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_harem_event_ack& default_instance();

  void Swap(db_get_harem_event_ack* other);

  // implements Message ----------------------------------------------

  db_get_harem_event_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_harem_event_ack& from);
  void MergeFrom(const db_get_harem_event_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_harem_event_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional .SProtoSpace.harem_compete_event event = 3;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 3;
  inline const ::SProtoSpace::harem_compete_event& event() const;
  inline ::SProtoSpace::harem_compete_event* mutable_event();
  inline ::SProtoSpace::harem_compete_event* release_event();
  inline void set_allocated_event(::SProtoSpace::harem_compete_event* event);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_get_harem_event_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_event();
  inline void clear_has_event();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::SProtoSpace::harem_compete_event* event_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_get_harem_event_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_share_officer_upgrade_req : public ::google::protobuf::Message {
 public:
  db_share_officer_upgrade_req();
  virtual ~db_share_officer_upgrade_req();

  db_share_officer_upgrade_req(const db_share_officer_upgrade_req& from);

  inline db_share_officer_upgrade_req& operator=(const db_share_officer_upgrade_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_share_officer_upgrade_req& default_instance();

  void Swap(db_share_officer_upgrade_req* other);

  // implements Message ----------------------------------------------

  db_share_officer_upgrade_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_share_officer_upgrade_req& from);
  void MergeFrom(const db_share_officer_upgrade_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_share_officer_upgrade_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.share_officer_upgrade data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::SProtoSpace::share_officer_upgrade& data() const;
  inline ::SProtoSpace::share_officer_upgrade* mutable_data();
  inline ::SProtoSpace::share_officer_upgrade* release_data();
  inline void set_allocated_data(::SProtoSpace::share_officer_upgrade* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_share_officer_upgrade_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::share_officer_upgrade* data_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_share_officer_upgrade_req* default_instance_;
};
// -------------------------------------------------------------------

class db_share_officer_upgrade_ack : public ::google::protobuf::Message {
 public:
  db_share_officer_upgrade_ack();
  virtual ~db_share_officer_upgrade_ack();

  db_share_officer_upgrade_ack(const db_share_officer_upgrade_ack& from);

  inline db_share_officer_upgrade_ack& operator=(const db_share_officer_upgrade_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_share_officer_upgrade_ack& default_instance();

  void Swap(db_share_officer_upgrade_ack* other);

  // implements Message ----------------------------------------------

  db_share_officer_upgrade_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_share_officer_upgrade_ack& from);
  void MergeFrom(const db_share_officer_upgrade_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_share_officer_upgrade_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 share_id = 2;
  inline bool has_share_id() const;
  inline void clear_share_id();
  static const int kShareIdFieldNumber = 2;
  inline ::google::protobuf::uint64 share_id() const;
  inline void set_share_id(::google::protobuf::uint64 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 world_channel_id = 4;
  inline bool has_world_channel_id() const;
  inline void clear_world_channel_id();
  static const int kWorldChannelIdFieldNumber = 4;
  inline ::google::protobuf::uint32 world_channel_id() const;
  inline void set_world_channel_id(::google::protobuf::uint32 value);

  // optional uint32 grade = 5;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 5;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional int32 ret = 6;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 6;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_share_officer_upgrade_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_share_id();
  inline void clear_has_share_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_world_channel_id();
  inline void clear_has_world_channel_id();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 share_id_;
  int proto_id_;
  ::google::protobuf::uint32 world_channel_id_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_share_officer_upgrade_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_get_share_officer_upgrade_req : public ::google::protobuf::Message {
 public:
  db_get_share_officer_upgrade_req();
  virtual ~db_get_share_officer_upgrade_req();

  db_get_share_officer_upgrade_req(const db_get_share_officer_upgrade_req& from);

  inline db_get_share_officer_upgrade_req& operator=(const db_get_share_officer_upgrade_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_share_officer_upgrade_req& default_instance();

  void Swap(db_get_share_officer_upgrade_req* other);

  // implements Message ----------------------------------------------

  db_get_share_officer_upgrade_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_share_officer_upgrade_req& from);
  void MergeFrom(const db_get_share_officer_upgrade_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_share_officer_upgrade_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 share_id = 2;
  inline bool has_share_id() const;
  inline void clear_share_id();
  static const int kShareIdFieldNumber = 2;
  inline ::google::protobuf::uint64 share_id() const;
  inline void set_share_id(::google::protobuf::uint64 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_get_share_officer_upgrade_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_share_id();
  inline void clear_has_share_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 share_id_;
  ::google::protobuf::uint64 role_id_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_get_share_officer_upgrade_req* default_instance_;
};
// -------------------------------------------------------------------

class db_get_share_officer_upgrade_ack : public ::google::protobuf::Message {
 public:
  db_get_share_officer_upgrade_ack();
  virtual ~db_get_share_officer_upgrade_ack();

  db_get_share_officer_upgrade_ack(const db_get_share_officer_upgrade_ack& from);

  inline db_get_share_officer_upgrade_ack& operator=(const db_get_share_officer_upgrade_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_get_share_officer_upgrade_ack& default_instance();

  void Swap(db_get_share_officer_upgrade_ack* other);

  // implements Message ----------------------------------------------

  db_get_share_officer_upgrade_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_get_share_officer_upgrade_ack& from);
  void MergeFrom(const db_get_share_officer_upgrade_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_share_officer_upgrade_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.share_officer_upgrade data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::SProtoSpace::share_officer_upgrade& data() const;
  inline ::SProtoSpace::share_officer_upgrade* mutable_data();
  inline ::SProtoSpace::share_officer_upgrade* release_data();
  inline void set_allocated_data(::SProtoSpace::share_officer_upgrade* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_get_share_officer_upgrade_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint64 role_id_;
  ::SProtoSpace::share_officer_upgrade* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_get_share_officer_upgrade_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_add_role_popularity : public ::google::protobuf::Message {
 public:
  db_add_role_popularity();
  virtual ~db_add_role_popularity();

  db_add_role_popularity(const db_add_role_popularity& from);

  inline db_add_role_popularity& operator=(const db_add_role_popularity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_add_role_popularity& default_instance();

  void Swap(db_add_role_popularity* other);

  // implements Message ----------------------------------------------

  db_add_role_popularity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_add_role_popularity& from);
  void MergeFrom(const db_add_role_popularity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_add_role_popularity_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 add_num = 3;
  inline bool has_add_num() const;
  inline void clear_add_num();
  static const int kAddNumFieldNumber = 3;
  inline ::google::protobuf::uint32 add_num() const;
  inline void set_add_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_add_role_popularity)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_add_num();
  inline void clear_has_add_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int proto_id_;
  ::google::protobuf::uint32 add_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_add_role_popularity* default_instance_;
};
// -------------------------------------------------------------------

class db_kick_role_req : public ::google::protobuf::Message {
 public:
  db_kick_role_req();
  virtual ~db_kick_role_req();

  db_kick_role_req(const db_kick_role_req& from);

  inline db_kick_role_req& operator=(const db_kick_role_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kick_role_req& default_instance();

  void Swap(db_kick_role_req* other);

  // implements Message ----------------------------------------------

  db_kick_role_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kick_role_req& from);
  void MergeFrom(const db_kick_role_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_kick_role_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint32 reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint32 scene_id = 4;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 4;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // optional uint32 scene_type = 5;
  inline bool has_scene_type() const;
  inline void clear_scene_type();
  static const int kSceneTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 scene_type() const;
  inline void set_scene_type(::google::protobuf::uint32 value);

  // optional uint64 game_id = 6;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 6;
  inline ::google::protobuf::uint64 game_id() const;
  inline void set_game_id(::google::protobuf::uint64 value);

  // optional uint64 gt_id = 7;
  inline bool has_gt_id() const;
  inline void clear_gt_id();
  static const int kGtIdFieldNumber = 7;
  inline ::google::protobuf::uint64 gt_id() const;
  inline void set_gt_id(::google::protobuf::uint64 value);

  // optional uint64 role_id = 8;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 8;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_kick_role_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_type();
  inline void clear_has_scene_type();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_gt_id();
  inline void clear_has_gt_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 reason_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 scene_id_;
  ::google::protobuf::uint64 game_id_;
  ::google::protobuf::uint64 gt_id_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint32 scene_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_kick_role_req* default_instance_;
};
// -------------------------------------------------------------------

class db_kick_role_ack : public ::google::protobuf::Message {
 public:
  db_kick_role_ack();
  virtual ~db_kick_role_ack();

  db_kick_role_ack(const db_kick_role_ack& from);

  inline db_kick_role_ack& operator=(const db_kick_role_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_kick_role_ack& default_instance();

  void Swap(db_kick_role_ack* other);

  // implements Message ----------------------------------------------

  db_kick_role_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_kick_role_ack& from);
  void MergeFrom(const db_kick_role_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_kick_role_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint32 reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint32 scene_id = 4;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 4;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // optional uint32 scene_type = 5;
  inline bool has_scene_type() const;
  inline void clear_scene_type();
  static const int kSceneTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 scene_type() const;
  inline void set_scene_type(::google::protobuf::uint32 value);

  // optional uint64 game_id = 6;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 6;
  inline ::google::protobuf::uint64 game_id() const;
  inline void set_game_id(::google::protobuf::uint64 value);

  // optional uint64 gt_id = 7;
  inline bool has_gt_id() const;
  inline void clear_gt_id();
  static const int kGtIdFieldNumber = 7;
  inline ::google::protobuf::uint64 gt_id() const;
  inline void set_gt_id(::google::protobuf::uint64 value);

  // optional uint64 role_id = 8;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 8;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_kick_role_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_type();
  inline void clear_has_scene_type();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_gt_id();
  inline void clear_has_gt_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 reason_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 scene_id_;
  ::google::protobuf::uint64 game_id_;
  ::google::protobuf::uint64 gt_id_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint32 scene_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_kick_role_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_load_offical_data_req : public ::google::protobuf::Message {
 public:
  db_load_offical_data_req();
  virtual ~db_load_offical_data_req();

  db_load_offical_data_req(const db_load_offical_data_req& from);

  inline db_load_offical_data_req& operator=(const db_load_offical_data_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_load_offical_data_req& default_instance();

  void Swap(db_load_offical_data_req* other);

  // implements Message ----------------------------------------------

  db_load_offical_data_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_load_offical_data_req& from);
  void MergeFrom(const db_load_offical_data_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_load_offical_data_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_load_offical_data_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_load_offical_data_req* default_instance_;
};
// -------------------------------------------------------------------

class db_load_offical_data_ack : public ::google::protobuf::Message {
 public:
  db_load_offical_data_ack();
  virtual ~db_load_offical_data_ack();

  db_load_offical_data_ack(const db_load_offical_data_ack& from);

  inline db_load_offical_data_ack& operator=(const db_load_offical_data_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_load_offical_data_ack& default_instance();

  void Swap(db_load_offical_data_ack* other);

  // implements Message ----------------------------------------------

  db_load_offical_data_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_load_offical_data_ack& from);
  void MergeFrom(const db_load_offical_data_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_load_offical_data_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.db_offical_data data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::SProtoSpace::db_offical_data& data() const;
  inline ::SProtoSpace::db_offical_data* mutable_data();
  inline ::SProtoSpace::db_offical_data* release_data();
  inline void set_allocated_data(::SProtoSpace::db_offical_data* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_load_offical_data_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint64 role_id_;
  ::SProtoSpace::db_offical_data* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_load_offical_data_ack* default_instance_;
};
// -------------------------------------------------------------------

class db_save_offical_data_req : public ::google::protobuf::Message {
 public:
  db_save_offical_data_req();
  virtual ~db_save_offical_data_req();

  db_save_offical_data_req(const db_save_offical_data_req& from);

  inline db_save_offical_data_req& operator=(const db_save_offical_data_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_save_offical_data_req& default_instance();

  void Swap(db_save_offical_data_req* other);

  // implements Message ----------------------------------------------

  db_save_offical_data_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_save_offical_data_req& from);
  void MergeFrom(const db_save_offical_data_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_save_offical_data_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.db_offical_data data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::SProtoSpace::db_offical_data& data() const;
  inline ::SProtoSpace::db_offical_data* mutable_data();
  inline ::SProtoSpace::db_offical_data* release_data();
  inline void set_allocated_data(::SProtoSpace::db_offical_data* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_save_offical_data_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::SProtoSpace::db_offical_data* data_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fdb_2eproto();
  friend void protobuf_AssignDesc_ss_5fdb_2eproto();
  friend void protobuf_ShutdownFile_ss_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_save_offical_data_req* default_instance_;
};
// ===================================================================


// ===================================================================

// DataSaveInfo

// optional .SProtoSpace.ERoleDataType data_type = 1;
inline bool DataSaveInfo::has_data_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataSaveInfo::set_has_data_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataSaveInfo::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataSaveInfo::clear_data_type() {
  data_type_ = 0;
  clear_has_data_type();
}
inline ::SProtoSpace::ERoleDataType DataSaveInfo::data_type() const {
  return static_cast< ::SProtoSpace::ERoleDataType >(data_type_);
}
inline void DataSaveInfo::set_data_type(::SProtoSpace::ERoleDataType value) {
  assert(::SProtoSpace::ERoleDataType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
}

// optional .SProtoSpace.ESQLMode sql_mode = 2;
inline bool DataSaveInfo::has_sql_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataSaveInfo::set_has_sql_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataSaveInfo::clear_has_sql_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataSaveInfo::clear_sql_mode() {
  sql_mode_ = 1;
  clear_has_sql_mode();
}
inline ::SProtoSpace::ESQLMode DataSaveInfo::sql_mode() const {
  return static_cast< ::SProtoSpace::ESQLMode >(sql_mode_);
}
inline void DataSaveInfo::set_sql_mode(::SProtoSpace::ESQLMode value) {
  assert(::SProtoSpace::ESQLMode_IsValid(value));
  set_has_sql_mode();
  sql_mode_ = value;
}

// optional uint64 key_id = 3;
inline bool DataSaveInfo::has_key_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataSaveInfo::set_has_key_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataSaveInfo::clear_has_key_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataSaveInfo::clear_key_id() {
  key_id_ = GOOGLE_ULONGLONG(0);
  clear_has_key_id();
}
inline ::google::protobuf::uint64 DataSaveInfo::key_id() const {
  return key_id_;
}
inline void DataSaveInfo::set_key_id(::google::protobuf::uint64 value) {
  set_has_key_id();
  key_id_ = value;
}

// -------------------------------------------------------------------

// role_show_info

// optional uint32 db_mode = 1;
inline bool role_show_info::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_info::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_info::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_info::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 role_show_info::db_mode() const {
  return db_mode_;
}
inline void role_show_info::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool role_show_info::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_info::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_info::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_info::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 role_show_info::uuid() const {
  return uuid_;
}
inline void role_show_info::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// repeated uint64 liked_list = 3;
inline int role_show_info::liked_list_size() const {
  return liked_list_.size();
}
inline void role_show_info::clear_liked_list() {
  liked_list_.Clear();
}
inline ::google::protobuf::uint64 role_show_info::liked_list(int index) const {
  return liked_list_.Get(index);
}
inline void role_show_info::set_liked_list(int index, ::google::protobuf::uint64 value) {
  liked_list_.Set(index, value);
}
inline void role_show_info::add_liked_list(::google::protobuf::uint64 value) {
  liked_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
role_show_info::liked_list() const {
  return liked_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
role_show_info::mutable_liked_list() {
  return &liked_list_;
}

// optional uint32 like = 4;
inline bool role_show_info::has_like() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_show_info::set_has_like() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_show_info::clear_has_like() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_show_info::clear_like() {
  like_ = 0u;
  clear_has_like();
}
inline ::google::protobuf::uint32 role_show_info::like() const {
  return like_;
}
inline void role_show_info::set_like(::google::protobuf::uint32 value) {
  set_has_like();
  like_ = value;
}

// optional string signature = 5;
inline bool role_show_info::has_signature() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_show_info::set_has_signature() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_show_info::clear_has_signature() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_show_info::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& role_show_info::signature() const {
  return *signature_;
}
inline void role_show_info::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void role_show_info::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void role_show_info::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_show_info::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* role_show_info::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_show_info::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .SProtoSpace.lsg_position_info position = 6;
inline bool role_show_info::has_position() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_show_info::set_has_position() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_show_info::clear_has_position() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_show_info::clear_position() {
  if (position_ != NULL) position_->::SProtoSpace::lsg_position_info::Clear();
  clear_has_position();
}
inline const ::SProtoSpace::lsg_position_info& role_show_info::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::SProtoSpace::lsg_position_info* role_show_info::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::SProtoSpace::lsg_position_info;
  return position_;
}
inline ::SProtoSpace::lsg_position_info* role_show_info::release_position() {
  clear_has_position();
  ::SProtoSpace::lsg_position_info* temp = position_;
  position_ = NULL;
  return temp;
}
inline void role_show_info::set_allocated_position(::SProtoSpace::lsg_position_info* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// repeated uint64 show_hero_list = 7;
inline int role_show_info::show_hero_list_size() const {
  return show_hero_list_.size();
}
inline void role_show_info::clear_show_hero_list() {
  show_hero_list_.Clear();
}
inline ::google::protobuf::uint64 role_show_info::show_hero_list(int index) const {
  return show_hero_list_.Get(index);
}
inline void role_show_info::set_show_hero_list(int index, ::google::protobuf::uint64 value) {
  show_hero_list_.Set(index, value);
}
inline void role_show_info::add_show_hero_list(::google::protobuf::uint64 value) {
  show_hero_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
role_show_info::show_hero_list() const {
  return show_hero_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
role_show_info::mutable_show_hero_list() {
  return &show_hero_list_;
}

// optional uint32 border = 8 [default = 1];
inline bool role_show_info::has_border() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void role_show_info::set_has_border() {
  _has_bits_[0] |= 0x00000080u;
}
inline void role_show_info::clear_has_border() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void role_show_info::clear_border() {
  border_ = 1u;
  clear_has_border();
}
inline ::google::protobuf::uint32 role_show_info::border() const {
  return border_;
}
inline void role_show_info::set_border(::google::protobuf::uint32 value) {
  set_has_border();
  border_ = value;
}

// optional .SProtoSpace.date_info birthday = 9;
inline bool role_show_info::has_birthday() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void role_show_info::set_has_birthday() {
  _has_bits_[0] |= 0x00000100u;
}
inline void role_show_info::clear_has_birthday() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void role_show_info::clear_birthday() {
  if (birthday_ != NULL) birthday_->::SProtoSpace::date_info::Clear();
  clear_has_birthday();
}
inline const ::SProtoSpace::date_info& role_show_info::birthday() const {
  return birthday_ != NULL ? *birthday_ : *default_instance_->birthday_;
}
inline ::SProtoSpace::date_info* role_show_info::mutable_birthday() {
  set_has_birthday();
  if (birthday_ == NULL) birthday_ = new ::SProtoSpace::date_info;
  return birthday_;
}
inline ::SProtoSpace::date_info* role_show_info::release_birthday() {
  clear_has_birthday();
  ::SProtoSpace::date_info* temp = birthday_;
  birthday_ = NULL;
  return temp;
}
inline void role_show_info::set_allocated_birthday(::SProtoSpace::date_info* birthday) {
  delete birthday_;
  birthday_ = birthday;
  if (birthday) {
    set_has_birthday();
  } else {
    clear_has_birthday();
  }
}

// optional uint32 star_sign = 10 [default = 1];
inline bool role_show_info::has_star_sign() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void role_show_info::set_has_star_sign() {
  _has_bits_[0] |= 0x00000200u;
}
inline void role_show_info::clear_has_star_sign() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void role_show_info::clear_star_sign() {
  star_sign_ = 1u;
  clear_has_star_sign();
}
inline ::google::protobuf::uint32 role_show_info::star_sign() const {
  return star_sign_;
}
inline void role_show_info::set_star_sign(::google::protobuf::uint32 value) {
  set_has_star_sign();
  star_sign_ = value;
}

// optional uint32 popularity = 11 [default = 0];
inline bool role_show_info::has_popularity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void role_show_info::set_has_popularity() {
  _has_bits_[0] |= 0x00000400u;
}
inline void role_show_info::clear_has_popularity() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void role_show_info::clear_popularity() {
  popularity_ = 0u;
  clear_has_popularity();
}
inline ::google::protobuf::uint32 role_show_info::popularity() const {
  return popularity_;
}
inline void role_show_info::set_popularity(::google::protobuf::uint32 value) {
  set_has_popularity();
  popularity_ = value;
}

// optional uint32 charm = 12 [default = 0];
inline bool role_show_info::has_charm() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void role_show_info::set_has_charm() {
  _has_bits_[0] |= 0x00000800u;
}
inline void role_show_info::clear_has_charm() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void role_show_info::clear_charm() {
  charm_ = 0u;
  clear_has_charm();
}
inline ::google::protobuf::uint32 role_show_info::charm() const {
  return charm_;
}
inline void role_show_info::set_charm(::google::protobuf::uint32 value) {
  set_has_charm();
  charm_ = value;
}

// repeated uint32 labels = 13;
inline int role_show_info::labels_size() const {
  return labels_.size();
}
inline void role_show_info::clear_labels() {
  labels_.Clear();
}
inline ::google::protobuf::uint32 role_show_info::labels(int index) const {
  return labels_.Get(index);
}
inline void role_show_info::set_labels(int index, ::google::protobuf::uint32 value) {
  labels_.Set(index, value);
}
inline void role_show_info::add_labels(::google::protobuf::uint32 value) {
  labels_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
role_show_info::labels() const {
  return labels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
role_show_info::mutable_labels() {
  return &labels_;
}

// -------------------------------------------------------------------

// db_offical_data

// optional uint32 cur_grade = 1;
inline bool db_offical_data::has_cur_grade() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_offical_data::set_has_cur_grade() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_offical_data::clear_has_cur_grade() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_offical_data::clear_cur_grade() {
  cur_grade_ = 0u;
  clear_has_cur_grade();
}
inline ::google::protobuf::uint32 db_offical_data::cur_grade() const {
  return cur_grade_;
}
inline void db_offical_data::set_cur_grade(::google::protobuf::uint32 value) {
  set_has_cur_grade();
  cur_grade_ = value;
}

// optional uint32 max_grade = 2;
inline bool db_offical_data::has_max_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_offical_data::set_has_max_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_offical_data::clear_has_max_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_offical_data::clear_max_grade() {
  max_grade_ = 0u;
  clear_has_max_grade();
}
inline ::google::protobuf::uint32 db_offical_data::max_grade() const {
  return max_grade_;
}
inline void db_offical_data::set_max_grade(::google::protobuf::uint32 value) {
  set_has_max_grade();
  max_grade_ = value;
}

// optional uint32 apply_grade = 3;
inline bool db_offical_data::has_apply_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_offical_data::set_has_apply_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_offical_data::clear_has_apply_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_offical_data::clear_apply_grade() {
  apply_grade_ = 0u;
  clear_has_apply_grade();
}
inline ::google::protobuf::uint32 db_offical_data::apply_grade() const {
  return apply_grade_;
}
inline void db_offical_data::set_apply_grade(::google::protobuf::uint32 value) {
  set_has_apply_grade();
  apply_grade_ = value;
}

// optional uint32 apply_time = 4;
inline bool db_offical_data::has_apply_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_offical_data::set_has_apply_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_offical_data::clear_has_apply_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_offical_data::clear_apply_time() {
  apply_time_ = 0u;
  clear_has_apply_time();
}
inline ::google::protobuf::uint32 db_offical_data::apply_time() const {
  return apply_time_;
}
inline void db_offical_data::set_apply_time(::google::protobuf::uint32 value) {
  set_has_apply_time();
  apply_time_ = value;
}

// optional uint32 last_grade = 5;
inline bool db_offical_data::has_last_grade() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_offical_data::set_has_last_grade() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_offical_data::clear_has_last_grade() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_offical_data::clear_last_grade() {
  last_grade_ = 0u;
  clear_has_last_grade();
}
inline ::google::protobuf::uint32 db_offical_data::last_grade() const {
  return last_grade_;
}
inline void db_offical_data::set_last_grade(::google::protobuf::uint32 value) {
  set_has_last_grade();
  last_grade_ = value;
}

// -------------------------------------------------------------------

// friend_intimacy

// optional uint64 role_id = 1;
inline bool friend_intimacy::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_intimacy::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_intimacy::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_intimacy::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 friend_intimacy::role_id() const {
  return role_id_;
}
inline void friend_intimacy::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 intimacy_value = 2;
inline bool friend_intimacy::has_intimacy_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_intimacy::set_has_intimacy_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_intimacy::clear_has_intimacy_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_intimacy::clear_intimacy_value() {
  intimacy_value_ = 0u;
  clear_has_intimacy_value();
}
inline ::google::protobuf::uint32 friend_intimacy::intimacy_value() const {
  return intimacy_value_;
}
inline void friend_intimacy::set_intimacy_value(::google::protobuf::uint32 value) {
  set_has_intimacy_value();
  intimacy_value_ = value;
}

// -------------------------------------------------------------------

// couple_love

// optional uint64 role_id = 1;
inline bool couple_love::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void couple_love::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void couple_love::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void couple_love::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 couple_love::role_id() const {
  return role_id_;
}
inline void couple_love::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 love_value = 2;
inline bool couple_love::has_love_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void couple_love::set_has_love_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void couple_love::clear_has_love_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void couple_love::clear_love_value() {
  love_value_ = 0u;
  clear_has_love_value();
}
inline ::google::protobuf::uint32 couple_love::love_value() const {
  return love_value_;
}
inline void couple_love::set_love_value(::google::protobuf::uint32 value) {
  set_has_love_value();
  love_value_ = value;
}

// -------------------------------------------------------------------

// role_base_data

// optional uint64 role_id = 1;
inline bool role_base_data::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_base_data::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_base_data::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_base_data::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 role_base_data::role_id() const {
  return role_id_;
}
inline void role_base_data::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 2;
inline bool role_base_data::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_base_data::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_base_data::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_base_data::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& role_base_data::role_name() const {
  return *role_name_;
}
inline void role_base_data::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void role_base_data::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void role_base_data::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_base_data::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* role_base_data::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_base_data::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string account_id = 3;
inline bool role_base_data::has_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_base_data::set_has_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_base_data::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_base_data::clear_account_id() {
  if (account_id_ != &::google::protobuf::internal::kEmptyString) {
    account_id_->clear();
  }
  clear_has_account_id();
}
inline const ::std::string& role_base_data::account_id() const {
  return *account_id_;
}
inline void role_base_data::set_account_id(const ::std::string& value) {
  set_has_account_id();
  if (account_id_ == &::google::protobuf::internal::kEmptyString) {
    account_id_ = new ::std::string;
  }
  account_id_->assign(value);
}
inline void role_base_data::set_account_id(const char* value) {
  set_has_account_id();
  if (account_id_ == &::google::protobuf::internal::kEmptyString) {
    account_id_ = new ::std::string;
  }
  account_id_->assign(value);
}
inline void role_base_data::set_account_id(const char* value, size_t size) {
  set_has_account_id();
  if (account_id_ == &::google::protobuf::internal::kEmptyString) {
    account_id_ = new ::std::string;
  }
  account_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_base_data::mutable_account_id() {
  set_has_account_id();
  if (account_id_ == &::google::protobuf::internal::kEmptyString) {
    account_id_ = new ::std::string;
  }
  return account_id_;
}
inline ::std::string* role_base_data::release_account_id() {
  clear_has_account_id();
  if (account_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_id_;
    account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_base_data::set_allocated_account_id(::std::string* account_id) {
  if (account_id_ != &::google::protobuf::internal::kEmptyString) {
    delete account_id_;
  }
  if (account_id) {
    set_has_account_id();
    account_id_ = account_id;
  } else {
    clear_has_account_id();
    account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 area_id = 4;
inline bool role_base_data::has_area_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_base_data::set_has_area_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_base_data::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_base_data::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 role_base_data::area_id() const {
  return area_id_;
}
inline void role_base_data::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// optional uint32 sex = 5;
inline bool role_base_data::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_base_data::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_base_data::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_base_data::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 role_base_data::sex() const {
  return sex_;
}
inline void role_base_data::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint64 offline_time = 6;
inline bool role_base_data::has_offline_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_base_data::set_has_offline_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_base_data::clear_has_offline_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_base_data::clear_offline_time() {
  offline_time_ = GOOGLE_ULONGLONG(0);
  clear_has_offline_time();
}
inline ::google::protobuf::uint64 role_base_data::offline_time() const {
  return offline_time_;
}
inline void role_base_data::set_offline_time(::google::protobuf::uint64 value) {
  set_has_offline_time();
  offline_time_ = value;
}

// optional uint64 db_svr_id = 7;
inline bool role_base_data::has_db_svr_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void role_base_data::set_has_db_svr_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void role_base_data::clear_has_db_svr_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void role_base_data::clear_db_svr_id() {
  db_svr_id_ = GOOGLE_ULONGLONG(0);
  clear_has_db_svr_id();
}
inline ::google::protobuf::uint64 role_base_data::db_svr_id() const {
  return db_svr_id_;
}
inline void role_base_data::set_db_svr_id(::google::protobuf::uint64 value) {
  set_has_db_svr_id();
  db_svr_id_ = value;
}

// optional int32 lv = 8;
inline bool role_base_data::has_lv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void role_base_data::set_has_lv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void role_base_data::clear_has_lv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void role_base_data::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 role_base_data::lv() const {
  return lv_;
}
inline void role_base_data::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 exp = 9;
inline bool role_base_data::has_exp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void role_base_data::set_has_exp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void role_base_data::clear_has_exp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void role_base_data::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 role_base_data::exp() const {
  return exp_;
}
inline void role_base_data::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 buy_power_times = 11;
inline bool role_base_data::has_buy_power_times() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void role_base_data::set_has_buy_power_times() {
  _has_bits_[0] |= 0x00000200u;
}
inline void role_base_data::clear_has_buy_power_times() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void role_base_data::clear_buy_power_times() {
  buy_power_times_ = 0;
  clear_has_buy_power_times();
}
inline ::google::protobuf::int32 role_base_data::buy_power_times() const {
  return buy_power_times_;
}
inline void role_base_data::set_buy_power_times(::google::protobuf::int32 value) {
  set_has_buy_power_times();
  buy_power_times_ = value;
}

// optional int32 gold = 12;
inline bool role_base_data::has_gold() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void role_base_data::set_has_gold() {
  _has_bits_[0] |= 0x00000400u;
}
inline void role_base_data::clear_has_gold() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void role_base_data::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 role_base_data::gold() const {
  return gold_;
}
inline void role_base_data::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 jade = 13;
inline bool role_base_data::has_jade() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void role_base_data::set_has_jade() {
  _has_bits_[0] |= 0x00000800u;
}
inline void role_base_data::clear_has_jade() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void role_base_data::clear_jade() {
  jade_ = 0;
  clear_has_jade();
}
inline ::google::protobuf::int32 role_base_data::jade() const {
  return jade_;
}
inline void role_base_data::set_jade(::google::protobuf::int32 value) {
  set_has_jade();
  jade_ = value;
}

// optional int32 power = 14;
inline bool role_base_data::has_power() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void role_base_data::set_has_power() {
  _has_bits_[0] |= 0x00001000u;
}
inline void role_base_data::clear_has_power() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void role_base_data::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 role_base_data::power() const {
  return power_;
}
inline void role_base_data::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional int32 last_disc_id = 15;
inline bool role_base_data::has_last_disc_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void role_base_data::set_has_last_disc_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void role_base_data::clear_has_last_disc_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void role_base_data::clear_last_disc_id() {
  last_disc_id_ = 0;
  clear_has_last_disc_id();
}
inline ::google::protobuf::int32 role_base_data::last_disc_id() const {
  return last_disc_id_;
}
inline void role_base_data::set_last_disc_id(::google::protobuf::int32 value) {
  set_has_last_disc_id();
  last_disc_id_ = value;
}

// optional int32 task_activity = 16;
inline bool role_base_data::has_task_activity() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void role_base_data::set_has_task_activity() {
  _has_bits_[0] |= 0x00004000u;
}
inline void role_base_data::clear_has_task_activity() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void role_base_data::clear_task_activity() {
  task_activity_ = 0;
  clear_has_task_activity();
}
inline ::google::protobuf::int32 role_base_data::task_activity() const {
  return task_activity_;
}
inline void role_base_data::set_task_activity(::google::protobuf::int32 value) {
  set_has_task_activity();
  task_activity_ = value;
}

// repeated .SProtoSpace.game_system g_system = 17;
inline int role_base_data::g_system_size() const {
  return g_system_.size();
}
inline void role_base_data::clear_g_system() {
  g_system_.Clear();
}
inline const ::SProtoSpace::game_system& role_base_data::g_system(int index) const {
  return g_system_.Get(index);
}
inline ::SProtoSpace::game_system* role_base_data::mutable_g_system(int index) {
  return g_system_.Mutable(index);
}
inline ::SProtoSpace::game_system* role_base_data::add_g_system() {
  return g_system_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_system >&
role_base_data::g_system() const {
  return g_system_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::game_system >*
role_base_data::mutable_g_system() {
  return &g_system_;
}

// optional uint64 login_time = 18;
inline bool role_base_data::has_login_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void role_base_data::set_has_login_time() {
  _has_bits_[0] |= 0x00010000u;
}
inline void role_base_data::clear_has_login_time() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void role_base_data::clear_login_time() {
  login_time_ = GOOGLE_ULONGLONG(0);
  clear_has_login_time();
}
inline ::google::protobuf::uint64 role_base_data::login_time() const {
  return login_time_;
}
inline void role_base_data::set_login_time(::google::protobuf::uint64 value) {
  set_has_login_time();
  login_time_ = value;
}

// optional int32 tender = 19;
inline bool role_base_data::has_tender() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void role_base_data::set_has_tender() {
  _has_bits_[0] |= 0x00020000u;
}
inline void role_base_data::clear_has_tender() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void role_base_data::clear_tender() {
  tender_ = 0;
  clear_has_tender();
}
inline ::google::protobuf::int32 role_base_data::tender() const {
  return tender_;
}
inline void role_base_data::set_tender(::google::protobuf::int32 value) {
  set_has_tender();
  tender_ = value;
}

// optional int32 treason = 20;
inline bool role_base_data::has_treason() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void role_base_data::set_has_treason() {
  _has_bits_[0] |= 0x00040000u;
}
inline void role_base_data::clear_has_treason() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void role_base_data::clear_treason() {
  treason_ = 0;
  clear_has_treason();
}
inline ::google::protobuf::int32 role_base_data::treason() const {
  return treason_;
}
inline void role_base_data::set_treason(::google::protobuf::int32 value) {
  set_has_treason();
  treason_ = value;
}

// optional int32 wise = 21;
inline bool role_base_data::has_wise() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void role_base_data::set_has_wise() {
  _has_bits_[0] |= 0x00080000u;
}
inline void role_base_data::clear_has_wise() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void role_base_data::clear_wise() {
  wise_ = 0;
  clear_has_wise();
}
inline ::google::protobuf::int32 role_base_data::wise() const {
  return wise_;
}
inline void role_base_data::set_wise(::google::protobuf::int32 value) {
  set_has_wise();
  wise_ = value;
}

// optional int32 adorkable = 22;
inline bool role_base_data::has_adorkable() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void role_base_data::set_has_adorkable() {
  _has_bits_[0] |= 0x00100000u;
}
inline void role_base_data::clear_has_adorkable() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void role_base_data::clear_adorkable() {
  adorkable_ = 0;
  clear_has_adorkable();
}
inline ::google::protobuf::int32 role_base_data::adorkable() const {
  return adorkable_;
}
inline void role_base_data::set_adorkable(::google::protobuf::int32 value) {
  set_has_adorkable();
  adorkable_ = value;
}

// optional int32 good = 23;
inline bool role_base_data::has_good() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void role_base_data::set_has_good() {
  _has_bits_[0] |= 0x00200000u;
}
inline void role_base_data::clear_has_good() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void role_base_data::clear_good() {
  good_ = 0;
  clear_has_good();
}
inline ::google::protobuf::int32 role_base_data::good() const {
  return good_;
}
inline void role_base_data::set_good(::google::protobuf::int32 value) {
  set_has_good();
  good_ = value;
}

// optional int32 scheming = 24;
inline bool role_base_data::has_scheming() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void role_base_data::set_has_scheming() {
  _has_bits_[0] |= 0x00400000u;
}
inline void role_base_data::clear_has_scheming() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void role_base_data::clear_scheming() {
  scheming_ = 0;
  clear_has_scheming();
}
inline ::google::protobuf::int32 role_base_data::scheming() const {
  return scheming_;
}
inline void role_base_data::set_scheming(::google::protobuf::int32 value) {
  set_has_scheming();
  scheming_ = value;
}

// optional int32 merit = 25;
inline bool role_base_data::has_merit() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void role_base_data::set_has_merit() {
  _has_bits_[0] |= 0x00800000u;
}
inline void role_base_data::clear_has_merit() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void role_base_data::clear_merit() {
  merit_ = 0;
  clear_has_merit();
}
inline ::google::protobuf::int32 role_base_data::merit() const {
  return merit_;
}
inline void role_base_data::set_merit(::google::protobuf::int32 value) {
  set_has_merit();
  merit_ = value;
}

// optional bool offical_salary = 26;
inline bool role_base_data::has_offical_salary() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void role_base_data::set_has_offical_salary() {
  _has_bits_[0] |= 0x01000000u;
}
inline void role_base_data::clear_has_offical_salary() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void role_base_data::clear_offical_salary() {
  offical_salary_ = false;
  clear_has_offical_salary();
}
inline bool role_base_data::offical_salary() const {
  return offical_salary_;
}
inline void role_base_data::set_offical_salary(bool value) {
  set_has_offical_salary();
  offical_salary_ = value;
}

// optional int32 offical_salary_tm = 27;
inline bool role_base_data::has_offical_salary_tm() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void role_base_data::set_has_offical_salary_tm() {
  _has_bits_[0] |= 0x02000000u;
}
inline void role_base_data::clear_has_offical_salary_tm() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void role_base_data::clear_offical_salary_tm() {
  offical_salary_tm_ = 0;
  clear_has_offical_salary_tm();
}
inline ::google::protobuf::int32 role_base_data::offical_salary_tm() const {
  return offical_salary_tm_;
}
inline void role_base_data::set_offical_salary_tm(::google::protobuf::int32 value) {
  set_has_offical_salary_tm();
  offical_salary_tm_ = value;
}

// optional int32 offical_challenge_num = 28;
inline bool role_base_data::has_offical_challenge_num() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void role_base_data::set_has_offical_challenge_num() {
  _has_bits_[0] |= 0x04000000u;
}
inline void role_base_data::clear_has_offical_challenge_num() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void role_base_data::clear_offical_challenge_num() {
  offical_challenge_num_ = 0;
  clear_has_offical_challenge_num();
}
inline ::google::protobuf::int32 role_base_data::offical_challenge_num() const {
  return offical_challenge_num_;
}
inline void role_base_data::set_offical_challenge_num(::google::protobuf::int32 value) {
  set_has_offical_challenge_num();
  offical_challenge_num_ = value;
}

// optional int32 offical_challenge_buy = 29;
inline bool role_base_data::has_offical_challenge_buy() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void role_base_data::set_has_offical_challenge_buy() {
  _has_bits_[0] |= 0x08000000u;
}
inline void role_base_data::clear_has_offical_challenge_buy() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void role_base_data::clear_offical_challenge_buy() {
  offical_challenge_buy_ = 0;
  clear_has_offical_challenge_buy();
}
inline ::google::protobuf::int32 role_base_data::offical_challenge_buy() const {
  return offical_challenge_buy_;
}
inline void role_base_data::set_offical_challenge_buy(::google::protobuf::int32 value) {
  set_has_offical_challenge_buy();
  offical_challenge_buy_ = value;
}

// optional int32 offical_share_num = 30;
inline bool role_base_data::has_offical_share_num() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void role_base_data::set_has_offical_share_num() {
  _has_bits_[0] |= 0x10000000u;
}
inline void role_base_data::clear_has_offical_share_num() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void role_base_data::clear_offical_share_num() {
  offical_share_num_ = 0;
  clear_has_offical_share_num();
}
inline ::google::protobuf::int32 role_base_data::offical_share_num() const {
  return offical_share_num_;
}
inline void role_base_data::set_offical_share_num(::google::protobuf::int32 value) {
  set_has_offical_share_num();
  offical_share_num_ = value;
}

// optional uint32 bag_capacity = 31;
inline bool role_base_data::has_bag_capacity() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void role_base_data::set_has_bag_capacity() {
  _has_bits_[0] |= 0x20000000u;
}
inline void role_base_data::clear_has_bag_capacity() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void role_base_data::clear_bag_capacity() {
  bag_capacity_ = 0u;
  clear_has_bag_capacity();
}
inline ::google::protobuf::uint32 role_base_data::bag_capacity() const {
  return bag_capacity_;
}
inline void role_base_data::set_bag_capacity(::google::protobuf::uint32 value) {
  set_has_bag_capacity();
  bag_capacity_ = value;
}

// optional uint64 mail_global_last_checktime = 32;
inline bool role_base_data::has_mail_global_last_checktime() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void role_base_data::set_has_mail_global_last_checktime() {
  _has_bits_[0] |= 0x40000000u;
}
inline void role_base_data::clear_has_mail_global_last_checktime() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void role_base_data::clear_mail_global_last_checktime() {
  mail_global_last_checktime_ = GOOGLE_ULONGLONG(0);
  clear_has_mail_global_last_checktime();
}
inline ::google::protobuf::uint64 role_base_data::mail_global_last_checktime() const {
  return mail_global_last_checktime_;
}
inline void role_base_data::set_mail_global_last_checktime(::google::protobuf::uint64 value) {
  set_has_mail_global_last_checktime();
  mail_global_last_checktime_ = value;
}

// optional uint32 mail_send_private_limit_day = 33;
inline bool role_base_data::has_mail_send_private_limit_day() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void role_base_data::set_has_mail_send_private_limit_day() {
  _has_bits_[0] |= 0x80000000u;
}
inline void role_base_data::clear_has_mail_send_private_limit_day() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void role_base_data::clear_mail_send_private_limit_day() {
  mail_send_private_limit_day_ = 0u;
  clear_has_mail_send_private_limit_day();
}
inline ::google::protobuf::uint32 role_base_data::mail_send_private_limit_day() const {
  return mail_send_private_limit_day_;
}
inline void role_base_data::set_mail_send_private_limit_day(::google::protobuf::uint32 value) {
  set_has_mail_send_private_limit_day();
  mail_send_private_limit_day_ = value;
}

// optional uint64 fight_power = 34;
inline bool role_base_data::has_fight_power() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void role_base_data::set_has_fight_power() {
  _has_bits_[1] |= 0x00000001u;
}
inline void role_base_data::clear_has_fight_power() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void role_base_data::clear_fight_power() {
  fight_power_ = GOOGLE_ULONGLONG(0);
  clear_has_fight_power();
}
inline ::google::protobuf::uint64 role_base_data::fight_power() const {
  return fight_power_;
}
inline void role_base_data::set_fight_power(::google::protobuf::uint64 value) {
  set_has_fight_power();
  fight_power_ = value;
}

// optional uint32 first_offical_award = 35;
inline bool role_base_data::has_first_offical_award() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void role_base_data::set_has_first_offical_award() {
  _has_bits_[1] |= 0x00000002u;
}
inline void role_base_data::clear_has_first_offical_award() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void role_base_data::clear_first_offical_award() {
  first_offical_award_ = 0u;
  clear_has_first_offical_award();
}
inline ::google::protobuf::uint32 role_base_data::first_offical_award() const {
  return first_offical_award_;
}
inline void role_base_data::set_first_offical_award(::google::protobuf::uint32 value) {
  set_has_first_offical_award();
  first_offical_award_ = value;
}

// optional uint32 cur_mainline_task_id = 36;
inline bool role_base_data::has_cur_mainline_task_id() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void role_base_data::set_has_cur_mainline_task_id() {
  _has_bits_[1] |= 0x00000004u;
}
inline void role_base_data::clear_has_cur_mainline_task_id() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void role_base_data::clear_cur_mainline_task_id() {
  cur_mainline_task_id_ = 0u;
  clear_has_cur_mainline_task_id();
}
inline ::google::protobuf::uint32 role_base_data::cur_mainline_task_id() const {
  return cur_mainline_task_id_;
}
inline void role_base_data::set_cur_mainline_task_id(::google::protobuf::uint32 value) {
  set_has_cur_mainline_task_id();
  cur_mainline_task_id_ = value;
}

// optional uint32 offical_apply_count = 37;
inline bool role_base_data::has_offical_apply_count() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void role_base_data::set_has_offical_apply_count() {
  _has_bits_[1] |= 0x00000008u;
}
inline void role_base_data::clear_has_offical_apply_count() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void role_base_data::clear_offical_apply_count() {
  offical_apply_count_ = 0u;
  clear_has_offical_apply_count();
}
inline ::google::protobuf::uint32 role_base_data::offical_apply_count() const {
  return offical_apply_count_;
}
inline void role_base_data::set_offical_apply_count(::google::protobuf::uint32 value) {
  set_has_offical_apply_count();
  offical_apply_count_ = value;
}

// optional uint32 acc_login_count = 38;
inline bool role_base_data::has_acc_login_count() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void role_base_data::set_has_acc_login_count() {
  _has_bits_[1] |= 0x00000010u;
}
inline void role_base_data::clear_has_acc_login_count() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void role_base_data::clear_acc_login_count() {
  acc_login_count_ = 0u;
  clear_has_acc_login_count();
}
inline ::google::protobuf::uint32 role_base_data::acc_login_count() const {
  return acc_login_count_;
}
inline void role_base_data::set_acc_login_count(::google::protobuf::uint32 value) {
  set_has_acc_login_count();
  acc_login_count_ = value;
}

// optional bool has_first_common = 39;
inline bool role_base_data::has_has_first_common() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void role_base_data::set_has_has_first_common() {
  _has_bits_[1] |= 0x00000020u;
}
inline void role_base_data::clear_has_has_first_common() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void role_base_data::clear_has_first_common() {
  has_first_common_ = false;
  clear_has_has_first_common();
}
inline bool role_base_data::has_first_common() const {
  return has_first_common_;
}
inline void role_base_data::set_has_first_common(bool value) {
  set_has_has_first_common();
  has_first_common_ = value;
}

// optional bool has_first_special = 40;
inline bool role_base_data::has_has_first_special() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void role_base_data::set_has_has_first_special() {
  _has_bits_[1] |= 0x00000040u;
}
inline void role_base_data::clear_has_has_first_special() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void role_base_data::clear_has_first_special() {
  has_first_special_ = false;
  clear_has_has_first_special();
}
inline bool role_base_data::has_first_special() const {
  return has_first_special_;
}
inline void role_base_data::set_has_first_special(bool value) {
  set_has_has_first_special();
  has_first_special_ = value;
}

// optional bool has_first_ten_in_one_row = 41;
inline bool role_base_data::has_has_first_ten_in_one_row() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void role_base_data::set_has_has_first_ten_in_one_row() {
  _has_bits_[1] |= 0x00000080u;
}
inline void role_base_data::clear_has_has_first_ten_in_one_row() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void role_base_data::clear_has_first_ten_in_one_row() {
  has_first_ten_in_one_row_ = false;
  clear_has_has_first_ten_in_one_row();
}
inline bool role_base_data::has_first_ten_in_one_row() const {
  return has_first_ten_in_one_row_;
}
inline void role_base_data::set_has_first_ten_in_one_row(bool value) {
  set_has_has_first_ten_in_one_row();
  has_first_ten_in_one_row_ = value;
}

// optional uint32 skill_point = 42;
inline bool role_base_data::has_skill_point() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void role_base_data::set_has_skill_point() {
  _has_bits_[1] |= 0x00000100u;
}
inline void role_base_data::clear_has_skill_point() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void role_base_data::clear_skill_point() {
  skill_point_ = 0u;
  clear_has_skill_point();
}
inline ::google::protobuf::uint32 role_base_data::skill_point() const {
  return skill_point_;
}
inline void role_base_data::set_skill_point(::google::protobuf::uint32 value) {
  set_has_skill_point();
  skill_point_ = value;
}

// optional uint32 skill_point_revocer_tm = 43;
inline bool role_base_data::has_skill_point_revocer_tm() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void role_base_data::set_has_skill_point_revocer_tm() {
  _has_bits_[1] |= 0x00000200u;
}
inline void role_base_data::clear_has_skill_point_revocer_tm() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void role_base_data::clear_skill_point_revocer_tm() {
  skill_point_revocer_tm_ = 0u;
  clear_has_skill_point_revocer_tm();
}
inline ::google::protobuf::uint32 role_base_data::skill_point_revocer_tm() const {
  return skill_point_revocer_tm_;
}
inline void role_base_data::set_skill_point_revocer_tm(::google::protobuf::uint32 value) {
  set_has_skill_point_revocer_tm();
  skill_point_revocer_tm_ = value;
}

// optional uint32 wine = 44 [default = 0];
inline bool role_base_data::has_wine() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void role_base_data::set_has_wine() {
  _has_bits_[1] |= 0x00000400u;
}
inline void role_base_data::clear_has_wine() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void role_base_data::clear_wine() {
  wine_ = 0u;
  clear_has_wine();
}
inline ::google::protobuf::uint32 role_base_data::wine() const {
  return wine_;
}
inline void role_base_data::set_wine(::google::protobuf::uint32 value) {
  set_has_wine();
  wine_ = value;
}

// optional int32 gm_auth = 45;
inline bool role_base_data::has_gm_auth() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void role_base_data::set_has_gm_auth() {
  _has_bits_[1] |= 0x00000800u;
}
inline void role_base_data::clear_has_gm_auth() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void role_base_data::clear_gm_auth() {
  gm_auth_ = 0;
  clear_has_gm_auth();
}
inline ::google::protobuf::int32 role_base_data::gm_auth() const {
  return gm_auth_;
}
inline void role_base_data::set_gm_auth(::google::protobuf::int32 value) {
  set_has_gm_auth();
  gm_auth_ = value;
}

// optional uint32 wine_cup = 46 [default = 0];
inline bool role_base_data::has_wine_cup() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void role_base_data::set_has_wine_cup() {
  _has_bits_[1] |= 0x00001000u;
}
inline void role_base_data::clear_has_wine_cup() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void role_base_data::clear_wine_cup() {
  wine_cup_ = 0u;
  clear_has_wine_cup();
}
inline ::google::protobuf::uint32 role_base_data::wine_cup() const {
  return wine_cup_;
}
inline void role_base_data::set_wine_cup(::google::protobuf::uint32 value) {
  set_has_wine_cup();
  wine_cup_ = value;
}

// optional int32 daily_fortune = 48;
inline bool role_base_data::has_daily_fortune() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void role_base_data::set_has_daily_fortune() {
  _has_bits_[1] |= 0x00002000u;
}
inline void role_base_data::clear_has_daily_fortune() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void role_base_data::clear_daily_fortune() {
  daily_fortune_ = 0;
  clear_has_daily_fortune();
}
inline ::google::protobuf::int32 role_base_data::daily_fortune() const {
  return daily_fortune_;
}
inline void role_base_data::set_daily_fortune(::google::protobuf::int32 value) {
  set_has_daily_fortune();
  daily_fortune_ = value;
}

// optional int32 energy = 49;
inline bool role_base_data::has_energy() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void role_base_data::set_has_energy() {
  _has_bits_[1] |= 0x00004000u;
}
inline void role_base_data::clear_has_energy() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void role_base_data::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
inline ::google::protobuf::int32 role_base_data::energy() const {
  return energy_;
}
inline void role_base_data::set_energy(::google::protobuf::int32 value) {
  set_has_energy();
  energy_ = value;
}

// optional int32 adv_times = 50;
inline bool role_base_data::has_adv_times() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void role_base_data::set_has_adv_times() {
  _has_bits_[1] |= 0x00008000u;
}
inline void role_base_data::clear_has_adv_times() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void role_base_data::clear_adv_times() {
  adv_times_ = 0;
  clear_has_adv_times();
}
inline ::google::protobuf::int32 role_base_data::adv_times() const {
  return adv_times_;
}
inline void role_base_data::set_adv_times(::google::protobuf::int32 value) {
  set_has_adv_times();
  adv_times_ = value;
}

// optional int32 talent_point = 51;
inline bool role_base_data::has_talent_point() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void role_base_data::set_has_talent_point() {
  _has_bits_[1] |= 0x00010000u;
}
inline void role_base_data::clear_has_talent_point() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void role_base_data::clear_talent_point() {
  talent_point_ = 0;
  clear_has_talent_point();
}
inline ::google::protobuf::int32 role_base_data::talent_point() const {
  return talent_point_;
}
inline void role_base_data::set_talent_point(::google::protobuf::int32 value) {
  set_has_talent_point();
  talent_point_ = value;
}

// repeated int32 lock_module_ids = 52;
inline int role_base_data::lock_module_ids_size() const {
  return lock_module_ids_.size();
}
inline void role_base_data::clear_lock_module_ids() {
  lock_module_ids_.Clear();
}
inline ::google::protobuf::int32 role_base_data::lock_module_ids(int index) const {
  return lock_module_ids_.Get(index);
}
inline void role_base_data::set_lock_module_ids(int index, ::google::protobuf::int32 value) {
  lock_module_ids_.Set(index, value);
}
inline void role_base_data::add_lock_module_ids(::google::protobuf::int32 value) {
  lock_module_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
role_base_data::lock_module_ids() const {
  return lock_module_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
role_base_data::mutable_lock_module_ids() {
  return &lock_module_ids_;
}

// optional bool pass_all = 53;
inline bool role_base_data::has_pass_all() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void role_base_data::set_has_pass_all() {
  _has_bits_[1] |= 0x00040000u;
}
inline void role_base_data::clear_has_pass_all() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void role_base_data::clear_pass_all() {
  pass_all_ = false;
  clear_has_pass_all();
}
inline bool role_base_data::pass_all() const {
  return pass_all_;
}
inline void role_base_data::set_pass_all(bool value) {
  set_has_pass_all();
  pass_all_ = value;
}

// optional bool skip = 54;
inline bool role_base_data::has_skip() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void role_base_data::set_has_skip() {
  _has_bits_[1] |= 0x00080000u;
}
inline void role_base_data::clear_has_skip() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void role_base_data::clear_skip() {
  skip_ = false;
  clear_has_skip();
}
inline bool role_base_data::skip() const {
  return skip_;
}
inline void role_base_data::set_skip(bool value) {
  set_has_skip();
  skip_ = value;
}

// repeated int32 guide_ids = 55;
inline int role_base_data::guide_ids_size() const {
  return guide_ids_.size();
}
inline void role_base_data::clear_guide_ids() {
  guide_ids_.Clear();
}
inline ::google::protobuf::int32 role_base_data::guide_ids(int index) const {
  return guide_ids_.Get(index);
}
inline void role_base_data::set_guide_ids(int index, ::google::protobuf::int32 value) {
  guide_ids_.Set(index, value);
}
inline void role_base_data::add_guide_ids(::google::protobuf::int32 value) {
  guide_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
role_base_data::guide_ids() const {
  return guide_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
role_base_data::mutable_guide_ids() {
  return &guide_ids_;
}

// optional int32 chat_room_award_times = 56;
inline bool role_base_data::has_chat_room_award_times() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void role_base_data::set_has_chat_room_award_times() {
  _has_bits_[1] |= 0x00200000u;
}
inline void role_base_data::clear_has_chat_room_award_times() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void role_base_data::clear_chat_room_award_times() {
  chat_room_award_times_ = 0;
  clear_has_chat_room_award_times();
}
inline ::google::protobuf::int32 role_base_data::chat_room_award_times() const {
  return chat_room_award_times_;
}
inline void role_base_data::set_chat_room_award_times(::google::protobuf::int32 value) {
  set_has_chat_room_award_times();
  chat_room_award_times_ = value;
}

// optional int32 charm = 57;
inline bool role_base_data::has_charm() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void role_base_data::set_has_charm() {
  _has_bits_[1] |= 0x00400000u;
}
inline void role_base_data::clear_has_charm() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void role_base_data::clear_charm() {
  charm_ = 0;
  clear_has_charm();
}
inline ::google::protobuf::int32 role_base_data::charm() const {
  return charm_;
}
inline void role_base_data::set_charm(::google::protobuf::int32 value) {
  set_has_charm();
  charm_ = value;
}

// optional int32 popularity = 58;
inline bool role_base_data::has_popularity() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void role_base_data::set_has_popularity() {
  _has_bits_[1] |= 0x00800000u;
}
inline void role_base_data::clear_has_popularity() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void role_base_data::clear_popularity() {
  popularity_ = 0;
  clear_has_popularity();
}
inline ::google::protobuf::int32 role_base_data::popularity() const {
  return popularity_;
}
inline void role_base_data::set_popularity(::google::protobuf::int32 value) {
  set_has_popularity();
  popularity_ = value;
}

// repeated .SProtoSpace.friend_intimacy intimacy = 59;
inline int role_base_data::intimacy_size() const {
  return intimacy_.size();
}
inline void role_base_data::clear_intimacy() {
  intimacy_.Clear();
}
inline const ::SProtoSpace::friend_intimacy& role_base_data::intimacy(int index) const {
  return intimacy_.Get(index);
}
inline ::SProtoSpace::friend_intimacy* role_base_data::mutable_intimacy(int index) {
  return intimacy_.Mutable(index);
}
inline ::SProtoSpace::friend_intimacy* role_base_data::add_intimacy() {
  return intimacy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_intimacy >&
role_base_data::intimacy() const {
  return intimacy_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_intimacy >*
role_base_data::mutable_intimacy() {
  return &intimacy_;
}

// repeated .SProtoSpace.couple_love love = 60;
inline int role_base_data::love_size() const {
  return love_.size();
}
inline void role_base_data::clear_love() {
  love_.Clear();
}
inline const ::SProtoSpace::couple_love& role_base_data::love(int index) const {
  return love_.Get(index);
}
inline ::SProtoSpace::couple_love* role_base_data::mutable_love(int index) {
  return love_.Mutable(index);
}
inline ::SProtoSpace::couple_love* role_base_data::add_love() {
  return love_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::couple_love >&
role_base_data::love() const {
  return love_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::couple_love >*
role_base_data::mutable_love() {
  return &love_;
}

// optional int32 change_name_time = 61 [default = 0];
inline bool role_base_data::has_change_name_time() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void role_base_data::set_has_change_name_time() {
  _has_bits_[1] |= 0x04000000u;
}
inline void role_base_data::clear_has_change_name_time() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void role_base_data::clear_change_name_time() {
  change_name_time_ = 0;
  clear_has_change_name_time();
}
inline ::google::protobuf::int32 role_base_data::change_name_time() const {
  return change_name_time_;
}
inline void role_base_data::set_change_name_time(::google::protobuf::int32 value) {
  set_has_change_name_time();
  change_name_time_ = value;
}

// -------------------------------------------------------------------

// unit_chest_data

// optional uint32 db_mode = 1;
inline bool unit_chest_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_chest_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_chest_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_chest_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_chest_data::db_mode() const {
  return db_mode_;
}
inline void unit_chest_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_chest_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_chest_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_chest_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_chest_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_chest_data::uuid() const {
  return uuid_;
}
inline void unit_chest_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional .SProtoSpace.role_chest chest = 3;
inline bool unit_chest_data::has_chest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_chest_data::set_has_chest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_chest_data::clear_has_chest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_chest_data::clear_chest() {
  if (chest_ != NULL) chest_->::SProtoSpace::role_chest::Clear();
  clear_has_chest();
}
inline const ::SProtoSpace::role_chest& unit_chest_data::chest() const {
  return chest_ != NULL ? *chest_ : *default_instance_->chest_;
}
inline ::SProtoSpace::role_chest* unit_chest_data::mutable_chest() {
  set_has_chest();
  if (chest_ == NULL) chest_ = new ::SProtoSpace::role_chest;
  return chest_;
}
inline ::SProtoSpace::role_chest* unit_chest_data::release_chest() {
  clear_has_chest();
  ::SProtoSpace::role_chest* temp = chest_;
  chest_ = NULL;
  return temp;
}
inline void unit_chest_data::set_allocated_chest(::SProtoSpace::role_chest* chest) {
  delete chest_;
  chest_ = chest;
  if (chest) {
    set_has_chest();
  } else {
    clear_has_chest();
  }
}

// -------------------------------------------------------------------

// unit_free_times_draw_card

// optional uint32 db_mode = 1;
inline bool unit_free_times_draw_card::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_free_times_draw_card::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_free_times_draw_card::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_free_times_draw_card::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_free_times_draw_card::db_mode() const {
  return db_mode_;
}
inline void unit_free_times_draw_card::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_free_times_draw_card::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_free_times_draw_card::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_free_times_draw_card::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_free_times_draw_card::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_free_times_draw_card::uuid() const {
  return uuid_;
}
inline void unit_free_times_draw_card::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 draw_type = 3;
inline bool unit_free_times_draw_card::has_draw_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_free_times_draw_card::set_has_draw_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_free_times_draw_card::clear_has_draw_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_free_times_draw_card::clear_draw_type() {
  draw_type_ = 0;
  clear_has_draw_type();
}
inline ::google::protobuf::int32 unit_free_times_draw_card::draw_type() const {
  return draw_type_;
}
inline void unit_free_times_draw_card::set_draw_type(::google::protobuf::int32 value) {
  set_has_draw_type();
  draw_type_ = value;
}

// optional int32 used_today = 4;
inline bool unit_free_times_draw_card::has_used_today() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void unit_free_times_draw_card::set_has_used_today() {
  _has_bits_[0] |= 0x00000008u;
}
inline void unit_free_times_draw_card::clear_has_used_today() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void unit_free_times_draw_card::clear_used_today() {
  used_today_ = 0;
  clear_has_used_today();
}
inline ::google::protobuf::int32 unit_free_times_draw_card::used_today() const {
  return used_today_;
}
inline void unit_free_times_draw_card::set_used_today(::google::protobuf::int32 value) {
  set_has_used_today();
  used_today_ = value;
}

// optional int32 now_has_times = 5;
inline bool unit_free_times_draw_card::has_now_has_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void unit_free_times_draw_card::set_has_now_has_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void unit_free_times_draw_card::clear_has_now_has_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void unit_free_times_draw_card::clear_now_has_times() {
  now_has_times_ = 0;
  clear_has_now_has_times();
}
inline ::google::protobuf::int32 unit_free_times_draw_card::now_has_times() const {
  return now_has_times_;
}
inline void unit_free_times_draw_card::set_now_has_times(::google::protobuf::int32 value) {
  set_has_now_has_times();
  now_has_times_ = value;
}

// optional uint32 time_last_used = 6;
inline bool unit_free_times_draw_card::has_time_last_used() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void unit_free_times_draw_card::set_has_time_last_used() {
  _has_bits_[0] |= 0x00000020u;
}
inline void unit_free_times_draw_card::clear_has_time_last_used() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void unit_free_times_draw_card::clear_time_last_used() {
  time_last_used_ = 0u;
  clear_has_time_last_used();
}
inline ::google::protobuf::uint32 unit_free_times_draw_card::time_last_used() const {
  return time_last_used_;
}
inline void unit_free_times_draw_card::set_time_last_used(::google::protobuf::uint32 value) {
  set_has_time_last_used();
  time_last_used_ = value;
}

// optional int32 free_left_day = 7;
inline bool unit_free_times_draw_card::has_free_left_day() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void unit_free_times_draw_card::set_has_free_left_day() {
  _has_bits_[0] |= 0x00000040u;
}
inline void unit_free_times_draw_card::clear_has_free_left_day() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void unit_free_times_draw_card::clear_free_left_day() {
  free_left_day_ = 0;
  clear_has_free_left_day();
}
inline ::google::protobuf::int32 unit_free_times_draw_card::free_left_day() const {
  return free_left_day_;
}
inline void unit_free_times_draw_card::set_free_left_day(::google::protobuf::int32 value) {
  set_has_free_left_day();
  free_left_day_ = value;
}

// optional int32 limit_left_day = 8;
inline bool unit_free_times_draw_card::has_limit_left_day() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void unit_free_times_draw_card::set_has_limit_left_day() {
  _has_bits_[0] |= 0x00000080u;
}
inline void unit_free_times_draw_card::clear_has_limit_left_day() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void unit_free_times_draw_card::clear_limit_left_day() {
  limit_left_day_ = 0;
  clear_has_limit_left_day();
}
inline ::google::protobuf::int32 unit_free_times_draw_card::limit_left_day() const {
  return limit_left_day_;
}
inline void unit_free_times_draw_card::set_limit_left_day(::google::protobuf::int32 value) {
  set_has_limit_left_day();
  limit_left_day_ = value;
}

// optional int32 total_time = 9;
inline bool unit_free_times_draw_card::has_total_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void unit_free_times_draw_card::set_has_total_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void unit_free_times_draw_card::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void unit_free_times_draw_card::clear_total_time() {
  total_time_ = 0;
  clear_has_total_time();
}
inline ::google::protobuf::int32 unit_free_times_draw_card::total_time() const {
  return total_time_;
}
inline void unit_free_times_draw_card::set_total_time(::google::protobuf::int32 value) {
  set_has_total_time();
  total_time_ = value;
}

// -------------------------------------------------------------------

// unit_limit_draw_card

// optional uint32 db_mode = 1;
inline bool unit_limit_draw_card::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_limit_draw_card::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_limit_draw_card::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_limit_draw_card::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_limit_draw_card::db_mode() const {
  return db_mode_;
}
inline void unit_limit_draw_card::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_limit_draw_card::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_limit_draw_card::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_limit_draw_card::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_limit_draw_card::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_limit_draw_card::uuid() const {
  return uuid_;
}
inline void unit_limit_draw_card::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 draw_type = 3;
inline bool unit_limit_draw_card::has_draw_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_limit_draw_card::set_has_draw_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_limit_draw_card::clear_has_draw_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_limit_draw_card::clear_draw_type() {
  draw_type_ = 0;
  clear_has_draw_type();
}
inline ::google::protobuf::int32 unit_limit_draw_card::draw_type() const {
  return draw_type_;
}
inline void unit_limit_draw_card::set_draw_type(::google::protobuf::int32 value) {
  set_has_draw_type();
  draw_type_ = value;
}

// optional int32 used_today = 4;
inline bool unit_limit_draw_card::has_used_today() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void unit_limit_draw_card::set_has_used_today() {
  _has_bits_[0] |= 0x00000008u;
}
inline void unit_limit_draw_card::clear_has_used_today() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void unit_limit_draw_card::clear_used_today() {
  used_today_ = 0;
  clear_has_used_today();
}
inline ::google::protobuf::int32 unit_limit_draw_card::used_today() const {
  return used_today_;
}
inline void unit_limit_draw_card::set_used_today(::google::protobuf::int32 value) {
  set_has_used_today();
  used_today_ = value;
}

// optional uint32 time_last_draw = 5;
inline bool unit_limit_draw_card::has_time_last_draw() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void unit_limit_draw_card::set_has_time_last_draw() {
  _has_bits_[0] |= 0x00000010u;
}
inline void unit_limit_draw_card::clear_has_time_last_draw() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void unit_limit_draw_card::clear_time_last_draw() {
  time_last_draw_ = 0u;
  clear_has_time_last_draw();
}
inline ::google::protobuf::uint32 unit_limit_draw_card::time_last_draw() const {
  return time_last_draw_;
}
inline void unit_limit_draw_card::set_time_last_draw(::google::protobuf::uint32 value) {
  set_has_time_last_draw();
  time_last_draw_ = value;
}

// -------------------------------------------------------------------

// db_unit_draw_card

// optional uint32 db_mode = 1;
inline bool db_unit_draw_card::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_unit_draw_card::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_unit_draw_card::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_unit_draw_card::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 db_unit_draw_card::db_mode() const {
  return db_mode_;
}
inline void db_unit_draw_card::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool db_unit_draw_card::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_unit_draw_card::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_unit_draw_card::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_unit_draw_card::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_unit_draw_card::uuid() const {
  return uuid_;
}
inline void db_unit_draw_card::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 draw_type = 3;
inline bool db_unit_draw_card::has_draw_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_unit_draw_card::set_has_draw_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_unit_draw_card::clear_has_draw_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_unit_draw_card::clear_draw_type() {
  draw_type_ = 0;
  clear_has_draw_type();
}
inline ::google::protobuf::int32 db_unit_draw_card::draw_type() const {
  return draw_type_;
}
inline void db_unit_draw_card::set_draw_type(::google::protobuf::int32 value) {
  set_has_draw_type();
  draw_type_ = value;
}

// optional int32 now_remain_times = 4;
inline bool db_unit_draw_card::has_now_remain_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_unit_draw_card::set_has_now_remain_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_unit_draw_card::clear_has_now_remain_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_unit_draw_card::clear_now_remain_times() {
  now_remain_times_ = 0;
  clear_has_now_remain_times();
}
inline ::google::protobuf::int32 db_unit_draw_card::now_remain_times() const {
  return now_remain_times_;
}
inline void db_unit_draw_card::set_now_remain_times(::google::protobuf::int32 value) {
  set_has_now_remain_times();
  now_remain_times_ = value;
}

// optional int32 tody_remain_free_times = 5;
inline bool db_unit_draw_card::has_tody_remain_free_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_unit_draw_card::set_has_tody_remain_free_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_unit_draw_card::clear_has_tody_remain_free_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_unit_draw_card::clear_tody_remain_free_times() {
  tody_remain_free_times_ = 0;
  clear_has_tody_remain_free_times();
}
inline ::google::protobuf::int32 db_unit_draw_card::tody_remain_free_times() const {
  return tody_remain_free_times_;
}
inline void db_unit_draw_card::set_tody_remain_free_times(::google::protobuf::int32 value) {
  set_has_tody_remain_free_times();
  tody_remain_free_times_ = value;
}

// optional int32 tody_remain_limit_times = 6;
inline bool db_unit_draw_card::has_tody_remain_limit_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_unit_draw_card::set_has_tody_remain_limit_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_unit_draw_card::clear_has_tody_remain_limit_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_unit_draw_card::clear_tody_remain_limit_times() {
  tody_remain_limit_times_ = 0;
  clear_has_tody_remain_limit_times();
}
inline ::google::protobuf::int32 db_unit_draw_card::tody_remain_limit_times() const {
  return tody_remain_limit_times_;
}
inline void db_unit_draw_card::set_tody_remain_limit_times(::google::protobuf::int32 value) {
  set_has_tody_remain_limit_times();
  tody_remain_limit_times_ = value;
}

// optional int32 total_times = 7;
inline bool db_unit_draw_card::has_total_times() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_unit_draw_card::set_has_total_times() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_unit_draw_card::clear_has_total_times() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_unit_draw_card::clear_total_times() {
  total_times_ = 0;
  clear_has_total_times();
}
inline ::google::protobuf::int32 db_unit_draw_card::total_times() const {
  return total_times_;
}
inline void db_unit_draw_card::set_total_times(::google::protobuf::int32 value) {
  set_has_total_times();
  total_times_ = value;
}

// optional uint32 last_opt_time = 8;
inline bool db_unit_draw_card::has_last_opt_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_unit_draw_card::set_has_last_opt_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_unit_draw_card::clear_has_last_opt_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_unit_draw_card::clear_last_opt_time() {
  last_opt_time_ = 0u;
  clear_has_last_opt_time();
}
inline ::google::protobuf::uint32 db_unit_draw_card::last_opt_time() const {
  return last_opt_time_;
}
inline void db_unit_draw_card::set_last_opt_time(::google::protobuf::uint32 value) {
  set_has_last_opt_time();
  last_opt_time_ = value;
}

// -------------------------------------------------------------------

// db_unit_draw_card_special

// optional uint32 db_mode = 1;
inline bool db_unit_draw_card_special::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_unit_draw_card_special::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_unit_draw_card_special::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_unit_draw_card_special::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 db_unit_draw_card_special::db_mode() const {
  return db_mode_;
}
inline void db_unit_draw_card_special::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool db_unit_draw_card_special::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_unit_draw_card_special::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_unit_draw_card_special::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_unit_draw_card_special::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_unit_draw_card_special::uuid() const {
  return uuid_;
}
inline void db_unit_draw_card_special::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 draw_type = 3;
inline bool db_unit_draw_card_special::has_draw_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_unit_draw_card_special::set_has_draw_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_unit_draw_card_special::clear_has_draw_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_unit_draw_card_special::clear_draw_type() {
  draw_type_ = 0;
  clear_has_draw_type();
}
inline ::google::protobuf::int32 db_unit_draw_card_special::draw_type() const {
  return draw_type_;
}
inline void db_unit_draw_card_special::set_draw_type(::google::protobuf::int32 value) {
  set_has_draw_type();
  draw_type_ = value;
}

// optional int32 rem_special_time_s = 4;
inline bool db_unit_draw_card_special::has_rem_special_time_s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_unit_draw_card_special::set_has_rem_special_time_s() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_unit_draw_card_special::clear_has_rem_special_time_s() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_unit_draw_card_special::clear_rem_special_time_s() {
  rem_special_time_s_ = 0;
  clear_has_rem_special_time_s();
}
inline ::google::protobuf::int32 db_unit_draw_card_special::rem_special_time_s() const {
  return rem_special_time_s_;
}
inline void db_unit_draw_card_special::set_rem_special_time_s(::google::protobuf::int32 value) {
  set_has_rem_special_time_s();
  rem_special_time_s_ = value;
}

// -------------------------------------------------------------------

// db_unit_mail_data

// optional uint32 db_mode = 1;
inline bool db_unit_mail_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_unit_mail_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_unit_mail_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_unit_mail_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 db_unit_mail_data::db_mode() const {
  return db_mode_;
}
inline void db_unit_mail_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool db_unit_mail_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_unit_mail_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_unit_mail_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_unit_mail_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_unit_mail_data::uuid() const {
  return uuid_;
}
inline void db_unit_mail_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint64 time_id = 4;
inline bool db_unit_mail_data::has_time_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_unit_mail_data::set_has_time_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_unit_mail_data::clear_has_time_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_unit_mail_data::clear_time_id() {
  time_id_ = GOOGLE_ULONGLONG(0);
  clear_has_time_id();
}
inline ::google::protobuf::uint64 db_unit_mail_data::time_id() const {
  return time_id_;
}
inline void db_unit_mail_data::set_time_id(::google::protobuf::uint64 value) {
  set_has_time_id();
  time_id_ = value;
}

// -------------------------------------------------------------------

// db_unit_mail_send_data

// optional uint32 db_mode = 1;
inline bool db_unit_mail_send_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_unit_mail_send_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_unit_mail_send_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_unit_mail_send_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 db_unit_mail_send_data::db_mode() const {
  return db_mode_;
}
inline void db_unit_mail_send_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool db_unit_mail_send_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_unit_mail_send_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_unit_mail_send_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_unit_mail_send_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_unit_mail_send_data::uuid() const {
  return uuid_;
}
inline void db_unit_mail_send_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 time = 4;
inline bool db_unit_mail_send_data::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_unit_mail_send_data::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_unit_mail_send_data::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_unit_mail_send_data::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 db_unit_mail_send_data::time() const {
  return time_;
}
inline void db_unit_mail_send_data::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 free_left_day = 5;
inline bool db_unit_mail_send_data::has_free_left_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_unit_mail_send_data::set_has_free_left_day() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_unit_mail_send_data::clear_has_free_left_day() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_unit_mail_send_data::clear_free_left_day() {
  free_left_day_ = 0;
  clear_has_free_left_day();
}
inline ::google::protobuf::int32 db_unit_mail_send_data::free_left_day() const {
  return free_left_day_;
}
inline void db_unit_mail_send_data::set_free_left_day(::google::protobuf::int32 value) {
  set_has_free_left_day();
  free_left_day_ = value;
}

// -------------------------------------------------------------------

// role_item_data

// repeated .SProtoSpace.unit_item_data item_datas = 1;
inline int role_item_data::item_datas_size() const {
  return item_datas_.size();
}
inline void role_item_data::clear_item_datas() {
  item_datas_.Clear();
}
inline const ::SProtoSpace::unit_item_data& role_item_data::item_datas(int index) const {
  return item_datas_.Get(index);
}
inline ::SProtoSpace::unit_item_data* role_item_data::mutable_item_datas(int index) {
  return item_datas_.Mutable(index);
}
inline ::SProtoSpace::unit_item_data* role_item_data::add_item_datas() {
  return item_datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_item_data >&
role_item_data::item_datas() const {
  return item_datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_item_data >*
role_item_data::mutable_item_datas() {
  return &item_datas_;
}

// repeated .SProtoSpace.unit_chest_data chests = 2;
inline int role_item_data::chests_size() const {
  return chests_.size();
}
inline void role_item_data::clear_chests() {
  chests_.Clear();
}
inline const ::SProtoSpace::unit_chest_data& role_item_data::chests(int index) const {
  return chests_.Get(index);
}
inline ::SProtoSpace::unit_chest_data* role_item_data::mutable_chests(int index) {
  return chests_.Mutable(index);
}
inline ::SProtoSpace::unit_chest_data* role_item_data::add_chests() {
  return chests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_chest_data >&
role_item_data::chests() const {
  return chests_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_chest_data >*
role_item_data::mutable_chests() {
  return &chests_;
}

// repeated .SProtoSpace.unit_free_times_draw_card draw_card_free_times = 3;
inline int role_item_data::draw_card_free_times_size() const {
  return draw_card_free_times_.size();
}
inline void role_item_data::clear_draw_card_free_times() {
  draw_card_free_times_.Clear();
}
inline const ::SProtoSpace::unit_free_times_draw_card& role_item_data::draw_card_free_times(int index) const {
  return draw_card_free_times_.Get(index);
}
inline ::SProtoSpace::unit_free_times_draw_card* role_item_data::mutable_draw_card_free_times(int index) {
  return draw_card_free_times_.Mutable(index);
}
inline ::SProtoSpace::unit_free_times_draw_card* role_item_data::add_draw_card_free_times() {
  return draw_card_free_times_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_free_times_draw_card >&
role_item_data::draw_card_free_times() const {
  return draw_card_free_times_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_free_times_draw_card >*
role_item_data::mutable_draw_card_free_times() {
  return &draw_card_free_times_;
}

// repeated .SProtoSpace.unit_limit_draw_card draw_card_limit = 4;
inline int role_item_data::draw_card_limit_size() const {
  return draw_card_limit_.size();
}
inline void role_item_data::clear_draw_card_limit() {
  draw_card_limit_.Clear();
}
inline const ::SProtoSpace::unit_limit_draw_card& role_item_data::draw_card_limit(int index) const {
  return draw_card_limit_.Get(index);
}
inline ::SProtoSpace::unit_limit_draw_card* role_item_data::mutable_draw_card_limit(int index) {
  return draw_card_limit_.Mutable(index);
}
inline ::SProtoSpace::unit_limit_draw_card* role_item_data::add_draw_card_limit() {
  return draw_card_limit_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_limit_draw_card >&
role_item_data::draw_card_limit() const {
  return draw_card_limit_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_limit_draw_card >*
role_item_data::mutable_draw_card_limit() {
  return &draw_card_limit_;
}

// repeated .SProtoSpace.db_unit_fashion_data fashions = 5;
inline int role_item_data::fashions_size() const {
  return fashions_.size();
}
inline void role_item_data::clear_fashions() {
  fashions_.Clear();
}
inline const ::SProtoSpace::db_unit_fashion_data& role_item_data::fashions(int index) const {
  return fashions_.Get(index);
}
inline ::SProtoSpace::db_unit_fashion_data* role_item_data::mutable_fashions(int index) {
  return fashions_.Mutable(index);
}
inline ::SProtoSpace::db_unit_fashion_data* role_item_data::add_fashions() {
  return fashions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_fashion_data >&
role_item_data::fashions() const {
  return fashions_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_fashion_data >*
role_item_data::mutable_fashions() {
  return &fashions_;
}

// repeated .SProtoSpace.db_unit_draw_card draw_card_s = 6;
inline int role_item_data::draw_card_s_size() const {
  return draw_card_s_.size();
}
inline void role_item_data::clear_draw_card_s() {
  draw_card_s_.Clear();
}
inline const ::SProtoSpace::db_unit_draw_card& role_item_data::draw_card_s(int index) const {
  return draw_card_s_.Get(index);
}
inline ::SProtoSpace::db_unit_draw_card* role_item_data::mutable_draw_card_s(int index) {
  return draw_card_s_.Mutable(index);
}
inline ::SProtoSpace::db_unit_draw_card* role_item_data::add_draw_card_s() {
  return draw_card_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_draw_card >&
role_item_data::draw_card_s() const {
  return draw_card_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_draw_card >*
role_item_data::mutable_draw_card_s() {
  return &draw_card_s_;
}

// repeated .SProtoSpace.db_unit_draw_card_special draw_card_specail_s = 7;
inline int role_item_data::draw_card_specail_s_size() const {
  return draw_card_specail_s_.size();
}
inline void role_item_data::clear_draw_card_specail_s() {
  draw_card_specail_s_.Clear();
}
inline const ::SProtoSpace::db_unit_draw_card_special& role_item_data::draw_card_specail_s(int index) const {
  return draw_card_specail_s_.Get(index);
}
inline ::SProtoSpace::db_unit_draw_card_special* role_item_data::mutable_draw_card_specail_s(int index) {
  return draw_card_specail_s_.Mutable(index);
}
inline ::SProtoSpace::db_unit_draw_card_special* role_item_data::add_draw_card_specail_s() {
  return draw_card_specail_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_draw_card_special >&
role_item_data::draw_card_specail_s() const {
  return draw_card_specail_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_draw_card_special >*
role_item_data::mutable_draw_card_specail_s() {
  return &draw_card_specail_s_;
}

// repeated .SProtoSpace.unit_item_data item_role_fashion_s = 8;
inline int role_item_data::item_role_fashion_s_size() const {
  return item_role_fashion_s_.size();
}
inline void role_item_data::clear_item_role_fashion_s() {
  item_role_fashion_s_.Clear();
}
inline const ::SProtoSpace::unit_item_data& role_item_data::item_role_fashion_s(int index) const {
  return item_role_fashion_s_.Get(index);
}
inline ::SProtoSpace::unit_item_data* role_item_data::mutable_item_role_fashion_s(int index) {
  return item_role_fashion_s_.Mutable(index);
}
inline ::SProtoSpace::unit_item_data* role_item_data::add_item_role_fashion_s() {
  return item_role_fashion_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_item_data >&
role_item_data::item_role_fashion_s() const {
  return item_role_fashion_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_item_data >*
role_item_data::mutable_item_role_fashion_s() {
  return &item_role_fashion_s_;
}

// repeated .SProtoSpace.db_unit_mail_data mail_data = 9;
inline int role_item_data::mail_data_size() const {
  return mail_data_.size();
}
inline void role_item_data::clear_mail_data() {
  mail_data_.Clear();
}
inline const ::SProtoSpace::db_unit_mail_data& role_item_data::mail_data(int index) const {
  return mail_data_.Get(index);
}
inline ::SProtoSpace::db_unit_mail_data* role_item_data::mutable_mail_data(int index) {
  return mail_data_.Mutable(index);
}
inline ::SProtoSpace::db_unit_mail_data* role_item_data::add_mail_data() {
  return mail_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_mail_data >&
role_item_data::mail_data() const {
  return mail_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_mail_data >*
role_item_data::mutable_mail_data() {
  return &mail_data_;
}

// repeated .SProtoSpace.db_unit_mail_send_data mail_send = 10;
inline int role_item_data::mail_send_size() const {
  return mail_send_.size();
}
inline void role_item_data::clear_mail_send() {
  mail_send_.Clear();
}
inline const ::SProtoSpace::db_unit_mail_send_data& role_item_data::mail_send(int index) const {
  return mail_send_.Get(index);
}
inline ::SProtoSpace::db_unit_mail_send_data* role_item_data::mutable_mail_send(int index) {
  return mail_send_.Mutable(index);
}
inline ::SProtoSpace::db_unit_mail_send_data* role_item_data::add_mail_send() {
  return mail_send_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_mail_send_data >&
role_item_data::mail_send() const {
  return mail_send_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_mail_send_data >*
role_item_data::mutable_mail_send() {
  return &mail_send_;
}

// -------------------------------------------------------------------

// skill_data

// optional uint32 template_id = 1;
inline bool skill_data::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void skill_data::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void skill_data::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void skill_data::clear_template_id() {
  template_id_ = 0u;
  clear_has_template_id();
}
inline ::google::protobuf::uint32 skill_data::template_id() const {
  return template_id_;
}
inline void skill_data::set_template_id(::google::protobuf::uint32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 slot = 2;
inline bool skill_data::has_slot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void skill_data::set_has_slot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void skill_data::clear_has_slot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void skill_data::clear_slot() {
  slot_ = 0;
  clear_has_slot();
}
inline ::google::protobuf::int32 skill_data::slot() const {
  return slot_;
}
inline void skill_data::set_slot(::google::protobuf::int32 value) {
  set_has_slot();
  slot_ = value;
}

// optional int32 level = 3;
inline bool skill_data::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void skill_data::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void skill_data::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void skill_data::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 skill_data::level() const {
  return level_;
}
inline void skill_data::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 unLock = 4;
inline bool skill_data::has_unlock() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void skill_data::set_has_unlock() {
  _has_bits_[0] |= 0x00000008u;
}
inline void skill_data::clear_has_unlock() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void skill_data::clear_unlock() {
  unlock_ = 0;
  clear_has_unlock();
}
inline ::google::protobuf::int32 skill_data::unlock() const {
  return unlock_;
}
inline void skill_data::set_unlock(::google::protobuf::int32 value) {
  set_has_unlock();
  unlock_ = value;
}

// -------------------------------------------------------------------

// db_skin_info

// optional uint32 template_id = 1;
inline bool db_skin_info::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_skin_info::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_skin_info::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_skin_info::clear_template_id() {
  template_id_ = 0u;
  clear_has_template_id();
}
inline ::google::protobuf::uint32 db_skin_info::template_id() const {
  return template_id_;
}
inline void db_skin_info::set_template_id(::google::protobuf::uint32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional uint64 end_time = 2;
inline bool db_skin_info::has_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_skin_info::set_has_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_skin_info::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_skin_info::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 db_skin_info::end_time() const {
  return end_time_;
}
inline void db_skin_info::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
}

// -------------------------------------------------------------------

// db_equip_data

// optional uint32 template_id = 1;
inline bool db_equip_data::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_equip_data::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_equip_data::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_equip_data::clear_template_id() {
  template_id_ = 0u;
  clear_has_template_id();
}
inline ::google::protobuf::uint32 db_equip_data::template_id() const {
  return template_id_;
}
inline void db_equip_data::set_template_id(::google::protobuf::uint32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// unit_player_data

// optional uint32 db_mode = 1;
inline bool unit_player_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_player_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_player_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_player_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_player_data::db_mode() const {
  return db_mode_;
}
inline void unit_player_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_player_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_player_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_player_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_player_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_player_data::uuid() const {
  return uuid_;
}
inline void unit_player_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 template_id = 3;
inline bool unit_player_data::has_template_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_player_data::set_has_template_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_player_data::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_player_data::clear_template_id() {
  template_id_ = 0u;
  clear_has_template_id();
}
inline ::google::protobuf::uint32 unit_player_data::template_id() const {
  return template_id_;
}
inline void unit_player_data::set_template_id(::google::protobuf::uint32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 talent_grade = 4;
inline bool unit_player_data::has_talent_grade() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void unit_player_data::set_has_talent_grade() {
  _has_bits_[0] |= 0x00000008u;
}
inline void unit_player_data::clear_has_talent_grade() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void unit_player_data::clear_talent_grade() {
  talent_grade_ = 0;
  clear_has_talent_grade();
}
inline ::google::protobuf::int32 unit_player_data::talent_grade() const {
  return talent_grade_;
}
inline void unit_player_data::set_talent_grade(::google::protobuf::int32 value) {
  set_has_talent_grade();
  talent_grade_ = value;
}

// repeated .SProtoSpace.player_skill_info skill_data = 5;
inline int unit_player_data::skill_data_size() const {
  return skill_data_.size();
}
inline void unit_player_data::clear_skill_data() {
  skill_data_.Clear();
}
inline const ::SProtoSpace::player_skill_info& unit_player_data::skill_data(int index) const {
  return skill_data_.Get(index);
}
inline ::SProtoSpace::player_skill_info* unit_player_data::mutable_skill_data(int index) {
  return skill_data_.Mutable(index);
}
inline ::SProtoSpace::player_skill_info* unit_player_data::add_skill_data() {
  return skill_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::player_skill_info >&
unit_player_data::skill_data() const {
  return skill_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::player_skill_info >*
unit_player_data::mutable_skill_data() {
  return &skill_data_;
}

// optional .SProtoSpace.skin_data skin_data = 6;
inline bool unit_player_data::has_skin_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void unit_player_data::set_has_skin_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void unit_player_data::clear_has_skin_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void unit_player_data::clear_skin_data() {
  if (skin_data_ != NULL) skin_data_->::SProtoSpace::skin_data::Clear();
  clear_has_skin_data();
}
inline const ::SProtoSpace::skin_data& unit_player_data::skin_data() const {
  return skin_data_ != NULL ? *skin_data_ : *default_instance_->skin_data_;
}
inline ::SProtoSpace::skin_data* unit_player_data::mutable_skin_data() {
  set_has_skin_data();
  if (skin_data_ == NULL) skin_data_ = new ::SProtoSpace::skin_data;
  return skin_data_;
}
inline ::SProtoSpace::skin_data* unit_player_data::release_skin_data() {
  clear_has_skin_data();
  ::SProtoSpace::skin_data* temp = skin_data_;
  skin_data_ = NULL;
  return temp;
}
inline void unit_player_data::set_allocated_skin_data(::SProtoSpace::skin_data* skin_data) {
  delete skin_data_;
  skin_data_ = skin_data;
  if (skin_data) {
    set_has_skin_data();
  } else {
    clear_has_skin_data();
  }
}

// repeated .SProtoSpace.db_equip_data equips = 7;
inline int unit_player_data::equips_size() const {
  return equips_.size();
}
inline void unit_player_data::clear_equips() {
  equips_.Clear();
}
inline const ::SProtoSpace::db_equip_data& unit_player_data::equips(int index) const {
  return equips_.Get(index);
}
inline ::SProtoSpace::db_equip_data* unit_player_data::mutable_equips(int index) {
  return equips_.Mutable(index);
}
inline ::SProtoSpace::db_equip_data* unit_player_data::add_equips() {
  return equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_equip_data >&
unit_player_data::equips() const {
  return equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_equip_data >*
unit_player_data::mutable_equips() {
  return &equips_;
}

// repeated .SProtoSpace.talent_info talent_data = 8;
inline int unit_player_data::talent_data_size() const {
  return talent_data_.size();
}
inline void unit_player_data::clear_talent_data() {
  talent_data_.Clear();
}
inline const ::SProtoSpace::talent_info& unit_player_data::talent_data(int index) const {
  return talent_data_.Get(index);
}
inline ::SProtoSpace::talent_info* unit_player_data::mutable_talent_data(int index) {
  return talent_data_.Mutable(index);
}
inline ::SProtoSpace::talent_info* unit_player_data::add_talent_data() {
  return talent_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talent_info >&
unit_player_data::talent_data() const {
  return talent_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talent_info >*
unit_player_data::mutable_talent_data() {
  return &talent_data_;
}

// optional bool active = 9;
inline bool unit_player_data::has_active() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void unit_player_data::set_has_active() {
  _has_bits_[0] |= 0x00000100u;
}
inline void unit_player_data::clear_has_active() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void unit_player_data::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool unit_player_data::active() const {
  return active_;
}
inline void unit_player_data::set_active(bool value) {
  set_has_active();
  active_ = value;
}

// optional .SProtoSpace.bag_data bag = 10;
inline bool unit_player_data::has_bag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void unit_player_data::set_has_bag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void unit_player_data::clear_has_bag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void unit_player_data::clear_bag() {
  if (bag_ != NULL) bag_->::SProtoSpace::bag_data::Clear();
  clear_has_bag();
}
inline const ::SProtoSpace::bag_data& unit_player_data::bag() const {
  return bag_ != NULL ? *bag_ : *default_instance_->bag_;
}
inline ::SProtoSpace::bag_data* unit_player_data::mutable_bag() {
  set_has_bag();
  if (bag_ == NULL) bag_ = new ::SProtoSpace::bag_data;
  return bag_;
}
inline ::SProtoSpace::bag_data* unit_player_data::release_bag() {
  clear_has_bag();
  ::SProtoSpace::bag_data* temp = bag_;
  bag_ = NULL;
  return temp;
}
inline void unit_player_data::set_allocated_bag(::SProtoSpace::bag_data* bag) {
  delete bag_;
  bag_ = bag;
  if (bag) {
    set_has_bag();
  } else {
    clear_has_bag();
  }
}

// -------------------------------------------------------------------

// unit_player_base

// optional uint32 db_mode = 1;
inline bool unit_player_base::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_player_base::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_player_base::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_player_base::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_player_base::db_mode() const {
  return db_mode_;
}
inline void unit_player_base::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_player_base::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_player_base::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_player_base::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_player_base::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_player_base::uuid() const {
  return uuid_;
}
inline void unit_player_base::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// repeated uint64 liked_list = 3;
inline int unit_player_base::liked_list_size() const {
  return liked_list_.size();
}
inline void unit_player_base::clear_liked_list() {
  liked_list_.Clear();
}
inline ::google::protobuf::uint64 unit_player_base::liked_list(int index) const {
  return liked_list_.Get(index);
}
inline void unit_player_base::set_liked_list(int index, ::google::protobuf::uint64 value) {
  liked_list_.Set(index, value);
}
inline void unit_player_base::add_liked_list(::google::protobuf::uint64 value) {
  liked_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
unit_player_base::liked_list() const {
  return liked_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
unit_player_base::mutable_liked_list() {
  return &liked_list_;
}

// optional uint32 like = 4;
inline bool unit_player_base::has_like() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void unit_player_base::set_has_like() {
  _has_bits_[0] |= 0x00000008u;
}
inline void unit_player_base::clear_has_like() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void unit_player_base::clear_like() {
  like_ = 0u;
  clear_has_like();
}
inline ::google::protobuf::uint32 unit_player_base::like() const {
  return like_;
}
inline void unit_player_base::set_like(::google::protobuf::uint32 value) {
  set_has_like();
  like_ = value;
}

// optional string signature = 5;
inline bool unit_player_base::has_signature() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void unit_player_base::set_has_signature() {
  _has_bits_[0] |= 0x00000010u;
}
inline void unit_player_base::clear_has_signature() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void unit_player_base::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& unit_player_base::signature() const {
  return *signature_;
}
inline void unit_player_base::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void unit_player_base::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void unit_player_base::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* unit_player_base::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* unit_player_base::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void unit_player_base::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .SProtoSpace.lsg_position_info position = 6;
inline bool unit_player_base::has_position() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void unit_player_base::set_has_position() {
  _has_bits_[0] |= 0x00000020u;
}
inline void unit_player_base::clear_has_position() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void unit_player_base::clear_position() {
  if (position_ != NULL) position_->::SProtoSpace::lsg_position_info::Clear();
  clear_has_position();
}
inline const ::SProtoSpace::lsg_position_info& unit_player_base::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::SProtoSpace::lsg_position_info* unit_player_base::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::SProtoSpace::lsg_position_info;
  return position_;
}
inline ::SProtoSpace::lsg_position_info* unit_player_base::release_position() {
  clear_has_position();
  ::SProtoSpace::lsg_position_info* temp = position_;
  position_ = NULL;
  return temp;
}
inline void unit_player_base::set_allocated_position(::SProtoSpace::lsg_position_info* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// repeated uint64 show_hero_list = 7;
inline int unit_player_base::show_hero_list_size() const {
  return show_hero_list_.size();
}
inline void unit_player_base::clear_show_hero_list() {
  show_hero_list_.Clear();
}
inline ::google::protobuf::uint64 unit_player_base::show_hero_list(int index) const {
  return show_hero_list_.Get(index);
}
inline void unit_player_base::set_show_hero_list(int index, ::google::protobuf::uint64 value) {
  show_hero_list_.Set(index, value);
}
inline void unit_player_base::add_show_hero_list(::google::protobuf::uint64 value) {
  show_hero_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
unit_player_base::show_hero_list() const {
  return show_hero_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
unit_player_base::mutable_show_hero_list() {
  return &show_hero_list_;
}

// optional uint32 border = 8;
inline bool unit_player_base::has_border() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void unit_player_base::set_has_border() {
  _has_bits_[0] |= 0x00000080u;
}
inline void unit_player_base::clear_has_border() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void unit_player_base::clear_border() {
  border_ = 0u;
  clear_has_border();
}
inline ::google::protobuf::uint32 unit_player_base::border() const {
  return border_;
}
inline void unit_player_base::set_border(::google::protobuf::uint32 value) {
  set_has_border();
  border_ = value;
}

// -------------------------------------------------------------------

// role_player_data

// repeated .SProtoSpace.unit_player_data players = 1;
inline int role_player_data::players_size() const {
  return players_.size();
}
inline void role_player_data::clear_players() {
  players_.Clear();
}
inline const ::SProtoSpace::unit_player_data& role_player_data::players(int index) const {
  return players_.Get(index);
}
inline ::SProtoSpace::unit_player_data* role_player_data::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::SProtoSpace::unit_player_data* role_player_data::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_player_data >&
role_player_data::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_player_data >*
role_player_data::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// role_show_data

// repeated .SProtoSpace.role_show_info show_info = 1;
inline int role_show_data::show_info_size() const {
  return show_info_.size();
}
inline void role_show_data::clear_show_info() {
  show_info_.Clear();
}
inline const ::SProtoSpace::role_show_info& role_show_data::show_info(int index) const {
  return show_info_.Get(index);
}
inline ::SProtoSpace::role_show_info* role_show_data::mutable_show_info(int index) {
  return show_info_.Mutable(index);
}
inline ::SProtoSpace::role_show_info* role_show_data::add_show_info() {
  return show_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_show_info >&
role_show_data::show_info() const {
  return show_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_show_info >*
role_show_data::mutable_show_info() {
  return &show_info_;
}

// -------------------------------------------------------------------

// hero_soul_data

// optional uint64 uuid = 1;
inline bool hero_soul_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_soul_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_soul_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_soul_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 hero_soul_data::uuid() const {
  return uuid_;
}
inline void hero_soul_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 slot = 2;
inline bool hero_soul_data::has_slot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_soul_data::set_has_slot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_soul_data::clear_has_slot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_soul_data::clear_slot() {
  slot_ = 0;
  clear_has_slot();
}
inline ::google::protobuf::int32 hero_soul_data::slot() const {
  return slot_;
}
inline void hero_soul_data::set_slot(::google::protobuf::int32 value) {
  set_has_slot();
  slot_ = value;
}

// -------------------------------------------------------------------

// bag_data

// repeated uint64 item_ids = 1;
inline int bag_data::item_ids_size() const {
  return item_ids_.size();
}
inline void bag_data::clear_item_ids() {
  item_ids_.Clear();
}
inline ::google::protobuf::uint64 bag_data::item_ids(int index) const {
  return item_ids_.Get(index);
}
inline void bag_data::set_item_ids(int index, ::google::protobuf::uint64 value) {
  item_ids_.Set(index, value);
}
inline void bag_data::add_item_ids(::google::protobuf::uint64 value) {
  item_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
bag_data::item_ids() const {
  return item_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
bag_data::mutable_item_ids() {
  return &item_ids_;
}

// -------------------------------------------------------------------

// unit_hero_data

// optional uint32 db_mode = 1;
inline bool unit_hero_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_hero_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_hero_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_hero_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_hero_data::db_mode() const {
  return db_mode_;
}
inline void unit_hero_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_hero_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_hero_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_hero_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_hero_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_hero_data::uuid() const {
  return uuid_;
}
inline void unit_hero_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 template_id = 3;
inline bool unit_hero_data::has_template_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_hero_data::set_has_template_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_hero_data::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_hero_data::clear_template_id() {
  template_id_ = 0u;
  clear_has_template_id();
}
inline ::google::protobuf::uint32 unit_hero_data::template_id() const {
  return template_id_;
}
inline void unit_hero_data::set_template_id(::google::protobuf::uint32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 lv = 4;
inline bool unit_hero_data::has_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void unit_hero_data::set_has_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void unit_hero_data::clear_has_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void unit_hero_data::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 unit_hero_data::lv() const {
  return lv_;
}
inline void unit_hero_data::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 star = 5;
inline bool unit_hero_data::has_star() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void unit_hero_data::set_has_star() {
  _has_bits_[0] |= 0x00000010u;
}
inline void unit_hero_data::clear_has_star() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void unit_hero_data::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 unit_hero_data::star() const {
  return star_;
}
inline void unit_hero_data::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// optional int32 quality = 6;
inline bool unit_hero_data::has_quality() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void unit_hero_data::set_has_quality() {
  _has_bits_[0] |= 0x00000020u;
}
inline void unit_hero_data::clear_has_quality() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void unit_hero_data::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 unit_hero_data::quality() const {
  return quality_;
}
inline void unit_hero_data::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional bool awaken = 7;
inline bool unit_hero_data::has_awaken() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void unit_hero_data::set_has_awaken() {
  _has_bits_[0] |= 0x00000040u;
}
inline void unit_hero_data::clear_has_awaken() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void unit_hero_data::clear_awaken() {
  awaken_ = false;
  clear_has_awaken();
}
inline bool unit_hero_data::awaken() const {
  return awaken_;
}
inline void unit_hero_data::set_awaken(bool value) {
  set_has_awaken();
  awaken_ = value;
}

// optional int32 exp = 8;
inline bool unit_hero_data::has_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void unit_hero_data::set_has_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void unit_hero_data::clear_has_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void unit_hero_data::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 unit_hero_data::exp() const {
  return exp_;
}
inline void unit_hero_data::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional bool locked = 9;
inline bool unit_hero_data::has_locked() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void unit_hero_data::set_has_locked() {
  _has_bits_[0] |= 0x00000100u;
}
inline void unit_hero_data::clear_has_locked() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void unit_hero_data::clear_locked() {
  locked_ = false;
  clear_has_locked();
}
inline bool unit_hero_data::locked() const {
  return locked_;
}
inline void unit_hero_data::set_locked(bool value) {
  set_has_locked();
  locked_ = value;
}

// optional uint32 create_time = 10;
inline bool unit_hero_data::has_create_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void unit_hero_data::set_has_create_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void unit_hero_data::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void unit_hero_data::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 unit_hero_data::create_time() const {
  return create_time_;
}
inline void unit_hero_data::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional .SProtoSpace.skin_data skin_info = 11;
inline bool unit_hero_data::has_skin_info() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void unit_hero_data::set_has_skin_info() {
  _has_bits_[0] |= 0x00000400u;
}
inline void unit_hero_data::clear_has_skin_info() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void unit_hero_data::clear_skin_info() {
  if (skin_info_ != NULL) skin_info_->::SProtoSpace::skin_data::Clear();
  clear_has_skin_info();
}
inline const ::SProtoSpace::skin_data& unit_hero_data::skin_info() const {
  return skin_info_ != NULL ? *skin_info_ : *default_instance_->skin_info_;
}
inline ::SProtoSpace::skin_data* unit_hero_data::mutable_skin_info() {
  set_has_skin_info();
  if (skin_info_ == NULL) skin_info_ = new ::SProtoSpace::skin_data;
  return skin_info_;
}
inline ::SProtoSpace::skin_data* unit_hero_data::release_skin_info() {
  clear_has_skin_info();
  ::SProtoSpace::skin_data* temp = skin_info_;
  skin_info_ = NULL;
  return temp;
}
inline void unit_hero_data::set_allocated_skin_info(::SProtoSpace::skin_data* skin_info) {
  delete skin_info_;
  skin_info_ = skin_info;
  if (skin_info) {
    set_has_skin_info();
  } else {
    clear_has_skin_info();
  }
}

// repeated .SProtoSpace.skill_data skills = 12;
inline int unit_hero_data::skills_size() const {
  return skills_.size();
}
inline void unit_hero_data::clear_skills() {
  skills_.Clear();
}
inline const ::SProtoSpace::skill_data& unit_hero_data::skills(int index) const {
  return skills_.Get(index);
}
inline ::SProtoSpace::skill_data* unit_hero_data::mutable_skills(int index) {
  return skills_.Mutable(index);
}
inline ::SProtoSpace::skill_data* unit_hero_data::add_skills() {
  return skills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::skill_data >&
unit_hero_data::skills() const {
  return skills_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::skill_data >*
unit_hero_data::mutable_skills() {
  return &skills_;
}

// repeated .SProtoSpace.hero_soul_data souls = 13;
inline int unit_hero_data::souls_size() const {
  return souls_.size();
}
inline void unit_hero_data::clear_souls() {
  souls_.Clear();
}
inline const ::SProtoSpace::hero_soul_data& unit_hero_data::souls(int index) const {
  return souls_.Get(index);
}
inline ::SProtoSpace::hero_soul_data* unit_hero_data::mutable_souls(int index) {
  return souls_.Mutable(index);
}
inline ::SProtoSpace::hero_soul_data* unit_hero_data::add_souls() {
  return souls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_soul_data >&
unit_hero_data::souls() const {
  return souls_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_soul_data >*
unit_hero_data::mutable_souls() {
  return &souls_;
}

// repeated .SProtoSpace.hero_attr_value awaken_attr = 14;
inline int unit_hero_data::awaken_attr_size() const {
  return awaken_attr_.size();
}
inline void unit_hero_data::clear_awaken_attr() {
  awaken_attr_.Clear();
}
inline const ::SProtoSpace::hero_attr_value& unit_hero_data::awaken_attr(int index) const {
  return awaken_attr_.Get(index);
}
inline ::SProtoSpace::hero_attr_value* unit_hero_data::mutable_awaken_attr(int index) {
  return awaken_attr_.Mutable(index);
}
inline ::SProtoSpace::hero_attr_value* unit_hero_data::add_awaken_attr() {
  return awaken_attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value >&
unit_hero_data::awaken_attr() const {
  return awaken_attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value >*
unit_hero_data::mutable_awaken_attr() {
  return &awaken_attr_;
}

// optional string name = 15;
inline bool unit_hero_data::has_name() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void unit_hero_data::set_has_name() {
  _has_bits_[0] |= 0x00004000u;
}
inline void unit_hero_data::clear_has_name() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void unit_hero_data::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& unit_hero_data::name() const {
  return *name_;
}
inline void unit_hero_data::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void unit_hero_data::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void unit_hero_data::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* unit_hero_data::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* unit_hero_data::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void unit_hero_data::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .SProtoSpace.hero_equip_data equips = 16;
inline int unit_hero_data::equips_size() const {
  return equips_.size();
}
inline void unit_hero_data::clear_equips() {
  equips_.Clear();
}
inline const ::SProtoSpace::hero_equip_data& unit_hero_data::equips(int index) const {
  return equips_.Get(index);
}
inline ::SProtoSpace::hero_equip_data* unit_hero_data::mutable_equips(int index) {
  return equips_.Mutable(index);
}
inline ::SProtoSpace::hero_equip_data* unit_hero_data::add_equips() {
  return equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >&
unit_hero_data::equips() const {
  return equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >*
unit_hero_data::mutable_equips() {
  return &equips_;
}

// repeated .SProtoSpace.talisman_data talismans = 17;
inline int unit_hero_data::talismans_size() const {
  return talismans_.size();
}
inline void unit_hero_data::clear_talismans() {
  talismans_.Clear();
}
inline const ::SProtoSpace::talisman_data& unit_hero_data::talismans(int index) const {
  return talismans_.Get(index);
}
inline ::SProtoSpace::talisman_data* unit_hero_data::mutable_talismans(int index) {
  return talismans_.Mutable(index);
}
inline ::SProtoSpace::talisman_data* unit_hero_data::add_talismans() {
  return talismans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talisman_data >&
unit_hero_data::talismans() const {
  return talismans_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talisman_data >*
unit_hero_data::mutable_talismans() {
  return &talismans_;
}

// optional .SProtoSpace.bag_data bag = 18;
inline bool unit_hero_data::has_bag() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void unit_hero_data::set_has_bag() {
  _has_bits_[0] |= 0x00020000u;
}
inline void unit_hero_data::clear_has_bag() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void unit_hero_data::clear_bag() {
  if (bag_ != NULL) bag_->::SProtoSpace::bag_data::Clear();
  clear_has_bag();
}
inline const ::SProtoSpace::bag_data& unit_hero_data::bag() const {
  return bag_ != NULL ? *bag_ : *default_instance_->bag_;
}
inline ::SProtoSpace::bag_data* unit_hero_data::mutable_bag() {
  set_has_bag();
  if (bag_ == NULL) bag_ = new ::SProtoSpace::bag_data;
  return bag_;
}
inline ::SProtoSpace::bag_data* unit_hero_data::release_bag() {
  clear_has_bag();
  ::SProtoSpace::bag_data* temp = bag_;
  bag_ = NULL;
  return temp;
}
inline void unit_hero_data::set_allocated_bag(::SProtoSpace::bag_data* bag) {
  delete bag_;
  bag_ = bag;
  if (bag) {
    set_has_bag();
  } else {
    clear_has_bag();
  }
}

// -------------------------------------------------------------------

// unit_formation_data

// optional uint32 db_mode = 1;
inline bool unit_formation_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_formation_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_formation_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_formation_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_formation_data::db_mode() const {
  return db_mode_;
}
inline void unit_formation_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_formation_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_formation_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_formation_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_formation_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_formation_data::uuid() const {
  return uuid_;
}
inline void unit_formation_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 type = 3;
inline bool unit_formation_data::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_formation_data::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_formation_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_formation_data::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 unit_formation_data::type() const {
  return type_;
}
inline void unit_formation_data::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// repeated uint64 hero_ids = 4;
inline int unit_formation_data::hero_ids_size() const {
  return hero_ids_.size();
}
inline void unit_formation_data::clear_hero_ids() {
  hero_ids_.Clear();
}
inline ::google::protobuf::uint64 unit_formation_data::hero_ids(int index) const {
  return hero_ids_.Get(index);
}
inline void unit_formation_data::set_hero_ids(int index, ::google::protobuf::uint64 value) {
  hero_ids_.Set(index, value);
}
inline void unit_formation_data::add_hero_ids(::google::protobuf::uint64 value) {
  hero_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
unit_formation_data::hero_ids() const {
  return hero_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
unit_formation_data::mutable_hero_ids() {
  return &hero_ids_;
}

// optional int32 role_position = 5;
inline bool unit_formation_data::has_role_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void unit_formation_data::set_has_role_position() {
  _has_bits_[0] |= 0x00000010u;
}
inline void unit_formation_data::clear_has_role_position() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void unit_formation_data::clear_role_position() {
  role_position_ = 0;
  clear_has_role_position();
}
inline ::google::protobuf::int32 unit_formation_data::role_position() const {
  return role_position_;
}
inline void unit_formation_data::set_role_position(::google::protobuf::int32 value) {
  set_has_role_position();
  role_position_ = value;
}

// -------------------------------------------------------------------

// unit_role_pet_data

// optional uint32 db_mode = 1;
inline bool unit_role_pet_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_role_pet_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_role_pet_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_role_pet_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_role_pet_data::db_mode() const {
  return db_mode_;
}
inline void unit_role_pet_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_role_pet_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_role_pet_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_role_pet_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_role_pet_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_role_pet_data::uuid() const {
  return uuid_;
}
inline void unit_role_pet_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional .SProtoSpace.pet_single_data pet_data = 3;
inline bool unit_role_pet_data::has_pet_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_role_pet_data::set_has_pet_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_role_pet_data::clear_has_pet_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_role_pet_data::clear_pet_data() {
  if (pet_data_ != NULL) pet_data_->::SProtoSpace::pet_single_data::Clear();
  clear_has_pet_data();
}
inline const ::SProtoSpace::pet_single_data& unit_role_pet_data::pet_data() const {
  return pet_data_ != NULL ? *pet_data_ : *default_instance_->pet_data_;
}
inline ::SProtoSpace::pet_single_data* unit_role_pet_data::mutable_pet_data() {
  set_has_pet_data();
  if (pet_data_ == NULL) pet_data_ = new ::SProtoSpace::pet_single_data;
  return pet_data_;
}
inline ::SProtoSpace::pet_single_data* unit_role_pet_data::release_pet_data() {
  clear_has_pet_data();
  ::SProtoSpace::pet_single_data* temp = pet_data_;
  pet_data_ = NULL;
  return temp;
}
inline void unit_role_pet_data::set_allocated_pet_data(::SProtoSpace::pet_single_data* pet_data) {
  delete pet_data_;
  pet_data_ = pet_data;
  if (pet_data) {
    set_has_pet_data();
  } else {
    clear_has_pet_data();
  }
}

// -------------------------------------------------------------------

// unit_role_pet_all

// optional uint32 db_mode = 1;
inline bool unit_role_pet_all::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_role_pet_all::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_role_pet_all::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_role_pet_all::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_role_pet_all::db_mode() const {
  return db_mode_;
}
inline void unit_role_pet_all::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_role_pet_all::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_role_pet_all::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_role_pet_all::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_role_pet_all::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_role_pet_all::uuid() const {
  return uuid_;
}
inline void unit_role_pet_all::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 out_time_today = 3;
inline bool unit_role_pet_all::has_out_time_today() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_role_pet_all::set_has_out_time_today() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_role_pet_all::clear_has_out_time_today() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_role_pet_all::clear_out_time_today() {
  out_time_today_ = 0;
  clear_has_out_time_today();
}
inline ::google::protobuf::int32 unit_role_pet_all::out_time_today() const {
  return out_time_today_;
}
inline void unit_role_pet_all::set_out_time_today(::google::protobuf::int32 value) {
  set_has_out_time_today();
  out_time_today_ = value;
}

// optional uint32 last_reset_time = 4;
inline bool unit_role_pet_all::has_last_reset_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void unit_role_pet_all::set_has_last_reset_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void unit_role_pet_all::clear_has_last_reset_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void unit_role_pet_all::clear_last_reset_time() {
  last_reset_time_ = 0u;
  clear_has_last_reset_time();
}
inline ::google::protobuf::uint32 unit_role_pet_all::last_reset_time() const {
  return last_reset_time_;
}
inline void unit_role_pet_all::set_last_reset_time(::google::protobuf::uint32 value) {
  set_has_last_reset_time();
  last_reset_time_ = value;
}

// optional uint32 next_out_time = 5;
inline bool unit_role_pet_all::has_next_out_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void unit_role_pet_all::set_has_next_out_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void unit_role_pet_all::clear_has_next_out_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void unit_role_pet_all::clear_next_out_time() {
  next_out_time_ = 0u;
  clear_has_next_out_time();
}
inline ::google::protobuf::uint32 unit_role_pet_all::next_out_time() const {
  return next_out_time_;
}
inline void unit_role_pet_all::set_next_out_time(::google::protobuf::uint32 value) {
  set_has_next_out_time();
  next_out_time_ = value;
}

// optional int32 cur_show_pet_id = 6;
inline bool unit_role_pet_all::has_cur_show_pet_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void unit_role_pet_all::set_has_cur_show_pet_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void unit_role_pet_all::clear_has_cur_show_pet_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void unit_role_pet_all::clear_cur_show_pet_id() {
  cur_show_pet_id_ = 0;
  clear_has_cur_show_pet_id();
}
inline ::google::protobuf::int32 unit_role_pet_all::cur_show_pet_id() const {
  return cur_show_pet_id_;
}
inline void unit_role_pet_all::set_cur_show_pet_id(::google::protobuf::int32 value) {
  set_has_cur_show_pet_id();
  cur_show_pet_id_ = value;
}

// -------------------------------------------------------------------

// role_hero_data

// repeated .SProtoSpace.unit_hero_data heros = 1;
inline int role_hero_data::heros_size() const {
  return heros_.size();
}
inline void role_hero_data::clear_heros() {
  heros_.Clear();
}
inline const ::SProtoSpace::unit_hero_data& role_hero_data::heros(int index) const {
  return heros_.Get(index);
}
inline ::SProtoSpace::unit_hero_data* role_hero_data::mutable_heros(int index) {
  return heros_.Mutable(index);
}
inline ::SProtoSpace::unit_hero_data* role_hero_data::add_heros() {
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_hero_data >&
role_hero_data::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_hero_data >*
role_hero_data::mutable_heros() {
  return &heros_;
}

// repeated .SProtoSpace.unit_formation_data formations = 2;
inline int role_hero_data::formations_size() const {
  return formations_.size();
}
inline void role_hero_data::clear_formations() {
  formations_.Clear();
}
inline const ::SProtoSpace::unit_formation_data& role_hero_data::formations(int index) const {
  return formations_.Get(index);
}
inline ::SProtoSpace::unit_formation_data* role_hero_data::mutable_formations(int index) {
  return formations_.Mutable(index);
}
inline ::SProtoSpace::unit_formation_data* role_hero_data::add_formations() {
  return formations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_formation_data >&
role_hero_data::formations() const {
  return formations_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_formation_data >*
role_hero_data::mutable_formations() {
  return &formations_;
}

// repeated .SProtoSpace.unit_role_pet_data pet_s = 3;
inline int role_hero_data::pet_s_size() const {
  return pet_s_.size();
}
inline void role_hero_data::clear_pet_s() {
  pet_s_.Clear();
}
inline const ::SProtoSpace::unit_role_pet_data& role_hero_data::pet_s(int index) const {
  return pet_s_.Get(index);
}
inline ::SProtoSpace::unit_role_pet_data* role_hero_data::mutable_pet_s(int index) {
  return pet_s_.Mutable(index);
}
inline ::SProtoSpace::unit_role_pet_data* role_hero_data::add_pet_s() {
  return pet_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_role_pet_data >&
role_hero_data::pet_s() const {
  return pet_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_role_pet_data >*
role_hero_data::mutable_pet_s() {
  return &pet_s_;
}

// repeated .SProtoSpace.unit_role_pet_all pet_all = 4;
inline int role_hero_data::pet_all_size() const {
  return pet_all_.size();
}
inline void role_hero_data::clear_pet_all() {
  pet_all_.Clear();
}
inline const ::SProtoSpace::unit_role_pet_all& role_hero_data::pet_all(int index) const {
  return pet_all_.Get(index);
}
inline ::SProtoSpace::unit_role_pet_all* role_hero_data::mutable_pet_all(int index) {
  return pet_all_.Mutable(index);
}
inline ::SProtoSpace::unit_role_pet_all* role_hero_data::add_pet_all() {
  return pet_all_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_role_pet_all >&
role_hero_data::pet_all() const {
  return pet_all_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_role_pet_all >*
role_hero_data::mutable_pet_all() {
  return &pet_all_;
}

// -------------------------------------------------------------------

// unit_quest_data

// optional uint32 db_mode = 1;
inline bool unit_quest_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_quest_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_quest_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_quest_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_quest_data::db_mode() const {
  return db_mode_;
}
inline void unit_quest_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_quest_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_quest_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_quest_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_quest_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_quest_data::uuid() const {
  return uuid_;
}
inline void unit_quest_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional .SProtoSpace.quest_data data = 3;
inline bool unit_quest_data::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_quest_data::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_quest_data::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_quest_data::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::quest_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::quest_data& unit_quest_data::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::quest_data* unit_quest_data::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::quest_data;
  return data_;
}
inline ::SProtoSpace::quest_data* unit_quest_data::release_data() {
  clear_has_data();
  ::SProtoSpace::quest_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void unit_quest_data::set_allocated_data(::SProtoSpace::quest_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// unit_activity_data

// optional uint32 db_mode = 1;
inline bool unit_activity_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_activity_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_activity_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_activity_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_activity_data::db_mode() const {
  return db_mode_;
}
inline void unit_activity_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_activity_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_activity_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_activity_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_activity_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_activity_data::uuid() const {
  return uuid_;
}
inline void unit_activity_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 activity_id = 3;
inline bool unit_activity_data::has_activity_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_activity_data::set_has_activity_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_activity_data::clear_has_activity_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_activity_data::clear_activity_id() {
  activity_id_ = 0;
  clear_has_activity_id();
}
inline ::google::protobuf::int32 unit_activity_data::activity_id() const {
  return activity_id_;
}
inline void unit_activity_data::set_activity_id(::google::protobuf::int32 value) {
  set_has_activity_id();
  activity_id_ = value;
}

// optional bool finish = 4;
inline bool unit_activity_data::has_finish() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void unit_activity_data::set_has_finish() {
  _has_bits_[0] |= 0x00000008u;
}
inline void unit_activity_data::clear_has_finish() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void unit_activity_data::clear_finish() {
  finish_ = false;
  clear_has_finish();
}
inline bool unit_activity_data::finish() const {
  return finish_;
}
inline void unit_activity_data::set_finish(bool value) {
  set_has_finish();
  finish_ = value;
}

// -------------------------------------------------------------------

// unit_achieve_pt_award_data

// optional uint32 db_mode = 1;
inline bool unit_achieve_pt_award_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_achieve_pt_award_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_achieve_pt_award_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_achieve_pt_award_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_achieve_pt_award_data::db_mode() const {
  return db_mode_;
}
inline void unit_achieve_pt_award_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_achieve_pt_award_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_achieve_pt_award_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_achieve_pt_award_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_achieve_pt_award_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_achieve_pt_award_data::uuid() const {
  return uuid_;
}
inline void unit_achieve_pt_award_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 award_id = 3;
inline bool unit_achieve_pt_award_data::has_award_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_achieve_pt_award_data::set_has_award_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_achieve_pt_award_data::clear_has_award_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_achieve_pt_award_data::clear_award_id() {
  award_id_ = 0;
  clear_has_award_id();
}
inline ::google::protobuf::int32 unit_achieve_pt_award_data::award_id() const {
  return award_id_;
}
inline void unit_achieve_pt_award_data::set_award_id(::google::protobuf::int32 value) {
  set_has_award_id();
  award_id_ = value;
}

// optional bool finish = 4;
inline bool unit_achieve_pt_award_data::has_finish() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void unit_achieve_pt_award_data::set_has_finish() {
  _has_bits_[0] |= 0x00000008u;
}
inline void unit_achieve_pt_award_data::clear_has_finish() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void unit_achieve_pt_award_data::clear_finish() {
  finish_ = false;
  clear_has_finish();
}
inline bool unit_achieve_pt_award_data::finish() const {
  return finish_;
}
inline void unit_achieve_pt_award_data::set_finish(bool value) {
  set_has_finish();
  finish_ = value;
}

// -------------------------------------------------------------------

// role_quest_data

// repeated .SProtoSpace.unit_quest_data quests = 1;
inline int role_quest_data::quests_size() const {
  return quests_.size();
}
inline void role_quest_data::clear_quests() {
  quests_.Clear();
}
inline const ::SProtoSpace::unit_quest_data& role_quest_data::quests(int index) const {
  return quests_.Get(index);
}
inline ::SProtoSpace::unit_quest_data* role_quest_data::mutable_quests(int index) {
  return quests_.Mutable(index);
}
inline ::SProtoSpace::unit_quest_data* role_quest_data::add_quests() {
  return quests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_quest_data >&
role_quest_data::quests() const {
  return quests_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_quest_data >*
role_quest_data::mutable_quests() {
  return &quests_;
}

// repeated .SProtoSpace.unit_activity_data activities = 2;
inline int role_quest_data::activities_size() const {
  return activities_.size();
}
inline void role_quest_data::clear_activities() {
  activities_.Clear();
}
inline const ::SProtoSpace::unit_activity_data& role_quest_data::activities(int index) const {
  return activities_.Get(index);
}
inline ::SProtoSpace::unit_activity_data* role_quest_data::mutable_activities(int index) {
  return activities_.Mutable(index);
}
inline ::SProtoSpace::unit_activity_data* role_quest_data::add_activities() {
  return activities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_activity_data >&
role_quest_data::activities() const {
  return activities_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_activity_data >*
role_quest_data::mutable_activities() {
  return &activities_;
}

// repeated .SProtoSpace.unit_achieve_pt_award_data pt_awards = 3;
inline int role_quest_data::pt_awards_size() const {
  return pt_awards_.size();
}
inline void role_quest_data::clear_pt_awards() {
  pt_awards_.Clear();
}
inline const ::SProtoSpace::unit_achieve_pt_award_data& role_quest_data::pt_awards(int index) const {
  return pt_awards_.Get(index);
}
inline ::SProtoSpace::unit_achieve_pt_award_data* role_quest_data::mutable_pt_awards(int index) {
  return pt_awards_.Mutable(index);
}
inline ::SProtoSpace::unit_achieve_pt_award_data* role_quest_data::add_pt_awards() {
  return pt_awards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_achieve_pt_award_data >&
role_quest_data::pt_awards() const {
  return pt_awards_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_achieve_pt_award_data >*
role_quest_data::mutable_pt_awards() {
  return &pt_awards_;
}

// -------------------------------------------------------------------

// db_drop_spid

// optional int32 id = 1;
inline bool db_drop_spid::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_drop_spid::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_drop_spid::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_drop_spid::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 db_drop_spid::id() const {
  return id_;
}
inline void db_drop_spid::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 step = 2;
inline bool db_drop_spid::has_step() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_drop_spid::set_has_step() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_drop_spid::clear_has_step() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_drop_spid::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::google::protobuf::int32 db_drop_spid::step() const {
  return step_;
}
inline void db_drop_spid::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
}

// optional int32 value = 3;
inline bool db_drop_spid::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_drop_spid::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_drop_spid::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_drop_spid::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 db_drop_spid::value() const {
  return value_;
}
inline void db_drop_spid::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// unit_soul_attr

// optional uint32 template_id = 1;
inline bool unit_soul_attr::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_soul_attr::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_soul_attr::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_soul_attr::clear_template_id() {
  template_id_ = 0u;
  clear_has_template_id();
}
inline ::google::protobuf::uint32 unit_soul_attr::template_id() const {
  return template_id_;
}
inline void unit_soul_attr::set_template_id(::google::protobuf::uint32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 init_value = 2;
inline bool unit_soul_attr::has_init_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_soul_attr::set_has_init_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_soul_attr::clear_has_init_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_soul_attr::clear_init_value() {
  init_value_ = 0;
  clear_has_init_value();
}
inline ::google::protobuf::int32 unit_soul_attr::init_value() const {
  return init_value_;
}
inline void unit_soul_attr::set_init_value(::google::protobuf::int32 value) {
  set_has_init_value();
  init_value_ = value;
}

// optional int32 cur_value = 3;
inline bool unit_soul_attr::has_cur_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_soul_attr::set_has_cur_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_soul_attr::clear_has_cur_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_soul_attr::clear_cur_value() {
  cur_value_ = 0;
  clear_has_cur_value();
}
inline ::google::protobuf::int32 unit_soul_attr::cur_value() const {
  return cur_value_;
}
inline void unit_soul_attr::set_cur_value(::google::protobuf::int32 value) {
  set_has_cur_value();
  cur_value_ = value;
}

// -------------------------------------------------------------------

// unit_soul_data

// optional uint32 db_mode = 1;
inline bool unit_soul_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_soul_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_soul_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_soul_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_soul_data::db_mode() const {
  return db_mode_;
}
inline void unit_soul_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_soul_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_soul_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_soul_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_soul_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_soul_data::uuid() const {
  return uuid_;
}
inline void unit_soul_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 template_id = 3;
inline bool unit_soul_data::has_template_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_soul_data::set_has_template_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_soul_data::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_soul_data::clear_template_id() {
  template_id_ = 0u;
  clear_has_template_id();
}
inline ::google::protobuf::uint32 unit_soul_data::template_id() const {
  return template_id_;
}
inline void unit_soul_data::set_template_id(::google::protobuf::uint32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional uint32 exp = 4;
inline bool unit_soul_data::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void unit_soul_data::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void unit_soul_data::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void unit_soul_data::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 unit_soul_data::exp() const {
  return exp_;
}
inline void unit_soul_data::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 mask = 5;
inline bool unit_soul_data::has_mask() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void unit_soul_data::set_has_mask() {
  _has_bits_[0] |= 0x00000010u;
}
inline void unit_soul_data::clear_has_mask() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void unit_soul_data::clear_mask() {
  mask_ = 0u;
  clear_has_mask();
}
inline ::google::protobuf::uint32 unit_soul_data::mask() const {
  return mask_;
}
inline void unit_soul_data::set_mask(::google::protobuf::uint32 value) {
  set_has_mask();
  mask_ = value;
}

// optional uint32 create_time = 6;
inline bool unit_soul_data::has_create_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void unit_soul_data::set_has_create_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void unit_soul_data::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void unit_soul_data::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 unit_soul_data::create_time() const {
  return create_time_;
}
inline void unit_soul_data::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// repeated .SProtoSpace.unit_soul_attr main_attrs = 7;
inline int unit_soul_data::main_attrs_size() const {
  return main_attrs_.size();
}
inline void unit_soul_data::clear_main_attrs() {
  main_attrs_.Clear();
}
inline const ::SProtoSpace::unit_soul_attr& unit_soul_data::main_attrs(int index) const {
  return main_attrs_.Get(index);
}
inline ::SProtoSpace::unit_soul_attr* unit_soul_data::mutable_main_attrs(int index) {
  return main_attrs_.Mutable(index);
}
inline ::SProtoSpace::unit_soul_attr* unit_soul_data::add_main_attrs() {
  return main_attrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_soul_attr >&
unit_soul_data::main_attrs() const {
  return main_attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_soul_attr >*
unit_soul_data::mutable_main_attrs() {
  return &main_attrs_;
}

// repeated .SProtoSpace.unit_soul_attr add_attrs = 8;
inline int unit_soul_data::add_attrs_size() const {
  return add_attrs_.size();
}
inline void unit_soul_data::clear_add_attrs() {
  add_attrs_.Clear();
}
inline const ::SProtoSpace::unit_soul_attr& unit_soul_data::add_attrs(int index) const {
  return add_attrs_.Get(index);
}
inline ::SProtoSpace::unit_soul_attr* unit_soul_data::mutable_add_attrs(int index) {
  return add_attrs_.Mutable(index);
}
inline ::SProtoSpace::unit_soul_attr* unit_soul_data::add_add_attrs() {
  return add_attrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_soul_attr >&
unit_soul_data::add_attrs() const {
  return add_attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_soul_attr >*
unit_soul_data::mutable_add_attrs() {
  return &add_attrs_;
}

// -------------------------------------------------------------------

// role_soul_data

// repeated .SProtoSpace.unit_soul_data souls = 1;
inline int role_soul_data::souls_size() const {
  return souls_.size();
}
inline void role_soul_data::clear_souls() {
  souls_.Clear();
}
inline const ::SProtoSpace::unit_soul_data& role_soul_data::souls(int index) const {
  return souls_.Get(index);
}
inline ::SProtoSpace::unit_soul_data* role_soul_data::mutable_souls(int index) {
  return souls_.Mutable(index);
}
inline ::SProtoSpace::unit_soul_data* role_soul_data::add_souls() {
  return souls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_soul_data >&
role_soul_data::souls() const {
  return souls_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_soul_data >*
role_soul_data::mutable_souls() {
  return &souls_;
}

// -------------------------------------------------------------------

// unit_discover_data

// optional uint32 db_mode = 1;
inline bool unit_discover_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_discover_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_discover_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_discover_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_discover_data::db_mode() const {
  return db_mode_;
}
inline void unit_discover_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_discover_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_discover_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_discover_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_discover_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_discover_data::uuid() const {
  return uuid_;
}
inline void unit_discover_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional .SProtoSpace.discover_data discover = 3;
inline bool unit_discover_data::has_discover() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_discover_data::set_has_discover() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_discover_data::clear_has_discover() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_discover_data::clear_discover() {
  if (discover_ != NULL) discover_->::SProtoSpace::discover_data::Clear();
  clear_has_discover();
}
inline const ::SProtoSpace::discover_data& unit_discover_data::discover() const {
  return discover_ != NULL ? *discover_ : *default_instance_->discover_;
}
inline ::SProtoSpace::discover_data* unit_discover_data::mutable_discover() {
  set_has_discover();
  if (discover_ == NULL) discover_ = new ::SProtoSpace::discover_data;
  return discover_;
}
inline ::SProtoSpace::discover_data* unit_discover_data::release_discover() {
  clear_has_discover();
  ::SProtoSpace::discover_data* temp = discover_;
  discover_ = NULL;
  return temp;
}
inline void unit_discover_data::set_allocated_discover(::SProtoSpace::discover_data* discover) {
  delete discover_;
  discover_ = discover;
  if (discover) {
    set_has_discover();
  } else {
    clear_has_discover();
  }
}

// -------------------------------------------------------------------

// unit_chapter_data

// optional uint32 db_mode = 1;
inline bool unit_chapter_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_chapter_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_chapter_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_chapter_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_chapter_data::db_mode() const {
  return db_mode_;
}
inline void unit_chapter_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_chapter_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_chapter_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_chapter_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_chapter_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_chapter_data::uuid() const {
  return uuid_;
}
inline void unit_chapter_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 id = 3;
inline bool unit_chapter_data::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_chapter_data::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_chapter_data::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_chapter_data::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 unit_chapter_data::id() const {
  return id_;
}
inline void unit_chapter_data::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bool simple_open = 4;
inline bool unit_chapter_data::has_simple_open() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void unit_chapter_data::set_has_simple_open() {
  _has_bits_[0] |= 0x00000008u;
}
inline void unit_chapter_data::clear_has_simple_open() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void unit_chapter_data::clear_simple_open() {
  simple_open_ = false;
  clear_has_simple_open();
}
inline bool unit_chapter_data::simple_open() const {
  return simple_open_;
}
inline void unit_chapter_data::set_simple_open(bool value) {
  set_has_simple_open();
  simple_open_ = value;
}

// optional bool diff_open = 5;
inline bool unit_chapter_data::has_diff_open() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void unit_chapter_data::set_has_diff_open() {
  _has_bits_[0] |= 0x00000010u;
}
inline void unit_chapter_data::clear_has_diff_open() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void unit_chapter_data::clear_diff_open() {
  diff_open_ = false;
  clear_has_diff_open();
}
inline bool unit_chapter_data::diff_open() const {
  return diff_open_;
}
inline void unit_chapter_data::set_diff_open(bool value) {
  set_has_diff_open();
  diff_open_ = value;
}

// optional bool simple_pass = 6;
inline bool unit_chapter_data::has_simple_pass() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void unit_chapter_data::set_has_simple_pass() {
  _has_bits_[0] |= 0x00000020u;
}
inline void unit_chapter_data::clear_has_simple_pass() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void unit_chapter_data::clear_simple_pass() {
  simple_pass_ = false;
  clear_has_simple_pass();
}
inline bool unit_chapter_data::simple_pass() const {
  return simple_pass_;
}
inline void unit_chapter_data::set_simple_pass(bool value) {
  set_has_simple_pass();
  simple_pass_ = value;
}

// optional bool diff_pass = 7;
inline bool unit_chapter_data::has_diff_pass() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void unit_chapter_data::set_has_diff_pass() {
  _has_bits_[0] |= 0x00000040u;
}
inline void unit_chapter_data::clear_has_diff_pass() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void unit_chapter_data::clear_diff_pass() {
  diff_pass_ = false;
  clear_has_diff_pass();
}
inline bool unit_chapter_data::diff_pass() const {
  return diff_pass_;
}
inline void unit_chapter_data::set_diff_pass(bool value) {
  set_has_diff_pass();
  diff_pass_ = value;
}

// -------------------------------------------------------------------

// res_instance_data

// optional uint32 instance_index = 1;
inline bool res_instance_data::has_instance_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void res_instance_data::set_has_instance_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void res_instance_data::clear_has_instance_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void res_instance_data::clear_instance_index() {
  instance_index_ = 0u;
  clear_has_instance_index();
}
inline ::google::protobuf::uint32 res_instance_data::instance_index() const {
  return instance_index_;
}
inline void res_instance_data::set_instance_index(::google::protobuf::uint32 value) {
  set_has_instance_index();
  instance_index_ = value;
}

// optional int32 level_index = 2;
inline bool res_instance_data::has_level_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void res_instance_data::set_has_level_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void res_instance_data::clear_has_level_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void res_instance_data::clear_level_index() {
  level_index_ = 0;
  clear_has_level_index();
}
inline ::google::protobuf::int32 res_instance_data::level_index() const {
  return level_index_;
}
inline void res_instance_data::set_level_index(::google::protobuf::int32 value) {
  set_has_level_index();
  level_index_ = value;
}

// repeated .SProtoSpace.discover_monster boss = 3;
inline int res_instance_data::boss_size() const {
  return boss_.size();
}
inline void res_instance_data::clear_boss() {
  boss_.Clear();
}
inline const ::SProtoSpace::discover_monster& res_instance_data::boss(int index) const {
  return boss_.Get(index);
}
inline ::SProtoSpace::discover_monster* res_instance_data::mutable_boss(int index) {
  return boss_.Mutable(index);
}
inline ::SProtoSpace::discover_monster* res_instance_data::add_boss() {
  return boss_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discover_monster >&
res_instance_data::boss() const {
  return boss_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discover_monster >*
res_instance_data::mutable_boss() {
  return &boss_;
}

// -------------------------------------------------------------------

// unit_res_instance_data

// optional uint32 db_mode = 1;
inline bool unit_res_instance_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_res_instance_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_res_instance_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_res_instance_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_res_instance_data::db_mode() const {
  return db_mode_;
}
inline void unit_res_instance_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint32 type = 2;
inline bool unit_res_instance_data::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_res_instance_data::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_res_instance_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_res_instance_data::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 unit_res_instance_data::type() const {
  return type_;
}
inline void unit_res_instance_data::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional .SProtoSpace.res_instance_data data = 3;
inline bool unit_res_instance_data::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_res_instance_data::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_res_instance_data::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_res_instance_data::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::res_instance_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::res_instance_data& unit_res_instance_data::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::res_instance_data* unit_res_instance_data::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::res_instance_data;
  return data_;
}
inline ::SProtoSpace::res_instance_data* unit_res_instance_data::release_data() {
  clear_has_data();
  ::SProtoSpace::res_instance_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void unit_res_instance_data::set_allocated_data(::SProtoSpace::res_instance_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// unit_section_star_data

// optional uint32 db_mode = 1;
inline bool unit_section_star_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_section_star_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_section_star_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_section_star_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_section_star_data::db_mode() const {
  return db_mode_;
}
inline void unit_section_star_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_section_star_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_section_star_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_section_star_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_section_star_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_section_star_data::uuid() const {
  return uuid_;
}
inline void unit_section_star_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 type = 3;
inline bool unit_section_star_data::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_section_star_data::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_section_star_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_section_star_data::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 unit_section_star_data::type() const {
  return type_;
}
inline void unit_section_star_data::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 reward_id = 4;
inline bool unit_section_star_data::has_reward_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void unit_section_star_data::set_has_reward_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void unit_section_star_data::clear_has_reward_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void unit_section_star_data::clear_reward_id() {
  reward_id_ = 0;
  clear_has_reward_id();
}
inline ::google::protobuf::int32 unit_section_star_data::reward_id() const {
  return reward_id_;
}
inline void unit_section_star_data::set_reward_id(::google::protobuf::int32 value) {
  set_has_reward_id();
  reward_id_ = value;
}

// -------------------------------------------------------------------

// unit_tower_data

// optional uint32 db_mode = 1;
inline bool unit_tower_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_tower_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_tower_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_tower_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_tower_data::db_mode() const {
  return db_mode_;
}
inline void unit_tower_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_tower_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_tower_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_tower_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_tower_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_tower_data::uuid() const {
  return uuid_;
}
inline void unit_tower_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 max_floor = 3 [default = 0];
inline bool unit_tower_data::has_max_floor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_tower_data::set_has_max_floor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_tower_data::clear_has_max_floor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_tower_data::clear_max_floor() {
  max_floor_ = 0u;
  clear_has_max_floor();
}
inline ::google::protobuf::uint32 unit_tower_data::max_floor() const {
  return max_floor_;
}
inline void unit_tower_data::set_max_floor(::google::protobuf::uint32 value) {
  set_has_max_floor();
  max_floor_ = value;
}

// optional uint32 reset_times = 4 [default = 1];
inline bool unit_tower_data::has_reset_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void unit_tower_data::set_has_reset_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void unit_tower_data::clear_has_reset_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void unit_tower_data::clear_reset_times() {
  reset_times_ = 1u;
  clear_has_reset_times();
}
inline ::google::protobuf::uint32 unit_tower_data::reset_times() const {
  return reset_times_;
}
inline void unit_tower_data::set_reset_times(::google::protobuf::uint32 value) {
  set_has_reset_times();
  reset_times_ = value;
}

// optional uint32 cur_floor = 5 [default = 1];
inline bool unit_tower_data::has_cur_floor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void unit_tower_data::set_has_cur_floor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void unit_tower_data::clear_has_cur_floor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void unit_tower_data::clear_cur_floor() {
  cur_floor_ = 1u;
  clear_has_cur_floor();
}
inline ::google::protobuf::uint32 unit_tower_data::cur_floor() const {
  return cur_floor_;
}
inline void unit_tower_data::set_cur_floor(::google::protobuf::uint32 value) {
  set_has_cur_floor();
  cur_floor_ = value;
}

// optional uint32 cur_step = 6;
inline bool unit_tower_data::has_cur_step() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void unit_tower_data::set_has_cur_step() {
  _has_bits_[0] |= 0x00000020u;
}
inline void unit_tower_data::clear_has_cur_step() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void unit_tower_data::clear_cur_step() {
  cur_step_ = 0u;
  clear_has_cur_step();
}
inline ::google::protobuf::uint32 unit_tower_data::cur_step() const {
  return cur_step_;
}
inline void unit_tower_data::set_cur_step(::google::protobuf::uint32 value) {
  set_has_cur_step();
  cur_step_ = value;
}

// optional bool first_in = 7;
inline bool unit_tower_data::has_first_in() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void unit_tower_data::set_has_first_in() {
  _has_bits_[0] |= 0x00000040u;
}
inline void unit_tower_data::clear_has_first_in() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void unit_tower_data::clear_first_in() {
  first_in_ = false;
  clear_has_first_in();
}
inline bool unit_tower_data::first_in() const {
  return first_in_;
}
inline void unit_tower_data::set_first_in(bool value) {
  set_has_first_in();
  first_in_ = value;
}

// optional bool step_has_pass = 8;
inline bool unit_tower_data::has_step_has_pass() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void unit_tower_data::set_has_step_has_pass() {
  _has_bits_[0] |= 0x00000080u;
}
inline void unit_tower_data::clear_has_step_has_pass() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void unit_tower_data::clear_step_has_pass() {
  step_has_pass_ = false;
  clear_has_step_has_pass();
}
inline bool unit_tower_data::step_has_pass() const {
  return step_has_pass_;
}
inline void unit_tower_data::set_step_has_pass(bool value) {
  set_has_step_has_pass();
  step_has_pass_ = value;
}

// -------------------------------------------------------------------

// hero_event_info

// optional int32 hero_id = 1;
inline bool hero_event_info::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_event_info::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_event_info::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_event_info::clear_hero_id() {
  hero_id_ = 0;
  clear_has_hero_id();
}
inline ::google::protobuf::int32 hero_event_info::hero_id() const {
  return hero_id_;
}
inline void hero_event_info::set_hero_id(::google::protobuf::int32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// repeated int32 event_ids = 2;
inline int hero_event_info::event_ids_size() const {
  return event_ids_.size();
}
inline void hero_event_info::clear_event_ids() {
  event_ids_.Clear();
}
inline ::google::protobuf::int32 hero_event_info::event_ids(int index) const {
  return event_ids_.Get(index);
}
inline void hero_event_info::set_event_ids(int index, ::google::protobuf::int32 value) {
  event_ids_.Set(index, value);
}
inline void hero_event_info::add_event_ids(::google::protobuf::int32 value) {
  event_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
hero_event_info::event_ids() const {
  return event_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
hero_event_info::mutable_event_ids() {
  return &event_ids_;
}

// -------------------------------------------------------------------

// city_event_info

// optional int32 city_id = 1;
inline bool city_event_info::has_city_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void city_event_info::set_has_city_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void city_event_info::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void city_event_info::clear_city_id() {
  city_id_ = 0;
  clear_has_city_id();
}
inline ::google::protobuf::int32 city_event_info::city_id() const {
  return city_id_;
}
inline void city_event_info::set_city_id(::google::protobuf::int32 value) {
  set_has_city_id();
  city_id_ = value;
}

// repeated int32 event_ids = 2;
inline int city_event_info::event_ids_size() const {
  return event_ids_.size();
}
inline void city_event_info::clear_event_ids() {
  event_ids_.Clear();
}
inline ::google::protobuf::int32 city_event_info::event_ids(int index) const {
  return event_ids_.Get(index);
}
inline void city_event_info::set_event_ids(int index, ::google::protobuf::int32 value) {
  event_ids_.Set(index, value);
}
inline void city_event_info::add_event_ids(::google::protobuf::int32 value) {
  event_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
city_event_info::event_ids() const {
  return event_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
city_event_info::mutable_event_ids() {
  return &event_ids_;
}

// -------------------------------------------------------------------

// special_event_data

// optional int32 event_id = 1;
inline bool special_event_data::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void special_event_data::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void special_event_data::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void special_event_data::clear_event_id() {
  event_id_ = 0;
  clear_has_event_id();
}
inline ::google::protobuf::int32 special_event_data::event_id() const {
  return event_id_;
}
inline void special_event_data::set_event_id(::google::protobuf::int32 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional int32 shi_chen = 2;
inline bool special_event_data::has_shi_chen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void special_event_data::set_has_shi_chen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void special_event_data::clear_has_shi_chen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void special_event_data::clear_shi_chen() {
  shi_chen_ = 0;
  clear_has_shi_chen();
}
inline ::google::protobuf::int32 special_event_data::shi_chen() const {
  return shi_chen_;
}
inline void special_event_data::set_shi_chen(::google::protobuf::int32 value) {
  set_has_shi_chen();
  shi_chen_ = value;
}

// optional int32 weather = 3;
inline bool special_event_data::has_weather() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void special_event_data::set_has_weather() {
  _has_bits_[0] |= 0x00000004u;
}
inline void special_event_data::clear_has_weather() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void special_event_data::clear_weather() {
  weather_ = 0;
  clear_has_weather();
}
inline ::google::protobuf::int32 special_event_data::weather() const {
  return weather_;
}
inline void special_event_data::set_weather(::google::protobuf::int32 value) {
  set_has_weather();
  weather_ = value;
}

// -------------------------------------------------------------------

// unit_adv_data

// optional uint32 db_mode = 1;
inline bool unit_adv_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_adv_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_adv_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_adv_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_adv_data::db_mode() const {
  return db_mode_;
}
inline void unit_adv_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_adv_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_adv_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_adv_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_adv_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_adv_data::uuid() const {
  return uuid_;
}
inline void unit_adv_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// repeated int32 city_ids = 5;
inline int unit_adv_data::city_ids_size() const {
  return city_ids_.size();
}
inline void unit_adv_data::clear_city_ids() {
  city_ids_.Clear();
}
inline ::google::protobuf::int32 unit_adv_data::city_ids(int index) const {
  return city_ids_.Get(index);
}
inline void unit_adv_data::set_city_ids(int index, ::google::protobuf::int32 value) {
  city_ids_.Set(index, value);
}
inline void unit_adv_data::add_city_ids(::google::protobuf::int32 value) {
  city_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
unit_adv_data::city_ids() const {
  return city_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
unit_adv_data::mutable_city_ids() {
  return &city_ids_;
}

// repeated int32 event_ids = 6;
inline int unit_adv_data::event_ids_size() const {
  return event_ids_.size();
}
inline void unit_adv_data::clear_event_ids() {
  event_ids_.Clear();
}
inline ::google::protobuf::int32 unit_adv_data::event_ids(int index) const {
  return event_ids_.Get(index);
}
inline void unit_adv_data::set_event_ids(int index, ::google::protobuf::int32 value) {
  event_ids_.Set(index, value);
}
inline void unit_adv_data::add_event_ids(::google::protobuf::int32 value) {
  event_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
unit_adv_data::event_ids() const {
  return event_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
unit_adv_data::mutable_event_ids() {
  return &event_ids_;
}

// repeated .SProtoSpace.hero_favor_info hero_favors = 7;
inline int unit_adv_data::hero_favors_size() const {
  return hero_favors_.size();
}
inline void unit_adv_data::clear_hero_favors() {
  hero_favors_.Clear();
}
inline const ::SProtoSpace::hero_favor_info& unit_adv_data::hero_favors(int index) const {
  return hero_favors_.Get(index);
}
inline ::SProtoSpace::hero_favor_info* unit_adv_data::mutable_hero_favors(int index) {
  return hero_favors_.Mutable(index);
}
inline ::SProtoSpace::hero_favor_info* unit_adv_data::add_hero_favors() {
  return hero_favors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_favor_info >&
unit_adv_data::hero_favors() const {
  return hero_favors_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_favor_info >*
unit_adv_data::mutable_hero_favors() {
  return &hero_favors_;
}

// repeated .SProtoSpace.hero_event_info hero_events = 8;
inline int unit_adv_data::hero_events_size() const {
  return hero_events_.size();
}
inline void unit_adv_data::clear_hero_events() {
  hero_events_.Clear();
}
inline const ::SProtoSpace::hero_event_info& unit_adv_data::hero_events(int index) const {
  return hero_events_.Get(index);
}
inline ::SProtoSpace::hero_event_info* unit_adv_data::mutable_hero_events(int index) {
  return hero_events_.Mutable(index);
}
inline ::SProtoSpace::hero_event_info* unit_adv_data::add_hero_events() {
  return hero_events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_event_info >&
unit_adv_data::hero_events() const {
  return hero_events_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_event_info >*
unit_adv_data::mutable_hero_events() {
  return &hero_events_;
}

// repeated .SProtoSpace.city_event_info city_events = 9;
inline int unit_adv_data::city_events_size() const {
  return city_events_.size();
}
inline void unit_adv_data::clear_city_events() {
  city_events_.Clear();
}
inline const ::SProtoSpace::city_event_info& unit_adv_data::city_events(int index) const {
  return city_events_.Get(index);
}
inline ::SProtoSpace::city_event_info* unit_adv_data::mutable_city_events(int index) {
  return city_events_.Mutable(index);
}
inline ::SProtoSpace::city_event_info* unit_adv_data::add_city_events() {
  return city_events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::city_event_info >&
unit_adv_data::city_events() const {
  return city_events_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::city_event_info >*
unit_adv_data::mutable_city_events() {
  return &city_events_;
}

// repeated int32 cur_ask_ids = 10;
inline int unit_adv_data::cur_ask_ids_size() const {
  return cur_ask_ids_.size();
}
inline void unit_adv_data::clear_cur_ask_ids() {
  cur_ask_ids_.Clear();
}
inline ::google::protobuf::int32 unit_adv_data::cur_ask_ids(int index) const {
  return cur_ask_ids_.Get(index);
}
inline void unit_adv_data::set_cur_ask_ids(int index, ::google::protobuf::int32 value) {
  cur_ask_ids_.Set(index, value);
}
inline void unit_adv_data::add_cur_ask_ids(::google::protobuf::int32 value) {
  cur_ask_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
unit_adv_data::cur_ask_ids() const {
  return cur_ask_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
unit_adv_data::mutable_cur_ask_ids() {
  return &cur_ask_ids_;
}

// repeated .SProtoSpace.special_event_data sp_data = 11;
inline int unit_adv_data::sp_data_size() const {
  return sp_data_.size();
}
inline void unit_adv_data::clear_sp_data() {
  sp_data_.Clear();
}
inline const ::SProtoSpace::special_event_data& unit_adv_data::sp_data(int index) const {
  return sp_data_.Get(index);
}
inline ::SProtoSpace::special_event_data* unit_adv_data::mutable_sp_data(int index) {
  return sp_data_.Mutable(index);
}
inline ::SProtoSpace::special_event_data* unit_adv_data::add_sp_data() {
  return sp_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::special_event_data >&
unit_adv_data::sp_data() const {
  return sp_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::special_event_data >*
unit_adv_data::mutable_sp_data() {
  return &sp_data_;
}

// -------------------------------------------------------------------

// guide_step_data

// optional int32 step_id = 1;
inline bool guide_step_data::has_step_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void guide_step_data::set_has_step_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void guide_step_data::clear_has_step_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void guide_step_data::clear_step_id() {
  step_id_ = 0;
  clear_has_step_id();
}
inline ::google::protobuf::int32 guide_step_data::step_id() const {
  return step_id_;
}
inline void guide_step_data::set_step_id(::google::protobuf::int32 value) {
  set_has_step_id();
  step_id_ = value;
}

// optional bool skip = 2;
inline bool guide_step_data::has_skip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void guide_step_data::set_has_skip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void guide_step_data::clear_has_skip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void guide_step_data::clear_skip() {
  skip_ = false;
  clear_has_skip();
}
inline bool guide_step_data::skip() const {
  return skip_;
}
inline void guide_step_data::set_skip(bool value) {
  set_has_skip();
  skip_ = value;
}

// -------------------------------------------------------------------

// unit_guide_data

// optional uint32 db_mode = 1;
inline bool unit_guide_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_guide_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_guide_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_guide_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_guide_data::db_mode() const {
  return db_mode_;
}
inline void unit_guide_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_guide_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_guide_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_guide_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_guide_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_guide_data::uuid() const {
  return uuid_;
}
inline void unit_guide_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 guide_id = 3;
inline bool unit_guide_data::has_guide_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_guide_data::set_has_guide_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_guide_data::clear_has_guide_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_guide_data::clear_guide_id() {
  guide_id_ = 0;
  clear_has_guide_id();
}
inline ::google::protobuf::int32 unit_guide_data::guide_id() const {
  return guide_id_;
}
inline void unit_guide_data::set_guide_id(::google::protobuf::int32 value) {
  set_has_guide_id();
  guide_id_ = value;
}

// optional bool skip = 4;
inline bool unit_guide_data::has_skip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void unit_guide_data::set_has_skip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void unit_guide_data::clear_has_skip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void unit_guide_data::clear_skip() {
  skip_ = false;
  clear_has_skip();
}
inline bool unit_guide_data::skip() const {
  return skip_;
}
inline void unit_guide_data::set_skip(bool value) {
  set_has_skip();
  skip_ = value;
}

// repeated .SProtoSpace.guide_step_data step_data = 5;
inline int unit_guide_data::step_data_size() const {
  return step_data_.size();
}
inline void unit_guide_data::clear_step_data() {
  step_data_.Clear();
}
inline const ::SProtoSpace::guide_step_data& unit_guide_data::step_data(int index) const {
  return step_data_.Get(index);
}
inline ::SProtoSpace::guide_step_data* unit_guide_data::mutable_step_data(int index) {
  return step_data_.Mutable(index);
}
inline ::SProtoSpace::guide_step_data* unit_guide_data::add_step_data() {
  return step_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::guide_step_data >&
unit_guide_data::step_data() const {
  return step_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::guide_step_data >*
unit_guide_data::mutable_step_data() {
  return &step_data_;
}

// -------------------------------------------------------------------

// unit_plot_little_game_data

// optional uint32 db_mode = 1;
inline bool unit_plot_little_game_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_plot_little_game_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_plot_little_game_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_plot_little_game_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_plot_little_game_data::db_mode() const {
  return db_mode_;
}
inline void unit_plot_little_game_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_plot_little_game_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_plot_little_game_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_plot_little_game_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_plot_little_game_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_plot_little_game_data::uuid() const {
  return uuid_;
}
inline void unit_plot_little_game_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional .SProtoSpace.single_plot_little_game data = 3;
inline bool unit_plot_little_game_data::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_plot_little_game_data::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_plot_little_game_data::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_plot_little_game_data::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::single_plot_little_game::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::single_plot_little_game& unit_plot_little_game_data::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::single_plot_little_game* unit_plot_little_game_data::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::single_plot_little_game;
  return data_;
}
inline ::SProtoSpace::single_plot_little_game* unit_plot_little_game_data::release_data() {
  clear_has_data();
  ::SProtoSpace::single_plot_little_game* temp = data_;
  data_ = NULL;
  return temp;
}
inline void unit_plot_little_game_data::set_allocated_data(::SProtoSpace::single_plot_little_game* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// role_level_data

// repeated .SProtoSpace.unit_discover_data discovers = 1;
inline int role_level_data::discovers_size() const {
  return discovers_.size();
}
inline void role_level_data::clear_discovers() {
  discovers_.Clear();
}
inline const ::SProtoSpace::unit_discover_data& role_level_data::discovers(int index) const {
  return discovers_.Get(index);
}
inline ::SProtoSpace::unit_discover_data* role_level_data::mutable_discovers(int index) {
  return discovers_.Mutable(index);
}
inline ::SProtoSpace::unit_discover_data* role_level_data::add_discovers() {
  return discovers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_discover_data >&
role_level_data::discovers() const {
  return discovers_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_discover_data >*
role_level_data::mutable_discovers() {
  return &discovers_;
}

// repeated .SProtoSpace.unit_chapter_data chapters = 2;
inline int role_level_data::chapters_size() const {
  return chapters_.size();
}
inline void role_level_data::clear_chapters() {
  chapters_.Clear();
}
inline const ::SProtoSpace::unit_chapter_data& role_level_data::chapters(int index) const {
  return chapters_.Get(index);
}
inline ::SProtoSpace::unit_chapter_data* role_level_data::mutable_chapters(int index) {
  return chapters_.Mutable(index);
}
inline ::SProtoSpace::unit_chapter_data* role_level_data::add_chapters() {
  return chapters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_chapter_data >&
role_level_data::chapters() const {
  return chapters_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_chapter_data >*
role_level_data::mutable_chapters() {
  return &chapters_;
}

// repeated .SProtoSpace.unit_res_instance_data res_data = 3;
inline int role_level_data::res_data_size() const {
  return res_data_.size();
}
inline void role_level_data::clear_res_data() {
  res_data_.Clear();
}
inline const ::SProtoSpace::unit_res_instance_data& role_level_data::res_data(int index) const {
  return res_data_.Get(index);
}
inline ::SProtoSpace::unit_res_instance_data* role_level_data::mutable_res_data(int index) {
  return res_data_.Mutable(index);
}
inline ::SProtoSpace::unit_res_instance_data* role_level_data::add_res_data() {
  return res_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_res_instance_data >&
role_level_data::res_data() const {
  return res_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_res_instance_data >*
role_level_data::mutable_res_data() {
  return &res_data_;
}

// repeated .SProtoSpace.unit_plot_screen_data plot_data = 4;
inline int role_level_data::plot_data_size() const {
  return plot_data_.size();
}
inline void role_level_data::clear_plot_data() {
  plot_data_.Clear();
}
inline const ::SProtoSpace::unit_plot_screen_data& role_level_data::plot_data(int index) const {
  return plot_data_.Get(index);
}
inline ::SProtoSpace::unit_plot_screen_data* role_level_data::mutable_plot_data(int index) {
  return plot_data_.Mutable(index);
}
inline ::SProtoSpace::unit_plot_screen_data* role_level_data::add_plot_data() {
  return plot_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_plot_screen_data >&
role_level_data::plot_data() const {
  return plot_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_plot_screen_data >*
role_level_data::mutable_plot_data() {
  return &plot_data_;
}

// repeated .SProtoSpace.unit_section_star_data section_star = 5;
inline int role_level_data::section_star_size() const {
  return section_star_.size();
}
inline void role_level_data::clear_section_star() {
  section_star_.Clear();
}
inline const ::SProtoSpace::unit_section_star_data& role_level_data::section_star(int index) const {
  return section_star_.Get(index);
}
inline ::SProtoSpace::unit_section_star_data* role_level_data::mutable_section_star(int index) {
  return section_star_.Mutable(index);
}
inline ::SProtoSpace::unit_section_star_data* role_level_data::add_section_star() {
  return section_star_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_section_star_data >&
role_level_data::section_star() const {
  return section_star_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_section_star_data >*
role_level_data::mutable_section_star() {
  return &section_star_;
}

// repeated .SProtoSpace.unit_tower_data tower_data = 6;
inline int role_level_data::tower_data_size() const {
  return tower_data_.size();
}
inline void role_level_data::clear_tower_data() {
  tower_data_.Clear();
}
inline const ::SProtoSpace::unit_tower_data& role_level_data::tower_data(int index) const {
  return tower_data_.Get(index);
}
inline ::SProtoSpace::unit_tower_data* role_level_data::mutable_tower_data(int index) {
  return tower_data_.Mutable(index);
}
inline ::SProtoSpace::unit_tower_data* role_level_data::add_tower_data() {
  return tower_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_tower_data >&
role_level_data::tower_data() const {
  return tower_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_tower_data >*
role_level_data::mutable_tower_data() {
  return &tower_data_;
}

// repeated .SProtoSpace.unit_adv_data adv_data = 7;
inline int role_level_data::adv_data_size() const {
  return adv_data_.size();
}
inline void role_level_data::clear_adv_data() {
  adv_data_.Clear();
}
inline const ::SProtoSpace::unit_adv_data& role_level_data::adv_data(int index) const {
  return adv_data_.Get(index);
}
inline ::SProtoSpace::unit_adv_data* role_level_data::mutable_adv_data(int index) {
  return adv_data_.Mutable(index);
}
inline ::SProtoSpace::unit_adv_data* role_level_data::add_adv_data() {
  return adv_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_adv_data >&
role_level_data::adv_data() const {
  return adv_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_adv_data >*
role_level_data::mutable_adv_data() {
  return &adv_data_;
}

// repeated .SProtoSpace.unit_guide_data guide_data = 8;
inline int role_level_data::guide_data_size() const {
  return guide_data_.size();
}
inline void role_level_data::clear_guide_data() {
  guide_data_.Clear();
}
inline const ::SProtoSpace::unit_guide_data& role_level_data::guide_data(int index) const {
  return guide_data_.Get(index);
}
inline ::SProtoSpace::unit_guide_data* role_level_data::mutable_guide_data(int index) {
  return guide_data_.Mutable(index);
}
inline ::SProtoSpace::unit_guide_data* role_level_data::add_guide_data() {
  return guide_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_guide_data >&
role_level_data::guide_data() const {
  return guide_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_guide_data >*
role_level_data::mutable_guide_data() {
  return &guide_data_;
}

// repeated .SProtoSpace.unit_plot_little_game_data plot_little_game_data = 9;
inline int role_level_data::plot_little_game_data_size() const {
  return plot_little_game_data_.size();
}
inline void role_level_data::clear_plot_little_game_data() {
  plot_little_game_data_.Clear();
}
inline const ::SProtoSpace::unit_plot_little_game_data& role_level_data::plot_little_game_data(int index) const {
  return plot_little_game_data_.Get(index);
}
inline ::SProtoSpace::unit_plot_little_game_data* role_level_data::mutable_plot_little_game_data(int index) {
  return plot_little_game_data_.Mutable(index);
}
inline ::SProtoSpace::unit_plot_little_game_data* role_level_data::add_plot_little_game_data() {
  return plot_little_game_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_plot_little_game_data >&
role_level_data::plot_little_game_data() const {
  return plot_little_game_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_plot_little_game_data >*
role_level_data::mutable_plot_little_game_data() {
  return &plot_little_game_data_;
}

// -------------------------------------------------------------------

// unit_royal_data

// optional uint32 db_mode = 1;
inline bool unit_royal_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_royal_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_royal_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_royal_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_royal_data::db_mode() const {
  return db_mode_;
}
inline void unit_royal_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_royal_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_royal_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_royal_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_royal_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_royal_data::uuid() const {
  return uuid_;
}
inline void unit_royal_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 config_id = 3;
inline bool unit_royal_data::has_config_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_royal_data::set_has_config_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_royal_data::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_royal_data::clear_config_id() {
  config_id_ = 0u;
  clear_has_config_id();
}
inline ::google::protobuf::uint32 unit_royal_data::config_id() const {
  return config_id_;
}
inline void unit_royal_data::set_config_id(::google::protobuf::uint32 value) {
  set_has_config_id();
  config_id_ = value;
}

// optional uint32 intimacy_value = 5;
inline bool unit_royal_data::has_intimacy_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void unit_royal_data::set_has_intimacy_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void unit_royal_data::clear_has_intimacy_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void unit_royal_data::clear_intimacy_value() {
  intimacy_value_ = 0u;
  clear_has_intimacy_value();
}
inline ::google::protobuf::uint32 unit_royal_data::intimacy_value() const {
  return intimacy_value_;
}
inline void unit_royal_data::set_intimacy_value(::google::protobuf::uint32 value) {
  set_has_intimacy_value();
  intimacy_value_ = value;
}

// repeated uint32 has_received = 8;
inline int unit_royal_data::has_received_size() const {
  return has_received_.size();
}
inline void unit_royal_data::clear_has_received() {
  has_received_.Clear();
}
inline ::google::protobuf::uint32 unit_royal_data::has_received(int index) const {
  return has_received_.Get(index);
}
inline void unit_royal_data::set_has_received(int index, ::google::protobuf::uint32 value) {
  has_received_.Set(index, value);
}
inline void unit_royal_data::add_has_received(::google::protobuf::uint32 value) {
  has_received_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
unit_royal_data::has_received() const {
  return has_received_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
unit_royal_data::mutable_has_received() {
  return &has_received_;
}

// -------------------------------------------------------------------

// royal_opt_info

// optional uint32 db_mode = 1;
inline bool royal_opt_info::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void royal_opt_info::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void royal_opt_info::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void royal_opt_info::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 royal_opt_info::db_mode() const {
  return db_mode_;
}
inline void royal_opt_info::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool royal_opt_info::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void royal_opt_info::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void royal_opt_info::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void royal_opt_info::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 royal_opt_info::uuid() const {
  return uuid_;
}
inline void royal_opt_info::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 refresh_times = 7;
inline bool royal_opt_info::has_refresh_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void royal_opt_info::set_has_refresh_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void royal_opt_info::clear_has_refresh_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void royal_opt_info::clear_refresh_times() {
  refresh_times_ = 0u;
  clear_has_refresh_times();
}
inline ::google::protobuf::uint32 royal_opt_info::refresh_times() const {
  return refresh_times_;
}
inline void royal_opt_info::set_refresh_times(::google::protobuf::uint32 value) {
  set_has_refresh_times();
  refresh_times_ = value;
}

// optional uint32 visit_times = 8;
inline bool royal_opt_info::has_visit_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void royal_opt_info::set_has_visit_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void royal_opt_info::clear_has_visit_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void royal_opt_info::clear_visit_times() {
  visit_times_ = 0u;
  clear_has_visit_times();
}
inline ::google::protobuf::uint32 royal_opt_info::visit_times() const {
  return visit_times_;
}
inline void royal_opt_info::set_visit_times(::google::protobuf::uint32 value) {
  set_has_visit_times();
  visit_times_ = value;
}

// -------------------------------------------------------------------

// role_royal_data

// repeated .SProtoSpace.unit_royal_data royals = 1;
inline int role_royal_data::royals_size() const {
  return royals_.size();
}
inline void role_royal_data::clear_royals() {
  royals_.Clear();
}
inline const ::SProtoSpace::unit_royal_data& role_royal_data::royals(int index) const {
  return royals_.Get(index);
}
inline ::SProtoSpace::unit_royal_data* role_royal_data::mutable_royals(int index) {
  return royals_.Mutable(index);
}
inline ::SProtoSpace::unit_royal_data* role_royal_data::add_royals() {
  return royals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_royal_data >&
role_royal_data::royals() const {
  return royals_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_royal_data >*
role_royal_data::mutable_royals() {
  return &royals_;
}

// repeated .SProtoSpace.royal_opt_info infos = 2;
inline int role_royal_data::infos_size() const {
  return infos_.size();
}
inline void role_royal_data::clear_infos() {
  infos_.Clear();
}
inline const ::SProtoSpace::royal_opt_info& role_royal_data::infos(int index) const {
  return infos_.Get(index);
}
inline ::SProtoSpace::royal_opt_info* role_royal_data::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::SProtoSpace::royal_opt_info* role_royal_data::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_opt_info >&
role_royal_data::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_opt_info >*
role_royal_data::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// royal_task_data

// optional int32 max_step = 1;
inline bool royal_task_data::has_max_step() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void royal_task_data::set_has_max_step() {
  _has_bits_[0] |= 0x00000001u;
}
inline void royal_task_data::clear_has_max_step() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void royal_task_data::clear_max_step() {
  max_step_ = 0;
  clear_has_max_step();
}
inline ::google::protobuf::int32 royal_task_data::max_step() const {
  return max_step_;
}
inline void royal_task_data::set_max_step(::google::protobuf::int32 value) {
  set_has_max_step();
  max_step_ = value;
}

// optional int32 cur_step = 2;
inline bool royal_task_data::has_cur_step() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void royal_task_data::set_has_cur_step() {
  _has_bits_[0] |= 0x00000002u;
}
inline void royal_task_data::clear_has_cur_step() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void royal_task_data::clear_cur_step() {
  cur_step_ = 0;
  clear_has_cur_step();
}
inline ::google::protobuf::int32 royal_task_data::cur_step() const {
  return cur_step_;
}
inline void royal_task_data::set_cur_step(::google::protobuf::int32 value) {
  set_has_cur_step();
  cur_step_ = value;
}

// optional uint32 config_id = 3;
inline bool royal_task_data::has_config_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void royal_task_data::set_has_config_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void royal_task_data::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void royal_task_data::clear_config_id() {
  config_id_ = 0u;
  clear_has_config_id();
}
inline ::google::protobuf::uint32 royal_task_data::config_id() const {
  return config_id_;
}
inline void royal_task_data::set_config_id(::google::protobuf::uint32 value) {
  set_has_config_id();
  config_id_ = value;
}

// optional uint32 star = 4;
inline bool royal_task_data::has_star() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void royal_task_data::set_has_star() {
  _has_bits_[0] |= 0x00000008u;
}
inline void royal_task_data::clear_has_star() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void royal_task_data::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 royal_task_data::star() const {
  return star_;
}
inline void royal_task_data::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// optional .SProtoSpace.ERoyalTaskStatus status = 5;
inline bool royal_task_data::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void royal_task_data::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void royal_task_data::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void royal_task_data::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::SProtoSpace::ERoyalTaskStatus royal_task_data::status() const {
  return static_cast< ::SProtoSpace::ERoyalTaskStatus >(status_);
}
inline void royal_task_data::set_status(::SProtoSpace::ERoyalTaskStatus value) {
  assert(::SProtoSpace::ERoyalTaskStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional int32 value = 6;
inline bool royal_task_data::has_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void royal_task_data::set_has_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void royal_task_data::clear_has_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void royal_task_data::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 royal_task_data::value() const {
  return value_;
}
inline void royal_task_data::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional int32 type = 7;
inline bool royal_task_data::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void royal_task_data::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void royal_task_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void royal_task_data::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 royal_task_data::type() const {
  return type_;
}
inline void royal_task_data::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// friend_operation_info

// optional uint32 db_mode = 1;
inline bool friend_operation_info::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_operation_info::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_operation_info::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_operation_info::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 friend_operation_info::db_mode() const {
  return db_mode_;
}
inline void friend_operation_info::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool friend_operation_info::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_operation_info::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_operation_info::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_operation_info::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 friend_operation_info::uuid() const {
  return uuid_;
}
inline void friend_operation_info::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 give_times = 3;
inline bool friend_operation_info::has_give_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void friend_operation_info::set_has_give_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void friend_operation_info::clear_has_give_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void friend_operation_info::clear_give_times() {
  give_times_ = 0u;
  clear_has_give_times();
}
inline ::google::protobuf::uint32 friend_operation_info::give_times() const {
  return give_times_;
}
inline void friend_operation_info::set_give_times(::google::protobuf::uint32 value) {
  set_has_give_times();
  give_times_ = value;
}

// optional uint32 draw_times = 4;
inline bool friend_operation_info::has_draw_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void friend_operation_info::set_has_draw_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void friend_operation_info::clear_has_draw_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void friend_operation_info::clear_draw_times() {
  draw_times_ = 0u;
  clear_has_draw_times();
}
inline ::google::protobuf::uint32 friend_operation_info::draw_times() const {
  return draw_times_;
}
inline void friend_operation_info::set_draw_times(::google::protobuf::uint32 value) {
  set_has_draw_times();
  draw_times_ = value;
}

// repeated uint64 accept_ids = 5;
inline int friend_operation_info::accept_ids_size() const {
  return accept_ids_.size();
}
inline void friend_operation_info::clear_accept_ids() {
  accept_ids_.Clear();
}
inline ::google::protobuf::uint64 friend_operation_info::accept_ids(int index) const {
  return accept_ids_.Get(index);
}
inline void friend_operation_info::set_accept_ids(int index, ::google::protobuf::uint64 value) {
  accept_ids_.Set(index, value);
}
inline void friend_operation_info::add_accept_ids(::google::protobuf::uint64 value) {
  accept_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
friend_operation_info::accept_ids() const {
  return accept_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
friend_operation_info::mutable_accept_ids() {
  return &accept_ids_;
}

// optional uint32 last_search_time = 6;
inline bool friend_operation_info::has_last_search_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void friend_operation_info::set_has_last_search_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void friend_operation_info::clear_has_last_search_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void friend_operation_info::clear_last_search_time() {
  last_search_time_ = 0u;
  clear_has_last_search_time();
}
inline ::google::protobuf::uint32 friend_operation_info::last_search_time() const {
  return last_search_time_;
}
inline void friend_operation_info::set_last_search_time(::google::protobuf::uint32 value) {
  set_has_last_search_time();
  last_search_time_ = value;
}

// -------------------------------------------------------------------

// unit_friend_data

// optional uint32 db_mode = 1;
inline bool unit_friend_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_friend_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_friend_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_friend_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_friend_data::db_mode() const {
  return db_mode_;
}
inline void unit_friend_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_friend_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_friend_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_friend_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_friend_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_friend_data::uuid() const {
  return uuid_;
}
inline void unit_friend_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 intimacy_value = 3;
inline bool unit_friend_data::has_intimacy_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_friend_data::set_has_intimacy_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_friend_data::clear_has_intimacy_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_friend_data::clear_intimacy_value() {
  intimacy_value_ = 0u;
  clear_has_intimacy_value();
}
inline ::google::protobuf::uint32 unit_friend_data::intimacy_value() const {
  return intimacy_value_;
}
inline void unit_friend_data::set_intimacy_value(::google::protobuf::uint32 value) {
  set_has_intimacy_value();
  intimacy_value_ = value;
}

// -------------------------------------------------------------------

// unit_black_data

// optional uint32 db_mode = 1;
inline bool unit_black_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_black_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_black_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_black_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_black_data::db_mode() const {
  return db_mode_;
}
inline void unit_black_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_black_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_black_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_black_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_black_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_black_data::uuid() const {
  return uuid_;
}
inline void unit_black_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// repeated uint64 role_ids = 3;
inline int unit_black_data::role_ids_size() const {
  return role_ids_.size();
}
inline void unit_black_data::clear_role_ids() {
  role_ids_.Clear();
}
inline ::google::protobuf::uint64 unit_black_data::role_ids(int index) const {
  return role_ids_.Get(index);
}
inline void unit_black_data::set_role_ids(int index, ::google::protobuf::uint64 value) {
  role_ids_.Set(index, value);
}
inline void unit_black_data::add_role_ids(::google::protobuf::uint64 value) {
  role_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
unit_black_data::role_ids() const {
  return role_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
unit_black_data::mutable_role_ids() {
  return &role_ids_;
}

// -------------------------------------------------------------------

// give_record_info

// optional uint32 db_mode = 1;
inline bool give_record_info::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void give_record_info::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void give_record_info::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void give_record_info::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 give_record_info::db_mode() const {
  return db_mode_;
}
inline void give_record_info::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool give_record_info::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void give_record_info::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void give_record_info::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void give_record_info::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 give_record_info::uuid() const {
  return uuid_;
}
inline void give_record_info::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// repeated uint64 friend_ids = 3;
inline int give_record_info::friend_ids_size() const {
  return friend_ids_.size();
}
inline void give_record_info::clear_friend_ids() {
  friend_ids_.Clear();
}
inline ::google::protobuf::uint64 give_record_info::friend_ids(int index) const {
  return friend_ids_.Get(index);
}
inline void give_record_info::set_friend_ids(int index, ::google::protobuf::uint64 value) {
  friend_ids_.Set(index, value);
}
inline void give_record_info::add_friend_ids(::google::protobuf::uint64 value) {
  friend_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
give_record_info::friend_ids() const {
  return friend_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
give_record_info::mutable_friend_ids() {
  return &friend_ids_;
}

// -------------------------------------------------------------------

// role_friend_data

// repeated .SProtoSpace.friend_operation_info operation_info = 1;
inline int role_friend_data::operation_info_size() const {
  return operation_info_.size();
}
inline void role_friend_data::clear_operation_info() {
  operation_info_.Clear();
}
inline const ::SProtoSpace::friend_operation_info& role_friend_data::operation_info(int index) const {
  return operation_info_.Get(index);
}
inline ::SProtoSpace::friend_operation_info* role_friend_data::mutable_operation_info(int index) {
  return operation_info_.Mutable(index);
}
inline ::SProtoSpace::friend_operation_info* role_friend_data::add_operation_info() {
  return operation_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_operation_info >&
role_friend_data::operation_info() const {
  return operation_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_operation_info >*
role_friend_data::mutable_operation_info() {
  return &operation_info_;
}

// repeated .SProtoSpace.unit_black_data blacklist = 2;
inline int role_friend_data::blacklist_size() const {
  return blacklist_.size();
}
inline void role_friend_data::clear_blacklist() {
  blacklist_.Clear();
}
inline const ::SProtoSpace::unit_black_data& role_friend_data::blacklist(int index) const {
  return blacklist_.Get(index);
}
inline ::SProtoSpace::unit_black_data* role_friend_data::mutable_blacklist(int index) {
  return blacklist_.Mutable(index);
}
inline ::SProtoSpace::unit_black_data* role_friend_data::add_blacklist() {
  return blacklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_black_data >&
role_friend_data::blacklist() const {
  return blacklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_black_data >*
role_friend_data::mutable_blacklist() {
  return &blacklist_;
}

// repeated .SProtoSpace.unit_friend_data friends = 3;
inline int role_friend_data::friends_size() const {
  return friends_.size();
}
inline void role_friend_data::clear_friends() {
  friends_.Clear();
}
inline const ::SProtoSpace::unit_friend_data& role_friend_data::friends(int index) const {
  return friends_.Get(index);
}
inline ::SProtoSpace::unit_friend_data* role_friend_data::mutable_friends(int index) {
  return friends_.Mutable(index);
}
inline ::SProtoSpace::unit_friend_data* role_friend_data::add_friends() {
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_friend_data >&
role_friend_data::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_friend_data >*
role_friend_data::mutable_friends() {
  return &friends_;
}

// repeated .SProtoSpace.give_record_info give_records = 4;
inline int role_friend_data::give_records_size() const {
  return give_records_.size();
}
inline void role_friend_data::clear_give_records() {
  give_records_.Clear();
}
inline const ::SProtoSpace::give_record_info& role_friend_data::give_records(int index) const {
  return give_records_.Get(index);
}
inline ::SProtoSpace::give_record_info* role_friend_data::mutable_give_records(int index) {
  return give_records_.Mutable(index);
}
inline ::SProtoSpace::give_record_info* role_friend_data::add_give_records() {
  return give_records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::give_record_info >&
role_friend_data::give_records() const {
  return give_records_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::give_record_info >*
role_friend_data::mutable_give_records() {
  return &give_records_;
}

// -------------------------------------------------------------------

// db_shop_refresh_info

// optional int32 user_refresh_times = 1 [default = 0];
inline bool db_shop_refresh_info::has_user_refresh_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_shop_refresh_info::set_has_user_refresh_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_shop_refresh_info::clear_has_user_refresh_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_shop_refresh_info::clear_user_refresh_times() {
  user_refresh_times_ = 0;
  clear_has_user_refresh_times();
}
inline ::google::protobuf::int32 db_shop_refresh_info::user_refresh_times() const {
  return user_refresh_times_;
}
inline void db_shop_refresh_info::set_user_refresh_times(::google::protobuf::int32 value) {
  set_has_user_refresh_times();
  user_refresh_times_ = value;
}

// optional uint64 last_user_refresh_time = 2 [default = 0];
inline bool db_shop_refresh_info::has_last_user_refresh_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_shop_refresh_info::set_has_last_user_refresh_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_shop_refresh_info::clear_has_last_user_refresh_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_shop_refresh_info::clear_last_user_refresh_time() {
  last_user_refresh_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_user_refresh_time();
}
inline ::google::protobuf::uint64 db_shop_refresh_info::last_user_refresh_time() const {
  return last_user_refresh_time_;
}
inline void db_shop_refresh_info::set_last_user_refresh_time(::google::protobuf::uint64 value) {
  set_has_last_user_refresh_time();
  last_user_refresh_time_ = value;
}

// optional uint64 last_sys_refresh_time = 3 [default = 0];
inline bool db_shop_refresh_info::has_last_sys_refresh_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_shop_refresh_info::set_has_last_sys_refresh_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_shop_refresh_info::clear_has_last_sys_refresh_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_shop_refresh_info::clear_last_sys_refresh_time() {
  last_sys_refresh_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_sys_refresh_time();
}
inline ::google::protobuf::uint64 db_shop_refresh_info::last_sys_refresh_time() const {
  return last_sys_refresh_time_;
}
inline void db_shop_refresh_info::set_last_sys_refresh_time(::google::protobuf::uint64 value) {
  set_has_last_sys_refresh_time();
  last_sys_refresh_time_ = value;
}

// -------------------------------------------------------------------

// db_shop_item_info

// optional uint32 sale_config_id = 1;
inline bool db_shop_item_info::has_sale_config_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_shop_item_info::set_has_sale_config_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_shop_item_info::clear_has_sale_config_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_shop_item_info::clear_sale_config_id() {
  sale_config_id_ = 0u;
  clear_has_sale_config_id();
}
inline ::google::protobuf::uint32 db_shop_item_info::sale_config_id() const {
  return sale_config_id_;
}
inline void db_shop_item_info::set_sale_config_id(::google::protobuf::uint32 value) {
  set_has_sale_config_id();
  sale_config_id_ = value;
}

// optional uint32 item_id = 2;
inline bool db_shop_item_info::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_shop_item_info::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_shop_item_info::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_shop_item_info::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 db_shop_item_info::item_id() const {
  return item_id_;
}
inline void db_shop_item_info::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint32 buy_cur_num = 3;
inline bool db_shop_item_info::has_buy_cur_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_shop_item_info::set_has_buy_cur_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_shop_item_info::clear_has_buy_cur_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_shop_item_info::clear_buy_cur_num() {
  buy_cur_num_ = 0u;
  clear_has_buy_cur_num();
}
inline ::google::protobuf::uint32 db_shop_item_info::buy_cur_num() const {
  return buy_cur_num_;
}
inline void db_shop_item_info::set_buy_cur_num(::google::protobuf::uint32 value) {
  set_has_buy_cur_num();
  buy_cur_num_ = value;
}

// -------------------------------------------------------------------

// buy_record_info

// optional uint32 db_mode = 1;
inline bool buy_record_info::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void buy_record_info::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void buy_record_info::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void buy_record_info::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 buy_record_info::db_mode() const {
  return db_mode_;
}
inline void buy_record_info::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool buy_record_info::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void buy_record_info::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void buy_record_info::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void buy_record_info::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 buy_record_info::uuid() const {
  return uuid_;
}
inline void buy_record_info::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 sale_config_id = 3 [default = 0];
inline bool buy_record_info::has_sale_config_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void buy_record_info::set_has_sale_config_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void buy_record_info::clear_has_sale_config_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void buy_record_info::clear_sale_config_id() {
  sale_config_id_ = 0;
  clear_has_sale_config_id();
}
inline ::google::protobuf::int32 buy_record_info::sale_config_id() const {
  return sale_config_id_;
}
inline void buy_record_info::set_sale_config_id(::google::protobuf::int32 value) {
  set_has_sale_config_id();
  sale_config_id_ = value;
}

// optional uint32 first_buy_time = 4 [default = 0];
inline bool buy_record_info::has_first_buy_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void buy_record_info::set_has_first_buy_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void buy_record_info::clear_has_first_buy_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void buy_record_info::clear_first_buy_time() {
  first_buy_time_ = 0u;
  clear_has_first_buy_time();
}
inline ::google::protobuf::uint32 buy_record_info::first_buy_time() const {
  return first_buy_time_;
}
inline void buy_record_info::set_first_buy_time(::google::protobuf::uint32 value) {
  set_has_first_buy_time();
  first_buy_time_ = value;
}

// optional uint32 last_buy_time = 5 [default = 0];
inline bool buy_record_info::has_last_buy_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void buy_record_info::set_has_last_buy_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void buy_record_info::clear_has_last_buy_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void buy_record_info::clear_last_buy_time() {
  last_buy_time_ = 0u;
  clear_has_last_buy_time();
}
inline ::google::protobuf::uint32 buy_record_info::last_buy_time() const {
  return last_buy_time_;
}
inline void buy_record_info::set_last_buy_time(::google::protobuf::uint32 value) {
  set_has_last_buy_time();
  last_buy_time_ = value;
}

// optional int32 buy_num = 6 [default = 0];
inline bool buy_record_info::has_buy_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void buy_record_info::set_has_buy_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void buy_record_info::clear_has_buy_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void buy_record_info::clear_buy_num() {
  buy_num_ = 0;
  clear_has_buy_num();
}
inline ::google::protobuf::int32 buy_record_info::buy_num() const {
  return buy_num_;
}
inline void buy_record_info::set_buy_num(::google::protobuf::int32 value) {
  set_has_buy_num();
  buy_num_ = value;
}

// -------------------------------------------------------------------

// unit_shop_info

// optional uint32 db_mode = 1;
inline bool unit_shop_info::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_shop_info::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_shop_info::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_shop_info::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_shop_info::db_mode() const {
  return db_mode_;
}
inline void unit_shop_info::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_shop_info::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_shop_info::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_shop_info::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_shop_info::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_shop_info::uuid() const {
  return uuid_;
}
inline void unit_shop_info::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 config_id = 3;
inline bool unit_shop_info::has_config_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_shop_info::set_has_config_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_shop_info::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_shop_info::clear_config_id() {
  config_id_ = 0;
  clear_has_config_id();
}
inline ::google::protobuf::int32 unit_shop_info::config_id() const {
  return config_id_;
}
inline void unit_shop_info::set_config_id(::google::protobuf::int32 value) {
  set_has_config_id();
  config_id_ = value;
}

// optional .SProtoSpace.db_shop_refresh_info refresh_info = 4;
inline bool unit_shop_info::has_refresh_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void unit_shop_info::set_has_refresh_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void unit_shop_info::clear_has_refresh_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void unit_shop_info::clear_refresh_info() {
  if (refresh_info_ != NULL) refresh_info_->::SProtoSpace::db_shop_refresh_info::Clear();
  clear_has_refresh_info();
}
inline const ::SProtoSpace::db_shop_refresh_info& unit_shop_info::refresh_info() const {
  return refresh_info_ != NULL ? *refresh_info_ : *default_instance_->refresh_info_;
}
inline ::SProtoSpace::db_shop_refresh_info* unit_shop_info::mutable_refresh_info() {
  set_has_refresh_info();
  if (refresh_info_ == NULL) refresh_info_ = new ::SProtoSpace::db_shop_refresh_info;
  return refresh_info_;
}
inline ::SProtoSpace::db_shop_refresh_info* unit_shop_info::release_refresh_info() {
  clear_has_refresh_info();
  ::SProtoSpace::db_shop_refresh_info* temp = refresh_info_;
  refresh_info_ = NULL;
  return temp;
}
inline void unit_shop_info::set_allocated_refresh_info(::SProtoSpace::db_shop_refresh_info* refresh_info) {
  delete refresh_info_;
  refresh_info_ = refresh_info;
  if (refresh_info) {
    set_has_refresh_info();
  } else {
    clear_has_refresh_info();
  }
}

// repeated .SProtoSpace.shop_item_info item_infos = 5;
inline int unit_shop_info::item_infos_size() const {
  return item_infos_.size();
}
inline void unit_shop_info::clear_item_infos() {
  item_infos_.Clear();
}
inline const ::SProtoSpace::shop_item_info& unit_shop_info::item_infos(int index) const {
  return item_infos_.Get(index);
}
inline ::SProtoSpace::shop_item_info* unit_shop_info::mutable_item_infos(int index) {
  return item_infos_.Mutable(index);
}
inline ::SProtoSpace::shop_item_info* unit_shop_info::add_item_infos() {
  return item_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::shop_item_info >&
unit_shop_info::item_infos() const {
  return item_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::shop_item_info >*
unit_shop_info::mutable_item_infos() {
  return &item_infos_;
}

// -------------------------------------------------------------------

// role_shop_data

// repeated .SProtoSpace.unit_shop_info shop_infos = 1;
inline int role_shop_data::shop_infos_size() const {
  return shop_infos_.size();
}
inline void role_shop_data::clear_shop_infos() {
  shop_infos_.Clear();
}
inline const ::SProtoSpace::unit_shop_info& role_shop_data::shop_infos(int index) const {
  return shop_infos_.Get(index);
}
inline ::SProtoSpace::unit_shop_info* role_shop_data::mutable_shop_infos(int index) {
  return shop_infos_.Mutable(index);
}
inline ::SProtoSpace::unit_shop_info* role_shop_data::add_shop_infos() {
  return shop_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_shop_info >&
role_shop_data::shop_infos() const {
  return shop_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_shop_info >*
role_shop_data::mutable_shop_infos() {
  return &shop_infos_;
}

// repeated .SProtoSpace.buy_record_info record_infos = 2;
inline int role_shop_data::record_infos_size() const {
  return record_infos_.size();
}
inline void role_shop_data::clear_record_infos() {
  record_infos_.Clear();
}
inline const ::SProtoSpace::buy_record_info& role_shop_data::record_infos(int index) const {
  return record_infos_.Get(index);
}
inline ::SProtoSpace::buy_record_info* role_shop_data::mutable_record_infos(int index) {
  return record_infos_.Mutable(index);
}
inline ::SProtoSpace::buy_record_info* role_shop_data::add_record_infos() {
  return record_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::buy_record_info >&
role_shop_data::record_infos() const {
  return record_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::buy_record_info >*
role_shop_data::mutable_record_infos() {
  return &record_infos_;
}

// -------------------------------------------------------------------

// harem_compete_info

// optional uint32 db_mode = 1;
inline bool harem_compete_info::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void harem_compete_info::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void harem_compete_info::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void harem_compete_info::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 harem_compete_info::db_mode() const {
  return db_mode_;
}
inline void harem_compete_info::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool harem_compete_info::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void harem_compete_info::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void harem_compete_info::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void harem_compete_info::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 harem_compete_info::uuid() const {
  return uuid_;
}
inline void harem_compete_info::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 qingan_times = 3;
inline bool harem_compete_info::has_qingan_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void harem_compete_info::set_has_qingan_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void harem_compete_info::clear_has_qingan_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void harem_compete_info::clear_qingan_times() {
  qingan_times_ = 0u;
  clear_has_qingan_times();
}
inline ::google::protobuf::uint32 harem_compete_info::qingan_times() const {
  return qingan_times_;
}
inline void harem_compete_info::set_qingan_times(::google::protobuf::uint32 value) {
  set_has_qingan_times();
  qingan_times_ = value;
}

// optional uint32 slap_times = 4;
inline bool harem_compete_info::has_slap_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void harem_compete_info::set_has_slap_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void harem_compete_info::clear_has_slap_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void harem_compete_info::clear_slap_times() {
  slap_times_ = 0u;
  clear_has_slap_times();
}
inline ::google::protobuf::uint32 harem_compete_info::slap_times() const {
  return slap_times_;
}
inline void harem_compete_info::set_slap_times(::google::protobuf::uint32 value) {
  set_has_slap_times();
  slap_times_ = value;
}

// optional uint64 end_time = 5;
inline bool harem_compete_info::has_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void harem_compete_info::set_has_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void harem_compete_info::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void harem_compete_info::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 harem_compete_info::end_time() const {
  return end_time_;
}
inline void harem_compete_info::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional .SProtoSpace.ESLAPPROGRESS progress = 6;
inline bool harem_compete_info::has_progress() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void harem_compete_info::set_has_progress() {
  _has_bits_[0] |= 0x00000020u;
}
inline void harem_compete_info::clear_has_progress() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void harem_compete_info::clear_progress() {
  progress_ = 1;
  clear_has_progress();
}
inline ::SProtoSpace::ESLAPPROGRESS harem_compete_info::progress() const {
  return static_cast< ::SProtoSpace::ESLAPPROGRESS >(progress_);
}
inline void harem_compete_info::set_progress(::SProtoSpace::ESLAPPROGRESS value) {
  assert(::SProtoSpace::ESLAPPROGRESS_IsValid(value));
  set_has_progress();
  progress_ = value;
}

// repeated uint64 red_point_time = 7;
inline int harem_compete_info::red_point_time_size() const {
  return red_point_time_.size();
}
inline void harem_compete_info::clear_red_point_time() {
  red_point_time_.Clear();
}
inline ::google::protobuf::uint64 harem_compete_info::red_point_time(int index) const {
  return red_point_time_.Get(index);
}
inline void harem_compete_info::set_red_point_time(int index, ::google::protobuf::uint64 value) {
  red_point_time_.Set(index, value);
}
inline void harem_compete_info::add_red_point_time(::google::protobuf::uint64 value) {
  red_point_time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
harem_compete_info::red_point_time() const {
  return red_point_time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
harem_compete_info::mutable_red_point_time() {
  return &red_point_time_;
}

// repeated .SProtoSpace.tribute_info infos = 8;
inline int harem_compete_info::infos_size() const {
  return infos_.size();
}
inline void harem_compete_info::clear_infos() {
  infos_.Clear();
}
inline const ::SProtoSpace::tribute_info& harem_compete_info::infos(int index) const {
  return infos_.Get(index);
}
inline ::SProtoSpace::tribute_info* harem_compete_info::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::SProtoSpace::tribute_info* harem_compete_info::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::tribute_info >&
harem_compete_info::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::tribute_info >*
harem_compete_info::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// role_harem_data

// repeated .SProtoSpace.harem_compete_info info = 1;
inline int role_harem_data::info_size() const {
  return info_.size();
}
inline void role_harem_data::clear_info() {
  info_.Clear();
}
inline const ::SProtoSpace::harem_compete_info& role_harem_data::info(int index) const {
  return info_.Get(index);
}
inline ::SProtoSpace::harem_compete_info* role_harem_data::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::SProtoSpace::harem_compete_info* role_harem_data::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::harem_compete_info >&
role_harem_data::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::harem_compete_info >*
role_harem_data::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// growing_flower_info

// optional uint32 db_mode = 1;
inline bool growing_flower_info::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void growing_flower_info::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void growing_flower_info::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void growing_flower_info::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 growing_flower_info::db_mode() const {
  return db_mode_;
}
inline void growing_flower_info::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool growing_flower_info::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void growing_flower_info::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void growing_flower_info::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void growing_flower_info::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 growing_flower_info::uuid() const {
  return uuid_;
}
inline void growing_flower_info::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 template_id = 3;
inline bool growing_flower_info::has_template_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void growing_flower_info::set_has_template_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void growing_flower_info::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void growing_flower_info::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 growing_flower_info::template_id() const {
  return template_id_;
}
inline void growing_flower_info::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 cur_status = 4;
inline bool growing_flower_info::has_cur_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void growing_flower_info::set_has_cur_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void growing_flower_info::clear_has_cur_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void growing_flower_info::clear_cur_status() {
  cur_status_ = 0;
  clear_has_cur_status();
}
inline ::google::protobuf::int32 growing_flower_info::cur_status() const {
  return cur_status_;
}
inline void growing_flower_info::set_cur_status(::google::protobuf::int32 value) {
  set_has_cur_status();
  cur_status_ = value;
}

// -------------------------------------------------------------------

// unit_flower_info

// optional uint32 db_mode = 1;
inline bool unit_flower_info::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_flower_info::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_flower_info::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_flower_info::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_flower_info::db_mode() const {
  return db_mode_;
}
inline void unit_flower_info::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_flower_info::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_flower_info::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_flower_info::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_flower_info::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_flower_info::uuid() const {
  return uuid_;
}
inline void unit_flower_info::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 template_id = 3;
inline bool unit_flower_info::has_template_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_flower_info::set_has_template_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_flower_info::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_flower_info::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 unit_flower_info::template_id() const {
  return template_id_;
}
inline void unit_flower_info::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 count_num = 4;
inline bool unit_flower_info::has_count_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void unit_flower_info::set_has_count_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void unit_flower_info::clear_has_count_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void unit_flower_info::clear_count_num() {
  count_num_ = 0;
  clear_has_count_num();
}
inline ::google::protobuf::int32 unit_flower_info::count_num() const {
  return count_num_;
}
inline void unit_flower_info::set_count_num(::google::protobuf::int32 value) {
  set_has_count_num();
  count_num_ = value;
}

// -------------------------------------------------------------------

// role_flower_data

// repeated .SProtoSpace.unit_flower_info info = 1;
inline int role_flower_data::info_size() const {
  return info_.size();
}
inline void role_flower_data::clear_info() {
  info_.Clear();
}
inline const ::SProtoSpace::unit_flower_info& role_flower_data::info(int index) const {
  return info_.Get(index);
}
inline ::SProtoSpace::unit_flower_info* role_flower_data::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::SProtoSpace::unit_flower_info* role_flower_data::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_flower_info >&
role_flower_data::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_flower_info >*
role_flower_data::mutable_info() {
  return &info_;
}

// repeated .SProtoSpace.growing_flower_info grow_info = 2;
inline int role_flower_data::grow_info_size() const {
  return grow_info_.size();
}
inline void role_flower_data::clear_grow_info() {
  grow_info_.Clear();
}
inline const ::SProtoSpace::growing_flower_info& role_flower_data::grow_info(int index) const {
  return grow_info_.Get(index);
}
inline ::SProtoSpace::growing_flower_info* role_flower_data::mutable_grow_info(int index) {
  return grow_info_.Mutable(index);
}
inline ::SProtoSpace::growing_flower_info* role_flower_data::add_grow_info() {
  return grow_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::growing_flower_info >&
role_flower_data::grow_info() const {
  return grow_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::growing_flower_info >*
role_flower_data::mutable_grow_info() {
  return &grow_info_;
}

// -------------------------------------------------------------------

// unit_plot_screen_data

// optional uint32 db_mode = 1;
inline bool unit_plot_screen_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_plot_screen_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_plot_screen_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_plot_screen_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_plot_screen_data::db_mode() const {
  return db_mode_;
}
inline void unit_plot_screen_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_plot_screen_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_plot_screen_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_plot_screen_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_plot_screen_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_plot_screen_data::uuid() const {
  return uuid_;
}
inline void unit_plot_screen_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 chapter_id = 3;
inline bool unit_plot_screen_data::has_chapter_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_plot_screen_data::set_has_chapter_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_plot_screen_data::clear_has_chapter_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_plot_screen_data::clear_chapter_id() {
  chapter_id_ = 0u;
  clear_has_chapter_id();
}
inline ::google::protobuf::uint32 unit_plot_screen_data::chapter_id() const {
  return chapter_id_;
}
inline void unit_plot_screen_data::set_chapter_id(::google::protobuf::uint32 value) {
  set_has_chapter_id();
  chapter_id_ = value;
}

// optional uint32 screen_id = 4;
inline bool unit_plot_screen_data::has_screen_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void unit_plot_screen_data::set_has_screen_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void unit_plot_screen_data::clear_has_screen_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void unit_plot_screen_data::clear_screen_id() {
  screen_id_ = 0u;
  clear_has_screen_id();
}
inline ::google::protobuf::uint32 unit_plot_screen_data::screen_id() const {
  return screen_id_;
}
inline void unit_plot_screen_data::set_screen_id(::google::protobuf::uint32 value) {
  set_has_screen_id();
  screen_id_ = value;
}

// repeated uint32 branch_ids = 5;
inline int unit_plot_screen_data::branch_ids_size() const {
  return branch_ids_.size();
}
inline void unit_plot_screen_data::clear_branch_ids() {
  branch_ids_.Clear();
}
inline ::google::protobuf::uint32 unit_plot_screen_data::branch_ids(int index) const {
  return branch_ids_.Get(index);
}
inline void unit_plot_screen_data::set_branch_ids(int index, ::google::protobuf::uint32 value) {
  branch_ids_.Set(index, value);
}
inline void unit_plot_screen_data::add_branch_ids(::google::protobuf::uint32 value) {
  branch_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
unit_plot_screen_data::branch_ids() const {
  return branch_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
unit_plot_screen_data::mutable_branch_ids() {
  return &branch_ids_;
}

// repeated int32 section_ids = 6;
inline int unit_plot_screen_data::section_ids_size() const {
  return section_ids_.size();
}
inline void unit_plot_screen_data::clear_section_ids() {
  section_ids_.Clear();
}
inline ::google::protobuf::int32 unit_plot_screen_data::section_ids(int index) const {
  return section_ids_.Get(index);
}
inline void unit_plot_screen_data::set_section_ids(int index, ::google::protobuf::int32 value) {
  section_ids_.Set(index, value);
}
inline void unit_plot_screen_data::add_section_ids(::google::protobuf::int32 value) {
  section_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
unit_plot_screen_data::section_ids() const {
  return section_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
unit_plot_screen_data::mutable_section_ids() {
  return &section_ids_;
}

// repeated uint32 get_end_ids = 7;
inline int unit_plot_screen_data::get_end_ids_size() const {
  return get_end_ids_.size();
}
inline void unit_plot_screen_data::clear_get_end_ids() {
  get_end_ids_.Clear();
}
inline ::google::protobuf::uint32 unit_plot_screen_data::get_end_ids(int index) const {
  return get_end_ids_.Get(index);
}
inline void unit_plot_screen_data::set_get_end_ids(int index, ::google::protobuf::uint32 value) {
  get_end_ids_.Set(index, value);
}
inline void unit_plot_screen_data::add_get_end_ids(::google::protobuf::uint32 value) {
  get_end_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
unit_plot_screen_data::get_end_ids() const {
  return get_end_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
unit_plot_screen_data::mutable_get_end_ids() {
  return &get_end_ids_;
}

// repeated uint32 action_ids = 8;
inline int unit_plot_screen_data::action_ids_size() const {
  return action_ids_.size();
}
inline void unit_plot_screen_data::clear_action_ids() {
  action_ids_.Clear();
}
inline ::google::protobuf::uint32 unit_plot_screen_data::action_ids(int index) const {
  return action_ids_.Get(index);
}
inline void unit_plot_screen_data::set_action_ids(int index, ::google::protobuf::uint32 value) {
  action_ids_.Set(index, value);
}
inline void unit_plot_screen_data::add_action_ids(::google::protobuf::uint32 value) {
  action_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
unit_plot_screen_data::action_ids() const {
  return action_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
unit_plot_screen_data::mutable_action_ids() {
  return &action_ids_;
}

// optional bool chapter_is_end = 9;
inline bool unit_plot_screen_data::has_chapter_is_end() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void unit_plot_screen_data::set_has_chapter_is_end() {
  _has_bits_[0] |= 0x00000100u;
}
inline void unit_plot_screen_data::clear_has_chapter_is_end() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void unit_plot_screen_data::clear_chapter_is_end() {
  chapter_is_end_ = false;
  clear_has_chapter_is_end();
}
inline bool unit_plot_screen_data::chapter_is_end() const {
  return chapter_is_end_;
}
inline void unit_plot_screen_data::set_chapter_is_end(bool value) {
  set_has_chapter_is_end();
  chapter_is_end_ = value;
}

// -------------------------------------------------------------------

// officer_apply_info

// optional uint32 db_mode = 1;
inline bool officer_apply_info::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void officer_apply_info::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void officer_apply_info::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void officer_apply_info::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 officer_apply_info::db_mode() const {
  return db_mode_;
}
inline void officer_apply_info::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool officer_apply_info::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void officer_apply_info::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void officer_apply_info::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void officer_apply_info::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 officer_apply_info::uuid() const {
  return uuid_;
}
inline void officer_apply_info::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 cur_grade = 3;
inline bool officer_apply_info::has_cur_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void officer_apply_info::set_has_cur_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void officer_apply_info::clear_has_cur_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void officer_apply_info::clear_cur_grade() {
  cur_grade_ = 0u;
  clear_has_cur_grade();
}
inline ::google::protobuf::uint32 officer_apply_info::cur_grade() const {
  return cur_grade_;
}
inline void officer_apply_info::set_cur_grade(::google::protobuf::uint32 value) {
  set_has_cur_grade();
  cur_grade_ = value;
}

// optional uint64 apply_time = 4;
inline bool officer_apply_info::has_apply_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void officer_apply_info::set_has_apply_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void officer_apply_info::clear_has_apply_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void officer_apply_info::clear_apply_time() {
  apply_time_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_time();
}
inline ::google::protobuf::uint64 officer_apply_info::apply_time() const {
  return apply_time_;
}
inline void officer_apply_info::set_apply_time(::google::protobuf::uint64 value) {
  set_has_apply_time();
  apply_time_ = value;
}

// optional uint64 check_time = 5;
inline bool officer_apply_info::has_check_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void officer_apply_info::set_has_check_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void officer_apply_info::clear_has_check_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void officer_apply_info::clear_check_time() {
  check_time_ = GOOGLE_ULONGLONG(0);
  clear_has_check_time();
}
inline ::google::protobuf::uint64 officer_apply_info::check_time() const {
  return check_time_;
}
inline void officer_apply_info::set_check_time(::google::protobuf::uint64 value) {
  set_has_check_time();
  check_time_ = value;
}

// optional bool ret = 6;
inline bool officer_apply_info::has_ret() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void officer_apply_info::set_has_ret() {
  _has_bits_[0] |= 0x00000020u;
}
inline void officer_apply_info::clear_has_ret() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void officer_apply_info::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool officer_apply_info::ret() const {
  return ret_;
}
inline void officer_apply_info::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 next_grade = 7;
inline bool officer_apply_info::has_next_grade() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void officer_apply_info::set_has_next_grade() {
  _has_bits_[0] |= 0x00000040u;
}
inline void officer_apply_info::clear_has_next_grade() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void officer_apply_info::clear_next_grade() {
  next_grade_ = 0u;
  clear_has_next_grade();
}
inline ::google::protobuf::uint32 officer_apply_info::next_grade() const {
  return next_grade_;
}
inline void officer_apply_info::set_next_grade(::google::protobuf::uint32 value) {
  set_has_next_grade();
  next_grade_ = value;
}

// -------------------------------------------------------------------

// officer_base_info

// optional uint32 db_mode = 1;
inline bool officer_base_info::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void officer_base_info::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void officer_base_info::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void officer_base_info::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 officer_base_info::db_mode() const {
  return db_mode_;
}
inline void officer_base_info::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool officer_base_info::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void officer_base_info::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void officer_base_info::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void officer_base_info::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 officer_base_info::uuid() const {
  return uuid_;
}
inline void officer_base_info::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 cur_grade = 3;
inline bool officer_base_info::has_cur_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void officer_base_info::set_has_cur_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void officer_base_info::clear_has_cur_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void officer_base_info::clear_cur_grade() {
  cur_grade_ = 0u;
  clear_has_cur_grade();
}
inline ::google::protobuf::uint32 officer_base_info::cur_grade() const {
  return cur_grade_;
}
inline void officer_base_info::set_cur_grade(::google::protobuf::uint32 value) {
  set_has_cur_grade();
  cur_grade_ = value;
}

// optional uint32 max_grade = 4;
inline bool officer_base_info::has_max_grade() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void officer_base_info::set_has_max_grade() {
  _has_bits_[0] |= 0x00000008u;
}
inline void officer_base_info::clear_has_max_grade() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void officer_base_info::clear_max_grade() {
  max_grade_ = 0u;
  clear_has_max_grade();
}
inline ::google::protobuf::uint32 officer_base_info::max_grade() const {
  return max_grade_;
}
inline void officer_base_info::set_max_grade(::google::protobuf::uint32 value) {
  set_has_max_grade();
  max_grade_ = value;
}

// optional uint32 apply_grade = 5;
inline bool officer_base_info::has_apply_grade() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void officer_base_info::set_has_apply_grade() {
  _has_bits_[0] |= 0x00000010u;
}
inline void officer_base_info::clear_has_apply_grade() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void officer_base_info::clear_apply_grade() {
  apply_grade_ = 0u;
  clear_has_apply_grade();
}
inline ::google::protobuf::uint32 officer_base_info::apply_grade() const {
  return apply_grade_;
}
inline void officer_base_info::set_apply_grade(::google::protobuf::uint32 value) {
  set_has_apply_grade();
  apply_grade_ = value;
}

// optional uint64 apply_time = 6;
inline bool officer_base_info::has_apply_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void officer_base_info::set_has_apply_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void officer_base_info::clear_has_apply_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void officer_base_info::clear_apply_time() {
  apply_time_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_time();
}
inline ::google::protobuf::uint64 officer_base_info::apply_time() const {
  return apply_time_;
}
inline void officer_base_info::set_apply_time(::google::protobuf::uint64 value) {
  set_has_apply_time();
  apply_time_ = value;
}

// optional bool is_draw = 7;
inline bool officer_base_info::has_is_draw() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void officer_base_info::set_has_is_draw() {
  _has_bits_[0] |= 0x00000040u;
}
inline void officer_base_info::clear_has_is_draw() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void officer_base_info::clear_is_draw() {
  is_draw_ = false;
  clear_has_is_draw();
}
inline bool officer_base_info::is_draw() const {
  return is_draw_;
}
inline void officer_base_info::set_is_draw(bool value) {
  set_has_is_draw();
  is_draw_ = value;
}

// optional uint64 last_draw_time = 8;
inline bool officer_base_info::has_last_draw_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void officer_base_info::set_has_last_draw_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void officer_base_info::clear_has_last_draw_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void officer_base_info::clear_last_draw_time() {
  last_draw_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_draw_time();
}
inline ::google::protobuf::uint64 officer_base_info::last_draw_time() const {
  return last_draw_time_;
}
inline void officer_base_info::set_last_draw_time(::google::protobuf::uint64 value) {
  set_has_last_draw_time();
  last_draw_time_ = value;
}

// optional int32 daily_offical_chal_num = 9;
inline bool officer_base_info::has_daily_offical_chal_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void officer_base_info::set_has_daily_offical_chal_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void officer_base_info::clear_has_daily_offical_chal_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void officer_base_info::clear_daily_offical_chal_num() {
  daily_offical_chal_num_ = 0;
  clear_has_daily_offical_chal_num();
}
inline ::google::protobuf::int32 officer_base_info::daily_offical_chal_num() const {
  return daily_offical_chal_num_;
}
inline void officer_base_info::set_daily_offical_chal_num(::google::protobuf::int32 value) {
  set_has_daily_offical_chal_num();
  daily_offical_chal_num_ = value;
}

// -------------------------------------------------------------------

// role_officer_data

// repeated .SProtoSpace.officer_apply_info applys = 1;
inline int role_officer_data::applys_size() const {
  return applys_.size();
}
inline void role_officer_data::clear_applys() {
  applys_.Clear();
}
inline const ::SProtoSpace::officer_apply_info& role_officer_data::applys(int index) const {
  return applys_.Get(index);
}
inline ::SProtoSpace::officer_apply_info* role_officer_data::mutable_applys(int index) {
  return applys_.Mutable(index);
}
inline ::SProtoSpace::officer_apply_info* role_officer_data::add_applys() {
  return applys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::officer_apply_info >&
role_officer_data::applys() const {
  return applys_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::officer_apply_info >*
role_officer_data::mutable_applys() {
  return &applys_;
}

// repeated .SProtoSpace.officer_base_info infos = 2;
inline int role_officer_data::infos_size() const {
  return infos_.size();
}
inline void role_officer_data::clear_infos() {
  infos_.Clear();
}
inline const ::SProtoSpace::officer_base_info& role_officer_data::infos(int index) const {
  return infos_.Get(index);
}
inline ::SProtoSpace::officer_base_info* role_officer_data::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::SProtoSpace::officer_base_info* role_officer_data::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::officer_base_info >&
role_officer_data::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::officer_base_info >*
role_officer_data::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// offical_battle_report_data

// optional uint64 role_id = 1;
inline bool offical_battle_report_data::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_battle_report_data::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_battle_report_data::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_battle_report_data::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 offical_battle_report_data::role_id() const {
  return role_id_;
}
inline void offical_battle_report_data::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional bool win = 2;
inline bool offical_battle_report_data::has_win() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offical_battle_report_data::set_has_win() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offical_battle_report_data::clear_has_win() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offical_battle_report_data::clear_win() {
  win_ = false;
  clear_has_win();
}
inline bool offical_battle_report_data::win() const {
  return win_;
}
inline void offical_battle_report_data::set_win(bool value) {
  set_has_win();
  win_ = value;
}

// optional uint64 attacker_id = 3;
inline bool offical_battle_report_data::has_attacker_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void offical_battle_report_data::set_has_attacker_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void offical_battle_report_data::clear_has_attacker_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void offical_battle_report_data::clear_attacker_id() {
  attacker_id_ = GOOGLE_ULONGLONG(0);
  clear_has_attacker_id();
}
inline ::google::protobuf::uint64 offical_battle_report_data::attacker_id() const {
  return attacker_id_;
}
inline void offical_battle_report_data::set_attacker_id(::google::protobuf::uint64 value) {
  set_has_attacker_id();
  attacker_id_ = value;
}

// optional int32 attacker_old_ranking_id = 4;
inline bool offical_battle_report_data::has_attacker_old_ranking_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void offical_battle_report_data::set_has_attacker_old_ranking_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void offical_battle_report_data::clear_has_attacker_old_ranking_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void offical_battle_report_data::clear_attacker_old_ranking_id() {
  attacker_old_ranking_id_ = 0;
  clear_has_attacker_old_ranking_id();
}
inline ::google::protobuf::int32 offical_battle_report_data::attacker_old_ranking_id() const {
  return attacker_old_ranking_id_;
}
inline void offical_battle_report_data::set_attacker_old_ranking_id(::google::protobuf::int32 value) {
  set_has_attacker_old_ranking_id();
  attacker_old_ranking_id_ = value;
}

// optional int32 attacker_new_ranking_id = 5;
inline bool offical_battle_report_data::has_attacker_new_ranking_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void offical_battle_report_data::set_has_attacker_new_ranking_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void offical_battle_report_data::clear_has_attacker_new_ranking_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void offical_battle_report_data::clear_attacker_new_ranking_id() {
  attacker_new_ranking_id_ = 0;
  clear_has_attacker_new_ranking_id();
}
inline ::google::protobuf::int32 offical_battle_report_data::attacker_new_ranking_id() const {
  return attacker_new_ranking_id_;
}
inline void offical_battle_report_data::set_attacker_new_ranking_id(::google::protobuf::int32 value) {
  set_has_attacker_new_ranking_id();
  attacker_new_ranking_id_ = value;
}

// optional int32 my_old_ranking_id = 6;
inline bool offical_battle_report_data::has_my_old_ranking_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void offical_battle_report_data::set_has_my_old_ranking_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void offical_battle_report_data::clear_has_my_old_ranking_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void offical_battle_report_data::clear_my_old_ranking_id() {
  my_old_ranking_id_ = 0;
  clear_has_my_old_ranking_id();
}
inline ::google::protobuf::int32 offical_battle_report_data::my_old_ranking_id() const {
  return my_old_ranking_id_;
}
inline void offical_battle_report_data::set_my_old_ranking_id(::google::protobuf::int32 value) {
  set_has_my_old_ranking_id();
  my_old_ranking_id_ = value;
}

// optional int32 my_new_ranking_id = 7;
inline bool offical_battle_report_data::has_my_new_ranking_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void offical_battle_report_data::set_has_my_new_ranking_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void offical_battle_report_data::clear_has_my_new_ranking_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void offical_battle_report_data::clear_my_new_ranking_id() {
  my_new_ranking_id_ = 0;
  clear_has_my_new_ranking_id();
}
inline ::google::protobuf::int32 offical_battle_report_data::my_new_ranking_id() const {
  return my_new_ranking_id_;
}
inline void offical_battle_report_data::set_my_new_ranking_id(::google::protobuf::int32 value) {
  set_has_my_new_ranking_id();
  my_new_ranking_id_ = value;
}

// optional int32 battle_time = 8;
inline bool offical_battle_report_data::has_battle_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void offical_battle_report_data::set_has_battle_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void offical_battle_report_data::clear_has_battle_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void offical_battle_report_data::clear_battle_time() {
  battle_time_ = 0;
  clear_has_battle_time();
}
inline ::google::protobuf::int32 offical_battle_report_data::battle_time() const {
  return battle_time_;
}
inline void offical_battle_report_data::set_battle_time(::google::protobuf::int32 value) {
  set_has_battle_time();
  battle_time_ = value;
}

// optional uint64 battle_id = 9;
inline bool offical_battle_report_data::has_battle_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void offical_battle_report_data::set_has_battle_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void offical_battle_report_data::clear_has_battle_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void offical_battle_report_data::clear_battle_id() {
  battle_id_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_id();
}
inline ::google::protobuf::uint64 offical_battle_report_data::battle_id() const {
  return battle_id_;
}
inline void offical_battle_report_data::set_battle_id(::google::protobuf::uint64 value) {
  set_has_battle_id();
  battle_id_ = value;
}

// optional int32 grade = 10;
inline bool offical_battle_report_data::has_grade() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void offical_battle_report_data::set_has_grade() {
  _has_bits_[0] |= 0x00000200u;
}
inline void offical_battle_report_data::clear_has_grade() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void offical_battle_report_data::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 offical_battle_report_data::grade() const {
  return grade_;
}
inline void offical_battle_report_data::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// repeated .SProtoSpace.hero_base_info heros = 11;
inline int offical_battle_report_data::heros_size() const {
  return heros_.size();
}
inline void offical_battle_report_data::clear_heros() {
  heros_.Clear();
}
inline const ::SProtoSpace::hero_base_info& offical_battle_report_data::heros(int index) const {
  return heros_.Get(index);
}
inline ::SProtoSpace::hero_base_info* offical_battle_report_data::mutable_heros(int index) {
  return heros_.Mutable(index);
}
inline ::SProtoSpace::hero_base_info* offical_battle_report_data::add_heros() {
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info >&
offical_battle_report_data::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info >*
offical_battle_report_data::mutable_heros() {
  return &heros_;
}

// -------------------------------------------------------------------

// offical_battle_report

// optional uint64 role_id = 1;
inline bool offical_battle_report::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_battle_report::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_battle_report::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_battle_report::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 offical_battle_report::role_id() const {
  return role_id_;
}
inline void offical_battle_report::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// repeated .SProtoSpace.offical_battle_report_data reports = 2;
inline int offical_battle_report::reports_size() const {
  return reports_.size();
}
inline void offical_battle_report::clear_reports() {
  reports_.Clear();
}
inline const ::SProtoSpace::offical_battle_report_data& offical_battle_report::reports(int index) const {
  return reports_.Get(index);
}
inline ::SProtoSpace::offical_battle_report_data* offical_battle_report::mutable_reports(int index) {
  return reports_.Mutable(index);
}
inline ::SProtoSpace::offical_battle_report_data* offical_battle_report::add_reports() {
  return reports_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_battle_report_data >&
offical_battle_report::reports() const {
  return reports_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_battle_report_data >*
offical_battle_report::mutable_reports() {
  return &reports_;
}

// -------------------------------------------------------------------

// db_offical_apply_battle_data

// optional .SProtoSpace.offical_apply_battle_data battle_data = 1;
inline bool db_offical_apply_battle_data::has_battle_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_offical_apply_battle_data::set_has_battle_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_offical_apply_battle_data::clear_has_battle_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_offical_apply_battle_data::clear_battle_data() {
  if (battle_data_ != NULL) battle_data_->::SProtoSpace::offical_apply_battle_data::Clear();
  clear_has_battle_data();
}
inline const ::SProtoSpace::offical_apply_battle_data& db_offical_apply_battle_data::battle_data() const {
  return battle_data_ != NULL ? *battle_data_ : *default_instance_->battle_data_;
}
inline ::SProtoSpace::offical_apply_battle_data* db_offical_apply_battle_data::mutable_battle_data() {
  set_has_battle_data();
  if (battle_data_ == NULL) battle_data_ = new ::SProtoSpace::offical_apply_battle_data;
  return battle_data_;
}
inline ::SProtoSpace::offical_apply_battle_data* db_offical_apply_battle_data::release_battle_data() {
  clear_has_battle_data();
  ::SProtoSpace::offical_apply_battle_data* temp = battle_data_;
  battle_data_ = NULL;
  return temp;
}
inline void db_offical_apply_battle_data::set_allocated_battle_data(::SProtoSpace::offical_apply_battle_data* battle_data) {
  delete battle_data_;
  battle_data_ = battle_data;
  if (battle_data) {
    set_has_battle_data();
  } else {
    clear_has_battle_data();
  }
}

// repeated .SProtoSpace.offical_apply_my_battle_data my_records = 2;
inline int db_offical_apply_battle_data::my_records_size() const {
  return my_records_.size();
}
inline void db_offical_apply_battle_data::clear_my_records() {
  my_records_.Clear();
}
inline const ::SProtoSpace::offical_apply_my_battle_data& db_offical_apply_battle_data::my_records(int index) const {
  return my_records_.Get(index);
}
inline ::SProtoSpace::offical_apply_my_battle_data* db_offical_apply_battle_data::mutable_my_records(int index) {
  return my_records_.Mutable(index);
}
inline ::SProtoSpace::offical_apply_my_battle_data* db_offical_apply_battle_data::add_my_records() {
  return my_records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_my_battle_data >&
db_offical_apply_battle_data::my_records() const {
  return my_records_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_my_battle_data >*
db_offical_apply_battle_data::mutable_my_records() {
  return &my_records_;
}

// -------------------------------------------------------------------

// offical_apply_battle_result_db

// optional .SProtoSpace.EGrade office_lv = 1;
inline bool offical_apply_battle_result_db::has_office_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_apply_battle_result_db::set_has_office_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_apply_battle_result_db::clear_has_office_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_apply_battle_result_db::clear_office_lv() {
  office_lv_ = 0;
  clear_has_office_lv();
}
inline ::SProtoSpace::EGrade offical_apply_battle_result_db::office_lv() const {
  return static_cast< ::SProtoSpace::EGrade >(office_lv_);
}
inline void offical_apply_battle_result_db::set_office_lv(::SProtoSpace::EGrade value) {
  assert(::SProtoSpace::EGrade_IsValid(value));
  set_has_office_lv();
  office_lv_ = value;
}

// repeated .SProtoSpace.db_offical_apply_battle_data battle_data = 2;
inline int offical_apply_battle_result_db::battle_data_size() const {
  return battle_data_.size();
}
inline void offical_apply_battle_result_db::clear_battle_data() {
  battle_data_.Clear();
}
inline const ::SProtoSpace::db_offical_apply_battle_data& offical_apply_battle_result_db::battle_data(int index) const {
  return battle_data_.Get(index);
}
inline ::SProtoSpace::db_offical_apply_battle_data* offical_apply_battle_result_db::mutable_battle_data(int index) {
  return battle_data_.Mutable(index);
}
inline ::SProtoSpace::db_offical_apply_battle_data* offical_apply_battle_result_db::add_battle_data() {
  return battle_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_offical_apply_battle_data >&
offical_apply_battle_result_db::battle_data() const {
  return battle_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_offical_apply_battle_data >*
offical_apply_battle_result_db::mutable_battle_data() {
  return &battle_data_;
}

// -------------------------------------------------------------------

// all_offical_apply_battle_result_db

// repeated .SProtoSpace.offical_apply_battle_result_db results = 1;
inline int all_offical_apply_battle_result_db::results_size() const {
  return results_.size();
}
inline void all_offical_apply_battle_result_db::clear_results() {
  results_.Clear();
}
inline const ::SProtoSpace::offical_apply_battle_result_db& all_offical_apply_battle_result_db::results(int index) const {
  return results_.Get(index);
}
inline ::SProtoSpace::offical_apply_battle_result_db* all_offical_apply_battle_result_db::mutable_results(int index) {
  return results_.Mutable(index);
}
inline ::SProtoSpace::offical_apply_battle_result_db* all_offical_apply_battle_result_db::add_results() {
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_battle_result_db >&
all_offical_apply_battle_result_db::results() const {
  return results_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_battle_result_db >*
all_offical_apply_battle_result_db::mutable_results() {
  return &results_;
}

// -------------------------------------------------------------------

// db_offical_result_rank_data

// repeated .SProtoSpace.offical_apply_battle_data data = 1;
inline int db_offical_result_rank_data::data_size() const {
  return data_.size();
}
inline void db_offical_result_rank_data::clear_data() {
  data_.Clear();
}
inline const ::SProtoSpace::offical_apply_battle_data& db_offical_result_rank_data::data(int index) const {
  return data_.Get(index);
}
inline ::SProtoSpace::offical_apply_battle_data* db_offical_result_rank_data::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SProtoSpace::offical_apply_battle_data* db_offical_result_rank_data::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_battle_data >&
db_offical_result_rank_data::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_battle_data >*
db_offical_result_rank_data::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// db_my_offical_result_data

// optional int32 grade = 1;
inline bool db_my_offical_result_data::has_grade() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_my_offical_result_data::set_has_grade() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_my_offical_result_data::clear_has_grade() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_my_offical_result_data::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 db_my_offical_result_data::grade() const {
  return grade_;
}
inline void db_my_offical_result_data::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// repeated .SProtoSpace.offical_apply_my_battle_data mydata = 2;
inline int db_my_offical_result_data::mydata_size() const {
  return mydata_.size();
}
inline void db_my_offical_result_data::clear_mydata() {
  mydata_.Clear();
}
inline const ::SProtoSpace::offical_apply_my_battle_data& db_my_offical_result_data::mydata(int index) const {
  return mydata_.Get(index);
}
inline ::SProtoSpace::offical_apply_my_battle_data* db_my_offical_result_data::mutable_mydata(int index) {
  return mydata_.Mutable(index);
}
inline ::SProtoSpace::offical_apply_my_battle_data* db_my_offical_result_data::add_mydata() {
  return mydata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_my_battle_data >&
db_my_offical_result_data::mydata() const {
  return mydata_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_my_battle_data >*
db_my_offical_result_data::mutable_mydata() {
  return &mydata_;
}

// -------------------------------------------------------------------

// offical_rank_db

// optional .SProtoSpace.EGrade office_lv = 1;
inline bool offical_rank_db::has_office_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_rank_db::set_has_office_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_rank_db::clear_has_office_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_rank_db::clear_office_lv() {
  office_lv_ = 0;
  clear_has_office_lv();
}
inline ::SProtoSpace::EGrade offical_rank_db::office_lv() const {
  return static_cast< ::SProtoSpace::EGrade >(office_lv_);
}
inline void offical_rank_db::set_office_lv(::SProtoSpace::EGrade value) {
  assert(::SProtoSpace::EGrade_IsValid(value));
  set_has_office_lv();
  office_lv_ = value;
}

// repeated uint64 role_ids = 2;
inline int offical_rank_db::role_ids_size() const {
  return role_ids_.size();
}
inline void offical_rank_db::clear_role_ids() {
  role_ids_.Clear();
}
inline ::google::protobuf::uint64 offical_rank_db::role_ids(int index) const {
  return role_ids_.Get(index);
}
inline void offical_rank_db::set_role_ids(int index, ::google::protobuf::uint64 value) {
  role_ids_.Set(index, value);
}
inline void offical_rank_db::add_role_ids(::google::protobuf::uint64 value) {
  role_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
offical_rank_db::role_ids() const {
  return role_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
offical_rank_db::mutable_role_ids() {
  return &role_ids_;
}

// -------------------------------------------------------------------

// all_offical_rank_db

// repeated .SProtoSpace.offical_rank_db ranks = 1;
inline int all_offical_rank_db::ranks_size() const {
  return ranks_.size();
}
inline void all_offical_rank_db::clear_ranks() {
  ranks_.Clear();
}
inline const ::SProtoSpace::offical_rank_db& all_offical_rank_db::ranks(int index) const {
  return ranks_.Get(index);
}
inline ::SProtoSpace::offical_rank_db* all_offical_rank_db::mutable_ranks(int index) {
  return ranks_.Mutable(index);
}
inline ::SProtoSpace::offical_rank_db* all_offical_rank_db::add_ranks() {
  return ranks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_rank_db >&
all_offical_rank_db::ranks() const {
  return ranks_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_rank_db >*
all_offical_rank_db::mutable_ranks() {
  return &ranks_;
}

// -------------------------------------------------------------------

// db_unit_fashion_data

// optional uint32 db_mode = 1;
inline bool db_unit_fashion_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_unit_fashion_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_unit_fashion_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_unit_fashion_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 db_unit_fashion_data::db_mode() const {
  return db_mode_;
}
inline void db_unit_fashion_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool db_unit_fashion_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_unit_fashion_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_unit_fashion_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_unit_fashion_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_unit_fashion_data::uuid() const {
  return uuid_;
}
inline void db_unit_fashion_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 config_id = 3;
inline bool db_unit_fashion_data::has_config_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_unit_fashion_data::set_has_config_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_unit_fashion_data::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_unit_fashion_data::clear_config_id() {
  config_id_ = 0;
  clear_has_config_id();
}
inline ::google::protobuf::int32 db_unit_fashion_data::config_id() const {
  return config_id_;
}
inline void db_unit_fashion_data::set_config_id(::google::protobuf::int32 value) {
  set_has_config_id();
  config_id_ = value;
}

// optional .SProtoSpace.FASHION_STATE state = 4;
inline bool db_unit_fashion_data::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_unit_fashion_data::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_unit_fashion_data::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_unit_fashion_data::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::SProtoSpace::FASHION_STATE db_unit_fashion_data::state() const {
  return static_cast< ::SProtoSpace::FASHION_STATE >(state_);
}
inline void db_unit_fashion_data::set_state(::SProtoSpace::FASHION_STATE value) {
  assert(::SProtoSpace::FASHION_STATE_IsValid(value));
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// role_fashion_data

// repeated .SProtoSpace.db_unit_fashion_data fashions = 3;
inline int role_fashion_data::fashions_size() const {
  return fashions_.size();
}
inline void role_fashion_data::clear_fashions() {
  fashions_.Clear();
}
inline const ::SProtoSpace::db_unit_fashion_data& role_fashion_data::fashions(int index) const {
  return fashions_.Get(index);
}
inline ::SProtoSpace::db_unit_fashion_data* role_fashion_data::mutable_fashions(int index) {
  return fashions_.Mutable(index);
}
inline ::SProtoSpace::db_unit_fashion_data* role_fashion_data::add_fashions() {
  return fashions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_fashion_data >&
role_fashion_data::fashions() const {
  return fashions_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_unit_fashion_data >*
role_fashion_data::mutable_fashions() {
  return &fashions_;
}

// -------------------------------------------------------------------

// db_role_all_data

// optional .SProtoSpace.role_base_data base_data = 1;
inline bool db_role_all_data::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_all_data::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_all_data::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_all_data::clear_base_data() {
  if (base_data_ != NULL) base_data_->::SProtoSpace::role_base_data::Clear();
  clear_has_base_data();
}
inline const ::SProtoSpace::role_base_data& db_role_all_data::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::SProtoSpace::role_base_data* db_role_all_data::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::SProtoSpace::role_base_data;
  return base_data_;
}
inline ::SProtoSpace::role_base_data* db_role_all_data::release_base_data() {
  clear_has_base_data();
  ::SProtoSpace::role_base_data* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void db_role_all_data::set_allocated_base_data(::SProtoSpace::role_base_data* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional .SProtoSpace.role_item_data item_data = 2;
inline bool db_role_all_data::has_item_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_all_data::set_has_item_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_all_data::clear_has_item_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_all_data::clear_item_data() {
  if (item_data_ != NULL) item_data_->::SProtoSpace::role_item_data::Clear();
  clear_has_item_data();
}
inline const ::SProtoSpace::role_item_data& db_role_all_data::item_data() const {
  return item_data_ != NULL ? *item_data_ : *default_instance_->item_data_;
}
inline ::SProtoSpace::role_item_data* db_role_all_data::mutable_item_data() {
  set_has_item_data();
  if (item_data_ == NULL) item_data_ = new ::SProtoSpace::role_item_data;
  return item_data_;
}
inline ::SProtoSpace::role_item_data* db_role_all_data::release_item_data() {
  clear_has_item_data();
  ::SProtoSpace::role_item_data* temp = item_data_;
  item_data_ = NULL;
  return temp;
}
inline void db_role_all_data::set_allocated_item_data(::SProtoSpace::role_item_data* item_data) {
  delete item_data_;
  item_data_ = item_data;
  if (item_data) {
    set_has_item_data();
  } else {
    clear_has_item_data();
  }
}

// optional .SProtoSpace.role_player_data player_data = 3;
inline bool db_role_all_data::has_player_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_all_data::set_has_player_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_all_data::clear_has_player_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_all_data::clear_player_data() {
  if (player_data_ != NULL) player_data_->::SProtoSpace::role_player_data::Clear();
  clear_has_player_data();
}
inline const ::SProtoSpace::role_player_data& db_role_all_data::player_data() const {
  return player_data_ != NULL ? *player_data_ : *default_instance_->player_data_;
}
inline ::SProtoSpace::role_player_data* db_role_all_data::mutable_player_data() {
  set_has_player_data();
  if (player_data_ == NULL) player_data_ = new ::SProtoSpace::role_player_data;
  return player_data_;
}
inline ::SProtoSpace::role_player_data* db_role_all_data::release_player_data() {
  clear_has_player_data();
  ::SProtoSpace::role_player_data* temp = player_data_;
  player_data_ = NULL;
  return temp;
}
inline void db_role_all_data::set_allocated_player_data(::SProtoSpace::role_player_data* player_data) {
  delete player_data_;
  player_data_ = player_data;
  if (player_data) {
    set_has_player_data();
  } else {
    clear_has_player_data();
  }
}

// optional .SProtoSpace.role_hero_data hero_data = 4;
inline bool db_role_all_data::has_hero_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_all_data::set_has_hero_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_all_data::clear_has_hero_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_all_data::clear_hero_data() {
  if (hero_data_ != NULL) hero_data_->::SProtoSpace::role_hero_data::Clear();
  clear_has_hero_data();
}
inline const ::SProtoSpace::role_hero_data& db_role_all_data::hero_data() const {
  return hero_data_ != NULL ? *hero_data_ : *default_instance_->hero_data_;
}
inline ::SProtoSpace::role_hero_data* db_role_all_data::mutable_hero_data() {
  set_has_hero_data();
  if (hero_data_ == NULL) hero_data_ = new ::SProtoSpace::role_hero_data;
  return hero_data_;
}
inline ::SProtoSpace::role_hero_data* db_role_all_data::release_hero_data() {
  clear_has_hero_data();
  ::SProtoSpace::role_hero_data* temp = hero_data_;
  hero_data_ = NULL;
  return temp;
}
inline void db_role_all_data::set_allocated_hero_data(::SProtoSpace::role_hero_data* hero_data) {
  delete hero_data_;
  hero_data_ = hero_data;
  if (hero_data) {
    set_has_hero_data();
  } else {
    clear_has_hero_data();
  }
}

// optional .SProtoSpace.role_soul_data soul_data = 5;
inline bool db_role_all_data::has_soul_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_role_all_data::set_has_soul_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_role_all_data::clear_has_soul_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_role_all_data::clear_soul_data() {
  if (soul_data_ != NULL) soul_data_->::SProtoSpace::role_soul_data::Clear();
  clear_has_soul_data();
}
inline const ::SProtoSpace::role_soul_data& db_role_all_data::soul_data() const {
  return soul_data_ != NULL ? *soul_data_ : *default_instance_->soul_data_;
}
inline ::SProtoSpace::role_soul_data* db_role_all_data::mutable_soul_data() {
  set_has_soul_data();
  if (soul_data_ == NULL) soul_data_ = new ::SProtoSpace::role_soul_data;
  return soul_data_;
}
inline ::SProtoSpace::role_soul_data* db_role_all_data::release_soul_data() {
  clear_has_soul_data();
  ::SProtoSpace::role_soul_data* temp = soul_data_;
  soul_data_ = NULL;
  return temp;
}
inline void db_role_all_data::set_allocated_soul_data(::SProtoSpace::role_soul_data* soul_data) {
  delete soul_data_;
  soul_data_ = soul_data;
  if (soul_data) {
    set_has_soul_data();
  } else {
    clear_has_soul_data();
  }
}

// optional .SProtoSpace.role_level_data level_data = 6;
inline bool db_role_all_data::has_level_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_role_all_data::set_has_level_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_role_all_data::clear_has_level_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_role_all_data::clear_level_data() {
  if (level_data_ != NULL) level_data_->::SProtoSpace::role_level_data::Clear();
  clear_has_level_data();
}
inline const ::SProtoSpace::role_level_data& db_role_all_data::level_data() const {
  return level_data_ != NULL ? *level_data_ : *default_instance_->level_data_;
}
inline ::SProtoSpace::role_level_data* db_role_all_data::mutable_level_data() {
  set_has_level_data();
  if (level_data_ == NULL) level_data_ = new ::SProtoSpace::role_level_data;
  return level_data_;
}
inline ::SProtoSpace::role_level_data* db_role_all_data::release_level_data() {
  clear_has_level_data();
  ::SProtoSpace::role_level_data* temp = level_data_;
  level_data_ = NULL;
  return temp;
}
inline void db_role_all_data::set_allocated_level_data(::SProtoSpace::role_level_data* level_data) {
  delete level_data_;
  level_data_ = level_data;
  if (level_data) {
    set_has_level_data();
  } else {
    clear_has_level_data();
  }
}

// optional .SProtoSpace.role_quest_data quest_data = 7;
inline bool db_role_all_data::has_quest_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_role_all_data::set_has_quest_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_role_all_data::clear_has_quest_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_role_all_data::clear_quest_data() {
  if (quest_data_ != NULL) quest_data_->::SProtoSpace::role_quest_data::Clear();
  clear_has_quest_data();
}
inline const ::SProtoSpace::role_quest_data& db_role_all_data::quest_data() const {
  return quest_data_ != NULL ? *quest_data_ : *default_instance_->quest_data_;
}
inline ::SProtoSpace::role_quest_data* db_role_all_data::mutable_quest_data() {
  set_has_quest_data();
  if (quest_data_ == NULL) quest_data_ = new ::SProtoSpace::role_quest_data;
  return quest_data_;
}
inline ::SProtoSpace::role_quest_data* db_role_all_data::release_quest_data() {
  clear_has_quest_data();
  ::SProtoSpace::role_quest_data* temp = quest_data_;
  quest_data_ = NULL;
  return temp;
}
inline void db_role_all_data::set_allocated_quest_data(::SProtoSpace::role_quest_data* quest_data) {
  delete quest_data_;
  quest_data_ = quest_data;
  if (quest_data) {
    set_has_quest_data();
  } else {
    clear_has_quest_data();
  }
}

// optional .SProtoSpace.role_royal_data royal_data = 8;
inline bool db_role_all_data::has_royal_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_role_all_data::set_has_royal_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_role_all_data::clear_has_royal_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_role_all_data::clear_royal_data() {
  if (royal_data_ != NULL) royal_data_->::SProtoSpace::role_royal_data::Clear();
  clear_has_royal_data();
}
inline const ::SProtoSpace::role_royal_data& db_role_all_data::royal_data() const {
  return royal_data_ != NULL ? *royal_data_ : *default_instance_->royal_data_;
}
inline ::SProtoSpace::role_royal_data* db_role_all_data::mutable_royal_data() {
  set_has_royal_data();
  if (royal_data_ == NULL) royal_data_ = new ::SProtoSpace::role_royal_data;
  return royal_data_;
}
inline ::SProtoSpace::role_royal_data* db_role_all_data::release_royal_data() {
  clear_has_royal_data();
  ::SProtoSpace::role_royal_data* temp = royal_data_;
  royal_data_ = NULL;
  return temp;
}
inline void db_role_all_data::set_allocated_royal_data(::SProtoSpace::role_royal_data* royal_data) {
  delete royal_data_;
  royal_data_ = royal_data;
  if (royal_data) {
    set_has_royal_data();
  } else {
    clear_has_royal_data();
  }
}

// optional .SProtoSpace.role_show_data show_data = 9;
inline bool db_role_all_data::has_show_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void db_role_all_data::set_has_show_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void db_role_all_data::clear_has_show_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void db_role_all_data::clear_show_data() {
  if (show_data_ != NULL) show_data_->::SProtoSpace::role_show_data::Clear();
  clear_has_show_data();
}
inline const ::SProtoSpace::role_show_data& db_role_all_data::show_data() const {
  return show_data_ != NULL ? *show_data_ : *default_instance_->show_data_;
}
inline ::SProtoSpace::role_show_data* db_role_all_data::mutable_show_data() {
  set_has_show_data();
  if (show_data_ == NULL) show_data_ = new ::SProtoSpace::role_show_data;
  return show_data_;
}
inline ::SProtoSpace::role_show_data* db_role_all_data::release_show_data() {
  clear_has_show_data();
  ::SProtoSpace::role_show_data* temp = show_data_;
  show_data_ = NULL;
  return temp;
}
inline void db_role_all_data::set_allocated_show_data(::SProtoSpace::role_show_data* show_data) {
  delete show_data_;
  show_data_ = show_data;
  if (show_data) {
    set_has_show_data();
  } else {
    clear_has_show_data();
  }
}

// optional .SProtoSpace.role_friend_data friend_data = 10;
inline bool db_role_all_data::has_friend_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void db_role_all_data::set_has_friend_data() {
  _has_bits_[0] |= 0x00000200u;
}
inline void db_role_all_data::clear_has_friend_data() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void db_role_all_data::clear_friend_data() {
  if (friend_data_ != NULL) friend_data_->::SProtoSpace::role_friend_data::Clear();
  clear_has_friend_data();
}
inline const ::SProtoSpace::role_friend_data& db_role_all_data::friend_data() const {
  return friend_data_ != NULL ? *friend_data_ : *default_instance_->friend_data_;
}
inline ::SProtoSpace::role_friend_data* db_role_all_data::mutable_friend_data() {
  set_has_friend_data();
  if (friend_data_ == NULL) friend_data_ = new ::SProtoSpace::role_friend_data;
  return friend_data_;
}
inline ::SProtoSpace::role_friend_data* db_role_all_data::release_friend_data() {
  clear_has_friend_data();
  ::SProtoSpace::role_friend_data* temp = friend_data_;
  friend_data_ = NULL;
  return temp;
}
inline void db_role_all_data::set_allocated_friend_data(::SProtoSpace::role_friend_data* friend_data) {
  delete friend_data_;
  friend_data_ = friend_data;
  if (friend_data) {
    set_has_friend_data();
  } else {
    clear_has_friend_data();
  }
}

// optional .SProtoSpace.role_shop_data shop_data = 11;
inline bool db_role_all_data::has_shop_data() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void db_role_all_data::set_has_shop_data() {
  _has_bits_[0] |= 0x00000400u;
}
inline void db_role_all_data::clear_has_shop_data() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void db_role_all_data::clear_shop_data() {
  if (shop_data_ != NULL) shop_data_->::SProtoSpace::role_shop_data::Clear();
  clear_has_shop_data();
}
inline const ::SProtoSpace::role_shop_data& db_role_all_data::shop_data() const {
  return shop_data_ != NULL ? *shop_data_ : *default_instance_->shop_data_;
}
inline ::SProtoSpace::role_shop_data* db_role_all_data::mutable_shop_data() {
  set_has_shop_data();
  if (shop_data_ == NULL) shop_data_ = new ::SProtoSpace::role_shop_data;
  return shop_data_;
}
inline ::SProtoSpace::role_shop_data* db_role_all_data::release_shop_data() {
  clear_has_shop_data();
  ::SProtoSpace::role_shop_data* temp = shop_data_;
  shop_data_ = NULL;
  return temp;
}
inline void db_role_all_data::set_allocated_shop_data(::SProtoSpace::role_shop_data* shop_data) {
  delete shop_data_;
  shop_data_ = shop_data;
  if (shop_data) {
    set_has_shop_data();
  } else {
    clear_has_shop_data();
  }
}

// optional .SProtoSpace.role_harem_data harem_data = 12;
inline bool db_role_all_data::has_harem_data() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void db_role_all_data::set_has_harem_data() {
  _has_bits_[0] |= 0x00000800u;
}
inline void db_role_all_data::clear_has_harem_data() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void db_role_all_data::clear_harem_data() {
  if (harem_data_ != NULL) harem_data_->::SProtoSpace::role_harem_data::Clear();
  clear_has_harem_data();
}
inline const ::SProtoSpace::role_harem_data& db_role_all_data::harem_data() const {
  return harem_data_ != NULL ? *harem_data_ : *default_instance_->harem_data_;
}
inline ::SProtoSpace::role_harem_data* db_role_all_data::mutable_harem_data() {
  set_has_harem_data();
  if (harem_data_ == NULL) harem_data_ = new ::SProtoSpace::role_harem_data;
  return harem_data_;
}
inline ::SProtoSpace::role_harem_data* db_role_all_data::release_harem_data() {
  clear_has_harem_data();
  ::SProtoSpace::role_harem_data* temp = harem_data_;
  harem_data_ = NULL;
  return temp;
}
inline void db_role_all_data::set_allocated_harem_data(::SProtoSpace::role_harem_data* harem_data) {
  delete harem_data_;
  harem_data_ = harem_data;
  if (harem_data) {
    set_has_harem_data();
  } else {
    clear_has_harem_data();
  }
}

// optional .SProtoSpace.role_flower_data flower_data = 13;
inline bool db_role_all_data::has_flower_data() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void db_role_all_data::set_has_flower_data() {
  _has_bits_[0] |= 0x00001000u;
}
inline void db_role_all_data::clear_has_flower_data() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void db_role_all_data::clear_flower_data() {
  if (flower_data_ != NULL) flower_data_->::SProtoSpace::role_flower_data::Clear();
  clear_has_flower_data();
}
inline const ::SProtoSpace::role_flower_data& db_role_all_data::flower_data() const {
  return flower_data_ != NULL ? *flower_data_ : *default_instance_->flower_data_;
}
inline ::SProtoSpace::role_flower_data* db_role_all_data::mutable_flower_data() {
  set_has_flower_data();
  if (flower_data_ == NULL) flower_data_ = new ::SProtoSpace::role_flower_data;
  return flower_data_;
}
inline ::SProtoSpace::role_flower_data* db_role_all_data::release_flower_data() {
  clear_has_flower_data();
  ::SProtoSpace::role_flower_data* temp = flower_data_;
  flower_data_ = NULL;
  return temp;
}
inline void db_role_all_data::set_allocated_flower_data(::SProtoSpace::role_flower_data* flower_data) {
  delete flower_data_;
  flower_data_ = flower_data;
  if (flower_data) {
    set_has_flower_data();
  } else {
    clear_has_flower_data();
  }
}

// optional uint32 last_used_time = 14;
inline bool db_role_all_data::has_last_used_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void db_role_all_data::set_has_last_used_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void db_role_all_data::clear_has_last_used_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void db_role_all_data::clear_last_used_time() {
  last_used_time_ = 0u;
  clear_has_last_used_time();
}
inline ::google::protobuf::uint32 db_role_all_data::last_used_time() const {
  return last_used_time_;
}
inline void db_role_all_data::set_last_used_time(::google::protobuf::uint32 value) {
  set_has_last_used_time();
  last_used_time_ = value;
}

// -------------------------------------------------------------------

// redis_role_base

// optional uint64 uuid = 2;
inline bool redis_role_base::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void redis_role_base::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void redis_role_base::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void redis_role_base::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 redis_role_base::uuid() const {
  return uuid_;
}
inline void redis_role_base::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 lv = 3;
inline bool redis_role_base::has_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void redis_role_base::set_has_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void redis_role_base::clear_has_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void redis_role_base::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 redis_role_base::lv() const {
  return lv_;
}
inline void redis_role_base::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional string name = 4;
inline bool redis_role_base::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void redis_role_base::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void redis_role_base::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void redis_role_base::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& redis_role_base::name() const {
  return *name_;
}
inline void redis_role_base::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void redis_role_base::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void redis_role_base::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* redis_role_base::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* redis_role_base::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void redis_role_base::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sex = 5;
inline bool redis_role_base::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void redis_role_base::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void redis_role_base::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void redis_role_base::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 redis_role_base::sex() const {
  return sex_;
}
inline void redis_role_base::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 like = 6;
inline bool redis_role_base::has_like() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void redis_role_base::set_has_like() {
  _has_bits_[0] |= 0x00000010u;
}
inline void redis_role_base::clear_has_like() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void redis_role_base::clear_like() {
  like_ = 0u;
  clear_has_like();
}
inline ::google::protobuf::uint32 redis_role_base::like() const {
  return like_;
}
inline void redis_role_base::set_like(::google::protobuf::uint32 value) {
  set_has_like();
  like_ = value;
}

// optional uint32 title = 7;
inline bool redis_role_base::has_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void redis_role_base::set_has_title() {
  _has_bits_[0] |= 0x00000020u;
}
inline void redis_role_base::clear_has_title() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void redis_role_base::clear_title() {
  title_ = 0u;
  clear_has_title();
}
inline ::google::protobuf::uint32 redis_role_base::title() const {
  return title_;
}
inline void redis_role_base::set_title(::google::protobuf::uint32 value) {
  set_has_title();
  title_ = value;
}

// optional uint64 partner_id = 8;
inline bool redis_role_base::has_partner_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void redis_role_base::set_has_partner_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void redis_role_base::clear_has_partner_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void redis_role_base::clear_partner_id() {
  partner_id_ = GOOGLE_ULONGLONG(0);
  clear_has_partner_id();
}
inline ::google::protobuf::uint64 redis_role_base::partner_id() const {
  return partner_id_;
}
inline void redis_role_base::set_partner_id(::google::protobuf::uint64 value) {
  set_has_partner_id();
  partner_id_ = value;
}

// optional string partner_name = 9;
inline bool redis_role_base::has_partner_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void redis_role_base::set_has_partner_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void redis_role_base::clear_has_partner_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void redis_role_base::clear_partner_name() {
  if (partner_name_ != &::google::protobuf::internal::kEmptyString) {
    partner_name_->clear();
  }
  clear_has_partner_name();
}
inline const ::std::string& redis_role_base::partner_name() const {
  return *partner_name_;
}
inline void redis_role_base::set_partner_name(const ::std::string& value) {
  set_has_partner_name();
  if (partner_name_ == &::google::protobuf::internal::kEmptyString) {
    partner_name_ = new ::std::string;
  }
  partner_name_->assign(value);
}
inline void redis_role_base::set_partner_name(const char* value) {
  set_has_partner_name();
  if (partner_name_ == &::google::protobuf::internal::kEmptyString) {
    partner_name_ = new ::std::string;
  }
  partner_name_->assign(value);
}
inline void redis_role_base::set_partner_name(const char* value, size_t size) {
  set_has_partner_name();
  if (partner_name_ == &::google::protobuf::internal::kEmptyString) {
    partner_name_ = new ::std::string;
  }
  partner_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* redis_role_base::mutable_partner_name() {
  set_has_partner_name();
  if (partner_name_ == &::google::protobuf::internal::kEmptyString) {
    partner_name_ = new ::std::string;
  }
  return partner_name_;
}
inline ::std::string* redis_role_base::release_partner_name() {
  clear_has_partner_name();
  if (partner_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = partner_name_;
    partner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void redis_role_base::set_allocated_partner_name(::std::string* partner_name) {
  if (partner_name_ != &::google::protobuf::internal::kEmptyString) {
    delete partner_name_;
  }
  if (partner_name) {
    set_has_partner_name();
    partner_name_ = partner_name;
  } else {
    clear_has_partner_name();
    partner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 office = 10;
inline bool redis_role_base::has_office() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void redis_role_base::set_has_office() {
  _has_bits_[0] |= 0x00000100u;
}
inline void redis_role_base::clear_has_office() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void redis_role_base::clear_office() {
  office_ = 0u;
  clear_has_office();
}
inline ::google::protobuf::uint32 redis_role_base::office() const {
  return office_;
}
inline void redis_role_base::set_office(::google::protobuf::uint32 value) {
  set_has_office();
  office_ = value;
}

// optional uint64 fimily_id = 11;
inline bool redis_role_base::has_fimily_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void redis_role_base::set_has_fimily_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void redis_role_base::clear_has_fimily_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void redis_role_base::clear_fimily_id() {
  fimily_id_ = GOOGLE_ULONGLONG(0);
  clear_has_fimily_id();
}
inline ::google::protobuf::uint64 redis_role_base::fimily_id() const {
  return fimily_id_;
}
inline void redis_role_base::set_fimily_id(::google::protobuf::uint64 value) {
  set_has_fimily_id();
  fimily_id_ = value;
}

// optional string fimily_name = 12;
inline bool redis_role_base::has_fimily_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void redis_role_base::set_has_fimily_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void redis_role_base::clear_has_fimily_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void redis_role_base::clear_fimily_name() {
  if (fimily_name_ != &::google::protobuf::internal::kEmptyString) {
    fimily_name_->clear();
  }
  clear_has_fimily_name();
}
inline const ::std::string& redis_role_base::fimily_name() const {
  return *fimily_name_;
}
inline void redis_role_base::set_fimily_name(const ::std::string& value) {
  set_has_fimily_name();
  if (fimily_name_ == &::google::protobuf::internal::kEmptyString) {
    fimily_name_ = new ::std::string;
  }
  fimily_name_->assign(value);
}
inline void redis_role_base::set_fimily_name(const char* value) {
  set_has_fimily_name();
  if (fimily_name_ == &::google::protobuf::internal::kEmptyString) {
    fimily_name_ = new ::std::string;
  }
  fimily_name_->assign(value);
}
inline void redis_role_base::set_fimily_name(const char* value, size_t size) {
  set_has_fimily_name();
  if (fimily_name_ == &::google::protobuf::internal::kEmptyString) {
    fimily_name_ = new ::std::string;
  }
  fimily_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* redis_role_base::mutable_fimily_name() {
  set_has_fimily_name();
  if (fimily_name_ == &::google::protobuf::internal::kEmptyString) {
    fimily_name_ = new ::std::string;
  }
  return fimily_name_;
}
inline ::std::string* redis_role_base::release_fimily_name() {
  clear_has_fimily_name();
  if (fimily_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fimily_name_;
    fimily_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void redis_role_base::set_allocated_fimily_name(::std::string* fimily_name) {
  if (fimily_name_ != &::google::protobuf::internal::kEmptyString) {
    delete fimily_name_;
  }
  if (fimily_name) {
    set_has_fimily_name();
    fimily_name_ = fimily_name;
  } else {
    clear_has_fimily_name();
    fimily_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string signature = 13;
inline bool redis_role_base::has_signature() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void redis_role_base::set_has_signature() {
  _has_bits_[0] |= 0x00000800u;
}
inline void redis_role_base::clear_has_signature() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void redis_role_base::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& redis_role_base::signature() const {
  return *signature_;
}
inline void redis_role_base::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void redis_role_base::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void redis_role_base::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* redis_role_base::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* redis_role_base::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void redis_role_base::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .SProtoSpace.lsg_position_info position = 14;
inline bool redis_role_base::has_position() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void redis_role_base::set_has_position() {
  _has_bits_[0] |= 0x00001000u;
}
inline void redis_role_base::clear_has_position() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void redis_role_base::clear_position() {
  if (position_ != NULL) position_->::SProtoSpace::lsg_position_info::Clear();
  clear_has_position();
}
inline const ::SProtoSpace::lsg_position_info& redis_role_base::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::SProtoSpace::lsg_position_info* redis_role_base::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::SProtoSpace::lsg_position_info;
  return position_;
}
inline ::SProtoSpace::lsg_position_info* redis_role_base::release_position() {
  clear_has_position();
  ::SProtoSpace::lsg_position_info* temp = position_;
  position_ = NULL;
  return temp;
}
inline void redis_role_base::set_allocated_position(::SProtoSpace::lsg_position_info* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// repeated uint64 liked_list = 16;
inline int redis_role_base::liked_list_size() const {
  return liked_list_.size();
}
inline void redis_role_base::clear_liked_list() {
  liked_list_.Clear();
}
inline ::google::protobuf::uint64 redis_role_base::liked_list(int index) const {
  return liked_list_.Get(index);
}
inline void redis_role_base::set_liked_list(int index, ::google::protobuf::uint64 value) {
  liked_list_.Set(index, value);
}
inline void redis_role_base::add_liked_list(::google::protobuf::uint64 value) {
  liked_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
redis_role_base::liked_list() const {
  return liked_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
redis_role_base::mutable_liked_list() {
  return &liked_list_;
}

// optional uint32 border = 18;
inline bool redis_role_base::has_border() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void redis_role_base::set_has_border() {
  _has_bits_[0] |= 0x00004000u;
}
inline void redis_role_base::clear_has_border() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void redis_role_base::clear_border() {
  border_ = 0u;
  clear_has_border();
}
inline ::google::protobuf::uint32 redis_role_base::border() const {
  return border_;
}
inline void redis_role_base::set_border(::google::protobuf::uint32 value) {
  set_has_border();
  border_ = value;
}

// optional .SProtoSpace.date_info birthday = 19;
inline bool redis_role_base::has_birthday() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void redis_role_base::set_has_birthday() {
  _has_bits_[0] |= 0x00008000u;
}
inline void redis_role_base::clear_has_birthday() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void redis_role_base::clear_birthday() {
  if (birthday_ != NULL) birthday_->::SProtoSpace::date_info::Clear();
  clear_has_birthday();
}
inline const ::SProtoSpace::date_info& redis_role_base::birthday() const {
  return birthday_ != NULL ? *birthday_ : *default_instance_->birthday_;
}
inline ::SProtoSpace::date_info* redis_role_base::mutable_birthday() {
  set_has_birthday();
  if (birthday_ == NULL) birthday_ = new ::SProtoSpace::date_info;
  return birthday_;
}
inline ::SProtoSpace::date_info* redis_role_base::release_birthday() {
  clear_has_birthday();
  ::SProtoSpace::date_info* temp = birthday_;
  birthday_ = NULL;
  return temp;
}
inline void redis_role_base::set_allocated_birthday(::SProtoSpace::date_info* birthday) {
  delete birthday_;
  birthday_ = birthday;
  if (birthday) {
    set_has_birthday();
  } else {
    clear_has_birthday();
  }
}

// optional uint32 star_sign = 20 [default = 1];
inline bool redis_role_base::has_star_sign() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void redis_role_base::set_has_star_sign() {
  _has_bits_[0] |= 0x00010000u;
}
inline void redis_role_base::clear_has_star_sign() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void redis_role_base::clear_star_sign() {
  star_sign_ = 1u;
  clear_has_star_sign();
}
inline ::google::protobuf::uint32 redis_role_base::star_sign() const {
  return star_sign_;
}
inline void redis_role_base::set_star_sign(::google::protobuf::uint32 value) {
  set_has_star_sign();
  star_sign_ = value;
}

// optional uint32 popularity = 21 [default = 0];
inline bool redis_role_base::has_popularity() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void redis_role_base::set_has_popularity() {
  _has_bits_[0] |= 0x00020000u;
}
inline void redis_role_base::clear_has_popularity() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void redis_role_base::clear_popularity() {
  popularity_ = 0u;
  clear_has_popularity();
}
inline ::google::protobuf::uint32 redis_role_base::popularity() const {
  return popularity_;
}
inline void redis_role_base::set_popularity(::google::protobuf::uint32 value) {
  set_has_popularity();
  popularity_ = value;
}

// optional uint32 charm = 22 [default = 0];
inline bool redis_role_base::has_charm() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void redis_role_base::set_has_charm() {
  _has_bits_[0] |= 0x00040000u;
}
inline void redis_role_base::clear_has_charm() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void redis_role_base::clear_charm() {
  charm_ = 0u;
  clear_has_charm();
}
inline ::google::protobuf::uint32 redis_role_base::charm() const {
  return charm_;
}
inline void redis_role_base::set_charm(::google::protobuf::uint32 value) {
  set_has_charm();
  charm_ = value;
}

// repeated uint32 labels = 23;
inline int redis_role_base::labels_size() const {
  return labels_.size();
}
inline void redis_role_base::clear_labels() {
  labels_.Clear();
}
inline ::google::protobuf::uint32 redis_role_base::labels(int index) const {
  return labels_.Get(index);
}
inline void redis_role_base::set_labels(int index, ::google::protobuf::uint32 value) {
  labels_.Set(index, value);
}
inline void redis_role_base::add_labels(::google::protobuf::uint32 value) {
  labels_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
redis_role_base::labels() const {
  return labels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
redis_role_base::mutable_labels() {
  return &labels_;
}

// optional uint32 fight_value = 24;
inline bool redis_role_base::has_fight_value() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void redis_role_base::set_has_fight_value() {
  _has_bits_[0] |= 0x00100000u;
}
inline void redis_role_base::clear_has_fight_value() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void redis_role_base::clear_fight_value() {
  fight_value_ = 0u;
  clear_has_fight_value();
}
inline ::google::protobuf::uint32 redis_role_base::fight_value() const {
  return fight_value_;
}
inline void redis_role_base::set_fight_value(::google::protobuf::uint32 value) {
  set_has_fight_value();
  fight_value_ = value;
}

// -------------------------------------------------------------------

// redis_role_show_hero

// repeated .SProtoSpace.battle_hero_info show_hero_list = 15;
inline int redis_role_show_hero::show_hero_list_size() const {
  return show_hero_list_.size();
}
inline void redis_role_show_hero::clear_show_hero_list() {
  show_hero_list_.Clear();
}
inline const ::SProtoSpace::battle_hero_info& redis_role_show_hero::show_hero_list(int index) const {
  return show_hero_list_.Get(index);
}
inline ::SProtoSpace::battle_hero_info* redis_role_show_hero::mutable_show_hero_list(int index) {
  return show_hero_list_.Mutable(index);
}
inline ::SProtoSpace::battle_hero_info* redis_role_show_hero::add_show_hero_list() {
  return show_hero_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info >&
redis_role_show_hero::show_hero_list() const {
  return show_hero_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info >*
redis_role_show_hero::mutable_show_hero_list() {
  return &show_hero_list_;
}

// repeated uint64 show_hero_id_list = 17;
inline int redis_role_show_hero::show_hero_id_list_size() const {
  return show_hero_id_list_.size();
}
inline void redis_role_show_hero::clear_show_hero_id_list() {
  show_hero_id_list_.Clear();
}
inline ::google::protobuf::uint64 redis_role_show_hero::show_hero_id_list(int index) const {
  return show_hero_id_list_.Get(index);
}
inline void redis_role_show_hero::set_show_hero_id_list(int index, ::google::protobuf::uint64 value) {
  show_hero_id_list_.Set(index, value);
}
inline void redis_role_show_hero::add_show_hero_id_list(::google::protobuf::uint64 value) {
  show_hero_id_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
redis_role_show_hero::show_hero_id_list() const {
  return show_hero_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
redis_role_show_hero::mutable_show_hero_id_list() {
  return &show_hero_id_list_;
}

// -------------------------------------------------------------------

// redis_role_battle_hero

// repeated .SProtoSpace.battle_hero_info battle_hero_list = 15;
inline int redis_role_battle_hero::battle_hero_list_size() const {
  return battle_hero_list_.size();
}
inline void redis_role_battle_hero::clear_battle_hero_list() {
  battle_hero_list_.Clear();
}
inline const ::SProtoSpace::battle_hero_info& redis_role_battle_hero::battle_hero_list(int index) const {
  return battle_hero_list_.Get(index);
}
inline ::SProtoSpace::battle_hero_info* redis_role_battle_hero::mutable_battle_hero_list(int index) {
  return battle_hero_list_.Mutable(index);
}
inline ::SProtoSpace::battle_hero_info* redis_role_battle_hero::add_battle_hero_list() {
  return battle_hero_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info >&
redis_role_battle_hero::battle_hero_list() const {
  return battle_hero_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info >*
redis_role_battle_hero::mutable_battle_hero_list() {
  return &battle_hero_list_;
}

// -------------------------------------------------------------------

// redis_comment_all

// repeated .SProtoSpace.comment_info comment_list = 1;
inline int redis_comment_all::comment_list_size() const {
  return comment_list_.size();
}
inline void redis_comment_all::clear_comment_list() {
  comment_list_.Clear();
}
inline const ::SProtoSpace::comment_info& redis_comment_all::comment_list(int index) const {
  return comment_list_.Get(index);
}
inline ::SProtoSpace::comment_info* redis_comment_all::mutable_comment_list(int index) {
  return comment_list_.Mutable(index);
}
inline ::SProtoSpace::comment_info* redis_comment_all::add_comment_list() {
  return comment_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::comment_info >&
redis_comment_all::comment_list() const {
  return comment_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::comment_info >*
redis_comment_all::mutable_comment_list() {
  return &comment_list_;
}

// optional int32 index = 2;
inline bool redis_comment_all::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void redis_comment_all::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void redis_comment_all::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void redis_comment_all::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 redis_comment_all::index() const {
  return index_;
}
inline void redis_comment_all::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// redis_role_data

// optional .SProtoSpace.redis_role_base base_data = 1;
inline bool redis_role_data::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void redis_role_data::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void redis_role_data::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void redis_role_data::clear_base_data() {
  if (base_data_ != NULL) base_data_->::SProtoSpace::redis_role_base::Clear();
  clear_has_base_data();
}
inline const ::SProtoSpace::redis_role_base& redis_role_data::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::SProtoSpace::redis_role_base* redis_role_data::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::SProtoSpace::redis_role_base;
  return base_data_;
}
inline ::SProtoSpace::redis_role_base* redis_role_data::release_base_data() {
  clear_has_base_data();
  ::SProtoSpace::redis_role_base* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void redis_role_data::set_allocated_base_data(::SProtoSpace::redis_role_base* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional .SProtoSpace.redis_role_show_hero show_hero_data = 2;
inline bool redis_role_data::has_show_hero_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void redis_role_data::set_has_show_hero_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void redis_role_data::clear_has_show_hero_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void redis_role_data::clear_show_hero_data() {
  if (show_hero_data_ != NULL) show_hero_data_->::SProtoSpace::redis_role_show_hero::Clear();
  clear_has_show_hero_data();
}
inline const ::SProtoSpace::redis_role_show_hero& redis_role_data::show_hero_data() const {
  return show_hero_data_ != NULL ? *show_hero_data_ : *default_instance_->show_hero_data_;
}
inline ::SProtoSpace::redis_role_show_hero* redis_role_data::mutable_show_hero_data() {
  set_has_show_hero_data();
  if (show_hero_data_ == NULL) show_hero_data_ = new ::SProtoSpace::redis_role_show_hero;
  return show_hero_data_;
}
inline ::SProtoSpace::redis_role_show_hero* redis_role_data::release_show_hero_data() {
  clear_has_show_hero_data();
  ::SProtoSpace::redis_role_show_hero* temp = show_hero_data_;
  show_hero_data_ = NULL;
  return temp;
}
inline void redis_role_data::set_allocated_show_hero_data(::SProtoSpace::redis_role_show_hero* show_hero_data) {
  delete show_hero_data_;
  show_hero_data_ = show_hero_data;
  if (show_hero_data) {
    set_has_show_hero_data();
  } else {
    clear_has_show_hero_data();
  }
}

// optional .SProtoSpace.redis_role_battle_hero battle_hero_data = 3;
inline bool redis_role_data::has_battle_hero_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void redis_role_data::set_has_battle_hero_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void redis_role_data::clear_has_battle_hero_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void redis_role_data::clear_battle_hero_data() {
  if (battle_hero_data_ != NULL) battle_hero_data_->::SProtoSpace::redis_role_battle_hero::Clear();
  clear_has_battle_hero_data();
}
inline const ::SProtoSpace::redis_role_battle_hero& redis_role_data::battle_hero_data() const {
  return battle_hero_data_ != NULL ? *battle_hero_data_ : *default_instance_->battle_hero_data_;
}
inline ::SProtoSpace::redis_role_battle_hero* redis_role_data::mutable_battle_hero_data() {
  set_has_battle_hero_data();
  if (battle_hero_data_ == NULL) battle_hero_data_ = new ::SProtoSpace::redis_role_battle_hero;
  return battle_hero_data_;
}
inline ::SProtoSpace::redis_role_battle_hero* redis_role_data::release_battle_hero_data() {
  clear_has_battle_hero_data();
  ::SProtoSpace::redis_role_battle_hero* temp = battle_hero_data_;
  battle_hero_data_ = NULL;
  return temp;
}
inline void redis_role_data::set_allocated_battle_hero_data(::SProtoSpace::redis_role_battle_hero* battle_hero_data) {
  delete battle_hero_data_;
  battle_hero_data_ = battle_hero_data;
  if (battle_hero_data) {
    set_has_battle_hero_data();
  } else {
    clear_has_battle_hero_data();
  }
}

// optional .SProtoSpace.fashions_pack fashion_data = 5;
inline bool redis_role_data::has_fashion_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void redis_role_data::set_has_fashion_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void redis_role_data::clear_has_fashion_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void redis_role_data::clear_fashion_data() {
  if (fashion_data_ != NULL) fashion_data_->::SProtoSpace::fashions_pack::Clear();
  clear_has_fashion_data();
}
inline const ::SProtoSpace::fashions_pack& redis_role_data::fashion_data() const {
  return fashion_data_ != NULL ? *fashion_data_ : *default_instance_->fashion_data_;
}
inline ::SProtoSpace::fashions_pack* redis_role_data::mutable_fashion_data() {
  set_has_fashion_data();
  if (fashion_data_ == NULL) fashion_data_ = new ::SProtoSpace::fashions_pack;
  return fashion_data_;
}
inline ::SProtoSpace::fashions_pack* redis_role_data::release_fashion_data() {
  clear_has_fashion_data();
  ::SProtoSpace::fashions_pack* temp = fashion_data_;
  fashion_data_ = NULL;
  return temp;
}
inline void redis_role_data::set_allocated_fashion_data(::SProtoSpace::fashions_pack* fashion_data) {
  delete fashion_data_;
  fashion_data_ = fashion_data;
  if (fashion_data) {
    set_has_fashion_data();
  } else {
    clear_has_fashion_data();
  }
}

// -------------------------------------------------------------------

// arena_user_data

// optional uint64 role_id = 1;
inline bool arena_user_data::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void arena_user_data::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void arena_user_data::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void arena_user_data::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 arena_user_data::role_id() const {
  return role_id_;
}
inline void arena_user_data::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 challenged_num = 2;
inline bool arena_user_data::has_challenged_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void arena_user_data::set_has_challenged_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void arena_user_data::clear_has_challenged_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void arena_user_data::clear_challenged_num() {
  challenged_num_ = 0;
  clear_has_challenged_num();
}
inline ::google::protobuf::int32 arena_user_data::challenged_num() const {
  return challenged_num_;
}
inline void arena_user_data::set_challenged_num(::google::protobuf::int32 value) {
  set_has_challenged_num();
  challenged_num_ = value;
}

// optional bool is_robot = 3;
inline bool arena_user_data::has_is_robot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void arena_user_data::set_has_is_robot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void arena_user_data::clear_has_is_robot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void arena_user_data::clear_is_robot() {
  is_robot_ = false;
  clear_has_is_robot();
}
inline bool arena_user_data::is_robot() const {
  return is_robot_;
}
inline void arena_user_data::set_is_robot(bool value) {
  set_has_is_robot();
  is_robot_ = value;
}

// optional int32 win_count = 4;
inline bool arena_user_data::has_win_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void arena_user_data::set_has_win_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void arena_user_data::clear_has_win_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void arena_user_data::clear_win_count() {
  win_count_ = 0;
  clear_has_win_count();
}
inline ::google::protobuf::int32 arena_user_data::win_count() const {
  return win_count_;
}
inline void arena_user_data::set_win_count(::google::protobuf::int32 value) {
  set_has_win_count();
  win_count_ = value;
}

// optional int32 fail_count = 5;
inline bool arena_user_data::has_fail_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void arena_user_data::set_has_fail_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void arena_user_data::clear_has_fail_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void arena_user_data::clear_fail_count() {
  fail_count_ = 0;
  clear_has_fail_count();
}
inline ::google::protobuf::int32 arena_user_data::fail_count() const {
  return fail_count_;
}
inline void arena_user_data::set_fail_count(::google::protobuf::int32 value) {
  set_has_fail_count();
  fail_count_ = value;
}

// optional .SProtoSpace.battle_role_info battle_data = 6;
inline bool arena_user_data::has_battle_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void arena_user_data::set_has_battle_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void arena_user_data::clear_has_battle_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void arena_user_data::clear_battle_data() {
  if (battle_data_ != NULL) battle_data_->::SProtoSpace::battle_role_info::Clear();
  clear_has_battle_data();
}
inline const ::SProtoSpace::battle_role_info& arena_user_data::battle_data() const {
  return battle_data_ != NULL ? *battle_data_ : *default_instance_->battle_data_;
}
inline ::SProtoSpace::battle_role_info* arena_user_data::mutable_battle_data() {
  set_has_battle_data();
  if (battle_data_ == NULL) battle_data_ = new ::SProtoSpace::battle_role_info;
  return battle_data_;
}
inline ::SProtoSpace::battle_role_info* arena_user_data::release_battle_data() {
  clear_has_battle_data();
  ::SProtoSpace::battle_role_info* temp = battle_data_;
  battle_data_ = NULL;
  return temp;
}
inline void arena_user_data::set_allocated_battle_data(::SProtoSpace::battle_role_info* battle_data) {
  delete battle_data_;
  battle_data_ = battle_data;
  if (battle_data) {
    set_has_battle_data();
  } else {
    clear_has_battle_data();
  }
}

// -------------------------------------------------------------------

// db_get_redis_role_data_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_get_redis_role_data_req_id];
inline bool db_get_redis_role_data_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_redis_role_data_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_redis_role_data_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_redis_role_data_req::clear_protoid() {
  protoid_ = 226;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_get_redis_role_data_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_get_redis_role_data_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.eDBGetRedisRoleDataType type = 2;
inline bool db_get_redis_role_data_req::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_redis_role_data_req::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_redis_role_data_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_redis_role_data_req::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::SProtoSpace::eDBGetRedisRoleDataType db_get_redis_role_data_req::type() const {
  return static_cast< ::SProtoSpace::eDBGetRedisRoleDataType >(type_);
}
inline void db_get_redis_role_data_req::set_type(::SProtoSpace::eDBGetRedisRoleDataType value) {
  assert(::SProtoSpace::eDBGetRedisRoleDataType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint64 role_id = 3;
inline bool db_get_redis_role_data_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_get_redis_role_data_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_get_redis_role_data_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_get_redis_role_data_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_get_redis_role_data_req::role_id() const {
  return role_id_;
}
inline void db_get_redis_role_data_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 target_role_id = 4;
inline bool db_get_redis_role_data_req::has_target_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_get_redis_role_data_req::set_has_target_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_get_redis_role_data_req::clear_has_target_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_get_redis_role_data_req::clear_target_role_id() {
  target_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_role_id();
}
inline ::google::protobuf::uint64 db_get_redis_role_data_req::target_role_id() const {
  return target_role_id_;
}
inline void db_get_redis_role_data_req::set_target_role_id(::google::protobuf::uint64 value) {
  set_has_target_role_id();
  target_role_id_ = value;
}

// -------------------------------------------------------------------

// db_get_redis_role_data_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_get_redis_role_data_ack_id];
inline bool db_get_redis_role_data_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_redis_role_data_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_redis_role_data_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_redis_role_data_ack::clear_protoid() {
  protoid_ = 227;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_get_redis_role_data_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_get_redis_role_data_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.eDBGetRedisRoleDataType type = 2;
inline bool db_get_redis_role_data_ack::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_redis_role_data_ack::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_redis_role_data_ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_redis_role_data_ack::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::SProtoSpace::eDBGetRedisRoleDataType db_get_redis_role_data_ack::type() const {
  return static_cast< ::SProtoSpace::eDBGetRedisRoleDataType >(type_);
}
inline void db_get_redis_role_data_ack::set_type(::SProtoSpace::eDBGetRedisRoleDataType value) {
  assert(::SProtoSpace::eDBGetRedisRoleDataType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 result = 3;
inline bool db_get_redis_role_data_ack::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_get_redis_role_data_ack::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_get_redis_role_data_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_get_redis_role_data_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 db_get_redis_role_data_ack::result() const {
  return result_;
}
inline void db_get_redis_role_data_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 role_id = 4;
inline bool db_get_redis_role_data_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_get_redis_role_data_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_get_redis_role_data_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_get_redis_role_data_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_get_redis_role_data_ack::role_id() const {
  return role_id_;
}
inline void db_get_redis_role_data_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 target_role_id = 5;
inline bool db_get_redis_role_data_ack::has_target_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_get_redis_role_data_ack::set_has_target_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_get_redis_role_data_ack::clear_has_target_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_get_redis_role_data_ack::clear_target_role_id() {
  target_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_role_id();
}
inline ::google::protobuf::uint64 db_get_redis_role_data_ack::target_role_id() const {
  return target_role_id_;
}
inline void db_get_redis_role_data_ack::set_target_role_id(::google::protobuf::uint64 value) {
  set_has_target_role_id();
  target_role_id_ = value;
}

// optional .SProtoSpace.redis_role_data data = 6;
inline bool db_get_redis_role_data_ack::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_get_redis_role_data_ack::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_get_redis_role_data_ack::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_get_redis_role_data_ack::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::redis_role_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::redis_role_data& db_get_redis_role_data_ack::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::redis_role_data* db_get_redis_role_data_ack::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::redis_role_data;
  return data_;
}
inline ::SProtoSpace::redis_role_data* db_get_redis_role_data_ack::release_data() {
  clear_has_data();
  ::SProtoSpace::redis_role_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void db_get_redis_role_data_ack::set_allocated_data(::SProtoSpace::redis_role_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional .SProtoSpace.db_role_all_data role_all_data = 7;
inline bool db_get_redis_role_data_ack::has_role_all_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_get_redis_role_data_ack::set_has_role_all_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_get_redis_role_data_ack::clear_has_role_all_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_get_redis_role_data_ack::clear_role_all_data() {
  if (role_all_data_ != NULL) role_all_data_->::SProtoSpace::db_role_all_data::Clear();
  clear_has_role_all_data();
}
inline const ::SProtoSpace::db_role_all_data& db_get_redis_role_data_ack::role_all_data() const {
  return role_all_data_ != NULL ? *role_all_data_ : *default_instance_->role_all_data_;
}
inline ::SProtoSpace::db_role_all_data* db_get_redis_role_data_ack::mutable_role_all_data() {
  set_has_role_all_data();
  if (role_all_data_ == NULL) role_all_data_ = new ::SProtoSpace::db_role_all_data;
  return role_all_data_;
}
inline ::SProtoSpace::db_role_all_data* db_get_redis_role_data_ack::release_role_all_data() {
  clear_has_role_all_data();
  ::SProtoSpace::db_role_all_data* temp = role_all_data_;
  role_all_data_ = NULL;
  return temp;
}
inline void db_get_redis_role_data_ack::set_allocated_role_all_data(::SProtoSpace::db_role_all_data* role_all_data) {
  delete role_all_data_;
  role_all_data_ = role_all_data;
  if (role_all_data) {
    set_has_role_all_data();
  } else {
    clear_has_role_all_data();
  }
}

// -------------------------------------------------------------------

// db_update_redis_role_data_ntf

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_update_redis_role_data_ntf_id];
inline bool db_update_redis_role_data_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_update_redis_role_data_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_update_redis_role_data_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_update_redis_role_data_ntf::clear_protoid() {
  protoid_ = 228;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_update_redis_role_data_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_update_redis_role_data_ntf::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool db_update_redis_role_data_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_update_redis_role_data_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_update_redis_role_data_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_update_redis_role_data_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_update_redis_role_data_ntf::role_id() const {
  return role_id_;
}
inline void db_update_redis_role_data_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .SProtoSpace.redis_role_data data = 3;
inline bool db_update_redis_role_data_ntf::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_update_redis_role_data_ntf::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_update_redis_role_data_ntf::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_update_redis_role_data_ntf::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::redis_role_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::redis_role_data& db_update_redis_role_data_ntf::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::redis_role_data* db_update_redis_role_data_ntf::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::redis_role_data;
  return data_;
}
inline ::SProtoSpace::redis_role_data* db_update_redis_role_data_ntf::release_data() {
  clear_has_data();
  ::SProtoSpace::redis_role_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void db_update_redis_role_data_ntf::set_allocated_data(::SProtoSpace::redis_role_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// db_check_apply_info_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_check_apply_info_req_id];
inline bool db_check_apply_info_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_check_apply_info_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_check_apply_info_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_check_apply_info_req::clear_protoid() {
  protoid_ = 270;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_check_apply_info_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_check_apply_info_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 uuid = 2;
inline bool db_check_apply_info_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_check_apply_info_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_check_apply_info_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_check_apply_info_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_check_apply_info_req::uuid() const {
  return uuid_;
}
inline void db_check_apply_info_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 area_id = 3;
inline bool db_check_apply_info_req::has_area_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_check_apply_info_req::set_has_area_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_check_apply_info_req::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_check_apply_info_req::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 db_check_apply_info_req::area_id() const {
  return area_id_;
}
inline void db_check_apply_info_req::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// -------------------------------------------------------------------

// db_check_apply_info_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_check_apply_info_ack_id];
inline bool db_check_apply_info_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_check_apply_info_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_check_apply_info_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_check_apply_info_ack::clear_protoid() {
  protoid_ = 271;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_check_apply_info_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_check_apply_info_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 uuid = 2;
inline bool db_check_apply_info_ack::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_check_apply_info_ack::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_check_apply_info_ack::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_check_apply_info_ack::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_check_apply_info_ack::uuid() const {
  return uuid_;
}
inline void db_check_apply_info_ack::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// repeated .SProtoSpace.friend_apply_info apply_infos = 3;
inline int db_check_apply_info_ack::apply_infos_size() const {
  return apply_infos_.size();
}
inline void db_check_apply_info_ack::clear_apply_infos() {
  apply_infos_.Clear();
}
inline const ::SProtoSpace::friend_apply_info& db_check_apply_info_ack::apply_infos(int index) const {
  return apply_infos_.Get(index);
}
inline ::SProtoSpace::friend_apply_info* db_check_apply_info_ack::mutable_apply_infos(int index) {
  return apply_infos_.Mutable(index);
}
inline ::SProtoSpace::friend_apply_info* db_check_apply_info_ack::add_apply_infos() {
  return apply_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_apply_info >&
db_check_apply_info_ack::apply_infos() const {
  return apply_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_apply_info >*
db_check_apply_info_ack::mutable_apply_infos() {
  return &apply_infos_;
}

// -------------------------------------------------------------------

// db_save_apply_info_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_save_apply_info_req_id];
inline bool db_save_apply_info_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_save_apply_info_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_save_apply_info_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_save_apply_info_req::clear_protoid() {
  protoid_ = 272;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_save_apply_info_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_save_apply_info_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 accept_id = 2;
inline bool db_save_apply_info_req::has_accept_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_save_apply_info_req::set_has_accept_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_save_apply_info_req::clear_has_accept_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_save_apply_info_req::clear_accept_id() {
  accept_id_ = GOOGLE_ULONGLONG(0);
  clear_has_accept_id();
}
inline ::google::protobuf::uint64 db_save_apply_info_req::accept_id() const {
  return accept_id_;
}
inline void db_save_apply_info_req::set_accept_id(::google::protobuf::uint64 value) {
  set_has_accept_id();
  accept_id_ = value;
}

// optional uint64 apply_id = 3;
inline bool db_save_apply_info_req::has_apply_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_save_apply_info_req::set_has_apply_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_save_apply_info_req::clear_has_apply_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_save_apply_info_req::clear_apply_id() {
  apply_id_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_id();
}
inline ::google::protobuf::uint64 db_save_apply_info_req::apply_id() const {
  return apply_id_;
}
inline void db_save_apply_info_req::set_apply_id(::google::protobuf::uint64 value) {
  set_has_apply_id();
  apply_id_ = value;
}

// optional uint32 area_id = 4;
inline bool db_save_apply_info_req::has_area_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_save_apply_info_req::set_has_area_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_save_apply_info_req::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_save_apply_info_req::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 db_save_apply_info_req::area_id() const {
  return area_id_;
}
inline void db_save_apply_info_req::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// optional string content = 5;
inline bool db_save_apply_info_req::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_save_apply_info_req::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_save_apply_info_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_save_apply_info_req::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& db_save_apply_info_req::content() const {
  return *content_;
}
inline void db_save_apply_info_req::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void db_save_apply_info_req::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void db_save_apply_info_req::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_save_apply_info_req::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* db_save_apply_info_req::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_save_apply_info_req::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// db_update_apply_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_update_apply_req_id];
inline bool db_update_apply_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_update_apply_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_update_apply_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_update_apply_req::clear_proto_id() {
  proto_id_ = 273;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_update_apply_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_update_apply_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 accept_id = 2;
inline bool db_update_apply_req::has_accept_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_update_apply_req::set_has_accept_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_update_apply_req::clear_has_accept_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_update_apply_req::clear_accept_id() {
  accept_id_ = GOOGLE_ULONGLONG(0);
  clear_has_accept_id();
}
inline ::google::protobuf::uint64 db_update_apply_req::accept_id() const {
  return accept_id_;
}
inline void db_update_apply_req::set_accept_id(::google::protobuf::uint64 value) {
  set_has_accept_id();
  accept_id_ = value;
}

// optional uint64 apply_id = 3;
inline bool db_update_apply_req::has_apply_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_update_apply_req::set_has_apply_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_update_apply_req::clear_has_apply_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_update_apply_req::clear_apply_id() {
  apply_id_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_id();
}
inline ::google::protobuf::uint64 db_update_apply_req::apply_id() const {
  return apply_id_;
}
inline void db_update_apply_req::set_apply_id(::google::protobuf::uint64 value) {
  set_has_apply_id();
  apply_id_ = value;
}

// optional uint32 area_id = 4;
inline bool db_update_apply_req::has_area_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_update_apply_req::set_has_area_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_update_apply_req::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_update_apply_req::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 db_update_apply_req::area_id() const {
  return area_id_;
}
inline void db_update_apply_req::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// optional uint32 status = 5;
inline bool db_update_apply_req::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_update_apply_req::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_update_apply_req::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_update_apply_req::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 db_update_apply_req::status() const {
  return status_;
}
inline void db_update_apply_req::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// db_process_apply_info_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_process_apply_info_req_id];
inline bool db_process_apply_info_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_process_apply_info_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_process_apply_info_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_process_apply_info_req::clear_proto_id() {
  proto_id_ = 274;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_process_apply_info_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_process_apply_info_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 apply_id = 2;
inline bool db_process_apply_info_req::has_apply_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_process_apply_info_req::set_has_apply_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_process_apply_info_req::clear_has_apply_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_process_apply_info_req::clear_apply_id() {
  apply_id_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_id();
}
inline ::google::protobuf::uint64 db_process_apply_info_req::apply_id() const {
  return apply_id_;
}
inline void db_process_apply_info_req::set_apply_id(::google::protobuf::uint64 value) {
  set_has_apply_id();
  apply_id_ = value;
}

// optional uint32 area_id = 3;
inline bool db_process_apply_info_req::has_area_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_process_apply_info_req::set_has_area_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_process_apply_info_req::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_process_apply_info_req::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 db_process_apply_info_req::area_id() const {
  return area_id_;
}
inline void db_process_apply_info_req::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// -------------------------------------------------------------------

// db_process_apply_info_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_process_apply_info_ack_id];
inline bool db_process_apply_info_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_process_apply_info_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_process_apply_info_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_process_apply_info_ack::clear_proto_id() {
  proto_id_ = 275;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_process_apply_info_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_process_apply_info_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool db_process_apply_info_ack::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_process_apply_info_ack::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_process_apply_info_ack::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_process_apply_info_ack::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_process_apply_info_ack::uuid() const {
  return uuid_;
}
inline void db_process_apply_info_ack::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// repeated .SProtoSpace.friend_apply_info apply_infos = 3;
inline int db_process_apply_info_ack::apply_infos_size() const {
  return apply_infos_.size();
}
inline void db_process_apply_info_ack::clear_apply_infos() {
  apply_infos_.Clear();
}
inline const ::SProtoSpace::friend_apply_info& db_process_apply_info_ack::apply_infos(int index) const {
  return apply_infos_.Get(index);
}
inline ::SProtoSpace::friend_apply_info* db_process_apply_info_ack::mutable_apply_infos(int index) {
  return apply_infos_.Mutable(index);
}
inline ::SProtoSpace::friend_apply_info* db_process_apply_info_ack::add_apply_infos() {
  return apply_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_apply_info >&
db_process_apply_info_ack::apply_infos() const {
  return apply_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_apply_info >*
db_process_apply_info_ack::mutable_apply_infos() {
  return &apply_infos_;
}

// -------------------------------------------------------------------

// db_search_friend_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_search_friend_req_id];
inline bool db_search_friend_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_search_friend_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_search_friend_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_search_friend_req::clear_proto_id() {
  proto_id_ = 276;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_search_friend_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_search_friend_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool db_search_friend_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_search_friend_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_search_friend_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_search_friend_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_search_friend_req::uuid() const {
  return uuid_;
}
inline void db_search_friend_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 area_id = 3;
inline bool db_search_friend_req::has_area_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_search_friend_req::set_has_area_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_search_friend_req::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_search_friend_req::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 db_search_friend_req::area_id() const {
  return area_id_;
}
inline void db_search_friend_req::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// optional uint32 type = 4;
inline bool db_search_friend_req::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_search_friend_req::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_search_friend_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_search_friend_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_search_friend_req::type() const {
  return type_;
}
inline void db_search_friend_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional string content = 5;
inline bool db_search_friend_req::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_search_friend_req::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_search_friend_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_search_friend_req::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& db_search_friend_req::content() const {
  return *content_;
}
inline void db_search_friend_req::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void db_search_friend_req::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void db_search_friend_req::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_search_friend_req::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* db_search_friend_req::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_search_friend_req::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// db_search_friend_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_search_friend_ack_id];
inline bool db_search_friend_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_search_friend_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_search_friend_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_search_friend_ack::clear_proto_id() {
  proto_id_ = 277;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_search_friend_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_search_friend_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool db_search_friend_ack::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_search_friend_ack::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_search_friend_ack::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_search_friend_ack::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_search_friend_ack::uuid() const {
  return uuid_;
}
inline void db_search_friend_ack::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 ret = 3;
inline bool db_search_friend_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_search_friend_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_search_friend_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_search_friend_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 db_search_friend_ack::ret() const {
  return ret_;
}
inline void db_search_friend_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .SProtoSpace.friend_base_info info = 4;
inline bool db_search_friend_ack::has_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_search_friend_ack::set_has_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_search_friend_ack::clear_has_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_search_friend_ack::clear_info() {
  if (info_ != NULL) info_->::SProtoSpace::friend_base_info::Clear();
  clear_has_info();
}
inline const ::SProtoSpace::friend_base_info& db_search_friend_ack::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::SProtoSpace::friend_base_info* db_search_friend_ack::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::SProtoSpace::friend_base_info;
  return info_;
}
inline ::SProtoSpace::friend_base_info* db_search_friend_ack::release_info() {
  clear_has_info();
  ::SProtoSpace::friend_base_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void db_search_friend_ack::set_allocated_info(::SProtoSpace::friend_base_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// db_save_friend_opt_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_save_friend_opt_req_id];
inline bool db_save_friend_opt_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_save_friend_opt_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_save_friend_opt_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_save_friend_opt_req::clear_proto_id() {
  proto_id_ = 278;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_save_friend_opt_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_save_friend_opt_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool db_save_friend_opt_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_save_friend_opt_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_save_friend_opt_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_save_friend_opt_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_save_friend_opt_req::uuid() const {
  return uuid_;
}
inline void db_save_friend_opt_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint64 target_id = 3;
inline bool db_save_friend_opt_req::has_target_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_save_friend_opt_req::set_has_target_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_save_friend_opt_req::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_save_friend_opt_req::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::uint64 db_save_friend_opt_req::target_id() const {
  return target_id_;
}
inline void db_save_friend_opt_req::set_target_id(::google::protobuf::uint64 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional uint32 type = 4;
inline bool db_save_friend_opt_req::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_save_friend_opt_req::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_save_friend_opt_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_save_friend_opt_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_save_friend_opt_req::type() const {
  return type_;
}
inline void db_save_friend_opt_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint64 opt_time = 5;
inline bool db_save_friend_opt_req::has_opt_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_save_friend_opt_req::set_has_opt_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_save_friend_opt_req::clear_has_opt_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_save_friend_opt_req::clear_opt_time() {
  opt_time_ = GOOGLE_ULONGLONG(0);
  clear_has_opt_time();
}
inline ::google::protobuf::uint64 db_save_friend_opt_req::opt_time() const {
  return opt_time_;
}
inline void db_save_friend_opt_req::set_opt_time(::google::protobuf::uint64 value) {
  set_has_opt_time();
  opt_time_ = value;
}

// optional uint32 status = 6;
inline bool db_save_friend_opt_req::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_save_friend_opt_req::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_save_friend_opt_req::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_save_friend_opt_req::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 db_save_friend_opt_req::status() const {
  return status_;
}
inline void db_save_friend_opt_req::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// opt_record_info

// optional uint64 uuid = 1;
inline bool opt_record_info::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void opt_record_info::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void opt_record_info::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void opt_record_info::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 opt_record_info::uuid() const {
  return uuid_;
}
inline void opt_record_info::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint64 target_id = 2;
inline bool opt_record_info::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void opt_record_info::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void opt_record_info::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void opt_record_info::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::uint64 opt_record_info::target_id() const {
  return target_id_;
}
inline void opt_record_info::set_target_id(::google::protobuf::uint64 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional uint32 type = 3;
inline bool opt_record_info::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void opt_record_info::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void opt_record_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void opt_record_info::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 opt_record_info::type() const {
  return type_;
}
inline void opt_record_info::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint64 opt_time = 4;
inline bool opt_record_info::has_opt_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void opt_record_info::set_has_opt_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void opt_record_info::clear_has_opt_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void opt_record_info::clear_opt_time() {
  opt_time_ = GOOGLE_ULONGLONG(0);
  clear_has_opt_time();
}
inline ::google::protobuf::uint64 opt_record_info::opt_time() const {
  return opt_time_;
}
inline void opt_record_info::set_opt_time(::google::protobuf::uint64 value) {
  set_has_opt_time();
  opt_time_ = value;
}

// optional uint32 status = 5;
inline bool opt_record_info::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void opt_record_info::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void opt_record_info::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void opt_record_info::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 opt_record_info::status() const {
  return status_;
}
inline void opt_record_info::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// db_check_opt_record_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_opt_record_req_id];
inline bool db_check_opt_record_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_check_opt_record_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_check_opt_record_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_check_opt_record_req::clear_proto_id() {
  proto_id_ = 279;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_check_opt_record_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_check_opt_record_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool db_check_opt_record_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_check_opt_record_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_check_opt_record_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_check_opt_record_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_check_opt_record_req::uuid() const {
  return uuid_;
}
inline void db_check_opt_record_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 area_id = 3;
inline bool db_check_opt_record_req::has_area_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_check_opt_record_req::set_has_area_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_check_opt_record_req::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_check_opt_record_req::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 db_check_opt_record_req::area_id() const {
  return area_id_;
}
inline void db_check_opt_record_req::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// -------------------------------------------------------------------

// db_check_opt_record_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_opt_record_ack_id];
inline bool db_check_opt_record_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_check_opt_record_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_check_opt_record_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_check_opt_record_ack::clear_proto_id() {
  proto_id_ = 280;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_check_opt_record_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_check_opt_record_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool db_check_opt_record_ack::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_check_opt_record_ack::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_check_opt_record_ack::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_check_opt_record_ack::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_check_opt_record_ack::uuid() const {
  return uuid_;
}
inline void db_check_opt_record_ack::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 area_id = 3;
inline bool db_check_opt_record_ack::has_area_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_check_opt_record_ack::set_has_area_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_check_opt_record_ack::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_check_opt_record_ack::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 db_check_opt_record_ack::area_id() const {
  return area_id_;
}
inline void db_check_opt_record_ack::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// repeated .SProtoSpace.opt_record_info infos = 4;
inline int db_check_opt_record_ack::infos_size() const {
  return infos_.size();
}
inline void db_check_opt_record_ack::clear_infos() {
  infos_.Clear();
}
inline const ::SProtoSpace::opt_record_info& db_check_opt_record_ack::infos(int index) const {
  return infos_.Get(index);
}
inline ::SProtoSpace::opt_record_info* db_check_opt_record_ack::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::SProtoSpace::opt_record_info* db_check_opt_record_ack::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::opt_record_info >&
db_check_opt_record_ack::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::opt_record_info >*
db_check_opt_record_ack::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// db_update_opt_record_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_update_opt_record_req_id];
inline bool db_update_opt_record_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_update_opt_record_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_update_opt_record_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_update_opt_record_req::clear_proto_id() {
  proto_id_ = 281;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_update_opt_record_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_update_opt_record_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool db_update_opt_record_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_update_opt_record_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_update_opt_record_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_update_opt_record_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_update_opt_record_req::uuid() const {
  return uuid_;
}
inline void db_update_opt_record_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 area_id = 3;
inline bool db_update_opt_record_req::has_area_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_update_opt_record_req::set_has_area_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_update_opt_record_req::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_update_opt_record_req::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 db_update_opt_record_req::area_id() const {
  return area_id_;
}
inline void db_update_opt_record_req::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// repeated .SProtoSpace.opt_record_info infos = 4;
inline int db_update_opt_record_req::infos_size() const {
  return infos_.size();
}
inline void db_update_opt_record_req::clear_infos() {
  infos_.Clear();
}
inline const ::SProtoSpace::opt_record_info& db_update_opt_record_req::infos(int index) const {
  return infos_.Get(index);
}
inline ::SProtoSpace::opt_record_info* db_update_opt_record_req::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::SProtoSpace::opt_record_info* db_update_opt_record_req::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::opt_record_info >&
db_update_opt_record_req::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::opt_record_info >*
db_update_opt_record_req::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// db_get_recommend_friend_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_recommend_friend_req_id];
inline bool db_get_recommend_friend_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_recommend_friend_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_recommend_friend_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_recommend_friend_req::clear_proto_id() {
  proto_id_ = 282;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_get_recommend_friend_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_get_recommend_friend_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool db_get_recommend_friend_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_recommend_friend_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_recommend_friend_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_recommend_friend_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_get_recommend_friend_req::uuid() const {
  return uuid_;
}
inline void db_get_recommend_friend_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 area_id = 3;
inline bool db_get_recommend_friend_req::has_area_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_get_recommend_friend_req::set_has_area_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_get_recommend_friend_req::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_get_recommend_friend_req::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 db_get_recommend_friend_req::area_id() const {
  return area_id_;
}
inline void db_get_recommend_friend_req::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// optional uint32 lv = 4;
inline bool db_get_recommend_friend_req::has_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_get_recommend_friend_req::set_has_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_get_recommend_friend_req::clear_has_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_get_recommend_friend_req::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 db_get_recommend_friend_req::lv() const {
  return lv_;
}
inline void db_get_recommend_friend_req::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional uint32 grade = 5;
inline bool db_get_recommend_friend_req::has_grade() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_get_recommend_friend_req::set_has_grade() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_get_recommend_friend_req::clear_has_grade() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_get_recommend_friend_req::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 db_get_recommend_friend_req::grade() const {
  return grade_;
}
inline void db_get_recommend_friend_req::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint32 sex = 6;
inline bool db_get_recommend_friend_req::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_get_recommend_friend_req::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_get_recommend_friend_req::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_get_recommend_friend_req::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 db_get_recommend_friend_req::sex() const {
  return sex_;
}
inline void db_get_recommend_friend_req::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 count = 7;
inline bool db_get_recommend_friend_req::has_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_get_recommend_friend_req::set_has_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_get_recommend_friend_req::clear_has_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_get_recommend_friend_req::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 db_get_recommend_friend_req::count() const {
  return count_;
}
inline void db_get_recommend_friend_req::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// repeated uint64 fd_ids = 8;
inline int db_get_recommend_friend_req::fd_ids_size() const {
  return fd_ids_.size();
}
inline void db_get_recommend_friend_req::clear_fd_ids() {
  fd_ids_.Clear();
}
inline ::google::protobuf::uint64 db_get_recommend_friend_req::fd_ids(int index) const {
  return fd_ids_.Get(index);
}
inline void db_get_recommend_friend_req::set_fd_ids(int index, ::google::protobuf::uint64 value) {
  fd_ids_.Set(index, value);
}
inline void db_get_recommend_friend_req::add_fd_ids(::google::protobuf::uint64 value) {
  fd_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
db_get_recommend_friend_req::fd_ids() const {
  return fd_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
db_get_recommend_friend_req::mutable_fd_ids() {
  return &fd_ids_;
}

// -------------------------------------------------------------------

// db_get_recommend_friend_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_recommend_friend_ack_id];
inline bool db_get_recommend_friend_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_recommend_friend_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_recommend_friend_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_recommend_friend_ack::clear_proto_id() {
  proto_id_ = 283;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_get_recommend_friend_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_get_recommend_friend_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool db_get_recommend_friend_ack::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_recommend_friend_ack::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_recommend_friend_ack::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_recommend_friend_ack::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_get_recommend_friend_ack::uuid() const {
  return uuid_;
}
inline void db_get_recommend_friend_ack::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 area_id = 3;
inline bool db_get_recommend_friend_ack::has_area_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_get_recommend_friend_ack::set_has_area_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_get_recommend_friend_ack::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_get_recommend_friend_ack::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 db_get_recommend_friend_ack::area_id() const {
  return area_id_;
}
inline void db_get_recommend_friend_ack::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// repeated .SProtoSpace.friend_base_info fd_infos = 4;
inline int db_get_recommend_friend_ack::fd_infos_size() const {
  return fd_infos_.size();
}
inline void db_get_recommend_friend_ack::clear_fd_infos() {
  fd_infos_.Clear();
}
inline const ::SProtoSpace::friend_base_info& db_get_recommend_friend_ack::fd_infos(int index) const {
  return fd_infos_.Get(index);
}
inline ::SProtoSpace::friend_base_info* db_get_recommend_friend_ack::mutable_fd_infos(int index) {
  return fd_infos_.Mutable(index);
}
inline ::SProtoSpace::friend_base_info* db_get_recommend_friend_ack::add_fd_infos() {
  return fd_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >&
db_get_recommend_friend_ack::fd_infos() const {
  return fd_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >*
db_get_recommend_friend_ack::mutable_fd_infos() {
  return &fd_infos_;
}

// -------------------------------------------------------------------

// gs_get_role_data_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_get_role_data_req_id];
inline bool gs_get_role_data_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_get_role_data_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_get_role_data_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_get_role_data_req::clear_protoid() {
  protoid_ = 220;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID gs_get_role_data_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void gs_get_role_data_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool gs_get_role_data_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_get_role_data_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_get_role_data_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_get_role_data_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 gs_get_role_data_req::role_id() const {
  return role_id_;
}
inline void gs_get_role_data_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 gate_id = 3;
inline bool gs_get_role_data_req::has_gate_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_get_role_data_req::set_has_gate_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_get_role_data_req::clear_has_gate_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_get_role_data_req::clear_gate_id() {
  gate_id_ = GOOGLE_ULONGLONG(0);
  clear_has_gate_id();
}
inline ::google::protobuf::uint64 gs_get_role_data_req::gate_id() const {
  return gate_id_;
}
inline void gs_get_role_data_req::set_gate_id(::google::protobuf::uint64 value) {
  set_has_gate_id();
  gate_id_ = value;
}

// optional uint32 area_id = 4;
inline bool gs_get_role_data_req::has_area_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_get_role_data_req::set_has_area_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_get_role_data_req::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_get_role_data_req::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 gs_get_role_data_req::area_id() const {
  return area_id_;
}
inline void gs_get_role_data_req::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// optional uint32 online_type = 5;
inline bool gs_get_role_data_req::has_online_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gs_get_role_data_req::set_has_online_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gs_get_role_data_req::clear_has_online_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gs_get_role_data_req::clear_online_type() {
  online_type_ = 0u;
  clear_has_online_type();
}
inline ::google::protobuf::uint32 gs_get_role_data_req::online_type() const {
  return online_type_;
}
inline void gs_get_role_data_req::set_online_type(::google::protobuf::uint32 value) {
  set_has_online_type();
  online_type_ = value;
}

// optional uint64 new_db_svr_id = 6;
inline bool gs_get_role_data_req::has_new_db_svr_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gs_get_role_data_req::set_has_new_db_svr_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gs_get_role_data_req::clear_has_new_db_svr_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gs_get_role_data_req::clear_new_db_svr_id() {
  new_db_svr_id_ = GOOGLE_ULONGLONG(0);
  clear_has_new_db_svr_id();
}
inline ::google::protobuf::uint64 gs_get_role_data_req::new_db_svr_id() const {
  return new_db_svr_id_;
}
inline void gs_get_role_data_req::set_new_db_svr_id(::google::protobuf::uint64 value) {
  set_has_new_db_svr_id();
  new_db_svr_id_ = value;
}

// optional bool is_switch_scene = 7 [default = false];
inline bool gs_get_role_data_req::has_is_switch_scene() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gs_get_role_data_req::set_has_is_switch_scene() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gs_get_role_data_req::clear_has_is_switch_scene() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gs_get_role_data_req::clear_is_switch_scene() {
  is_switch_scene_ = false;
  clear_has_is_switch_scene();
}
inline bool gs_get_role_data_req::is_switch_scene() const {
  return is_switch_scene_;
}
inline void gs_get_role_data_req::set_is_switch_scene(bool value) {
  set_has_is_switch_scene();
  is_switch_scene_ = value;
}

// optional uint32 scene_id = 8 [default = 0];
inline bool gs_get_role_data_req::has_scene_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gs_get_role_data_req::set_has_scene_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gs_get_role_data_req::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gs_get_role_data_req::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 gs_get_role_data_req::scene_id() const {
  return scene_id_;
}
inline void gs_get_role_data_req::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional uint32 scene_type = 9 [default = 0];
inline bool gs_get_role_data_req::has_scene_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gs_get_role_data_req::set_has_scene_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void gs_get_role_data_req::clear_has_scene_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void gs_get_role_data_req::clear_scene_type() {
  scene_type_ = 0u;
  clear_has_scene_type();
}
inline ::google::protobuf::uint32 gs_get_role_data_req::scene_type() const {
  return scene_type_;
}
inline void gs_get_role_data_req::set_scene_type(::google::protobuf::uint32 value) {
  set_has_scene_type();
  scene_type_ = value;
}

// -------------------------------------------------------------------

// db_role_data_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_data_ack_id];
inline bool db_role_data_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_data_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_data_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_data_ack::clear_protoid() {
  protoid_ = 221;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_data_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_data_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret_code = 2;
inline bool db_role_data_ack::has_ret_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_data_ack::set_has_ret_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_data_ack::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_data_ack::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 db_role_data_ack::ret_code() const {
  return ret_code_;
}
inline void db_role_data_ack::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// optional uint64 role_id = 3;
inline bool db_role_data_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_data_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_data_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_data_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_data_ack::role_id() const {
  return role_id_;
}
inline void db_role_data_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 gate_id = 4;
inline bool db_role_data_ack::has_gate_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_data_ack::set_has_gate_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_data_ack::clear_has_gate_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_data_ack::clear_gate_id() {
  gate_id_ = GOOGLE_ULONGLONG(0);
  clear_has_gate_id();
}
inline ::google::protobuf::uint64 db_role_data_ack::gate_id() const {
  return gate_id_;
}
inline void db_role_data_ack::set_gate_id(::google::protobuf::uint64 value) {
  set_has_gate_id();
  gate_id_ = value;
}

// optional uint32 area_id = 5;
inline bool db_role_data_ack::has_area_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_role_data_ack::set_has_area_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_role_data_ack::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_role_data_ack::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 db_role_data_ack::area_id() const {
  return area_id_;
}
inline void db_role_data_ack::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// optional bool online_type = 6;
inline bool db_role_data_ack::has_online_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_role_data_ack::set_has_online_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_role_data_ack::clear_has_online_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_role_data_ack::clear_online_type() {
  online_type_ = false;
  clear_has_online_type();
}
inline bool db_role_data_ack::online_type() const {
  return online_type_;
}
inline void db_role_data_ack::set_online_type(bool value) {
  set_has_online_type();
  online_type_ = value;
}

// optional .SProtoSpace.db_role_all_data data = 7;
inline bool db_role_data_ack::has_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_role_data_ack::set_has_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_role_data_ack::clear_has_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_role_data_ack::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::db_role_all_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::db_role_all_data& db_role_data_ack::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::db_role_all_data* db_role_data_ack::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::db_role_all_data;
  return data_;
}
inline ::SProtoSpace::db_role_all_data* db_role_data_ack::release_data() {
  clear_has_data();
  ::SProtoSpace::db_role_all_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void db_role_data_ack::set_allocated_data(::SProtoSpace::db_role_all_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional bool is_switch_scene = 8 [default = false];
inline bool db_role_data_ack::has_is_switch_scene() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_role_data_ack::set_has_is_switch_scene() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_role_data_ack::clear_has_is_switch_scene() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_role_data_ack::clear_is_switch_scene() {
  is_switch_scene_ = false;
  clear_has_is_switch_scene();
}
inline bool db_role_data_ack::is_switch_scene() const {
  return is_switch_scene_;
}
inline void db_role_data_ack::set_is_switch_scene(bool value) {
  set_has_is_switch_scene();
  is_switch_scene_ = value;
}

// optional uint32 scene_id = 9 [default = 0];
inline bool db_role_data_ack::has_scene_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void db_role_data_ack::set_has_scene_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void db_role_data_ack::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void db_role_data_ack::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 db_role_data_ack::scene_id() const {
  return scene_id_;
}
inline void db_role_data_ack::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional uint32 scene_type = 10 [default = 0];
inline bool db_role_data_ack::has_scene_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void db_role_data_ack::set_has_scene_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void db_role_data_ack::clear_has_scene_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void db_role_data_ack::clear_scene_type() {
  scene_type_ = 0u;
  clear_has_scene_type();
}
inline ::google::protobuf::uint32 db_role_data_ack::scene_type() const {
  return scene_type_;
}
inline void db_role_data_ack::set_scene_type(::google::protobuf::uint32 value) {
  set_has_scene_type();
  scene_type_ = value;
}

// -------------------------------------------------------------------

// gs_role_leave_game

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_role_leave_game_id];
inline bool gs_role_leave_game::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_role_leave_game::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_role_leave_game::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_role_leave_game::clear_protoid() {
  protoid_ = 222;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID gs_role_leave_game::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void gs_role_leave_game::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool gs_role_leave_game::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_role_leave_game::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_role_leave_game::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_role_leave_game::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 gs_role_leave_game::role_id() const {
  return role_id_;
}
inline void gs_role_leave_game::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// save_role_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = save_role_req_id];
inline bool save_role_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void save_role_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void save_role_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void save_role_req::clear_protoid() {
  protoid_ = 223;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID save_role_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void save_role_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool save_role_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void save_role_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void save_role_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void save_role_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 save_role_req::role_id() const {
  return role_id_;
}
inline void save_role_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .SProtoSpace.db_role_all_data data = 3;
inline bool save_role_req::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void save_role_req::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void save_role_req::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void save_role_req::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::db_role_all_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::db_role_all_data& save_role_req::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::db_role_all_data* save_role_req::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::db_role_all_data;
  return data_;
}
inline ::SProtoSpace::db_role_all_data* save_role_req::release_data() {
  clear_has_data();
  ::SProtoSpace::db_role_all_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void save_role_req::set_allocated_data(::SProtoSpace::db_role_all_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional .SProtoSpace.ESaveDataMode mode = 4;
inline bool save_role_req::has_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void save_role_req::set_has_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void save_role_req::clear_has_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void save_role_req::clear_mode() {
  mode_ = 1;
  clear_has_mode();
}
inline ::SProtoSpace::ESaveDataMode save_role_req::mode() const {
  return static_cast< ::SProtoSpace::ESaveDataMode >(mode_);
}
inline void save_role_req::set_mode(::SProtoSpace::ESaveDataMode value) {
  assert(::SProtoSpace::ESaveDataMode_IsValid(value));
  set_has_mode();
  mode_ = value;
}

// -------------------------------------------------------------------

// db_role_show_like_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_req_id];
inline bool db_role_show_like_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_like_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_like_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_like_req::clear_protoid() {
  protoid_ = 236;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_like_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_like_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool db_role_show_like_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_like_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_like_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_like_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_like_req::role_id() const {
  return role_id_;
}
inline void db_role_show_like_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 show_role_id = 3;
inline bool db_role_show_like_req::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_like_req::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_like_req::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_like_req::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 db_role_show_like_req::show_role_id() const {
  return show_role_id_;
}
inline void db_role_show_like_req::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// -------------------------------------------------------------------

// db_role_show_like_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_ack_id];
inline bool db_role_show_like_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_like_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_like_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_like_ack::clear_protoid() {
  protoid_ = 237;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_like_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_like_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool db_role_show_like_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_like_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_like_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_like_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 db_role_show_like_ack::result() const {
  return result_;
}
inline void db_role_show_like_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 role_id = 3;
inline bool db_role_show_like_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_like_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_like_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_like_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_like_ack::role_id() const {
  return role_id_;
}
inline void db_role_show_like_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 show_role_id = 4;
inline bool db_role_show_like_ack::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_show_like_ack::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_show_like_ack::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_show_like_ack::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 db_role_show_like_ack::show_role_id() const {
  return show_role_id_;
}
inline void db_role_show_like_ack::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional int32 likes = 5;
inline bool db_role_show_like_ack::has_likes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_role_show_like_ack::set_has_likes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_role_show_like_ack::clear_has_likes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_role_show_like_ack::clear_likes() {
  likes_ = 0;
  clear_has_likes();
}
inline ::google::protobuf::int32 db_role_show_like_ack::likes() const {
  return likes_;
}
inline void db_role_show_like_ack::set_likes(::google::protobuf::int32 value) {
  set_has_likes();
  likes_ = value;
}

// -------------------------------------------------------------------

// db_role_show_comment_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_req_id];
inline bool db_role_show_comment_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_comment_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_comment_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_comment_req::clear_protoid() {
  protoid_ = 238;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_comment_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_comment_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool db_role_show_comment_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_comment_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_comment_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_comment_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_comment_req::role_id() const {
  return role_id_;
}
inline void db_role_show_comment_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 show_role_id = 3;
inline bool db_role_show_comment_req::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_comment_req::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_comment_req::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_comment_req::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 db_role_show_comment_req::show_role_id() const {
  return show_role_id_;
}
inline void db_role_show_comment_req::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional .SProtoSpace.comment_info comment = 4;
inline bool db_role_show_comment_req::has_comment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_show_comment_req::set_has_comment() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_show_comment_req::clear_has_comment() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_show_comment_req::clear_comment() {
  if (comment_ != NULL) comment_->::SProtoSpace::comment_info::Clear();
  clear_has_comment();
}
inline const ::SProtoSpace::comment_info& db_role_show_comment_req::comment() const {
  return comment_ != NULL ? *comment_ : *default_instance_->comment_;
}
inline ::SProtoSpace::comment_info* db_role_show_comment_req::mutable_comment() {
  set_has_comment();
  if (comment_ == NULL) comment_ = new ::SProtoSpace::comment_info;
  return comment_;
}
inline ::SProtoSpace::comment_info* db_role_show_comment_req::release_comment() {
  clear_has_comment();
  ::SProtoSpace::comment_info* temp = comment_;
  comment_ = NULL;
  return temp;
}
inline void db_role_show_comment_req::set_allocated_comment(::SProtoSpace::comment_info* comment) {
  delete comment_;
  comment_ = comment;
  if (comment) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
}

// -------------------------------------------------------------------

// db_role_show_comment_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_ack_id];
inline bool db_role_show_comment_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_comment_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_comment_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_comment_ack::clear_protoid() {
  protoid_ = 239;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_comment_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_comment_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool db_role_show_comment_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_comment_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_comment_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_comment_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 db_role_show_comment_ack::result() const {
  return result_;
}
inline void db_role_show_comment_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 role_id = 3;
inline bool db_role_show_comment_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_comment_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_comment_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_comment_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_comment_ack::role_id() const {
  return role_id_;
}
inline void db_role_show_comment_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 show_role_id = 4;
inline bool db_role_show_comment_ack::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_show_comment_ack::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_show_comment_ack::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_show_comment_ack::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 db_role_show_comment_ack::show_role_id() const {
  return show_role_id_;
}
inline void db_role_show_comment_ack::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional .SProtoSpace.comment_info comment = 5;
inline bool db_role_show_comment_ack::has_comment() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_role_show_comment_ack::set_has_comment() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_role_show_comment_ack::clear_has_comment() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_role_show_comment_ack::clear_comment() {
  if (comment_ != NULL) comment_->::SProtoSpace::comment_info::Clear();
  clear_has_comment();
}
inline const ::SProtoSpace::comment_info& db_role_show_comment_ack::comment() const {
  return comment_ != NULL ? *comment_ : *default_instance_->comment_;
}
inline ::SProtoSpace::comment_info* db_role_show_comment_ack::mutable_comment() {
  set_has_comment();
  if (comment_ == NULL) comment_ = new ::SProtoSpace::comment_info;
  return comment_;
}
inline ::SProtoSpace::comment_info* db_role_show_comment_ack::release_comment() {
  clear_has_comment();
  ::SProtoSpace::comment_info* temp = comment_;
  comment_ = NULL;
  return temp;
}
inline void db_role_show_comment_ack::set_allocated_comment(::SProtoSpace::comment_info* comment) {
  delete comment_;
  comment_ = comment;
  if (comment) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
}

// -------------------------------------------------------------------

// db_role_show_delete_comment_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_delete_comment_req_id];
inline bool db_role_show_delete_comment_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_delete_comment_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_delete_comment_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_delete_comment_req::clear_protoid() {
  protoid_ = 240;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_delete_comment_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_delete_comment_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 show_role_id = 2;
inline bool db_role_show_delete_comment_req::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_delete_comment_req::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_delete_comment_req::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_delete_comment_req::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 db_role_show_delete_comment_req::show_role_id() const {
  return show_role_id_;
}
inline void db_role_show_delete_comment_req::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional uint64 role_id = 3;
inline bool db_role_show_delete_comment_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_delete_comment_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_delete_comment_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_delete_comment_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_delete_comment_req::role_id() const {
  return role_id_;
}
inline void db_role_show_delete_comment_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 to_role_id = 4;
inline bool db_role_show_delete_comment_req::has_to_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_show_delete_comment_req::set_has_to_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_show_delete_comment_req::clear_has_to_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_show_delete_comment_req::clear_to_role_id() {
  to_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_role_id();
}
inline ::google::protobuf::uint64 db_role_show_delete_comment_req::to_role_id() const {
  return to_role_id_;
}
inline void db_role_show_delete_comment_req::set_to_role_id(::google::protobuf::uint64 value) {
  set_has_to_role_id();
  to_role_id_ = value;
}

// optional uint64 time = 5;
inline bool db_role_show_delete_comment_req::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_role_show_delete_comment_req::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_role_show_delete_comment_req::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_role_show_delete_comment_req::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 db_role_show_delete_comment_req::time() const {
  return time_;
}
inline void db_role_show_delete_comment_req::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// db_role_show_delete_comment_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_delete_comment_ack_id];
inline bool db_role_show_delete_comment_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_delete_comment_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_delete_comment_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_delete_comment_ack::clear_protoid() {
  protoid_ = 241;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_delete_comment_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_delete_comment_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool db_role_show_delete_comment_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_delete_comment_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_delete_comment_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_delete_comment_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 db_role_show_delete_comment_ack::result() const {
  return result_;
}
inline void db_role_show_delete_comment_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 show_role_id = 3;
inline bool db_role_show_delete_comment_ack::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_delete_comment_ack::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_delete_comment_ack::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_delete_comment_ack::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 db_role_show_delete_comment_ack::show_role_id() const {
  return show_role_id_;
}
inline void db_role_show_delete_comment_ack::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// -------------------------------------------------------------------

// db_role_show_get_comment_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_comment_req_id];
inline bool db_role_show_get_comment_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_get_comment_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_get_comment_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_get_comment_req::clear_protoid() {
  protoid_ = 242;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_get_comment_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_get_comment_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool db_role_show_get_comment_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_get_comment_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_get_comment_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_get_comment_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_get_comment_req::role_id() const {
  return role_id_;
}
inline void db_role_show_get_comment_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 show_role_id = 3;
inline bool db_role_show_get_comment_req::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_get_comment_req::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_get_comment_req::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_get_comment_req::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 db_role_show_get_comment_req::show_role_id() const {
  return show_role_id_;
}
inline void db_role_show_get_comment_req::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// -------------------------------------------------------------------

// db_role_show_get_comment_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_comment_ack_id];
inline bool db_role_show_get_comment_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_get_comment_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_get_comment_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_get_comment_ack::clear_protoid() {
  protoid_ = 243;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_get_comment_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_get_comment_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool db_role_show_get_comment_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_get_comment_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_get_comment_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_get_comment_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 db_role_show_get_comment_ack::result() const {
  return result_;
}
inline void db_role_show_get_comment_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 role_id = 3;
inline bool db_role_show_get_comment_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_get_comment_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_get_comment_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_get_comment_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_get_comment_ack::role_id() const {
  return role_id_;
}
inline void db_role_show_get_comment_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 show_role_id = 4;
inline bool db_role_show_get_comment_ack::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_show_get_comment_ack::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_show_get_comment_ack::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_show_get_comment_ack::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 db_role_show_get_comment_ack::show_role_id() const {
  return show_role_id_;
}
inline void db_role_show_get_comment_ack::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional .SProtoSpace.comment_all comment_all = 5;
inline bool db_role_show_get_comment_ack::has_comment_all() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_role_show_get_comment_ack::set_has_comment_all() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_role_show_get_comment_ack::clear_has_comment_all() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_role_show_get_comment_ack::clear_comment_all() {
  if (comment_all_ != NULL) comment_all_->::SProtoSpace::comment_all::Clear();
  clear_has_comment_all();
}
inline const ::SProtoSpace::comment_all& db_role_show_get_comment_ack::comment_all() const {
  return comment_all_ != NULL ? *comment_all_ : *default_instance_->comment_all_;
}
inline ::SProtoSpace::comment_all* db_role_show_get_comment_ack::mutable_comment_all() {
  set_has_comment_all();
  if (comment_all_ == NULL) comment_all_ = new ::SProtoSpace::comment_all;
  return comment_all_;
}
inline ::SProtoSpace::comment_all* db_role_show_get_comment_ack::release_comment_all() {
  clear_has_comment_all();
  ::SProtoSpace::comment_all* temp = comment_all_;
  comment_all_ = NULL;
  return temp;
}
inline void db_role_show_get_comment_ack::set_allocated_comment_all(::SProtoSpace::comment_all* comment_all) {
  delete comment_all_;
  comment_all_ = comment_all;
  if (comment_all) {
    set_has_comment_all();
  } else {
    clear_has_comment_all();
  }
}

// -------------------------------------------------------------------

// db_role_show_change_name_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_change_name_req_id];
inline bool db_role_show_change_name_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_change_name_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_change_name_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_change_name_req::clear_protoid() {
  protoid_ = 244;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_change_name_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_change_name_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional string account = 2;
inline bool db_role_show_change_name_req::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_change_name_req::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_change_name_req::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_change_name_req::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& db_role_show_change_name_req::account() const {
  return *account_;
}
inline void db_role_show_change_name_req::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void db_role_show_change_name_req::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void db_role_show_change_name_req::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_role_show_change_name_req::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* db_role_show_change_name_req::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_role_show_change_name_req::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 role_id = 3;
inline bool db_role_show_change_name_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_change_name_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_change_name_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_change_name_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_change_name_req::role_id() const {
  return role_id_;
}
inline void db_role_show_change_name_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string new_name = 4;
inline bool db_role_show_change_name_req::has_new_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_show_change_name_req::set_has_new_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_show_change_name_req::clear_has_new_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_show_change_name_req::clear_new_name() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    new_name_->clear();
  }
  clear_has_new_name();
}
inline const ::std::string& db_role_show_change_name_req::new_name() const {
  return *new_name_;
}
inline void db_role_show_change_name_req::set_new_name(const ::std::string& value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void db_role_show_change_name_req::set_new_name(const char* value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void db_role_show_change_name_req::set_new_name(const char* value, size_t size) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_role_show_change_name_req::mutable_new_name() {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  return new_name_;
}
inline ::std::string* db_role_show_change_name_req::release_new_name() {
  clear_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_name_;
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_role_show_change_name_req::set_allocated_new_name(::std::string* new_name) {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (new_name) {
    set_has_new_name();
    new_name_ = new_name;
  } else {
    clear_has_new_name();
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// db_role_show_change_name_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_change_name_ack_id];
inline bool db_role_show_change_name_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_change_name_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_change_name_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_change_name_ack::clear_protoid() {
  protoid_ = 245;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_change_name_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_change_name_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool db_role_show_change_name_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_change_name_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_change_name_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_change_name_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 db_role_show_change_name_ack::result() const {
  return result_;
}
inline void db_role_show_change_name_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 role_id = 3;
inline bool db_role_show_change_name_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_change_name_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_change_name_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_change_name_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_change_name_ack::role_id() const {
  return role_id_;
}
inline void db_role_show_change_name_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string new_name = 4;
inline bool db_role_show_change_name_ack::has_new_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_show_change_name_ack::set_has_new_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_show_change_name_ack::clear_has_new_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_show_change_name_ack::clear_new_name() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    new_name_->clear();
  }
  clear_has_new_name();
}
inline const ::std::string& db_role_show_change_name_ack::new_name() const {
  return *new_name_;
}
inline void db_role_show_change_name_ack::set_new_name(const ::std::string& value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void db_role_show_change_name_ack::set_new_name(const char* value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void db_role_show_change_name_ack::set_new_name(const char* value, size_t size) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_role_show_change_name_ack::mutable_new_name() {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  return new_name_;
}
inline ::std::string* db_role_show_change_name_ack::release_new_name() {
  clear_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_name_;
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_role_show_change_name_ack::set_allocated_new_name(::std::string* new_name) {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (new_name) {
    set_has_new_name();
    new_name_ = new_name;
  } else {
    clear_has_new_name();
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// db_role_show_get_like_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_like_req_id];
inline bool db_role_show_get_like_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_get_like_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_get_like_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_get_like_req::clear_protoid() {
  protoid_ = 246;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_get_like_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_get_like_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool db_role_show_get_like_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_get_like_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_get_like_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_get_like_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_get_like_req::role_id() const {
  return role_id_;
}
inline void db_role_show_get_like_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 show_role_id = 3;
inline bool db_role_show_get_like_req::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_get_like_req::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_get_like_req::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_get_like_req::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 db_role_show_get_like_req::show_role_id() const {
  return show_role_id_;
}
inline void db_role_show_get_like_req::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// -------------------------------------------------------------------

// db_role_show_get_like_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_like_ack_id];
inline bool db_role_show_get_like_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_get_like_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_get_like_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_get_like_ack::clear_protoid() {
  protoid_ = 247;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_get_like_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_get_like_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool db_role_show_get_like_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_get_like_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_get_like_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_get_like_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 db_role_show_get_like_ack::result() const {
  return result_;
}
inline void db_role_show_get_like_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 role_id = 3;
inline bool db_role_show_get_like_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_get_like_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_get_like_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_get_like_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_get_like_ack::role_id() const {
  return role_id_;
}
inline void db_role_show_get_like_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 show_role_id = 4;
inline bool db_role_show_get_like_ack::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_show_get_like_ack::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_show_get_like_ack::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_show_get_like_ack::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 db_role_show_get_like_ack::show_role_id() const {
  return show_role_id_;
}
inline void db_role_show_get_like_ack::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional int32 likes = 5;
inline bool db_role_show_get_like_ack::has_likes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_role_show_get_like_ack::set_has_likes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_role_show_get_like_ack::clear_has_likes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_role_show_get_like_ack::clear_likes() {
  likes_ = 0;
  clear_has_likes();
}
inline ::google::protobuf::int32 db_role_show_get_like_ack::likes() const {
  return likes_;
}
inline void db_role_show_get_like_ack::set_likes(::google::protobuf::int32 value) {
  set_has_likes();
  likes_ = value;
}

// -------------------------------------------------------------------

// db_role_show_get_emotion_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_emotion_req_id];
inline bool db_role_show_get_emotion_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_get_emotion_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_get_emotion_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_get_emotion_req::clear_protoid() {
  protoid_ = 234;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_get_emotion_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_get_emotion_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool db_role_show_get_emotion_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_get_emotion_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_get_emotion_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_get_emotion_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_get_emotion_req::role_id() const {
  return role_id_;
}
inline void db_role_show_get_emotion_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 show_role_id = 3;
inline bool db_role_show_get_emotion_req::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_get_emotion_req::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_get_emotion_req::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_get_emotion_req::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 db_role_show_get_emotion_req::show_role_id() const {
  return show_role_id_;
}
inline void db_role_show_get_emotion_req::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional uint32 start_index = 4;
inline bool db_role_show_get_emotion_req::has_start_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_show_get_emotion_req::set_has_start_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_show_get_emotion_req::clear_has_start_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_show_get_emotion_req::clear_start_index() {
  start_index_ = 0u;
  clear_has_start_index();
}
inline ::google::protobuf::uint32 db_role_show_get_emotion_req::start_index() const {
  return start_index_;
}
inline void db_role_show_get_emotion_req::set_start_index(::google::protobuf::uint32 value) {
  set_has_start_index();
  start_index_ = value;
}

// optional uint32 count = 5;
inline bool db_role_show_get_emotion_req::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_role_show_get_emotion_req::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_role_show_get_emotion_req::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_role_show_get_emotion_req::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 db_role_show_get_emotion_req::count() const {
  return count_;
}
inline void db_role_show_get_emotion_req::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// db_role_show_get_emotion_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_get_emotion_ack_id];
inline bool db_role_show_get_emotion_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_get_emotion_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_get_emotion_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_get_emotion_ack::clear_protoid() {
  protoid_ = 235;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_get_emotion_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_get_emotion_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool db_role_show_get_emotion_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_get_emotion_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_get_emotion_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_get_emotion_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_get_emotion_ack::role_id() const {
  return role_id_;
}
inline void db_role_show_get_emotion_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 show_role_id = 3;
inline bool db_role_show_get_emotion_ack::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_get_emotion_ack::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_get_emotion_ack::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_get_emotion_ack::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 db_role_show_get_emotion_ack::show_role_id() const {
  return show_role_id_;
}
inline void db_role_show_get_emotion_ack::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional .SProtoSpace.show_emotion_all_info emotion_all = 4;
inline bool db_role_show_get_emotion_ack::has_emotion_all() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_show_get_emotion_ack::set_has_emotion_all() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_show_get_emotion_ack::clear_has_emotion_all() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_show_get_emotion_ack::clear_emotion_all() {
  if (emotion_all_ != NULL) emotion_all_->::SProtoSpace::show_emotion_all_info::Clear();
  clear_has_emotion_all();
}
inline const ::SProtoSpace::show_emotion_all_info& db_role_show_get_emotion_ack::emotion_all() const {
  return emotion_all_ != NULL ? *emotion_all_ : *default_instance_->emotion_all_;
}
inline ::SProtoSpace::show_emotion_all_info* db_role_show_get_emotion_ack::mutable_emotion_all() {
  set_has_emotion_all();
  if (emotion_all_ == NULL) emotion_all_ = new ::SProtoSpace::show_emotion_all_info;
  return emotion_all_;
}
inline ::SProtoSpace::show_emotion_all_info* db_role_show_get_emotion_ack::release_emotion_all() {
  clear_has_emotion_all();
  ::SProtoSpace::show_emotion_all_info* temp = emotion_all_;
  emotion_all_ = NULL;
  return temp;
}
inline void db_role_show_get_emotion_ack::set_allocated_emotion_all(::SProtoSpace::show_emotion_all_info* emotion_all) {
  delete emotion_all_;
  emotion_all_ = emotion_all;
  if (emotion_all) {
    set_has_emotion_all();
  } else {
    clear_has_emotion_all();
  }
}

// optional uint32 ret = 5;
inline bool db_role_show_get_emotion_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_role_show_get_emotion_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_role_show_get_emotion_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_role_show_get_emotion_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 db_role_show_get_emotion_ack::ret() const {
  return ret_;
}
inline void db_role_show_get_emotion_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// db_role_show_write_emotion_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_write_emotion_req_id];
inline bool db_role_show_write_emotion_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_write_emotion_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_write_emotion_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_write_emotion_req::clear_protoid() {
  protoid_ = 248;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_write_emotion_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_write_emotion_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool db_role_show_write_emotion_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_write_emotion_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_write_emotion_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_write_emotion_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_write_emotion_req::role_id() const {
  return role_id_;
}
inline void db_role_show_write_emotion_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string msg_content = 3;
inline bool db_role_show_write_emotion_req::has_msg_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_write_emotion_req::set_has_msg_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_write_emotion_req::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_write_emotion_req::clear_msg_content() {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    msg_content_->clear();
  }
  clear_has_msg_content();
}
inline const ::std::string& db_role_show_write_emotion_req::msg_content() const {
  return *msg_content_;
}
inline void db_role_show_write_emotion_req::set_msg_content(const ::std::string& value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void db_role_show_write_emotion_req::set_msg_content(const char* value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void db_role_show_write_emotion_req::set_msg_content(const char* value, size_t size) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_role_show_write_emotion_req::mutable_msg_content() {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  return msg_content_;
}
inline ::std::string* db_role_show_write_emotion_req::release_msg_content() {
  clear_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_content_;
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_role_show_write_emotion_req::set_allocated_msg_content(::std::string* msg_content) {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (msg_content) {
    set_has_msg_content();
    msg_content_ = msg_content;
  } else {
    clear_has_msg_content();
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string img_urls = 4;
inline int db_role_show_write_emotion_req::img_urls_size() const {
  return img_urls_.size();
}
inline void db_role_show_write_emotion_req::clear_img_urls() {
  img_urls_.Clear();
}
inline const ::std::string& db_role_show_write_emotion_req::img_urls(int index) const {
  return img_urls_.Get(index);
}
inline ::std::string* db_role_show_write_emotion_req::mutable_img_urls(int index) {
  return img_urls_.Mutable(index);
}
inline void db_role_show_write_emotion_req::set_img_urls(int index, const ::std::string& value) {
  img_urls_.Mutable(index)->assign(value);
}
inline void db_role_show_write_emotion_req::set_img_urls(int index, const char* value) {
  img_urls_.Mutable(index)->assign(value);
}
inline void db_role_show_write_emotion_req::set_img_urls(int index, const char* value, size_t size) {
  img_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_role_show_write_emotion_req::add_img_urls() {
  return img_urls_.Add();
}
inline void db_role_show_write_emotion_req::add_img_urls(const ::std::string& value) {
  img_urls_.Add()->assign(value);
}
inline void db_role_show_write_emotion_req::add_img_urls(const char* value) {
  img_urls_.Add()->assign(value);
}
inline void db_role_show_write_emotion_req::add_img_urls(const char* value, size_t size) {
  img_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
db_role_show_write_emotion_req::img_urls() const {
  return img_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
db_role_show_write_emotion_req::mutable_img_urls() {
  return &img_urls_;
}

// optional .SProtoSpace.EmotionType msg_type = 5;
inline bool db_role_show_write_emotion_req::has_msg_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_role_show_write_emotion_req::set_has_msg_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_role_show_write_emotion_req::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_role_show_write_emotion_req::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
inline ::SProtoSpace::EmotionType db_role_show_write_emotion_req::msg_type() const {
  return static_cast< ::SProtoSpace::EmotionType >(msg_type_);
}
inline void db_role_show_write_emotion_req::set_msg_type(::SProtoSpace::EmotionType value) {
  assert(::SProtoSpace::EmotionType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
}

// optional uint64 id = 6;
inline bool db_role_show_write_emotion_req::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_role_show_write_emotion_req::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_role_show_write_emotion_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_role_show_write_emotion_req::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 db_role_show_write_emotion_req::id() const {
  return id_;
}
inline void db_role_show_write_emotion_req::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// db_role_show_write_emotion_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_write_emotion_ack_id];
inline bool db_role_show_write_emotion_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_write_emotion_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_write_emotion_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_write_emotion_ack::clear_protoid() {
  protoid_ = 249;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_write_emotion_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_write_emotion_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool db_role_show_write_emotion_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_write_emotion_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_write_emotion_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_write_emotion_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 db_role_show_write_emotion_ack::ret() const {
  return ret_;
}
inline void db_role_show_write_emotion_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 emotion_id = 3;
inline bool db_role_show_write_emotion_ack::has_emotion_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_write_emotion_ack::set_has_emotion_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_write_emotion_ack::clear_has_emotion_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_write_emotion_ack::clear_emotion_id() {
  emotion_id_ = GOOGLE_ULONGLONG(0);
  clear_has_emotion_id();
}
inline ::google::protobuf::uint64 db_role_show_write_emotion_ack::emotion_id() const {
  return emotion_id_;
}
inline void db_role_show_write_emotion_ack::set_emotion_id(::google::protobuf::uint64 value) {
  set_has_emotion_id();
  emotion_id_ = value;
}

// optional uint64 role_id = 5;
inline bool db_role_show_write_emotion_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_show_write_emotion_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_show_write_emotion_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_show_write_emotion_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_write_emotion_ack::role_id() const {
  return role_id_;
}
inline void db_role_show_write_emotion_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string msg_content = 6;
inline bool db_role_show_write_emotion_ack::has_msg_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_role_show_write_emotion_ack::set_has_msg_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_role_show_write_emotion_ack::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_role_show_write_emotion_ack::clear_msg_content() {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    msg_content_->clear();
  }
  clear_has_msg_content();
}
inline const ::std::string& db_role_show_write_emotion_ack::msg_content() const {
  return *msg_content_;
}
inline void db_role_show_write_emotion_ack::set_msg_content(const ::std::string& value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void db_role_show_write_emotion_ack::set_msg_content(const char* value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void db_role_show_write_emotion_ack::set_msg_content(const char* value, size_t size) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_role_show_write_emotion_ack::mutable_msg_content() {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  return msg_content_;
}
inline ::std::string* db_role_show_write_emotion_ack::release_msg_content() {
  clear_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_content_;
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_role_show_write_emotion_ack::set_allocated_msg_content(::std::string* msg_content) {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (msg_content) {
    set_has_msg_content();
    msg_content_ = msg_content;
  } else {
    clear_has_msg_content();
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string img_urls = 7;
inline int db_role_show_write_emotion_ack::img_urls_size() const {
  return img_urls_.size();
}
inline void db_role_show_write_emotion_ack::clear_img_urls() {
  img_urls_.Clear();
}
inline const ::std::string& db_role_show_write_emotion_ack::img_urls(int index) const {
  return img_urls_.Get(index);
}
inline ::std::string* db_role_show_write_emotion_ack::mutable_img_urls(int index) {
  return img_urls_.Mutable(index);
}
inline void db_role_show_write_emotion_ack::set_img_urls(int index, const ::std::string& value) {
  img_urls_.Mutable(index)->assign(value);
}
inline void db_role_show_write_emotion_ack::set_img_urls(int index, const char* value) {
  img_urls_.Mutable(index)->assign(value);
}
inline void db_role_show_write_emotion_ack::set_img_urls(int index, const char* value, size_t size) {
  img_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_role_show_write_emotion_ack::add_img_urls() {
  return img_urls_.Add();
}
inline void db_role_show_write_emotion_ack::add_img_urls(const ::std::string& value) {
  img_urls_.Add()->assign(value);
}
inline void db_role_show_write_emotion_ack::add_img_urls(const char* value) {
  img_urls_.Add()->assign(value);
}
inline void db_role_show_write_emotion_ack::add_img_urls(const char* value, size_t size) {
  img_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
db_role_show_write_emotion_ack::img_urls() const {
  return img_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
db_role_show_write_emotion_ack::mutable_img_urls() {
  return &img_urls_;
}

// optional .SProtoSpace.EmotionType msg_type = 8;
inline bool db_role_show_write_emotion_ack::has_msg_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_role_show_write_emotion_ack::set_has_msg_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_role_show_write_emotion_ack::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_role_show_write_emotion_ack::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
inline ::SProtoSpace::EmotionType db_role_show_write_emotion_ack::msg_type() const {
  return static_cast< ::SProtoSpace::EmotionType >(msg_type_);
}
inline void db_role_show_write_emotion_ack::set_msg_type(::SProtoSpace::EmotionType value) {
  assert(::SProtoSpace::EmotionType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
}

// optional uint64 create_time = 9;
inline bool db_role_show_write_emotion_ack::has_create_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_role_show_write_emotion_ack::set_has_create_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_role_show_write_emotion_ack::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_role_show_write_emotion_ack::clear_create_time() {
  create_time_ = GOOGLE_ULONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::uint64 db_role_show_write_emotion_ack::create_time() const {
  return create_time_;
}
inline void db_role_show_write_emotion_ack::set_create_time(::google::protobuf::uint64 value) {
  set_has_create_time();
  create_time_ = value;
}

// -------------------------------------------------------------------

// db_role_show_like_emotion_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_emotion_req_id];
inline bool db_role_show_like_emotion_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_like_emotion_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_like_emotion_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_like_emotion_req::clear_protoid() {
  protoid_ = 250;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_like_emotion_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_like_emotion_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool db_role_show_like_emotion_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_like_emotion_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_like_emotion_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_like_emotion_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_like_emotion_req::role_id() const {
  return role_id_;
}
inline void db_role_show_like_emotion_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool db_role_show_like_emotion_req::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_like_emotion_req::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_like_emotion_req::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_like_emotion_req::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& db_role_show_like_emotion_req::role_name() const {
  return *role_name_;
}
inline void db_role_show_like_emotion_req::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void db_role_show_like_emotion_req::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void db_role_show_like_emotion_req::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_role_show_like_emotion_req::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* db_role_show_like_emotion_req::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_role_show_like_emotion_req::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 emotion_id = 4;
inline bool db_role_show_like_emotion_req::has_emotion_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_show_like_emotion_req::set_has_emotion_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_show_like_emotion_req::clear_has_emotion_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_show_like_emotion_req::clear_emotion_id() {
  emotion_id_ = GOOGLE_ULONGLONG(0);
  clear_has_emotion_id();
}
inline ::google::protobuf::uint64 db_role_show_like_emotion_req::emotion_id() const {
  return emotion_id_;
}
inline void db_role_show_like_emotion_req::set_emotion_id(::google::protobuf::uint64 value) {
  set_has_emotion_id();
  emotion_id_ = value;
}

// optional uint64 show_role_id = 5;
inline bool db_role_show_like_emotion_req::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_role_show_like_emotion_req::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_role_show_like_emotion_req::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_role_show_like_emotion_req::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 db_role_show_like_emotion_req::show_role_id() const {
  return show_role_id_;
}
inline void db_role_show_like_emotion_req::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// -------------------------------------------------------------------

// db_role_show_like_emotion_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_like_emotion_ack_id];
inline bool db_role_show_like_emotion_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_like_emotion_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_like_emotion_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_like_emotion_ack::clear_protoid() {
  protoid_ = 251;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_like_emotion_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_like_emotion_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool db_role_show_like_emotion_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_like_emotion_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_like_emotion_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_like_emotion_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 db_role_show_like_emotion_ack::ret() const {
  return ret_;
}
inline void db_role_show_like_emotion_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 role_id = 3;
inline bool db_role_show_like_emotion_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_like_emotion_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_like_emotion_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_like_emotion_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_like_emotion_ack::role_id() const {
  return role_id_;
}
inline void db_role_show_like_emotion_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 4;
inline bool db_role_show_like_emotion_ack::has_role_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_show_like_emotion_ack::set_has_role_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_show_like_emotion_ack::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_show_like_emotion_ack::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& db_role_show_like_emotion_ack::role_name() const {
  return *role_name_;
}
inline void db_role_show_like_emotion_ack::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void db_role_show_like_emotion_ack::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void db_role_show_like_emotion_ack::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_role_show_like_emotion_ack::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* db_role_show_like_emotion_ack::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_role_show_like_emotion_ack::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 emotion_id = 5;
inline bool db_role_show_like_emotion_ack::has_emotion_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_role_show_like_emotion_ack::set_has_emotion_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_role_show_like_emotion_ack::clear_has_emotion_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_role_show_like_emotion_ack::clear_emotion_id() {
  emotion_id_ = GOOGLE_ULONGLONG(0);
  clear_has_emotion_id();
}
inline ::google::protobuf::uint64 db_role_show_like_emotion_ack::emotion_id() const {
  return emotion_id_;
}
inline void db_role_show_like_emotion_ack::set_emotion_id(::google::protobuf::uint64 value) {
  set_has_emotion_id();
  emotion_id_ = value;
}

// optional uint64 show_role_id = 6;
inline bool db_role_show_like_emotion_ack::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_role_show_like_emotion_ack::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_role_show_like_emotion_ack::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_role_show_like_emotion_ack::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 db_role_show_like_emotion_ack::show_role_id() const {
  return show_role_id_;
}
inline void db_role_show_like_emotion_ack::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// -------------------------------------------------------------------

// db_role_show_comment_emotion_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_emotion_req_id];
inline bool db_role_show_comment_emotion_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_comment_emotion_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_comment_emotion_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_comment_emotion_req::clear_protoid() {
  protoid_ = 253;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_comment_emotion_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_comment_emotion_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 from_id = 2;
inline bool db_role_show_comment_emotion_req::has_from_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_comment_emotion_req::set_has_from_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_comment_emotion_req::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_comment_emotion_req::clear_from_id() {
  from_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_id();
}
inline ::google::protobuf::uint64 db_role_show_comment_emotion_req::from_id() const {
  return from_id_;
}
inline void db_role_show_comment_emotion_req::set_from_id(::google::protobuf::uint64 value) {
  set_has_from_id();
  from_id_ = value;
}

// optional string from_name = 3;
inline bool db_role_show_comment_emotion_req::has_from_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_comment_emotion_req::set_has_from_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_comment_emotion_req::clear_has_from_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_comment_emotion_req::clear_from_name() {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    from_name_->clear();
  }
  clear_has_from_name();
}
inline const ::std::string& db_role_show_comment_emotion_req::from_name() const {
  return *from_name_;
}
inline void db_role_show_comment_emotion_req::set_from_name(const ::std::string& value) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(value);
}
inline void db_role_show_comment_emotion_req::set_from_name(const char* value) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(value);
}
inline void db_role_show_comment_emotion_req::set_from_name(const char* value, size_t size) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_role_show_comment_emotion_req::mutable_from_name() {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  return from_name_;
}
inline ::std::string* db_role_show_comment_emotion_req::release_from_name() {
  clear_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_name_;
    from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_role_show_comment_emotion_req::set_allocated_from_name(::std::string* from_name) {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_name_;
  }
  if (from_name) {
    set_has_from_name();
    from_name_ = from_name;
  } else {
    clear_has_from_name();
    from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 to_id = 4;
inline bool db_role_show_comment_emotion_req::has_to_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_show_comment_emotion_req::set_has_to_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_show_comment_emotion_req::clear_has_to_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_show_comment_emotion_req::clear_to_id() {
  to_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_id();
}
inline ::google::protobuf::uint64 db_role_show_comment_emotion_req::to_id() const {
  return to_id_;
}
inline void db_role_show_comment_emotion_req::set_to_id(::google::protobuf::uint64 value) {
  set_has_to_id();
  to_id_ = value;
}

// optional string to_name = 5;
inline bool db_role_show_comment_emotion_req::has_to_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_role_show_comment_emotion_req::set_has_to_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_role_show_comment_emotion_req::clear_has_to_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_role_show_comment_emotion_req::clear_to_name() {
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    to_name_->clear();
  }
  clear_has_to_name();
}
inline const ::std::string& db_role_show_comment_emotion_req::to_name() const {
  return *to_name_;
}
inline void db_role_show_comment_emotion_req::set_to_name(const ::std::string& value) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(value);
}
inline void db_role_show_comment_emotion_req::set_to_name(const char* value) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(value);
}
inline void db_role_show_comment_emotion_req::set_to_name(const char* value, size_t size) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_role_show_comment_emotion_req::mutable_to_name() {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  return to_name_;
}
inline ::std::string* db_role_show_comment_emotion_req::release_to_name() {
  clear_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_name_;
    to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_role_show_comment_emotion_req::set_allocated_to_name(::std::string* to_name) {
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_name_;
  }
  if (to_name) {
    set_has_to_name();
    to_name_ = to_name;
  } else {
    clear_has_to_name();
    to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string msg_content = 6;
inline bool db_role_show_comment_emotion_req::has_msg_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_role_show_comment_emotion_req::set_has_msg_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_role_show_comment_emotion_req::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_role_show_comment_emotion_req::clear_msg_content() {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    msg_content_->clear();
  }
  clear_has_msg_content();
}
inline const ::std::string& db_role_show_comment_emotion_req::msg_content() const {
  return *msg_content_;
}
inline void db_role_show_comment_emotion_req::set_msg_content(const ::std::string& value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void db_role_show_comment_emotion_req::set_msg_content(const char* value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void db_role_show_comment_emotion_req::set_msg_content(const char* value, size_t size) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_role_show_comment_emotion_req::mutable_msg_content() {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  return msg_content_;
}
inline ::std::string* db_role_show_comment_emotion_req::release_msg_content() {
  clear_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_content_;
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_role_show_comment_emotion_req::set_allocated_msg_content(::std::string* msg_content) {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (msg_content) {
    set_has_msg_content();
    msg_content_ = msg_content;
  } else {
    clear_has_msg_content();
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 show_role_id = 7;
inline bool db_role_show_comment_emotion_req::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_role_show_comment_emotion_req::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_role_show_comment_emotion_req::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_role_show_comment_emotion_req::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 db_role_show_comment_emotion_req::show_role_id() const {
  return show_role_id_;
}
inline void db_role_show_comment_emotion_req::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional uint64 emotion_id = 8;
inline bool db_role_show_comment_emotion_req::has_emotion_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_role_show_comment_emotion_req::set_has_emotion_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_role_show_comment_emotion_req::clear_has_emotion_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_role_show_comment_emotion_req::clear_emotion_id() {
  emotion_id_ = GOOGLE_ULONGLONG(0);
  clear_has_emotion_id();
}
inline ::google::protobuf::uint64 db_role_show_comment_emotion_req::emotion_id() const {
  return emotion_id_;
}
inline void db_role_show_comment_emotion_req::set_emotion_id(::google::protobuf::uint64 value) {
  set_has_emotion_id();
  emotion_id_ = value;
}

// optional uint64 id = 9;
inline bool db_role_show_comment_emotion_req::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void db_role_show_comment_emotion_req::set_has_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void db_role_show_comment_emotion_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void db_role_show_comment_emotion_req::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 db_role_show_comment_emotion_req::id() const {
  return id_;
}
inline void db_role_show_comment_emotion_req::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// db_role_show_comment_emotion_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_comment_emotion_ack_id];
inline bool db_role_show_comment_emotion_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_comment_emotion_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_comment_emotion_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_comment_emotion_ack::clear_protoid() {
  protoid_ = 252;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_comment_emotion_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_comment_emotion_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 from_id = 2;
inline bool db_role_show_comment_emotion_ack::has_from_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_comment_emotion_ack::set_has_from_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_comment_emotion_ack::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_comment_emotion_ack::clear_from_id() {
  from_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_id();
}
inline ::google::protobuf::uint64 db_role_show_comment_emotion_ack::from_id() const {
  return from_id_;
}
inline void db_role_show_comment_emotion_ack::set_from_id(::google::protobuf::uint64 value) {
  set_has_from_id();
  from_id_ = value;
}

// optional string from_name = 3;
inline bool db_role_show_comment_emotion_ack::has_from_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_comment_emotion_ack::set_has_from_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_comment_emotion_ack::clear_has_from_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_comment_emotion_ack::clear_from_name() {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    from_name_->clear();
  }
  clear_has_from_name();
}
inline const ::std::string& db_role_show_comment_emotion_ack::from_name() const {
  return *from_name_;
}
inline void db_role_show_comment_emotion_ack::set_from_name(const ::std::string& value) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(value);
}
inline void db_role_show_comment_emotion_ack::set_from_name(const char* value) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(value);
}
inline void db_role_show_comment_emotion_ack::set_from_name(const char* value, size_t size) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_role_show_comment_emotion_ack::mutable_from_name() {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  return from_name_;
}
inline ::std::string* db_role_show_comment_emotion_ack::release_from_name() {
  clear_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_name_;
    from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_role_show_comment_emotion_ack::set_allocated_from_name(::std::string* from_name) {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_name_;
  }
  if (from_name) {
    set_has_from_name();
    from_name_ = from_name;
  } else {
    clear_has_from_name();
    from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 to_id = 4;
inline bool db_role_show_comment_emotion_ack::has_to_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_show_comment_emotion_ack::set_has_to_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_show_comment_emotion_ack::clear_has_to_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_show_comment_emotion_ack::clear_to_id() {
  to_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_id();
}
inline ::google::protobuf::uint64 db_role_show_comment_emotion_ack::to_id() const {
  return to_id_;
}
inline void db_role_show_comment_emotion_ack::set_to_id(::google::protobuf::uint64 value) {
  set_has_to_id();
  to_id_ = value;
}

// optional string to_name = 5;
inline bool db_role_show_comment_emotion_ack::has_to_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_role_show_comment_emotion_ack::set_has_to_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_role_show_comment_emotion_ack::clear_has_to_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_role_show_comment_emotion_ack::clear_to_name() {
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    to_name_->clear();
  }
  clear_has_to_name();
}
inline const ::std::string& db_role_show_comment_emotion_ack::to_name() const {
  return *to_name_;
}
inline void db_role_show_comment_emotion_ack::set_to_name(const ::std::string& value) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(value);
}
inline void db_role_show_comment_emotion_ack::set_to_name(const char* value) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(value);
}
inline void db_role_show_comment_emotion_ack::set_to_name(const char* value, size_t size) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_role_show_comment_emotion_ack::mutable_to_name() {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  return to_name_;
}
inline ::std::string* db_role_show_comment_emotion_ack::release_to_name() {
  clear_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_name_;
    to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_role_show_comment_emotion_ack::set_allocated_to_name(::std::string* to_name) {
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_name_;
  }
  if (to_name) {
    set_has_to_name();
    to_name_ = to_name;
  } else {
    clear_has_to_name();
    to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string msg_content = 6;
inline bool db_role_show_comment_emotion_ack::has_msg_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_role_show_comment_emotion_ack::set_has_msg_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_role_show_comment_emotion_ack::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_role_show_comment_emotion_ack::clear_msg_content() {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    msg_content_->clear();
  }
  clear_has_msg_content();
}
inline const ::std::string& db_role_show_comment_emotion_ack::msg_content() const {
  return *msg_content_;
}
inline void db_role_show_comment_emotion_ack::set_msg_content(const ::std::string& value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void db_role_show_comment_emotion_ack::set_msg_content(const char* value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void db_role_show_comment_emotion_ack::set_msg_content(const char* value, size_t size) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_role_show_comment_emotion_ack::mutable_msg_content() {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  return msg_content_;
}
inline ::std::string* db_role_show_comment_emotion_ack::release_msg_content() {
  clear_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_content_;
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_role_show_comment_emotion_ack::set_allocated_msg_content(::std::string* msg_content) {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (msg_content) {
    set_has_msg_content();
    msg_content_ = msg_content;
  } else {
    clear_has_msg_content();
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 show_role_id = 7;
inline bool db_role_show_comment_emotion_ack::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_role_show_comment_emotion_ack::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_role_show_comment_emotion_ack::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_role_show_comment_emotion_ack::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 db_role_show_comment_emotion_ack::show_role_id() const {
  return show_role_id_;
}
inline void db_role_show_comment_emotion_ack::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional uint64 emotion_id = 8;
inline bool db_role_show_comment_emotion_ack::has_emotion_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_role_show_comment_emotion_ack::set_has_emotion_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_role_show_comment_emotion_ack::clear_has_emotion_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_role_show_comment_emotion_ack::clear_emotion_id() {
  emotion_id_ = GOOGLE_ULONGLONG(0);
  clear_has_emotion_id();
}
inline ::google::protobuf::uint64 db_role_show_comment_emotion_ack::emotion_id() const {
  return emotion_id_;
}
inline void db_role_show_comment_emotion_ack::set_emotion_id(::google::protobuf::uint64 value) {
  set_has_emotion_id();
  emotion_id_ = value;
}

// optional uint32 ret = 9;
inline bool db_role_show_comment_emotion_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void db_role_show_comment_emotion_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000100u;
}
inline void db_role_show_comment_emotion_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void db_role_show_comment_emotion_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 db_role_show_comment_emotion_ack::ret() const {
  return ret_;
}
inline void db_role_show_comment_emotion_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 id = 10;
inline bool db_role_show_comment_emotion_ack::has_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void db_role_show_comment_emotion_ack::set_has_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void db_role_show_comment_emotion_ack::clear_has_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void db_role_show_comment_emotion_ack::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 db_role_show_comment_emotion_ack::id() const {
  return id_;
}
inline void db_role_show_comment_emotion_ack::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// db_role_show_remove_emotion_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_emotion_req_id];
inline bool db_role_show_remove_emotion_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_remove_emotion_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_remove_emotion_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_remove_emotion_req::clear_protoid() {
  protoid_ = 254;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_remove_emotion_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_remove_emotion_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool db_role_show_remove_emotion_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_remove_emotion_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_remove_emotion_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_remove_emotion_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_remove_emotion_req::role_id() const {
  return role_id_;
}
inline void db_role_show_remove_emotion_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 emotion_id = 3;
inline bool db_role_show_remove_emotion_req::has_emotion_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_remove_emotion_req::set_has_emotion_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_remove_emotion_req::clear_has_emotion_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_remove_emotion_req::clear_emotion_id() {
  emotion_id_ = GOOGLE_ULONGLONG(0);
  clear_has_emotion_id();
}
inline ::google::protobuf::uint64 db_role_show_remove_emotion_req::emotion_id() const {
  return emotion_id_;
}
inline void db_role_show_remove_emotion_req::set_emotion_id(::google::protobuf::uint64 value) {
  set_has_emotion_id();
  emotion_id_ = value;
}

// -------------------------------------------------------------------

// db_role_show_remove_emotion_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_emotion_ack_id];
inline bool db_role_show_remove_emotion_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_remove_emotion_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_remove_emotion_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_remove_emotion_ack::clear_protoid() {
  protoid_ = 255;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_remove_emotion_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_remove_emotion_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 emotion_id = 2;
inline bool db_role_show_remove_emotion_ack::has_emotion_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_remove_emotion_ack::set_has_emotion_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_remove_emotion_ack::clear_has_emotion_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_remove_emotion_ack::clear_emotion_id() {
  emotion_id_ = GOOGLE_ULONGLONG(0);
  clear_has_emotion_id();
}
inline ::google::protobuf::uint64 db_role_show_remove_emotion_ack::emotion_id() const {
  return emotion_id_;
}
inline void db_role_show_remove_emotion_ack::set_emotion_id(::google::protobuf::uint64 value) {
  set_has_emotion_id();
  emotion_id_ = value;
}

// optional uint32 ret = 3;
inline bool db_role_show_remove_emotion_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_remove_emotion_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_remove_emotion_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_remove_emotion_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 db_role_show_remove_emotion_ack::ret() const {
  return ret_;
}
inline void db_role_show_remove_emotion_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 role_id = 4;
inline bool db_role_show_remove_emotion_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_show_remove_emotion_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_show_remove_emotion_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_show_remove_emotion_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_remove_emotion_ack::role_id() const {
  return role_id_;
}
inline void db_role_show_remove_emotion_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// db_role_show_remove_comment_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_comment_req_id];
inline bool db_role_show_remove_comment_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_remove_comment_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_remove_comment_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_remove_comment_req::clear_protoid() {
  protoid_ = 256;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_remove_comment_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_remove_comment_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 from_id = 2;
inline bool db_role_show_remove_comment_req::has_from_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_remove_comment_req::set_has_from_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_remove_comment_req::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_remove_comment_req::clear_from_id() {
  from_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_id();
}
inline ::google::protobuf::uint64 db_role_show_remove_comment_req::from_id() const {
  return from_id_;
}
inline void db_role_show_remove_comment_req::set_from_id(::google::protobuf::uint64 value) {
  set_has_from_id();
  from_id_ = value;
}

// optional uint64 to_id = 3;
inline bool db_role_show_remove_comment_req::has_to_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_remove_comment_req::set_has_to_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_remove_comment_req::clear_has_to_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_remove_comment_req::clear_to_id() {
  to_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_id();
}
inline ::google::protobuf::uint64 db_role_show_remove_comment_req::to_id() const {
  return to_id_;
}
inline void db_role_show_remove_comment_req::set_to_id(::google::protobuf::uint64 value) {
  set_has_to_id();
  to_id_ = value;
}

// optional uint64 show_role_id = 4;
inline bool db_role_show_remove_comment_req::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_show_remove_comment_req::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_show_remove_comment_req::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_show_remove_comment_req::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 db_role_show_remove_comment_req::show_role_id() const {
  return show_role_id_;
}
inline void db_role_show_remove_comment_req::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional uint64 emotion_id = 5;
inline bool db_role_show_remove_comment_req::has_emotion_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_role_show_remove_comment_req::set_has_emotion_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_role_show_remove_comment_req::clear_has_emotion_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_role_show_remove_comment_req::clear_emotion_id() {
  emotion_id_ = GOOGLE_ULONGLONG(0);
  clear_has_emotion_id();
}
inline ::google::protobuf::uint64 db_role_show_remove_comment_req::emotion_id() const {
  return emotion_id_;
}
inline void db_role_show_remove_comment_req::set_emotion_id(::google::protobuf::uint64 value) {
  set_has_emotion_id();
  emotion_id_ = value;
}

// optional uint64 comment_id = 6;
inline bool db_role_show_remove_comment_req::has_comment_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_role_show_remove_comment_req::set_has_comment_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_role_show_remove_comment_req::clear_has_comment_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_role_show_remove_comment_req::clear_comment_id() {
  comment_id_ = GOOGLE_ULONGLONG(0);
  clear_has_comment_id();
}
inline ::google::protobuf::uint64 db_role_show_remove_comment_req::comment_id() const {
  return comment_id_;
}
inline void db_role_show_remove_comment_req::set_comment_id(::google::protobuf::uint64 value) {
  set_has_comment_id();
  comment_id_ = value;
}

// optional uint64 role_id = 7;
inline bool db_role_show_remove_comment_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_role_show_remove_comment_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_role_show_remove_comment_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_role_show_remove_comment_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_remove_comment_req::role_id() const {
  return role_id_;
}
inline void db_role_show_remove_comment_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// db_role_show_remove_comment_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_show_remove_comment_ack_id];
inline bool db_role_show_remove_comment_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_show_remove_comment_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_show_remove_comment_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_show_remove_comment_ack::clear_protoid() {
  protoid_ = 257;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_show_remove_comment_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_show_remove_comment_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 from_id = 2;
inline bool db_role_show_remove_comment_ack::has_from_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_show_remove_comment_ack::set_has_from_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_show_remove_comment_ack::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_show_remove_comment_ack::clear_from_id() {
  from_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_id();
}
inline ::google::protobuf::uint64 db_role_show_remove_comment_ack::from_id() const {
  return from_id_;
}
inline void db_role_show_remove_comment_ack::set_from_id(::google::protobuf::uint64 value) {
  set_has_from_id();
  from_id_ = value;
}

// optional uint64 to_id = 3;
inline bool db_role_show_remove_comment_ack::has_to_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_show_remove_comment_ack::set_has_to_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_show_remove_comment_ack::clear_has_to_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_show_remove_comment_ack::clear_to_id() {
  to_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_id();
}
inline ::google::protobuf::uint64 db_role_show_remove_comment_ack::to_id() const {
  return to_id_;
}
inline void db_role_show_remove_comment_ack::set_to_id(::google::protobuf::uint64 value) {
  set_has_to_id();
  to_id_ = value;
}

// optional uint64 show_role_id = 4;
inline bool db_role_show_remove_comment_ack::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_show_remove_comment_ack::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_show_remove_comment_ack::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_show_remove_comment_ack::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 db_role_show_remove_comment_ack::show_role_id() const {
  return show_role_id_;
}
inline void db_role_show_remove_comment_ack::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional uint64 emotion_id = 5;
inline bool db_role_show_remove_comment_ack::has_emotion_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_role_show_remove_comment_ack::set_has_emotion_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_role_show_remove_comment_ack::clear_has_emotion_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_role_show_remove_comment_ack::clear_emotion_id() {
  emotion_id_ = GOOGLE_ULONGLONG(0);
  clear_has_emotion_id();
}
inline ::google::protobuf::uint64 db_role_show_remove_comment_ack::emotion_id() const {
  return emotion_id_;
}
inline void db_role_show_remove_comment_ack::set_emotion_id(::google::protobuf::uint64 value) {
  set_has_emotion_id();
  emotion_id_ = value;
}

// optional uint64 comment_id = 6;
inline bool db_role_show_remove_comment_ack::has_comment_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_role_show_remove_comment_ack::set_has_comment_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_role_show_remove_comment_ack::clear_has_comment_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_role_show_remove_comment_ack::clear_comment_id() {
  comment_id_ = GOOGLE_ULONGLONG(0);
  clear_has_comment_id();
}
inline ::google::protobuf::uint64 db_role_show_remove_comment_ack::comment_id() const {
  return comment_id_;
}
inline void db_role_show_remove_comment_ack::set_comment_id(::google::protobuf::uint64 value) {
  set_has_comment_id();
  comment_id_ = value;
}

// optional uint32 ret = 7;
inline bool db_role_show_remove_comment_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_role_show_remove_comment_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_role_show_remove_comment_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_role_show_remove_comment_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 db_role_show_remove_comment_ack::ret() const {
  return ret_;
}
inline void db_role_show_remove_comment_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 role_id = 8;
inline bool db_role_show_remove_comment_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_role_show_remove_comment_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_role_show_remove_comment_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_role_show_remove_comment_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_show_remove_comment_ack::role_id() const {
  return role_id_;
}
inline void db_role_show_remove_comment_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// db_role_battle_info_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_battle_info_req_id];
inline bool db_role_battle_info_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_battle_info_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_battle_info_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_battle_info_req::clear_protoid() {
  protoid_ = 260;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_battle_info_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_battle_info_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 type = 2;
inline bool db_role_battle_info_req::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_battle_info_req::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_battle_info_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_battle_info_req::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 db_role_battle_info_req::type() const {
  return type_;
}
inline void db_role_battle_info_req::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional uint64 role_id = 3;
inline bool db_role_battle_info_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_battle_info_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_battle_info_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_battle_info_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_battle_info_req::role_id() const {
  return role_id_;
}
inline void db_role_battle_info_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 battle_id = 4;
inline bool db_role_battle_info_req::has_battle_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_battle_info_req::set_has_battle_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_battle_info_req::clear_has_battle_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_battle_info_req::clear_battle_id() {
  battle_id_ = 0;
  clear_has_battle_id();
}
inline ::google::protobuf::int32 db_role_battle_info_req::battle_id() const {
  return battle_id_;
}
inline void db_role_battle_info_req::set_battle_id(::google::protobuf::int32 value) {
  set_has_battle_id();
  battle_id_ = value;
}

// optional int32 module_id = 5;
inline bool db_role_battle_info_req::has_module_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_role_battle_info_req::set_has_module_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_role_battle_info_req::clear_has_module_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_role_battle_info_req::clear_module_id() {
  module_id_ = 0;
  clear_has_module_id();
}
inline ::google::protobuf::int32 db_role_battle_info_req::module_id() const {
  return module_id_;
}
inline void db_role_battle_info_req::set_module_id(::google::protobuf::int32 value) {
  set_has_module_id();
  module_id_ = value;
}

// -------------------------------------------------------------------

// db_role_battle_info_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_role_battle_info_ack_id];
inline bool db_role_battle_info_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_battle_info_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_battle_info_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_battle_info_ack::clear_protoid() {
  protoid_ = 261;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_role_battle_info_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_role_battle_info_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool db_role_battle_info_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_battle_info_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_battle_info_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_battle_info_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 db_role_battle_info_ack::result() const {
  return result_;
}
inline void db_role_battle_info_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 type = 3;
inline bool db_role_battle_info_ack::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_battle_info_ack::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_battle_info_ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_battle_info_ack::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 db_role_battle_info_ack::type() const {
  return type_;
}
inline void db_role_battle_info_ack::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional uint64 role_id = 4;
inline bool db_role_battle_info_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_battle_info_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_battle_info_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_battle_info_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_role_battle_info_ack::role_id() const {
  return role_id_;
}
inline void db_role_battle_info_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .SProtoSpace.battle_role_info info = 5;
inline bool db_role_battle_info_ack::has_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_role_battle_info_ack::set_has_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_role_battle_info_ack::clear_has_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_role_battle_info_ack::clear_info() {
  if (info_ != NULL) info_->::SProtoSpace::battle_role_info::Clear();
  clear_has_info();
}
inline const ::SProtoSpace::battle_role_info& db_role_battle_info_ack::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::SProtoSpace::battle_role_info* db_role_battle_info_ack::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::SProtoSpace::battle_role_info;
  return info_;
}
inline ::SProtoSpace::battle_role_info* db_role_battle_info_ack::release_info() {
  clear_has_info();
  ::SProtoSpace::battle_role_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void db_role_battle_info_ack::set_allocated_info(::SProtoSpace::battle_role_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional int32 battle_id = 6;
inline bool db_role_battle_info_ack::has_battle_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_role_battle_info_ack::set_has_battle_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_role_battle_info_ack::clear_has_battle_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_role_battle_info_ack::clear_battle_id() {
  battle_id_ = 0;
  clear_has_battle_id();
}
inline ::google::protobuf::int32 db_role_battle_info_ack::battle_id() const {
  return battle_id_;
}
inline void db_role_battle_info_ack::set_battle_id(::google::protobuf::int32 value) {
  set_has_battle_id();
  battle_id_ = value;
}

// optional int32 module_id = 7;
inline bool db_role_battle_info_ack::has_module_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_role_battle_info_ack::set_has_module_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_role_battle_info_ack::clear_has_module_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_role_battle_info_ack::clear_module_id() {
  module_id_ = 0;
  clear_has_module_id();
}
inline ::google::protobuf::int32 db_role_battle_info_ack::module_id() const {
  return module_id_;
}
inline void db_role_battle_info_ack::set_module_id(::google::protobuf::int32 value) {
  set_has_module_id();
  module_id_ = value;
}

// -------------------------------------------------------------------

// db_account_role_data_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_account_role_data_req_id];
inline bool db_account_role_data_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_account_role_data_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_account_role_data_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_account_role_data_req::clear_protoid() {
  protoid_ = 200;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_account_role_data_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_account_role_data_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional string account = 2;
inline bool db_account_role_data_req::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_account_role_data_req::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_account_role_data_req::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_account_role_data_req::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& db_account_role_data_req::account() const {
  return *account_;
}
inline void db_account_role_data_req::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void db_account_role_data_req::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void db_account_role_data_req::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_account_role_data_req::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* db_account_role_data_req::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_account_role_data_req::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 area_id = 3;
inline bool db_account_role_data_req::has_area_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_account_role_data_req::set_has_area_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_account_role_data_req::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_account_role_data_req::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 db_account_role_data_req::area_id() const {
  return area_id_;
}
inline void db_account_role_data_req::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// -------------------------------------------------------------------

// db_account_role_data_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_account_role_data_ack_id];
inline bool db_account_role_data_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_account_role_data_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_account_role_data_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_account_role_data_ack::clear_protoid() {
  protoid_ = 201;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_account_role_data_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_account_role_data_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional string account = 2;
inline bool db_account_role_data_ack::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_account_role_data_ack::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_account_role_data_ack::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_account_role_data_ack::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& db_account_role_data_ack::account() const {
  return *account_;
}
inline void db_account_role_data_ack::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void db_account_role_data_ack::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void db_account_role_data_ack::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_account_role_data_ack::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* db_account_role_data_ack::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_account_role_data_ack::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ret_code = 3;
inline bool db_account_role_data_ack::has_ret_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_account_role_data_ack::set_has_ret_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_account_role_data_ack::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_account_role_data_ack::clear_ret_code() {
  ret_code_ = 0u;
  clear_has_ret_code();
}
inline ::google::protobuf::uint32 db_account_role_data_ack::ret_code() const {
  return ret_code_;
}
inline void db_account_role_data_ack::set_ret_code(::google::protobuf::uint32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// optional .SProtoSpace.account_role_data data = 4;
inline bool db_account_role_data_ack::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_account_role_data_ack::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_account_role_data_ack::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_account_role_data_ack::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::account_role_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::account_role_data& db_account_role_data_ack::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::account_role_data* db_account_role_data_ack::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::account_role_data;
  return data_;
}
inline ::SProtoSpace::account_role_data* db_account_role_data_ack::release_data() {
  clear_has_data();
  ::SProtoSpace::account_role_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void db_account_role_data_ack::set_allocated_data(::SProtoSpace::account_role_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// db_create_role_of_game

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_create_role_of_game_id];
inline bool db_create_role_of_game::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_create_role_of_game::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_create_role_of_game::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_create_role_of_game::clear_protoid() {
  protoid_ = 202;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_create_role_of_game::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_create_role_of_game::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional string account = 2;
inline bool db_create_role_of_game::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_create_role_of_game::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_create_role_of_game::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_create_role_of_game::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& db_create_role_of_game::account() const {
  return *account_;
}
inline void db_create_role_of_game::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void db_create_role_of_game::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void db_create_role_of_game::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_create_role_of_game::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* db_create_role_of_game::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_create_role_of_game::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 area_id = 3;
inline bool db_create_role_of_game::has_area_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_create_role_of_game::set_has_area_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_create_role_of_game::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_create_role_of_game::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 db_create_role_of_game::area_id() const {
  return area_id_;
}
inline void db_create_role_of_game::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// optional string role_name = 4;
inline bool db_create_role_of_game::has_role_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_create_role_of_game::set_has_role_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_create_role_of_game::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_create_role_of_game::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& db_create_role_of_game::role_name() const {
  return *role_name_;
}
inline void db_create_role_of_game::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void db_create_role_of_game::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void db_create_role_of_game::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_create_role_of_game::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* db_create_role_of_game::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_create_role_of_game::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 role_sex = 5;
inline bool db_create_role_of_game::has_role_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_create_role_of_game::set_has_role_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_create_role_of_game::clear_has_role_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_create_role_of_game::clear_role_sex() {
  role_sex_ = 0;
  clear_has_role_sex();
}
inline ::google::protobuf::int32 db_create_role_of_game::role_sex() const {
  return role_sex_;
}
inline void db_create_role_of_game::set_role_sex(::google::protobuf::int32 value) {
  set_has_role_sex();
  role_sex_ = value;
}

// -------------------------------------------------------------------

// db_create_role_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_create_role_ack_id];
inline bool db_create_role_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_create_role_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_create_role_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_create_role_ack::clear_protoid() {
  protoid_ = 203;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_create_role_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_create_role_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret_code = 2;
inline bool db_create_role_ack::has_ret_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_create_role_ack::set_has_ret_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_create_role_ack::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_create_role_ack::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 db_create_role_ack::ret_code() const {
  return ret_code_;
}
inline void db_create_role_ack::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// optional string account = 3;
inline bool db_create_role_ack::has_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_create_role_ack::set_has_account() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_create_role_ack::clear_has_account() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_create_role_ack::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& db_create_role_ack::account() const {
  return *account_;
}
inline void db_create_role_ack::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void db_create_role_ack::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void db_create_role_ack::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_create_role_ack::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* db_create_role_ack::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_create_role_ack::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .SProtoSpace.account_role_data data = 4;
inline bool db_create_role_ack::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_create_role_ack::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_create_role_ack::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_create_role_ack::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::account_role_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::account_role_data& db_create_role_ack::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::account_role_data* db_create_role_ack::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::account_role_data;
  return data_;
}
inline ::SProtoSpace::account_role_data* db_create_role_ack::release_data() {
  clear_has_data();
  ::SProtoSpace::account_role_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void db_create_role_ack::set_allocated_data(::SProtoSpace::account_role_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// game_role_info_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_role_info_req_id];
inline bool game_role_info_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_role_info_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_role_info_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_role_info_req::clear_protoid() {
  protoid_ = 206;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID game_role_info_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void game_role_info_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 client_id = 2;
inline bool game_role_info_req::has_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_role_info_req::set_has_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_role_info_req::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_role_info_req::clear_client_id() {
  client_id_ = 0u;
  clear_has_client_id();
}
inline ::google::protobuf::uint32 game_role_info_req::client_id() const {
  return client_id_;
}
inline void game_role_info_req::set_client_id(::google::protobuf::uint32 value) {
  set_has_client_id();
  client_id_ = value;
}

// optional string account = 3;
inline bool game_role_info_req::has_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_role_info_req::set_has_account() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_role_info_req::clear_has_account() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_role_info_req::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& game_role_info_req::account() const {
  return *account_;
}
inline void game_role_info_req::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void game_role_info_req::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void game_role_info_req::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* game_role_info_req::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* game_role_info_req::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void game_role_info_req::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 game_id = 4;
inline bool game_role_info_req::has_game_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_role_info_req::set_has_game_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_role_info_req::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_role_info_req::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 game_role_info_req::game_id() const {
  return game_id_;
}
inline void game_role_info_req::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
}

// -------------------------------------------------------------------

// game_role_info_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_role_info_ack_id];
inline bool game_role_info_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_role_info_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_role_info_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_role_info_ack::clear_protoid() {
  protoid_ = 207;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID game_role_info_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void game_role_info_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 client_id = 2;
inline bool game_role_info_ack::has_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_role_info_ack::set_has_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_role_info_ack::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_role_info_ack::clear_client_id() {
  client_id_ = 0u;
  clear_has_client_id();
}
inline ::google::protobuf::uint32 game_role_info_ack::client_id() const {
  return client_id_;
}
inline void game_role_info_ack::set_client_id(::google::protobuf::uint32 value) {
  set_has_client_id();
  client_id_ = value;
}

// optional string account = 3;
inline bool game_role_info_ack::has_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_role_info_ack::set_has_account() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_role_info_ack::clear_has_account() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_role_info_ack::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& game_role_info_ack::account() const {
  return *account_;
}
inline void game_role_info_ack::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void game_role_info_ack::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void game_role_info_ack::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* game_role_info_ack::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* game_role_info_ack::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void game_role_info_ack::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 game_id = 4;
inline bool game_role_info_ack::has_game_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_role_info_ack::set_has_game_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_role_info_ack::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_role_info_ack::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 game_role_info_ack::game_id() const {
  return game_id_;
}
inline void game_role_info_ack::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional uint64 role_id = 5;
inline bool game_role_info_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void game_role_info_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void game_role_info_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void game_role_info_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 game_role_info_ack::role_id() const {
  return role_id_;
}
inline void game_role_info_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 6;
inline bool game_role_info_ack::has_role_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void game_role_info_ack::set_has_role_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void game_role_info_ack::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void game_role_info_ack::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& game_role_info_ack::role_name() const {
  return *role_name_;
}
inline void game_role_info_ack::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void game_role_info_ack::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void game_role_info_ack::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* game_role_info_ack::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* game_role_info_ack::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void game_role_info_ack::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool can_ignore = 7;
inline bool game_role_info_ack::has_can_ignore() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void game_role_info_ack::set_has_can_ignore() {
  _has_bits_[0] |= 0x00000040u;
}
inline void game_role_info_ack::clear_has_can_ignore() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void game_role_info_ack::clear_can_ignore() {
  can_ignore_ = false;
  clear_has_can_ignore();
}
inline bool game_role_info_ack::can_ignore() const {
  return can_ignore_;
}
inline void game_role_info_ack::set_can_ignore(bool value) {
  set_has_can_ignore();
  can_ignore_ = value;
}

// -------------------------------------------------------------------

// db_check_harem_compete_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_harem_compete_req_id];
inline bool db_check_harem_compete_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_check_harem_compete_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_check_harem_compete_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_check_harem_compete_req::clear_proto_id() {
  proto_id_ = 290;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_check_harem_compete_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_check_harem_compete_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool db_check_harem_compete_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_check_harem_compete_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_check_harem_compete_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_check_harem_compete_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_check_harem_compete_req::uuid() const {
  return uuid_;
}
inline void db_check_harem_compete_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 area_id = 3;
inline bool db_check_harem_compete_req::has_area_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_check_harem_compete_req::set_has_area_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_check_harem_compete_req::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_check_harem_compete_req::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 db_check_harem_compete_req::area_id() const {
  return area_id_;
}
inline void db_check_harem_compete_req::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// -------------------------------------------------------------------

// db_check_harem_compete_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_check_harem_compete_ack_id];
inline bool db_check_harem_compete_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_check_harem_compete_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_check_harem_compete_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_check_harem_compete_ack::clear_proto_id() {
  proto_id_ = 291;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_check_harem_compete_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_check_harem_compete_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool db_check_harem_compete_ack::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_check_harem_compete_ack::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_check_harem_compete_ack::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_check_harem_compete_ack::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_check_harem_compete_ack::uuid() const {
  return uuid_;
}
inline void db_check_harem_compete_ack::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// repeated .SProtoSpace.harem_compete_event events = 3;
inline int db_check_harem_compete_ack::events_size() const {
  return events_.size();
}
inline void db_check_harem_compete_ack::clear_events() {
  events_.Clear();
}
inline const ::SProtoSpace::harem_compete_event& db_check_harem_compete_ack::events(int index) const {
  return events_.Get(index);
}
inline ::SProtoSpace::harem_compete_event* db_check_harem_compete_ack::mutable_events(int index) {
  return events_.Mutable(index);
}
inline ::SProtoSpace::harem_compete_event* db_check_harem_compete_ack::add_events() {
  return events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::harem_compete_event >&
db_check_harem_compete_ack::events() const {
  return events_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::harem_compete_event >*
db_check_harem_compete_ack::mutable_events() {
  return &events_;
}

// optional .SProtoSpace.ESLAPPROGRESS progress = 4;
inline bool db_check_harem_compete_ack::has_progress() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_check_harem_compete_ack::set_has_progress() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_check_harem_compete_ack::clear_has_progress() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_check_harem_compete_ack::clear_progress() {
  progress_ = 1;
  clear_has_progress();
}
inline ::SProtoSpace::ESLAPPROGRESS db_check_harem_compete_ack::progress() const {
  return static_cast< ::SProtoSpace::ESLAPPROGRESS >(progress_);
}
inline void db_check_harem_compete_ack::set_progress(::SProtoSpace::ESLAPPROGRESS value) {
  assert(::SProtoSpace::ESLAPPROGRESS_IsValid(value));
  set_has_progress();
  progress_ = value;
}

// optional uint64 end_time = 5;
inline bool db_check_harem_compete_ack::has_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_check_harem_compete_ack::set_has_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_check_harem_compete_ack::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_check_harem_compete_ack::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 db_check_harem_compete_ack::end_time() const {
  return end_time_;
}
inline void db_check_harem_compete_ack::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
}

// -------------------------------------------------------------------

// db_harem_compete_clear_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_harem_compete_clear_req_id];
inline bool db_harem_compete_clear_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_harem_compete_clear_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_harem_compete_clear_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_harem_compete_clear_req::clear_proto_id() {
  proto_id_ = 292;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_harem_compete_clear_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_harem_compete_clear_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool db_harem_compete_clear_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_harem_compete_clear_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_harem_compete_clear_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_harem_compete_clear_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_harem_compete_clear_req::uuid() const {
  return uuid_;
}
inline void db_harem_compete_clear_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 type = 3;
inline bool db_harem_compete_clear_req::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_harem_compete_clear_req::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_harem_compete_clear_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_harem_compete_clear_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 db_harem_compete_clear_req::type() const {
  return type_;
}
inline void db_harem_compete_clear_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// db_slap_emoji_info

// repeated .SProtoSpace.slap_emoji_info infos = 1;
inline int db_slap_emoji_info::infos_size() const {
  return infos_.size();
}
inline void db_slap_emoji_info::clear_infos() {
  infos_.Clear();
}
inline const ::SProtoSpace::slap_emoji_info& db_slap_emoji_info::infos(int index) const {
  return infos_.Get(index);
}
inline ::SProtoSpace::slap_emoji_info* db_slap_emoji_info::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::SProtoSpace::slap_emoji_info* db_slap_emoji_info::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::slap_emoji_info >&
db_slap_emoji_info::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::slap_emoji_info >*
db_slap_emoji_info::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// db_get_harem_event_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_harem_event_req_id];
inline bool db_get_harem_event_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_harem_event_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_harem_event_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_harem_event_req::clear_proto_id() {
  proto_id_ = 293;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_get_harem_event_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_get_harem_event_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool db_get_harem_event_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_harem_event_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_harem_event_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_harem_event_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_get_harem_event_req::uuid() const {
  return uuid_;
}
inline void db_get_harem_event_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint64 event_uuid = 3;
inline bool db_get_harem_event_req::has_event_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_get_harem_event_req::set_has_event_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_get_harem_event_req::clear_has_event_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_get_harem_event_req::clear_event_uuid() {
  event_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_event_uuid();
}
inline ::google::protobuf::uint64 db_get_harem_event_req::event_uuid() const {
  return event_uuid_;
}
inline void db_get_harem_event_req::set_event_uuid(::google::protobuf::uint64 value) {
  set_has_event_uuid();
  event_uuid_ = value;
}

// -------------------------------------------------------------------

// db_get_harem_event_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_harem_event_ack_id];
inline bool db_get_harem_event_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_harem_event_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_harem_event_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_harem_event_ack::clear_proto_id() {
  proto_id_ = 294;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_get_harem_event_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_get_harem_event_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool db_get_harem_event_ack::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_harem_event_ack::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_harem_event_ack::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_harem_event_ack::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 db_get_harem_event_ack::uuid() const {
  return uuid_;
}
inline void db_get_harem_event_ack::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional .SProtoSpace.harem_compete_event event = 3;
inline bool db_get_harem_event_ack::has_event() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_get_harem_event_ack::set_has_event() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_get_harem_event_ack::clear_has_event() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_get_harem_event_ack::clear_event() {
  if (event_ != NULL) event_->::SProtoSpace::harem_compete_event::Clear();
  clear_has_event();
}
inline const ::SProtoSpace::harem_compete_event& db_get_harem_event_ack::event() const {
  return event_ != NULL ? *event_ : *default_instance_->event_;
}
inline ::SProtoSpace::harem_compete_event* db_get_harem_event_ack::mutable_event() {
  set_has_event();
  if (event_ == NULL) event_ = new ::SProtoSpace::harem_compete_event;
  return event_;
}
inline ::SProtoSpace::harem_compete_event* db_get_harem_event_ack::release_event() {
  clear_has_event();
  ::SProtoSpace::harem_compete_event* temp = event_;
  event_ = NULL;
  return temp;
}
inline void db_get_harem_event_ack::set_allocated_event(::SProtoSpace::harem_compete_event* event) {
  delete event_;
  event_ = event;
  if (event) {
    set_has_event();
  } else {
    clear_has_event();
  }
}

// -------------------------------------------------------------------

// db_share_officer_upgrade_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_share_officer_upgrade_req_id];
inline bool db_share_officer_upgrade_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_share_officer_upgrade_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_share_officer_upgrade_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_share_officer_upgrade_req::clear_proto_id() {
  proto_id_ = 1528;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_share_officer_upgrade_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_share_officer_upgrade_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.share_officer_upgrade data = 2;
inline bool db_share_officer_upgrade_req::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_share_officer_upgrade_req::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_share_officer_upgrade_req::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_share_officer_upgrade_req::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::share_officer_upgrade::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::share_officer_upgrade& db_share_officer_upgrade_req::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::share_officer_upgrade* db_share_officer_upgrade_req::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::share_officer_upgrade;
  return data_;
}
inline ::SProtoSpace::share_officer_upgrade* db_share_officer_upgrade_req::release_data() {
  clear_has_data();
  ::SProtoSpace::share_officer_upgrade* temp = data_;
  data_ = NULL;
  return temp;
}
inline void db_share_officer_upgrade_req::set_allocated_data(::SProtoSpace::share_officer_upgrade* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// db_share_officer_upgrade_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_share_officer_upgrade_ack_id];
inline bool db_share_officer_upgrade_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_share_officer_upgrade_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_share_officer_upgrade_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_share_officer_upgrade_ack::clear_proto_id() {
  proto_id_ = 1529;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_share_officer_upgrade_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_share_officer_upgrade_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 share_id = 2;
inline bool db_share_officer_upgrade_ack::has_share_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_share_officer_upgrade_ack::set_has_share_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_share_officer_upgrade_ack::clear_has_share_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_share_officer_upgrade_ack::clear_share_id() {
  share_id_ = GOOGLE_ULONGLONG(0);
  clear_has_share_id();
}
inline ::google::protobuf::uint64 db_share_officer_upgrade_ack::share_id() const {
  return share_id_;
}
inline void db_share_officer_upgrade_ack::set_share_id(::google::protobuf::uint64 value) {
  set_has_share_id();
  share_id_ = value;
}

// optional uint64 role_id = 3;
inline bool db_share_officer_upgrade_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_share_officer_upgrade_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_share_officer_upgrade_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_share_officer_upgrade_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_share_officer_upgrade_ack::role_id() const {
  return role_id_;
}
inline void db_share_officer_upgrade_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 world_channel_id = 4;
inline bool db_share_officer_upgrade_ack::has_world_channel_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_share_officer_upgrade_ack::set_has_world_channel_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_share_officer_upgrade_ack::clear_has_world_channel_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_share_officer_upgrade_ack::clear_world_channel_id() {
  world_channel_id_ = 0u;
  clear_has_world_channel_id();
}
inline ::google::protobuf::uint32 db_share_officer_upgrade_ack::world_channel_id() const {
  return world_channel_id_;
}
inline void db_share_officer_upgrade_ack::set_world_channel_id(::google::protobuf::uint32 value) {
  set_has_world_channel_id();
  world_channel_id_ = value;
}

// optional uint32 grade = 5;
inline bool db_share_officer_upgrade_ack::has_grade() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_share_officer_upgrade_ack::set_has_grade() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_share_officer_upgrade_ack::clear_has_grade() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_share_officer_upgrade_ack::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 db_share_officer_upgrade_ack::grade() const {
  return grade_;
}
inline void db_share_officer_upgrade_ack::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional int32 ret = 6;
inline bool db_share_officer_upgrade_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_share_officer_upgrade_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_share_officer_upgrade_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_share_officer_upgrade_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 db_share_officer_upgrade_ack::ret() const {
  return ret_;
}
inline void db_share_officer_upgrade_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// db_get_share_officer_upgrade_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_share_officer_upgrade_req_id];
inline bool db_get_share_officer_upgrade_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_share_officer_upgrade_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_share_officer_upgrade_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_share_officer_upgrade_req::clear_proto_id() {
  proto_id_ = 1530;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_get_share_officer_upgrade_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_get_share_officer_upgrade_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 share_id = 2;
inline bool db_get_share_officer_upgrade_req::has_share_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_share_officer_upgrade_req::set_has_share_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_share_officer_upgrade_req::clear_has_share_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_share_officer_upgrade_req::clear_share_id() {
  share_id_ = GOOGLE_ULONGLONG(0);
  clear_has_share_id();
}
inline ::google::protobuf::uint64 db_get_share_officer_upgrade_req::share_id() const {
  return share_id_;
}
inline void db_get_share_officer_upgrade_req::set_share_id(::google::protobuf::uint64 value) {
  set_has_share_id();
  share_id_ = value;
}

// optional uint64 role_id = 3;
inline bool db_get_share_officer_upgrade_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_get_share_officer_upgrade_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_get_share_officer_upgrade_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_get_share_officer_upgrade_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_get_share_officer_upgrade_req::role_id() const {
  return role_id_;
}
inline void db_get_share_officer_upgrade_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// db_get_share_officer_upgrade_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_get_share_officer_upgrade_ack_id];
inline bool db_get_share_officer_upgrade_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_get_share_officer_upgrade_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_get_share_officer_upgrade_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_get_share_officer_upgrade_ack::clear_proto_id() {
  proto_id_ = 1531;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_get_share_officer_upgrade_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_get_share_officer_upgrade_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool db_get_share_officer_upgrade_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_get_share_officer_upgrade_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_get_share_officer_upgrade_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_get_share_officer_upgrade_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 db_get_share_officer_upgrade_ack::ret() const {
  return ret_;
}
inline void db_get_share_officer_upgrade_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 role_id = 3;
inline bool db_get_share_officer_upgrade_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_get_share_officer_upgrade_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_get_share_officer_upgrade_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_get_share_officer_upgrade_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_get_share_officer_upgrade_ack::role_id() const {
  return role_id_;
}
inline void db_get_share_officer_upgrade_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .SProtoSpace.share_officer_upgrade data = 4;
inline bool db_get_share_officer_upgrade_ack::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_get_share_officer_upgrade_ack::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_get_share_officer_upgrade_ack::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_get_share_officer_upgrade_ack::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::share_officer_upgrade::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::share_officer_upgrade& db_get_share_officer_upgrade_ack::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::share_officer_upgrade* db_get_share_officer_upgrade_ack::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::share_officer_upgrade;
  return data_;
}
inline ::SProtoSpace::share_officer_upgrade* db_get_share_officer_upgrade_ack::release_data() {
  clear_has_data();
  ::SProtoSpace::share_officer_upgrade* temp = data_;
  data_ = NULL;
  return temp;
}
inline void db_get_share_officer_upgrade_ack::set_allocated_data(::SProtoSpace::share_officer_upgrade* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// db_add_role_popularity

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = db_add_role_popularity_id];
inline bool db_add_role_popularity::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_add_role_popularity::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_add_role_popularity::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_add_role_popularity::clear_proto_id() {
  proto_id_ = 295;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID db_add_role_popularity::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void db_add_role_popularity::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 role_id = 2;
inline bool db_add_role_popularity::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_add_role_popularity::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_add_role_popularity::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_add_role_popularity::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_add_role_popularity::role_id() const {
  return role_id_;
}
inline void db_add_role_popularity::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 add_num = 3;
inline bool db_add_role_popularity::has_add_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_add_role_popularity::set_has_add_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_add_role_popularity::clear_has_add_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_add_role_popularity::clear_add_num() {
  add_num_ = 0u;
  clear_has_add_num();
}
inline ::google::protobuf::uint32 db_add_role_popularity::add_num() const {
  return add_num_;
}
inline void db_add_role_popularity::set_add_num(::google::protobuf::uint32 value) {
  set_has_add_num();
  add_num_ = value;
}

// -------------------------------------------------------------------

// db_kick_role_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_kick_role_req_id];
inline bool db_kick_role_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_kick_role_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_kick_role_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_kick_role_req::clear_protoid() {
  protoid_ = 1712;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_kick_role_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_kick_role_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 reason = 2;
inline bool db_kick_role_req::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_kick_role_req::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_kick_role_req::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_kick_role_req::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 db_kick_role_req::reason() const {
  return reason_;
}
inline void db_kick_role_req::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}

// optional uint32 ret = 3;
inline bool db_kick_role_req::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_kick_role_req::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_kick_role_req::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_kick_role_req::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 db_kick_role_req::ret() const {
  return ret_;
}
inline void db_kick_role_req::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 scene_id = 4;
inline bool db_kick_role_req::has_scene_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_kick_role_req::set_has_scene_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_kick_role_req::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_kick_role_req::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 db_kick_role_req::scene_id() const {
  return scene_id_;
}
inline void db_kick_role_req::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional uint32 scene_type = 5;
inline bool db_kick_role_req::has_scene_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_kick_role_req::set_has_scene_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_kick_role_req::clear_has_scene_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_kick_role_req::clear_scene_type() {
  scene_type_ = 0u;
  clear_has_scene_type();
}
inline ::google::protobuf::uint32 db_kick_role_req::scene_type() const {
  return scene_type_;
}
inline void db_kick_role_req::set_scene_type(::google::protobuf::uint32 value) {
  set_has_scene_type();
  scene_type_ = value;
}

// optional uint64 game_id = 6;
inline bool db_kick_role_req::has_game_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_kick_role_req::set_has_game_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_kick_role_req::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_kick_role_req::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
inline ::google::protobuf::uint64 db_kick_role_req::game_id() const {
  return game_id_;
}
inline void db_kick_role_req::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional uint64 gt_id = 7;
inline bool db_kick_role_req::has_gt_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_kick_role_req::set_has_gt_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_kick_role_req::clear_has_gt_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_kick_role_req::clear_gt_id() {
  gt_id_ = GOOGLE_ULONGLONG(0);
  clear_has_gt_id();
}
inline ::google::protobuf::uint64 db_kick_role_req::gt_id() const {
  return gt_id_;
}
inline void db_kick_role_req::set_gt_id(::google::protobuf::uint64 value) {
  set_has_gt_id();
  gt_id_ = value;
}

// optional uint64 role_id = 8;
inline bool db_kick_role_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_kick_role_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_kick_role_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_kick_role_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_kick_role_req::role_id() const {
  return role_id_;
}
inline void db_kick_role_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// db_kick_role_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_kick_role_ack_id];
inline bool db_kick_role_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_kick_role_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_kick_role_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_kick_role_ack::clear_protoid() {
  protoid_ = 1713;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_kick_role_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_kick_role_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 reason = 2;
inline bool db_kick_role_ack::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_kick_role_ack::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_kick_role_ack::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_kick_role_ack::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 db_kick_role_ack::reason() const {
  return reason_;
}
inline void db_kick_role_ack::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}

// optional uint32 ret = 3;
inline bool db_kick_role_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_kick_role_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_kick_role_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_kick_role_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 db_kick_role_ack::ret() const {
  return ret_;
}
inline void db_kick_role_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 scene_id = 4;
inline bool db_kick_role_ack::has_scene_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_kick_role_ack::set_has_scene_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_kick_role_ack::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_kick_role_ack::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 db_kick_role_ack::scene_id() const {
  return scene_id_;
}
inline void db_kick_role_ack::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional uint32 scene_type = 5;
inline bool db_kick_role_ack::has_scene_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_kick_role_ack::set_has_scene_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_kick_role_ack::clear_has_scene_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_kick_role_ack::clear_scene_type() {
  scene_type_ = 0u;
  clear_has_scene_type();
}
inline ::google::protobuf::uint32 db_kick_role_ack::scene_type() const {
  return scene_type_;
}
inline void db_kick_role_ack::set_scene_type(::google::protobuf::uint32 value) {
  set_has_scene_type();
  scene_type_ = value;
}

// optional uint64 game_id = 6;
inline bool db_kick_role_ack::has_game_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_kick_role_ack::set_has_game_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_kick_role_ack::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_kick_role_ack::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
inline ::google::protobuf::uint64 db_kick_role_ack::game_id() const {
  return game_id_;
}
inline void db_kick_role_ack::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional uint64 gt_id = 7;
inline bool db_kick_role_ack::has_gt_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_kick_role_ack::set_has_gt_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_kick_role_ack::clear_has_gt_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_kick_role_ack::clear_gt_id() {
  gt_id_ = GOOGLE_ULONGLONG(0);
  clear_has_gt_id();
}
inline ::google::protobuf::uint64 db_kick_role_ack::gt_id() const {
  return gt_id_;
}
inline void db_kick_role_ack::set_gt_id(::google::protobuf::uint64 value) {
  set_has_gt_id();
  gt_id_ = value;
}

// optional uint64 role_id = 8;
inline bool db_kick_role_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_kick_role_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_kick_role_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_kick_role_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_kick_role_ack::role_id() const {
  return role_id_;
}
inline void db_kick_role_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// db_load_offical_data_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_load_offical_data_req_id];
inline bool db_load_offical_data_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_load_offical_data_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_load_offical_data_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_load_offical_data_req::clear_protoid() {
  protoid_ = 1545;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_load_offical_data_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_load_offical_data_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool db_load_offical_data_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_load_offical_data_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_load_offical_data_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_load_offical_data_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_load_offical_data_req::role_id() const {
  return role_id_;
}
inline void db_load_offical_data_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// db_load_offical_data_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_load_offical_data_ack_id];
inline bool db_load_offical_data_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_load_offical_data_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_load_offical_data_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_load_offical_data_ack::clear_protoid() {
  protoid_ = 1546;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_load_offical_data_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_load_offical_data_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool db_load_offical_data_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_load_offical_data_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_load_offical_data_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_load_offical_data_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 db_load_offical_data_ack::ret() const {
  return ret_;
}
inline void db_load_offical_data_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 role_id = 3;
inline bool db_load_offical_data_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_load_offical_data_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_load_offical_data_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_load_offical_data_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_load_offical_data_ack::role_id() const {
  return role_id_;
}
inline void db_load_offical_data_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .SProtoSpace.db_offical_data data = 4;
inline bool db_load_offical_data_ack::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_load_offical_data_ack::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_load_offical_data_ack::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_load_offical_data_ack::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::db_offical_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::db_offical_data& db_load_offical_data_ack::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::db_offical_data* db_load_offical_data_ack::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::db_offical_data;
  return data_;
}
inline ::SProtoSpace::db_offical_data* db_load_offical_data_ack::release_data() {
  clear_has_data();
  ::SProtoSpace::db_offical_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void db_load_offical_data_ack::set_allocated_data(::SProtoSpace::db_offical_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// db_save_offical_data_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = db_save_offical_data_req_id];
inline bool db_save_offical_data_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_save_offical_data_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_save_offical_data_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_save_offical_data_req::clear_protoid() {
  protoid_ = 1547;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID db_save_offical_data_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void db_save_offical_data_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool db_save_offical_data_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_save_offical_data_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_save_offical_data_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_save_offical_data_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_save_offical_data_req::role_id() const {
  return role_id_;
}
inline void db_save_offical_data_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .SProtoSpace.db_offical_data data = 3;
inline bool db_save_offical_data_req::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_save_offical_data_req::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_save_offical_data_req::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_save_offical_data_req::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::db_offical_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::db_offical_data& db_save_offical_data_req::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::db_offical_data* db_save_offical_data_req::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::db_offical_data;
  return data_;
}
inline ::SProtoSpace::db_offical_data* db_save_offical_data_req::release_data() {
  clear_has_data();
  ::SProtoSpace::db_offical_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void db_save_offical_data_req::set_allocated_data(::SProtoSpace::db_offical_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ERoleDataType>() {
  return ::SProtoSpace::ERoleDataType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ESQLMode>() {
  return ::SProtoSpace::ESQLMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EGetRoleShowDataResult>() {
  return ::SProtoSpace::EGetRoleShowDataResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EOnlineType>() {
  return ::SProtoSpace::EOnlineType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ESaveDataMode>() {
  return ::SProtoSpace::ESaveDataMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ss_5fdb_2eproto__INCLUDED
