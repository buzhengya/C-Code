// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_chat.proto

#ifndef PROTOBUF_ss_5fchat_2eproto__INCLUDED
#define PROTOBUF_ss_5fchat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ss_protoid.pb.h"
#include "cm_socialtype.pb.h"
#include "cs_errorcode.pb.h"
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ss_5fchat_2eproto();
void protobuf_AssignDesc_ss_5fchat_2eproto();
void protobuf_ShutdownFile_ss_5fchat_2eproto();

class chat_world_public_ntf;
class chat_world_change_channel_public_req;
class chat_world_change_channel_public_ack;
class chat_world_random_channel_public_req;
class chat_world_random_channel_public_ack;
class chat_private_public_ntf;
class chat_team_public_ntf;
class chat_family_public_ntf;
class chat_broadcast_public_ntf;
class chat_world_channel_ntf_one_role;
class chat_world_channel_ntf;
class barrage_get_ss_req;
class barrage_get_ss_ack;
class barrage_send_ss_req;
class barrage_send_ss_ack;

// ===================================================================

class chat_world_public_ntf : public ::google::protobuf::Message {
 public:
  chat_world_public_ntf();
  virtual ~chat_world_public_ntf();

  chat_world_public_ntf(const chat_world_public_ntf& from);

  inline chat_world_public_ntf& operator=(const chat_world_public_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_world_public_ntf& default_instance();

  void Swap(chat_world_public_ntf* other);

  // implements Message ----------------------------------------------

  chat_world_public_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_world_public_ntf& from);
  void MergeFrom(const chat_world_public_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_public_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string role_avatar_url = 4;
  inline bool has_role_avatar_url() const;
  inline void clear_role_avatar_url();
  static const int kRoleAvatarUrlFieldNumber = 4;
  inline const ::std::string& role_avatar_url() const;
  inline void set_role_avatar_url(const ::std::string& value);
  inline void set_role_avatar_url(const char* value);
  inline void set_role_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_role_avatar_url();
  inline ::std::string* release_role_avatar_url();
  inline void set_allocated_role_avatar_url(::std::string* role_avatar_url);

  // optional uint32 world_channel_id = 5;
  inline bool has_world_channel_id() const;
  inline void clear_world_channel_id();
  static const int kWorldChannelIdFieldNumber = 5;
  inline ::google::protobuf::uint32 world_channel_id() const;
  inline void set_world_channel_id(::google::protobuf::uint32 value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 gender_id = 7;
  inline bool has_gender_id() const;
  inline void clear_gender_id();
  static const int kGenderIdFieldNumber = 7;
  inline ::google::protobuf::int32 gender_id() const;
  inline void set_gender_id(::google::protobuf::int32 value);

  // optional uint32 avatar_box_id = 8;
  inline bool has_avatar_box_id() const;
  inline void clear_avatar_box_id();
  static const int kAvatarBoxIdFieldNumber = 8;
  inline ::google::protobuf::uint32 avatar_box_id() const;
  inline void set_avatar_box_id(::google::protobuf::uint32 value);

  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated uint64 roles_in_channel = 10;
  inline int roles_in_channel_size() const;
  inline void clear_roles_in_channel();
  static const int kRolesInChannelFieldNumber = 10;
  inline ::google::protobuf::uint64 roles_in_channel(int index) const;
  inline void set_roles_in_channel(int index, ::google::protobuf::uint64 value);
  inline void add_roles_in_channel(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      roles_in_channel() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_roles_in_channel();

  // optional int32 officer_grade = 11;
  inline bool has_officer_grade() const;
  inline void clear_officer_grade();
  static const int kOfficerGradeFieldNumber = 11;
  inline ::google::protobuf::int32 officer_grade() const;
  inline void set_officer_grade(::google::protobuf::int32 value);

  // optional .SProtoSpace.eWorldChatType world_chat_type = 12;
  inline bool has_world_chat_type() const;
  inline void clear_world_chat_type();
  static const int kWorldChatTypeFieldNumber = 12;
  inline ::SProtoSpace::eWorldChatType world_chat_type() const;
  inline void set_world_chat_type(::SProtoSpace::eWorldChatType value);

  // optional uint64 event_data = 13;
  inline bool has_event_data() const;
  inline void clear_event_data();
  static const int kEventDataFieldNumber = 13;
  inline ::google::protobuf::uint64 event_data() const;
  inline void set_event_data(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_world_public_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_avatar_url();
  inline void clear_has_role_avatar_url();
  inline void set_has_world_channel_id();
  inline void clear_has_world_channel_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gender_id();
  inline void clear_has_gender_id();
  inline void set_has_avatar_box_id();
  inline void clear_has_avatar_box_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_officer_grade();
  inline void clear_has_officer_grade();
  inline void set_has_world_chat_type();
  inline void clear_has_world_chat_type();
  inline void set_has_event_data();
  inline void clear_has_event_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  int protoid_;
  ::google::protobuf::uint32 world_channel_id_;
  ::std::string* role_avatar_url_;
  ::std::string* content_;
  ::google::protobuf::int32 gender_id_;
  ::google::protobuf::uint32 avatar_box_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > roles_in_channel_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 officer_grade_;
  ::google::protobuf::uint64 event_data_;
  int world_chat_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fchat_2eproto();
  friend void protobuf_AssignDesc_ss_5fchat_2eproto();
  friend void protobuf_ShutdownFile_ss_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_world_public_ntf* default_instance_;
};
// -------------------------------------------------------------------

class chat_world_change_channel_public_req : public ::google::protobuf::Message {
 public:
  chat_world_change_channel_public_req();
  virtual ~chat_world_change_channel_public_req();

  chat_world_change_channel_public_req(const chat_world_change_channel_public_req& from);

  inline chat_world_change_channel_public_req& operator=(const chat_world_change_channel_public_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_world_change_channel_public_req& default_instance();

  void Swap(chat_world_change_channel_public_req* other);

  // implements Message ----------------------------------------------

  chat_world_change_channel_public_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_world_change_channel_public_req& from);
  void MergeFrom(const chat_world_change_channel_public_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_change_channel_public_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 old_channel = 3;
  inline bool has_old_channel() const;
  inline void clear_old_channel();
  static const int kOldChannelFieldNumber = 3;
  inline ::google::protobuf::uint32 old_channel() const;
  inline void set_old_channel(::google::protobuf::uint32 value);

  // optional uint32 new_channel = 4;
  inline bool has_new_channel() const;
  inline void clear_new_channel();
  static const int kNewChannelFieldNumber = 4;
  inline ::google::protobuf::uint32 new_channel() const;
  inline void set_new_channel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_world_change_channel_public_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_old_channel();
  inline void clear_has_old_channel();
  inline void set_has_new_channel();
  inline void clear_has_new_channel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int protoid_;
  ::google::protobuf::uint32 old_channel_;
  ::google::protobuf::uint32 new_channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fchat_2eproto();
  friend void protobuf_AssignDesc_ss_5fchat_2eproto();
  friend void protobuf_ShutdownFile_ss_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_world_change_channel_public_req* default_instance_;
};
// -------------------------------------------------------------------

class chat_world_change_channel_public_ack : public ::google::protobuf::Message {
 public:
  chat_world_change_channel_public_ack();
  virtual ~chat_world_change_channel_public_ack();

  chat_world_change_channel_public_ack(const chat_world_change_channel_public_ack& from);

  inline chat_world_change_channel_public_ack& operator=(const chat_world_change_channel_public_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_world_change_channel_public_ack& default_instance();

  void Swap(chat_world_change_channel_public_ack* other);

  // implements Message ----------------------------------------------

  chat_world_change_channel_public_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_world_change_channel_public_ack& from);
  void MergeFrom(const chat_world_change_channel_public_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_change_channel_public_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 old_channel = 3;
  inline bool has_old_channel() const;
  inline void clear_old_channel();
  static const int kOldChannelFieldNumber = 3;
  inline ::google::protobuf::uint32 old_channel() const;
  inline void set_old_channel(::google::protobuf::uint32 value);

  // optional uint32 new_channel = 4;
  inline bool has_new_channel() const;
  inline void clear_new_channel();
  static const int kNewChannelFieldNumber = 4;
  inline ::google::protobuf::uint32 new_channel() const;
  inline void set_new_channel(::google::protobuf::uint32 value);

  // optional int32 rec_code = 5;
  inline bool has_rec_code() const;
  inline void clear_rec_code();
  static const int kRecCodeFieldNumber = 5;
  inline ::google::protobuf::int32 rec_code() const;
  inline void set_rec_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_world_change_channel_public_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_old_channel();
  inline void clear_has_old_channel();
  inline void set_has_new_channel();
  inline void clear_has_new_channel();
  inline void set_has_rec_code();
  inline void clear_has_rec_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int protoid_;
  ::google::protobuf::uint32 old_channel_;
  ::google::protobuf::uint32 new_channel_;
  ::google::protobuf::int32 rec_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fchat_2eproto();
  friend void protobuf_AssignDesc_ss_5fchat_2eproto();
  friend void protobuf_ShutdownFile_ss_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_world_change_channel_public_ack* default_instance_;
};
// -------------------------------------------------------------------

class chat_world_random_channel_public_req : public ::google::protobuf::Message {
 public:
  chat_world_random_channel_public_req();
  virtual ~chat_world_random_channel_public_req();

  chat_world_random_channel_public_req(const chat_world_random_channel_public_req& from);

  inline chat_world_random_channel_public_req& operator=(const chat_world_random_channel_public_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_world_random_channel_public_req& default_instance();

  void Swap(chat_world_random_channel_public_req* other);

  // implements Message ----------------------------------------------

  chat_world_random_channel_public_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_world_random_channel_public_req& from);
  void MergeFrom(const chat_world_random_channel_public_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_random_channel_public_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_world_random_channel_public_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fchat_2eproto();
  friend void protobuf_AssignDesc_ss_5fchat_2eproto();
  friend void protobuf_ShutdownFile_ss_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_world_random_channel_public_req* default_instance_;
};
// -------------------------------------------------------------------

class chat_world_random_channel_public_ack : public ::google::protobuf::Message {
 public:
  chat_world_random_channel_public_ack();
  virtual ~chat_world_random_channel_public_ack();

  chat_world_random_channel_public_ack(const chat_world_random_channel_public_ack& from);

  inline chat_world_random_channel_public_ack& operator=(const chat_world_random_channel_public_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_world_random_channel_public_ack& default_instance();

  void Swap(chat_world_random_channel_public_ack* other);

  // implements Message ----------------------------------------------

  chat_world_random_channel_public_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_world_random_channel_public_ack& from);
  void MergeFrom(const chat_world_random_channel_public_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_random_channel_public_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 new_channel = 3;
  inline bool has_new_channel() const;
  inline void clear_new_channel();
  static const int kNewChannelFieldNumber = 3;
  inline ::google::protobuf::uint32 new_channel() const;
  inline void set_new_channel(::google::protobuf::uint32 value);

  // optional int32 rec_code = 4;
  inline bool has_rec_code() const;
  inline void clear_rec_code();
  static const int kRecCodeFieldNumber = 4;
  inline ::google::protobuf::int32 rec_code() const;
  inline void set_rec_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_world_random_channel_public_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_new_channel();
  inline void clear_has_new_channel();
  inline void set_has_rec_code();
  inline void clear_has_rec_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int protoid_;
  ::google::protobuf::uint32 new_channel_;
  ::google::protobuf::int32 rec_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fchat_2eproto();
  friend void protobuf_AssignDesc_ss_5fchat_2eproto();
  friend void protobuf_ShutdownFile_ss_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_world_random_channel_public_ack* default_instance_;
};
// -------------------------------------------------------------------

class chat_private_public_ntf : public ::google::protobuf::Message {
 public:
  chat_private_public_ntf();
  virtual ~chat_private_public_ntf();

  chat_private_public_ntf(const chat_private_public_ntf& from);

  inline chat_private_public_ntf& operator=(const chat_private_public_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_private_public_ntf& default_instance();

  void Swap(chat_private_public_ntf* other);

  // implements Message ----------------------------------------------

  chat_private_public_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_private_public_ntf& from);
  void MergeFrom(const chat_private_public_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_private_public_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 to_role_id = 2;
  inline bool has_to_role_id() const;
  inline void clear_to_role_id();
  static const int kToRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 to_role_id() const;
  inline void set_to_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string role_avatar_url = 4;
  inline bool has_role_avatar_url() const;
  inline void clear_role_avatar_url();
  static const int kRoleAvatarUrlFieldNumber = 4;
  inline const ::std::string& role_avatar_url() const;
  inline void set_role_avatar_url(const ::std::string& value);
  inline void set_role_avatar_url(const char* value);
  inline void set_role_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_role_avatar_url();
  inline ::std::string* release_role_avatar_url();
  inline void set_allocated_role_avatar_url(::std::string* role_avatar_url);

  // optional uint64 from_role_id = 5;
  inline bool has_from_role_id() const;
  inline void clear_from_role_id();
  static const int kFromRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint64 from_role_id() const;
  inline void set_from_role_id(::google::protobuf::uint64 value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 gender_id = 7;
  inline bool has_gender_id() const;
  inline void clear_gender_id();
  static const int kGenderIdFieldNumber = 7;
  inline ::google::protobuf::int32 gender_id() const;
  inline void set_gender_id(::google::protobuf::int32 value);

  // optional uint32 avatar_box_id = 8;
  inline bool has_avatar_box_id() const;
  inline void clear_avatar_box_id();
  static const int kAvatarBoxIdFieldNumber = 8;
  inline ::google::protobuf::uint32 avatar_box_id() const;
  inline void set_avatar_box_id(::google::protobuf::uint32 value);

  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 officer_grade = 10;
  inline bool has_officer_grade() const;
  inline void clear_officer_grade();
  static const int kOfficerGradeFieldNumber = 10;
  inline ::google::protobuf::int32 officer_grade() const;
  inline void set_officer_grade(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_private_public_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_to_role_id();
  inline void clear_has_to_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_avatar_url();
  inline void clear_has_role_avatar_url();
  inline void set_has_from_role_id();
  inline void clear_has_from_role_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gender_id();
  inline void clear_has_gender_id();
  inline void set_has_avatar_box_id();
  inline void clear_has_avatar_box_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_officer_grade();
  inline void clear_has_officer_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 to_role_id_;
  ::std::string* role_name_;
  ::std::string* role_avatar_url_;
  int protoid_;
  ::google::protobuf::int32 gender_id_;
  ::google::protobuf::uint64 from_role_id_;
  ::std::string* content_;
  ::google::protobuf::uint32 avatar_box_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 officer_grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fchat_2eproto();
  friend void protobuf_AssignDesc_ss_5fchat_2eproto();
  friend void protobuf_ShutdownFile_ss_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_private_public_ntf* default_instance_;
};
// -------------------------------------------------------------------

class chat_team_public_ntf : public ::google::protobuf::Message {
 public:
  chat_team_public_ntf();
  virtual ~chat_team_public_ntf();

  chat_team_public_ntf(const chat_team_public_ntf& from);

  inline chat_team_public_ntf& operator=(const chat_team_public_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_team_public_ntf& default_instance();

  void Swap(chat_team_public_ntf* other);

  // implements Message ----------------------------------------------

  chat_team_public_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_team_public_ntf& from);
  void MergeFrom(const chat_team_public_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_team_public_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string role_avatar_url = 4;
  inline bool has_role_avatar_url() const;
  inline void clear_role_avatar_url();
  static const int kRoleAvatarUrlFieldNumber = 4;
  inline const ::std::string& role_avatar_url() const;
  inline void set_role_avatar_url(const ::std::string& value);
  inline void set_role_avatar_url(const char* value);
  inline void set_role_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_role_avatar_url();
  inline ::std::string* release_role_avatar_url();
  inline void set_allocated_role_avatar_url(::std::string* role_avatar_url);

  // optional uint32 team_id = 5;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 5;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 gender_id = 7;
  inline bool has_gender_id() const;
  inline void clear_gender_id();
  static const int kGenderIdFieldNumber = 7;
  inline ::google::protobuf::int32 gender_id() const;
  inline void set_gender_id(::google::protobuf::int32 value);

  // optional uint32 avatar_box_id = 8;
  inline bool has_avatar_box_id() const;
  inline void clear_avatar_box_id();
  static const int kAvatarBoxIdFieldNumber = 8;
  inline ::google::protobuf::uint32 avatar_box_id() const;
  inline void set_avatar_box_id(::google::protobuf::uint32 value);

  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated uint64 roles_in_team = 10;
  inline int roles_in_team_size() const;
  inline void clear_roles_in_team();
  static const int kRolesInTeamFieldNumber = 10;
  inline ::google::protobuf::uint64 roles_in_team(int index) const;
  inline void set_roles_in_team(int index, ::google::protobuf::uint64 value);
  inline void add_roles_in_team(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      roles_in_team() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_roles_in_team();

  // optional int32 officer_grade = 11;
  inline bool has_officer_grade() const;
  inline void clear_officer_grade();
  static const int kOfficerGradeFieldNumber = 11;
  inline ::google::protobuf::int32 officer_grade() const;
  inline void set_officer_grade(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_team_public_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_avatar_url();
  inline void clear_has_role_avatar_url();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gender_id();
  inline void clear_has_gender_id();
  inline void set_has_avatar_box_id();
  inline void clear_has_avatar_box_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_officer_grade();
  inline void clear_has_officer_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  int protoid_;
  ::google::protobuf::uint32 team_id_;
  ::std::string* role_avatar_url_;
  ::std::string* content_;
  ::google::protobuf::int32 gender_id_;
  ::google::protobuf::uint32 avatar_box_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > roles_in_team_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 officer_grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fchat_2eproto();
  friend void protobuf_AssignDesc_ss_5fchat_2eproto();
  friend void protobuf_ShutdownFile_ss_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_team_public_ntf* default_instance_;
};
// -------------------------------------------------------------------

class chat_family_public_ntf : public ::google::protobuf::Message {
 public:
  chat_family_public_ntf();
  virtual ~chat_family_public_ntf();

  chat_family_public_ntf(const chat_family_public_ntf& from);

  inline chat_family_public_ntf& operator=(const chat_family_public_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_family_public_ntf& default_instance();

  void Swap(chat_family_public_ntf* other);

  // implements Message ----------------------------------------------

  chat_family_public_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_family_public_ntf& from);
  void MergeFrom(const chat_family_public_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_family_public_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string role_avatar_url = 4;
  inline bool has_role_avatar_url() const;
  inline void clear_role_avatar_url();
  static const int kRoleAvatarUrlFieldNumber = 4;
  inline const ::std::string& role_avatar_url() const;
  inline void set_role_avatar_url(const ::std::string& value);
  inline void set_role_avatar_url(const char* value);
  inline void set_role_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_role_avatar_url();
  inline ::std::string* release_role_avatar_url();
  inline void set_allocated_role_avatar_url(::std::string* role_avatar_url);

  // optional uint32 family_id = 5;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 5;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 gender_id = 7;
  inline bool has_gender_id() const;
  inline void clear_gender_id();
  static const int kGenderIdFieldNumber = 7;
  inline ::google::protobuf::int32 gender_id() const;
  inline void set_gender_id(::google::protobuf::int32 value);

  // optional uint32 avatar_box_id = 8;
  inline bool has_avatar_box_id() const;
  inline void clear_avatar_box_id();
  static const int kAvatarBoxIdFieldNumber = 8;
  inline ::google::protobuf::uint32 avatar_box_id() const;
  inline void set_avatar_box_id(::google::protobuf::uint32 value);

  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated uint64 roles_in_family = 10;
  inline int roles_in_family_size() const;
  inline void clear_roles_in_family();
  static const int kRolesInFamilyFieldNumber = 10;
  inline ::google::protobuf::uint64 roles_in_family(int index) const;
  inline void set_roles_in_family(int index, ::google::protobuf::uint64 value);
  inline void add_roles_in_family(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      roles_in_family() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_roles_in_family();

  // optional int32 officer_grade = 11;
  inline bool has_officer_grade() const;
  inline void clear_officer_grade();
  static const int kOfficerGradeFieldNumber = 11;
  inline ::google::protobuf::int32 officer_grade() const;
  inline void set_officer_grade(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_family_public_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_avatar_url();
  inline void clear_has_role_avatar_url();
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gender_id();
  inline void clear_has_gender_id();
  inline void set_has_avatar_box_id();
  inline void clear_has_avatar_box_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_officer_grade();
  inline void clear_has_officer_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  int protoid_;
  ::google::protobuf::uint32 family_id_;
  ::std::string* role_avatar_url_;
  ::std::string* content_;
  ::google::protobuf::int32 gender_id_;
  ::google::protobuf::uint32 avatar_box_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > roles_in_family_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 officer_grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fchat_2eproto();
  friend void protobuf_AssignDesc_ss_5fchat_2eproto();
  friend void protobuf_ShutdownFile_ss_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_family_public_ntf* default_instance_;
};
// -------------------------------------------------------------------

class chat_broadcast_public_ntf : public ::google::protobuf::Message {
 public:
  chat_broadcast_public_ntf();
  virtual ~chat_broadcast_public_ntf();

  chat_broadcast_public_ntf(const chat_broadcast_public_ntf& from);

  inline chat_broadcast_public_ntf& operator=(const chat_broadcast_public_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_broadcast_public_ntf& default_instance();

  void Swap(chat_broadcast_public_ntf* other);

  // implements Message ----------------------------------------------

  chat_broadcast_public_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_broadcast_public_ntf& from);
  void MergeFrom(const chat_broadcast_public_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_broadcast_public_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 to_role_id = 2;
  inline bool has_to_role_id() const;
  inline void clear_to_role_id();
  static const int kToRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 to_role_id() const;
  inline void set_to_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string role_avatar_url = 4;
  inline bool has_role_avatar_url() const;
  inline void clear_role_avatar_url();
  static const int kRoleAvatarUrlFieldNumber = 4;
  inline const ::std::string& role_avatar_url() const;
  inline void set_role_avatar_url(const ::std::string& value);
  inline void set_role_avatar_url(const char* value);
  inline void set_role_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_role_avatar_url();
  inline ::std::string* release_role_avatar_url();
  inline void set_allocated_role_avatar_url(::std::string* role_avatar_url);

  // optional uint64 from_role_id = 5;
  inline bool has_from_role_id() const;
  inline void clear_from_role_id();
  static const int kFromRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint64 from_role_id() const;
  inline void set_from_role_id(::google::protobuf::uint64 value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 gender_id = 7;
  inline bool has_gender_id() const;
  inline void clear_gender_id();
  static const int kGenderIdFieldNumber = 7;
  inline ::google::protobuf::int32 gender_id() const;
  inline void set_gender_id(::google::protobuf::int32 value);

  // optional uint32 avatar_box_id = 8;
  inline bool has_avatar_box_id() const;
  inline void clear_avatar_box_id();
  static const int kAvatarBoxIdFieldNumber = 8;
  inline ::google::protobuf::uint32 avatar_box_id() const;
  inline void set_avatar_box_id(::google::protobuf::uint32 value);

  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 officer_grade = 10;
  inline bool has_officer_grade() const;
  inline void clear_officer_grade();
  static const int kOfficerGradeFieldNumber = 10;
  inline ::google::protobuf::int32 officer_grade() const;
  inline void set_officer_grade(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_broadcast_public_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_to_role_id();
  inline void clear_has_to_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_avatar_url();
  inline void clear_has_role_avatar_url();
  inline void set_has_from_role_id();
  inline void clear_has_from_role_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gender_id();
  inline void clear_has_gender_id();
  inline void set_has_avatar_box_id();
  inline void clear_has_avatar_box_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_officer_grade();
  inline void clear_has_officer_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 to_role_id_;
  ::std::string* role_name_;
  ::std::string* role_avatar_url_;
  int protoid_;
  ::google::protobuf::int32 gender_id_;
  ::google::protobuf::uint64 from_role_id_;
  ::std::string* content_;
  ::google::protobuf::uint32 avatar_box_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 officer_grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fchat_2eproto();
  friend void protobuf_AssignDesc_ss_5fchat_2eproto();
  friend void protobuf_ShutdownFile_ss_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_broadcast_public_ntf* default_instance_;
};
// -------------------------------------------------------------------

class chat_world_channel_ntf_one_role : public ::google::protobuf::Message {
 public:
  chat_world_channel_ntf_one_role();
  virtual ~chat_world_channel_ntf_one_role();

  chat_world_channel_ntf_one_role(const chat_world_channel_ntf_one_role& from);

  inline chat_world_channel_ntf_one_role& operator=(const chat_world_channel_ntf_one_role& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_world_channel_ntf_one_role& default_instance();

  void Swap(chat_world_channel_ntf_one_role* other);

  // implements Message ----------------------------------------------

  chat_world_channel_ntf_one_role* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_world_channel_ntf_one_role& from);
  void MergeFrom(const chat_world_channel_ntf_one_role& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 channel_id = 2;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_world_channel_ntf_one_role)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint32 channel_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fchat_2eproto();
  friend void protobuf_AssignDesc_ss_5fchat_2eproto();
  friend void protobuf_ShutdownFile_ss_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_world_channel_ntf_one_role* default_instance_;
};
// -------------------------------------------------------------------

class chat_world_channel_ntf : public ::google::protobuf::Message {
 public:
  chat_world_channel_ntf();
  virtual ~chat_world_channel_ntf();

  chat_world_channel_ntf(const chat_world_channel_ntf& from);

  inline chat_world_channel_ntf& operator=(const chat_world_channel_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_world_channel_ntf& default_instance();

  void Swap(chat_world_channel_ntf* other);

  // implements Message ----------------------------------------------

  chat_world_channel_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_world_channel_ntf& from);
  void MergeFrom(const chat_world_channel_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_channel_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // repeated .SProtoSpace.chat_world_channel_ntf_one_role roles = 2;
  inline int roles_size() const;
  inline void clear_roles();
  static const int kRolesFieldNumber = 2;
  inline const ::SProtoSpace::chat_world_channel_ntf_one_role& roles(int index) const;
  inline ::SProtoSpace::chat_world_channel_ntf_one_role* mutable_roles(int index);
  inline ::SProtoSpace::chat_world_channel_ntf_one_role* add_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chat_world_channel_ntf_one_role >&
      roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chat_world_channel_ntf_one_role >*
      mutable_roles();

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_world_channel_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chat_world_channel_ntf_one_role > roles_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fchat_2eproto();
  friend void protobuf_AssignDesc_ss_5fchat_2eproto();
  friend void protobuf_ShutdownFile_ss_5fchat_2eproto();

  void InitAsDefaultInstance();
  static chat_world_channel_ntf* default_instance_;
};
// -------------------------------------------------------------------

class barrage_get_ss_req : public ::google::protobuf::Message {
 public:
  barrage_get_ss_req();
  virtual ~barrage_get_ss_req();

  barrage_get_ss_req(const barrage_get_ss_req& from);

  inline barrage_get_ss_req& operator=(const barrage_get_ss_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const barrage_get_ss_req& default_instance();

  void Swap(barrage_get_ss_req* other);

  // implements Message ----------------------------------------------

  barrage_get_ss_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const barrage_get_ss_req& from);
  void MergeFrom(const barrage_get_ss_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_get_ss_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // repeated int32 storage_id = 2;
  inline int storage_id_size() const;
  inline void clear_storage_id();
  static const int kStorageIdFieldNumber = 2;
  inline ::google::protobuf::int32 storage_id(int index) const;
  inline void set_storage_id(int index, ::google::protobuf::int32 value);
  inline void add_storage_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      storage_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_storage_id();

  // optional int32 desinty = 3;
  inline bool has_desinty() const;
  inline void clear_desinty();
  static const int kDesintyFieldNumber = 3;
  inline ::google::protobuf::int32 desinty() const;
  inline void set_desinty(::google::protobuf::int32 value);

  // optional uint64 role_id = 4;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional int32 start = 5;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 5;
  inline ::google::protobuf::int32 start() const;
  inline void set_start(::google::protobuf::int32 value);

  // optional int32 end = 6;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 6;
  inline ::google::protobuf::int32 end() const;
  inline void set_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.barrage_get_ss_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_desinty();
  inline void clear_has_desinty();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > storage_id_;
  int protoid_;
  ::google::protobuf::int32 desinty_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int32 end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fchat_2eproto();
  friend void protobuf_AssignDesc_ss_5fchat_2eproto();
  friend void protobuf_ShutdownFile_ss_5fchat_2eproto();

  void InitAsDefaultInstance();
  static barrage_get_ss_req* default_instance_;
};
// -------------------------------------------------------------------

class barrage_get_ss_ack : public ::google::protobuf::Message {
 public:
  barrage_get_ss_ack();
  virtual ~barrage_get_ss_ack();

  barrage_get_ss_ack(const barrage_get_ss_ack& from);

  inline barrage_get_ss_ack& operator=(const barrage_get_ss_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const barrage_get_ss_ack& default_instance();

  void Swap(barrage_get_ss_ack* other);

  // implements Message ----------------------------------------------

  barrage_get_ss_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const barrage_get_ss_ack& from);
  void MergeFrom(const barrage_get_ss_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_get_ss_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional int32 desinty = 2;
  inline bool has_desinty() const;
  inline void clear_desinty();
  static const int kDesintyFieldNumber = 2;
  inline ::google::protobuf::int32 desinty() const;
  inline void set_desinty(::google::protobuf::int32 value);

  // optional .SProtoSpace.barrage_pack barrage_s = 3;
  inline bool has_barrage_s() const;
  inline void clear_barrage_s();
  static const int kBarrageSFieldNumber = 3;
  inline const ::SProtoSpace::barrage_pack& barrage_s() const;
  inline ::SProtoSpace::barrage_pack* mutable_barrage_s();
  inline ::SProtoSpace::barrage_pack* release_barrage_s();
  inline void set_allocated_barrage_s(::SProtoSpace::barrage_pack* barrage_s);

  // optional uint64 role_id = 4;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.barrage_get_ss_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_desinty();
  inline void clear_has_desinty();
  inline void set_has_barrage_s();
  inline void clear_has_barrage_s();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 desinty_;
  ::SProtoSpace::barrage_pack* barrage_s_;
  ::google::protobuf::uint64 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fchat_2eproto();
  friend void protobuf_AssignDesc_ss_5fchat_2eproto();
  friend void protobuf_ShutdownFile_ss_5fchat_2eproto();

  void InitAsDefaultInstance();
  static barrage_get_ss_ack* default_instance_;
};
// -------------------------------------------------------------------

class barrage_send_ss_req : public ::google::protobuf::Message {
 public:
  barrage_send_ss_req();
  virtual ~barrage_send_ss_req();

  barrage_send_ss_req(const barrage_send_ss_req& from);

  inline barrage_send_ss_req& operator=(const barrage_send_ss_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const barrage_send_ss_req& default_instance();

  void Swap(barrage_send_ss_req* other);

  // implements Message ----------------------------------------------

  barrage_send_ss_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const barrage_send_ss_req& from);
  void MergeFrom(const barrage_send_ss_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_send_ss_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // repeated int32 storage_id = 2;
  inline int storage_id_size() const;
  inline void clear_storage_id();
  static const int kStorageIdFieldNumber = 2;
  inline ::google::protobuf::int32 storage_id(int index) const;
  inline void set_storage_id(int index, ::google::protobuf::int32 value);
  inline void add_storage_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      storage_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_storage_id();

  // optional .SProtoSpace.barrage_single barrage = 3;
  inline bool has_barrage() const;
  inline void clear_barrage();
  static const int kBarrageFieldNumber = 3;
  inline const ::SProtoSpace::barrage_single& barrage() const;
  inline ::SProtoSpace::barrage_single* mutable_barrage();
  inline ::SProtoSpace::barrage_single* release_barrage();
  inline void set_allocated_barrage(::SProtoSpace::barrage_single* barrage);

  // optional uint64 role_id = 4;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.barrage_role_info role_info = 5;
  inline bool has_role_info() const;
  inline void clear_role_info();
  static const int kRoleInfoFieldNumber = 5;
  inline const ::SProtoSpace::barrage_role_info& role_info() const;
  inline ::SProtoSpace::barrage_role_info* mutable_role_info();
  inline ::SProtoSpace::barrage_role_info* release_role_info();
  inline void set_allocated_role_info(::SProtoSpace::barrage_role_info* role_info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.barrage_send_ss_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_barrage();
  inline void clear_has_barrage();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_info();
  inline void clear_has_role_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > storage_id_;
  ::SProtoSpace::barrage_single* barrage_;
  ::google::protobuf::uint64 role_id_;
  ::SProtoSpace::barrage_role_info* role_info_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fchat_2eproto();
  friend void protobuf_AssignDesc_ss_5fchat_2eproto();
  friend void protobuf_ShutdownFile_ss_5fchat_2eproto();

  void InitAsDefaultInstance();
  static barrage_send_ss_req* default_instance_;
};
// -------------------------------------------------------------------

class barrage_send_ss_ack : public ::google::protobuf::Message {
 public:
  barrage_send_ss_ack();
  virtual ~barrage_send_ss_ack();

  barrage_send_ss_ack(const barrage_send_ss_ack& from);

  inline barrage_send_ss_ack& operator=(const barrage_send_ss_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const barrage_send_ss_ack& default_instance();

  void Swap(barrage_send_ss_ack* other);

  // implements Message ----------------------------------------------

  barrage_send_ss_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const barrage_send_ss_ack& from);
  void MergeFrom(const barrage_send_ss_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_send_ss_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // repeated .SProtoSpace.MsgErrorType error = 2;
  inline int error_size() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline ::SProtoSpace::MsgErrorType error(int index) const;
  inline void set_error(int index, ::SProtoSpace::MsgErrorType value);
  inline void add_error(::SProtoSpace::MsgErrorType value);
  inline const ::google::protobuf::RepeatedField<int>& error() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_error();

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.barrage_send_ss_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField<int> error_;
  ::google::protobuf::uint64 role_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fchat_2eproto();
  friend void protobuf_AssignDesc_ss_5fchat_2eproto();
  friend void protobuf_ShutdownFile_ss_5fchat_2eproto();

  void InitAsDefaultInstance();
  static barrage_send_ss_ack* default_instance_;
};
// ===================================================================


// ===================================================================

// chat_world_public_ntf

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_public_ntf_id];
inline bool chat_world_public_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_world_public_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_world_public_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_world_public_ntf::clear_protoid() {
  protoid_ = 900;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID chat_world_public_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void chat_world_public_ntf::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool chat_world_public_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_world_public_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_world_public_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_world_public_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 chat_world_public_ntf::role_id() const {
  return role_id_;
}
inline void chat_world_public_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool chat_world_public_ntf::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_world_public_ntf::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_world_public_ntf::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_world_public_ntf::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& chat_world_public_ntf::role_name() const {
  return *role_name_;
}
inline void chat_world_public_ntf::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_world_public_ntf::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_world_public_ntf::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_world_public_ntf::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* chat_world_public_ntf::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_world_public_ntf::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string role_avatar_url = 4;
inline bool chat_world_public_ntf::has_role_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_world_public_ntf::set_has_role_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_world_public_ntf::clear_has_role_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_world_public_ntf::clear_role_avatar_url() {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_->clear();
  }
  clear_has_role_avatar_url();
}
inline const ::std::string& chat_world_public_ntf::role_avatar_url() const {
  return *role_avatar_url_;
}
inline void chat_world_public_ntf::set_role_avatar_url(const ::std::string& value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_world_public_ntf::set_role_avatar_url(const char* value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_world_public_ntf::set_role_avatar_url(const char* value, size_t size) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_world_public_ntf::mutable_role_avatar_url() {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  return role_avatar_url_;
}
inline ::std::string* chat_world_public_ntf::release_role_avatar_url() {
  clear_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_avatar_url_;
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_world_public_ntf::set_allocated_role_avatar_url(::std::string* role_avatar_url) {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (role_avatar_url) {
    set_has_role_avatar_url();
    role_avatar_url_ = role_avatar_url;
  } else {
    clear_has_role_avatar_url();
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 world_channel_id = 5;
inline bool chat_world_public_ntf::has_world_channel_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void chat_world_public_ntf::set_has_world_channel_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void chat_world_public_ntf::clear_has_world_channel_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void chat_world_public_ntf::clear_world_channel_id() {
  world_channel_id_ = 0u;
  clear_has_world_channel_id();
}
inline ::google::protobuf::uint32 chat_world_public_ntf::world_channel_id() const {
  return world_channel_id_;
}
inline void chat_world_public_ntf::set_world_channel_id(::google::protobuf::uint32 value) {
  set_has_world_channel_id();
  world_channel_id_ = value;
}

// optional string content = 6;
inline bool chat_world_public_ntf::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void chat_world_public_ntf::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void chat_world_public_ntf::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void chat_world_public_ntf::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& chat_world_public_ntf::content() const {
  return *content_;
}
inline void chat_world_public_ntf::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_world_public_ntf::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_world_public_ntf::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_world_public_ntf::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* chat_world_public_ntf::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_world_public_ntf::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gender_id = 7;
inline bool chat_world_public_ntf::has_gender_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void chat_world_public_ntf::set_has_gender_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void chat_world_public_ntf::clear_has_gender_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void chat_world_public_ntf::clear_gender_id() {
  gender_id_ = 0;
  clear_has_gender_id();
}
inline ::google::protobuf::int32 chat_world_public_ntf::gender_id() const {
  return gender_id_;
}
inline void chat_world_public_ntf::set_gender_id(::google::protobuf::int32 value) {
  set_has_gender_id();
  gender_id_ = value;
}

// optional uint32 avatar_box_id = 8;
inline bool chat_world_public_ntf::has_avatar_box_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void chat_world_public_ntf::set_has_avatar_box_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void chat_world_public_ntf::clear_has_avatar_box_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void chat_world_public_ntf::clear_avatar_box_id() {
  avatar_box_id_ = 0u;
  clear_has_avatar_box_id();
}
inline ::google::protobuf::uint32 chat_world_public_ntf::avatar_box_id() const {
  return avatar_box_id_;
}
inline void chat_world_public_ntf::set_avatar_box_id(::google::protobuf::uint32 value) {
  set_has_avatar_box_id();
  avatar_box_id_ = value;
}

// optional int32 level = 9;
inline bool chat_world_public_ntf::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void chat_world_public_ntf::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void chat_world_public_ntf::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void chat_world_public_ntf::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 chat_world_public_ntf::level() const {
  return level_;
}
inline void chat_world_public_ntf::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated uint64 roles_in_channel = 10;
inline int chat_world_public_ntf::roles_in_channel_size() const {
  return roles_in_channel_.size();
}
inline void chat_world_public_ntf::clear_roles_in_channel() {
  roles_in_channel_.Clear();
}
inline ::google::protobuf::uint64 chat_world_public_ntf::roles_in_channel(int index) const {
  return roles_in_channel_.Get(index);
}
inline void chat_world_public_ntf::set_roles_in_channel(int index, ::google::protobuf::uint64 value) {
  roles_in_channel_.Set(index, value);
}
inline void chat_world_public_ntf::add_roles_in_channel(::google::protobuf::uint64 value) {
  roles_in_channel_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
chat_world_public_ntf::roles_in_channel() const {
  return roles_in_channel_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
chat_world_public_ntf::mutable_roles_in_channel() {
  return &roles_in_channel_;
}

// optional int32 officer_grade = 11;
inline bool chat_world_public_ntf::has_officer_grade() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void chat_world_public_ntf::set_has_officer_grade() {
  _has_bits_[0] |= 0x00000400u;
}
inline void chat_world_public_ntf::clear_has_officer_grade() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void chat_world_public_ntf::clear_officer_grade() {
  officer_grade_ = 0;
  clear_has_officer_grade();
}
inline ::google::protobuf::int32 chat_world_public_ntf::officer_grade() const {
  return officer_grade_;
}
inline void chat_world_public_ntf::set_officer_grade(::google::protobuf::int32 value) {
  set_has_officer_grade();
  officer_grade_ = value;
}

// optional .SProtoSpace.eWorldChatType world_chat_type = 12;
inline bool chat_world_public_ntf::has_world_chat_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void chat_world_public_ntf::set_has_world_chat_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void chat_world_public_ntf::clear_has_world_chat_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void chat_world_public_ntf::clear_world_chat_type() {
  world_chat_type_ = 0;
  clear_has_world_chat_type();
}
inline ::SProtoSpace::eWorldChatType chat_world_public_ntf::world_chat_type() const {
  return static_cast< ::SProtoSpace::eWorldChatType >(world_chat_type_);
}
inline void chat_world_public_ntf::set_world_chat_type(::SProtoSpace::eWorldChatType value) {
  assert(::SProtoSpace::eWorldChatType_IsValid(value));
  set_has_world_chat_type();
  world_chat_type_ = value;
}

// optional uint64 event_data = 13;
inline bool chat_world_public_ntf::has_event_data() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void chat_world_public_ntf::set_has_event_data() {
  _has_bits_[0] |= 0x00001000u;
}
inline void chat_world_public_ntf::clear_has_event_data() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void chat_world_public_ntf::clear_event_data() {
  event_data_ = GOOGLE_ULONGLONG(0);
  clear_has_event_data();
}
inline ::google::protobuf::uint64 chat_world_public_ntf::event_data() const {
  return event_data_;
}
inline void chat_world_public_ntf::set_event_data(::google::protobuf::uint64 value) {
  set_has_event_data();
  event_data_ = value;
}

// -------------------------------------------------------------------

// chat_world_change_channel_public_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_change_channel_public_req_id];
inline bool chat_world_change_channel_public_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_world_change_channel_public_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_world_change_channel_public_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_world_change_channel_public_req::clear_protoid() {
  protoid_ = 906;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID chat_world_change_channel_public_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void chat_world_change_channel_public_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool chat_world_change_channel_public_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_world_change_channel_public_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_world_change_channel_public_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_world_change_channel_public_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 chat_world_change_channel_public_req::role_id() const {
  return role_id_;
}
inline void chat_world_change_channel_public_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 old_channel = 3;
inline bool chat_world_change_channel_public_req::has_old_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_world_change_channel_public_req::set_has_old_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_world_change_channel_public_req::clear_has_old_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_world_change_channel_public_req::clear_old_channel() {
  old_channel_ = 0u;
  clear_has_old_channel();
}
inline ::google::protobuf::uint32 chat_world_change_channel_public_req::old_channel() const {
  return old_channel_;
}
inline void chat_world_change_channel_public_req::set_old_channel(::google::protobuf::uint32 value) {
  set_has_old_channel();
  old_channel_ = value;
}

// optional uint32 new_channel = 4;
inline bool chat_world_change_channel_public_req::has_new_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_world_change_channel_public_req::set_has_new_channel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_world_change_channel_public_req::clear_has_new_channel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_world_change_channel_public_req::clear_new_channel() {
  new_channel_ = 0u;
  clear_has_new_channel();
}
inline ::google::protobuf::uint32 chat_world_change_channel_public_req::new_channel() const {
  return new_channel_;
}
inline void chat_world_change_channel_public_req::set_new_channel(::google::protobuf::uint32 value) {
  set_has_new_channel();
  new_channel_ = value;
}

// -------------------------------------------------------------------

// chat_world_change_channel_public_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_change_channel_public_ack_id];
inline bool chat_world_change_channel_public_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_world_change_channel_public_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_world_change_channel_public_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_world_change_channel_public_ack::clear_protoid() {
  protoid_ = 907;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID chat_world_change_channel_public_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void chat_world_change_channel_public_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool chat_world_change_channel_public_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_world_change_channel_public_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_world_change_channel_public_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_world_change_channel_public_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 chat_world_change_channel_public_ack::role_id() const {
  return role_id_;
}
inline void chat_world_change_channel_public_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 old_channel = 3;
inline bool chat_world_change_channel_public_ack::has_old_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_world_change_channel_public_ack::set_has_old_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_world_change_channel_public_ack::clear_has_old_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_world_change_channel_public_ack::clear_old_channel() {
  old_channel_ = 0u;
  clear_has_old_channel();
}
inline ::google::protobuf::uint32 chat_world_change_channel_public_ack::old_channel() const {
  return old_channel_;
}
inline void chat_world_change_channel_public_ack::set_old_channel(::google::protobuf::uint32 value) {
  set_has_old_channel();
  old_channel_ = value;
}

// optional uint32 new_channel = 4;
inline bool chat_world_change_channel_public_ack::has_new_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_world_change_channel_public_ack::set_has_new_channel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_world_change_channel_public_ack::clear_has_new_channel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_world_change_channel_public_ack::clear_new_channel() {
  new_channel_ = 0u;
  clear_has_new_channel();
}
inline ::google::protobuf::uint32 chat_world_change_channel_public_ack::new_channel() const {
  return new_channel_;
}
inline void chat_world_change_channel_public_ack::set_new_channel(::google::protobuf::uint32 value) {
  set_has_new_channel();
  new_channel_ = value;
}

// optional int32 rec_code = 5;
inline bool chat_world_change_channel_public_ack::has_rec_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void chat_world_change_channel_public_ack::set_has_rec_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void chat_world_change_channel_public_ack::clear_has_rec_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void chat_world_change_channel_public_ack::clear_rec_code() {
  rec_code_ = 0;
  clear_has_rec_code();
}
inline ::google::protobuf::int32 chat_world_change_channel_public_ack::rec_code() const {
  return rec_code_;
}
inline void chat_world_change_channel_public_ack::set_rec_code(::google::protobuf::int32 value) {
  set_has_rec_code();
  rec_code_ = value;
}

// -------------------------------------------------------------------

// chat_world_random_channel_public_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_random_channel_public_req_id];
inline bool chat_world_random_channel_public_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_world_random_channel_public_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_world_random_channel_public_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_world_random_channel_public_req::clear_protoid() {
  protoid_ = 908;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID chat_world_random_channel_public_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void chat_world_random_channel_public_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool chat_world_random_channel_public_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_world_random_channel_public_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_world_random_channel_public_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_world_random_channel_public_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 chat_world_random_channel_public_req::role_id() const {
  return role_id_;
}
inline void chat_world_random_channel_public_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// chat_world_random_channel_public_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_random_channel_public_ack_id];
inline bool chat_world_random_channel_public_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_world_random_channel_public_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_world_random_channel_public_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_world_random_channel_public_ack::clear_protoid() {
  protoid_ = 909;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID chat_world_random_channel_public_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void chat_world_random_channel_public_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool chat_world_random_channel_public_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_world_random_channel_public_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_world_random_channel_public_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_world_random_channel_public_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 chat_world_random_channel_public_ack::role_id() const {
  return role_id_;
}
inline void chat_world_random_channel_public_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 new_channel = 3;
inline bool chat_world_random_channel_public_ack::has_new_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_world_random_channel_public_ack::set_has_new_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_world_random_channel_public_ack::clear_has_new_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_world_random_channel_public_ack::clear_new_channel() {
  new_channel_ = 0u;
  clear_has_new_channel();
}
inline ::google::protobuf::uint32 chat_world_random_channel_public_ack::new_channel() const {
  return new_channel_;
}
inline void chat_world_random_channel_public_ack::set_new_channel(::google::protobuf::uint32 value) {
  set_has_new_channel();
  new_channel_ = value;
}

// optional int32 rec_code = 4;
inline bool chat_world_random_channel_public_ack::has_rec_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_world_random_channel_public_ack::set_has_rec_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_world_random_channel_public_ack::clear_has_rec_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_world_random_channel_public_ack::clear_rec_code() {
  rec_code_ = 0;
  clear_has_rec_code();
}
inline ::google::protobuf::int32 chat_world_random_channel_public_ack::rec_code() const {
  return rec_code_;
}
inline void chat_world_random_channel_public_ack::set_rec_code(::google::protobuf::int32 value) {
  set_has_rec_code();
  rec_code_ = value;
}

// -------------------------------------------------------------------

// chat_private_public_ntf

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_private_public_ntf_id];
inline bool chat_private_public_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_private_public_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_private_public_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_private_public_ntf::clear_protoid() {
  protoid_ = 901;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID chat_private_public_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void chat_private_public_ntf::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 to_role_id = 2;
inline bool chat_private_public_ntf::has_to_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_private_public_ntf::set_has_to_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_private_public_ntf::clear_has_to_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_private_public_ntf::clear_to_role_id() {
  to_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_role_id();
}
inline ::google::protobuf::uint64 chat_private_public_ntf::to_role_id() const {
  return to_role_id_;
}
inline void chat_private_public_ntf::set_to_role_id(::google::protobuf::uint64 value) {
  set_has_to_role_id();
  to_role_id_ = value;
}

// optional string role_name = 3;
inline bool chat_private_public_ntf::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_private_public_ntf::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_private_public_ntf::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_private_public_ntf::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& chat_private_public_ntf::role_name() const {
  return *role_name_;
}
inline void chat_private_public_ntf::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_private_public_ntf::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_private_public_ntf::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_private_public_ntf::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* chat_private_public_ntf::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_private_public_ntf::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string role_avatar_url = 4;
inline bool chat_private_public_ntf::has_role_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_private_public_ntf::set_has_role_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_private_public_ntf::clear_has_role_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_private_public_ntf::clear_role_avatar_url() {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_->clear();
  }
  clear_has_role_avatar_url();
}
inline const ::std::string& chat_private_public_ntf::role_avatar_url() const {
  return *role_avatar_url_;
}
inline void chat_private_public_ntf::set_role_avatar_url(const ::std::string& value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_private_public_ntf::set_role_avatar_url(const char* value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_private_public_ntf::set_role_avatar_url(const char* value, size_t size) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_private_public_ntf::mutable_role_avatar_url() {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  return role_avatar_url_;
}
inline ::std::string* chat_private_public_ntf::release_role_avatar_url() {
  clear_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_avatar_url_;
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_private_public_ntf::set_allocated_role_avatar_url(::std::string* role_avatar_url) {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (role_avatar_url) {
    set_has_role_avatar_url();
    role_avatar_url_ = role_avatar_url;
  } else {
    clear_has_role_avatar_url();
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 from_role_id = 5;
inline bool chat_private_public_ntf::has_from_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void chat_private_public_ntf::set_has_from_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void chat_private_public_ntf::clear_has_from_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void chat_private_public_ntf::clear_from_role_id() {
  from_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_role_id();
}
inline ::google::protobuf::uint64 chat_private_public_ntf::from_role_id() const {
  return from_role_id_;
}
inline void chat_private_public_ntf::set_from_role_id(::google::protobuf::uint64 value) {
  set_has_from_role_id();
  from_role_id_ = value;
}

// optional string content = 6;
inline bool chat_private_public_ntf::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void chat_private_public_ntf::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void chat_private_public_ntf::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void chat_private_public_ntf::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& chat_private_public_ntf::content() const {
  return *content_;
}
inline void chat_private_public_ntf::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_private_public_ntf::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_private_public_ntf::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_private_public_ntf::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* chat_private_public_ntf::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_private_public_ntf::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gender_id = 7;
inline bool chat_private_public_ntf::has_gender_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void chat_private_public_ntf::set_has_gender_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void chat_private_public_ntf::clear_has_gender_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void chat_private_public_ntf::clear_gender_id() {
  gender_id_ = 0;
  clear_has_gender_id();
}
inline ::google::protobuf::int32 chat_private_public_ntf::gender_id() const {
  return gender_id_;
}
inline void chat_private_public_ntf::set_gender_id(::google::protobuf::int32 value) {
  set_has_gender_id();
  gender_id_ = value;
}

// optional uint32 avatar_box_id = 8;
inline bool chat_private_public_ntf::has_avatar_box_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void chat_private_public_ntf::set_has_avatar_box_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void chat_private_public_ntf::clear_has_avatar_box_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void chat_private_public_ntf::clear_avatar_box_id() {
  avatar_box_id_ = 0u;
  clear_has_avatar_box_id();
}
inline ::google::protobuf::uint32 chat_private_public_ntf::avatar_box_id() const {
  return avatar_box_id_;
}
inline void chat_private_public_ntf::set_avatar_box_id(::google::protobuf::uint32 value) {
  set_has_avatar_box_id();
  avatar_box_id_ = value;
}

// optional int32 level = 9;
inline bool chat_private_public_ntf::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void chat_private_public_ntf::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void chat_private_public_ntf::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void chat_private_public_ntf::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 chat_private_public_ntf::level() const {
  return level_;
}
inline void chat_private_public_ntf::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 officer_grade = 10;
inline bool chat_private_public_ntf::has_officer_grade() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void chat_private_public_ntf::set_has_officer_grade() {
  _has_bits_[0] |= 0x00000200u;
}
inline void chat_private_public_ntf::clear_has_officer_grade() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void chat_private_public_ntf::clear_officer_grade() {
  officer_grade_ = 0;
  clear_has_officer_grade();
}
inline ::google::protobuf::int32 chat_private_public_ntf::officer_grade() const {
  return officer_grade_;
}
inline void chat_private_public_ntf::set_officer_grade(::google::protobuf::int32 value) {
  set_has_officer_grade();
  officer_grade_ = value;
}

// -------------------------------------------------------------------

// chat_team_public_ntf

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_team_public_ntf_id];
inline bool chat_team_public_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_team_public_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_team_public_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_team_public_ntf::clear_protoid() {
  protoid_ = 902;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID chat_team_public_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void chat_team_public_ntf::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool chat_team_public_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_team_public_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_team_public_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_team_public_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 chat_team_public_ntf::role_id() const {
  return role_id_;
}
inline void chat_team_public_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool chat_team_public_ntf::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_team_public_ntf::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_team_public_ntf::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_team_public_ntf::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& chat_team_public_ntf::role_name() const {
  return *role_name_;
}
inline void chat_team_public_ntf::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_team_public_ntf::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_team_public_ntf::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_team_public_ntf::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* chat_team_public_ntf::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_team_public_ntf::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string role_avatar_url = 4;
inline bool chat_team_public_ntf::has_role_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_team_public_ntf::set_has_role_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_team_public_ntf::clear_has_role_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_team_public_ntf::clear_role_avatar_url() {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_->clear();
  }
  clear_has_role_avatar_url();
}
inline const ::std::string& chat_team_public_ntf::role_avatar_url() const {
  return *role_avatar_url_;
}
inline void chat_team_public_ntf::set_role_avatar_url(const ::std::string& value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_team_public_ntf::set_role_avatar_url(const char* value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_team_public_ntf::set_role_avatar_url(const char* value, size_t size) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_team_public_ntf::mutable_role_avatar_url() {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  return role_avatar_url_;
}
inline ::std::string* chat_team_public_ntf::release_role_avatar_url() {
  clear_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_avatar_url_;
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_team_public_ntf::set_allocated_role_avatar_url(::std::string* role_avatar_url) {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (role_avatar_url) {
    set_has_role_avatar_url();
    role_avatar_url_ = role_avatar_url;
  } else {
    clear_has_role_avatar_url();
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 team_id = 5;
inline bool chat_team_public_ntf::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void chat_team_public_ntf::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void chat_team_public_ntf::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void chat_team_public_ntf::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 chat_team_public_ntf::team_id() const {
  return team_id_;
}
inline void chat_team_public_ntf::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional string content = 6;
inline bool chat_team_public_ntf::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void chat_team_public_ntf::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void chat_team_public_ntf::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void chat_team_public_ntf::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& chat_team_public_ntf::content() const {
  return *content_;
}
inline void chat_team_public_ntf::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_team_public_ntf::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_team_public_ntf::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_team_public_ntf::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* chat_team_public_ntf::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_team_public_ntf::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gender_id = 7;
inline bool chat_team_public_ntf::has_gender_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void chat_team_public_ntf::set_has_gender_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void chat_team_public_ntf::clear_has_gender_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void chat_team_public_ntf::clear_gender_id() {
  gender_id_ = 0;
  clear_has_gender_id();
}
inline ::google::protobuf::int32 chat_team_public_ntf::gender_id() const {
  return gender_id_;
}
inline void chat_team_public_ntf::set_gender_id(::google::protobuf::int32 value) {
  set_has_gender_id();
  gender_id_ = value;
}

// optional uint32 avatar_box_id = 8;
inline bool chat_team_public_ntf::has_avatar_box_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void chat_team_public_ntf::set_has_avatar_box_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void chat_team_public_ntf::clear_has_avatar_box_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void chat_team_public_ntf::clear_avatar_box_id() {
  avatar_box_id_ = 0u;
  clear_has_avatar_box_id();
}
inline ::google::protobuf::uint32 chat_team_public_ntf::avatar_box_id() const {
  return avatar_box_id_;
}
inline void chat_team_public_ntf::set_avatar_box_id(::google::protobuf::uint32 value) {
  set_has_avatar_box_id();
  avatar_box_id_ = value;
}

// optional int32 level = 9;
inline bool chat_team_public_ntf::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void chat_team_public_ntf::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void chat_team_public_ntf::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void chat_team_public_ntf::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 chat_team_public_ntf::level() const {
  return level_;
}
inline void chat_team_public_ntf::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated uint64 roles_in_team = 10;
inline int chat_team_public_ntf::roles_in_team_size() const {
  return roles_in_team_.size();
}
inline void chat_team_public_ntf::clear_roles_in_team() {
  roles_in_team_.Clear();
}
inline ::google::protobuf::uint64 chat_team_public_ntf::roles_in_team(int index) const {
  return roles_in_team_.Get(index);
}
inline void chat_team_public_ntf::set_roles_in_team(int index, ::google::protobuf::uint64 value) {
  roles_in_team_.Set(index, value);
}
inline void chat_team_public_ntf::add_roles_in_team(::google::protobuf::uint64 value) {
  roles_in_team_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
chat_team_public_ntf::roles_in_team() const {
  return roles_in_team_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
chat_team_public_ntf::mutable_roles_in_team() {
  return &roles_in_team_;
}

// optional int32 officer_grade = 11;
inline bool chat_team_public_ntf::has_officer_grade() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void chat_team_public_ntf::set_has_officer_grade() {
  _has_bits_[0] |= 0x00000400u;
}
inline void chat_team_public_ntf::clear_has_officer_grade() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void chat_team_public_ntf::clear_officer_grade() {
  officer_grade_ = 0;
  clear_has_officer_grade();
}
inline ::google::protobuf::int32 chat_team_public_ntf::officer_grade() const {
  return officer_grade_;
}
inline void chat_team_public_ntf::set_officer_grade(::google::protobuf::int32 value) {
  set_has_officer_grade();
  officer_grade_ = value;
}

// -------------------------------------------------------------------

// chat_family_public_ntf

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_family_public_ntf_id];
inline bool chat_family_public_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_family_public_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_family_public_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_family_public_ntf::clear_protoid() {
  protoid_ = 903;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID chat_family_public_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void chat_family_public_ntf::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool chat_family_public_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_family_public_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_family_public_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_family_public_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 chat_family_public_ntf::role_id() const {
  return role_id_;
}
inline void chat_family_public_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool chat_family_public_ntf::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_family_public_ntf::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_family_public_ntf::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_family_public_ntf::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& chat_family_public_ntf::role_name() const {
  return *role_name_;
}
inline void chat_family_public_ntf::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_family_public_ntf::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_family_public_ntf::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_family_public_ntf::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* chat_family_public_ntf::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_family_public_ntf::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string role_avatar_url = 4;
inline bool chat_family_public_ntf::has_role_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_family_public_ntf::set_has_role_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_family_public_ntf::clear_has_role_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_family_public_ntf::clear_role_avatar_url() {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_->clear();
  }
  clear_has_role_avatar_url();
}
inline const ::std::string& chat_family_public_ntf::role_avatar_url() const {
  return *role_avatar_url_;
}
inline void chat_family_public_ntf::set_role_avatar_url(const ::std::string& value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_family_public_ntf::set_role_avatar_url(const char* value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_family_public_ntf::set_role_avatar_url(const char* value, size_t size) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_family_public_ntf::mutable_role_avatar_url() {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  return role_avatar_url_;
}
inline ::std::string* chat_family_public_ntf::release_role_avatar_url() {
  clear_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_avatar_url_;
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_family_public_ntf::set_allocated_role_avatar_url(::std::string* role_avatar_url) {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (role_avatar_url) {
    set_has_role_avatar_url();
    role_avatar_url_ = role_avatar_url;
  } else {
    clear_has_role_avatar_url();
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 family_id = 5;
inline bool chat_family_public_ntf::has_family_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void chat_family_public_ntf::set_has_family_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void chat_family_public_ntf::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void chat_family_public_ntf::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 chat_family_public_ntf::family_id() const {
  return family_id_;
}
inline void chat_family_public_ntf::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// optional string content = 6;
inline bool chat_family_public_ntf::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void chat_family_public_ntf::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void chat_family_public_ntf::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void chat_family_public_ntf::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& chat_family_public_ntf::content() const {
  return *content_;
}
inline void chat_family_public_ntf::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_family_public_ntf::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_family_public_ntf::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_family_public_ntf::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* chat_family_public_ntf::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_family_public_ntf::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gender_id = 7;
inline bool chat_family_public_ntf::has_gender_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void chat_family_public_ntf::set_has_gender_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void chat_family_public_ntf::clear_has_gender_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void chat_family_public_ntf::clear_gender_id() {
  gender_id_ = 0;
  clear_has_gender_id();
}
inline ::google::protobuf::int32 chat_family_public_ntf::gender_id() const {
  return gender_id_;
}
inline void chat_family_public_ntf::set_gender_id(::google::protobuf::int32 value) {
  set_has_gender_id();
  gender_id_ = value;
}

// optional uint32 avatar_box_id = 8;
inline bool chat_family_public_ntf::has_avatar_box_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void chat_family_public_ntf::set_has_avatar_box_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void chat_family_public_ntf::clear_has_avatar_box_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void chat_family_public_ntf::clear_avatar_box_id() {
  avatar_box_id_ = 0u;
  clear_has_avatar_box_id();
}
inline ::google::protobuf::uint32 chat_family_public_ntf::avatar_box_id() const {
  return avatar_box_id_;
}
inline void chat_family_public_ntf::set_avatar_box_id(::google::protobuf::uint32 value) {
  set_has_avatar_box_id();
  avatar_box_id_ = value;
}

// optional int32 level = 9;
inline bool chat_family_public_ntf::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void chat_family_public_ntf::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void chat_family_public_ntf::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void chat_family_public_ntf::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 chat_family_public_ntf::level() const {
  return level_;
}
inline void chat_family_public_ntf::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated uint64 roles_in_family = 10;
inline int chat_family_public_ntf::roles_in_family_size() const {
  return roles_in_family_.size();
}
inline void chat_family_public_ntf::clear_roles_in_family() {
  roles_in_family_.Clear();
}
inline ::google::protobuf::uint64 chat_family_public_ntf::roles_in_family(int index) const {
  return roles_in_family_.Get(index);
}
inline void chat_family_public_ntf::set_roles_in_family(int index, ::google::protobuf::uint64 value) {
  roles_in_family_.Set(index, value);
}
inline void chat_family_public_ntf::add_roles_in_family(::google::protobuf::uint64 value) {
  roles_in_family_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
chat_family_public_ntf::roles_in_family() const {
  return roles_in_family_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
chat_family_public_ntf::mutable_roles_in_family() {
  return &roles_in_family_;
}

// optional int32 officer_grade = 11;
inline bool chat_family_public_ntf::has_officer_grade() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void chat_family_public_ntf::set_has_officer_grade() {
  _has_bits_[0] |= 0x00000400u;
}
inline void chat_family_public_ntf::clear_has_officer_grade() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void chat_family_public_ntf::clear_officer_grade() {
  officer_grade_ = 0;
  clear_has_officer_grade();
}
inline ::google::protobuf::int32 chat_family_public_ntf::officer_grade() const {
  return officer_grade_;
}
inline void chat_family_public_ntf::set_officer_grade(::google::protobuf::int32 value) {
  set_has_officer_grade();
  officer_grade_ = value;
}

// -------------------------------------------------------------------

// chat_broadcast_public_ntf

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_broadcast_public_ntf_id];
inline bool chat_broadcast_public_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_broadcast_public_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_broadcast_public_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_broadcast_public_ntf::clear_protoid() {
  protoid_ = 905;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID chat_broadcast_public_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void chat_broadcast_public_ntf::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 to_role_id = 2;
inline bool chat_broadcast_public_ntf::has_to_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_broadcast_public_ntf::set_has_to_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_broadcast_public_ntf::clear_has_to_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_broadcast_public_ntf::clear_to_role_id() {
  to_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_role_id();
}
inline ::google::protobuf::uint64 chat_broadcast_public_ntf::to_role_id() const {
  return to_role_id_;
}
inline void chat_broadcast_public_ntf::set_to_role_id(::google::protobuf::uint64 value) {
  set_has_to_role_id();
  to_role_id_ = value;
}

// optional string role_name = 3;
inline bool chat_broadcast_public_ntf::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chat_broadcast_public_ntf::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chat_broadcast_public_ntf::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chat_broadcast_public_ntf::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& chat_broadcast_public_ntf::role_name() const {
  return *role_name_;
}
inline void chat_broadcast_public_ntf::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_broadcast_public_ntf::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void chat_broadcast_public_ntf::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_broadcast_public_ntf::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* chat_broadcast_public_ntf::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_broadcast_public_ntf::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string role_avatar_url = 4;
inline bool chat_broadcast_public_ntf::has_role_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_broadcast_public_ntf::set_has_role_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_broadcast_public_ntf::clear_has_role_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_broadcast_public_ntf::clear_role_avatar_url() {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_->clear();
  }
  clear_has_role_avatar_url();
}
inline const ::std::string& chat_broadcast_public_ntf::role_avatar_url() const {
  return *role_avatar_url_;
}
inline void chat_broadcast_public_ntf::set_role_avatar_url(const ::std::string& value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_broadcast_public_ntf::set_role_avatar_url(const char* value) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(value);
}
inline void chat_broadcast_public_ntf::set_role_avatar_url(const char* value, size_t size) {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  role_avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_broadcast_public_ntf::mutable_role_avatar_url() {
  set_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    role_avatar_url_ = new ::std::string;
  }
  return role_avatar_url_;
}
inline ::std::string* chat_broadcast_public_ntf::release_role_avatar_url() {
  clear_has_role_avatar_url();
  if (role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_avatar_url_;
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_broadcast_public_ntf::set_allocated_role_avatar_url(::std::string* role_avatar_url) {
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (role_avatar_url) {
    set_has_role_avatar_url();
    role_avatar_url_ = role_avatar_url;
  } else {
    clear_has_role_avatar_url();
    role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 from_role_id = 5;
inline bool chat_broadcast_public_ntf::has_from_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void chat_broadcast_public_ntf::set_has_from_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void chat_broadcast_public_ntf::clear_has_from_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void chat_broadcast_public_ntf::clear_from_role_id() {
  from_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_role_id();
}
inline ::google::protobuf::uint64 chat_broadcast_public_ntf::from_role_id() const {
  return from_role_id_;
}
inline void chat_broadcast_public_ntf::set_from_role_id(::google::protobuf::uint64 value) {
  set_has_from_role_id();
  from_role_id_ = value;
}

// optional string content = 6;
inline bool chat_broadcast_public_ntf::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void chat_broadcast_public_ntf::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void chat_broadcast_public_ntf::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void chat_broadcast_public_ntf::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& chat_broadcast_public_ntf::content() const {
  return *content_;
}
inline void chat_broadcast_public_ntf::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_broadcast_public_ntf::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void chat_broadcast_public_ntf::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_broadcast_public_ntf::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* chat_broadcast_public_ntf::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_broadcast_public_ntf::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gender_id = 7;
inline bool chat_broadcast_public_ntf::has_gender_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void chat_broadcast_public_ntf::set_has_gender_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void chat_broadcast_public_ntf::clear_has_gender_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void chat_broadcast_public_ntf::clear_gender_id() {
  gender_id_ = 0;
  clear_has_gender_id();
}
inline ::google::protobuf::int32 chat_broadcast_public_ntf::gender_id() const {
  return gender_id_;
}
inline void chat_broadcast_public_ntf::set_gender_id(::google::protobuf::int32 value) {
  set_has_gender_id();
  gender_id_ = value;
}

// optional uint32 avatar_box_id = 8;
inline bool chat_broadcast_public_ntf::has_avatar_box_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void chat_broadcast_public_ntf::set_has_avatar_box_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void chat_broadcast_public_ntf::clear_has_avatar_box_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void chat_broadcast_public_ntf::clear_avatar_box_id() {
  avatar_box_id_ = 0u;
  clear_has_avatar_box_id();
}
inline ::google::protobuf::uint32 chat_broadcast_public_ntf::avatar_box_id() const {
  return avatar_box_id_;
}
inline void chat_broadcast_public_ntf::set_avatar_box_id(::google::protobuf::uint32 value) {
  set_has_avatar_box_id();
  avatar_box_id_ = value;
}

// optional int32 level = 9;
inline bool chat_broadcast_public_ntf::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void chat_broadcast_public_ntf::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void chat_broadcast_public_ntf::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void chat_broadcast_public_ntf::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 chat_broadcast_public_ntf::level() const {
  return level_;
}
inline void chat_broadcast_public_ntf::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 officer_grade = 10;
inline bool chat_broadcast_public_ntf::has_officer_grade() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void chat_broadcast_public_ntf::set_has_officer_grade() {
  _has_bits_[0] |= 0x00000200u;
}
inline void chat_broadcast_public_ntf::clear_has_officer_grade() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void chat_broadcast_public_ntf::clear_officer_grade() {
  officer_grade_ = 0;
  clear_has_officer_grade();
}
inline ::google::protobuf::int32 chat_broadcast_public_ntf::officer_grade() const {
  return officer_grade_;
}
inline void chat_broadcast_public_ntf::set_officer_grade(::google::protobuf::int32 value) {
  set_has_officer_grade();
  officer_grade_ = value;
}

// -------------------------------------------------------------------

// chat_world_channel_ntf_one_role

// optional uint64 role_id = 1;
inline bool chat_world_channel_ntf_one_role::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_world_channel_ntf_one_role::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_world_channel_ntf_one_role::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_world_channel_ntf_one_role::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 chat_world_channel_ntf_one_role::role_id() const {
  return role_id_;
}
inline void chat_world_channel_ntf_one_role::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 channel_id = 2;
inline bool chat_world_channel_ntf_one_role::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_world_channel_ntf_one_role::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_world_channel_ntf_one_role::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_world_channel_ntf_one_role::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 chat_world_channel_ntf_one_role::channel_id() const {
  return channel_id_;
}
inline void chat_world_channel_ntf_one_role::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// -------------------------------------------------------------------

// chat_world_channel_ntf

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_channel_ntf_id];
inline bool chat_world_channel_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_world_channel_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_world_channel_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_world_channel_ntf::clear_protoid() {
  protoid_ = 910;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID chat_world_channel_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void chat_world_channel_ntf::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.chat_world_channel_ntf_one_role roles = 2;
inline int chat_world_channel_ntf::roles_size() const {
  return roles_.size();
}
inline void chat_world_channel_ntf::clear_roles() {
  roles_.Clear();
}
inline const ::SProtoSpace::chat_world_channel_ntf_one_role& chat_world_channel_ntf::roles(int index) const {
  return roles_.Get(index);
}
inline ::SProtoSpace::chat_world_channel_ntf_one_role* chat_world_channel_ntf::mutable_roles(int index) {
  return roles_.Mutable(index);
}
inline ::SProtoSpace::chat_world_channel_ntf_one_role* chat_world_channel_ntf::add_roles() {
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chat_world_channel_ntf_one_role >&
chat_world_channel_ntf::roles() const {
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chat_world_channel_ntf_one_role >*
chat_world_channel_ntf::mutable_roles() {
  return &roles_;
}

// -------------------------------------------------------------------

// barrage_get_ss_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_get_ss_req_id];
inline bool barrage_get_ss_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void barrage_get_ss_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void barrage_get_ss_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void barrage_get_ss_req::clear_protoid() {
  protoid_ = 1820;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID barrage_get_ss_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void barrage_get_ss_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated int32 storage_id = 2;
inline int barrage_get_ss_req::storage_id_size() const {
  return storage_id_.size();
}
inline void barrage_get_ss_req::clear_storage_id() {
  storage_id_.Clear();
}
inline ::google::protobuf::int32 barrage_get_ss_req::storage_id(int index) const {
  return storage_id_.Get(index);
}
inline void barrage_get_ss_req::set_storage_id(int index, ::google::protobuf::int32 value) {
  storage_id_.Set(index, value);
}
inline void barrage_get_ss_req::add_storage_id(::google::protobuf::int32 value) {
  storage_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
barrage_get_ss_req::storage_id() const {
  return storage_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
barrage_get_ss_req::mutable_storage_id() {
  return &storage_id_;
}

// optional int32 desinty = 3;
inline bool barrage_get_ss_req::has_desinty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void barrage_get_ss_req::set_has_desinty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void barrage_get_ss_req::clear_has_desinty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void barrage_get_ss_req::clear_desinty() {
  desinty_ = 0;
  clear_has_desinty();
}
inline ::google::protobuf::int32 barrage_get_ss_req::desinty() const {
  return desinty_;
}
inline void barrage_get_ss_req::set_desinty(::google::protobuf::int32 value) {
  set_has_desinty();
  desinty_ = value;
}

// optional uint64 role_id = 4;
inline bool barrage_get_ss_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void barrage_get_ss_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void barrage_get_ss_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void barrage_get_ss_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 barrage_get_ss_req::role_id() const {
  return role_id_;
}
inline void barrage_get_ss_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 start = 5;
inline bool barrage_get_ss_req::has_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void barrage_get_ss_req::set_has_start() {
  _has_bits_[0] |= 0x00000010u;
}
inline void barrage_get_ss_req::clear_has_start() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void barrage_get_ss_req::clear_start() {
  start_ = 0;
  clear_has_start();
}
inline ::google::protobuf::int32 barrage_get_ss_req::start() const {
  return start_;
}
inline void barrage_get_ss_req::set_start(::google::protobuf::int32 value) {
  set_has_start();
  start_ = value;
}

// optional int32 end = 6;
inline bool barrage_get_ss_req::has_end() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void barrage_get_ss_req::set_has_end() {
  _has_bits_[0] |= 0x00000020u;
}
inline void barrage_get_ss_req::clear_has_end() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void barrage_get_ss_req::clear_end() {
  end_ = 0;
  clear_has_end();
}
inline ::google::protobuf::int32 barrage_get_ss_req::end() const {
  return end_;
}
inline void barrage_get_ss_req::set_end(::google::protobuf::int32 value) {
  set_has_end();
  end_ = value;
}

// -------------------------------------------------------------------

// barrage_get_ss_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_get_ss_ack_id];
inline bool barrage_get_ss_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void barrage_get_ss_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void barrage_get_ss_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void barrage_get_ss_ack::clear_protoid() {
  protoid_ = 1821;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID barrage_get_ss_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void barrage_get_ss_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 desinty = 2;
inline bool barrage_get_ss_ack::has_desinty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void barrage_get_ss_ack::set_has_desinty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void barrage_get_ss_ack::clear_has_desinty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void barrage_get_ss_ack::clear_desinty() {
  desinty_ = 0;
  clear_has_desinty();
}
inline ::google::protobuf::int32 barrage_get_ss_ack::desinty() const {
  return desinty_;
}
inline void barrage_get_ss_ack::set_desinty(::google::protobuf::int32 value) {
  set_has_desinty();
  desinty_ = value;
}

// optional .SProtoSpace.barrage_pack barrage_s = 3;
inline bool barrage_get_ss_ack::has_barrage_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void barrage_get_ss_ack::set_has_barrage_s() {
  _has_bits_[0] |= 0x00000004u;
}
inline void barrage_get_ss_ack::clear_has_barrage_s() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void barrage_get_ss_ack::clear_barrage_s() {
  if (barrage_s_ != NULL) barrage_s_->::SProtoSpace::barrage_pack::Clear();
  clear_has_barrage_s();
}
inline const ::SProtoSpace::barrage_pack& barrage_get_ss_ack::barrage_s() const {
  return barrage_s_ != NULL ? *barrage_s_ : *default_instance_->barrage_s_;
}
inline ::SProtoSpace::barrage_pack* barrage_get_ss_ack::mutable_barrage_s() {
  set_has_barrage_s();
  if (barrage_s_ == NULL) barrage_s_ = new ::SProtoSpace::barrage_pack;
  return barrage_s_;
}
inline ::SProtoSpace::barrage_pack* barrage_get_ss_ack::release_barrage_s() {
  clear_has_barrage_s();
  ::SProtoSpace::barrage_pack* temp = barrage_s_;
  barrage_s_ = NULL;
  return temp;
}
inline void barrage_get_ss_ack::set_allocated_barrage_s(::SProtoSpace::barrage_pack* barrage_s) {
  delete barrage_s_;
  barrage_s_ = barrage_s;
  if (barrage_s) {
    set_has_barrage_s();
  } else {
    clear_has_barrage_s();
  }
}

// optional uint64 role_id = 4;
inline bool barrage_get_ss_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void barrage_get_ss_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void barrage_get_ss_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void barrage_get_ss_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 barrage_get_ss_ack::role_id() const {
  return role_id_;
}
inline void barrage_get_ss_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// barrage_send_ss_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_send_ss_req_id];
inline bool barrage_send_ss_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void barrage_send_ss_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void barrage_send_ss_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void barrage_send_ss_req::clear_protoid() {
  protoid_ = 1822;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID barrage_send_ss_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void barrage_send_ss_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated int32 storage_id = 2;
inline int barrage_send_ss_req::storage_id_size() const {
  return storage_id_.size();
}
inline void barrage_send_ss_req::clear_storage_id() {
  storage_id_.Clear();
}
inline ::google::protobuf::int32 barrage_send_ss_req::storage_id(int index) const {
  return storage_id_.Get(index);
}
inline void barrage_send_ss_req::set_storage_id(int index, ::google::protobuf::int32 value) {
  storage_id_.Set(index, value);
}
inline void barrage_send_ss_req::add_storage_id(::google::protobuf::int32 value) {
  storage_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
barrage_send_ss_req::storage_id() const {
  return storage_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
barrage_send_ss_req::mutable_storage_id() {
  return &storage_id_;
}

// optional .SProtoSpace.barrage_single barrage = 3;
inline bool barrage_send_ss_req::has_barrage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void barrage_send_ss_req::set_has_barrage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void barrage_send_ss_req::clear_has_barrage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void barrage_send_ss_req::clear_barrage() {
  if (barrage_ != NULL) barrage_->::SProtoSpace::barrage_single::Clear();
  clear_has_barrage();
}
inline const ::SProtoSpace::barrage_single& barrage_send_ss_req::barrage() const {
  return barrage_ != NULL ? *barrage_ : *default_instance_->barrage_;
}
inline ::SProtoSpace::barrage_single* barrage_send_ss_req::mutable_barrage() {
  set_has_barrage();
  if (barrage_ == NULL) barrage_ = new ::SProtoSpace::barrage_single;
  return barrage_;
}
inline ::SProtoSpace::barrage_single* barrage_send_ss_req::release_barrage() {
  clear_has_barrage();
  ::SProtoSpace::barrage_single* temp = barrage_;
  barrage_ = NULL;
  return temp;
}
inline void barrage_send_ss_req::set_allocated_barrage(::SProtoSpace::barrage_single* barrage) {
  delete barrage_;
  barrage_ = barrage;
  if (barrage) {
    set_has_barrage();
  } else {
    clear_has_barrage();
  }
}

// optional uint64 role_id = 4;
inline bool barrage_send_ss_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void barrage_send_ss_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void barrage_send_ss_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void barrage_send_ss_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 barrage_send_ss_req::role_id() const {
  return role_id_;
}
inline void barrage_send_ss_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .SProtoSpace.barrage_role_info role_info = 5;
inline bool barrage_send_ss_req::has_role_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void barrage_send_ss_req::set_has_role_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void barrage_send_ss_req::clear_has_role_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void barrage_send_ss_req::clear_role_info() {
  if (role_info_ != NULL) role_info_->::SProtoSpace::barrage_role_info::Clear();
  clear_has_role_info();
}
inline const ::SProtoSpace::barrage_role_info& barrage_send_ss_req::role_info() const {
  return role_info_ != NULL ? *role_info_ : *default_instance_->role_info_;
}
inline ::SProtoSpace::barrage_role_info* barrage_send_ss_req::mutable_role_info() {
  set_has_role_info();
  if (role_info_ == NULL) role_info_ = new ::SProtoSpace::barrage_role_info;
  return role_info_;
}
inline ::SProtoSpace::barrage_role_info* barrage_send_ss_req::release_role_info() {
  clear_has_role_info();
  ::SProtoSpace::barrage_role_info* temp = role_info_;
  role_info_ = NULL;
  return temp;
}
inline void barrage_send_ss_req::set_allocated_role_info(::SProtoSpace::barrage_role_info* role_info) {
  delete role_info_;
  role_info_ = role_info;
  if (role_info) {
    set_has_role_info();
  } else {
    clear_has_role_info();
  }
}

// -------------------------------------------------------------------

// barrage_send_ss_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_send_ss_ack_id];
inline bool barrage_send_ss_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void barrage_send_ss_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void barrage_send_ss_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void barrage_send_ss_ack::clear_protoid() {
  protoid_ = 1823;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID barrage_send_ss_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void barrage_send_ss_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.MsgErrorType error = 2;
inline int barrage_send_ss_ack::error_size() const {
  return error_.size();
}
inline void barrage_send_ss_ack::clear_error() {
  error_.Clear();
}
inline ::SProtoSpace::MsgErrorType barrage_send_ss_ack::error(int index) const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_.Get(index));
}
inline void barrage_send_ss_ack::set_error(int index, ::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  error_.Set(index, value);
}
inline void barrage_send_ss_ack::add_error(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  error_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
barrage_send_ss_ack::error() const {
  return error_;
}
inline ::google::protobuf::RepeatedField<int>*
barrage_send_ss_ack::mutable_error() {
  return &error_;
}

// optional uint64 role_id = 3;
inline bool barrage_send_ss_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void barrage_send_ss_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void barrage_send_ss_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void barrage_send_ss_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 barrage_send_ss_ack::role_id() const {
  return role_id_;
}
inline void barrage_send_ss_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ss_5fchat_2eproto__INCLUDED
