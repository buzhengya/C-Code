// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cm_socialtype.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cm_socialtype.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* friend_base_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_base_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_apply_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_apply_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* give_item_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  give_item_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* tribute_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tribute_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* harem_compete_event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  harem_compete_event_reflection_ = NULL;
const ::google::protobuf::Descriptor* event_qingan_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  event_qingan_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* event_slap_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  event_slap_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* event_tribute_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  event_tribute_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* slap_emoji_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  slap_emoji_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* team_hero_slot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_hero_slot_reflection_ = NULL;
const ::google::protobuf::Descriptor* team_member_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_member_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* team_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* team_member_brief_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_member_brief_reflection_ = NULL;
const ::google::protobuf::Descriptor* team_brief_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_brief_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_item_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_item_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* emotion_base_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  emotion_base_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* emotion_like_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  emotion_like_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* emotion_comment_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  emotion_comment_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* emotion_opt_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  emotion_opt_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* emotion_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  emotion_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* show_emotion_all_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  show_emotion_all_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* label_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  label_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* barrage_role_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  barrage_role_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* barrage_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  barrage_single_reflection_ = NULL;
const ::google::protobuf::Descriptor* barrage_pack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  barrage_pack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EFriend_RETCODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EFRIEND_OPT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EFRINED_PROCESS_STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESEARCHTYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGET_FRINED_DO_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESLAPPROGRESS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EHAREMTYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EHAREMSHARETYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eWorldChatType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EmotionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBarrageDefine_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cm_5fsocialtype_2eproto() {
  protobuf_AddDesc_cm_5fsocialtype_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cm_socialtype.proto");
  GOOGLE_CHECK(file != NULL);
  friend_base_info_descriptor_ = file->message_type(0);
  static const int friend_base_info_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, intimacy_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, fight_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, paixi_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, border_),
  };
  friend_base_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_base_info_descriptor_,
      friend_base_info::default_instance_,
      friend_base_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_base_info));
  friend_apply_info_descriptor_ = file->message_type(1);
  static const int friend_apply_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_apply_info, apply_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_apply_info, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_apply_info, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_apply_info, content_),
  };
  friend_apply_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_apply_info_descriptor_,
      friend_apply_info::default_instance_,
      friend_apply_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_apply_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_apply_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_apply_info));
  give_item_info_descriptor_ = file->message_type(2);
  static const int give_item_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(give_item_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(give_item_info, giver_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(give_item_info, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(give_item_info, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(give_item_info, item_id_),
  };
  give_item_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      give_item_info_descriptor_,
      give_item_info::default_instance_,
      give_item_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(give_item_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(give_item_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(give_item_info));
  tribute_info_descriptor_ = file->message_type(3);
  static const int tribute_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tribute_info, tribute_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tribute_info, tribute_num_),
  };
  tribute_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tribute_info_descriptor_,
      tribute_info::default_instance_,
      tribute_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tribute_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tribute_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tribute_info));
  harem_compete_event_descriptor_ = file->message_type(4);
  static const int harem_compete_event_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_event, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_event, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_event, role_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_event, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_event, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_event, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_event, take_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_event, slap_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_event, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_event, self_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_event, self_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_event, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_event, tribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_event, event_uuid_),
  };
  harem_compete_event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      harem_compete_event_descriptor_,
      harem_compete_event::default_instance_,
      harem_compete_event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(harem_compete_event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(harem_compete_event));
  event_qingan_info_descriptor_ = file->message_type(5);
  static const int event_qingan_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_qingan_info, role_type_),
  };
  event_qingan_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      event_qingan_info_descriptor_,
      event_qingan_info::default_instance_,
      event_qingan_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_qingan_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_qingan_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(event_qingan_info));
  event_slap_info_descriptor_ = file->message_type(6);
  static const int event_slap_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_slap_info, role_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_slap_info, take_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_slap_info, slap_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_slap_info, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_slap_info, info_),
  };
  event_slap_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      event_slap_info_descriptor_,
      event_slap_info::default_instance_,
      event_slap_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_slap_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_slap_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(event_slap_info));
  event_tribute_info_descriptor_ = file->message_type(7);
  static const int event_tribute_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_tribute_info, role_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_tribute_info, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_tribute_info, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_tribute_info, content_),
  };
  event_tribute_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      event_tribute_info_descriptor_,
      event_tribute_info::default_instance_,
      event_tribute_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_tribute_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_tribute_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(event_tribute_info));
  slap_emoji_info_descriptor_ = file->message_type(8);
  static const int slap_emoji_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slap_emoji_info, slot_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slap_emoji_info, emoji_id_),
  };
  slap_emoji_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      slap_emoji_info_descriptor_,
      slap_emoji_info::default_instance_,
      slap_emoji_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slap_emoji_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slap_emoji_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(slap_emoji_info));
  team_hero_slot_descriptor_ = file->message_type(9);
  static const int team_hero_slot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_hero_slot, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_hero_slot, hero_),
  };
  team_hero_slot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_hero_slot_descriptor_,
      team_hero_slot::default_instance_,
      team_hero_slot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_hero_slot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_hero_slot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_hero_slot));
  team_member_data_descriptor_ = file->message_type(10);
  static const int team_member_data_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member_data, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member_data, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member_data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member_data, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member_data, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member_data, heros_),
  };
  team_member_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_member_data_descriptor_,
      team_member_data::default_instance_,
      team_member_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_member_data));
  team_data_descriptor_ = file->message_type(11);
  static const int team_data_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_data, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_data, team_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_data, team_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_data, team_perm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_data, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_data, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_data, members_),
  };
  team_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_data_descriptor_,
      team_data::default_instance_,
      team_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_data));
  team_member_brief_descriptor_ = file->message_type(12);
  static const int team_member_brief_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member_brief, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member_brief, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member_brief, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member_brief, lv_),
  };
  team_member_brief_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_member_brief_descriptor_,
      team_member_brief::default_instance_,
      team_member_brief_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member_brief, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_member_brief, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_member_brief));
  team_brief_descriptor_ = file->message_type(13);
  static const int team_brief_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_brief, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_brief, team_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_brief, team_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_brief, team_perm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_brief, tm_brief_),
  };
  team_brief_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_brief_descriptor_,
      team_brief::default_instance_,
      team_brief_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_brief, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_brief, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_brief));
  arena_item_data_descriptor_ = file->message_type(14);
  static const int arena_item_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_item_data, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_item_data, max_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_item_data, battle_data_),
  };
  arena_item_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_item_data_descriptor_,
      arena_item_data::default_instance_,
      arena_item_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_item_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_item_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_item_data));
  emotion_base_info_descriptor_ = file->message_type(15);
  static const int emotion_base_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_base_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_base_info, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_base_info, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_base_info, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_base_info, msg_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_base_info, img_urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_base_info, type_),
  };
  emotion_base_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      emotion_base_info_descriptor_,
      emotion_base_info::default_instance_,
      emotion_base_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_base_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_base_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(emotion_base_info));
  emotion_like_info_descriptor_ = file->message_type(16);
  static const int emotion_like_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_like_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_like_info, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_like_info, like_time_),
  };
  emotion_like_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      emotion_like_info_descriptor_,
      emotion_like_info::default_instance_,
      emotion_like_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_like_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_like_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(emotion_like_info));
  emotion_comment_info_descriptor_ = file->message_type(17);
  static const int emotion_comment_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_comment_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_comment_info, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_comment_info, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_comment_info, from_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_comment_info, from_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_comment_info, to_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_comment_info, to_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_comment_info, msg_content_),
  };
  emotion_comment_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      emotion_comment_info_descriptor_,
      emotion_comment_info::default_instance_,
      emotion_comment_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_comment_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_comment_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(emotion_comment_info));
  emotion_opt_info_descriptor_ = file->message_type(18);
  static const int emotion_opt_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_opt_info, like_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_opt_info, comment_num_),
  };
  emotion_opt_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      emotion_opt_info_descriptor_,
      emotion_opt_info::default_instance_,
      emotion_opt_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_opt_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_opt_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(emotion_opt_info));
  emotion_info_descriptor_ = file->message_type(19);
  static const int emotion_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_info, base_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_info, like_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_info, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_info, opt_info_),
  };
  emotion_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      emotion_info_descriptor_,
      emotion_info::default_instance_,
      emotion_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emotion_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(emotion_info));
  show_emotion_all_info_descriptor_ = file->message_type(20);
  static const int show_emotion_all_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_emotion_all_info, eminfo_),
  };
  show_emotion_all_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      show_emotion_all_info_descriptor_,
      show_emotion_all_info::default_instance_,
      show_emotion_all_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_emotion_all_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_emotion_all_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(show_emotion_all_info));
  label_info_descriptor_ = file->message_type(21);
  static const int label_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_info, label_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_info, label_config_id_),
  };
  label_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      label_info_descriptor_,
      label_info::default_instance_,
      label_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(label_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(label_info));
  barrage_role_info_descriptor_ = file->message_type(22);
  static const int barrage_role_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_role_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_role_info, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_role_info, role_lv_),
  };
  barrage_role_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      barrage_role_info_descriptor_,
      barrage_role_info::default_instance_,
      barrage_role_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_role_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_role_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(barrage_role_info));
  barrage_single_descriptor_ = file->message_type(23);
  static const int barrage_single_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_single, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_single, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_single, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_single, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_single, role_info_),
  };
  barrage_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      barrage_single_descriptor_,
      barrage_single::default_instance_,
      barrage_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(barrage_single));
  barrage_pack_descriptor_ = file->message_type(24);
  static const int barrage_pack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_pack, barrage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_pack, storage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_pack, desinty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_pack, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_pack, end_),
  };
  barrage_pack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      barrage_pack_descriptor_,
      barrage_pack::default_instance_,
      barrage_pack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_pack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_pack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(barrage_pack));
  EFriend_RETCODE_descriptor_ = file->enum_type(0);
  EFRIEND_OPT_TYPE_descriptor_ = file->enum_type(1);
  EFRINED_PROCESS_STATUS_descriptor_ = file->enum_type(2);
  ESEARCHTYPE_descriptor_ = file->enum_type(3);
  EGET_FRINED_DO_TYPE_descriptor_ = file->enum_type(4);
  ESLAPPROGRESS_descriptor_ = file->enum_type(5);
  EHAREMTYPE_descriptor_ = file->enum_type(6);
  EHAREMSHARETYPE_descriptor_ = file->enum_type(7);
  eWorldChatType_descriptor_ = file->enum_type(8);
  EmotionType_descriptor_ = file->enum_type(9);
  EBarrageDefine_descriptor_ = file->enum_type(10);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cm_5fsocialtype_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_base_info_descriptor_, &friend_base_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_apply_info_descriptor_, &friend_apply_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    give_item_info_descriptor_, &give_item_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tribute_info_descriptor_, &tribute_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    harem_compete_event_descriptor_, &harem_compete_event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    event_qingan_info_descriptor_, &event_qingan_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    event_slap_info_descriptor_, &event_slap_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    event_tribute_info_descriptor_, &event_tribute_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    slap_emoji_info_descriptor_, &slap_emoji_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_hero_slot_descriptor_, &team_hero_slot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_member_data_descriptor_, &team_member_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_data_descriptor_, &team_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_member_brief_descriptor_, &team_member_brief::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_brief_descriptor_, &team_brief::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_item_data_descriptor_, &arena_item_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    emotion_base_info_descriptor_, &emotion_base_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    emotion_like_info_descriptor_, &emotion_like_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    emotion_comment_info_descriptor_, &emotion_comment_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    emotion_opt_info_descriptor_, &emotion_opt_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    emotion_info_descriptor_, &emotion_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    show_emotion_all_info_descriptor_, &show_emotion_all_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    label_info_descriptor_, &label_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    barrage_role_info_descriptor_, &barrage_role_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    barrage_single_descriptor_, &barrage_single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    barrage_pack_descriptor_, &barrage_pack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cm_5fsocialtype_2eproto() {
  delete friend_base_info::default_instance_;
  delete friend_base_info_reflection_;
  delete friend_apply_info::default_instance_;
  delete friend_apply_info_reflection_;
  delete give_item_info::default_instance_;
  delete give_item_info_reflection_;
  delete tribute_info::default_instance_;
  delete tribute_info_reflection_;
  delete harem_compete_event::default_instance_;
  delete harem_compete_event_reflection_;
  delete event_qingan_info::default_instance_;
  delete event_qingan_info_reflection_;
  delete event_slap_info::default_instance_;
  delete event_slap_info_reflection_;
  delete event_tribute_info::default_instance_;
  delete event_tribute_info_reflection_;
  delete slap_emoji_info::default_instance_;
  delete slap_emoji_info_reflection_;
  delete team_hero_slot::default_instance_;
  delete team_hero_slot_reflection_;
  delete team_member_data::default_instance_;
  delete team_member_data_reflection_;
  delete team_data::default_instance_;
  delete team_data_reflection_;
  delete team_member_brief::default_instance_;
  delete team_member_brief_reflection_;
  delete team_brief::default_instance_;
  delete team_brief_reflection_;
  delete arena_item_data::default_instance_;
  delete arena_item_data_reflection_;
  delete emotion_base_info::default_instance_;
  delete emotion_base_info_reflection_;
  delete emotion_like_info::default_instance_;
  delete emotion_like_info_reflection_;
  delete emotion_comment_info::default_instance_;
  delete emotion_comment_info_reflection_;
  delete emotion_opt_info::default_instance_;
  delete emotion_opt_info_reflection_;
  delete emotion_info::default_instance_;
  delete emotion_info_reflection_;
  delete show_emotion_all_info::default_instance_;
  delete show_emotion_all_info_reflection_;
  delete label_info::default_instance_;
  delete label_info_reflection_;
  delete barrage_role_info::default_instance_;
  delete barrage_role_info_reflection_;
  delete barrage_single::default_instance_;
  delete barrage_single_reflection_;
  delete barrage_pack::default_instance_;
  delete barrage_pack_reflection_;
}

void protobuf_AddDesc_cm_5fsocialtype_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SProtoSpace::protobuf_AddDesc_cm_5fbattletype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5froletype_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023cm_socialtype.proto\022\013SProtoSpace\032\023cm_b"
    "attletype.proto\032\021cm_roletype.proto\"\376\001\n\020f"
    "riend_base_info\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001("
    "\t\022\n\n\002lv\030\003 \001(\r\022\022\n\nlogin_time\030\004 \001(\004\022\020\n\010pos"
    "ition\030\005 \001(\t\022\016\n\006avatar\030\006 \001(\t\022\013\n\003sex\030\007 \001(\r"
    "\022\r\n\005grade\030\010 \001(\r\022\026\n\016intimacy_value\030\t \001(\r\022"
    "\023\n\013fight_power\030\n \001(\004\022\020\n\010paixi_id\030\013 \001(\004\022\023"
    "\n\013logout_time\030\014 \001(\004\022\016\n\006online\030\r \001(\010\022\016\n\006b"
    "order\030\016 \001(\005\"v\n\021friend_apply_info\022\022\n\nappl"
    "y_time\030\001 \001(\004\022\016\n\006status\030\002 \001(\r\022,\n\005infos\030\003 "
    "\001(\0132\035.SProtoSpace.friend_base_info\022\017\n\007co"
    "ntent\030\004 \001(\t\"c\n\016give_item_info\022\014\n\004type\030\001 "
    "\001(\r\022\020\n\010giver_id\030\002 \001(\004\022\021\n\ttarget_id\030\003 \001(\004"
    "\022\r\n\005count\030\004 \001(\r\022\017\n\007item_id\030\005 \001(\r\"7\n\014trib"
    "ute_info\022\022\n\ntribute_id\030\001 \001(\r\022\023\n\013tribute_"
    "num\030\002 \001(\r\"\367\002\n\023harem_compete_event\022\014\n\004uui"
    "d\030\001 \001(\004\022\021\n\trole_name\030\002 \001(\t\022\021\n\trole_type\030"
    "\003 \001(\r\022%\n\004type\030\004 \001(\0162\027.SProtoSpace.EHAREM"
    "TYPE\022\014\n\004time\030\005 \001(\004\022\016\n\006avatar\030\006 \001(\t\022\021\n\tta"
    "ke_time\030\007 \001(\004\022\022\n\nslap_count\030\010 \001(\r\022,\n\010pro"
    "gress\030\t \001(\0162\032.SProtoSpace.ESLAPPROGRESS\022"
    "\021\n\tself_uuid\030\n \001(\004\022\021\n\tself_name\030\013 \001(\t\022*\n"
    "\004info\030\014 \003(\0132\034.SProtoSpace.slap_emoji_inf"
    "o\022,\n\007tribute\030\r \001(\0132\033.SProtoSpace.give_it"
    "em_info\022\022\n\nevent_uuid\030\016 \001(\004\"&\n\021event_qin"
    "gan_info\022\021\n\trole_type\030\006 \001(\r\"\245\001\n\017event_sl"
    "ap_info\022\021\n\trole_type\030\006 \001(\r\022\021\n\ttake_time\030"
    "\010 \001(\004\022\022\n\nslap_count\030\t \001(\r\022,\n\010progress\030\n "
    "\001(\0162\032.SProtoSpace.ESLAPPROGRESS\022*\n\004info\030"
    "\013 \003(\0132\034.SProtoSpace.slap_emoji_info\"X\n\022e"
    "vent_tribute_info\022\021\n\trole_type\030\006 \001(\r\022\017\n\007"
    "item_id\030\010 \001(\r\022\r\n\005count\030\t \001(\r\022\017\n\007content\030"
    "\n \001(\t\"7\n\017slap_emoji_info\022\022\n\nslot_index\030\001"
    " \001(\r\022\020\n\010emoji_id\030\002 \001(\r\"K\n\016team_hero_slot"
    "\022\014\n\004slot\030\001 \001(\r\022+\n\004hero\030\002 \001(\0132\035.SProtoSpa"
    "ce.battle_hero_info\"\206\001\n\020team_member_data"
    "\022\r\n\005index\030\001 \001(\r\022\016\n\006leader\030\002 \001(\010\022\n\n\002id\030\003 "
    "\001(\004\022\014\n\004name\030\004 \001(\t\022\r\n\005level\030\005 \001(\005\022*\n\005hero"
    "s\030\006 \003(\0132\033.SProtoSpace.team_hero_slot\"\373\001\n"
    "\tteam_data\022\017\n\007team_id\030\001 \001(\004\022)\n\tteam_type"
    "\030\002 \001(\0162\026.SProtoSpace.eTeamType\022)\n\tteam_s"
    "ize\030\003 \001(\0162\026.SProtoSpace.eTeamSize\022/\n\ttea"
    "m_perm\030\004 \001(\0162\034.SProtoSpace.eTeamPermissi"
    "on\022\023\n\013create_time\030\005 \001(\005\022\021\n\tteam_name\030\006 \001"
    "(\t\022.\n\007members\030\007 \003(\0132\035.SProtoSpace.team_m"
    "ember_data\"L\n\021team_member_brief\022\014\n\004slot\030"
    "\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\017\n\007head_id\030\003 \001(\r\022\n\n\002"
    "lv\030\004 \001(\r\"\326\001\n\nteam_brief\022\017\n\007team_id\030\001 \001(\004"
    "\022)\n\tteam_type\030\002 \001(\0162\026.SProtoSpace.eTeamT"
    "ype\022)\n\tteam_size\030\003 \001(\0162\026.SProtoSpace.eTe"
    "amSize\022/\n\tteam_perm\030\004 \001(\0162\034.SProtoSpace."
    "eTeamPermission\0220\n\010tm_brief\030\005 \003(\0132\036.SPro"
    "toSpace.team_member_brief\"i\n\017arena_item_"
    "data\022\017\n\007role_id\030\001 \001(\004\022\021\n\tmax_grade\030\002 \001(\005"
    "\0222\n\013battle_data\030\003 \001(\0132\035.SProtoSpace.batt"
    "le_role_info\"\251\001\n\021emotion_base_info\022\n\n\002id"
    "\030\001 \001(\004\022\023\n\013create_time\030\002 \001(\004\022\016\n\006status\030\003 "
    "\001(\r\022\024\n\014show_role_id\030\004 \001(\004\022\023\n\013msg_content"
    "\030\005 \001(\t\022\020\n\010img_urls\030\006 \003(\t\022&\n\004type\030\007 \001(\0162\030"
    ".SProtoSpace.EmotionType\"J\n\021emotion_like"
    "_info\022\017\n\007role_id\030\001 \001(\004\022\021\n\trole_name\030\002 \001("
    "\t\022\021\n\tlike_time\030\003 \001(\004\"\240\001\n\024emotion_comment"
    "_info\022\n\n\002id\030\001 \001(\004\022\023\n\013create_time\030\002 \001(\004\022\016"
    "\n\006status\030\003 \001(\r\022\017\n\007from_id\030\004 \001(\004\022\021\n\tfrom_"
    "name\030\005 \001(\t\022\r\n\005to_id\030\006 \001(\004\022\017\n\007to_name\030\007 \001"
    "(\t\022\023\n\013msg_content\030\010 \001(\t\"\?\n\020emotion_opt_i"
    "nfo\022\023\n\010like_num\030\001 \001(\005:\0010\022\026\n\013comment_num\030"
    "\002 \001(\005:\0010\"\331\001\n\014emotion_info\0221\n\tbase_info\030\001"
    " \001(\0132\036.SProtoSpace.emotion_base_info\0221\n\t"
    "like_info\030\002 \003(\0132\036.SProtoSpace.emotion_li"
    "ke_info\0222\n\007comment\030\003 \003(\0132!.SProtoSpace.e"
    "motion_comment_info\022/\n\010opt_info\030\004 \001(\0132\035."
    "SProtoSpace.emotion_opt_info\"B\n\025show_emo"
    "tion_all_info\022)\n\006eminfo\030\001 \003(\0132\031.SProtoSp"
    "ace.emotion_info\":\n\nlabel_info\022\023\n\013label_"
    "class\030\001 \001(\r\022\027\n\017label_config_id\030\002 \001(\r\"H\n\021"
    "barrage_role_info\022\017\n\007role_id\030\001 \001(\004\022\021\n\tro"
    "le_name\030\002 \001(\t\022\017\n\007role_lv\030\003 \001(\005\"\203\001\n\016barra"
    "ge_single\022\014\n\004time\030\001 \001(\002\022\017\n\007content\030\002 \001(\t"
    "\022\r\n\005color\030\003 \001(\r\022\020\n\010location\030\004 \003(\005\0221\n\trol"
    "e_info\030\n \001(\0132\036.SProtoSpace.barrage_role_"
    "info\"}\n\014barrage_pack\022,\n\007barrage\030\001 \003(\0132\033."
    "SProtoSpace.barrage_single\022\022\n\nstorage_id"
    "\030\002 \003(\005\022\017\n\007desinty\030\003 \001(\005\022\r\n\005start\030\005 \001(\005\022\013"
    "\n\003end\030\006 \001(\005*\311\004\n\017EFriend_RETCODE\022\023\n\017Frien"
    "d_RET_SUCC\020\000\022!\n\035FriendTP_RET_EXCEED_MAX_"
    "LIMIT\020\001\022\035\n\031FriendTP_RET_IN_BLACKLIST\020\002\022\036"
    "\n\032FriendTP_RET_IN_FRIENDLIST\020\003\022\033\n\027Friend"
    "TP_RET_TYPE_ERROR\020\004\022\027\n\023FriendTP_RET_UNKN"
    "OW\020\005\022\027\n\023FriendTP_RET_PATIAL\020\006\022\032\n\026FriendT"
    "P_RET_NOT_EXIST\020\007\022\034\n\030FriendTP_RET_HAS_AP"
    "PLYED\020\010\022\031\n\025FriendTP_RET_OPT_SELF\020\t\022\035\n\031Fr"
    "iendTP_RET_BEEN_APPLYED\020\n\022#\n\037FriendTP_RE"
    "T_IN_OTHER_BLACKLIST\020\013\022\034\n\030FriendTP_RET_I"
    "N_APPLYING\020\014\022 \n\034FriendTP_RET_APPLY_MAX_L"
    "IMIT\020\r\022\037\n\033FriendTP_RET_HAS_BEEN_GIVED\020\016\022"
    "\035\n\031GIVE_ERRCODE_INTER_FRIEND\020\017\022\032\n\026GIVE_E"
    "RRCODE_MAX_LIMIT\020\020\022\032\n\026GIVE_ERRCODE_HAS_G"
    "IVED\020\021\022\037\n\033FriendTP_RET_HIGH_FREQUENCY\020\022*"
    "\336\001\n\020EFRIEND_OPT_TYPE\022\027\n\023Friend_OPT_TP_AG"
    "REE\020\001\022\030\n\024Friend_OPT_TP_REFUSE\020\002\022\037\n\033FRIEN"
    "D_OPT_TP_REMOVE_FRIEND\020\003\022\036\n\032FRIEND_OPT_T"
    "P_REMOVE_BLACK\020\004\022\034\n\030FRIEND_OPT_TP_GET_FR"
    "IEND\020\005\022\037\n\033FRIEND_OPT_TP_GET_BLACKLIST\020\006\022"
    "\027\n\023Friend_OPT_TP_APPLY\020\007*\202\001\n\026EFRINED_PRO"
    "CESS_STATUS\022\033\n\027FRINED_PROCESS_APPLYING\020\000"
    "\022\030\n\024FRINED_PROCESS_AGREE\020\001\022\031\n\025FRINED_PRO"
    "CESS_REFUSE\020\002\022\026\n\022FRINED_PROCESS_END\020\003*8\n"
    "\013ESEARCHTYPE\022\023\n\017SEARCH_TYPE_UID\020\000\022\024\n\020SEA"
    "RCH_TYPE_NAME\020\001*R\n\023EGET_FRINED_DO_TYPE\022\022"
    "\n\016Friend_Refresh\020\000\022\023\n\017Friend_Greeting\020\001\022"
    "\022\n\016Friend_Tribute\020\002*a\n\rESLAPPROGRESS\022\r\n\t"
    "SLAP_NONE\020\001\022\025\n\021SLAP_FACE_SWOLLEN\020\002\022\020\n\014SL"
    "AP_STAMMER\020\003\022\030\n\024SLAP_PROHIBIT_TALK10\020\004*L"
    "\n\nEHAREMTYPE\022\021\n\rHAREM_TP_SLAP\020\001\022\025\n\021HAREM"
    "_TP_GREETING\020\002\022\024\n\020HAREM_TP_TRIBUTE\020\003*_\n\017"
    "EHAREMSHARETYPE\022\027\n\023HAREM_SHARE_TP_CHAT\020\000"
    "\022\031\n\025HAREM_SHARE_TP_WECHAT\020\001\022\030\n\024HAREM_SHA"
    "RE_TP_OTHER\020\002*U\n\016eWorldChatType\022\025\n\021WORLD"
    "_CHAT_COMMON\020\000\022\024\n\020WORLD_CHAT_HAREM\020\001\022\026\n\022"
    "WORLD_CHAT_OFFICER\020\002*;\n\013EmotionType\022\025\n\021E"
    "motion_TP_Person\020\000\022\025\n\021Emotion_TP_System\020"
    "\001*\225\001\n\016EBarrageDefine\022\031\n\025EBARRAGE_SEGMENT"
    "_SIZE\020\005\022\034\n\027EBARRAGE_REQ_MAX_DESITY\020\364\003\022\"\n"
    "\036EBARRAGE_STRORAGE_ID_MAX_STACK\020\005\022\"\n\036EBA"
    "RRAGE_LOCATION_ID_MAX_STACK\020\003\032\002\020\001", 5033);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cm_socialtype.proto", &protobuf_RegisterTypes);
  friend_base_info::default_instance_ = new friend_base_info();
  friend_apply_info::default_instance_ = new friend_apply_info();
  give_item_info::default_instance_ = new give_item_info();
  tribute_info::default_instance_ = new tribute_info();
  harem_compete_event::default_instance_ = new harem_compete_event();
  event_qingan_info::default_instance_ = new event_qingan_info();
  event_slap_info::default_instance_ = new event_slap_info();
  event_tribute_info::default_instance_ = new event_tribute_info();
  slap_emoji_info::default_instance_ = new slap_emoji_info();
  team_hero_slot::default_instance_ = new team_hero_slot();
  team_member_data::default_instance_ = new team_member_data();
  team_data::default_instance_ = new team_data();
  team_member_brief::default_instance_ = new team_member_brief();
  team_brief::default_instance_ = new team_brief();
  arena_item_data::default_instance_ = new arena_item_data();
  emotion_base_info::default_instance_ = new emotion_base_info();
  emotion_like_info::default_instance_ = new emotion_like_info();
  emotion_comment_info::default_instance_ = new emotion_comment_info();
  emotion_opt_info::default_instance_ = new emotion_opt_info();
  emotion_info::default_instance_ = new emotion_info();
  show_emotion_all_info::default_instance_ = new show_emotion_all_info();
  label_info::default_instance_ = new label_info();
  barrage_role_info::default_instance_ = new barrage_role_info();
  barrage_single::default_instance_ = new barrage_single();
  barrage_pack::default_instance_ = new barrage_pack();
  friend_base_info::default_instance_->InitAsDefaultInstance();
  friend_apply_info::default_instance_->InitAsDefaultInstance();
  give_item_info::default_instance_->InitAsDefaultInstance();
  tribute_info::default_instance_->InitAsDefaultInstance();
  harem_compete_event::default_instance_->InitAsDefaultInstance();
  event_qingan_info::default_instance_->InitAsDefaultInstance();
  event_slap_info::default_instance_->InitAsDefaultInstance();
  event_tribute_info::default_instance_->InitAsDefaultInstance();
  slap_emoji_info::default_instance_->InitAsDefaultInstance();
  team_hero_slot::default_instance_->InitAsDefaultInstance();
  team_member_data::default_instance_->InitAsDefaultInstance();
  team_data::default_instance_->InitAsDefaultInstance();
  team_member_brief::default_instance_->InitAsDefaultInstance();
  team_brief::default_instance_->InitAsDefaultInstance();
  arena_item_data::default_instance_->InitAsDefaultInstance();
  emotion_base_info::default_instance_->InitAsDefaultInstance();
  emotion_like_info::default_instance_->InitAsDefaultInstance();
  emotion_comment_info::default_instance_->InitAsDefaultInstance();
  emotion_opt_info::default_instance_->InitAsDefaultInstance();
  emotion_info::default_instance_->InitAsDefaultInstance();
  show_emotion_all_info::default_instance_->InitAsDefaultInstance();
  label_info::default_instance_->InitAsDefaultInstance();
  barrage_role_info::default_instance_->InitAsDefaultInstance();
  barrage_single::default_instance_->InitAsDefaultInstance();
  barrage_pack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cm_5fsocialtype_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cm_5fsocialtype_2eproto {
  StaticDescriptorInitializer_cm_5fsocialtype_2eproto() {
    protobuf_AddDesc_cm_5fsocialtype_2eproto();
  }
} static_descriptor_initializer_cm_5fsocialtype_2eproto_;
const ::google::protobuf::EnumDescriptor* EFriend_RETCODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFriend_RETCODE_descriptor_;
}
bool EFriend_RETCODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EFRIEND_OPT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFRIEND_OPT_TYPE_descriptor_;
}
bool EFRIEND_OPT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EFRINED_PROCESS_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFRINED_PROCESS_STATUS_descriptor_;
}
bool EFRINED_PROCESS_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESEARCHTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESEARCHTYPE_descriptor_;
}
bool ESEARCHTYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGET_FRINED_DO_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGET_FRINED_DO_TYPE_descriptor_;
}
bool EGET_FRINED_DO_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESLAPPROGRESS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESLAPPROGRESS_descriptor_;
}
bool ESLAPPROGRESS_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EHAREMTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EHAREMTYPE_descriptor_;
}
bool EHAREMTYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EHAREMSHARETYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EHAREMSHARETYPE_descriptor_;
}
bool EHAREMSHARETYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eWorldChatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eWorldChatType_descriptor_;
}
bool eWorldChatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EmotionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmotionType_descriptor_;
}
bool EmotionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBarrageDefine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBarrageDefine_descriptor_;
}
bool EBarrageDefine_IsValid(int value) {
  switch(value) {
    case 3:
    case 5:
    case 500:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int friend_base_info::kIdFieldNumber;
const int friend_base_info::kNameFieldNumber;
const int friend_base_info::kLvFieldNumber;
const int friend_base_info::kLoginTimeFieldNumber;
const int friend_base_info::kPositionFieldNumber;
const int friend_base_info::kAvatarFieldNumber;
const int friend_base_info::kSexFieldNumber;
const int friend_base_info::kGradeFieldNumber;
const int friend_base_info::kIntimacyValueFieldNumber;
const int friend_base_info::kFightPowerFieldNumber;
const int friend_base_info::kPaixiIdFieldNumber;
const int friend_base_info::kLogoutTimeFieldNumber;
const int friend_base_info::kOnlineFieldNumber;
const int friend_base_info::kBorderFieldNumber;
#endif  // !_MSC_VER

friend_base_info::friend_base_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_base_info::InitAsDefaultInstance() {
}

friend_base_info::friend_base_info(const friend_base_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_base_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0u;
  login_time_ = GOOGLE_ULONGLONG(0);
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0u;
  grade_ = 0u;
  intimacy_value_ = 0u;
  fight_power_ = GOOGLE_ULONGLONG(0);
  paixi_id_ = GOOGLE_ULONGLONG(0);
  logout_time_ = GOOGLE_ULONGLONG(0);
  online_ = false;
  border_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_base_info::~friend_base_info() {
  SharedDtor();
}

void friend_base_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (position_ != &::google::protobuf::internal::kEmptyString) {
    delete position_;
  }
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (this != default_instance_) {
  }
}

void friend_base_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_base_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_base_info_descriptor_;
}

const friend_base_info& friend_base_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

friend_base_info* friend_base_info::default_instance_ = NULL;

friend_base_info* friend_base_info::New() const {
  return new friend_base_info;
}

void friend_base_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    lv_ = 0u;
    login_time_ = GOOGLE_ULONGLONG(0);
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::kEmptyString) {
        position_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::kEmptyString) {
        avatar_->clear();
      }
    }
    sex_ = 0u;
    grade_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    intimacy_value_ = 0u;
    fight_power_ = GOOGLE_ULONGLONG(0);
    paixi_id_ = GOOGLE_ULONGLONG(0);
    logout_time_ = GOOGLE_ULONGLONG(0);
    online_ = false;
    border_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_base_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_login_time;
        break;
      }

      // optional uint64 login_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &login_time_)));
          set_has_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_position;
        break;
      }

      // optional string position = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->position().data(), this->position().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_avatar;
        break;
      }

      // optional string avatar = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_intimacy_value;
        break;
      }

      // optional uint32 intimacy_value = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intimacy_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intimacy_value_)));
          set_has_intimacy_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fight_power;
        break;
      }

      // optional uint64 fight_power = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_paixi_id;
        break;
      }

      // optional uint64 paixi_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paixi_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &paixi_id_)));
          set_has_paixi_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_logout_time;
        break;
      }

      // optional uint64 logout_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logout_time_)));
          set_has_logout_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_online;
        break;
      }

      // optional bool online = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_border;
        break;
      }

      // optional int32 border = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_border:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &border_)));
          set_has_border();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_base_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lv(), output);
  }

  // optional uint64 login_time = 4;
  if (has_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->login_time(), output);
  }

  // optional string position = 5;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->position(), output);
  }

  // optional string avatar = 6;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->avatar(), output);
  }

  // optional uint32 sex = 7;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sex(), output);
  }

  // optional uint32 grade = 8;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->grade(), output);
  }

  // optional uint32 intimacy_value = 9;
  if (has_intimacy_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->intimacy_value(), output);
  }

  // optional uint64 fight_power = 10;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->fight_power(), output);
  }

  // optional uint64 paixi_id = 11;
  if (has_paixi_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->paixi_id(), output);
  }

  // optional uint64 logout_time = 12;
  if (has_logout_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->logout_time(), output);
  }

  // optional bool online = 13;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->online(), output);
  }

  // optional int32 border = 14;
  if (has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->border(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_base_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lv(), target);
  }

  // optional uint64 login_time = 4;
  if (has_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->login_time(), target);
  }

  // optional string position = 5;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->position(), target);
  }

  // optional string avatar = 6;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->avatar(), target);
  }

  // optional uint32 sex = 7;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sex(), target);
  }

  // optional uint32 grade = 8;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->grade(), target);
  }

  // optional uint32 intimacy_value = 9;
  if (has_intimacy_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->intimacy_value(), target);
  }

  // optional uint64 fight_power = 10;
  if (has_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->fight_power(), target);
  }

  // optional uint64 paixi_id = 11;
  if (has_paixi_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->paixi_id(), target);
  }

  // optional uint64 logout_time = 12;
  if (has_logout_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->logout_time(), target);
  }

  // optional bool online = 13;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->online(), target);
  }

  // optional int32 border = 14;
  if (has_border()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->border(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_base_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint64 login_time = 4;
    if (has_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->login_time());
    }

    // optional string position = 5;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

    // optional string avatar = 6;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // optional uint32 sex = 7;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 grade = 8;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 intimacy_value = 9;
    if (has_intimacy_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intimacy_value());
    }

    // optional uint64 fight_power = 10;
    if (has_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight_power());
    }

    // optional uint64 paixi_id = 11;
    if (has_paixi_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->paixi_id());
    }

    // optional uint64 logout_time = 12;
    if (has_logout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logout_time());
    }

    // optional bool online = 13;
    if (has_online()) {
      total_size += 1 + 1;
    }

    // optional int32 border = 14;
    if (has_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->border());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_base_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_base_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_base_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_base_info::MergeFrom(const friend_base_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_login_time()) {
      set_login_time(from.login_time());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_intimacy_value()) {
      set_intimacy_value(from.intimacy_value());
    }
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
    if (from.has_paixi_id()) {
      set_paixi_id(from.paixi_id());
    }
    if (from.has_logout_time()) {
      set_logout_time(from.logout_time());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_border()) {
      set_border(from.border());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_base_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_base_info::CopyFrom(const friend_base_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_base_info::IsInitialized() const {

  return true;
}

void friend_base_info::Swap(friend_base_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(lv_, other->lv_);
    std::swap(login_time_, other->login_time_);
    std::swap(position_, other->position_);
    std::swap(avatar_, other->avatar_);
    std::swap(sex_, other->sex_);
    std::swap(grade_, other->grade_);
    std::swap(intimacy_value_, other->intimacy_value_);
    std::swap(fight_power_, other->fight_power_);
    std::swap(paixi_id_, other->paixi_id_);
    std::swap(logout_time_, other->logout_time_);
    std::swap(online_, other->online_);
    std::swap(border_, other->border_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_base_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_base_info_descriptor_;
  metadata.reflection = friend_base_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_apply_info::kApplyTimeFieldNumber;
const int friend_apply_info::kStatusFieldNumber;
const int friend_apply_info::kInfosFieldNumber;
const int friend_apply_info::kContentFieldNumber;
#endif  // !_MSC_VER

friend_apply_info::friend_apply_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_apply_info::InitAsDefaultInstance() {
  infos_ = const_cast< ::SProtoSpace::friend_base_info*>(&::SProtoSpace::friend_base_info::default_instance());
}

friend_apply_info::friend_apply_info(const friend_apply_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_apply_info::SharedCtor() {
  _cached_size_ = 0;
  apply_time_ = GOOGLE_ULONGLONG(0);
  status_ = 0u;
  infos_ = NULL;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_apply_info::~friend_apply_info() {
  SharedDtor();
}

void friend_apply_info::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete infos_;
  }
}

void friend_apply_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_apply_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_apply_info_descriptor_;
}

const friend_apply_info& friend_apply_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

friend_apply_info* friend_apply_info::default_instance_ = NULL;

friend_apply_info* friend_apply_info::New() const {
  return new friend_apply_info;
}

void friend_apply_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    apply_time_ = GOOGLE_ULONGLONG(0);
    status_ = 0u;
    if (has_infos()) {
      if (infos_ != NULL) infos_->::SProtoSpace::friend_base_info::Clear();
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_apply_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 apply_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_time_)));
          set_has_apply_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        break;
      }

      // optional .SProtoSpace.friend_base_info infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_apply_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 apply_time = 1;
  if (has_apply_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->apply_time(), output);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // optional .SProtoSpace.friend_base_info infos = 3;
  if (has_infos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infos(), output);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_apply_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 apply_time = 1;
  if (has_apply_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->apply_time(), target);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // optional .SProtoSpace.friend_base_info infos = 3;
  if (has_infos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infos(), target);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_apply_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 apply_time = 1;
    if (has_apply_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_time());
    }

    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional .SProtoSpace.friend_base_info infos = 3;
    if (has_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos());
    }

    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_apply_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_apply_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_apply_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_apply_info::MergeFrom(const friend_apply_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apply_time()) {
      set_apply_time(from.apply_time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_infos()) {
      mutable_infos()->::SProtoSpace::friend_base_info::MergeFrom(from.infos());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_apply_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_apply_info::CopyFrom(const friend_apply_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_apply_info::IsInitialized() const {

  return true;
}

void friend_apply_info::Swap(friend_apply_info* other) {
  if (other != this) {
    std::swap(apply_time_, other->apply_time_);
    std::swap(status_, other->status_);
    std::swap(infos_, other->infos_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_apply_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_apply_info_descriptor_;
  metadata.reflection = friend_apply_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int give_item_info::kTypeFieldNumber;
const int give_item_info::kGiverIdFieldNumber;
const int give_item_info::kTargetIdFieldNumber;
const int give_item_info::kCountFieldNumber;
const int give_item_info::kItemIdFieldNumber;
#endif  // !_MSC_VER

give_item_info::give_item_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void give_item_info::InitAsDefaultInstance() {
}

give_item_info::give_item_info(const give_item_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void give_item_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  giver_id_ = GOOGLE_ULONGLONG(0);
  target_id_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  item_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

give_item_info::~give_item_info() {
  SharedDtor();
}

void give_item_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void give_item_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* give_item_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return give_item_info_descriptor_;
}

const give_item_info& give_item_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

give_item_info* give_item_info::default_instance_ = NULL;

give_item_info* give_item_info::New() const {
  return new give_item_info;
}

void give_item_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    giver_id_ = GOOGLE_ULONGLONG(0);
    target_id_ = GOOGLE_ULONGLONG(0);
    count_ = 0u;
    item_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool give_item_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_giver_id;
        break;
      }

      // optional uint64 giver_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giver_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &giver_id_)));
          set_has_giver_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional uint32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void give_item_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint64 giver_id = 2;
  if (has_giver_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->giver_id(), output);
  }

  // optional uint64 target_id = 3;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->target_id(), output);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  // optional uint32 item_id = 5;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* give_item_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint64 giver_id = 2;
  if (has_giver_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->giver_id(), target);
  }

  // optional uint64 target_id = 3;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->target_id(), target);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  // optional uint32 item_id = 5;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int give_item_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 giver_id = 2;
    if (has_giver_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->giver_id());
    }

    // optional uint64 target_id = 3;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 item_id = 5;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void give_item_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const give_item_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const give_item_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void give_item_info::MergeFrom(const give_item_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_giver_id()) {
      set_giver_id(from.giver_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void give_item_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void give_item_info::CopyFrom(const give_item_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool give_item_info::IsInitialized() const {

  return true;
}

void give_item_info::Swap(give_item_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(giver_id_, other->giver_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(count_, other->count_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata give_item_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = give_item_info_descriptor_;
  metadata.reflection = give_item_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tribute_info::kTributeIdFieldNumber;
const int tribute_info::kTributeNumFieldNumber;
#endif  // !_MSC_VER

tribute_info::tribute_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tribute_info::InitAsDefaultInstance() {
}

tribute_info::tribute_info(const tribute_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tribute_info::SharedCtor() {
  _cached_size_ = 0;
  tribute_id_ = 0u;
  tribute_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tribute_info::~tribute_info() {
  SharedDtor();
}

void tribute_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tribute_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tribute_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tribute_info_descriptor_;
}

const tribute_info& tribute_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

tribute_info* tribute_info::default_instance_ = NULL;

tribute_info* tribute_info::New() const {
  return new tribute_info;
}

void tribute_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tribute_id_ = 0u;
    tribute_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tribute_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tribute_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tribute_id_)));
          set_has_tribute_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tribute_num;
        break;
      }

      // optional uint32 tribute_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tribute_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tribute_num_)));
          set_has_tribute_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tribute_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tribute_id = 1;
  if (has_tribute_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tribute_id(), output);
  }

  // optional uint32 tribute_num = 2;
  if (has_tribute_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tribute_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tribute_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tribute_id = 1;
  if (has_tribute_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tribute_id(), target);
  }

  // optional uint32 tribute_num = 2;
  if (has_tribute_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tribute_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tribute_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tribute_id = 1;
    if (has_tribute_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tribute_id());
    }

    // optional uint32 tribute_num = 2;
    if (has_tribute_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tribute_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tribute_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tribute_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tribute_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tribute_info::MergeFrom(const tribute_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tribute_id()) {
      set_tribute_id(from.tribute_id());
    }
    if (from.has_tribute_num()) {
      set_tribute_num(from.tribute_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tribute_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tribute_info::CopyFrom(const tribute_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tribute_info::IsInitialized() const {

  return true;
}

void tribute_info::Swap(tribute_info* other) {
  if (other != this) {
    std::swap(tribute_id_, other->tribute_id_);
    std::swap(tribute_num_, other->tribute_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tribute_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tribute_info_descriptor_;
  metadata.reflection = tribute_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int harem_compete_event::kUuidFieldNumber;
const int harem_compete_event::kRoleNameFieldNumber;
const int harem_compete_event::kRoleTypeFieldNumber;
const int harem_compete_event::kTypeFieldNumber;
const int harem_compete_event::kTimeFieldNumber;
const int harem_compete_event::kAvatarFieldNumber;
const int harem_compete_event::kTakeTimeFieldNumber;
const int harem_compete_event::kSlapCountFieldNumber;
const int harem_compete_event::kProgressFieldNumber;
const int harem_compete_event::kSelfUuidFieldNumber;
const int harem_compete_event::kSelfNameFieldNumber;
const int harem_compete_event::kInfoFieldNumber;
const int harem_compete_event::kTributeFieldNumber;
const int harem_compete_event::kEventUuidFieldNumber;
#endif  // !_MSC_VER

harem_compete_event::harem_compete_event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void harem_compete_event::InitAsDefaultInstance() {
  tribute_ = const_cast< ::SProtoSpace::give_item_info*>(&::SProtoSpace::give_item_info::default_instance());
}

harem_compete_event::harem_compete_event(const harem_compete_event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void harem_compete_event::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_type_ = 0u;
  type_ = 1;
  time_ = GOOGLE_ULONGLONG(0);
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  take_time_ = GOOGLE_ULONGLONG(0);
  slap_count_ = 0u;
  progress_ = 1;
  self_uuid_ = GOOGLE_ULONGLONG(0);
  self_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tribute_ = NULL;
  event_uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

harem_compete_event::~harem_compete_event() {
  SharedDtor();
}

void harem_compete_event::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (self_name_ != &::google::protobuf::internal::kEmptyString) {
    delete self_name_;
  }
  if (this != default_instance_) {
    delete tribute_;
  }
}

void harem_compete_event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* harem_compete_event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return harem_compete_event_descriptor_;
}

const harem_compete_event& harem_compete_event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

harem_compete_event* harem_compete_event::default_instance_ = NULL;

harem_compete_event* harem_compete_event::New() const {
  return new harem_compete_event;
}

void harem_compete_event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    role_type_ = 0u;
    type_ = 1;
    time_ = GOOGLE_ULONGLONG(0);
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::kEmptyString) {
        avatar_->clear();
      }
    }
    take_time_ = GOOGLE_ULONGLONG(0);
    slap_count_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    progress_ = 1;
    self_uuid_ = GOOGLE_ULONGLONG(0);
    if (has_self_name()) {
      if (self_name_ != &::google::protobuf::internal::kEmptyString) {
        self_name_->clear();
      }
    }
    if (has_tribute()) {
      if (tribute_ != NULL) tribute_->::SProtoSpace::give_item_info::Clear();
    }
    event_uuid_ = GOOGLE_ULONGLONG(0);
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool harem_compete_event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_type;
        break;
      }

      // optional uint32 role_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_type_)));
          set_has_role_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.EHAREMTYPE type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EHAREMTYPE_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EHAREMTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint64 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_avatar;
        break;
      }

      // optional string avatar = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_take_time;
        break;
      }

      // optional uint64 take_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_take_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &take_time_)));
          set_has_take_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_slap_count;
        break;
      }

      // optional uint32 slap_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slap_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slap_count_)));
          set_has_slap_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_progress;
        break;
      }

      // optional .SProtoSpace.ESLAPPROGRESS progress = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESLAPPROGRESS_IsValid(value)) {
            set_progress(static_cast< ::SProtoSpace::ESLAPPROGRESS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_self_uuid;
        break;
      }

      // optional uint64 self_uuid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &self_uuid_)));
          set_has_self_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_self_name;
        break;
      }

      // optional string self_name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_self_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->self_name().data(), this->self_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_info;
        break;
      }

      // repeated .SProtoSpace.slap_emoji_info info = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_info;
        if (input->ExpectTag(106)) goto parse_tribute;
        break;
      }

      // optional .SProtoSpace.give_item_info tribute = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_event_uuid;
        break;
      }

      // optional uint64 event_uuid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_uuid_)));
          set_has_event_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void harem_compete_event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // optional uint32 role_type = 3;
  if (has_role_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_type(), output);
  }

  // optional .SProtoSpace.EHAREMTYPE type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional uint64 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time(), output);
  }

  // optional string avatar = 6;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->avatar(), output);
  }

  // optional uint64 take_time = 7;
  if (has_take_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->take_time(), output);
  }

  // optional uint32 slap_count = 8;
  if (has_slap_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->slap_count(), output);
  }

  // optional .SProtoSpace.ESLAPPROGRESS progress = 9;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->progress(), output);
  }

  // optional uint64 self_uuid = 10;
  if (has_self_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->self_uuid(), output);
  }

  // optional string self_name = 11;
  if (has_self_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->self_name().data(), this->self_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->self_name(), output);
  }

  // repeated .SProtoSpace.slap_emoji_info info = 12;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->info(i), output);
  }

  // optional .SProtoSpace.give_item_info tribute = 13;
  if (has_tribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->tribute(), output);
  }

  // optional uint64 event_uuid = 14;
  if (has_event_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->event_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* harem_compete_event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // optional uint32 role_type = 3;
  if (has_role_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_type(), target);
  }

  // optional .SProtoSpace.EHAREMTYPE type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional uint64 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time(), target);
  }

  // optional string avatar = 6;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->avatar(), target);
  }

  // optional uint64 take_time = 7;
  if (has_take_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->take_time(), target);
  }

  // optional uint32 slap_count = 8;
  if (has_slap_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->slap_count(), target);
  }

  // optional .SProtoSpace.ESLAPPROGRESS progress = 9;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->progress(), target);
  }

  // optional uint64 self_uuid = 10;
  if (has_self_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->self_uuid(), target);
  }

  // optional string self_name = 11;
  if (has_self_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->self_name().data(), this->self_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->self_name(), target);
  }

  // repeated .SProtoSpace.slap_emoji_info info = 12;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->info(i), target);
  }

  // optional .SProtoSpace.give_item_info tribute = 13;
  if (has_tribute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->tribute(), target);
  }

  // optional uint64 event_uuid = 14;
  if (has_event_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->event_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int harem_compete_event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint32 role_type = 3;
    if (has_role_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_type());
    }

    // optional .SProtoSpace.EHAREMTYPE type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional string avatar = 6;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // optional uint64 take_time = 7;
    if (has_take_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->take_time());
    }

    // optional uint32 slap_count = 8;
    if (has_slap_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slap_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .SProtoSpace.ESLAPPROGRESS progress = 9;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->progress());
    }

    // optional uint64 self_uuid = 10;
    if (has_self_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->self_uuid());
    }

    // optional string self_name = 11;
    if (has_self_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->self_name());
    }

    // optional .SProtoSpace.give_item_info tribute = 13;
    if (has_tribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tribute());
    }

    // optional uint64 event_uuid = 14;
    if (has_event_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_uuid());
    }

  }
  // repeated .SProtoSpace.slap_emoji_info info = 12;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void harem_compete_event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const harem_compete_event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const harem_compete_event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void harem_compete_event::MergeFrom(const harem_compete_event& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_type()) {
      set_role_type(from.role_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_take_time()) {
      set_take_time(from.take_time());
    }
    if (from.has_slap_count()) {
      set_slap_count(from.slap_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_self_uuid()) {
      set_self_uuid(from.self_uuid());
    }
    if (from.has_self_name()) {
      set_self_name(from.self_name());
    }
    if (from.has_tribute()) {
      mutable_tribute()->::SProtoSpace::give_item_info::MergeFrom(from.tribute());
    }
    if (from.has_event_uuid()) {
      set_event_uuid(from.event_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void harem_compete_event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void harem_compete_event::CopyFrom(const harem_compete_event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool harem_compete_event::IsInitialized() const {

  return true;
}

void harem_compete_event::Swap(harem_compete_event* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_type_, other->role_type_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(avatar_, other->avatar_);
    std::swap(take_time_, other->take_time_);
    std::swap(slap_count_, other->slap_count_);
    std::swap(progress_, other->progress_);
    std::swap(self_uuid_, other->self_uuid_);
    std::swap(self_name_, other->self_name_);
    info_.Swap(&other->info_);
    std::swap(tribute_, other->tribute_);
    std::swap(event_uuid_, other->event_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata harem_compete_event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = harem_compete_event_descriptor_;
  metadata.reflection = harem_compete_event_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int event_qingan_info::kRoleTypeFieldNumber;
#endif  // !_MSC_VER

event_qingan_info::event_qingan_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void event_qingan_info::InitAsDefaultInstance() {
}

event_qingan_info::event_qingan_info(const event_qingan_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void event_qingan_info::SharedCtor() {
  _cached_size_ = 0;
  role_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

event_qingan_info::~event_qingan_info() {
  SharedDtor();
}

void event_qingan_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void event_qingan_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* event_qingan_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return event_qingan_info_descriptor_;
}

const event_qingan_info& event_qingan_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

event_qingan_info* event_qingan_info::default_instance_ = NULL;

event_qingan_info* event_qingan_info::New() const {
  return new event_qingan_info;
}

void event_qingan_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool event_qingan_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_type_)));
          set_has_role_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void event_qingan_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_type = 6;
  if (has_role_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->role_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* event_qingan_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_type = 6;
  if (has_role_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->role_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int event_qingan_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_type = 6;
    if (has_role_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void event_qingan_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const event_qingan_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const event_qingan_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void event_qingan_info::MergeFrom(const event_qingan_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_type()) {
      set_role_type(from.role_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void event_qingan_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void event_qingan_info::CopyFrom(const event_qingan_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_qingan_info::IsInitialized() const {

  return true;
}

void event_qingan_info::Swap(event_qingan_info* other) {
  if (other != this) {
    std::swap(role_type_, other->role_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata event_qingan_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = event_qingan_info_descriptor_;
  metadata.reflection = event_qingan_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int event_slap_info::kRoleTypeFieldNumber;
const int event_slap_info::kTakeTimeFieldNumber;
const int event_slap_info::kSlapCountFieldNumber;
const int event_slap_info::kProgressFieldNumber;
const int event_slap_info::kInfoFieldNumber;
#endif  // !_MSC_VER

event_slap_info::event_slap_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void event_slap_info::InitAsDefaultInstance() {
}

event_slap_info::event_slap_info(const event_slap_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void event_slap_info::SharedCtor() {
  _cached_size_ = 0;
  role_type_ = 0u;
  take_time_ = GOOGLE_ULONGLONG(0);
  slap_count_ = 0u;
  progress_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

event_slap_info::~event_slap_info() {
  SharedDtor();
}

void event_slap_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void event_slap_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* event_slap_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return event_slap_info_descriptor_;
}

const event_slap_info& event_slap_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

event_slap_info* event_slap_info::default_instance_ = NULL;

event_slap_info* event_slap_info::New() const {
  return new event_slap_info;
}

void event_slap_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_type_ = 0u;
    take_time_ = GOOGLE_ULONGLONG(0);
    slap_count_ = 0u;
    progress_ = 1;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool event_slap_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_type_)));
          set_has_role_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_take_time;
        break;
      }

      // optional uint64 take_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_take_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &take_time_)));
          set_has_take_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_slap_count;
        break;
      }

      // optional uint32 slap_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slap_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slap_count_)));
          set_has_slap_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_progress;
        break;
      }

      // optional .SProtoSpace.ESLAPPROGRESS progress = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESLAPPROGRESS_IsValid(value)) {
            set_progress(static_cast< ::SProtoSpace::ESLAPPROGRESS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_info;
        break;
      }

      // repeated .SProtoSpace.slap_emoji_info info = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void event_slap_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_type = 6;
  if (has_role_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->role_type(), output);
  }

  // optional uint64 take_time = 8;
  if (has_take_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->take_time(), output);
  }

  // optional uint32 slap_count = 9;
  if (has_slap_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->slap_count(), output);
  }

  // optional .SProtoSpace.ESLAPPROGRESS progress = 10;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->progress(), output);
  }

  // repeated .SProtoSpace.slap_emoji_info info = 11;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* event_slap_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_type = 6;
  if (has_role_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->role_type(), target);
  }

  // optional uint64 take_time = 8;
  if (has_take_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->take_time(), target);
  }

  // optional uint32 slap_count = 9;
  if (has_slap_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->slap_count(), target);
  }

  // optional .SProtoSpace.ESLAPPROGRESS progress = 10;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->progress(), target);
  }

  // repeated .SProtoSpace.slap_emoji_info info = 11;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int event_slap_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_type = 6;
    if (has_role_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_type());
    }

    // optional uint64 take_time = 8;
    if (has_take_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->take_time());
    }

    // optional uint32 slap_count = 9;
    if (has_slap_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slap_count());
    }

    // optional .SProtoSpace.ESLAPPROGRESS progress = 10;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->progress());
    }

  }
  // repeated .SProtoSpace.slap_emoji_info info = 11;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void event_slap_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const event_slap_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const event_slap_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void event_slap_info::MergeFrom(const event_slap_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_type()) {
      set_role_type(from.role_type());
    }
    if (from.has_take_time()) {
      set_take_time(from.take_time());
    }
    if (from.has_slap_count()) {
      set_slap_count(from.slap_count());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void event_slap_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void event_slap_info::CopyFrom(const event_slap_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_slap_info::IsInitialized() const {

  return true;
}

void event_slap_info::Swap(event_slap_info* other) {
  if (other != this) {
    std::swap(role_type_, other->role_type_);
    std::swap(take_time_, other->take_time_);
    std::swap(slap_count_, other->slap_count_);
    std::swap(progress_, other->progress_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata event_slap_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = event_slap_info_descriptor_;
  metadata.reflection = event_slap_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int event_tribute_info::kRoleTypeFieldNumber;
const int event_tribute_info::kItemIdFieldNumber;
const int event_tribute_info::kCountFieldNumber;
const int event_tribute_info::kContentFieldNumber;
#endif  // !_MSC_VER

event_tribute_info::event_tribute_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void event_tribute_info::InitAsDefaultInstance() {
}

event_tribute_info::event_tribute_info(const event_tribute_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void event_tribute_info::SharedCtor() {
  _cached_size_ = 0;
  role_type_ = 0u;
  item_id_ = 0u;
  count_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

event_tribute_info::~event_tribute_info() {
  SharedDtor();
}

void event_tribute_info::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void event_tribute_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* event_tribute_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return event_tribute_info_descriptor_;
}

const event_tribute_info& event_tribute_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

event_tribute_info* event_tribute_info::default_instance_ = NULL;

event_tribute_info* event_tribute_info::New() const {
  return new event_tribute_info;
}

void event_tribute_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_type_ = 0u;
    item_id_ = 0u;
    count_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool event_tribute_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_type_)));
          set_has_role_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_count;
        break;
      }

      // optional uint32 count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_content;
        break;
      }

      // optional string content = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void event_tribute_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_type = 6;
  if (has_role_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->role_type(), output);
  }

  // optional uint32 item_id = 8;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->item_id(), output);
  }

  // optional uint32 count = 9;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->count(), output);
  }

  // optional string content = 10;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* event_tribute_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_type = 6;
  if (has_role_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->role_type(), target);
  }

  // optional uint32 item_id = 8;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->item_id(), target);
  }

  // optional uint32 count = 9;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->count(), target);
  }

  // optional string content = 10;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int event_tribute_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_type = 6;
    if (has_role_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_type());
    }

    // optional uint32 item_id = 8;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 count = 9;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional string content = 10;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void event_tribute_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const event_tribute_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const event_tribute_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void event_tribute_info::MergeFrom(const event_tribute_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_type()) {
      set_role_type(from.role_type());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void event_tribute_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void event_tribute_info::CopyFrom(const event_tribute_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_tribute_info::IsInitialized() const {

  return true;
}

void event_tribute_info::Swap(event_tribute_info* other) {
  if (other != this) {
    std::swap(role_type_, other->role_type_);
    std::swap(item_id_, other->item_id_);
    std::swap(count_, other->count_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata event_tribute_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = event_tribute_info_descriptor_;
  metadata.reflection = event_tribute_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int slap_emoji_info::kSlotIndexFieldNumber;
const int slap_emoji_info::kEmojiIdFieldNumber;
#endif  // !_MSC_VER

slap_emoji_info::slap_emoji_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void slap_emoji_info::InitAsDefaultInstance() {
}

slap_emoji_info::slap_emoji_info(const slap_emoji_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void slap_emoji_info::SharedCtor() {
  _cached_size_ = 0;
  slot_index_ = 0u;
  emoji_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

slap_emoji_info::~slap_emoji_info() {
  SharedDtor();
}

void slap_emoji_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void slap_emoji_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* slap_emoji_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return slap_emoji_info_descriptor_;
}

const slap_emoji_info& slap_emoji_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

slap_emoji_info* slap_emoji_info::default_instance_ = NULL;

slap_emoji_info* slap_emoji_info::New() const {
  return new slap_emoji_info;
}

void slap_emoji_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_index_ = 0u;
    emoji_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool slap_emoji_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_index_)));
          set_has_slot_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_emoji_id;
        break;
      }

      // optional uint32 emoji_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emoji_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &emoji_id_)));
          set_has_emoji_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void slap_emoji_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 slot_index = 1;
  if (has_slot_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot_index(), output);
  }

  // optional uint32 emoji_id = 2;
  if (has_emoji_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->emoji_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* slap_emoji_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 slot_index = 1;
  if (has_slot_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot_index(), target);
  }

  // optional uint32 emoji_id = 2;
  if (has_emoji_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->emoji_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int slap_emoji_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slot_index = 1;
    if (has_slot_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_index());
    }

    // optional uint32 emoji_id = 2;
    if (has_emoji_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->emoji_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void slap_emoji_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const slap_emoji_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const slap_emoji_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void slap_emoji_info::MergeFrom(const slap_emoji_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_index()) {
      set_slot_index(from.slot_index());
    }
    if (from.has_emoji_id()) {
      set_emoji_id(from.emoji_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void slap_emoji_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void slap_emoji_info::CopyFrom(const slap_emoji_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool slap_emoji_info::IsInitialized() const {

  return true;
}

void slap_emoji_info::Swap(slap_emoji_info* other) {
  if (other != this) {
    std::swap(slot_index_, other->slot_index_);
    std::swap(emoji_id_, other->emoji_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata slap_emoji_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = slap_emoji_info_descriptor_;
  metadata.reflection = slap_emoji_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int team_hero_slot::kSlotFieldNumber;
const int team_hero_slot::kHeroFieldNumber;
#endif  // !_MSC_VER

team_hero_slot::team_hero_slot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_hero_slot::InitAsDefaultInstance() {
  hero_ = const_cast< ::SProtoSpace::battle_hero_info*>(&::SProtoSpace::battle_hero_info::default_instance());
}

team_hero_slot::team_hero_slot(const team_hero_slot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_hero_slot::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0u;
  hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_hero_slot::~team_hero_slot() {
  SharedDtor();
}

void team_hero_slot::SharedDtor() {
  if (this != default_instance_) {
    delete hero_;
  }
}

void team_hero_slot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_hero_slot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_hero_slot_descriptor_;
}

const team_hero_slot& team_hero_slot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

team_hero_slot* team_hero_slot::default_instance_ = NULL;

team_hero_slot* team_hero_slot::New() const {
  return new team_hero_slot;
}

void team_hero_slot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_ = 0u;
    if (has_hero()) {
      if (hero_ != NULL) hero_->::SProtoSpace::battle_hero_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_hero_slot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero;
        break;
      }

      // optional .SProtoSpace.battle_hero_info hero = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_hero_slot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  // optional .SProtoSpace.battle_hero_info hero = 2;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_hero_slot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  // optional .SProtoSpace.battle_hero_info hero = 2;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_hero_slot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // optional .SProtoSpace.battle_hero_info hero = 2;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_hero_slot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_hero_slot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_hero_slot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_hero_slot::MergeFrom(const team_hero_slot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_hero()) {
      mutable_hero()->::SProtoSpace::battle_hero_info::MergeFrom(from.hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_hero_slot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_hero_slot::CopyFrom(const team_hero_slot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_hero_slot::IsInitialized() const {

  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  return true;
}

void team_hero_slot::Swap(team_hero_slot* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(hero_, other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_hero_slot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_hero_slot_descriptor_;
  metadata.reflection = team_hero_slot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int team_member_data::kIndexFieldNumber;
const int team_member_data::kLeaderFieldNumber;
const int team_member_data::kIdFieldNumber;
const int team_member_data::kNameFieldNumber;
const int team_member_data::kLevelFieldNumber;
const int team_member_data::kHerosFieldNumber;
#endif  // !_MSC_VER

team_member_data::team_member_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_member_data::InitAsDefaultInstance() {
}

team_member_data::team_member_data(const team_member_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_member_data::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  leader_ = false;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_member_data::~team_member_data() {
  SharedDtor();
}

void team_member_data::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void team_member_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_member_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_member_data_descriptor_;
}

const team_member_data& team_member_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

team_member_data* team_member_data::default_instance_ = NULL;

team_member_data* team_member_data::New() const {
  return new team_member_data;
}

void team_member_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    leader_ = false;
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_member_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leader;
        break;
      }

      // optional bool leader = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_heros;
        break;
      }

      // repeated .SProtoSpace.team_hero_slot heros = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_member_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional bool leader = 2;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->leader(), output);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // repeated .SProtoSpace.team_hero_slot heros = 6;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_member_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional bool leader = 2;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->leader(), target);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // repeated .SProtoSpace.team_hero_slot heros = 6;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_member_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional bool leader = 2;
    if (has_leader()) {
      total_size += 1 + 1;
    }

    // optional uint64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  // repeated .SProtoSpace.team_hero_slot heros = 6;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_member_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_member_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_member_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_member_data::MergeFrom(const team_member_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_member_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_member_data::CopyFrom(const team_member_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_member_data::IsInitialized() const {

  for (int i = 0; i < heros_size(); i++) {
    if (!this->heros(i).IsInitialized()) return false;
  }
  return true;
}

void team_member_data::Swap(team_member_data* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(leader_, other->leader_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_member_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_member_data_descriptor_;
  metadata.reflection = team_member_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int team_data::kTeamIdFieldNumber;
const int team_data::kTeamTypeFieldNumber;
const int team_data::kTeamSizeFieldNumber;
const int team_data::kTeamPermFieldNumber;
const int team_data::kCreateTimeFieldNumber;
const int team_data::kTeamNameFieldNumber;
const int team_data::kMembersFieldNumber;
#endif  // !_MSC_VER

team_data::team_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_data::InitAsDefaultInstance() {
}

team_data::team_data(const team_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_data::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = GOOGLE_ULONGLONG(0);
  team_type_ = 1;
  team_size_ = 1;
  team_perm_ = 1;
  create_time_ = 0;
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_data::~team_data() {
  SharedDtor();
}

void team_data::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (this != default_instance_) {
  }
}

void team_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_data_descriptor_;
}

const team_data& team_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

team_data* team_data::default_instance_ = NULL;

team_data* team_data::New() const {
  return new team_data;
}

void team_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_id_ = GOOGLE_ULONGLONG(0);
    team_type_ = 1;
    team_size_ = 1;
    team_perm_ = 1;
    create_time_ = 0;
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::kEmptyString) {
        team_name_->clear();
      }
    }
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_type;
        break;
      }

      // optional .SProtoSpace.eTeamType team_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamType_IsValid(value)) {
            set_team_type(static_cast< ::SProtoSpace::eTeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_size;
        break;
      }

      // optional .SProtoSpace.eTeamSize team_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_size:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamSize_IsValid(value)) {
            set_team_size(static_cast< ::SProtoSpace::eTeamSize >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_perm;
        break;
      }

      // optional .SProtoSpace.eTeamPermission team_perm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_perm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamPermission_IsValid(value)) {
            set_team_perm(static_cast< ::SProtoSpace::eTeamPermission >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_create_time;
        break;
      }

      // optional int32 create_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_team_name;
        break;
      }

      // optional string team_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_members;
        break;
      }

      // repeated .SProtoSpace.team_member_data members = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_members;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->team_id(), output);
  }

  // optional .SProtoSpace.eTeamType team_type = 2;
  if (has_team_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->team_type(), output);
  }

  // optional .SProtoSpace.eTeamSize team_size = 3;
  if (has_team_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->team_size(), output);
  }

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  if (has_team_perm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->team_perm(), output);
  }

  // optional int32 create_time = 5;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->create_time(), output);
  }

  // optional string team_name = 6;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->team_name(), output);
  }

  // repeated .SProtoSpace.team_member_data members = 7;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->team_id(), target);
  }

  // optional .SProtoSpace.eTeamType team_type = 2;
  if (has_team_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->team_type(), target);
  }

  // optional .SProtoSpace.eTeamSize team_size = 3;
  if (has_team_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->team_size(), target);
  }

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  if (has_team_perm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->team_perm(), target);
  }

  // optional int32 create_time = 5;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->create_time(), target);
  }

  // optional string team_name = 6;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->team_name(), target);
  }

  // repeated .SProtoSpace.team_member_data members = 7;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

    // optional .SProtoSpace.eTeamType team_type = 2;
    if (has_team_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_type());
    }

    // optional .SProtoSpace.eTeamSize team_size = 3;
    if (has_team_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_size());
    }

    // optional .SProtoSpace.eTeamPermission team_perm = 4;
    if (has_team_perm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_perm());
    }

    // optional int32 create_time = 5;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // optional string team_name = 6;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

  }
  // repeated .SProtoSpace.team_member_data members = 7;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_data::MergeFrom(const team_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_type()) {
      set_team_type(from.team_type());
    }
    if (from.has_team_size()) {
      set_team_size(from.team_size());
    }
    if (from.has_team_perm()) {
      set_team_perm(from.team_perm());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_data::CopyFrom(const team_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_data::IsInitialized() const {

  for (int i = 0; i < members_size(); i++) {
    if (!this->members(i).IsInitialized()) return false;
  }
  return true;
}

void team_data::Swap(team_data* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(team_type_, other->team_type_);
    std::swap(team_size_, other->team_size_);
    std::swap(team_perm_, other->team_perm_);
    std::swap(create_time_, other->create_time_);
    std::swap(team_name_, other->team_name_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_data_descriptor_;
  metadata.reflection = team_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int team_member_brief::kSlotFieldNumber;
const int team_member_brief::kNameFieldNumber;
const int team_member_brief::kHeadIdFieldNumber;
const int team_member_brief::kLvFieldNumber;
#endif  // !_MSC_VER

team_member_brief::team_member_brief()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_member_brief::InitAsDefaultInstance() {
}

team_member_brief::team_member_brief(const team_member_brief& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_member_brief::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_id_ = 0u;
  lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_member_brief::~team_member_brief() {
  SharedDtor();
}

void team_member_brief::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void team_member_brief::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_member_brief::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_member_brief_descriptor_;
}

const team_member_brief& team_member_brief::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

team_member_brief* team_member_brief::default_instance_ = NULL;

team_member_brief* team_member_brief::New() const {
  return new team_member_brief;
}

void team_member_brief::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    head_id_ = 0u;
    lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_member_brief::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_id;
        break;
      }

      // optional uint32 head_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_member_brief::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 head_id = 3;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->head_id(), output);
  }

  // optional uint32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_member_brief::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 head_id = 3;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->head_id(), target);
  }

  // optional uint32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_member_brief::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 head_id = 3;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_id());
    }

    // optional uint32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_member_brief::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_member_brief* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_member_brief*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_member_brief::MergeFrom(const team_member_brief& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_member_brief::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_member_brief::CopyFrom(const team_member_brief& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_member_brief::IsInitialized() const {

  return true;
}

void team_member_brief::Swap(team_member_brief* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(name_, other->name_);
    std::swap(head_id_, other->head_id_);
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_member_brief::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_member_brief_descriptor_;
  metadata.reflection = team_member_brief_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int team_brief::kTeamIdFieldNumber;
const int team_brief::kTeamTypeFieldNumber;
const int team_brief::kTeamSizeFieldNumber;
const int team_brief::kTeamPermFieldNumber;
const int team_brief::kTmBriefFieldNumber;
#endif  // !_MSC_VER

team_brief::team_brief()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_brief::InitAsDefaultInstance() {
}

team_brief::team_brief(const team_brief& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_brief::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = GOOGLE_ULONGLONG(0);
  team_type_ = 1;
  team_size_ = 1;
  team_perm_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_brief::~team_brief() {
  SharedDtor();
}

void team_brief::SharedDtor() {
  if (this != default_instance_) {
  }
}

void team_brief::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_brief::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_brief_descriptor_;
}

const team_brief& team_brief::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

team_brief* team_brief::default_instance_ = NULL;

team_brief* team_brief::New() const {
  return new team_brief;
}

void team_brief::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_id_ = GOOGLE_ULONGLONG(0);
    team_type_ = 1;
    team_size_ = 1;
    team_perm_ = 1;
  }
  tm_brief_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_brief::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_type;
        break;
      }

      // optional .SProtoSpace.eTeamType team_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamType_IsValid(value)) {
            set_team_type(static_cast< ::SProtoSpace::eTeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_size;
        break;
      }

      // optional .SProtoSpace.eTeamSize team_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_size:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamSize_IsValid(value)) {
            set_team_size(static_cast< ::SProtoSpace::eTeamSize >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_perm;
        break;
      }

      // optional .SProtoSpace.eTeamPermission team_perm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_perm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamPermission_IsValid(value)) {
            set_team_perm(static_cast< ::SProtoSpace::eTeamPermission >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tm_brief;
        break;
      }

      // repeated .SProtoSpace.team_member_brief tm_brief = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tm_brief:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tm_brief()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tm_brief;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_brief::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->team_id(), output);
  }

  // optional .SProtoSpace.eTeamType team_type = 2;
  if (has_team_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->team_type(), output);
  }

  // optional .SProtoSpace.eTeamSize team_size = 3;
  if (has_team_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->team_size(), output);
  }

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  if (has_team_perm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->team_perm(), output);
  }

  // repeated .SProtoSpace.team_member_brief tm_brief = 5;
  for (int i = 0; i < this->tm_brief_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tm_brief(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_brief::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->team_id(), target);
  }

  // optional .SProtoSpace.eTeamType team_type = 2;
  if (has_team_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->team_type(), target);
  }

  // optional .SProtoSpace.eTeamSize team_size = 3;
  if (has_team_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->team_size(), target);
  }

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  if (has_team_perm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->team_perm(), target);
  }

  // repeated .SProtoSpace.team_member_brief tm_brief = 5;
  for (int i = 0; i < this->tm_brief_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tm_brief(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_brief::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

    // optional .SProtoSpace.eTeamType team_type = 2;
    if (has_team_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_type());
    }

    // optional .SProtoSpace.eTeamSize team_size = 3;
    if (has_team_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_size());
    }

    // optional .SProtoSpace.eTeamPermission team_perm = 4;
    if (has_team_perm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_perm());
    }

  }
  // repeated .SProtoSpace.team_member_brief tm_brief = 5;
  total_size += 1 * this->tm_brief_size();
  for (int i = 0; i < this->tm_brief_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tm_brief(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_brief::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_brief* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_brief*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_brief::MergeFrom(const team_brief& from) {
  GOOGLE_CHECK_NE(&from, this);
  tm_brief_.MergeFrom(from.tm_brief_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_type()) {
      set_team_type(from.team_type());
    }
    if (from.has_team_size()) {
      set_team_size(from.team_size());
    }
    if (from.has_team_perm()) {
      set_team_perm(from.team_perm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_brief::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_brief::CopyFrom(const team_brief& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_brief::IsInitialized() const {

  return true;
}

void team_brief::Swap(team_brief* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(team_type_, other->team_type_);
    std::swap(team_size_, other->team_size_);
    std::swap(team_perm_, other->team_perm_);
    tm_brief_.Swap(&other->tm_brief_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_brief::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_brief_descriptor_;
  metadata.reflection = team_brief_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_item_data::kRoleIdFieldNumber;
const int arena_item_data::kMaxGradeFieldNumber;
const int arena_item_data::kBattleDataFieldNumber;
#endif  // !_MSC_VER

arena_item_data::arena_item_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_item_data::InitAsDefaultInstance() {
  battle_data_ = const_cast< ::SProtoSpace::battle_role_info*>(&::SProtoSpace::battle_role_info::default_instance());
}

arena_item_data::arena_item_data(const arena_item_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_item_data::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  max_grade_ = 0;
  battle_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_item_data::~arena_item_data() {
  SharedDtor();
}

void arena_item_data::SharedDtor() {
  if (this != default_instance_) {
    delete battle_data_;
  }
}

void arena_item_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_item_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_item_data_descriptor_;
}

const arena_item_data& arena_item_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

arena_item_data* arena_item_data::default_instance_ = NULL;

arena_item_data* arena_item_data::New() const {
  return new arena_item_data;
}

void arena_item_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    max_grade_ = 0;
    if (has_battle_data()) {
      if (battle_data_ != NULL) battle_data_->::SProtoSpace::battle_role_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_item_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_grade;
        break;
      }

      // optional int32 max_grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_grade_)));
          set_has_max_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battle_data;
        break;
      }

      // optional .SProtoSpace.battle_role_info battle_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_item_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional int32 max_grade = 2;
  if (has_max_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_grade(), output);
  }

  // optional .SProtoSpace.battle_role_info battle_data = 3;
  if (has_battle_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battle_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_item_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional int32 max_grade = 2;
  if (has_max_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_grade(), target);
  }

  // optional .SProtoSpace.battle_role_info battle_data = 3;
  if (has_battle_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battle_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_item_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 max_grade = 2;
    if (has_max_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_grade());
    }

    // optional .SProtoSpace.battle_role_info battle_data = 3;
    if (has_battle_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_item_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_item_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_item_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_item_data::MergeFrom(const arena_item_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_max_grade()) {
      set_max_grade(from.max_grade());
    }
    if (from.has_battle_data()) {
      mutable_battle_data()->::SProtoSpace::battle_role_info::MergeFrom(from.battle_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_item_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_item_data::CopyFrom(const arena_item_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_item_data::IsInitialized() const {

  if (has_battle_data()) {
    if (!this->battle_data().IsInitialized()) return false;
  }
  return true;
}

void arena_item_data::Swap(arena_item_data* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(max_grade_, other->max_grade_);
    std::swap(battle_data_, other->battle_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_item_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_item_data_descriptor_;
  metadata.reflection = arena_item_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int emotion_base_info::kIdFieldNumber;
const int emotion_base_info::kCreateTimeFieldNumber;
const int emotion_base_info::kStatusFieldNumber;
const int emotion_base_info::kShowRoleIdFieldNumber;
const int emotion_base_info::kMsgContentFieldNumber;
const int emotion_base_info::kImgUrlsFieldNumber;
const int emotion_base_info::kTypeFieldNumber;
#endif  // !_MSC_VER

emotion_base_info::emotion_base_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void emotion_base_info::InitAsDefaultInstance() {
}

emotion_base_info::emotion_base_info(const emotion_base_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void emotion_base_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  create_time_ = GOOGLE_ULONGLONG(0);
  status_ = 0u;
  show_role_id_ = GOOGLE_ULONGLONG(0);
  msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

emotion_base_info::~emotion_base_info() {
  SharedDtor();
}

void emotion_base_info::SharedDtor() {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (this != default_instance_) {
  }
}

void emotion_base_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* emotion_base_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emotion_base_info_descriptor_;
}

const emotion_base_info& emotion_base_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

emotion_base_info* emotion_base_info::default_instance_ = NULL;

emotion_base_info* emotion_base_info::New() const {
  return new emotion_base_info;
}

void emotion_base_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    create_time_ = GOOGLE_ULONGLONG(0);
    status_ = 0u;
    show_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_msg_content()) {
      if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
        msg_content_->clear();
      }
    }
    type_ = 0;
  }
  img_urls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool emotion_base_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_create_time;
        break;
      }

      // optional uint64 create_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional uint32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_msg_content;
        break;
      }

      // optional string msg_content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_content().data(), this->msg_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_img_urls;
        break;
      }

      // repeated string img_urls = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_img_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_img_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->img_urls(this->img_urls_size() - 1).data(),
            this->img_urls(this->img_urls_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_img_urls;
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.EmotionType type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EmotionType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EmotionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void emotion_base_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 create_time = 2;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->create_time(), output);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // optional uint64 show_role_id = 4;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->show_role_id(), output);
  }

  // optional string msg_content = 5;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->msg_content(), output);
  }

  // repeated string img_urls = 6;
  for (int i = 0; i < this->img_urls_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->img_urls(i).data(), this->img_urls(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->img_urls(i), output);
  }

  // optional .SProtoSpace.EmotionType type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* emotion_base_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 create_time = 2;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->create_time(), target);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // optional uint64 show_role_id = 4;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->show_role_id(), target);
  }

  // optional string msg_content = 5;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->msg_content(), target);
  }

  // repeated string img_urls = 6;
  for (int i = 0; i < this->img_urls_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->img_urls(i).data(), this->img_urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->img_urls(i), target);
  }

  // optional .SProtoSpace.EmotionType type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int emotion_base_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 create_time = 2;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_time());
    }

    // optional uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint64 show_role_id = 4;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional string msg_content = 5;
    if (has_msg_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_content());
    }

    // optional .SProtoSpace.EmotionType type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated string img_urls = 6;
  total_size += 1 * this->img_urls_size();
  for (int i = 0; i < this->img_urls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->img_urls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void emotion_base_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const emotion_base_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const emotion_base_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void emotion_base_info::MergeFrom(const emotion_base_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  img_urls_.MergeFrom(from.img_urls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_msg_content()) {
      set_msg_content(from.msg_content());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void emotion_base_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void emotion_base_info::CopyFrom(const emotion_base_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool emotion_base_info::IsInitialized() const {

  return true;
}

void emotion_base_info::Swap(emotion_base_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(create_time_, other->create_time_);
    std::swap(status_, other->status_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(msg_content_, other->msg_content_);
    img_urls_.Swap(&other->img_urls_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata emotion_base_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = emotion_base_info_descriptor_;
  metadata.reflection = emotion_base_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int emotion_like_info::kRoleIdFieldNumber;
const int emotion_like_info::kRoleNameFieldNumber;
const int emotion_like_info::kLikeTimeFieldNumber;
#endif  // !_MSC_VER

emotion_like_info::emotion_like_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void emotion_like_info::InitAsDefaultInstance() {
}

emotion_like_info::emotion_like_info(const emotion_like_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void emotion_like_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  like_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

emotion_like_info::~emotion_like_info() {
  SharedDtor();
}

void emotion_like_info::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void emotion_like_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* emotion_like_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emotion_like_info_descriptor_;
}

const emotion_like_info& emotion_like_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

emotion_like_info* emotion_like_info::default_instance_ = NULL;

emotion_like_info* emotion_like_info::New() const {
  return new emotion_like_info;
}

void emotion_like_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    like_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool emotion_like_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_like_time;
        break;
      }

      // optional uint64 like_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_like_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &like_time_)));
          set_has_like_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void emotion_like_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // optional uint64 like_time = 3;
  if (has_like_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->like_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* emotion_like_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // optional uint64 like_time = 3;
  if (has_like_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->like_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int emotion_like_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint64 like_time = 3;
    if (has_like_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->like_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void emotion_like_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const emotion_like_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const emotion_like_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void emotion_like_info::MergeFrom(const emotion_like_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_like_time()) {
      set_like_time(from.like_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void emotion_like_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void emotion_like_info::CopyFrom(const emotion_like_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool emotion_like_info::IsInitialized() const {

  return true;
}

void emotion_like_info::Swap(emotion_like_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(like_time_, other->like_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata emotion_like_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = emotion_like_info_descriptor_;
  metadata.reflection = emotion_like_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int emotion_comment_info::kIdFieldNumber;
const int emotion_comment_info::kCreateTimeFieldNumber;
const int emotion_comment_info::kStatusFieldNumber;
const int emotion_comment_info::kFromIdFieldNumber;
const int emotion_comment_info::kFromNameFieldNumber;
const int emotion_comment_info::kToIdFieldNumber;
const int emotion_comment_info::kToNameFieldNumber;
const int emotion_comment_info::kMsgContentFieldNumber;
#endif  // !_MSC_VER

emotion_comment_info::emotion_comment_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void emotion_comment_info::InitAsDefaultInstance() {
}

emotion_comment_info::emotion_comment_info(const emotion_comment_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void emotion_comment_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  create_time_ = GOOGLE_ULONGLONG(0);
  status_ = 0u;
  from_id_ = GOOGLE_ULONGLONG(0);
  from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_id_ = GOOGLE_ULONGLONG(0);
  to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

emotion_comment_info::~emotion_comment_info() {
  SharedDtor();
}

void emotion_comment_info::SharedDtor() {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_name_;
  }
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_name_;
  }
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (this != default_instance_) {
  }
}

void emotion_comment_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* emotion_comment_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emotion_comment_info_descriptor_;
}

const emotion_comment_info& emotion_comment_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

emotion_comment_info* emotion_comment_info::default_instance_ = NULL;

emotion_comment_info* emotion_comment_info::New() const {
  return new emotion_comment_info;
}

void emotion_comment_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    create_time_ = GOOGLE_ULONGLONG(0);
    status_ = 0u;
    from_id_ = GOOGLE_ULONGLONG(0);
    if (has_from_name()) {
      if (from_name_ != &::google::protobuf::internal::kEmptyString) {
        from_name_->clear();
      }
    }
    to_id_ = GOOGLE_ULONGLONG(0);
    if (has_to_name()) {
      if (to_name_ != &::google::protobuf::internal::kEmptyString) {
        to_name_->clear();
      }
    }
    if (has_msg_content()) {
      if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
        msg_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool emotion_comment_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_create_time;
        break;
      }

      // optional uint64 create_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional uint32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_from_id;
        break;
      }

      // optional uint64 from_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_from_name;
        break;
      }

      // optional string from_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_name().data(), this->from_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_to_id;
        break;
      }

      // optional uint64 to_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_id_)));
          set_has_to_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_to_name;
        break;
      }

      // optional string to_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_name().data(), this->to_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_msg_content;
        break;
      }

      // optional string msg_content = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_content().data(), this->msg_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void emotion_comment_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 create_time = 2;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->create_time(), output);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // optional uint64 from_id = 4;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->from_id(), output);
  }

  // optional string from_name = 5;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_name().data(), this->from_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->from_name(), output);
  }

  // optional uint64 to_id = 6;
  if (has_to_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->to_id(), output);
  }

  // optional string to_name = 7;
  if (has_to_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_name().data(), this->to_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->to_name(), output);
  }

  // optional string msg_content = 8;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->msg_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* emotion_comment_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 create_time = 2;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->create_time(), target);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // optional uint64 from_id = 4;
  if (has_from_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->from_id(), target);
  }

  // optional string from_name = 5;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_name().data(), this->from_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->from_name(), target);
  }

  // optional uint64 to_id = 6;
  if (has_to_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->to_id(), target);
  }

  // optional string to_name = 7;
  if (has_to_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_name().data(), this->to_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->to_name(), target);
  }

  // optional string msg_content = 8;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->msg_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int emotion_comment_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 create_time = 2;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_time());
    }

    // optional uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint64 from_id = 4;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_id());
    }

    // optional string from_name = 5;
    if (has_from_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_name());
    }

    // optional uint64 to_id = 6;
    if (has_to_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_id());
    }

    // optional string to_name = 7;
    if (has_to_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_name());
    }

    // optional string msg_content = 8;
    if (has_msg_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void emotion_comment_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const emotion_comment_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const emotion_comment_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void emotion_comment_info::MergeFrom(const emotion_comment_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_from_name()) {
      set_from_name(from.from_name());
    }
    if (from.has_to_id()) {
      set_to_id(from.to_id());
    }
    if (from.has_to_name()) {
      set_to_name(from.to_name());
    }
    if (from.has_msg_content()) {
      set_msg_content(from.msg_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void emotion_comment_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void emotion_comment_info::CopyFrom(const emotion_comment_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool emotion_comment_info::IsInitialized() const {

  return true;
}

void emotion_comment_info::Swap(emotion_comment_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(create_time_, other->create_time_);
    std::swap(status_, other->status_);
    std::swap(from_id_, other->from_id_);
    std::swap(from_name_, other->from_name_);
    std::swap(to_id_, other->to_id_);
    std::swap(to_name_, other->to_name_);
    std::swap(msg_content_, other->msg_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata emotion_comment_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = emotion_comment_info_descriptor_;
  metadata.reflection = emotion_comment_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int emotion_opt_info::kLikeNumFieldNumber;
const int emotion_opt_info::kCommentNumFieldNumber;
#endif  // !_MSC_VER

emotion_opt_info::emotion_opt_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void emotion_opt_info::InitAsDefaultInstance() {
}

emotion_opt_info::emotion_opt_info(const emotion_opt_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void emotion_opt_info::SharedCtor() {
  _cached_size_ = 0;
  like_num_ = 0;
  comment_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

emotion_opt_info::~emotion_opt_info() {
  SharedDtor();
}

void emotion_opt_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void emotion_opt_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* emotion_opt_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emotion_opt_info_descriptor_;
}

const emotion_opt_info& emotion_opt_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

emotion_opt_info* emotion_opt_info::default_instance_ = NULL;

emotion_opt_info* emotion_opt_info::New() const {
  return new emotion_opt_info;
}

void emotion_opt_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    like_num_ = 0;
    comment_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool emotion_opt_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 like_num = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &like_num_)));
          set_has_like_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_comment_num;
        break;
      }

      // optional int32 comment_num = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comment_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comment_num_)));
          set_has_comment_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void emotion_opt_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 like_num = 1 [default = 0];
  if (has_like_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->like_num(), output);
  }

  // optional int32 comment_num = 2 [default = 0];
  if (has_comment_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->comment_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* emotion_opt_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 like_num = 1 [default = 0];
  if (has_like_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->like_num(), target);
  }

  // optional int32 comment_num = 2 [default = 0];
  if (has_comment_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->comment_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int emotion_opt_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 like_num = 1 [default = 0];
    if (has_like_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->like_num());
    }

    // optional int32 comment_num = 2 [default = 0];
    if (has_comment_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comment_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void emotion_opt_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const emotion_opt_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const emotion_opt_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void emotion_opt_info::MergeFrom(const emotion_opt_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_like_num()) {
      set_like_num(from.like_num());
    }
    if (from.has_comment_num()) {
      set_comment_num(from.comment_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void emotion_opt_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void emotion_opt_info::CopyFrom(const emotion_opt_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool emotion_opt_info::IsInitialized() const {

  return true;
}

void emotion_opt_info::Swap(emotion_opt_info* other) {
  if (other != this) {
    std::swap(like_num_, other->like_num_);
    std::swap(comment_num_, other->comment_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata emotion_opt_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = emotion_opt_info_descriptor_;
  metadata.reflection = emotion_opt_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int emotion_info::kBaseInfoFieldNumber;
const int emotion_info::kLikeInfoFieldNumber;
const int emotion_info::kCommentFieldNumber;
const int emotion_info::kOptInfoFieldNumber;
#endif  // !_MSC_VER

emotion_info::emotion_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void emotion_info::InitAsDefaultInstance() {
  base_info_ = const_cast< ::SProtoSpace::emotion_base_info*>(&::SProtoSpace::emotion_base_info::default_instance());
  opt_info_ = const_cast< ::SProtoSpace::emotion_opt_info*>(&::SProtoSpace::emotion_opt_info::default_instance());
}

emotion_info::emotion_info(const emotion_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void emotion_info::SharedCtor() {
  _cached_size_ = 0;
  base_info_ = NULL;
  opt_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

emotion_info::~emotion_info() {
  SharedDtor();
}

void emotion_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_info_;
    delete opt_info_;
  }
}

void emotion_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* emotion_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emotion_info_descriptor_;
}

const emotion_info& emotion_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

emotion_info* emotion_info::default_instance_ = NULL;

emotion_info* emotion_info::New() const {
  return new emotion_info;
}

void emotion_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_info()) {
      if (base_info_ != NULL) base_info_->::SProtoSpace::emotion_base_info::Clear();
    }
    if (has_opt_info()) {
      if (opt_info_ != NULL) opt_info_->::SProtoSpace::emotion_opt_info::Clear();
    }
  }
  like_info_.Clear();
  comment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool emotion_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.emotion_base_info base_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_like_info;
        break;
      }

      // repeated .SProtoSpace.emotion_like_info like_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_like_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_like_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_like_info;
        if (input->ExpectTag(26)) goto parse_comment;
        break;
      }

      // repeated .SProtoSpace.emotion_comment_info comment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_comment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_comment;
        if (input->ExpectTag(34)) goto parse_opt_info;
        break;
      }

      // optional .SProtoSpace.emotion_opt_info opt_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opt_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opt_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void emotion_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.emotion_base_info base_info = 1;
  if (has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_info(), output);
  }

  // repeated .SProtoSpace.emotion_like_info like_info = 2;
  for (int i = 0; i < this->like_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->like_info(i), output);
  }

  // repeated .SProtoSpace.emotion_comment_info comment = 3;
  for (int i = 0; i < this->comment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->comment(i), output);
  }

  // optional .SProtoSpace.emotion_opt_info opt_info = 4;
  if (has_opt_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->opt_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* emotion_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.emotion_base_info base_info = 1;
  if (has_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_info(), target);
  }

  // repeated .SProtoSpace.emotion_like_info like_info = 2;
  for (int i = 0; i < this->like_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->like_info(i), target);
  }

  // repeated .SProtoSpace.emotion_comment_info comment = 3;
  for (int i = 0; i < this->comment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->comment(i), target);
  }

  // optional .SProtoSpace.emotion_opt_info opt_info = 4;
  if (has_opt_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->opt_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int emotion_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.emotion_base_info base_info = 1;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }

    // optional .SProtoSpace.emotion_opt_info opt_info = 4;
    if (has_opt_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opt_info());
    }

  }
  // repeated .SProtoSpace.emotion_like_info like_info = 2;
  total_size += 1 * this->like_info_size();
  for (int i = 0; i < this->like_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->like_info(i));
  }

  // repeated .SProtoSpace.emotion_comment_info comment = 3;
  total_size += 1 * this->comment_size();
  for (int i = 0; i < this->comment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comment(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void emotion_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const emotion_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const emotion_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void emotion_info::MergeFrom(const emotion_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  like_info_.MergeFrom(from.like_info_);
  comment_.MergeFrom(from.comment_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_info()) {
      mutable_base_info()->::SProtoSpace::emotion_base_info::MergeFrom(from.base_info());
    }
    if (from.has_opt_info()) {
      mutable_opt_info()->::SProtoSpace::emotion_opt_info::MergeFrom(from.opt_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void emotion_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void emotion_info::CopyFrom(const emotion_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool emotion_info::IsInitialized() const {

  return true;
}

void emotion_info::Swap(emotion_info* other) {
  if (other != this) {
    std::swap(base_info_, other->base_info_);
    like_info_.Swap(&other->like_info_);
    comment_.Swap(&other->comment_);
    std::swap(opt_info_, other->opt_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata emotion_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = emotion_info_descriptor_;
  metadata.reflection = emotion_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int show_emotion_all_info::kEminfoFieldNumber;
#endif  // !_MSC_VER

show_emotion_all_info::show_emotion_all_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void show_emotion_all_info::InitAsDefaultInstance() {
}

show_emotion_all_info::show_emotion_all_info(const show_emotion_all_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void show_emotion_all_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

show_emotion_all_info::~show_emotion_all_info() {
  SharedDtor();
}

void show_emotion_all_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void show_emotion_all_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* show_emotion_all_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return show_emotion_all_info_descriptor_;
}

const show_emotion_all_info& show_emotion_all_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

show_emotion_all_info* show_emotion_all_info::default_instance_ = NULL;

show_emotion_all_info* show_emotion_all_info::New() const {
  return new show_emotion_all_info;
}

void show_emotion_all_info::Clear() {
  eminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool show_emotion_all_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.emotion_info eminfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_eminfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void show_emotion_all_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.emotion_info eminfo = 1;
  for (int i = 0; i < this->eminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->eminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* show_emotion_all_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.emotion_info eminfo = 1;
  for (int i = 0; i < this->eminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->eminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int show_emotion_all_info::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.emotion_info eminfo = 1;
  total_size += 1 * this->eminfo_size();
  for (int i = 0; i < this->eminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void show_emotion_all_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const show_emotion_all_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const show_emotion_all_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void show_emotion_all_info::MergeFrom(const show_emotion_all_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  eminfo_.MergeFrom(from.eminfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void show_emotion_all_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void show_emotion_all_info::CopyFrom(const show_emotion_all_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool show_emotion_all_info::IsInitialized() const {

  return true;
}

void show_emotion_all_info::Swap(show_emotion_all_info* other) {
  if (other != this) {
    eminfo_.Swap(&other->eminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata show_emotion_all_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = show_emotion_all_info_descriptor_;
  metadata.reflection = show_emotion_all_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int label_info::kLabelClassFieldNumber;
const int label_info::kLabelConfigIdFieldNumber;
#endif  // !_MSC_VER

label_info::label_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void label_info::InitAsDefaultInstance() {
}

label_info::label_info(const label_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void label_info::SharedCtor() {
  _cached_size_ = 0;
  label_class_ = 0u;
  label_config_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

label_info::~label_info() {
  SharedDtor();
}

void label_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void label_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* label_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return label_info_descriptor_;
}

const label_info& label_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

label_info* label_info::default_instance_ = NULL;

label_info* label_info::New() const {
  return new label_info;
}

void label_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    label_class_ = 0u;
    label_config_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool label_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 label_class = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &label_class_)));
          set_has_label_class();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_label_config_id;
        break;
      }

      // optional uint32 label_config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_label_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &label_config_id_)));
          set_has_label_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void label_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 label_class = 1;
  if (has_label_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->label_class(), output);
  }

  // optional uint32 label_config_id = 2;
  if (has_label_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->label_config_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* label_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 label_class = 1;
  if (has_label_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->label_class(), target);
  }

  // optional uint32 label_config_id = 2;
  if (has_label_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->label_config_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int label_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 label_class = 1;
    if (has_label_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->label_class());
    }

    // optional uint32 label_config_id = 2;
    if (has_label_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->label_config_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void label_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const label_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const label_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void label_info::MergeFrom(const label_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label_class()) {
      set_label_class(from.label_class());
    }
    if (from.has_label_config_id()) {
      set_label_config_id(from.label_config_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void label_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void label_info::CopyFrom(const label_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool label_info::IsInitialized() const {

  return true;
}

void label_info::Swap(label_info* other) {
  if (other != this) {
    std::swap(label_class_, other->label_class_);
    std::swap(label_config_id_, other->label_config_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata label_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = label_info_descriptor_;
  metadata.reflection = label_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int barrage_role_info::kRoleIdFieldNumber;
const int barrage_role_info::kRoleNameFieldNumber;
const int barrage_role_info::kRoleLvFieldNumber;
#endif  // !_MSC_VER

barrage_role_info::barrage_role_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void barrage_role_info::InitAsDefaultInstance() {
}

barrage_role_info::barrage_role_info(const barrage_role_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void barrage_role_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

barrage_role_info::~barrage_role_info() {
  SharedDtor();
}

void barrage_role_info::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void barrage_role_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* barrage_role_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return barrage_role_info_descriptor_;
}

const barrage_role_info& barrage_role_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

barrage_role_info* barrage_role_info::default_instance_ = NULL;

barrage_role_info* barrage_role_info::New() const {
  return new barrage_role_info;
}

void barrage_role_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    role_lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool barrage_role_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_lv;
        break;
      }

      // optional int32 role_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_lv_)));
          set_has_role_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void barrage_role_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // optional int32 role_lv = 3;
  if (has_role_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* barrage_role_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // optional int32 role_lv = 3;
  if (has_role_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int barrage_role_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional int32 role_lv = 3;
    if (has_role_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void barrage_role_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const barrage_role_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const barrage_role_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void barrage_role_info::MergeFrom(const barrage_role_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_lv()) {
      set_role_lv(from.role_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void barrage_role_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void barrage_role_info::CopyFrom(const barrage_role_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool barrage_role_info::IsInitialized() const {

  return true;
}

void barrage_role_info::Swap(barrage_role_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_lv_, other->role_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata barrage_role_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = barrage_role_info_descriptor_;
  metadata.reflection = barrage_role_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int barrage_single::kTimeFieldNumber;
const int barrage_single::kContentFieldNumber;
const int barrage_single::kColorFieldNumber;
const int barrage_single::kLocationFieldNumber;
const int barrage_single::kRoleInfoFieldNumber;
#endif  // !_MSC_VER

barrage_single::barrage_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void barrage_single::InitAsDefaultInstance() {
  role_info_ = const_cast< ::SProtoSpace::barrage_role_info*>(&::SProtoSpace::barrage_role_info::default_instance());
}

barrage_single::barrage_single(const barrage_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void barrage_single::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  color_ = 0u;
  role_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

barrage_single::~barrage_single() {
  SharedDtor();
}

void barrage_single::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete role_info_;
  }
}

void barrage_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* barrage_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return barrage_single_descriptor_;
}

const barrage_single& barrage_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

barrage_single* barrage_single::default_instance_ = NULL;

barrage_single* barrage_single::New() const {
  return new barrage_single;
}

void barrage_single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    color_ = 0u;
    if (has_role_info()) {
      if (role_info_ != NULL) role_info_->::SProtoSpace::barrage_role_info::Clear();
    }
  }
  location_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool barrage_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_color;
        break;
      }

      // optional uint32 color = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_location;
        break;
      }

      // repeated int32 location = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_location())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_location())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_location;
        if (input->ExpectTag(82)) goto parse_role_info;
        break;
      }

      // optional .SProtoSpace.barrage_role_info role_info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void barrage_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->time(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  // optional uint32 color = 3;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->color(), output);
  }

  // repeated int32 location = 4;
  for (int i = 0; i < this->location_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->location(i), output);
  }

  // optional .SProtoSpace.barrage_role_info role_info = 10;
  if (has_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->role_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* barrage_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->time(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional uint32 color = 3;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->color(), target);
  }

  // repeated int32 location = 4;
  for (int i = 0; i < this->location_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->location(i), target);
  }

  // optional .SProtoSpace.barrage_role_info role_info = 10;
  if (has_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->role_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int barrage_single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float time = 1;
    if (has_time()) {
      total_size += 1 + 4;
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint32 color = 3;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional .SProtoSpace.barrage_role_info role_info = 10;
    if (has_role_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_info());
    }

  }
  // repeated int32 location = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->location_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->location(i));
    }
    total_size += 1 * this->location_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void barrage_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const barrage_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const barrage_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void barrage_single::MergeFrom(const barrage_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  location_.MergeFrom(from.location_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_role_info()) {
      mutable_role_info()->::SProtoSpace::barrage_role_info::MergeFrom(from.role_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void barrage_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void barrage_single::CopyFrom(const barrage_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool barrage_single::IsInitialized() const {

  return true;
}

void barrage_single::Swap(barrage_single* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(content_, other->content_);
    std::swap(color_, other->color_);
    location_.Swap(&other->location_);
    std::swap(role_info_, other->role_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata barrage_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = barrage_single_descriptor_;
  metadata.reflection = barrage_single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int barrage_pack::kBarrageFieldNumber;
const int barrage_pack::kStorageIdFieldNumber;
const int barrage_pack::kDesintyFieldNumber;
const int barrage_pack::kStartFieldNumber;
const int barrage_pack::kEndFieldNumber;
#endif  // !_MSC_VER

barrage_pack::barrage_pack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void barrage_pack::InitAsDefaultInstance() {
}

barrage_pack::barrage_pack(const barrage_pack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void barrage_pack::SharedCtor() {
  _cached_size_ = 0;
  desinty_ = 0;
  start_ = 0;
  end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

barrage_pack::~barrage_pack() {
  SharedDtor();
}

void barrage_pack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void barrage_pack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* barrage_pack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return barrage_pack_descriptor_;
}

const barrage_pack& barrage_pack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fsocialtype_2eproto();
  return *default_instance_;
}

barrage_pack* barrage_pack::default_instance_ = NULL;

barrage_pack* barrage_pack::New() const {
  return new barrage_pack;
}

void barrage_pack::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    desinty_ = 0;
    start_ = 0;
    end_ = 0;
  }
  barrage_.Clear();
  storage_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool barrage_pack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.barrage_single barrage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_barrage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_barrage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_barrage;
        if (input->ExpectTag(16)) goto parse_storage_id;
        break;
      }

      // repeated int32 storage_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_storage_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_storage_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_storage_id;
        if (input->ExpectTag(24)) goto parse_desinty;
        break;
      }

      // optional int32 desinty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desinty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desinty_)));
          set_has_desinty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_start;
        break;
      }

      // optional int32 start = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_end;
        break;
      }

      // optional int32 end = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void barrage_pack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.barrage_single barrage = 1;
  for (int i = 0; i < this->barrage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->barrage(i), output);
  }

  // repeated int32 storage_id = 2;
  for (int i = 0; i < this->storage_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->storage_id(i), output);
  }

  // optional int32 desinty = 3;
  if (has_desinty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->desinty(), output);
  }

  // optional int32 start = 5;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->start(), output);
  }

  // optional int32 end = 6;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* barrage_pack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.barrage_single barrage = 1;
  for (int i = 0; i < this->barrage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->barrage(i), target);
  }

  // repeated int32 storage_id = 2;
  for (int i = 0; i < this->storage_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->storage_id(i), target);
  }

  // optional int32 desinty = 3;
  if (has_desinty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->desinty(), target);
  }

  // optional int32 start = 5;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->start(), target);
  }

  // optional int32 end = 6;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int barrage_pack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 desinty = 3;
    if (has_desinty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desinty());
    }

    // optional int32 start = 5;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start());
    }

    // optional int32 end = 6;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end());
    }

  }
  // repeated .SProtoSpace.barrage_single barrage = 1;
  total_size += 1 * this->barrage_size();
  for (int i = 0; i < this->barrage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->barrage(i));
  }

  // repeated int32 storage_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->storage_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->storage_id(i));
    }
    total_size += 1 * this->storage_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void barrage_pack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const barrage_pack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const barrage_pack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void barrage_pack::MergeFrom(const barrage_pack& from) {
  GOOGLE_CHECK_NE(&from, this);
  barrage_.MergeFrom(from.barrage_);
  storage_id_.MergeFrom(from.storage_id_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_desinty()) {
      set_desinty(from.desinty());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void barrage_pack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void barrage_pack::CopyFrom(const barrage_pack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool barrage_pack::IsInitialized() const {

  return true;
}

void barrage_pack::Swap(barrage_pack* other) {
  if (other != this) {
    barrage_.Swap(&other->barrage_);
    storage_id_.Swap(&other->storage_id_);
    std::swap(desinty_, other->desinty_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata barrage_pack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = barrage_pack_descriptor_;
  metadata.reflection = barrage_pack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
