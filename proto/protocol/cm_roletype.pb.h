// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cm_roletype.proto

#ifndef PROTOBUF_cm_5froletype_2eproto__INCLUDED
#define PROTOBUF_cm_5froletype_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cm_5froletype_2eproto();
void protobuf_AssignDesc_cm_5froletype_2eproto();
void protobuf_ShutdownFile_cm_5froletype_2eproto();

class account_role_data;
class unit_attr_data;
class unit_item_data;
class client_skill_data;
class skin_entry;
class skin_data;
class hero_base_info;
class hero_attr_value;
class client_soul_data;
class hero_equip_data;
class talisman_data;
class hero_show_data;
class soul_attr;
class soul_info;
class discover_monster;
class discover_data;
class dischapter_data;
class all_discover_data;
class drop_data;
class role_attr_pair;
class player_property;
class player_skill_info;
class talent_info;
class player_skin_info;
class player_skin_data;
class player_equip_data;
class player_data;
class account_token_data;
class account_gate_data;
class area_gateserver_info;
class game_system;
class chest_data;
class role_chest;
class offical_item_data;
class offical_member_data;
class role_show_role_equipped;
class offical_apply_data;
class offical_apply_my_battle_data;
class offical_apply_battle_data;
class rank_base_item;
class rank_common_item;
class public_role_base_info;
class role_base_3part;
class coordinate;
class role_position;
class role_move;
class chat_room_state;
class plot_screen_info;
class add_character_attr_info;
class add_royal_value_info;
class character_attr_info;
class itemid_and_num;
class mail_attach;
class mail_instance_attaches;
class mail_instance;
class mail_from_role_info;
class mail;
class mail_template;
class event_offical_info;
class event_offical_reduce;
class event_flower_info;
class event_flower_send_info;
class db_event_msg_info;
class share_officer_upgrade;
class first_award_unit;
class flower_info;
class flower_send_info;
class offical_battle_report_unit;
class talent_data;
class talent_battlt_data;
class cli_unit_role_fashion;
class fashions_pack;
class red_pt_info;
class red_pt_infos;
class match_interval;
class grade_match_conf;
class single_plot_little_game;
class pack_plot_little_game;
class pet_attr_state;
class pet_out_event_item;
class pet_out_event_data;
class pet_single_data;
class pet_pack_data;

enum UserStatus {
  OFFLINE = 0,
  ONLINE = 1
};
bool UserStatus_IsValid(int value);
const UserStatus UserStatus_MIN = OFFLINE;
const UserStatus UserStatus_MAX = ONLINE;
const int UserStatus_ARRAYSIZE = UserStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserStatus_descriptor();
inline const ::std::string& UserStatus_Name(UserStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserStatus_descriptor(), value);
}
inline bool UserStatus_Parse(
    const ::std::string& name, UserStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserStatus>(
    UserStatus_descriptor(), name, value);
}
enum eCommonDefine {
  max_role_hero_size = 128,
  max_role_bag_size = 2048,
  max_hero_symbol_size = 6,
  max_role_skill_size = 12,
  max_role_friends_size = 50,
  max_hero_model_size = 3,
  max_daily_activity_size = 32,
  max_team_heros_size = 11,
  max_rs_reward_size = 10,
  max_largemap_box_size = 256,
  max_sevenday_activity_size = 700,
  max_skill_cfg_size = 3,
  max_gold_num = 999999999,
  max_jade_num = 999999999,
  max_merit_num = 999999999,
  max_activity_num = 999999999,
  max_tailent_point_num = 999999999,
  MAX_ROLE_NAME_LENGTH = 32,
  MAX_HERO_NAME_LENGTH = 16,
  MAX_GUILD_NAME_LENGTH = 32,
  MAX_SIGNATURE_LENGTH = 32,
  MAX_SHOW_HERO_SIZE = 6,
  MAX_SHOW_SIGNATURE_LENGTH = 90,
  MAX_COMMENT_LENGTH = 256,
  MAX_POSITION_LENGTH = 32,
  MAX_FORMATION_HERO_NUM = 4,
  MAX_ROLE_AGE = 100,
  MIN_ROLE_AGE = 1,
  MAX_HERO_QUALITY_NUM = 20
};
bool eCommonDefine_IsValid(int value);
const eCommonDefine eCommonDefine_MIN = MIN_ROLE_AGE;
const eCommonDefine eCommonDefine_MAX = max_gold_num;
const int eCommonDefine_ARRAYSIZE = eCommonDefine_MAX + 1;

const ::google::protobuf::EnumDescriptor* eCommonDefine_descriptor();
inline const ::std::string& eCommonDefine_Name(eCommonDefine value) {
  return ::google::protobuf::internal::NameOfEnum(
    eCommonDefine_descriptor(), value);
}
inline bool eCommonDefine_Parse(
    const ::std::string& name, eCommonDefine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eCommonDefine>(
    eCommonDefine_descriptor(), name, value);
}
enum eCreateResult {
  create_result_ok = 0,
  create_result_fail = 1,
  create_result_duplicate = 2,
  create_result_sensitive_word = 3,
  create_result_state_error = 4
};
bool eCreateResult_IsValid(int value);
const eCreateResult eCreateResult_MIN = create_result_ok;
const eCreateResult eCreateResult_MAX = create_result_state_error;
const int eCreateResult_ARRAYSIZE = eCreateResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* eCreateResult_descriptor();
inline const ::std::string& eCreateResult_Name(eCreateResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    eCreateResult_descriptor(), value);
}
inline bool eCreateResult_Parse(
    const ::std::string& name, eCreateResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eCreateResult>(
    eCreateResult_descriptor(), name, value);
}
enum eEnterGameAck {
  ENTER_GAME_SUCC = 0,
  ENTER_GAME_CAN_NOT_FIND_ROLE = 1,
  ENTER_GAME_STATE_ERROR = 2,
  ENTER_GAME_CAN_NOT_FIND_GAME = 3,
  ENTER_GAME_IN_BATTLE = 4,
  ENTER_GAME_LOAD_ERROR = 5
};
bool eEnterGameAck_IsValid(int value);
const eEnterGameAck eEnterGameAck_MIN = ENTER_GAME_SUCC;
const eEnterGameAck eEnterGameAck_MAX = ENTER_GAME_LOAD_ERROR;
const int eEnterGameAck_ARRAYSIZE = eEnterGameAck_MAX + 1;

const ::google::protobuf::EnumDescriptor* eEnterGameAck_descriptor();
inline const ::std::string& eEnterGameAck_Name(eEnterGameAck value) {
  return ::google::protobuf::internal::NameOfEnum(
    eEnterGameAck_descriptor(), value);
}
inline bool eEnterGameAck_Parse(
    const ::std::string& name, eEnterGameAck* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eEnterGameAck>(
    eEnterGameAck_descriptor(), name, value);
}
enum EQuerySceneType {
  QUERY_SCENE_TYPE_LOGIN = 0,
  QUERY_SCENE_TYPE_SWITCH_SCENE_TYPE = 1,
  QUERY_SCENE_TYPE_SWITCH_SCENE_ID = 2
};
bool EQuerySceneType_IsValid(int value);
const EQuerySceneType EQuerySceneType_MIN = QUERY_SCENE_TYPE_LOGIN;
const EQuerySceneType EQuerySceneType_MAX = QUERY_SCENE_TYPE_SWITCH_SCENE_ID;
const int EQuerySceneType_ARRAYSIZE = EQuerySceneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EQuerySceneType_descriptor();
inline const ::std::string& EQuerySceneType_Name(EQuerySceneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EQuerySceneType_descriptor(), value);
}
inline bool EQuerySceneType_Parse(
    const ::std::string& name, EQuerySceneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EQuerySceneType>(
    EQuerySceneType_descriptor(), name, value);
}
enum ECreateSceneType {
  CREATE_SCENE_TYPE_SYS = 0,
  CREATE_SCENE_TYPE_SWITCH = 1
};
bool ECreateSceneType_IsValid(int value);
const ECreateSceneType ECreateSceneType_MIN = CREATE_SCENE_TYPE_SYS;
const ECreateSceneType ECreateSceneType_MAX = CREATE_SCENE_TYPE_SWITCH;
const int ECreateSceneType_ARRAYSIZE = ECreateSceneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECreateSceneType_descriptor();
inline const ::std::string& ECreateSceneType_Name(ECreateSceneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECreateSceneType_descriptor(), value);
}
inline bool ECreateSceneType_Parse(
    const ::std::string& name, ECreateSceneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECreateSceneType>(
    ECreateSceneType_descriptor(), name, value);
}
enum ESceneType {
  SCENE_TYPE_DEFAULT = 1,
  SCENE_TYPE_1V1 = 2,
  SCENE_CHAT_ROOM = 3
};
bool ESceneType_IsValid(int value);
const ESceneType ESceneType_MIN = SCENE_TYPE_DEFAULT;
const ESceneType ESceneType_MAX = SCENE_CHAT_ROOM;
const int ESceneType_ARRAYSIZE = ESceneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESceneType_descriptor();
inline const ::std::string& ESceneType_Name(ESceneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESceneType_descriptor(), value);
}
inline bool ESceneType_Parse(
    const ::std::string& name, ESceneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESceneType>(
    ESceneType_descriptor(), name, value);
}
enum EChat3DSceneType {
  CHAT3DSCENE_ORDINARY = 0,
  CHAT3DSCENE_ROMANTIC = 1
};
bool EChat3DSceneType_IsValid(int value);
const EChat3DSceneType EChat3DSceneType_MIN = CHAT3DSCENE_ORDINARY;
const EChat3DSceneType EChat3DSceneType_MAX = CHAT3DSCENE_ROMANTIC;
const int EChat3DSceneType_ARRAYSIZE = EChat3DSceneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EChat3DSceneType_descriptor();
inline const ::std::string& EChat3DSceneType_Name(EChat3DSceneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EChat3DSceneType_descriptor(), value);
}
inline bool EChat3DSceneType_Parse(
    const ::std::string& name, EChat3DSceneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EChat3DSceneType>(
    EChat3DSceneType_descriptor(), name, value);
}
enum EAreaState {
  AREA_STATE_GOOD = 1,
  AREA_STATE_BUSY = 2,
  AREA_STATE_CROWD = 3,
  AREA_STATE_MAINTENANCE = 4
};
bool EAreaState_IsValid(int value);
const EAreaState EAreaState_MIN = AREA_STATE_GOOD;
const EAreaState EAreaState_MAX = AREA_STATE_MAINTENANCE;
const int EAreaState_ARRAYSIZE = EAreaState_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAreaState_descriptor();
inline const ::std::string& EAreaState_Name(EAreaState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAreaState_descriptor(), value);
}
inline bool EAreaState_Parse(
    const ::std::string& name, EAreaState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAreaState>(
    EAreaState_descriptor(), name, value);
}
enum EAwardType {
  AWARD_COIN = 1,
  AWARD_DIAMONDS = 2,
  AWARD_CORPS_EXP = 3,
  AWARD_TOY_CURRENCY = 4,
  AWARD_ITEM = 5,
  AWARD_HERO = 6,
  AWARD_ENERGY = 7
};
bool EAwardType_IsValid(int value);
const EAwardType EAwardType_MIN = AWARD_COIN;
const EAwardType EAwardType_MAX = AWARD_ENERGY;
const int EAwardType_ARRAYSIZE = EAwardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAwardType_descriptor();
inline const ::std::string& EAwardType_Name(EAwardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAwardType_descriptor(), value);
}
inline bool EAwardType_Parse(
    const ::std::string& name, EAwardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAwardType>(
    EAwardType_descriptor(), name, value);
}
enum EToyCurrencyType {
  TOY_CURRENCY_ARENA = 1,
  TOY_CURRENCY_EXPED = 2,
  TOY_CURRENCY_MOBA = 3,
  TOY_CURRENCY_SOCIETYCON = 4,
  TOY_CURRENCY_SOCIETYEXP = 5,
  TOY_CURRENCY_CRYSTAL = 6,
  TOY_CURRENCY_VIGOUR = 7,
  TOY_CURRENCY_PEERAGE_EXP = 8,
  TOY_CURRENCY_ZODIAC_SOUL = 9
};
bool EToyCurrencyType_IsValid(int value);
const EToyCurrencyType EToyCurrencyType_MIN = TOY_CURRENCY_ARENA;
const EToyCurrencyType EToyCurrencyType_MAX = TOY_CURRENCY_ZODIAC_SOUL;
const int EToyCurrencyType_ARRAYSIZE = EToyCurrencyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EToyCurrencyType_descriptor();
inline const ::std::string& EToyCurrencyType_Name(EToyCurrencyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EToyCurrencyType_descriptor(), value);
}
inline bool EToyCurrencyType_Parse(
    const ::std::string& name, EToyCurrencyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EToyCurrencyType>(
    EToyCurrencyType_descriptor(), name, value);
}
enum EQArardType {
  QARARDTYPE_ITEM = 1,
  QARARDTYPE_DROP = 2,
  QARARDTYPE_ROYAL = 3,
  QARARDTYPE_ADD_HERO_EXP = 4
};
bool EQArardType_IsValid(int value);
const EQArardType EQArardType_MIN = QARARDTYPE_ITEM;
const EQArardType EQArardType_MAX = QARARDTYPE_ADD_HERO_EXP;
const int EQArardType_ARRAYSIZE = EQArardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EQArardType_descriptor();
inline const ::std::string& EQArardType_Name(EQArardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EQArardType_descriptor(), value);
}
inline bool EQArardType_Parse(
    const ::std::string& name, EQArardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EQArardType>(
    EQArardType_descriptor(), name, value);
}
enum EBagType {
  ROLE_MAIN_BAG = 0,
  ROLE_FASHION_BAG = 1,
  ROLE_TALISMAN_BAG = 2,
  HERO_TALISMAN_BAG = 3
};
bool EBagType_IsValid(int value);
const EBagType EBagType_MIN = ROLE_MAIN_BAG;
const EBagType EBagType_MAX = HERO_TALISMAN_BAG;
const int EBagType_ARRAYSIZE = EBagType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBagType_descriptor();
inline const ::std::string& EBagType_Name(EBagType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBagType_descriptor(), value);
}
inline bool EBagType_Parse(
    const ::std::string& name, EBagType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBagType>(
    EBagType_descriptor(), name, value);
}
enum EItemClass {
  EItemClass_None = 0,
  EItemClass_Money = 1,
  EItemClass_Hero = 3,
  EItemClass_Cloth = 4,
  EItemClass_Item = 5,
  EItemClass_Equip = 6,
  EItemClass_Debris = 7,
  EItemClass_CHEST = 8,
  EItemClass_FLOWER = 9,
  EItemClass_Upgrade_Equip = 10,
  EItemClass_Upgrade_Item = 11,
  EItemClass_Talisman = 12,
  EItemClass_Gift = 13,
  EItemClass_Talisman_Debris = 14,
  EItemClass_RolePetFood = 15
};
bool EItemClass_IsValid(int value);
const EItemClass EItemClass_MIN = EItemClass_None;
const EItemClass EItemClass_MAX = EItemClass_RolePetFood;
const int EItemClass_ARRAYSIZE = EItemClass_MAX + 1;

const ::google::protobuf::EnumDescriptor* EItemClass_descriptor();
inline const ::std::string& EItemClass_Name(EItemClass value) {
  return ::google::protobuf::internal::NameOfEnum(
    EItemClass_descriptor(), value);
}
inline bool EItemClass_Parse(
    const ::std::string& name, EItemClass* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EItemClass>(
    EItemClass_descriptor(), name, value);
}
enum EItemType {
  EITEMTYPE_None = 0,
  EITEMTYPE_GOLD = 101,
  EITEMTYPE_JADE = 102,
  EITEMTYPE_POWER = 103,
  EITEMTYPE_ENERGY = 104,
  EITEMTYPE_EXP = 105,
  EITEMTYPE_SKILLPOINT = 106,
  EITEMTYPE_INTIMACY = 107,
  EITEMTYPE_MERIT = 108,
  EITEMTYPE_TASK_ACTIVITY = 109,
  EITEMTYPE_TALENT_POINT = 110,
  EITEMTYPE_HERO_CARD = 301,
  EITEMTYPE_CLOTHES = 401,
  EITEMTYPE_FASHION_TIME = 402,
  EITEMTYPE_FASHION = 403,
  EITEMTYPE_ITEM_NORMAL = 501,
  EITEMTYPE_3DCHAT_TOP = 502,
  EITEMTYPE_3DCHAT_NAME = 503,
  EITEMTYPE_EQUIP_NORMAL = 601,
  EITEMTYPE_FAMOUS_MAN_SHARD = 701,
  EITEMTYPE_RANDOM_CHEST = 801,
  EITEMTYPE_CHOOSE_CHEST = 802,
  EITEMTYPE_FLOWER = 901,
  EITEMTYPE_UPGRADE_EQUIP_1 = 1001,
  EITEMTYPE_UPGRADE_EQUIP_2 = 1002,
  EITEMTYPE_UPGRADE_EQUIP_3 = 1003,
  EITEMTYPE_UPGRADE_EQUIP_4 = 1004,
  EITEMTYPE_UPGRADE_EQUIP_5 = 1005,
  EITEMTYPE_UPGRADE_EQUIP_6 = 1006,
  EITEMTYPE_UPGRADE_ITEM = 1101,
  EITEMTYPE_TALISMAN = 1201,
  EITEMTYPE_TALISMAN_EXP = 1202,
  EITEMTYPE_GIFT_NOEMAL = 1301,
  EITEMTYPE_GIFT_FAMOUS_MAN = 1302,
  EITEMTYPE_WINE_CUP = 112,
  EITEMTYPE_WINE = 111,
  EITEMTYPE_ROLE_PET_FOOD = 1501
};
bool EItemType_IsValid(int value);
const EItemType EItemType_MIN = EITEMTYPE_None;
const EItemType EItemType_MAX = EITEMTYPE_ROLE_PET_FOOD;
const int EItemType_ARRAYSIZE = EItemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EItemType_descriptor();
inline const ::std::string& EItemType_Name(EItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EItemType_descriptor(), value);
}
inline bool EItemType_Parse(
    const ::std::string& name, EItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EItemType>(
    EItemType_descriptor(), name, value);
}
enum EItemUseType {
  EItemUseType_NO_CAN_USE = 0,
  EItemUseType_GET_ITEM = 1,
  EItemUseType_GET_RESOURE_ITEM = 2,
  EItemUseType_JUMP_UI = 3,
  EItemUseType_ADD_TIME = 4
};
bool EItemUseType_IsValid(int value);
const EItemUseType EItemUseType_MIN = EItemUseType_NO_CAN_USE;
const EItemUseType EItemUseType_MAX = EItemUseType_ADD_TIME;
const int EItemUseType_ARRAYSIZE = EItemUseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EItemUseType_descriptor();
inline const ::std::string& EItemUseType_Name(EItemUseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EItemUseType_descriptor(), value);
}
inline bool EItemUseType_Parse(
    const ::std::string& name, EItemUseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EItemUseType>(
    EItemUseType_descriptor(), name, value);
}
enum EItemUseConditionType {
  EITEM_USE_CONDITION_TYPE_NONE = 0,
  EITEM_USE_CONDITION_TYPE_LV = 1,
  EITEM_USE_CONDITION_TYPE_VIP = 2,
  EITEM_USE_CONDITION_TYPE_OFFICE = 3
};
bool EItemUseConditionType_IsValid(int value);
const EItemUseConditionType EItemUseConditionType_MIN = EITEM_USE_CONDITION_TYPE_NONE;
const EItemUseConditionType EItemUseConditionType_MAX = EITEM_USE_CONDITION_TYPE_OFFICE;
const int EItemUseConditionType_ARRAYSIZE = EItemUseConditionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EItemUseConditionType_descriptor();
inline const ::std::string& EItemUseConditionType_Name(EItemUseConditionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EItemUseConditionType_descriptor(), value);
}
inline bool EItemUseConditionType_Parse(
    const ::std::string& name, EItemUseConditionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EItemUseConditionType>(
    EItemUseConditionType_descriptor(), name, value);
}
enum EItemUseGetType {
  EITEM_USE_GET_TYPE_DIRECTOR = 0,
  EITEM_USE_GET_TYPE_CHOOSE = 1
};
bool EItemUseGetType_IsValid(int value);
const EItemUseGetType EItemUseGetType_MIN = EITEM_USE_GET_TYPE_DIRECTOR;
const EItemUseGetType EItemUseGetType_MAX = EITEM_USE_GET_TYPE_CHOOSE;
const int EItemUseGetType_ARRAYSIZE = EItemUseGetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EItemUseGetType_descriptor();
inline const ::std::string& EItemUseGetType_Name(EItemUseGetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EItemUseGetType_descriptor(), value);
}
inline bool EItemUseGetType_Parse(
    const ::std::string& name, EItemUseGetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EItemUseGetType>(
    EItemUseGetType_descriptor(), name, value);
}
enum EOperaType {
  OPERA_TYPE_ADD = 0,
  OPERA_TYPE_DELETE = 1,
  OPERA_TYPE_UPDATE = 2
};
bool EOperaType_IsValid(int value);
const EOperaType EOperaType_MIN = OPERA_TYPE_ADD;
const EOperaType EOperaType_MAX = OPERA_TYPE_UPDATE;
const int EOperaType_ARRAYSIZE = EOperaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EOperaType_descriptor();
inline const ::std::string& EOperaType_Name(EOperaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EOperaType_descriptor(), value);
}
inline bool EOperaType_Parse(
    const ::std::string& name, EOperaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EOperaType>(
    EOperaType_descriptor(), name, value);
}
enum eKickoutReason {
  KickoutReason_login = 1
};
bool eKickoutReason_IsValid(int value);
const eKickoutReason eKickoutReason_MIN = KickoutReason_login;
const eKickoutReason eKickoutReason_MAX = KickoutReason_login;
const int eKickoutReason_ARRAYSIZE = eKickoutReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* eKickoutReason_descriptor();
inline const ::std::string& eKickoutReason_Name(eKickoutReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    eKickoutReason_descriptor(), value);
}
inline bool eKickoutReason_Parse(
    const ::std::string& name, eKickoutReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eKickoutReason>(
    eKickoutReason_descriptor(), name, value);
}
enum EAttribute {
  ATTR_CURHP = 0,
  ATTR_MAXHP = 1,
  ATTR_ATK = 2,
  ATTR_PHY_DEF = 3,
  ATTR_MAG_DEF = 4,
  ATTR_ATK_SPEED = 5,
  ATTR_CRIT = 6,
  ATTR_FLEX = 7,
  ATTR_CRIT_DMG = 8,
  ATTR_CRIT_DMG_DEF = 9,
  ATTR_EFFECT_HIT = 10,
  ATTR_EFFECT_DEF = 11,
  ATTR_HIT = 12,
  ATTR_DODGE = 13,
  ATTR_PIERCE = 14,
  ATTR_CURE_MODIFY = 15,
  ATTR_BECURE_MODIFY = 16,
  ATTR_MAXHP_FINAL_PER = 17,
  ATTR_HURT_OTHER_MODIFY = 18,
  ATTR_BE_HURT_MODIFY = 19,
  ATTR_MAX_POWER = 20,
  ATTR_MAX_EP = 21,
  ATTR_MAX_SP = 22,
  ATTR_EXP_MODIFY = 23,
  ATTR_MONEY_MODIFY = 24,
  ATTR_DROP_MODIFY = 25,
  ATTR_HP = 26,
  ATTR_POWER = 27,
  ATTR_EP = 28,
  ATTR_SP = 29,
  ATTR_MAX_AP = 30,
  ATTR_AP = 31,
  ATTR_INIT_SP = 32
};
bool EAttribute_IsValid(int value);
const EAttribute EAttribute_MIN = ATTR_CURHP;
const EAttribute EAttribute_MAX = ATTR_INIT_SP;
const int EAttribute_ARRAYSIZE = EAttribute_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAttribute_descriptor();
inline const ::std::string& EAttribute_Name(EAttribute value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAttribute_descriptor(), value);
}
inline bool EAttribute_Parse(
    const ::std::string& name, EAttribute* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAttribute>(
    EAttribute_descriptor(), name, value);
}
enum EEffect {
  EFF_ADD_DMG = 1,
  EFF_ADD_ATK = 2,
  EFF_ADD_DEF = 3,
  EFF_ADD_CRIT = 4,
  EFF_ADD_SPEED = 5,
  EFF_ADD_CRIT_DMG = 6,
  EFF_ADD_RES = 7,
  EFF_ADD_ACC = 8,
  EFF_GUILDER = 9,
  EFF_REDUCE_DMG = 10,
  EFF_REDUCE_ATK = 11,
  EFF_REDUCE_DEF = 12,
  EFF_REDUCE_CRIT = 13,
  EFF_REDUCE_SPEED = 14,
  EFF_REDUCE_CRIT_DMG = 15,
  EFF_REDUCE_RES = 16,
  EFF_REDUCE_ACC = 17,
  EFF_REDUCE_CURE = 18,
  EFF_REDUCE_MAX_HP = 19,
  EFF_TAUNT = 20,
  EFF_CONFUSION = 21,
  EFF_SLEEP = 22,
  EFF_FROZEN = 23,
  EFF_SILENCE = 24,
  EFF_SEAL = 25,
  EFF_SEAL_PASSIVE = 26,
  EFF_REDUCE_HP = 27,
  EFF_ADD_INJURE = 28
};
bool EEffect_IsValid(int value);
const EEffect EEffect_MIN = EFF_ADD_DMG;
const EEffect EEffect_MAX = EFF_ADD_INJURE;
const int EEffect_ARRAYSIZE = EEffect_MAX + 1;

const ::google::protobuf::EnumDescriptor* EEffect_descriptor();
inline const ::std::string& EEffect_Name(EEffect value) {
  return ::google::protobuf::internal::NameOfEnum(
    EEffect_descriptor(), value);
}
inline bool EEffect_Parse(
    const ::std::string& name, EEffect* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EEffect>(
    EEffect_descriptor(), name, value);
}
enum ERoleSexType {
  E_ROLE_SEX_TYPE_NONE = 0,
  E_ROLE_SEX_TYPE_MALE = 1,
  E_ROLE_SEX_TYPE_FEMALE = 2,
  E_ROLE_SEX_TYPE_UNDEFINED = 3
};
bool ERoleSexType_IsValid(int value);
const ERoleSexType ERoleSexType_MIN = E_ROLE_SEX_TYPE_NONE;
const ERoleSexType ERoleSexType_MAX = E_ROLE_SEX_TYPE_UNDEFINED;
const int ERoleSexType_ARRAYSIZE = ERoleSexType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERoleSexType_descriptor();
inline const ::std::string& ERoleSexType_Name(ERoleSexType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERoleSexType_descriptor(), value);
}
inline bool ERoleSexType_Parse(
    const ::std::string& name, ERoleSexType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERoleSexType>(
    ERoleSexType_descriptor(), name, value);
}
enum ESoulSlot {
  SOUL_SLOT_1 = 0,
  SOUL_SLOT_2 = 1,
  SOUL_SLOT_3 = 2,
  SOUL_SLOT_4 = 3,
  SOUL_SLOT_5 = 4,
  SOUL_SLOT_6 = 5
};
bool ESoulSlot_IsValid(int value);
const ESoulSlot ESoulSlot_MIN = SOUL_SLOT_1;
const ESoulSlot ESoulSlot_MAX = SOUL_SLOT_6;
const int ESoulSlot_ARRAYSIZE = ESoulSlot_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESoulSlot_descriptor();
inline const ::std::string& ESoulSlot_Name(ESoulSlot value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESoulSlot_descriptor(), value);
}
inline bool ESoulSlot_Parse(
    const ::std::string& name, ESoulSlot* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESoulSlot>(
    ESoulSlot_descriptor(), name, value);
}
enum EHeroEquipSlot {
  HERO_EQUIP_SLOT_1 = 1,
  HERO_EQUIP_SLOT_2 = 2,
  HERO_EQUIP_SLOT_3 = 3,
  HERO_EQUIP_SLOT_4 = 4,
  HERO_EQUIP_SLOT_5 = 5,
  HERO_EQUIP_SLOT_6 = 6
};
bool EHeroEquipSlot_IsValid(int value);
const EHeroEquipSlot EHeroEquipSlot_MIN = HERO_EQUIP_SLOT_1;
const EHeroEquipSlot EHeroEquipSlot_MAX = HERO_EQUIP_SLOT_6;
const int EHeroEquipSlot_ARRAYSIZE = EHeroEquipSlot_MAX + 1;

const ::google::protobuf::EnumDescriptor* EHeroEquipSlot_descriptor();
inline const ::std::string& EHeroEquipSlot_Name(EHeroEquipSlot value) {
  return ::google::protobuf::internal::NameOfEnum(
    EHeroEquipSlot_descriptor(), value);
}
inline bool EHeroEquipSlot_Parse(
    const ::std::string& name, EHeroEquipSlot* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EHeroEquipSlot>(
    EHeroEquipSlot_descriptor(), name, value);
}
enum EHeroTalismanSlot {
  TALISMAN_SLOT_1 = 0,
  TALISMAN_SLOT_2 = 1
};
bool EHeroTalismanSlot_IsValid(int value);
const EHeroTalismanSlot EHeroTalismanSlot_MIN = TALISMAN_SLOT_1;
const EHeroTalismanSlot EHeroTalismanSlot_MAX = TALISMAN_SLOT_2;
const int EHeroTalismanSlot_ARRAYSIZE = EHeroTalismanSlot_MAX + 1;

const ::google::protobuf::EnumDescriptor* EHeroTalismanSlot_descriptor();
inline const ::std::string& EHeroTalismanSlot_Name(EHeroTalismanSlot value) {
  return ::google::protobuf::internal::NameOfEnum(
    EHeroTalismanSlot_descriptor(), value);
}
inline bool EHeroTalismanSlot_Parse(
    const ::std::string& name, EHeroTalismanSlot* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EHeroTalismanSlot>(
    EHeroTalismanSlot_descriptor(), name, value);
}
enum ETalismanChangeType {
  E_TALISMAN_LVUP = 0,
  E_TALISMAN_BREAK = 1
};
bool ETalismanChangeType_IsValid(int value);
const ETalismanChangeType ETalismanChangeType_MIN = E_TALISMAN_LVUP;
const ETalismanChangeType ETalismanChangeType_MAX = E_TALISMAN_BREAK;
const int ETalismanChangeType_ARRAYSIZE = ETalismanChangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETalismanChangeType_descriptor();
inline const ::std::string& ETalismanChangeType_Name(ETalismanChangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETalismanChangeType_descriptor(), value);
}
inline bool ETalismanChangeType_Parse(
    const ::std::string& name, ETalismanChangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETalismanChangeType>(
    ETalismanChangeType_descriptor(), name, value);
}
enum ETalismanDestType {
  E_TALISMAN_NONE = 0,
  E_TALISMAN_PLAYER = 1,
  E_TALISMAN_HERO = 2
};
bool ETalismanDestType_IsValid(int value);
const ETalismanDestType ETalismanDestType_MIN = E_TALISMAN_NONE;
const ETalismanDestType ETalismanDestType_MAX = E_TALISMAN_HERO;
const int ETalismanDestType_ARRAYSIZE = ETalismanDestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETalismanDestType_descriptor();
inline const ::std::string& ETalismanDestType_Name(ETalismanDestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETalismanDestType_descriptor(), value);
}
inline bool ETalismanDestType_Parse(
    const ::std::string& name, ETalismanDestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETalismanDestType>(
    ETalismanDestType_descriptor(), name, value);
}
enum EOperatorType {
  OPERATOR_TYPE_ADD = 1,
  OPERATOR_TYPE_REDUCE = 2
};
bool EOperatorType_IsValid(int value);
const EOperatorType EOperatorType_MIN = OPERATOR_TYPE_ADD;
const EOperatorType EOperatorType_MAX = OPERATOR_TYPE_REDUCE;
const int EOperatorType_ARRAYSIZE = EOperatorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EOperatorType_descriptor();
inline const ::std::string& EOperatorType_Name(EOperatorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EOperatorType_descriptor(), value);
}
inline bool EOperatorType_Parse(
    const ::std::string& name, EOperatorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EOperatorType>(
    EOperatorType_descriptor(), name, value);
}
enum EOperatorDataType {
  OPERATOR_DATA_TYPE_DATA = 0,
  OPERATOR_DATA_TYPE_PERCENT = 1,
  OPERATOR_DATA_TYPE_MODIFY = 2
};
bool EOperatorDataType_IsValid(int value);
const EOperatorDataType EOperatorDataType_MIN = OPERATOR_DATA_TYPE_DATA;
const EOperatorDataType EOperatorDataType_MAX = OPERATOR_DATA_TYPE_MODIFY;
const int EOperatorDataType_ARRAYSIZE = EOperatorDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EOperatorDataType_descriptor();
inline const ::std::string& EOperatorDataType_Name(EOperatorDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EOperatorDataType_descriptor(), value);
}
inline bool EOperatorDataType_Parse(
    const ::std::string& name, EOperatorDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EOperatorDataType>(
    EOperatorDataType_descriptor(), name, value);
}
enum ESkillCfgOptType {
  SKILL_CFG_OPT_TYPE_REMOVE = 1,
  SKILL_CFG_OPT_TYPE_SET = 2
};
bool ESkillCfgOptType_IsValid(int value);
const ESkillCfgOptType ESkillCfgOptType_MIN = SKILL_CFG_OPT_TYPE_REMOVE;
const ESkillCfgOptType ESkillCfgOptType_MAX = SKILL_CFG_OPT_TYPE_SET;
const int ESkillCfgOptType_ARRAYSIZE = ESkillCfgOptType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESkillCfgOptType_descriptor();
inline const ::std::string& ESkillCfgOptType_Name(ESkillCfgOptType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESkillCfgOptType_descriptor(), value);
}
inline bool ESkillCfgOptType_Parse(
    const ::std::string& name, ESkillCfgOptType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESkillCfgOptType>(
    ESkillCfgOptType_descriptor(), name, value);
}
enum ESkinOpenType {
  SKIN_OPEN_TYPE_NONE = 0,
  SKIN_OPEN_TYPE_ROLE_LEVEL = 1,
  SKIN_OPEN_TYPE_VIP_LEVEL = 2,
  SKIN_OPEN_TYPE_GRADE = 3,
  SKIN_OPEN_TYPE_JADE = 4,
  SKIN_OPEN_TYPE_SKIN_TICKET = 5
};
bool ESkinOpenType_IsValid(int value);
const ESkinOpenType ESkinOpenType_MIN = SKIN_OPEN_TYPE_NONE;
const ESkinOpenType ESkinOpenType_MAX = SKIN_OPEN_TYPE_SKIN_TICKET;
const int ESkinOpenType_ARRAYSIZE = ESkinOpenType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESkinOpenType_descriptor();
inline const ::std::string& ESkinOpenType_Name(ESkinOpenType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESkinOpenType_descriptor(), value);
}
inline bool ESkinOpenType_Parse(
    const ::std::string& name, ESkinOpenType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESkinOpenType>(
    ESkinOpenType_descriptor(), name, value);
}
enum EFormtionHeroType {
  FORMATION_HERO_TYPE_BATTLE = 1,
  FORMATION_HERO_TYPE_VIEW = 2
};
bool EFormtionHeroType_IsValid(int value);
const EFormtionHeroType EFormtionHeroType_MIN = FORMATION_HERO_TYPE_BATTLE;
const EFormtionHeroType EFormtionHeroType_MAX = FORMATION_HERO_TYPE_VIEW;
const int EFormtionHeroType_ARRAYSIZE = EFormtionHeroType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EFormtionHeroType_descriptor();
inline const ::std::string& EFormtionHeroType_Name(EFormtionHeroType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EFormtionHeroType_descriptor(), value);
}
inline bool EFormtionHeroType_Parse(
    const ::std::string& name, EFormtionHeroType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EFormtionHeroType>(
    EFormtionHeroType_descriptor(), name, value);
}
enum ERoleEventType {
  ROLE_EVENT_TYPE_NONE = 0,
  ROLE_EVENT_TYPE_PLAYER_OPEN = 1,
  ROLE_EVENT_TYPE_SKILLUP = 2,
  ROLE_EVENT_TYPE_SKILL_UNLOCK = 3
};
bool ERoleEventType_IsValid(int value);
const ERoleEventType ERoleEventType_MIN = ROLE_EVENT_TYPE_NONE;
const ERoleEventType ERoleEventType_MAX = ROLE_EVENT_TYPE_SKILL_UNLOCK;
const int ERoleEventType_ARRAYSIZE = ERoleEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERoleEventType_descriptor();
inline const ::std::string& ERoleEventType_Name(ERoleEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERoleEventType_descriptor(), value);
}
inline bool ERoleEventType_Parse(
    const ::std::string& name, ERoleEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERoleEventType>(
    ERoleEventType_descriptor(), name, value);
}
enum EHeroInfoChangeTag {
  E_HERO_INFO_CHANGE_UP_LEVEL = 1,
  E_HERO_INFO_CHANGE_UP_STAR = 2,
  E_HERO_INFO_CHANGE_AWAKEN = 3,
  E_HERO_INFO_CHANGE_SKILL_UP = 4,
  E_HERO_INFO_CHANGE_EQUIP = 5,
  E_HERO_INFO_CHANGE_UNEQUIP = 6,
  E_HERO_INFO_QUALITY_UP = 7,
  E_HERO_INFO_ADD_TALISMAN = 8,
  E_HERO_INFO_REMOVE_TALISMAN = 9
};
bool EHeroInfoChangeTag_IsValid(int value);
const EHeroInfoChangeTag EHeroInfoChangeTag_MIN = E_HERO_INFO_CHANGE_UP_LEVEL;
const EHeroInfoChangeTag EHeroInfoChangeTag_MAX = E_HERO_INFO_REMOVE_TALISMAN;
const int EHeroInfoChangeTag_ARRAYSIZE = EHeroInfoChangeTag_MAX + 1;

const ::google::protobuf::EnumDescriptor* EHeroInfoChangeTag_descriptor();
inline const ::std::string& EHeroInfoChangeTag_Name(EHeroInfoChangeTag value) {
  return ::google::protobuf::internal::NameOfEnum(
    EHeroInfoChangeTag_descriptor(), value);
}
inline bool EHeroInfoChangeTag_Parse(
    const ::std::string& name, EHeroInfoChangeTag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EHeroInfoChangeTag>(
    EHeroInfoChangeTag_descriptor(), name, value);
}
enum eItemPropertyType {
  ITEM_PROP_TP_B_BAGIN = 0,
  ITEM_PROP_TP_B_FLAG = 0,
  ITEM_PROP_TP_B_TEMPLATE = 1,
  ITEM_PROP_TP_B_UUID = 2,
  ITEM_PROP_TP_B_OVERLAP = 3,
  ITEM_PROP_TP_B_SPAWN_TIME = 4,
  ITEM_PROP_TP_B_MAX = 5,
  ITEM_PROP_TP_E_BEGIN = 100,
  ITEM_PROP_TP_E_EXPIRE_TIME = 101,
  ITEM_PROP_TP_E_MAX = 102
};
bool eItemPropertyType_IsValid(int value);
const eItemPropertyType eItemPropertyType_MIN = ITEM_PROP_TP_B_BAGIN;
const eItemPropertyType eItemPropertyType_MAX = ITEM_PROP_TP_E_MAX;
const int eItemPropertyType_ARRAYSIZE = eItemPropertyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eItemPropertyType_descriptor();
inline const ::std::string& eItemPropertyType_Name(eItemPropertyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eItemPropertyType_descriptor(), value);
}
inline bool eItemPropertyType_Parse(
    const ::std::string& name, eItemPropertyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eItemPropertyType>(
    eItemPropertyType_descriptor(), name, value);
}
enum eItemFlagBits {
  ITEM_FLAG_BIT_VALID = 0,
  ITEM_FLAG_BIT_LOCK = 1,
  ITEM_FLAG_BIT_BIND = 2,
  ITEM_FLAG_BIT_MODIFY = 31
};
bool eItemFlagBits_IsValid(int value);
const eItemFlagBits eItemFlagBits_MIN = ITEM_FLAG_BIT_VALID;
const eItemFlagBits eItemFlagBits_MAX = ITEM_FLAG_BIT_MODIFY;
const int eItemFlagBits_ARRAYSIZE = eItemFlagBits_MAX + 1;

const ::google::protobuf::EnumDescriptor* eItemFlagBits_descriptor();
inline const ::std::string& eItemFlagBits_Name(eItemFlagBits value) {
  return ::google::protobuf::internal::NameOfEnum(
    eItemFlagBits_descriptor(), value);
}
inline bool eItemFlagBits_Parse(
    const ::std::string& name, eItemFlagBits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eItemFlagBits>(
    eItemFlagBits_descriptor(), name, value);
}
enum eDBGetRedisRoleDataType {
  DB_GET_REDIS_ROLE_DATA_TYPE_BASE = 0,
  DB_GET_REDIS_ROLE_DATA_TYPE_SHOW = 1,
  DB_GET_REDIS_ROLE_DATA_TYPE_JJC = 2,
  DB_GET_REDIS_ROLE_DATA_TYPE_EQUIPPED_CLOTH = 3,
  DB_GET_REDIS_ROLE_DATA_TYPE_FASHION = 4
};
bool eDBGetRedisRoleDataType_IsValid(int value);
const eDBGetRedisRoleDataType eDBGetRedisRoleDataType_MIN = DB_GET_REDIS_ROLE_DATA_TYPE_BASE;
const eDBGetRedisRoleDataType eDBGetRedisRoleDataType_MAX = DB_GET_REDIS_ROLE_DATA_TYPE_FASHION;
const int eDBGetRedisRoleDataType_ARRAYSIZE = eDBGetRedisRoleDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eDBGetRedisRoleDataType_descriptor();
inline const ::std::string& eDBGetRedisRoleDataType_Name(eDBGetRedisRoleDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eDBGetRedisRoleDataType_descriptor(), value);
}
inline bool eDBGetRedisRoleDataType_Parse(
    const ::std::string& name, eDBGetRedisRoleDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eDBGetRedisRoleDataType>(
    eDBGetRedisRoleDataType_descriptor(), name, value);
}
enum eChestQuality {
  CHEST_WOOD = 1,
  CHEST_COPPER = 2,
  CHEST_SILVER = 3,
  CHEST_GOLD = 4
};
bool eChestQuality_IsValid(int value);
const eChestQuality eChestQuality_MIN = CHEST_WOOD;
const eChestQuality eChestQuality_MAX = CHEST_GOLD;
const int eChestQuality_ARRAYSIZE = eChestQuality_MAX + 1;

const ::google::protobuf::EnumDescriptor* eChestQuality_descriptor();
inline const ::std::string& eChestQuality_Name(eChestQuality value) {
  return ::google::protobuf::internal::NameOfEnum(
    eChestQuality_descriptor(), value);
}
inline bool eChestQuality_Parse(
    const ::std::string& name, eChestQuality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eChestQuality>(
    eChestQuality_descriptor(), name, value);
}
enum eMemberStatus {
  eMember_NOT_Ready = 1,
  eMember_Ready = 2
};
bool eMemberStatus_IsValid(int value);
const eMemberStatus eMemberStatus_MIN = eMember_NOT_Ready;
const eMemberStatus eMemberStatus_MAX = eMember_Ready;
const int eMemberStatus_ARRAYSIZE = eMemberStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* eMemberStatus_descriptor();
inline const ::std::string& eMemberStatus_Name(eMemberStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    eMemberStatus_descriptor(), value);
}
inline bool eMemberStatus_Parse(
    const ::std::string& name, eMemberStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eMemberStatus>(
    eMemberStatus_descriptor(), name, value);
}
enum eTeamSize {
  TEAM_TWO = 1,
  TEAM_THREE = 2,
  TEAM_FOUR = 3
};
bool eTeamSize_IsValid(int value);
const eTeamSize eTeamSize_MIN = TEAM_TWO;
const eTeamSize eTeamSize_MAX = TEAM_FOUR;
const int eTeamSize_ARRAYSIZE = eTeamSize_MAX + 1;

const ::google::protobuf::EnumDescriptor* eTeamSize_descriptor();
inline const ::std::string& eTeamSize_Name(eTeamSize value) {
  return ::google::protobuf::internal::NameOfEnum(
    eTeamSize_descriptor(), value);
}
inline bool eTeamSize_Parse(
    const ::std::string& name, eTeamSize* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eTeamSize>(
    eTeamSize_descriptor(), name, value);
}
enum eTeamType {
  TEAM_MAINLINE = 1
};
bool eTeamType_IsValid(int value);
const eTeamType eTeamType_MIN = TEAM_MAINLINE;
const eTeamType eTeamType_MAX = TEAM_MAINLINE;
const int eTeamType_ARRAYSIZE = eTeamType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eTeamType_descriptor();
inline const ::std::string& eTeamType_Name(eTeamType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eTeamType_descriptor(), value);
}
inline bool eTeamType_Parse(
    const ::std::string& name, eTeamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eTeamType>(
    eTeamType_descriptor(), name, value);
}
enum eTeamPermission {
  TEAM_PUBLIC = 1,
  TEAM_PROTECTED = 2
};
bool eTeamPermission_IsValid(int value);
const eTeamPermission eTeamPermission_MIN = TEAM_PUBLIC;
const eTeamPermission eTeamPermission_MAX = TEAM_PROTECTED;
const int eTeamPermission_ARRAYSIZE = eTeamPermission_MAX + 1;

const ::google::protobuf::EnumDescriptor* eTeamPermission_descriptor();
inline const ::std::string& eTeamPermission_Name(eTeamPermission value) {
  return ::google::protobuf::internal::NameOfEnum(
    eTeamPermission_descriptor(), value);
}
inline bool eTeamPermission_Parse(
    const ::std::string& name, eTeamPermission* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eTeamPermission>(
    eTeamPermission_descriptor(), name, value);
}
enum eTeamStatus {
  TEAM_READY = 1,
  TEAM_FIGHT = 2,
  TEAM_FINISH = 3
};
bool eTeamStatus_IsValid(int value);
const eTeamStatus eTeamStatus_MIN = TEAM_READY;
const eTeamStatus eTeamStatus_MAX = TEAM_FINISH;
const int eTeamStatus_ARRAYSIZE = eTeamStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* eTeamStatus_descriptor();
inline const ::std::string& eTeamStatus_Name(eTeamStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    eTeamStatus_descriptor(), value);
}
inline bool eTeamStatus_Parse(
    const ::std::string& name, eTeamStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eTeamStatus>(
    eTeamStatus_descriptor(), name, value);
}
enum eArenaType {
  ARENA_OFFICE = 1
};
bool eArenaType_IsValid(int value);
const eArenaType eArenaType_MIN = ARENA_OFFICE;
const eArenaType eArenaType_MAX = ARENA_OFFICE;
const int eArenaType_ARRAYSIZE = eArenaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eArenaType_descriptor();
inline const ::std::string& eArenaType_Name(eArenaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eArenaType_descriptor(), value);
}
inline bool eArenaType_Parse(
    const ::std::string& name, eArenaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eArenaType>(
    eArenaType_descriptor(), name, value);
}
enum EGrade {
  GRADE_NONE = 0,
  GRADE_9_SEC = 1,
  GRADE_9_FIR = 2,
  GRADE_8_SEC = 3,
  GRADE_8_FIR = 4,
  GRADE_7_SEC = 5,
  GRADE_7_FIR = 6,
  GRADE_6_SEC = 7,
  GRADE_6_FIR = 8,
  GRADE_5_SEC = 9,
  GRADE_5_FIR = 10,
  GRADE_4_SEC = 11,
  GRADE_4_FIR = 12,
  GRADE_3_SEC = 13,
  GRADE_3_FIR = 14,
  GRADE_2_SEC = 15,
  GRADE_2_FIR = 16,
  GRADE_1_SEC = 17,
  GRADE_1_FIR = 18,
  GRADE_0 = 19
};
bool EGrade_IsValid(int value);
const EGrade EGrade_MIN = GRADE_NONE;
const EGrade EGrade_MAX = GRADE_0;
const int EGrade_ARRAYSIZE = EGrade_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGrade_descriptor();
inline const ::std::string& EGrade_Name(EGrade value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGrade_descriptor(), value);
}
inline bool EGrade_Parse(
    const ::std::string& name, EGrade* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGrade>(
    EGrade_descriptor(), name, value);
}
enum EGradeType {
  GRADE_PRIMARY = 1,
  GRADE_MIDDLE = 2,
  GRADE_ADVANCED = 3,
  GRADE_HIGHEST = 4
};
bool EGradeType_IsValid(int value);
const EGradeType EGradeType_MIN = GRADE_PRIMARY;
const EGradeType EGradeType_MAX = GRADE_HIGHEST;
const int EGradeType_ARRAYSIZE = EGradeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGradeType_descriptor();
inline const ::std::string& EGradeType_Name(EGradeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGradeType_descriptor(), value);
}
inline bool EGradeType_Parse(
    const ::std::string& name, EGradeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGradeType>(
    EGradeType_descriptor(), name, value);
}
enum eOfficeTestProgress {
  OFFICE_APPLY = 1,
  OFFICE_CHECK = 2,
  OFFICE_RECRUIT = 3
};
bool eOfficeTestProgress_IsValid(int value);
const eOfficeTestProgress eOfficeTestProgress_MIN = OFFICE_APPLY;
const eOfficeTestProgress eOfficeTestProgress_MAX = OFFICE_RECRUIT;
const int eOfficeTestProgress_ARRAYSIZE = eOfficeTestProgress_MAX + 1;

const ::google::protobuf::EnumDescriptor* eOfficeTestProgress_descriptor();
inline const ::std::string& eOfficeTestProgress_Name(eOfficeTestProgress value) {
  return ::google::protobuf::internal::NameOfEnum(
    eOfficeTestProgress_descriptor(), value);
}
inline bool eOfficeTestProgress_Parse(
    const ::std::string& name, eOfficeTestProgress* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eOfficeTestProgress>(
    eOfficeTestProgress_descriptor(), name, value);
}
enum GET_PLOT_TYPE {
  NEW = 1,
  FULL = 2
};
bool GET_PLOT_TYPE_IsValid(int value);
const GET_PLOT_TYPE GET_PLOT_TYPE_MIN = NEW;
const GET_PLOT_TYPE GET_PLOT_TYPE_MAX = FULL;
const int GET_PLOT_TYPE_ARRAYSIZE = GET_PLOT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GET_PLOT_TYPE_descriptor();
inline const ::std::string& GET_PLOT_TYPE_Name(GET_PLOT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GET_PLOT_TYPE_descriptor(), value);
}
inline bool GET_PLOT_TYPE_Parse(
    const ::std::string& name, GET_PLOT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GET_PLOT_TYPE>(
    GET_PLOT_TYPE_descriptor(), name, value);
}
enum ECHARACTER_ATTRIBUTE_TYPE {
  ERROR_ATTRIBUTE = 0,
  TREASON = 1,
  SCHEMING = 2,
  ADORKABLE = 3,
  TENDER = 4,
  GOOD = 5,
  WISE = 6
};
bool ECHARACTER_ATTRIBUTE_TYPE_IsValid(int value);
const ECHARACTER_ATTRIBUTE_TYPE ECHARACTER_ATTRIBUTE_TYPE_MIN = ERROR_ATTRIBUTE;
const ECHARACTER_ATTRIBUTE_TYPE ECHARACTER_ATTRIBUTE_TYPE_MAX = WISE;
const int ECHARACTER_ATTRIBUTE_TYPE_ARRAYSIZE = ECHARACTER_ATTRIBUTE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECHARACTER_ATTRIBUTE_TYPE_descriptor();
inline const ::std::string& ECHARACTER_ATTRIBUTE_TYPE_Name(ECHARACTER_ATTRIBUTE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECHARACTER_ATTRIBUTE_TYPE_descriptor(), value);
}
inline bool ECHARACTER_ATTRIBUTE_TYPE_Parse(
    const ::std::string& name, ECHARACTER_ATTRIBUTE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECHARACTER_ATTRIBUTE_TYPE>(
    ECHARACTER_ATTRIBUTE_TYPE_descriptor(), name, value);
}
enum RANK_TYPE {
  RANK_PERSONAL = 1000,
  RANK_GONGDOU_FORCE = 1001,
  RANK_OFFICE_LV = 1002,
  RANK_CHARM = 1003,
  RANK_HERO = 1004,
  RANK_LV = 1005,
  RANK_COUPLES = 2000,
  RANK_UNION = 3000,
  RANK_PRINCE = 4000,
  RANK_TOWER = 5000,
  RANK_TOWER_Layer = 5001
};
bool RANK_TYPE_IsValid(int value);
const RANK_TYPE RANK_TYPE_MIN = RANK_PERSONAL;
const RANK_TYPE RANK_TYPE_MAX = RANK_TOWER_Layer;
const int RANK_TYPE_ARRAYSIZE = RANK_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* RANK_TYPE_descriptor();
inline const ::std::string& RANK_TYPE_Name(RANK_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    RANK_TYPE_descriptor(), value);
}
inline bool RANK_TYPE_Parse(
    const ::std::string& name, RANK_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RANK_TYPE>(
    RANK_TYPE_descriptor(), name, value);
}
enum ERoyalEventResult {
  ERoyalEventResult1 = 1,
  ERoyalEventResult2 = 2,
  ERoyalEventResult3 = 3,
  ERoyalEventResult4 = 4
};
bool ERoyalEventResult_IsValid(int value);
const ERoyalEventResult ERoyalEventResult_MIN = ERoyalEventResult1;
const ERoyalEventResult ERoyalEventResult_MAX = ERoyalEventResult4;
const int ERoyalEventResult_ARRAYSIZE = ERoyalEventResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERoyalEventResult_descriptor();
inline const ::std::string& ERoyalEventResult_Name(ERoyalEventResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERoyalEventResult_descriptor(), value);
}
inline bool ERoyalEventResult_Parse(
    const ::std::string& name, ERoyalEventResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERoyalEventResult>(
    ERoyalEventResult_descriptor(), name, value);
}
enum TASK_TYPE {
  TASK_CHALLENGE_GUANKA = 1,
  TASK_PASS_GUANKA = 2,
  TASK_TOTAL_STAR_GUANKA = 4,
  TASK_PASS_DIFF_GUANKA = 7,
  TASK_HERO_UPGRADE = 51,
  TASK_HERO_UPSTAR = 52,
  TASK_HERO_SKILL_UPGRADE = 53,
  TASK_HERO_STAR_COUNT = 57,
  TASK_HERO_LV_COUNT = 58,
  TASK_HERO_COUNT = 60,
  TASK_DRAW_HERO = 101,
  TASK_DRAW_HERO_GOLD = 102,
  TASK_DRAW_HERO_JADE = 103,
  TASK_RESOURCE_CONSUME = 151,
  TASK_GONGDOULI = 152,
  TASK_LV = 153,
  TASK_LOGIN_ACC = 158,
  TASK_LOGIN_DAILY = 159,
  TASK_SHOP_BUY = 160,
  TASK_KONGJIAN_LIUYAN = 201,
  TASK_KONGJIANDIANZAN = 202,
  TASK_GUANPIN = 251,
  TASK_OFFICAL_APPLY_SIZE = 252,
  TASK_OFFICAL_ACC_WIN_SIZE = 253,
  TASK_OFFICAL_SALARY = 255,
  TASK_OFFICAL_SALARY_DAILY = 256,
  TASK_SHARE_OFFIAL_UPGRADE = 257,
  TASK_UNLOCK_ROYAL = 301,
  TASK_GIT_ROYAL = 302,
  TASK_HAOGANDU_ROYAL = 303,
  TASK_UNLOCK_ROYAL_COUNT = 304,
  TASK_FINISH_PLOT = 351,
  TASK_CHALLENGE_ARENA = 401,
  TASK_CHALLENGE_WIN_ARENA = 402,
  TASK_CHALLENGE_FAIL_ARENA = 403,
  TASK_GONGDOU = 451,
  TASK_GONGDOU_ACCU = 452,
  TASK_FRIENDS_COUNT = 501,
  TASK_FRIENDS_APPLY = 502,
  TASK_GIT_XIANHUA = 601,
  TASK_QUSHUILIUSHANG = 701,
  TASK_QIYU = 702
};
bool TASK_TYPE_IsValid(int value);
const TASK_TYPE TASK_TYPE_MIN = TASK_CHALLENGE_GUANKA;
const TASK_TYPE TASK_TYPE_MAX = TASK_QIYU;
const int TASK_TYPE_ARRAYSIZE = TASK_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* TASK_TYPE_descriptor();
inline const ::std::string& TASK_TYPE_Name(TASK_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    TASK_TYPE_descriptor(), value);
}
inline bool TASK_TYPE_Parse(
    const ::std::string& name, TASK_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TASK_TYPE>(
    TASK_TYPE_descriptor(), name, value);
}
enum SKILL_STATUS {
  SKILL_INACTIVE = 1,
  SKILL_ACTIVE = 2,
  SKILL_SELECT = 3
};
bool SKILL_STATUS_IsValid(int value);
const SKILL_STATUS SKILL_STATUS_MIN = SKILL_INACTIVE;
const SKILL_STATUS SKILL_STATUS_MAX = SKILL_SELECT;
const int SKILL_STATUS_ARRAYSIZE = SKILL_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* SKILL_STATUS_descriptor();
inline const ::std::string& SKILL_STATUS_Name(SKILL_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    SKILL_STATUS_descriptor(), value);
}
inline bool SKILL_STATUS_Parse(
    const ::std::string& name, SKILL_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SKILL_STATUS>(
    SKILL_STATUS_descriptor(), name, value);
}
enum TALENT_STATUS {
  TALENT_INACTIVE = 1,
  TALENT_CANACTIVE = 2,
  TALENT_ACTIVE = 3
};
bool TALENT_STATUS_IsValid(int value);
const TALENT_STATUS TALENT_STATUS_MIN = TALENT_INACTIVE;
const TALENT_STATUS TALENT_STATUS_MAX = TALENT_ACTIVE;
const int TALENT_STATUS_ARRAYSIZE = TALENT_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* TALENT_STATUS_descriptor();
inline const ::std::string& TALENT_STATUS_Name(TALENT_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    TALENT_STATUS_descriptor(), value);
}
inline bool TALENT_STATUS_Parse(
    const ::std::string& name, TALENT_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TALENT_STATUS>(
    TALENT_STATUS_descriptor(), name, value);
}
enum PLAYER_SKILL_TYPE {
  COMMON_ATTACK_SKILL = 1,
  ANGER_SKILL = 2,
  PASSIVE_SKILL = 3
};
bool PLAYER_SKILL_TYPE_IsValid(int value);
const PLAYER_SKILL_TYPE PLAYER_SKILL_TYPE_MIN = COMMON_ATTACK_SKILL;
const PLAYER_SKILL_TYPE PLAYER_SKILL_TYPE_MAX = PASSIVE_SKILL;
const int PLAYER_SKILL_TYPE_ARRAYSIZE = PLAYER_SKILL_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* PLAYER_SKILL_TYPE_descriptor();
inline const ::std::string& PLAYER_SKILL_TYPE_Name(PLAYER_SKILL_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    PLAYER_SKILL_TYPE_descriptor(), value);
}
inline bool PLAYER_SKILL_TYPE_Parse(
    const ::std::string& name, PLAYER_SKILL_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PLAYER_SKILL_TYPE>(
    PLAYER_SKILL_TYPE_descriptor(), name, value);
}
enum eDiscoveryMoppingType {
  SINGLE = 1,
  CONSECUTIVE = 2,
  UNTILL = 3
};
bool eDiscoveryMoppingType_IsValid(int value);
const eDiscoveryMoppingType eDiscoveryMoppingType_MIN = SINGLE;
const eDiscoveryMoppingType eDiscoveryMoppingType_MAX = UNTILL;
const int eDiscoveryMoppingType_ARRAYSIZE = eDiscoveryMoppingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eDiscoveryMoppingType_descriptor();
inline const ::std::string& eDiscoveryMoppingType_Name(eDiscoveryMoppingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eDiscoveryMoppingType_descriptor(), value);
}
inline bool eDiscoveryMoppingType_Parse(
    const ::std::string& name, eDiscoveryMoppingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eDiscoveryMoppingType>(
    eDiscoveryMoppingType_descriptor(), name, value);
}
enum CHAT_TYPE {
  WORLD_CHAT = 1,
  PRIVATE_CHAT = 2,
  ROOM_CHAT = 3,
  FAMILY_CHAT = 4
};
bool CHAT_TYPE_IsValid(int value);
const CHAT_TYPE CHAT_TYPE_MIN = WORLD_CHAT;
const CHAT_TYPE CHAT_TYPE_MAX = FAMILY_CHAT;
const int CHAT_TYPE_ARRAYSIZE = CHAT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* CHAT_TYPE_descriptor();
inline const ::std::string& CHAT_TYPE_Name(CHAT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    CHAT_TYPE_descriptor(), value);
}
inline bool CHAT_TYPE_Parse(
    const ::std::string& name, CHAT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CHAT_TYPE>(
    CHAT_TYPE_descriptor(), name, value);
}
enum DAILY_FORTUNE_TYPE {
  XUSHIDAIFA_TYPE = 0,
  SHILAIYUNZHUAN_TYPE = 1,
  DAJIDALI_TYPE = 2,
  HONGYUNGAOZHAO = 3,
  ALL_FORTUNE_SIZE = 4
};
bool DAILY_FORTUNE_TYPE_IsValid(int value);
const DAILY_FORTUNE_TYPE DAILY_FORTUNE_TYPE_MIN = XUSHIDAIFA_TYPE;
const DAILY_FORTUNE_TYPE DAILY_FORTUNE_TYPE_MAX = ALL_FORTUNE_SIZE;
const int DAILY_FORTUNE_TYPE_ARRAYSIZE = DAILY_FORTUNE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* DAILY_FORTUNE_TYPE_descriptor();
inline const ::std::string& DAILY_FORTUNE_TYPE_Name(DAILY_FORTUNE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    DAILY_FORTUNE_TYPE_descriptor(), value);
}
inline bool DAILY_FORTUNE_TYPE_Parse(
    const ::std::string& name, DAILY_FORTUNE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DAILY_FORTUNE_TYPE>(
    DAILY_FORTUNE_TYPE_descriptor(), name, value);
}
enum EItemAttrType {
  E_TALISMAN_ATTR_NONE = 0,
  E_TALISMAN_ATTR_level = 1,
  E_TALISMAN_ATTR_exp = 2,
  E_TALISMAN_ATTR_break_times = 3,
  E_ITEM_ATTR_SLOT = 4,
  E_FASHION_ATTR_TIME = 5
};
bool EItemAttrType_IsValid(int value);
const EItemAttrType EItemAttrType_MIN = E_TALISMAN_ATTR_NONE;
const EItemAttrType EItemAttrType_MAX = E_FASHION_ATTR_TIME;
const int EItemAttrType_ARRAYSIZE = EItemAttrType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EItemAttrType_descriptor();
inline const ::std::string& EItemAttrType_Name(EItemAttrType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EItemAttrType_descriptor(), value);
}
inline bool EItemAttrType_Parse(
    const ::std::string& name, EItemAttrType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EItemAttrType>(
    EItemAttrType_descriptor(), name, value);
}
enum eMailPriority {
  MAIL_PRIORITY_NONE = 0,
  MAIL_PRIORITY_HIGHEST = 1,
  MAIL_PRIORITY_1 = 1,
  MAIL_PRIORITY_NOT_DELET = 1,
  MAIL_PRIORITY_2 = 2,
  MAIL_PRIORITY_PRIVATE_MAIL = 3,
  MAIL_PRIORITY_3 = 3,
  MAIL_PRIORITY_4 = 4,
  MAIL_PRIORITY_LOWEST = 4
};
bool eMailPriority_IsValid(int value);
const eMailPriority eMailPriority_MIN = MAIL_PRIORITY_NONE;
const eMailPriority eMailPriority_MAX = MAIL_PRIORITY_4;
const int eMailPriority_ARRAYSIZE = eMailPriority_MAX + 1;

const ::google::protobuf::EnumDescriptor* eMailPriority_descriptor();
inline const ::std::string& eMailPriority_Name(eMailPriority value) {
  return ::google::protobuf::internal::NameOfEnum(
    eMailPriority_descriptor(), value);
}
inline bool eMailPriority_Parse(
    const ::std::string& name, eMailPriority* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eMailPriority>(
    eMailPriority_descriptor(), name, value);
}
enum eMailClientType {
  MAIL_CLIENT_TYPE_NONE = 0,
  MAIL_CLIENT_TYPE_MIN = 1,
  MAIL_CLIENT_TYPE_PRIVATE = 1,
  MAIL_CLIENT_TYPE_SYSTEM = 2,
  MAIL_CLIENT_TYPE_MAX = 2
};
bool eMailClientType_IsValid(int value);
const eMailClientType eMailClientType_MIN = MAIL_CLIENT_TYPE_NONE;
const eMailClientType eMailClientType_MAX = MAIL_CLIENT_TYPE_SYSTEM;
const int eMailClientType_ARRAYSIZE = eMailClientType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eMailClientType_descriptor();
inline const ::std::string& eMailClientType_Name(eMailClientType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eMailClientType_descriptor(), value);
}
inline bool eMailClientType_Parse(
    const ::std::string& name, eMailClientType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eMailClientType>(
    eMailClientType_descriptor(), name, value);
}
enum eMailServerType {
  MAIL_SERVER_TYPE_NONE = 0,
  MAIL_SERVER_TYPE_MIN = 1,
  MAIL_SERVER_TYPE_INSTANCE = 1,
  MAIL_SERVER_TYPE_GLOBAL = 2,
  MAIL_SERVER_TYPE_GROUP = 3,
  MAIL_SERVER_TYPE_RAND_GROUP = 4,
  MAIL_SERVER_TYPE_MAX = 4
};
bool eMailServerType_IsValid(int value);
const eMailServerType eMailServerType_MIN = MAIL_SERVER_TYPE_NONE;
const eMailServerType eMailServerType_MAX = MAIL_SERVER_TYPE_RAND_GROUP;
const int eMailServerType_ARRAYSIZE = eMailServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eMailServerType_descriptor();
inline const ::std::string& eMailServerType_Name(eMailServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eMailServerType_descriptor(), value);
}
inline bool eMailServerType_Parse(
    const ::std::string& name, eMailServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eMailServerType>(
    eMailServerType_descriptor(), name, value);
}
enum eMailLogicType {
  MAIL_LOGIC_TYPE_NONE = 0,
  MAIL_LOGIC_TYPE_MIN = 1,
  MAIL_LOGIC_TYPE_COMMON = 1,
  MAIL_LOGIC_TYPE_FRIEND = 2,
  MAIL_LOGIC_TYPE_MAX = 2
};
bool eMailLogicType_IsValid(int value);
const eMailLogicType eMailLogicType_MIN = MAIL_LOGIC_TYPE_NONE;
const eMailLogicType eMailLogicType_MAX = MAIL_LOGIC_TYPE_FRIEND;
const int eMailLogicType_ARRAYSIZE = eMailLogicType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eMailLogicType_descriptor();
inline const ::std::string& eMailLogicType_Name(eMailLogicType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eMailLogicType_descriptor(), value);
}
inline bool eMailLogicType_Parse(
    const ::std::string& name, eMailLogicType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eMailLogicType>(
    eMailLogicType_descriptor(), name, value);
}
enum eSendMailType {
  SEND_MAIL_TYPE_ID = 1,
  SEND_MAIL_TYPE_NAME = 2
};
bool eSendMailType_IsValid(int value);
const eSendMailType eSendMailType_MIN = SEND_MAIL_TYPE_ID;
const eSendMailType eSendMailType_MAX = SEND_MAIL_TYPE_NAME;
const int eSendMailType_ARRAYSIZE = eSendMailType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eSendMailType_descriptor();
inline const ::std::string& eSendMailType_Name(eSendMailType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eSendMailType_descriptor(), value);
}
inline bool eSendMailType_Parse(
    const ::std::string& name, eSendMailType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eSendMailType>(
    eSendMailType_descriptor(), name, value);
}
enum eFashionPos {
  FASHION_SKELETON_POS = 0,
  FASHION_CLOTHES_POS = 1,
  FASHION_FACE_POS = 2
};
bool eFashionPos_IsValid(int value);
const eFashionPos eFashionPos_MIN = FASHION_SKELETON_POS;
const eFashionPos eFashionPos_MAX = FASHION_FACE_POS;
const int eFashionPos_ARRAYSIZE = eFashionPos_MAX + 1;

const ::google::protobuf::EnumDescriptor* eFashionPos_descriptor();
inline const ::std::string& eFashionPos_Name(eFashionPos value) {
  return ::google::protobuf::internal::NameOfEnum(
    eFashionPos_descriptor(), value);
}
inline bool eFashionPos_Parse(
    const ::std::string& name, eFashionPos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eFashionPos>(
    eFashionPos_descriptor(), name, value);
}
enum eFlowerRewardType {
  FLOWER_REWARD_NONE = 0,
  FLOWER_REWARD_SENDER = 1,
  FLOWER_REWARD_RECEIVER = 2,
  FLOWER_REWARD_ALL = 3
};
bool eFlowerRewardType_IsValid(int value);
const eFlowerRewardType eFlowerRewardType_MIN = FLOWER_REWARD_NONE;
const eFlowerRewardType eFlowerRewardType_MAX = FLOWER_REWARD_ALL;
const int eFlowerRewardType_ARRAYSIZE = eFlowerRewardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eFlowerRewardType_descriptor();
inline const ::std::string& eFlowerRewardType_Name(eFlowerRewardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eFlowerRewardType_descriptor(), value);
}
inline bool eFlowerRewardType_Parse(
    const ::std::string& name, eFlowerRewardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eFlowerRewardType>(
    eFlowerRewardType_descriptor(), name, value);
}
enum eEventMsgType {
  EVENT_MSG_TYPE_ERROR = 0,
  EVENT_MSG_TYPE_OFFICAL_PROMOTION = 1,
  EVENT_MSG_TYPE_SEND_GIFT = 2,
  EVENT_MSG_TYPE_RECIVE_GIFT = 3,
  EVENT_MSG_TYPE_SLAP = 4,
  EVENT_MSG_TYPE_GREETING = 5,
  EVENT_MSG_TYPE_TRIBUTE = 6,
  EVENT_MSG_TYPE_OFFICAL_REDUCE = 7
};
bool eEventMsgType_IsValid(int value);
const eEventMsgType eEventMsgType_MIN = EVENT_MSG_TYPE_ERROR;
const eEventMsgType eEventMsgType_MAX = EVENT_MSG_TYPE_OFFICAL_REDUCE;
const int eEventMsgType_ARRAYSIZE = eEventMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eEventMsgType_descriptor();
inline const ::std::string& eEventMsgType_Name(eEventMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eEventMsgType_descriptor(), value);
}
inline bool eEventMsgType_Parse(
    const ::std::string& name, eEventMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eEventMsgType>(
    eEventMsgType_descriptor(), name, value);
}
enum FASHION_POSITION {
  FASHION_POSITION_NONE = 0,
  FASHION_POSITION_HEAD = 1,
  FASHION_POSITION_CLOTH = 2
};
bool FASHION_POSITION_IsValid(int value);
const FASHION_POSITION FASHION_POSITION_MIN = FASHION_POSITION_NONE;
const FASHION_POSITION FASHION_POSITION_MAX = FASHION_POSITION_CLOTH;
const int FASHION_POSITION_ARRAYSIZE = FASHION_POSITION_MAX + 1;

const ::google::protobuf::EnumDescriptor* FASHION_POSITION_descriptor();
inline const ::std::string& FASHION_POSITION_Name(FASHION_POSITION value) {
  return ::google::protobuf::internal::NameOfEnum(
    FASHION_POSITION_descriptor(), value);
}
inline bool FASHION_POSITION_Parse(
    const ::std::string& name, FASHION_POSITION* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FASHION_POSITION>(
    FASHION_POSITION_descriptor(), name, value);
}
enum FASHION_STATE {
  FASHION_STATE_NONE = 0,
  FASHION_WEARING = 1,
  FASHION_WARDROBE = 2
};
bool FASHION_STATE_IsValid(int value);
const FASHION_STATE FASHION_STATE_MIN = FASHION_STATE_NONE;
const FASHION_STATE FASHION_STATE_MAX = FASHION_WARDROBE;
const int FASHION_STATE_ARRAYSIZE = FASHION_STATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* FASHION_STATE_descriptor();
inline const ::std::string& FASHION_STATE_Name(FASHION_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    FASHION_STATE_descriptor(), value);
}
inline bool FASHION_STATE_Parse(
    const ::std::string& name, FASHION_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FASHION_STATE>(
    FASHION_STATE_descriptor(), name, value);
}
enum FASHION_GENDER {
  FASHION_GENDER_NONE = 0,
  FASHION_GENDER_MALE = 1,
  FASHION_GENDER_FEMALE = 2
};
bool FASHION_GENDER_IsValid(int value);
const FASHION_GENDER FASHION_GENDER_MIN = FASHION_GENDER_NONE;
const FASHION_GENDER FASHION_GENDER_MAX = FASHION_GENDER_FEMALE;
const int FASHION_GENDER_ARRAYSIZE = FASHION_GENDER_MAX + 1;

const ::google::protobuf::EnumDescriptor* FASHION_GENDER_descriptor();
inline const ::std::string& FASHION_GENDER_Name(FASHION_GENDER value) {
  return ::google::protobuf::internal::NameOfEnum(
    FASHION_GENDER_descriptor(), value);
}
inline bool FASHION_GENDER_Parse(
    const ::std::string& name, FASHION_GENDER* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FASHION_GENDER>(
    FASHION_GENDER_descriptor(), name, value);
}
enum eRedPtType {
  RED_PT_NONE = 1,
  RED_PT_MIN = 2,
  RED_PT_DRAW_CARD = 2,
  RED_PT_MAIL = 3,
  RED_PT_PET = 4,
  RED_PT_MAX = 4
};
bool eRedPtType_IsValid(int value);
const eRedPtType eRedPtType_MIN = RED_PT_NONE;
const eRedPtType eRedPtType_MAX = RED_PT_PET;
const int eRedPtType_ARRAYSIZE = eRedPtType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eRedPtType_descriptor();
inline const ::std::string& eRedPtType_Name(eRedPtType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eRedPtType_descriptor(), value);
}
inline bool eRedPtType_Parse(
    const ::std::string& name, eRedPtType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eRedPtType>(
    eRedPtType_descriptor(), name, value);
}
// ===================================================================

class account_role_data : public ::google::protobuf::Message {
 public:
  account_role_data();
  virtual ~account_role_data();

  account_role_data(const account_role_data& from);

  inline account_role_data& operator=(const account_role_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const account_role_data& default_instance();

  void Swap(account_role_data* other);

  // implements Message ----------------------------------------------

  account_role_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const account_role_data& from);
  void MergeFrom(const account_role_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional uint64 db_svr_id = 3;
  inline bool has_db_svr_id() const;
  inline void clear_db_svr_id();
  static const int kDbSvrIdFieldNumber = 3;
  inline ::google::protobuf::uint64 db_svr_id() const;
  inline void set_db_svr_id(::google::protobuf::uint64 value);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 lv = 5;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 5;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.account_role_data)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_db_svr_id();
  inline void clear_has_db_svr_id();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_lv();
  inline void clear_has_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::uint64 db_svr_id_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static account_role_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_attr_data : public ::google::protobuf::Message {
 public:
  unit_attr_data();
  virtual ~unit_attr_data();

  unit_attr_data(const unit_attr_data& from);

  inline unit_attr_data& operator=(const unit_attr_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_attr_data& default_instance();

  void Swap(unit_attr_data* other);

  // implements Message ----------------------------------------------

  unit_attr_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_attr_data& from);
  void MergeFrom(const unit_attr_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::uint32 key() const;
  inline void set_key(::google::protobuf::uint32 value);

  // optional uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_attr_data)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 key_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static unit_attr_data* default_instance_;
};
// -------------------------------------------------------------------

class unit_item_data : public ::google::protobuf::Message {
 public:
  unit_item_data();
  virtual ~unit_item_data();

  unit_item_data(const unit_item_data& from);

  inline unit_item_data& operator=(const unit_item_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_item_data& default_instance();

  void Swap(unit_item_data* other);

  // implements Message ----------------------------------------------

  unit_item_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_item_data& from);
  void MergeFrom(const unit_item_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 db_mode = 1;
  inline bool has_db_mode() const;
  inline void clear_db_mode();
  static const int kDbModeFieldNumber = 1;
  inline ::google::protobuf::uint32 db_mode() const;
  inline void set_db_mode(::google::protobuf::uint32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 tid = 3;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 3;
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional bool can_mail = 4;
  inline bool has_can_mail() const;
  inline void clear_can_mail();
  static const int kCanMailFieldNumber = 4;
  inline bool can_mail() const;
  inline void set_can_mail(bool value);

  // optional bool bind = 5;
  inline bool has_bind() const;
  inline void clear_bind();
  static const int kBindFieldNumber = 5;
  inline bool bind() const;
  inline void set_bind(bool value);

  // optional bool lock = 6;
  inline bool has_lock() const;
  inline void clear_lock();
  static const int kLockFieldNumber = 6;
  inline bool lock() const;
  inline void set_lock(bool value);

  // optional bool dirty = 7;
  inline bool has_dirty() const;
  inline void clear_dirty();
  static const int kDirtyFieldNumber = 7;
  inline bool dirty() const;
  inline void set_dirty(bool value);

  // optional uint32 spawn_time = 8;
  inline bool has_spawn_time() const;
  inline void clear_spawn_time();
  static const int kSpawnTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 spawn_time() const;
  inline void set_spawn_time(::google::protobuf::uint32 value);

  // optional uint32 expire_time = 9;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 expire_time() const;
  inline void set_expire_time(::google::protobuf::uint32 value);

  // optional uint32 bag_type = 10;
  inline bool has_bag_type() const;
  inline void clear_bag_type();
  static const int kBagTypeFieldNumber = 10;
  inline ::google::protobuf::uint32 bag_type() const;
  inline void set_bag_type(::google::protobuf::uint32 value);

  // optional uint32 cur_num = 11;
  inline bool has_cur_num() const;
  inline void clear_cur_num();
  static const int kCurNumFieldNumber = 11;
  inline ::google::protobuf::uint32 cur_num() const;
  inline void set_cur_num(::google::protobuf::uint32 value);

  // optional uint32 level = 12;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 12;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 quality = 13;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 13;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.unit_attr_data attrs = 100;
  inline int attrs_size() const;
  inline void clear_attrs();
  static const int kAttrsFieldNumber = 100;
  inline const ::SProtoSpace::unit_attr_data& attrs(int index) const;
  inline ::SProtoSpace::unit_attr_data* mutable_attrs(int index);
  inline ::SProtoSpace::unit_attr_data* add_attrs();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_attr_data >&
      attrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_attr_data >*
      mutable_attrs();

  // @@protoc_insertion_point(class_scope:SProtoSpace.unit_item_data)
 private:
  inline void set_has_db_mode();
  inline void clear_has_db_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_can_mail();
  inline void clear_has_can_mail();
  inline void set_has_bind();
  inline void clear_has_bind();
  inline void set_has_lock();
  inline void clear_has_lock();
  inline void set_has_dirty();
  inline void clear_has_dirty();
  inline void set_has_spawn_time();
  inline void clear_has_spawn_time();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  inline void set_has_bag_type();
  inline void clear_has_bag_type();
  inline void set_has_cur_num();
  inline void clear_has_cur_num();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_quality();
  inline void clear_has_quality();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 db_mode_;
  ::google::protobuf::uint32 tid_;
  bool can_mail_;
  bool bind_;
  bool lock_;
  bool dirty_;
  ::google::protobuf::uint32 spawn_time_;
  ::google::protobuf::uint32 expire_time_;
  ::google::protobuf::uint32 bag_type_;
  ::google::protobuf::uint32 cur_num_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_attr_data > attrs_;
  ::google::protobuf::uint32 quality_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static unit_item_data* default_instance_;
};
// -------------------------------------------------------------------

class client_skill_data : public ::google::protobuf::Message {
 public:
  client_skill_data();
  virtual ~client_skill_data();

  client_skill_data(const client_skill_data& from);

  inline client_skill_data& operator=(const client_skill_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const client_skill_data& default_instance();

  void Swap(client_skill_data* other);

  // implements Message ----------------------------------------------

  client_skill_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const client_skill_data& from);
  void MergeFrom(const client_skill_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional int32 lv = 2;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 2;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 unlock = 3;
  inline bool has_unlock() const;
  inline void clear_unlock();
  static const int kUnlockFieldNumber = 3;
  inline ::google::protobuf::int32 unlock() const;
  inline void set_unlock(::google::protobuf::int32 value);

  // optional int32 slot = 4;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 4;
  inline ::google::protobuf::int32 slot() const;
  inline void set_slot(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.client_skill_data)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_unlock();
  inline void clear_has_unlock();
  inline void set_has_slot();
  inline void clear_has_slot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 unlock_;
  ::google::protobuf::int32 slot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static client_skill_data* default_instance_;
};
// -------------------------------------------------------------------

class skin_entry : public ::google::protobuf::Message {
 public:
  skin_entry();
  virtual ~skin_entry();

  skin_entry(const skin_entry& from);

  inline skin_entry& operator=(const skin_entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const skin_entry& default_instance();

  void Swap(skin_entry* other);

  // implements Message ----------------------------------------------

  skin_entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const skin_entry& from);
  void MergeFrom(const skin_entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional bool valid = 2;
  inline bool has_valid() const;
  inline void clear_valid();
  static const int kValidFieldNumber = 2;
  inline bool valid() const;
  inline void set_valid(bool value);

  // optional uint64 end_time = 3;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.skin_entry)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_valid();
  inline void clear_has_valid();
  inline void set_has_end_time();
  inline void clear_has_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  bool valid_;
  ::google::protobuf::uint64 end_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static skin_entry* default_instance_;
};
// -------------------------------------------------------------------

class skin_data : public ::google::protobuf::Message {
 public:
  skin_data();
  virtual ~skin_data();

  skin_data(const skin_data& from);

  inline skin_data& operator=(const skin_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const skin_data& default_instance();

  void Swap(skin_data* other);

  // implements Message ----------------------------------------------

  skin_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const skin_data& from);
  void MergeFrom(const skin_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 active_id = 1;
  inline bool has_active_id() const;
  inline void clear_active_id();
  static const int kActiveIdFieldNumber = 1;
  inline ::google::protobuf::uint32 active_id() const;
  inline void set_active_id(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.skin_entry skins = 2;
  inline int skins_size() const;
  inline void clear_skins();
  static const int kSkinsFieldNumber = 2;
  inline const ::SProtoSpace::skin_entry& skins(int index) const;
  inline ::SProtoSpace::skin_entry* mutable_skins(int index);
  inline ::SProtoSpace::skin_entry* add_skins();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::skin_entry >&
      skins() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::skin_entry >*
      mutable_skins();

  // @@protoc_insertion_point(class_scope:SProtoSpace.skin_data)
 private:
  inline void set_has_active_id();
  inline void clear_has_active_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::skin_entry > skins_;
  ::google::protobuf::uint32 active_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static skin_data* default_instance_;
};
// -------------------------------------------------------------------

class hero_base_info : public ::google::protobuf::Message {
 public:
  hero_base_info();
  virtual ~hero_base_info();

  hero_base_info(const hero_base_info& from);

  inline hero_base_info& operator=(const hero_base_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_base_info& default_instance();

  void Swap(hero_base_info* other);

  // implements Message ----------------------------------------------

  hero_base_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_base_info& from);
  void MergeFrom(const hero_base_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // optional uint32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::uint32 template_id() const;
  inline void set_template_id(::google::protobuf::uint32 value);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 star = 4;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 4;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // optional int32 quality = 5;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 5;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 skin_id = 7;
  inline bool has_skin_id() const;
  inline void clear_skin_id();
  static const int kSkinIdFieldNumber = 7;
  inline ::google::protobuf::int32 skin_id() const;
  inline void set_skin_id(::google::protobuf::int32 value);

  // optional int32 exp = 8;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 8;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_base_info)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_skin_id();
  inline void clear_has_skin_id();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  ::google::protobuf::uint32 template_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 quality_;
  ::std::string* name_;
  ::google::protobuf::int32 skin_id_;
  ::google::protobuf::int32 exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static hero_base_info* default_instance_;
};
// -------------------------------------------------------------------

class hero_attr_value : public ::google::protobuf::Message {
 public:
  hero_attr_value();
  virtual ~hero_attr_value();

  hero_attr_value(const hero_attr_value& from);

  inline hero_attr_value& operator=(const hero_attr_value& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_attr_value& default_instance();

  void Swap(hero_attr_value* other);

  // implements Message ----------------------------------------------

  hero_attr_value* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_attr_value& from);
  void MergeFrom(const hero_attr_value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .SProtoSpace.EAttribute type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::SProtoSpace::EAttribute type() const;
  inline void set_type(::SProtoSpace::EAttribute value);

  // optional int32 val = 2 [default = 0];
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline ::google::protobuf::int32 val() const;
  inline void set_val(::google::protobuf::int32 value);

  // optional int32 val_ratio = 3 [default = 0];
  inline bool has_val_ratio() const;
  inline void clear_val_ratio();
  static const int kValRatioFieldNumber = 3;
  inline ::google::protobuf::int32 val_ratio() const;
  inline void set_val_ratio(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_attr_value)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_val();
  inline void clear_has_val();
  inline void set_has_val_ratio();
  inline void clear_has_val_ratio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 val_;
  ::google::protobuf::int32 val_ratio_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static hero_attr_value* default_instance_;
};
// -------------------------------------------------------------------

class client_soul_data : public ::google::protobuf::Message {
 public:
  client_soul_data();
  virtual ~client_soul_data();

  client_soul_data(const client_soul_data& from);

  inline client_soul_data& operator=(const client_soul_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const client_soul_data& default_instance();

  void Swap(client_soul_data* other);

  // implements Message ----------------------------------------------

  client_soul_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const client_soul_data& from);
  void MergeFrom(const client_soul_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional int32 slot = 2;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 2;
  inline ::google::protobuf::int32 slot() const;
  inline void set_slot(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.client_soul_data)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_slot();
  inline void clear_has_slot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 slot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static client_soul_data* default_instance_;
};
// -------------------------------------------------------------------

class hero_equip_data : public ::google::protobuf::Message {
 public:
  hero_equip_data();
  virtual ~hero_equip_data();

  hero_equip_data(const hero_equip_data& from);

  inline hero_equip_data& operator=(const hero_equip_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_equip_data& default_instance();

  void Swap(hero_equip_data* other);

  // implements Message ----------------------------------------------

  hero_equip_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_equip_data& from);
  void MergeFrom(const hero_equip_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemTid = 1;
  inline bool has_itemtid() const;
  inline void clear_itemtid();
  static const int kItemTidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemtid() const;
  inline void set_itemtid(::google::protobuf::uint32 value);

  // optional uint32 slot = 2;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 2;
  inline ::google::protobuf::uint32 slot() const;
  inline void set_slot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_equip_data)
 private:
  inline void set_has_itemtid();
  inline void clear_has_itemtid();
  inline void set_has_slot();
  inline void clear_has_slot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemtid_;
  ::google::protobuf::uint32 slot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static hero_equip_data* default_instance_;
};
// -------------------------------------------------------------------

class talisman_data : public ::google::protobuf::Message {
 public:
  talisman_data();
  virtual ~talisman_data();

  talisman_data(const talisman_data& from);

  inline talisman_data& operator=(const talisman_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talisman_data& default_instance();

  void Swap(talisman_data* other);

  // implements Message ----------------------------------------------

  talisman_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const talisman_data& from);
  void MergeFrom(const talisman_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional int32 itemTid = 2;
  inline bool has_itemtid() const;
  inline void clear_itemtid();
  static const int kItemTidFieldNumber = 2;
  inline ::google::protobuf::int32 itemtid() const;
  inline void set_itemtid(::google::protobuf::int32 value);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 break_times = 5;
  inline bool has_break_times() const;
  inline void clear_break_times();
  static const int kBreakTimesFieldNumber = 5;
  inline ::google::protobuf::int32 break_times() const;
  inline void set_break_times(::google::protobuf::int32 value);

  // optional int32 slot = 6;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 6;
  inline ::google::protobuf::int32 slot() const;
  inline void set_slot(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.talisman_data)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_itemtid();
  inline void clear_has_itemtid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_break_times();
  inline void clear_has_break_times();
  inline void set_has_slot();
  inline void clear_has_slot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::int32 itemtid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 break_times_;
  ::google::protobuf::int32 slot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static talisman_data* default_instance_;
};
// -------------------------------------------------------------------

class hero_show_data : public ::google::protobuf::Message {
 public:
  hero_show_data();
  virtual ~hero_show_data();

  hero_show_data(const hero_show_data& from);

  inline hero_show_data& operator=(const hero_show_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_show_data& default_instance();

  void Swap(hero_show_data* other);

  // implements Message ----------------------------------------------

  hero_show_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_show_data& from);
  void MergeFrom(const hero_show_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::uint32 template_id() const;
  inline void set_template_id(::google::protobuf::uint32 value);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 star = 4;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 4;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // optional int32 quality = 5;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 5;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // repeated .SProtoSpace.client_skill_data skill = 6;
  inline int skill_size() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 6;
  inline const ::SProtoSpace::client_skill_data& skill(int index) const;
  inline ::SProtoSpace::client_skill_data* mutable_skill(int index);
  inline ::SProtoSpace::client_skill_data* add_skill();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_skill_data >&
      skill() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_skill_data >*
      mutable_skill();

  // repeated .SProtoSpace.client_soul_data soul = 7;
  inline int soul_size() const;
  inline void clear_soul();
  static const int kSoulFieldNumber = 7;
  inline const ::SProtoSpace::client_soul_data& soul(int index) const;
  inline ::SProtoSpace::client_soul_data* mutable_soul(int index);
  inline ::SProtoSpace::client_soul_data* add_soul();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_soul_data >&
      soul() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_soul_data >*
      mutable_soul();

  // optional int32 exp = 8;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 8;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional bool awaken = 9;
  inline bool has_awaken() const;
  inline void clear_awaken();
  static const int kAwakenFieldNumber = 9;
  inline bool awaken() const;
  inline void set_awaken(bool value);

  // repeated .SProtoSpace.hero_attr_value awaken_attr = 10;
  inline int awaken_attr_size() const;
  inline void clear_awaken_attr();
  static const int kAwakenAttrFieldNumber = 10;
  inline const ::SProtoSpace::hero_attr_value& awaken_attr(int index) const;
  inline ::SProtoSpace::hero_attr_value* mutable_awaken_attr(int index);
  inline ::SProtoSpace::hero_attr_value* add_awaken_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value >&
      awaken_attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value >*
      mutable_awaken_attr();

  // optional bool locked = 11;
  inline bool has_locked() const;
  inline void clear_locked();
  static const int kLockedFieldNumber = 11;
  inline bool locked() const;
  inline void set_locked(bool value);

  // optional uint32 create_time = 12;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 12;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // optional .SProtoSpace.skin_data skin_info = 13;
  inline bool has_skin_info() const;
  inline void clear_skin_info();
  static const int kSkinInfoFieldNumber = 13;
  inline const ::SProtoSpace::skin_data& skin_info() const;
  inline ::SProtoSpace::skin_data* mutable_skin_info();
  inline ::SProtoSpace::skin_data* release_skin_info();
  inline void set_allocated_skin_info(::SProtoSpace::skin_data* skin_info);

  // optional string name = 14;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 14;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 fight_power = 15;
  inline bool has_fight_power() const;
  inline void clear_fight_power();
  static const int kFightPowerFieldNumber = 15;
  inline ::google::protobuf::int64 fight_power() const;
  inline void set_fight_power(::google::protobuf::int64 value);

  // repeated .SProtoSpace.hero_equip_data equips = 16;
  inline int equips_size() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 16;
  inline const ::SProtoSpace::hero_equip_data& equips(int index) const;
  inline ::SProtoSpace::hero_equip_data* mutable_equips(int index);
  inline ::SProtoSpace::hero_equip_data* add_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >&
      equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >*
      mutable_equips();

  // repeated .SProtoSpace.talisman_data talismans = 17;
  inline int talismans_size() const;
  inline void clear_talismans();
  static const int kTalismansFieldNumber = 17;
  inline const ::SProtoSpace::talisman_data& talismans(int index) const;
  inline ::SProtoSpace::talisman_data* mutable_talismans(int index);
  inline ::SProtoSpace::talisman_data* add_talismans();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talisman_data >&
      talismans() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talisman_data >*
      mutable_talismans();

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_show_data)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_awaken();
  inline void clear_has_awaken();
  inline void set_has_locked();
  inline void clear_has_locked();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_skin_info();
  inline void clear_has_skin_info();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_fight_power();
  inline void clear_has_fight_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 template_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_skill_data > skill_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_soul_data > soul_;
  ::google::protobuf::int32 exp_;
  bool awaken_;
  bool locked_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value > awaken_attr_;
  ::SProtoSpace::skin_data* skin_info_;
  ::std::string* name_;
  ::google::protobuf::int64 fight_power_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data > equips_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talisman_data > talismans_;
  ::google::protobuf::uint32 create_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static hero_show_data* default_instance_;
};
// -------------------------------------------------------------------

class soul_attr : public ::google::protobuf::Message {
 public:
  soul_attr();
  virtual ~soul_attr();

  soul_attr(const soul_attr& from);

  inline soul_attr& operator=(const soul_attr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const soul_attr& default_instance();

  void Swap(soul_attr* other);

  // implements Message ----------------------------------------------

  soul_attr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const soul_attr& from);
  void MergeFrom(const soul_attr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.soul_attr)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static soul_attr* default_instance_;
};
// -------------------------------------------------------------------

class soul_info : public ::google::protobuf::Message {
 public:
  soul_info();
  virtual ~soul_info();

  soul_info(const soul_info& from);

  inline soul_info& operator=(const soul_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const soul_info& default_instance();

  void Swap(soul_info* other);

  // implements Message ----------------------------------------------

  soul_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const soul_info& from);
  void MergeFrom(const soul_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional int32 tmp_id = 2;
  inline bool has_tmp_id() const;
  inline void clear_tmp_id();
  static const int kTmpIdFieldNumber = 2;
  inline ::google::protobuf::int32 tmp_id() const;
  inline void set_tmp_id(::google::protobuf::int32 value);

  // optional int32 lv = 3;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional bool is_lock = 6;
  inline bool has_is_lock() const;
  inline void clear_is_lock();
  static const int kIsLockFieldNumber = 6;
  inline bool is_lock() const;
  inline void set_is_lock(bool value);

  // optional bool is_bind = 7;
  inline bool has_is_bind() const;
  inline void clear_is_bind();
  static const int kIsBindFieldNumber = 7;
  inline bool is_bind() const;
  inline void set_is_bind(bool value);

  // optional uint32 create_time = 8;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.soul_attr main_attr = 9;
  inline int main_attr_size() const;
  inline void clear_main_attr();
  static const int kMainAttrFieldNumber = 9;
  inline const ::SProtoSpace::soul_attr& main_attr(int index) const;
  inline ::SProtoSpace::soul_attr* mutable_main_attr(int index);
  inline ::SProtoSpace::soul_attr* add_main_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_attr >&
      main_attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_attr >*
      mutable_main_attr();

  // repeated .SProtoSpace.soul_attr secondary_attr = 10;
  inline int secondary_attr_size() const;
  inline void clear_secondary_attr();
  static const int kSecondaryAttrFieldNumber = 10;
  inline const ::SProtoSpace::soul_attr& secondary_attr(int index) const;
  inline ::SProtoSpace::soul_attr* mutable_secondary_attr(int index);
  inline ::SProtoSpace::soul_attr* add_secondary_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_attr >&
      secondary_attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_attr >*
      mutable_secondary_attr();

  // @@protoc_insertion_point(class_scope:SProtoSpace.soul_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_tmp_id();
  inline void clear_has_tmp_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_is_lock();
  inline void clear_has_is_lock();
  inline void set_has_is_bind();
  inline void clear_has_is_bind();
  inline void set_has_create_time();
  inline void clear_has_create_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 tmp_id_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 exp_;
  bool is_lock_;
  bool is_bind_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_attr > main_attr_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_attr > secondary_attr_;
  ::google::protobuf::uint32 create_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static soul_info* default_instance_;
};
// -------------------------------------------------------------------

class discover_monster : public ::google::protobuf::Message {
 public:
  discover_monster();
  virtual ~discover_monster();

  discover_monster(const discover_monster& from);

  inline discover_monster& operator=(const discover_monster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const discover_monster& default_instance();

  void Swap(discover_monster* other);

  // implements Message ----------------------------------------------

  discover_monster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const discover_monster& from);
  void MergeFrom(const discover_monster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.discover_monster)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static discover_monster* default_instance_;
};
// -------------------------------------------------------------------

class discover_data : public ::google::protobuf::Message {
 public:
  discover_data();
  virtual ~discover_data();

  discover_data(const discover_data& from);

  inline discover_data& operator=(const discover_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const discover_data& default_instance();

  void Swap(discover_data* other);

  // implements Message ----------------------------------------------

  discover_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const discover_data& from);
  void MergeFrom(const discover_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 config_id = 1;
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 1;
  inline ::google::protobuf::int32 config_id() const;
  inline void set_config_id(::google::protobuf::int32 value);

  // optional bool is_open = 2;
  inline bool has_is_open() const;
  inline void clear_is_open();
  static const int kIsOpenFieldNumber = 2;
  inline bool is_open() const;
  inline void set_is_open(bool value);

  // optional bool is_pass = 3;
  inline bool has_is_pass() const;
  inline void clear_is_pass();
  static const int kIsPassFieldNumber = 3;
  inline bool is_pass() const;
  inline void set_is_pass(bool value);

  // optional int32 mopping_times_remain = 4;
  inline bool has_mopping_times_remain() const;
  inline void clear_mopping_times_remain();
  static const int kMoppingTimesRemainFieldNumber = 4;
  inline ::google::protobuf::int32 mopping_times_remain() const;
  inline void set_mopping_times_remain(::google::protobuf::int32 value);

  // optional int32 pass_star = 5;
  inline bool has_pass_star() const;
  inline void clear_pass_star();
  static const int kPassStarFieldNumber = 5;
  inline ::google::protobuf::int32 pass_star() const;
  inline void set_pass_star(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.discover_data)
 private:
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_is_open();
  inline void clear_has_is_open();
  inline void set_has_is_pass();
  inline void clear_has_is_pass();
  inline void set_has_mopping_times_remain();
  inline void clear_has_mopping_times_remain();
  inline void set_has_pass_star();
  inline void clear_has_pass_star();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 config_id_;
  bool is_open_;
  bool is_pass_;
  ::google::protobuf::int32 mopping_times_remain_;
  ::google::protobuf::int32 pass_star_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static discover_data* default_instance_;
};
// -------------------------------------------------------------------

class dischapter_data : public ::google::protobuf::Message {
 public:
  dischapter_data();
  virtual ~dischapter_data();

  dischapter_data(const dischapter_data& from);

  inline dischapter_data& operator=(const dischapter_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dischapter_data& default_instance();

  void Swap(dischapter_data* other);

  // implements Message ----------------------------------------------

  dischapter_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dischapter_data& from);
  void MergeFrom(const dischapter_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 config_id = 1;
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 1;
  inline ::google::protobuf::int32 config_id() const;
  inline void set_config_id(::google::protobuf::int32 value);

  // optional bool is_simpleopen = 2;
  inline bool has_is_simpleopen() const;
  inline void clear_is_simpleopen();
  static const int kIsSimpleopenFieldNumber = 2;
  inline bool is_simpleopen() const;
  inline void set_is_simpleopen(bool value);

  // optional bool is_diffopen = 3;
  inline bool has_is_diffopen() const;
  inline void clear_is_diffopen();
  static const int kIsDiffopenFieldNumber = 3;
  inline bool is_diffopen() const;
  inline void set_is_diffopen(bool value);

  // optional bool is_simplepass = 4;
  inline bool has_is_simplepass() const;
  inline void clear_is_simplepass();
  static const int kIsSimplepassFieldNumber = 4;
  inline bool is_simplepass() const;
  inline void set_is_simplepass(bool value);

  // optional bool is_diffpass = 5;
  inline bool has_is_diffpass() const;
  inline void clear_is_diffpass();
  static const int kIsDiffpassFieldNumber = 5;
  inline bool is_diffpass() const;
  inline void set_is_diffpass(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.dischapter_data)
 private:
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_is_simpleopen();
  inline void clear_has_is_simpleopen();
  inline void set_has_is_diffopen();
  inline void clear_has_is_diffopen();
  inline void set_has_is_simplepass();
  inline void clear_has_is_simplepass();
  inline void set_has_is_diffpass();
  inline void clear_has_is_diffpass();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 config_id_;
  bool is_simpleopen_;
  bool is_diffopen_;
  bool is_simplepass_;
  bool is_diffpass_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static dischapter_data* default_instance_;
};
// -------------------------------------------------------------------

class all_discover_data : public ::google::protobuf::Message {
 public:
  all_discover_data();
  virtual ~all_discover_data();

  all_discover_data(const all_discover_data& from);

  inline all_discover_data& operator=(const all_discover_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const all_discover_data& default_instance();

  void Swap(all_discover_data* other);

  // implements Message ----------------------------------------------

  all_discover_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const all_discover_data& from);
  void MergeFrom(const all_discover_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 last_id = 1;
  inline bool has_last_id() const;
  inline void clear_last_id();
  static const int kLastIdFieldNumber = 1;
  inline ::google::protobuf::int32 last_id() const;
  inline void set_last_id(::google::protobuf::int32 value);

  // repeated .SProtoSpace.discover_data discover_s = 2;
  inline int discover_s_size() const;
  inline void clear_discover_s();
  static const int kDiscoverSFieldNumber = 2;
  inline const ::SProtoSpace::discover_data& discover_s(int index) const;
  inline ::SProtoSpace::discover_data* mutable_discover_s(int index);
  inline ::SProtoSpace::discover_data* add_discover_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discover_data >&
      discover_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discover_data >*
      mutable_discover_s();

  // @@protoc_insertion_point(class_scope:SProtoSpace.all_discover_data)
 private:
  inline void set_has_last_id();
  inline void clear_has_last_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discover_data > discover_s_;
  ::google::protobuf::int32 last_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static all_discover_data* default_instance_;
};
// -------------------------------------------------------------------

class drop_data : public ::google::protobuf::Message {
 public:
  drop_data();
  virtual ~drop_data();

  drop_data(const drop_data& from);

  inline drop_data& operator=(const drop_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const drop_data& default_instance();

  void Swap(drop_data* other);

  // implements Message ----------------------------------------------

  drop_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const drop_data& from);
  void MergeFrom(const drop_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.drop_data)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static drop_data* default_instance_;
};
// -------------------------------------------------------------------

class role_attr_pair : public ::google::protobuf::Message {
 public:
  role_attr_pair();
  virtual ~role_attr_pair();

  role_attr_pair(const role_attr_pair& from);

  inline role_attr_pair& operator=(const role_attr_pair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_attr_pair& default_instance();

  void Swap(role_attr_pair* other);

  // implements Message ----------------------------------------------

  role_attr_pair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_attr_pair& from);
  void MergeFrom(const role_attr_pair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.EItemType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::SProtoSpace::EItemType type() const;
  inline void set_type(::SProtoSpace::EItemType value);

  // optional int32 val = 2 [default = 0];
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline ::google::protobuf::int32 val() const;
  inline void set_val(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_attr_pair)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static role_attr_pair* default_instance_;
};
// -------------------------------------------------------------------

class player_property : public ::google::protobuf::Message {
 public:
  player_property();
  virtual ~player_property();

  player_property(const player_property& from);

  inline player_property& operator=(const player_property& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_property& default_instance();

  void Swap(player_property* other);

  // implements Message ----------------------------------------------

  player_property* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_property& from);
  void MergeFrom(const player_property& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.hero_attr_value attr_mod_data = 2;
  inline int attr_mod_data_size() const;
  inline void clear_attr_mod_data();
  static const int kAttrModDataFieldNumber = 2;
  inline const ::SProtoSpace::hero_attr_value& attr_mod_data(int index) const;
  inline ::SProtoSpace::hero_attr_value* mutable_attr_mod_data(int index);
  inline ::SProtoSpace::hero_attr_value* add_attr_mod_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value >&
      attr_mod_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value >*
      mutable_attr_mod_data();

  // repeated .SProtoSpace.hero_attr_value attr_mod_per = 3;
  inline int attr_mod_per_size() const;
  inline void clear_attr_mod_per();
  static const int kAttrModPerFieldNumber = 3;
  inline const ::SProtoSpace::hero_attr_value& attr_mod_per(int index) const;
  inline ::SProtoSpace::hero_attr_value* mutable_attr_mod_per(int index);
  inline ::SProtoSpace::hero_attr_value* add_attr_mod_per();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value >&
      attr_mod_per() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value >*
      mutable_attr_mod_per();

  // @@protoc_insertion_point(class_scope:SProtoSpace.player_property)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value > attr_mod_data_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value > attr_mod_per_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static player_property* default_instance_;
};
// -------------------------------------------------------------------

class player_skill_info : public ::google::protobuf::Message {
 public:
  player_skill_info();
  virtual ~player_skill_info();

  player_skill_info(const player_skill_info& from);

  inline player_skill_info& operator=(const player_skill_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_skill_info& default_instance();

  void Swap(player_skill_info* other);

  // implements Message ----------------------------------------------

  player_skill_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_skill_info& from);
  void MergeFrom(const player_skill_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.SKILL_STATUS skill_status = 2;
  inline bool has_skill_status() const;
  inline void clear_skill_status();
  static const int kSkillStatusFieldNumber = 2;
  inline ::SProtoSpace::SKILL_STATUS skill_status() const;
  inline void set_skill_status(::SProtoSpace::SKILL_STATUS value);

  // optional .SProtoSpace.PLAYER_SKILL_TYPE skill_type = 3;
  inline bool has_skill_type() const;
  inline void clear_skill_type();
  static const int kSkillTypeFieldNumber = 3;
  inline ::SProtoSpace::PLAYER_SKILL_TYPE skill_type() const;
  inline void set_skill_type(::SProtoSpace::PLAYER_SKILL_TYPE value);

  // optional int32 lv = 4;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 4;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.player_skill_info)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_skill_status();
  inline void clear_has_skill_status();
  inline void set_has_skill_type();
  inline void clear_has_skill_type();
  inline void set_has_lv();
  inline void clear_has_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  int skill_status_;
  int skill_type_;
  ::google::protobuf::int32 lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static player_skill_info* default_instance_;
};
// -------------------------------------------------------------------

class talent_info : public ::google::protobuf::Message {
 public:
  talent_info();
  virtual ~talent_info();

  talent_info(const talent_info& from);

  inline talent_info& operator=(const talent_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talent_info& default_instance();

  void Swap(talent_info* other);

  // implements Message ----------------------------------------------

  talent_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const talent_info& from);
  void MergeFrom(const talent_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.TALENT_STATUS talent_status = 2;
  inline bool has_talent_status() const;
  inline void clear_talent_status();
  static const int kTalentStatusFieldNumber = 2;
  inline ::SProtoSpace::TALENT_STATUS talent_status() const;
  inline void set_talent_status(::SProtoSpace::TALENT_STATUS value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.talent_info)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_talent_status();
  inline void clear_has_talent_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  int talent_status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static talent_info* default_instance_;
};
// -------------------------------------------------------------------

class player_skin_info : public ::google::protobuf::Message {
 public:
  player_skin_info();
  virtual ~player_skin_info();

  player_skin_info(const player_skin_info& from);

  inline player_skin_info& operator=(const player_skin_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_skin_info& default_instance();

  void Swap(player_skin_info* other);

  // implements Message ----------------------------------------------

  player_skin_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_skin_info& from);
  void MergeFrom(const player_skin_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::uint32 template_id() const;
  inline void set_template_id(::google::protobuf::uint32 value);

  // optional uint64 end_time = 2;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.player_skin_info)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_end_time();
  inline void clear_has_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 end_time_;
  ::google::protobuf::uint32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static player_skin_info* default_instance_;
};
// -------------------------------------------------------------------

class player_skin_data : public ::google::protobuf::Message {
 public:
  player_skin_data();
  virtual ~player_skin_data();

  player_skin_data(const player_skin_data& from);

  inline player_skin_data& operator=(const player_skin_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_skin_data& default_instance();

  void Swap(player_skin_data* other);

  // implements Message ----------------------------------------------

  player_skin_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_skin_data& from);
  void MergeFrom(const player_skin_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 wear_id = 1;
  inline bool has_wear_id() const;
  inline void clear_wear_id();
  static const int kWearIdFieldNumber = 1;
  inline ::google::protobuf::uint32 wear_id() const;
  inline void set_wear_id(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.player_skin_info skin_list = 2;
  inline int skin_list_size() const;
  inline void clear_skin_list();
  static const int kSkinListFieldNumber = 2;
  inline const ::SProtoSpace::player_skin_info& skin_list(int index) const;
  inline ::SProtoSpace::player_skin_info* mutable_skin_list(int index);
  inline ::SProtoSpace::player_skin_info* add_skin_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::player_skin_info >&
      skin_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::player_skin_info >*
      mutable_skin_list();

  // @@protoc_insertion_point(class_scope:SProtoSpace.player_skin_data)
 private:
  inline void set_has_wear_id();
  inline void clear_has_wear_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::player_skin_info > skin_list_;
  ::google::protobuf::uint32 wear_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static player_skin_data* default_instance_;
};
// -------------------------------------------------------------------

class player_equip_data : public ::google::protobuf::Message {
 public:
  player_equip_data();
  virtual ~player_equip_data();

  player_equip_data(const player_equip_data& from);

  inline player_equip_data& operator=(const player_equip_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_equip_data& default_instance();

  void Swap(player_equip_data* other);

  // implements Message ----------------------------------------------

  player_equip_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_equip_data& from);
  void MergeFrom(const player_equip_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SProtoSpace.player_equip_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static player_equip_data* default_instance_;
};
// -------------------------------------------------------------------

class player_data : public ::google::protobuf::Message {
 public:
  player_data();
  virtual ~player_data();

  player_data(const player_data& from);

  inline player_data& operator=(const player_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_data& default_instance();

  void Swap(player_data* other);

  // implements Message ----------------------------------------------

  player_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_data& from);
  void MergeFrom(const player_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::uint32 template_id() const;
  inline void set_template_id(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.player_skill_info skill_data = 2;
  inline int skill_data_size() const;
  inline void clear_skill_data();
  static const int kSkillDataFieldNumber = 2;
  inline const ::SProtoSpace::player_skill_info& skill_data(int index) const;
  inline ::SProtoSpace::player_skill_info* mutable_skill_data(int index);
  inline ::SProtoSpace::player_skill_info* add_skill_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::player_skill_info >&
      skill_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::player_skill_info >*
      mutable_skill_data();

  // optional .SProtoSpace.player_skin_data skin_data = 3;
  inline bool has_skin_data() const;
  inline void clear_skin_data();
  static const int kSkinDataFieldNumber = 3;
  inline const ::SProtoSpace::player_skin_data& skin_data() const;
  inline ::SProtoSpace::player_skin_data* mutable_skin_data();
  inline ::SProtoSpace::player_skin_data* release_skin_data();
  inline void set_allocated_skin_data(::SProtoSpace::player_skin_data* skin_data);

  // optional .SProtoSpace.player_equip_data equip_list = 4;
  inline bool has_equip_list() const;
  inline void clear_equip_list();
  static const int kEquipListFieldNumber = 4;
  inline const ::SProtoSpace::player_equip_data& equip_list() const;
  inline ::SProtoSpace::player_equip_data* mutable_equip_list();
  inline ::SProtoSpace::player_equip_data* release_equip_list();
  inline void set_allocated_equip_list(::SProtoSpace::player_equip_data* equip_list);

  // repeated .SProtoSpace.talent_data talents = 5;
  inline int talents_size() const;
  inline void clear_talents();
  static const int kTalentsFieldNumber = 5;
  inline const ::SProtoSpace::talent_data& talents(int index) const;
  inline ::SProtoSpace::talent_data* mutable_talents(int index);
  inline ::SProtoSpace::talent_data* add_talents();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talent_data >&
      talents() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talent_data >*
      mutable_talents();

  // optional int32 talent_grade = 6;
  inline bool has_talent_grade() const;
  inline void clear_talent_grade();
  static const int kTalentGradeFieldNumber = 6;
  inline ::google::protobuf::int32 talent_grade() const;
  inline void set_talent_grade(::google::protobuf::int32 value);

  // optional int32 fight_value = 7;
  inline bool has_fight_value() const;
  inline void clear_fight_value();
  static const int kFightValueFieldNumber = 7;
  inline ::google::protobuf::int32 fight_value() const;
  inline void set_fight_value(::google::protobuf::int32 value);

  // repeated .SProtoSpace.talisman_data talismans = 8;
  inline int talismans_size() const;
  inline void clear_talismans();
  static const int kTalismansFieldNumber = 8;
  inline const ::SProtoSpace::talisman_data& talismans(int index) const;
  inline ::SProtoSpace::talisman_data* mutable_talismans(int index);
  inline ::SProtoSpace::talisman_data* add_talismans();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talisman_data >&
      talismans() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talisman_data >*
      mutable_talismans();

  // @@protoc_insertion_point(class_scope:SProtoSpace.player_data)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_skin_data();
  inline void clear_has_skin_data();
  inline void set_has_equip_list();
  inline void clear_has_equip_list();
  inline void set_has_talent_grade();
  inline void clear_has_talent_grade();
  inline void set_has_fight_value();
  inline void clear_has_fight_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::player_skill_info > skill_data_;
  ::SProtoSpace::player_skin_data* skin_data_;
  ::google::protobuf::uint32 template_id_;
  ::google::protobuf::int32 talent_grade_;
  ::SProtoSpace::player_equip_data* equip_list_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talent_data > talents_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talisman_data > talismans_;
  ::google::protobuf::int32 fight_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static player_data* default_instance_;
};
// -------------------------------------------------------------------

class account_token_data : public ::google::protobuf::Message {
 public:
  account_token_data();
  virtual ~account_token_data();

  account_token_data(const account_token_data& from);

  inline account_token_data& operator=(const account_token_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const account_token_data& default_instance();

  void Swap(account_token_data* other);

  // implements Message ----------------------------------------------

  account_token_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const account_token_data& from);
  void MergeFrom(const account_token_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required uint32 tempid = 2;
  inline bool has_tempid() const;
  inline void clear_tempid();
  static const int kTempidFieldNumber = 2;
  inline ::google::protobuf::uint32 tempid() const;
  inline void set_tempid(::google::protobuf::uint32 value);

  // required uint32 lastverifytime = 3;
  inline bool has_lastverifytime() const;
  inline void clear_lastverifytime();
  static const int kLastverifytimeFieldNumber = 3;
  inline ::google::protobuf::uint32 lastverifytime() const;
  inline void set_lastverifytime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.account_token_data)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_tempid();
  inline void clear_has_tempid();
  inline void set_has_lastverifytime();
  inline void clear_has_lastverifytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* token_;
  ::google::protobuf::uint32 tempid_;
  ::google::protobuf::uint32 lastverifytime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static account_token_data* default_instance_;
};
// -------------------------------------------------------------------

class account_gate_data : public ::google::protobuf::Message {
 public:
  account_gate_data();
  virtual ~account_gate_data();

  account_gate_data(const account_gate_data& from);

  inline account_gate_data& operator=(const account_gate_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const account_gate_data& default_instance();

  void Swap(account_gate_data* other);

  // implements Message ----------------------------------------------

  account_gate_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const account_gate_data& from);
  void MergeFrom(const account_gate_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 gateid = 1;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 1;
  inline ::google::protobuf::uint64 gateid() const;
  inline void set_gateid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.account_gate_data)
 private:
  inline void set_has_gateid();
  inline void clear_has_gateid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 gateid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static account_gate_data* default_instance_;
};
// -------------------------------------------------------------------

class area_gateserver_info : public ::google::protobuf::Message {
 public:
  area_gateserver_info();
  virtual ~area_gateserver_info();

  area_gateserver_info(const area_gateserver_info& from);

  inline area_gateserver_info& operator=(const area_gateserver_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const area_gateserver_info& default_instance();

  void Swap(area_gateserver_info* other);

  // implements Message ----------------------------------------------

  area_gateserver_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const area_gateserver_info& from);
  void MergeFrom(const area_gateserver_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 zone_id = 1;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 zone_id() const;
  inline void set_zone_id(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional uint32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.area_gateserver_info)
 private:
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static area_gateserver_info* default_instance_;
};
// -------------------------------------------------------------------

class game_system : public ::google::protobuf::Message {
 public:
  game_system();
  virtual ~game_system();

  game_system(const game_system& from);

  inline game_system& operator=(const game_system& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_system& default_instance();

  void Swap(game_system* other);

  // implements Message ----------------------------------------------

  game_system* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_system& from);
  void MergeFrom(const game_system& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 system_id = 1;
  inline bool has_system_id() const;
  inline void clear_system_id();
  static const int kSystemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 system_id() const;
  inline void set_system_id(::google::protobuf::uint32 value);

  // optional bool is_open = 2;
  inline bool has_is_open() const;
  inline void clear_is_open();
  static const int kIsOpenFieldNumber = 2;
  inline bool is_open() const;
  inline void set_is_open(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_system)
 private:
  inline void set_has_system_id();
  inline void clear_has_system_id();
  inline void set_has_is_open();
  inline void clear_has_is_open();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 system_id_;
  bool is_open_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static game_system* default_instance_;
};
// -------------------------------------------------------------------

class chest_data : public ::google::protobuf::Message {
 public:
  chest_data();
  virtual ~chest_data();

  chest_data(const chest_data& from);

  inline chest_data& operator=(const chest_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chest_data& default_instance();

  void Swap(chest_data* other);

  // implements Message ----------------------------------------------

  chest_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chest_data& from);
  void MergeFrom(const chest_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional uint32 item_count = 2;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 2;
  inline ::google::protobuf::uint32 item_count() const;
  inline void set_item_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chest_data)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_count();
  inline void clear_has_item_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 item_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static chest_data* default_instance_;
};
// -------------------------------------------------------------------

class role_chest : public ::google::protobuf::Message {
 public:
  role_chest();
  virtual ~role_chest();

  role_chest(const role_chest& from);

  inline role_chest& operator=(const role_chest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_chest& default_instance();

  void Swap(role_chest* other);

  // implements Message ----------------------------------------------

  role_chest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_chest& from);
  void MergeFrom(const role_chest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 chest_id = 1;
  inline bool has_chest_id() const;
  inline void clear_chest_id();
  static const int kChestIdFieldNumber = 1;
  inline ::google::protobuf::uint64 chest_id() const;
  inline void set_chest_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.eChestQuality quality = 2;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 2;
  inline ::SProtoSpace::eChestQuality quality() const;
  inline void set_quality(::SProtoSpace::eChestQuality value);

  // repeated .SProtoSpace.chest_data chests = 3;
  inline int chests_size() const;
  inline void clear_chests();
  static const int kChestsFieldNumber = 3;
  inline const ::SProtoSpace::chest_data& chests(int index) const;
  inline ::SProtoSpace::chest_data* mutable_chests(int index);
  inline ::SProtoSpace::chest_data* add_chests();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chest_data >&
      chests() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chest_data >*
      mutable_chests();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_chest)
 private:
  inline void set_has_chest_id();
  inline void clear_has_chest_id();
  inline void set_has_quality();
  inline void clear_has_quality();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 chest_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chest_data > chests_;
  int quality_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static role_chest* default_instance_;
};
// -------------------------------------------------------------------

class offical_item_data : public ::google::protobuf::Message {
 public:
  offical_item_data();
  virtual ~offical_item_data();

  offical_item_data(const offical_item_data& from);

  inline offical_item_data& operator=(const offical_item_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_item_data& default_instance();

  void Swap(offical_item_data* other);

  // implements Message ----------------------------------------------

  offical_item_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offical_item_data& from);
  void MergeFrom(const offical_item_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.EGrade rank_lv = 1;
  inline bool has_rank_lv() const;
  inline void clear_rank_lv();
  static const int kRankLvFieldNumber = 1;
  inline ::SProtoSpace::EGrade rank_lv() const;
  inline void set_rank_lv(::SProtoSpace::EGrade value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 ranking_id = 3;
  inline bool has_ranking_id() const;
  inline void clear_ranking_id();
  static const int kRankingIdFieldNumber = 3;
  inline ::google::protobuf::uint32 ranking_id() const;
  inline void set_ranking_id(::google::protobuf::uint32 value);

  // optional uint32 lv = 4;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 4;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 gongdoupower = 6;
  inline bool has_gongdoupower() const;
  inline void clear_gongdoupower();
  static const int kGongdoupowerFieldNumber = 6;
  inline ::google::protobuf::uint32 gongdoupower() const;
  inline void set_gongdoupower(::google::protobuf::uint32 value);

  // optional int32 win_num = 7;
  inline bool has_win_num() const;
  inline void clear_win_num();
  static const int kWinNumFieldNumber = 7;
  inline ::google::protobuf::int32 win_num() const;
  inline void set_win_num(::google::protobuf::int32 value);

  // optional int32 fail_num = 8;
  inline bool has_fail_num() const;
  inline void clear_fail_num();
  static const int kFailNumFieldNumber = 8;
  inline ::google::protobuf::int32 fail_num() const;
  inline void set_fail_num(::google::protobuf::int32 value);

  // optional string role_name = 9;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 9;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string head = 10;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 10;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  inline void set_allocated_head(::std::string* head);

  // optional string union_name = 11;
  inline bool has_union_name() const;
  inline void clear_union_name();
  static const int kUnionNameFieldNumber = 11;
  inline const ::std::string& union_name() const;
  inline void set_union_name(const ::std::string& value);
  inline void set_union_name(const char* value);
  inline void set_union_name(const char* value, size_t size);
  inline ::std::string* mutable_union_name();
  inline ::std::string* release_union_name();
  inline void set_allocated_union_name(::std::string* union_name);

  // @@protoc_insertion_point(class_scope:SProtoSpace.offical_item_data)
 private:
  inline void set_has_rank_lv();
  inline void clear_has_rank_lv();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_ranking_id();
  inline void clear_has_ranking_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_gongdoupower();
  inline void clear_has_gongdoupower();
  inline void set_has_win_num();
  inline void clear_has_win_num();
  inline void set_has_fail_num();
  inline void clear_has_fail_num();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_union_name();
  inline void clear_has_union_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int rank_lv_;
  ::google::protobuf::uint32 ranking_id_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 gongdoupower_;
  ::google::protobuf::int32 win_num_;
  ::std::string* role_name_;
  ::std::string* head_;
  ::std::string* union_name_;
  ::google::protobuf::int32 fail_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static offical_item_data* default_instance_;
};
// -------------------------------------------------------------------

class offical_member_data : public ::google::protobuf::Message {
 public:
  offical_member_data();
  virtual ~offical_member_data();

  offical_member_data(const offical_member_data& from);

  inline offical_member_data& operator=(const offical_member_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_member_data& default_instance();

  void Swap(offical_member_data* other);

  // implements Message ----------------------------------------------

  offical_member_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offical_member_data& from);
  void MergeFrom(const offical_member_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional uint32 ranking_id = 3;
  inline bool has_ranking_id() const;
  inline void clear_ranking_id();
  static const int kRankingIdFieldNumber = 3;
  inline ::google::protobuf::uint32 ranking_id() const;
  inline void set_ranking_id(::google::protobuf::uint32 value);

  // optional uint32 lv = 4;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 4;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional string head = 6;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 6;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  inline void set_allocated_head(::std::string* head);

  // optional uint32 gongdoupower = 7;
  inline bool has_gongdoupower() const;
  inline void clear_gongdoupower();
  static const int kGongdoupowerFieldNumber = 7;
  inline ::google::protobuf::uint32 gongdoupower() const;
  inline void set_gongdoupower(::google::protobuf::uint32 value);

  // optional string union_name = 8;
  inline bool has_union_name() const;
  inline void clear_union_name();
  static const int kUnionNameFieldNumber = 8;
  inline const ::std::string& union_name() const;
  inline void set_union_name(const ::std::string& value);
  inline void set_union_name(const char* value);
  inline void set_union_name(const char* value, size_t size);
  inline ::std::string* mutable_union_name();
  inline ::std::string* release_union_name();
  inline void set_allocated_union_name(::std::string* union_name);

  // optional int32 grade = 9;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 9;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.offical_member_data)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_ranking_id();
  inline void clear_has_ranking_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_gongdoupower();
  inline void clear_has_gongdoupower();
  inline void set_has_union_name();
  inline void clear_has_union_name();
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::uint32 ranking_id_;
  ::google::protobuf::uint32 lv_;
  ::std::string* head_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 gongdoupower_;
  ::std::string* union_name_;
  ::google::protobuf::int32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static offical_member_data* default_instance_;
};
// -------------------------------------------------------------------

class role_show_role_equipped : public ::google::protobuf::Message {
 public:
  role_show_role_equipped();
  virtual ~role_show_role_equipped();

  role_show_role_equipped(const role_show_role_equipped& from);

  inline role_show_role_equipped& operator=(const role_show_role_equipped& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_role_equipped& default_instance();

  void Swap(role_show_role_equipped* other);

  // implements Message ----------------------------------------------

  role_show_role_equipped* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_role_equipped& from);
  void MergeFrom(const role_show_role_equipped& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 show_role_id = 1;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_role_equipped)
 private:
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 show_role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static role_show_role_equipped* default_instance_;
};
// -------------------------------------------------------------------

class offical_apply_data : public ::google::protobuf::Message {
 public:
  offical_apply_data();
  virtual ~offical_apply_data();

  offical_apply_data(const offical_apply_data& from);

  inline offical_apply_data& operator=(const offical_apply_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_apply_data& default_instance();

  void Swap(offical_apply_data* other);

  // implements Message ----------------------------------------------

  offical_apply_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offical_apply_data& from);
  void MergeFrom(const offical_apply_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.EGrade rank_lv = 1;
  inline bool has_rank_lv() const;
  inline void clear_rank_lv();
  static const int kRankLvFieldNumber = 1;
  inline ::SProtoSpace::EGrade rank_lv() const;
  inline void set_rank_lv(::SProtoSpace::EGrade value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string head = 4;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 4;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  inline void set_allocated_head(::std::string* head);

  // optional uint32 lv = 5;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 5;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional uint32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 grade = 7;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 7;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional uint32 tm = 8;
  inline bool has_tm() const;
  inline void clear_tm();
  static const int kTmFieldNumber = 8;
  inline ::google::protobuf::uint32 tm() const;
  inline void set_tm(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.offical_apply_data)
 private:
  inline void set_has_rank_lv();
  inline void clear_has_rank_lv();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_tm();
  inline void clear_has_tm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  int rank_lv_;
  ::google::protobuf::uint32 lv_;
  ::std::string* head_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::uint32 tm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static offical_apply_data* default_instance_;
};
// -------------------------------------------------------------------

class offical_apply_my_battle_data : public ::google::protobuf::Message {
 public:
  offical_apply_my_battle_data();
  virtual ~offical_apply_my_battle_data();

  offical_apply_my_battle_data(const offical_apply_my_battle_data& from);

  inline offical_apply_my_battle_data& operator=(const offical_apply_my_battle_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_apply_my_battle_data& default_instance();

  void Swap(offical_apply_my_battle_data* other);

  // implements Message ----------------------------------------------

  offical_apply_my_battle_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offical_apply_my_battle_data& from);
  void MergeFrom(const offical_apply_my_battle_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 dest_role_id = 1;
  inline bool has_dest_role_id() const;
  inline void clear_dest_role_id();
  static const int kDestRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 dest_role_id() const;
  inline void set_dest_role_id(::google::protobuf::uint64 value);

  // optional string dest_name = 2;
  inline bool has_dest_name() const;
  inline void clear_dest_name();
  static const int kDestNameFieldNumber = 2;
  inline const ::std::string& dest_name() const;
  inline void set_dest_name(const ::std::string& value);
  inline void set_dest_name(const char* value);
  inline void set_dest_name(const char* value, size_t size);
  inline ::std::string* mutable_dest_name();
  inline ::std::string* release_dest_name();
  inline void set_allocated_dest_name(::std::string* dest_name);

  // optional string dest_head = 3;
  inline bool has_dest_head() const;
  inline void clear_dest_head();
  static const int kDestHeadFieldNumber = 3;
  inline const ::std::string& dest_head() const;
  inline void set_dest_head(const ::std::string& value);
  inline void set_dest_head(const char* value);
  inline void set_dest_head(const char* value, size_t size);
  inline ::std::string* mutable_dest_head();
  inline ::std::string* release_dest_head();
  inline void set_allocated_dest_head(::std::string* dest_head);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional int32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional bool win = 6;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 6;
  inline bool win() const;
  inline void set_win(bool value);

  // optional int32 grade = 7;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 7;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // optional int32 place_id = 8;
  inline bool has_place_id() const;
  inline void clear_place_id();
  static const int kPlaceIdFieldNumber = 8;
  inline ::google::protobuf::int32 place_id() const;
  inline void set_place_id(::google::protobuf::int32 value);

  // optional int32 fight_power = 9;
  inline bool has_fight_power() const;
  inline void clear_fight_power();
  static const int kFightPowerFieldNumber = 9;
  inline ::google::protobuf::int32 fight_power() const;
  inline void set_fight_power(::google::protobuf::int32 value);

  // optional int32 level = 10;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 10;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.offical_apply_my_battle_data)
 private:
  inline void set_has_dest_role_id();
  inline void clear_has_dest_role_id();
  inline void set_has_dest_name();
  inline void clear_has_dest_name();
  inline void set_has_dest_head();
  inline void clear_has_dest_head();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_place_id();
  inline void clear_has_place_id();
  inline void set_has_fight_power();
  inline void clear_has_fight_power();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 dest_role_id_;
  ::std::string* dest_name_;
  ::std::string* dest_head_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::int32 score_;
  bool win_;
  ::google::protobuf::int32 grade_;
  ::google::protobuf::int32 place_id_;
  ::google::protobuf::int32 fight_power_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static offical_apply_my_battle_data* default_instance_;
};
// -------------------------------------------------------------------

class offical_apply_battle_data : public ::google::protobuf::Message {
 public:
  offical_apply_battle_data();
  virtual ~offical_apply_battle_data();

  offical_apply_battle_data(const offical_apply_battle_data& from);

  inline offical_apply_battle_data& operator=(const offical_apply_battle_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_apply_battle_data& default_instance();

  void Swap(offical_apply_battle_data* other);

  // implements Message ----------------------------------------------

  offical_apply_battle_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offical_apply_battle_data& from);
  void MergeFrom(const offical_apply_battle_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.EGrade rank_lv = 1;
  inline bool has_rank_lv() const;
  inline void clear_rank_lv();
  static const int kRankLvFieldNumber = 1;
  inline ::SProtoSpace::EGrade rank_lv() const;
  inline void set_rank_lv(::SProtoSpace::EGrade value);

  // optional uint32 ranking_id = 2;
  inline bool has_ranking_id() const;
  inline void clear_ranking_id();
  static const int kRankingIdFieldNumber = 2;
  inline ::google::protobuf::uint32 ranking_id() const;
  inline void set_ranking_id(::google::protobuf::uint32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional string role_name = 5;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 5;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional uint32 win_num = 6;
  inline bool has_win_num() const;
  inline void clear_win_num();
  static const int kWinNumFieldNumber = 6;
  inline ::google::protobuf::uint32 win_num() const;
  inline void set_win_num(::google::protobuf::uint32 value);

  // optional uint32 failed_num = 7;
  inline bool has_failed_num() const;
  inline void clear_failed_num();
  static const int kFailedNumFieldNumber = 7;
  inline ::google::protobuf::uint32 failed_num() const;
  inline void set_failed_num(::google::protobuf::uint32 value);

  // optional uint32 score = 8;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 8;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional bool admit = 9;
  inline bool has_admit() const;
  inline void clear_admit();
  static const int kAdmitFieldNumber = 9;
  inline bool admit() const;
  inline void set_admit(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.offical_apply_battle_data)
 private:
  inline void set_has_rank_lv();
  inline void clear_has_rank_lv();
  inline void set_has_ranking_id();
  inline void clear_has_ranking_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_win_num();
  inline void clear_has_win_num();
  inline void set_has_failed_num();
  inline void clear_has_failed_num();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_admit();
  inline void clear_has_admit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int rank_lv_;
  ::google::protobuf::uint32 ranking_id_;
  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 win_num_;
  ::google::protobuf::uint32 failed_num_;
  ::google::protobuf::uint32 score_;
  bool admit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static offical_apply_battle_data* default_instance_;
};
// -------------------------------------------------------------------

class rank_base_item : public ::google::protobuf::Message {
 public:
  rank_base_item();
  virtual ~rank_base_item();

  rank_base_item(const rank_base_item& from);

  inline rank_base_item& operator=(const rank_base_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rank_base_item& default_instance();

  void Swap(rank_base_item* other);

  // implements Message ----------------------------------------------

  rank_base_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rank_base_item& from);
  void MergeFrom(const rank_base_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string head = 3;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 3;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  inline void set_allocated_head(::std::string* head);

  // optional uint32 lv = 4;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 4;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 grade = 6;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 6;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional uint32 avatar_box = 7;
  inline bool has_avatar_box() const;
  inline void clear_avatar_box();
  static const int kAvatarBoxFieldNumber = 7;
  inline ::google::protobuf::uint32 avatar_box() const;
  inline void set_avatar_box(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.rank_base_item)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_avatar_box();
  inline void clear_has_avatar_box();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* name_;
  ::std::string* head_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::uint32 avatar_box_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static rank_base_item* default_instance_;
};
// -------------------------------------------------------------------

class rank_common_item : public ::google::protobuf::Message {
 public:
  rank_common_item();
  virtual ~rank_common_item();

  rank_common_item(const rank_common_item& from);

  inline rank_common_item& operator=(const rank_common_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rank_common_item& default_instance();

  void Swap(rank_common_item* other);

  // implements Message ----------------------------------------------

  rank_common_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rank_common_item& from);
  void MergeFrom(const rank_common_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 place_id = 1;
  inline bool has_place_id() const;
  inline void clear_place_id();
  static const int kPlaceIdFieldNumber = 1;
  inline ::google::protobuf::uint32 place_id() const;
  inline void set_place_id(::google::protobuf::uint32 value);

  // optional uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // optional .SProtoSpace.rank_base_item base_data = 3;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 3;
  inline const ::SProtoSpace::rank_base_item& base_data() const;
  inline ::SProtoSpace::rank_base_item* mutable_base_data();
  inline ::SProtoSpace::rank_base_item* release_base_data();
  inline void set_allocated_base_data(::SProtoSpace::rank_base_item* base_data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.rank_common_item)
 private:
  inline void set_has_place_id();
  inline void clear_has_place_id();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_base_data();
  inline void clear_has_base_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 place_id_;
  ::google::protobuf::uint32 value_;
  ::SProtoSpace::rank_base_item* base_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static rank_common_item* default_instance_;
};
// -------------------------------------------------------------------

class public_role_base_info : public ::google::protobuf::Message {
 public:
  public_role_base_info();
  virtual ~public_role_base_info();

  public_role_base_info(const public_role_base_info& from);

  inline public_role_base_info& operator=(const public_role_base_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const public_role_base_info& default_instance();

  void Swap(public_role_base_info* other);

  // implements Message ----------------------------------------------

  public_role_base_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const public_role_base_info& from);
  void MergeFrom(const public_role_base_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string head = 3;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 3;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  inline void set_allocated_head(::std::string* head);

  // optional uint32 lv = 4;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 4;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 grade = 6;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 6;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional int32 border = 7;
  inline bool has_border() const;
  inline void clear_border();
  static const int kBorderFieldNumber = 7;
  inline ::google::protobuf::int32 border() const;
  inline void set_border(::google::protobuf::int32 value);

  // optional uint64 fight_power = 8;
  inline bool has_fight_power() const;
  inline void clear_fight_power();
  static const int kFightPowerFieldNumber = 8;
  inline ::google::protobuf::uint64 fight_power() const;
  inline void set_fight_power(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.public_role_base_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_border();
  inline void clear_has_border();
  inline void set_has_fight_power();
  inline void clear_has_fight_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* name_;
  ::std::string* head_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::int32 border_;
  ::google::protobuf::uint64 fight_power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static public_role_base_info* default_instance_;
};
// -------------------------------------------------------------------

class role_base_3part : public ::google::protobuf::Message {
 public:
  role_base_3part();
  virtual ~role_base_3part();

  role_base_3part(const role_base_3part& from);

  inline role_base_3part& operator=(const role_base_3part& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_base_3part& default_instance();

  void Swap(role_base_3part* other);

  // implements Message ----------------------------------------------

  role_base_3part* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_base_3part& from);
  void MergeFrom(const role_base_3part& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.public_role_base_info base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::SProtoSpace::public_role_base_info& base() const;
  inline ::SProtoSpace::public_role_base_info* mutable_base();
  inline ::SProtoSpace::public_role_base_info* release_base();
  inline void set_allocated_base(::SProtoSpace::public_role_base_info* base);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_base_3part)
 private:
  inline void set_has_base();
  inline void clear_has_base();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::public_role_base_info* base_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static role_base_3part* default_instance_;
};
// -------------------------------------------------------------------

class coordinate : public ::google::protobuf::Message {
 public:
  coordinate();
  virtual ~coordinate();

  coordinate(const coordinate& from);

  inline coordinate& operator=(const coordinate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const coordinate& default_instance();

  void Swap(coordinate* other);

  // implements Message ----------------------------------------------

  coordinate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const coordinate& from);
  void MergeFrom(const coordinate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.coordinate)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static coordinate* default_instance_;
};
// -------------------------------------------------------------------

class role_position : public ::google::protobuf::Message {
 public:
  role_position();
  virtual ~role_position();

  role_position(const role_position& from);

  inline role_position& operator=(const role_position& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_position& default_instance();

  void Swap(role_position* other);

  // implements Message ----------------------------------------------

  role_position* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_position& from);
  void MergeFrom(const role_position& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.coordinate pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::SProtoSpace::coordinate& pos() const;
  inline ::SProtoSpace::coordinate* mutable_pos();
  inline ::SProtoSpace::coordinate* release_pos();
  inline void set_allocated_pos(::SProtoSpace::coordinate* pos);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_position)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::SProtoSpace::coordinate* pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static role_position* default_instance_;
};
// -------------------------------------------------------------------

class role_move : public ::google::protobuf::Message {
 public:
  role_move();
  virtual ~role_move();

  role_move(const role_move& from);

  inline role_move& operator=(const role_move& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_move& default_instance();

  void Swap(role_move* other);

  // implements Message ----------------------------------------------

  role_move* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_move& from);
  void MergeFrom(const role_move& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.coordinate sour_pos = 2;
  inline bool has_sour_pos() const;
  inline void clear_sour_pos();
  static const int kSourPosFieldNumber = 2;
  inline const ::SProtoSpace::coordinate& sour_pos() const;
  inline ::SProtoSpace::coordinate* mutable_sour_pos();
  inline ::SProtoSpace::coordinate* release_sour_pos();
  inline void set_allocated_sour_pos(::SProtoSpace::coordinate* sour_pos);

  // optional .SProtoSpace.coordinate dest_pos = 3;
  inline bool has_dest_pos() const;
  inline void clear_dest_pos();
  static const int kDestPosFieldNumber = 3;
  inline const ::SProtoSpace::coordinate& dest_pos() const;
  inline ::SProtoSpace::coordinate* mutable_dest_pos();
  inline ::SProtoSpace::coordinate* release_dest_pos();
  inline void set_allocated_dest_pos(::SProtoSpace::coordinate* dest_pos);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_move)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sour_pos();
  inline void clear_has_sour_pos();
  inline void set_has_dest_pos();
  inline void clear_has_dest_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::SProtoSpace::coordinate* sour_pos_;
  ::SProtoSpace::coordinate* dest_pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static role_move* default_instance_;
};
// -------------------------------------------------------------------

class chat_room_state : public ::google::protobuf::Message {
 public:
  chat_room_state();
  virtual ~chat_room_state();

  chat_room_state(const chat_room_state& from);

  inline chat_room_state& operator=(const chat_room_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_room_state& default_instance();

  void Swap(chat_room_state* other);

  // implements Message ----------------------------------------------

  chat_room_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chat_room_state& from);
  void MergeFrom(const chat_room_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional string room_name = 2;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 2;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  inline ::std::string* release_room_name();
  inline void set_allocated_room_name(::std::string* room_name);

  // repeated int32 sexs = 3;
  inline int sexs_size() const;
  inline void clear_sexs();
  static const int kSexsFieldNumber = 3;
  inline ::google::protobuf::int32 sexs(int index) const;
  inline void set_sexs(int index, ::google::protobuf::int32 value);
  inline void add_sexs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sexs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sexs();

  // optional bool token = 4;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 4;
  inline bool token() const;
  inline void set_token(bool value);

  // optional int32 conf_id = 5;
  inline bool has_conf_id() const;
  inline void clear_conf_id();
  static const int kConfIdFieldNumber = 5;
  inline ::google::protobuf::int32 conf_id() const;
  inline void set_conf_id(::google::protobuf::int32 value);

  // optional bool top = 6;
  inline bool has_top() const;
  inline void clear_top();
  static const int kTopFieldNumber = 6;
  inline bool top() const;
  inline void set_top(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.chat_room_state)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_room_name();
  inline void clear_has_room_name();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_conf_id();
  inline void clear_has_conf_id();
  inline void set_has_top();
  inline void clear_has_top();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* room_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sexs_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 conf_id_;
  bool token_;
  bool top_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static chat_room_state* default_instance_;
};
// -------------------------------------------------------------------

class plot_screen_info : public ::google::protobuf::Message {
 public:
  plot_screen_info();
  virtual ~plot_screen_info();

  plot_screen_info(const plot_screen_info& from);

  inline plot_screen_info& operator=(const plot_screen_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const plot_screen_info& default_instance();

  void Swap(plot_screen_info* other);

  // implements Message ----------------------------------------------

  plot_screen_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const plot_screen_info& from);
  void MergeFrom(const plot_screen_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 chapter_id = 1;
  inline bool has_chapter_id() const;
  inline void clear_chapter_id();
  static const int kChapterIdFieldNumber = 1;
  inline ::google::protobuf::uint32 chapter_id() const;
  inline void set_chapter_id(::google::protobuf::uint32 value);

  // optional uint32 screen_id = 2;
  inline bool has_screen_id() const;
  inline void clear_screen_id();
  static const int kScreenIdFieldNumber = 2;
  inline ::google::protobuf::uint32 screen_id() const;
  inline void set_screen_id(::google::protobuf::uint32 value);

  // repeated uint32 section_ids = 3;
  inline int section_ids_size() const;
  inline void clear_section_ids();
  static const int kSectionIdsFieldNumber = 3;
  inline ::google::protobuf::uint32 section_ids(int index) const;
  inline void set_section_ids(int index, ::google::protobuf::uint32 value);
  inline void add_section_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      section_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_section_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.plot_screen_info)
 private:
  inline void set_has_chapter_id();
  inline void clear_has_chapter_id();
  inline void set_has_screen_id();
  inline void clear_has_screen_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 chapter_id_;
  ::google::protobuf::uint32 screen_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > section_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static plot_screen_info* default_instance_;
};
// -------------------------------------------------------------------

class add_character_attr_info : public ::google::protobuf::Message {
 public:
  add_character_attr_info();
  virtual ~add_character_attr_info();

  add_character_attr_info(const add_character_attr_info& from);

  inline add_character_attr_info& operator=(const add_character_attr_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const add_character_attr_info& default_instance();

  void Swap(add_character_attr_info* other);

  // implements Message ----------------------------------------------

  add_character_attr_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const add_character_attr_info& from);
  void MergeFrom(const add_character_attr_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECHARACTER_ATTRIBUTE_TYPE type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::SProtoSpace::ECHARACTER_ATTRIBUTE_TYPE type() const;
  inline void set_type(::SProtoSpace::ECHARACTER_ATTRIBUTE_TYPE value);

  // optional int32 change_value = 2;
  inline bool has_change_value() const;
  inline void clear_change_value();
  static const int kChangeValueFieldNumber = 2;
  inline ::google::protobuf::int32 change_value() const;
  inline void set_change_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.add_character_attr_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_change_value();
  inline void clear_has_change_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 change_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static add_character_attr_info* default_instance_;
};
// -------------------------------------------------------------------

class add_royal_value_info : public ::google::protobuf::Message {
 public:
  add_royal_value_info();
  virtual ~add_royal_value_info();

  add_royal_value_info(const add_royal_value_info& from);

  inline add_royal_value_info& operator=(const add_royal_value_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const add_royal_value_info& default_instance();

  void Swap(add_royal_value_info* other);

  // implements Message ----------------------------------------------

  add_royal_value_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const add_royal_value_info& from);
  void MergeFrom(const add_royal_value_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 npc_id = 1;
  inline bool has_npc_id() const;
  inline void clear_npc_id();
  static const int kNpcIdFieldNumber = 1;
  inline ::google::protobuf::uint32 npc_id() const;
  inline void set_npc_id(::google::protobuf::uint32 value);

  // optional int32 change_value = 2;
  inline bool has_change_value() const;
  inline void clear_change_value();
  static const int kChangeValueFieldNumber = 2;
  inline ::google::protobuf::int32 change_value() const;
  inline void set_change_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.add_royal_value_info)
 private:
  inline void set_has_npc_id();
  inline void clear_has_npc_id();
  inline void set_has_change_value();
  inline void clear_has_change_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 npc_id_;
  ::google::protobuf::int32 change_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static add_royal_value_info* default_instance_;
};
// -------------------------------------------------------------------

class character_attr_info : public ::google::protobuf::Message {
 public:
  character_attr_info();
  virtual ~character_attr_info();

  character_attr_info(const character_attr_info& from);

  inline character_attr_info& operator=(const character_attr_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const character_attr_info& default_instance();

  void Swap(character_attr_info* other);

  // implements Message ----------------------------------------------

  character_attr_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const character_attr_info& from);
  void MergeFrom(const character_attr_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECHARACTER_ATTRIBUTE_TYPE type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::SProtoSpace::ECHARACTER_ATTRIBUTE_TYPE type() const;
  inline void set_type(::SProtoSpace::ECHARACTER_ATTRIBUTE_TYPE value);

  // optional int32 current_value = 2;
  inline bool has_current_value() const;
  inline void clear_current_value();
  static const int kCurrentValueFieldNumber = 2;
  inline ::google::protobuf::int32 current_value() const;
  inline void set_current_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.character_attr_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_current_value();
  inline void clear_has_current_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 current_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static character_attr_info* default_instance_;
};
// -------------------------------------------------------------------

class itemid_and_num : public ::google::protobuf::Message {
 public:
  itemid_and_num();
  virtual ~itemid_and_num();

  itemid_and_num(const itemid_and_num& from);

  inline itemid_and_num& operator=(const itemid_and_num& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const itemid_and_num& default_instance();

  void Swap(itemid_and_num* other);

  // implements Message ----------------------------------------------

  itemid_and_num* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const itemid_and_num& from);
  void MergeFrom(const itemid_and_num& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional uint32 item_count = 2;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 2;
  inline ::google::protobuf::uint32 item_count() const;
  inline void set_item_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.itemid_and_num)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_count();
  inline void clear_has_item_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 item_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static itemid_and_num* default_instance_;
};
// -------------------------------------------------------------------

class mail_attach : public ::google::protobuf::Message {
 public:
  mail_attach();
  virtual ~mail_attach();

  mail_attach(const mail_attach& from);

  inline mail_attach& operator=(const mail_attach& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_attach& default_instance();

  void Swap(mail_attach* other);

  // implements Message ----------------------------------------------

  mail_attach* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_attach& from);
  void MergeFrom(const mail_attach& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 item_config_id = 1;
  inline bool has_item_config_id() const;
  inline void clear_item_config_id();
  static const int kItemConfigIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_config_id() const;
  inline void set_item_config_id(::google::protobuf::int32 value);

  // optional int32 item_count = 2;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 2;
  inline ::google::protobuf::int32 item_count() const;
  inline void set_item_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_attach)
 private:
  inline void set_has_item_config_id();
  inline void clear_has_item_config_id();
  inline void set_has_item_count();
  inline void clear_has_item_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 item_config_id_;
  ::google::protobuf::int32 item_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static mail_attach* default_instance_;
};
// -------------------------------------------------------------------

class mail_instance_attaches : public ::google::protobuf::Message {
 public:
  mail_instance_attaches();
  virtual ~mail_instance_attaches();

  mail_instance_attaches(const mail_instance_attaches& from);

  inline mail_instance_attaches& operator=(const mail_instance_attaches& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_instance_attaches& default_instance();

  void Swap(mail_instance_attaches* other);

  // implements Message ----------------------------------------------

  mail_instance_attaches* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_instance_attaches& from);
  void MergeFrom(const mail_instance_attaches& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.mail_attach attachments = 1;
  inline int attachments_size() const;
  inline void clear_attachments();
  static const int kAttachmentsFieldNumber = 1;
  inline const ::SProtoSpace::mail_attach& attachments(int index) const;
  inline ::SProtoSpace::mail_attach* mutable_attachments(int index);
  inline ::SProtoSpace::mail_attach* add_attachments();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::mail_attach >&
      attachments() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::mail_attach >*
      mutable_attachments();

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_instance_attaches)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::mail_attach > attachments_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static mail_instance_attaches* default_instance_;
};
// -------------------------------------------------------------------

class mail_instance : public ::google::protobuf::Message {
 public:
  mail_instance();
  virtual ~mail_instance();

  mail_instance(const mail_instance& from);

  inline mail_instance& operator=(const mail_instance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_instance& default_instance();

  void Swap(mail_instance* other);

  // implements Message ----------------------------------------------

  mail_instance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_instance& from);
  void MergeFrom(const mail_instance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 mail_instance_id = 1;
  inline bool has_mail_instance_id() const;
  inline void clear_mail_instance_id();
  static const int kMailInstanceIdFieldNumber = 1;
  inline ::google::protobuf::uint64 mail_instance_id() const;
  inline void set_mail_instance_id(::google::protobuf::uint64 value);

  // optional int32 mail_config_id = 2;
  inline bool has_mail_config_id() const;
  inline void clear_mail_config_id();
  static const int kMailConfigIdFieldNumber = 2;
  inline ::google::protobuf::int32 mail_config_id() const;
  inline void set_mail_config_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.eMailPriority priotity = 3;
  inline bool has_priotity() const;
  inline void clear_priotity();
  static const int kPriotityFieldNumber = 3;
  inline ::SProtoSpace::eMailPriority priotity() const;
  inline void set_priotity(::SProtoSpace::eMailPriority value);

  // optional uint64 to_role_id = 4;
  inline bool has_to_role_id() const;
  inline void clear_to_role_id();
  static const int kToRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 to_role_id() const;
  inline void set_to_role_id(::google::protobuf::uint64 value);

  // optional uint64 from_role_id = 5;
  inline bool has_from_role_id() const;
  inline void clear_from_role_id();
  static const int kFromRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint64 from_role_id() const;
  inline void set_from_role_id(::google::protobuf::uint64 value);

  // optional string title = 6;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 6;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 7;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 7;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional .SProtoSpace.mail_instance_attaches attachments = 8;
  inline bool has_attachments() const;
  inline void clear_attachments();
  static const int kAttachmentsFieldNumber = 8;
  inline const ::SProtoSpace::mail_instance_attaches& attachments() const;
  inline ::SProtoSpace::mail_instance_attaches* mutable_attachments();
  inline ::SProtoSpace::mail_instance_attaches* release_attachments();
  inline void set_allocated_attachments(::SProtoSpace::mail_instance_attaches* attachments);

  // optional bool is_read = 9;
  inline bool has_is_read() const;
  inline void clear_is_read();
  static const int kIsReadFieldNumber = 9;
  inline bool is_read() const;
  inline void set_is_read(bool value);

  // optional bool is_get_attach = 10;
  inline bool has_is_get_attach() const;
  inline void clear_is_get_attach();
  static const int kIsGetAttachFieldNumber = 10;
  inline bool is_get_attach() const;
  inline void set_is_get_attach(bool value);

  // optional uint64 invalid_utc_time = 11;
  inline bool has_invalid_utc_time() const;
  inline void clear_invalid_utc_time();
  static const int kInvalidUtcTimeFieldNumber = 11;
  inline ::google::protobuf::uint64 invalid_utc_time() const;
  inline void set_invalid_utc_time(::google::protobuf::uint64 value);

  // optional uint64 mail_templet_id = 12;
  inline bool has_mail_templet_id() const;
  inline void clear_mail_templet_id();
  static const int kMailTempletIdFieldNumber = 12;
  inline ::google::protobuf::uint64 mail_templet_id() const;
  inline void set_mail_templet_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.eMailServerType server_type = 13;
  inline bool has_server_type() const;
  inline void clear_server_type();
  static const int kServerTypeFieldNumber = 13;
  inline ::SProtoSpace::eMailServerType server_type() const;
  inline void set_server_type(::SProtoSpace::eMailServerType value);

  // optional .SProtoSpace.eMailClientType client_type = 14;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 14;
  inline ::SProtoSpace::eMailClientType client_type() const;
  inline void set_client_type(::SProtoSpace::eMailClientType value);

  // optional string from_role_name = 15;
  inline bool has_from_role_name() const;
  inline void clear_from_role_name();
  static const int kFromRoleNameFieldNumber = 15;
  inline const ::std::string& from_role_name() const;
  inline void set_from_role_name(const ::std::string& value);
  inline void set_from_role_name(const char* value);
  inline void set_from_role_name(const char* value, size_t size);
  inline ::std::string* mutable_from_role_name();
  inline ::std::string* release_from_role_name();
  inline void set_allocated_from_role_name(::std::string* from_role_name);

  // optional string from_role_avatar_url = 16;
  inline bool has_from_role_avatar_url() const;
  inline void clear_from_role_avatar_url();
  static const int kFromRoleAvatarUrlFieldNumber = 16;
  inline const ::std::string& from_role_avatar_url() const;
  inline void set_from_role_avatar_url(const ::std::string& value);
  inline void set_from_role_avatar_url(const char* value);
  inline void set_from_role_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_from_role_avatar_url();
  inline ::std::string* release_from_role_avatar_url();
  inline void set_allocated_from_role_avatar_url(::std::string* from_role_avatar_url);

  // optional int32 from_role_gender_id = 17;
  inline bool has_from_role_gender_id() const;
  inline void clear_from_role_gender_id();
  static const int kFromRoleGenderIdFieldNumber = 17;
  inline ::google::protobuf::int32 from_role_gender_id() const;
  inline void set_from_role_gender_id(::google::protobuf::int32 value);

  // optional int32 from_role_avatar_box_id = 18;
  inline bool has_from_role_avatar_box_id() const;
  inline void clear_from_role_avatar_box_id();
  static const int kFromRoleAvatarBoxIdFieldNumber = 18;
  inline ::google::protobuf::int32 from_role_avatar_box_id() const;
  inline void set_from_role_avatar_box_id(::google::protobuf::int32 value);

  // optional int32 from_role_level = 19;
  inline bool has_from_role_level() const;
  inline void clear_from_role_level();
  static const int kFromRoleLevelFieldNumber = 19;
  inline ::google::protobuf::int32 from_role_level() const;
  inline void set_from_role_level(::google::protobuf::int32 value);

  // optional int32 from_role_officer_grade = 20;
  inline bool has_from_role_officer_grade() const;
  inline void clear_from_role_officer_grade();
  static const int kFromRoleOfficerGradeFieldNumber = 20;
  inline ::google::protobuf::int32 from_role_officer_grade() const;
  inline void set_from_role_officer_grade(::google::protobuf::int32 value);

  // optional uint32 utc_time_generate = 21;
  inline bool has_utc_time_generate() const;
  inline void clear_utc_time_generate();
  static const int kUtcTimeGenerateFieldNumber = 21;
  inline ::google::protobuf::uint32 utc_time_generate() const;
  inline void set_utc_time_generate(::google::protobuf::uint32 value);

  // optional uint32 utc_time_invalid = 22;
  inline bool has_utc_time_invalid() const;
  inline void clear_utc_time_invalid();
  static const int kUtcTimeInvalidFieldNumber = 22;
  inline ::google::protobuf::uint32 utc_time_invalid() const;
  inline void set_utc_time_invalid(::google::protobuf::uint32 value);

  // optional uint32 time_generate = 23;
  inline bool has_time_generate() const;
  inline void clear_time_generate();
  static const int kTimeGenerateFieldNumber = 23;
  inline ::google::protobuf::uint32 time_generate() const;
  inline void set_time_generate(::google::protobuf::uint32 value);

  // optional uint32 time_invalid = 24;
  inline bool has_time_invalid() const;
  inline void clear_time_invalid();
  static const int kTimeInvalidFieldNumber = 24;
  inline ::google::protobuf::uint32 time_invalid() const;
  inline void set_time_invalid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_instance)
 private:
  inline void set_has_mail_instance_id();
  inline void clear_has_mail_instance_id();
  inline void set_has_mail_config_id();
  inline void clear_has_mail_config_id();
  inline void set_has_priotity();
  inline void clear_has_priotity();
  inline void set_has_to_role_id();
  inline void clear_has_to_role_id();
  inline void set_has_from_role_id();
  inline void clear_has_from_role_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_attachments();
  inline void clear_has_attachments();
  inline void set_has_is_read();
  inline void clear_has_is_read();
  inline void set_has_is_get_attach();
  inline void clear_has_is_get_attach();
  inline void set_has_invalid_utc_time();
  inline void clear_has_invalid_utc_time();
  inline void set_has_mail_templet_id();
  inline void clear_has_mail_templet_id();
  inline void set_has_server_type();
  inline void clear_has_server_type();
  inline void set_has_client_type();
  inline void clear_has_client_type();
  inline void set_has_from_role_name();
  inline void clear_has_from_role_name();
  inline void set_has_from_role_avatar_url();
  inline void clear_has_from_role_avatar_url();
  inline void set_has_from_role_gender_id();
  inline void clear_has_from_role_gender_id();
  inline void set_has_from_role_avatar_box_id();
  inline void clear_has_from_role_avatar_box_id();
  inline void set_has_from_role_level();
  inline void clear_has_from_role_level();
  inline void set_has_from_role_officer_grade();
  inline void clear_has_from_role_officer_grade();
  inline void set_has_utc_time_generate();
  inline void clear_has_utc_time_generate();
  inline void set_has_utc_time_invalid();
  inline void clear_has_utc_time_invalid();
  inline void set_has_time_generate();
  inline void clear_has_time_generate();
  inline void set_has_time_invalid();
  inline void clear_has_time_invalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 mail_instance_id_;
  ::google::protobuf::int32 mail_config_id_;
  int priotity_;
  ::google::protobuf::uint64 to_role_id_;
  ::google::protobuf::uint64 from_role_id_;
  ::std::string* title_;
  ::std::string* content_;
  ::SProtoSpace::mail_instance_attaches* attachments_;
  bool is_read_;
  bool is_get_attach_;
  int server_type_;
  ::google::protobuf::uint64 invalid_utc_time_;
  ::google::protobuf::uint64 mail_templet_id_;
  ::std::string* from_role_name_;
  int client_type_;
  ::google::protobuf::int32 from_role_gender_id_;
  ::std::string* from_role_avatar_url_;
  ::google::protobuf::int32 from_role_avatar_box_id_;
  ::google::protobuf::int32 from_role_level_;
  ::google::protobuf::int32 from_role_officer_grade_;
  ::google::protobuf::uint32 utc_time_generate_;
  ::google::protobuf::uint32 utc_time_invalid_;
  ::google::protobuf::uint32 time_generate_;
  ::google::protobuf::uint32 time_invalid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static mail_instance* default_instance_;
};
// -------------------------------------------------------------------

class mail_from_role_info : public ::google::protobuf::Message {
 public:
  mail_from_role_info();
  virtual ~mail_from_role_info();

  mail_from_role_info(const mail_from_role_info& from);

  inline mail_from_role_info& operator=(const mail_from_role_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_from_role_info& default_instance();

  void Swap(mail_from_role_info* other);

  // implements Message ----------------------------------------------

  mail_from_role_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_from_role_info& from);
  void MergeFrom(const mail_from_role_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string role_name = 1;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string avatar_url = 2;
  inline bool has_avatar_url() const;
  inline void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 2;
  inline const ::std::string& avatar_url() const;
  inline void set_avatar_url(const ::std::string& value);
  inline void set_avatar_url(const char* value);
  inline void set_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_avatar_url();
  inline ::std::string* release_avatar_url();
  inline void set_allocated_avatar_url(::std::string* avatar_url);

  // optional int32 avatar_box_id = 3;
  inline bool has_avatar_box_id() const;
  inline void clear_avatar_box_id();
  static const int kAvatarBoxIdFieldNumber = 3;
  inline ::google::protobuf::int32 avatar_box_id() const;
  inline void set_avatar_box_id(::google::protobuf::int32 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 office_grade = 5;
  inline bool has_office_grade() const;
  inline void clear_office_grade();
  static const int kOfficeGradeFieldNumber = 5;
  inline ::google::protobuf::int32 office_grade() const;
  inline void set_office_grade(::google::protobuf::int32 value);

  // optional int32 gender_id = 6;
  inline bool has_gender_id() const;
  inline void clear_gender_id();
  static const int kGenderIdFieldNumber = 6;
  inline ::google::protobuf::int32 gender_id() const;
  inline void set_gender_id(::google::protobuf::int32 value);

  // optional uint64 role_id = 17;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 17;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_from_role_info)
 private:
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_avatar_url();
  inline void clear_has_avatar_url();
  inline void set_has_avatar_box_id();
  inline void clear_has_avatar_box_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_office_grade();
  inline void clear_has_office_grade();
  inline void set_has_gender_id();
  inline void clear_has_gender_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* role_name_;
  ::std::string* avatar_url_;
  ::google::protobuf::int32 avatar_box_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 office_grade_;
  ::google::protobuf::int32 gender_id_;
  ::google::protobuf::uint64 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static mail_from_role_info* default_instance_;
};
// -------------------------------------------------------------------

class mail : public ::google::protobuf::Message {
 public:
  mail();
  virtual ~mail();

  mail(const mail& from);

  inline mail& operator=(const mail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail& default_instance();

  void Swap(mail* other);

  // implements Message ----------------------------------------------

  mail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail& from);
  void MergeFrom(const mail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional int32 cfg_id = 2;
  inline bool has_cfg_id() const;
  inline void clear_cfg_id();
  static const int kCfgIdFieldNumber = 2;
  inline ::google::protobuf::int32 cfg_id() const;
  inline void set_cfg_id(::google::protobuf::int32 value);

  // optional string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional uint64 invalid_time = 5;
  inline bool has_invalid_time() const;
  inline void clear_invalid_time();
  static const int kInvalidTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 invalid_time() const;
  inline void set_invalid_time(::google::protobuf::uint64 value);

  // optional .SProtoSpace.eMailClientType client_type = 6;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 6;
  inline ::SProtoSpace::eMailClientType client_type() const;
  inline void set_client_type(::SProtoSpace::eMailClientType value);

  // optional .SProtoSpace.eMailServerType server_type = 7;
  inline bool has_server_type() const;
  inline void clear_server_type();
  static const int kServerTypeFieldNumber = 7;
  inline ::SProtoSpace::eMailServerType server_type() const;
  inline void set_server_type(::SProtoSpace::eMailServerType value);

  // optional .SProtoSpace.eMailPriority priotity_type = 8;
  inline bool has_priotity_type() const;
  inline void clear_priotity_type();
  static const int kPriotityTypeFieldNumber = 8;
  inline ::SProtoSpace::eMailPriority priotity_type() const;
  inline void set_priotity_type(::SProtoSpace::eMailPriority value);

  // optional uint64 to_role_id = 9;
  inline bool has_to_role_id() const;
  inline void clear_to_role_id();
  static const int kToRoleIdFieldNumber = 9;
  inline ::google::protobuf::uint64 to_role_id() const;
  inline void set_to_role_id(::google::protobuf::uint64 value);

  // optional uint64 from_role_id = 10;
  inline bool has_from_role_id() const;
  inline void clear_from_role_id();
  static const int kFromRoleIdFieldNumber = 10;
  inline ::google::protobuf::uint64 from_role_id() const;
  inline void set_from_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.mail_from_role_info from_role_info = 11;
  inline bool has_from_role_info() const;
  inline void clear_from_role_info();
  static const int kFromRoleInfoFieldNumber = 11;
  inline const ::SProtoSpace::mail_from_role_info& from_role_info() const;
  inline ::SProtoSpace::mail_from_role_info* mutable_from_role_info();
  inline ::SProtoSpace::mail_from_role_info* release_from_role_info();
  inline void set_allocated_from_role_info(::SProtoSpace::mail_from_role_info* from_role_info);

  // optional .SProtoSpace.mail_instance_attaches attachment = 12;
  inline bool has_attachment() const;
  inline void clear_attachment();
  static const int kAttachmentFieldNumber = 12;
  inline const ::SProtoSpace::mail_instance_attaches& attachment() const;
  inline ::SProtoSpace::mail_instance_attaches* mutable_attachment();
  inline ::SProtoSpace::mail_instance_attaches* release_attachment();
  inline void set_allocated_attachment(::SProtoSpace::mail_instance_attaches* attachment);

  // optional bool is_read = 13;
  inline bool has_is_read() const;
  inline void clear_is_read();
  static const int kIsReadFieldNumber = 13;
  inline bool is_read() const;
  inline void set_is_read(bool value);

  // optional bool is_get_attach = 14;
  inline bool has_is_get_attach() const;
  inline void clear_is_get_attach();
  static const int kIsGetAttachFieldNumber = 14;
  inline bool is_get_attach() const;
  inline void set_is_get_attach(bool value);

  // optional uint64 templet_id = 15;
  inline bool has_templet_id() const;
  inline void clear_templet_id();
  static const int kTempletIdFieldNumber = 15;
  inline ::google::protobuf::uint64 templet_id() const;
  inline void set_templet_id(::google::protobuf::uint64 value);

  // optional uint32 generate_time_cli = 16;
  inline bool has_generate_time_cli() const;
  inline void clear_generate_time_cli();
  static const int kGenerateTimeCliFieldNumber = 16;
  inline ::google::protobuf::uint32 generate_time_cli() const;
  inline void set_generate_time_cli(::google::protobuf::uint32 value);

  // optional uint32 invalid_time_cli = 17;
  inline bool has_invalid_time_cli() const;
  inline void clear_invalid_time_cli();
  static const int kInvalidTimeCliFieldNumber = 17;
  inline ::google::protobuf::uint32 invalid_time_cli() const;
  inline void set_invalid_time_cli(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cfg_id();
  inline void clear_has_cfg_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_invalid_time();
  inline void clear_has_invalid_time();
  inline void set_has_client_type();
  inline void clear_has_client_type();
  inline void set_has_server_type();
  inline void clear_has_server_type();
  inline void set_has_priotity_type();
  inline void clear_has_priotity_type();
  inline void set_has_to_role_id();
  inline void clear_has_to_role_id();
  inline void set_has_from_role_id();
  inline void clear_has_from_role_id();
  inline void set_has_from_role_info();
  inline void clear_has_from_role_info();
  inline void set_has_attachment();
  inline void clear_has_attachment();
  inline void set_has_is_read();
  inline void clear_has_is_read();
  inline void set_has_is_get_attach();
  inline void clear_has_is_get_attach();
  inline void set_has_templet_id();
  inline void clear_has_templet_id();
  inline void set_has_generate_time_cli();
  inline void clear_has_generate_time_cli();
  inline void set_has_invalid_time_cli();
  inline void clear_has_invalid_time_cli();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* title_;
  ::std::string* content_;
  ::google::protobuf::int32 cfg_id_;
  int client_type_;
  ::google::protobuf::uint64 invalid_time_;
  int server_type_;
  int priotity_type_;
  ::google::protobuf::uint64 to_role_id_;
  ::google::protobuf::uint64 from_role_id_;
  ::SProtoSpace::mail_from_role_info* from_role_info_;
  ::SProtoSpace::mail_instance_attaches* attachment_;
  bool is_read_;
  bool is_get_attach_;
  ::google::protobuf::uint32 generate_time_cli_;
  ::google::protobuf::uint64 templet_id_;
  ::google::protobuf::uint32 invalid_time_cli_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static mail* default_instance_;
};
// -------------------------------------------------------------------

class mail_template : public ::google::protobuf::Message {
 public:
  mail_template();
  virtual ~mail_template();

  mail_template(const mail_template& from);

  inline mail_template& operator=(const mail_template& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_template& default_instance();

  void Swap(mail_template* other);

  // implements Message ----------------------------------------------

  mail_template* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_template& from);
  void MergeFrom(const mail_template& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 mail_template_id = 1;
  inline bool has_mail_template_id() const;
  inline void clear_mail_template_id();
  static const int kMailTemplateIdFieldNumber = 1;
  inline ::google::protobuf::uint64 mail_template_id() const;
  inline void set_mail_template_id(::google::protobuf::uint64 value);

  // optional int32 mail_config_id = 2;
  inline bool has_mail_config_id() const;
  inline void clear_mail_config_id();
  static const int kMailConfigIdFieldNumber = 2;
  inline ::google::protobuf::int32 mail_config_id() const;
  inline void set_mail_config_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.eMailPriority priotity = 3;
  inline bool has_priotity() const;
  inline void clear_priotity();
  static const int kPriotityFieldNumber = 3;
  inline ::SProtoSpace::eMailPriority priotity() const;
  inline void set_priotity(::SProtoSpace::eMailPriority value);

  // optional .SProtoSpace.eMailServerType server_type = 4;
  inline bool has_server_type() const;
  inline void clear_server_type();
  static const int kServerTypeFieldNumber = 4;
  inline ::SProtoSpace::eMailServerType server_type() const;
  inline void set_server_type(::SProtoSpace::eMailServerType value);

  // optional .SProtoSpace.eMailClientType client_type = 5;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 5;
  inline ::SProtoSpace::eMailClientType client_type() const;
  inline void set_client_type(::SProtoSpace::eMailClientType value);

  // optional string title = 6;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 6;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 7;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 7;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional uint32 life_time = 8;
  inline bool has_life_time() const;
  inline void clear_life_time();
  static const int kLifeTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 life_time() const;
  inline void set_life_time(::google::protobuf::uint32 value);

  // optional uint64 invalid_time = 9;
  inline bool has_invalid_time() const;
  inline void clear_invalid_time();
  static const int kInvalidTimeFieldNumber = 9;
  inline ::google::protobuf::uint64 invalid_time() const;
  inline void set_invalid_time(::google::protobuf::uint64 value);

  // optional .SProtoSpace.mail_instance_attaches attachment = 10;
  inline bool has_attachment() const;
  inline void clear_attachment();
  static const int kAttachmentFieldNumber = 10;
  inline const ::SProtoSpace::mail_instance_attaches& attachment() const;
  inline ::SProtoSpace::mail_instance_attaches* mutable_attachment();
  inline ::SProtoSpace::mail_instance_attaches* release_attachment();
  inline void set_allocated_attachment(::SProtoSpace::mail_instance_attaches* attachment);

  // @@protoc_insertion_point(class_scope:SProtoSpace.mail_template)
 private:
  inline void set_has_mail_template_id();
  inline void clear_has_mail_template_id();
  inline void set_has_mail_config_id();
  inline void clear_has_mail_config_id();
  inline void set_has_priotity();
  inline void clear_has_priotity();
  inline void set_has_server_type();
  inline void clear_has_server_type();
  inline void set_has_client_type();
  inline void clear_has_client_type();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_life_time();
  inline void clear_has_life_time();
  inline void set_has_invalid_time();
  inline void clear_has_invalid_time();
  inline void set_has_attachment();
  inline void clear_has_attachment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 mail_template_id_;
  ::google::protobuf::int32 mail_config_id_;
  int priotity_;
  int server_type_;
  int client_type_;
  ::std::string* title_;
  ::std::string* content_;
  ::google::protobuf::uint64 invalid_time_;
  ::SProtoSpace::mail_instance_attaches* attachment_;
  ::google::protobuf::uint32 life_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static mail_template* default_instance_;
};
// -------------------------------------------------------------------

class event_offical_info : public ::google::protobuf::Message {
 public:
  event_offical_info();
  virtual ~event_offical_info();

  event_offical_info(const event_offical_info& from);

  inline event_offical_info& operator=(const event_offical_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const event_offical_info& default_instance();

  void Swap(event_offical_info* other);

  // implements Message ----------------------------------------------

  event_offical_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const event_offical_info& from);
  void MergeFrom(const event_offical_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 grade = 1;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 1;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.event_offical_info)
 private:
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static event_offical_info* default_instance_;
};
// -------------------------------------------------------------------

class event_offical_reduce : public ::google::protobuf::Message {
 public:
  event_offical_reduce();
  virtual ~event_offical_reduce();

  event_offical_reduce(const event_offical_reduce& from);

  inline event_offical_reduce& operator=(const event_offical_reduce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const event_offical_reduce& default_instance();

  void Swap(event_offical_reduce* other);

  // implements Message ----------------------------------------------

  event_offical_reduce* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const event_offical_reduce& from);
  void MergeFrom(const event_offical_reduce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 old_grade = 1;
  inline bool has_old_grade() const;
  inline void clear_old_grade();
  static const int kOldGradeFieldNumber = 1;
  inline ::google::protobuf::uint32 old_grade() const;
  inline void set_old_grade(::google::protobuf::uint32 value);

  // optional uint32 new_grade = 2;
  inline bool has_new_grade() const;
  inline void clear_new_grade();
  static const int kNewGradeFieldNumber = 2;
  inline ::google::protobuf::uint32 new_grade() const;
  inline void set_new_grade(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.event_offical_reduce)
 private:
  inline void set_has_old_grade();
  inline void clear_has_old_grade();
  inline void set_has_new_grade();
  inline void clear_has_new_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 old_grade_;
  ::google::protobuf::uint32 new_grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static event_offical_reduce* default_instance_;
};
// -------------------------------------------------------------------

class event_flower_info : public ::google::protobuf::Message {
 public:
  event_flower_info();
  virtual ~event_flower_info();

  event_flower_info(const event_flower_info& from);

  inline event_flower_info& operator=(const event_flower_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const event_flower_info& default_instance();

  void Swap(event_flower_info* other);

  // implements Message ----------------------------------------------

  event_flower_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const event_flower_info& from);
  void MergeFrom(const event_flower_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 template_id = 1;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 1;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 count_num = 2;
  inline bool has_count_num() const;
  inline void clear_count_num();
  static const int kCountNumFieldNumber = 2;
  inline ::google::protobuf::int32 count_num() const;
  inline void set_count_num(::google::protobuf::int32 value);

  // optional int32 default_remark_index = 3;
  inline bool has_default_remark_index() const;
  inline void clear_default_remark_index();
  static const int kDefaultRemarkIndexFieldNumber = 3;
  inline ::google::protobuf::int32 default_remark_index() const;
  inline void set_default_remark_index(::google::protobuf::int32 value);

  // optional string custom_remark = 4;
  inline bool has_custom_remark() const;
  inline void clear_custom_remark();
  static const int kCustomRemarkFieldNumber = 4;
  inline const ::std::string& custom_remark() const;
  inline void set_custom_remark(const ::std::string& value);
  inline void set_custom_remark(const char* value);
  inline void set_custom_remark(const char* value, size_t size);
  inline ::std::string* mutable_custom_remark();
  inline ::std::string* release_custom_remark();
  inline void set_allocated_custom_remark(::std::string* custom_remark);

  // @@protoc_insertion_point(class_scope:SProtoSpace.event_flower_info)
 private:
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_count_num();
  inline void clear_has_count_num();
  inline void set_has_default_remark_index();
  inline void clear_has_default_remark_index();
  inline void set_has_custom_remark();
  inline void clear_has_custom_remark();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 count_num_;
  ::std::string* custom_remark_;
  ::google::protobuf::int32 default_remark_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static event_flower_info* default_instance_;
};
// -------------------------------------------------------------------

class event_flower_send_info : public ::google::protobuf::Message {
 public:
  event_flower_send_info();
  virtual ~event_flower_send_info();

  event_flower_send_info(const event_flower_send_info& from);

  inline event_flower_send_info& operator=(const event_flower_send_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const event_flower_send_info& default_instance();

  void Swap(event_flower_send_info* other);

  // implements Message ----------------------------------------------

  event_flower_send_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const event_flower_send_info& from);
  void MergeFrom(const event_flower_send_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.public_role_base_info to_role_info = 1;
  inline bool has_to_role_info() const;
  inline void clear_to_role_info();
  static const int kToRoleInfoFieldNumber = 1;
  inline const ::SProtoSpace::public_role_base_info& to_role_info() const;
  inline ::SProtoSpace::public_role_base_info* mutable_to_role_info();
  inline ::SProtoSpace::public_role_base_info* release_to_role_info();
  inline void set_allocated_to_role_info(::SProtoSpace::public_role_base_info* to_role_info);

  // optional .SProtoSpace.event_flower_info flower_info = 2;
  inline bool has_flower_info() const;
  inline void clear_flower_info();
  static const int kFlowerInfoFieldNumber = 2;
  inline const ::SProtoSpace::event_flower_info& flower_info() const;
  inline ::SProtoSpace::event_flower_info* mutable_flower_info();
  inline ::SProtoSpace::event_flower_info* release_flower_info();
  inline void set_allocated_flower_info(::SProtoSpace::event_flower_info* flower_info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.event_flower_send_info)
 private:
  inline void set_has_to_role_info();
  inline void clear_has_to_role_info();
  inline void set_has_flower_info();
  inline void clear_has_flower_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::public_role_base_info* to_role_info_;
  ::SProtoSpace::event_flower_info* flower_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static event_flower_send_info* default_instance_;
};
// -------------------------------------------------------------------

class db_event_msg_info : public ::google::protobuf::Message {
 public:
  db_event_msg_info();
  virtual ~db_event_msg_info();

  db_event_msg_info(const db_event_msg_info& from);

  inline db_event_msg_info& operator=(const db_event_msg_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_event_msg_info& default_instance();

  void Swap(db_event_msg_info* other);

  // implements Message ----------------------------------------------

  db_event_msg_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_event_msg_info& from);
  void MergeFrom(const db_event_msg_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 from_id = 3;
  inline bool has_from_id() const;
  inline void clear_from_id();
  static const int kFromIdFieldNumber = 3;
  inline ::google::protobuf::uint64 from_id() const;
  inline void set_from_id(::google::protobuf::uint64 value);

  // optional string from_name = 4;
  inline bool has_from_name() const;
  inline void clear_from_name();
  static const int kFromNameFieldNumber = 4;
  inline const ::std::string& from_name() const;
  inline void set_from_name(const ::std::string& value);
  inline void set_from_name(const char* value);
  inline void set_from_name(const char* value, size_t size);
  inline ::std::string* mutable_from_name();
  inline ::std::string* release_from_name();
  inline void set_allocated_from_name(::std::string* from_name);

  // optional uint32 from_lv = 5;
  inline bool has_from_lv() const;
  inline void clear_from_lv();
  static const int kFromLvFieldNumber = 5;
  inline ::google::protobuf::uint32 from_lv() const;
  inline void set_from_lv(::google::protobuf::uint32 value);

  // optional uint32 from_sex = 6;
  inline bool has_from_sex() const;
  inline void clear_from_sex();
  static const int kFromSexFieldNumber = 6;
  inline ::google::protobuf::uint32 from_sex() const;
  inline void set_from_sex(::google::protobuf::uint32 value);

  // optional uint32 from_grade = 7;
  inline bool has_from_grade() const;
  inline void clear_from_grade();
  static const int kFromGradeFieldNumber = 7;
  inline ::google::protobuf::uint32 from_grade() const;
  inline void set_from_grade(::google::protobuf::uint32 value);

  // optional int32 from_border = 8;
  inline bool has_from_border() const;
  inline void clear_from_border();
  static const int kFromBorderFieldNumber = 8;
  inline ::google::protobuf::int32 from_border() const;
  inline void set_from_border(::google::protobuf::int32 value);

  // optional uint32 event_type = 9;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 9;
  inline ::google::protobuf::uint32 event_type() const;
  inline void set_event_type(::google::protobuf::uint32 value);

  // optional uint64 add_time = 10;
  inline bool has_add_time() const;
  inline void clear_add_time();
  static const int kAddTimeFieldNumber = 10;
  inline ::google::protobuf::uint64 add_time() const;
  inline void set_add_time(::google::protobuf::uint64 value);

  // optional uint32 is_read = 11;
  inline bool has_is_read() const;
  inline void clear_is_read();
  static const int kIsReadFieldNumber = 11;
  inline ::google::protobuf::uint32 is_read() const;
  inline void set_is_read(::google::protobuf::uint32 value);

  // optional uint32 msg_template_id = 12;
  inline bool has_msg_template_id() const;
  inline void clear_msg_template_id();
  static const int kMsgTemplateIdFieldNumber = 12;
  inline ::google::protobuf::uint32 msg_template_id() const;
  inline void set_msg_template_id(::google::protobuf::uint32 value);

  // optional string msg_content = 13;
  inline bool has_msg_content() const;
  inline void clear_msg_content();
  static const int kMsgContentFieldNumber = 13;
  inline const ::std::string& msg_content() const;
  inline void set_msg_content(const ::std::string& value);
  inline void set_msg_content(const char* value);
  inline void set_msg_content(const char* value, size_t size);
  inline ::std::string* mutable_msg_content();
  inline ::std::string* release_msg_content();
  inline void set_allocated_msg_content(::std::string* msg_content);

  // @@protoc_insertion_point(class_scope:SProtoSpace.db_event_msg_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_from_id();
  inline void clear_has_from_id();
  inline void set_has_from_name();
  inline void clear_has_from_name();
  inline void set_has_from_lv();
  inline void clear_has_from_lv();
  inline void set_has_from_sex();
  inline void clear_has_from_sex();
  inline void set_has_from_grade();
  inline void clear_has_from_grade();
  inline void set_has_from_border();
  inline void clear_has_from_border();
  inline void set_has_event_type();
  inline void clear_has_event_type();
  inline void set_has_add_time();
  inline void clear_has_add_time();
  inline void set_has_is_read();
  inline void clear_has_is_read();
  inline void set_has_msg_template_id();
  inline void clear_has_msg_template_id();
  inline void set_has_msg_content();
  inline void clear_has_msg_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 from_id_;
  ::std::string* from_name_;
  ::google::protobuf::uint32 from_lv_;
  ::google::protobuf::uint32 from_sex_;
  ::google::protobuf::uint32 from_grade_;
  ::google::protobuf::int32 from_border_;
  ::google::protobuf::uint64 add_time_;
  ::google::protobuf::uint32 event_type_;
  ::google::protobuf::uint32 is_read_;
  ::std::string* msg_content_;
  ::google::protobuf::uint32 msg_template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static db_event_msg_info* default_instance_;
};
// -------------------------------------------------------------------

class share_officer_upgrade : public ::google::protobuf::Message {
 public:
  share_officer_upgrade();
  virtual ~share_officer_upgrade();

  share_officer_upgrade(const share_officer_upgrade& from);

  inline share_officer_upgrade& operator=(const share_officer_upgrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const share_officer_upgrade& default_instance();

  void Swap(share_officer_upgrade* other);

  // implements Message ----------------------------------------------

  share_officer_upgrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const share_officer_upgrade& from);
  void MergeFrom(const share_officer_upgrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 share_id = 1;
  inline bool has_share_id() const;
  inline void clear_share_id();
  static const int kShareIdFieldNumber = 1;
  inline ::google::protobuf::uint64 share_id() const;
  inline void set_share_id(::google::protobuf::uint64 value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 lv = 5;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 5;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional uint32 grade = 6;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 6;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional uint32 world_channel_id = 7;
  inline bool has_world_channel_id() const;
  inline void clear_world_channel_id();
  static const int kWorldChannelIdFieldNumber = 7;
  inline ::google::protobuf::uint32 world_channel_id() const;
  inline void set_world_channel_id(::google::protobuf::uint32 value);

  // optional string head = 8;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 8;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  inline void set_allocated_head(::std::string* head);

  // @@protoc_insertion_point(class_scope:SProtoSpace.share_officer_upgrade)
 private:
  inline void set_has_share_id();
  inline void clear_has_share_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_world_channel_id();
  inline void clear_has_world_channel_id();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 share_id_;
  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::uint32 world_channel_id_;
  ::std::string* head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static share_officer_upgrade* default_instance_;
};
// -------------------------------------------------------------------

class first_award_unit : public ::google::protobuf::Message {
 public:
  first_award_unit();
  virtual ~first_award_unit();

  first_award_unit(const first_award_unit& from);

  inline first_award_unit& operator=(const first_award_unit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const first_award_unit& default_instance();

  void Swap(first_award_unit* other);

  // implements Message ----------------------------------------------

  first_award_unit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const first_award_unit& from);
  void MergeFrom(const first_award_unit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 grade = 1;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 1;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // optional bool award = 2;
  inline bool has_award() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 2;
  inline bool award() const;
  inline void set_award(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.first_award_unit)
 private:
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_award();
  inline void clear_has_award();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 grade_;
  bool award_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static first_award_unit* default_instance_;
};
// -------------------------------------------------------------------

class flower_info : public ::google::protobuf::Message {
 public:
  flower_info();
  virtual ~flower_info();

  flower_info(const flower_info& from);

  inline flower_info& operator=(const flower_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const flower_info& default_instance();

  void Swap(flower_info* other);

  // implements Message ----------------------------------------------

  flower_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const flower_info& from);
  void MergeFrom(const flower_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional int32 count_num = 3;
  inline bool has_count_num() const;
  inline void clear_count_num();
  static const int kCountNumFieldNumber = 3;
  inline ::google::protobuf::int32 count_num() const;
  inline void set_count_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.flower_info)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_count_num();
  inline void clear_has_count_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::int32 count_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static flower_info* default_instance_;
};
// -------------------------------------------------------------------

class flower_send_info : public ::google::protobuf::Message {
 public:
  flower_send_info();
  virtual ~flower_send_info();

  flower_send_info(const flower_send_info& from);

  inline flower_send_info& operator=(const flower_send_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const flower_send_info& default_instance();

  void Swap(flower_send_info* other);

  // implements Message ----------------------------------------------

  flower_send_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const flower_send_info& from);
  void MergeFrom(const flower_send_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 to_role_id = 1;
  inline bool has_to_role_id() const;
  inline void clear_to_role_id();
  static const int kToRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 to_role_id() const;
  inline void set_to_role_id(::google::protobuf::uint64 value);

  // optional string to_role_name = 2;
  inline bool has_to_role_name() const;
  inline void clear_to_role_name();
  static const int kToRoleNameFieldNumber = 2;
  inline const ::std::string& to_role_name() const;
  inline void set_to_role_name(const ::std::string& value);
  inline void set_to_role_name(const char* value);
  inline void set_to_role_name(const char* value, size_t size);
  inline ::std::string* mutable_to_role_name();
  inline ::std::string* release_to_role_name();
  inline void set_allocated_to_role_name(::std::string* to_role_name);

  // optional int32 send_flower_template_id = 3;
  inline bool has_send_flower_template_id() const;
  inline void clear_send_flower_template_id();
  static const int kSendFlowerTemplateIdFieldNumber = 3;
  inline ::google::protobuf::int32 send_flower_template_id() const;
  inline void set_send_flower_template_id(::google::protobuf::int32 value);

  // optional int32 send_flower_num = 4;
  inline bool has_send_flower_num() const;
  inline void clear_send_flower_num();
  static const int kSendFlowerNumFieldNumber = 4;
  inline ::google::protobuf::int32 send_flower_num() const;
  inline void set_send_flower_num(::google::protobuf::int32 value);

  // optional int32 default_remark_index = 5;
  inline bool has_default_remark_index() const;
  inline void clear_default_remark_index();
  static const int kDefaultRemarkIndexFieldNumber = 5;
  inline ::google::protobuf::int32 default_remark_index() const;
  inline void set_default_remark_index(::google::protobuf::int32 value);

  // optional string custom_remark = 6;
  inline bool has_custom_remark() const;
  inline void clear_custom_remark();
  static const int kCustomRemarkFieldNumber = 6;
  inline const ::std::string& custom_remark() const;
  inline void set_custom_remark(const ::std::string& value);
  inline void set_custom_remark(const char* value);
  inline void set_custom_remark(const char* value, size_t size);
  inline ::std::string* mutable_custom_remark();
  inline ::std::string* release_custom_remark();
  inline void set_allocated_custom_remark(::std::string* custom_remark);

  // @@protoc_insertion_point(class_scope:SProtoSpace.flower_send_info)
 private:
  inline void set_has_to_role_id();
  inline void clear_has_to_role_id();
  inline void set_has_to_role_name();
  inline void clear_has_to_role_name();
  inline void set_has_send_flower_template_id();
  inline void clear_has_send_flower_template_id();
  inline void set_has_send_flower_num();
  inline void clear_has_send_flower_num();
  inline void set_has_default_remark_index();
  inline void clear_has_default_remark_index();
  inline void set_has_custom_remark();
  inline void clear_has_custom_remark();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 to_role_id_;
  ::std::string* to_role_name_;
  ::google::protobuf::int32 send_flower_template_id_;
  ::google::protobuf::int32 send_flower_num_;
  ::std::string* custom_remark_;
  ::google::protobuf::int32 default_remark_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static flower_send_info* default_instance_;
};
// -------------------------------------------------------------------

class offical_battle_report_unit : public ::google::protobuf::Message {
 public:
  offical_battle_report_unit();
  virtual ~offical_battle_report_unit();

  offical_battle_report_unit(const offical_battle_report_unit& from);

  inline offical_battle_report_unit& operator=(const offical_battle_report_unit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_battle_report_unit& default_instance();

  void Swap(offical_battle_report_unit* other);

  // implements Message ----------------------------------------------

  offical_battle_report_unit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offical_battle_report_unit& from);
  void MergeFrom(const offical_battle_report_unit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 my_role_id = 1;
  inline bool has_my_role_id() const;
  inline void clear_my_role_id();
  static const int kMyRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 my_role_id() const;
  inline void set_my_role_id(::google::protobuf::uint64 value);

  // optional string my_role_name = 2;
  inline bool has_my_role_name() const;
  inline void clear_my_role_name();
  static const int kMyRoleNameFieldNumber = 2;
  inline const ::std::string& my_role_name() const;
  inline void set_my_role_name(const ::std::string& value);
  inline void set_my_role_name(const char* value);
  inline void set_my_role_name(const char* value, size_t size);
  inline ::std::string* mutable_my_role_name();
  inline ::std::string* release_my_role_name();
  inline void set_allocated_my_role_name(::std::string* my_role_name);

  // optional int32 my_role_sex = 3;
  inline bool has_my_role_sex() const;
  inline void clear_my_role_sex();
  static const int kMyRoleSexFieldNumber = 3;
  inline ::google::protobuf::int32 my_role_sex() const;
  inline void set_my_role_sex(::google::protobuf::int32 value);

  // optional int32 my_role_lv = 4;
  inline bool has_my_role_lv() const;
  inline void clear_my_role_lv();
  static const int kMyRoleLvFieldNumber = 4;
  inline ::google::protobuf::int32 my_role_lv() const;
  inline void set_my_role_lv(::google::protobuf::int32 value);

  // optional int32 my_old_ranking_id = 5;
  inline bool has_my_old_ranking_id() const;
  inline void clear_my_old_ranking_id();
  static const int kMyOldRankingIdFieldNumber = 5;
  inline ::google::protobuf::int32 my_old_ranking_id() const;
  inline void set_my_old_ranking_id(::google::protobuf::int32 value);

  // optional int32 my_new_ranking_id = 6;
  inline bool has_my_new_ranking_id() const;
  inline void clear_my_new_ranking_id();
  static const int kMyNewRankingIdFieldNumber = 6;
  inline ::google::protobuf::int32 my_new_ranking_id() const;
  inline void set_my_new_ranking_id(::google::protobuf::int32 value);

  // optional uint64 attacker_id = 7;
  inline bool has_attacker_id() const;
  inline void clear_attacker_id();
  static const int kAttackerIdFieldNumber = 7;
  inline ::google::protobuf::uint64 attacker_id() const;
  inline void set_attacker_id(::google::protobuf::uint64 value);

  // optional string attacker_name = 8;
  inline bool has_attacker_name() const;
  inline void clear_attacker_name();
  static const int kAttackerNameFieldNumber = 8;
  inline const ::std::string& attacker_name() const;
  inline void set_attacker_name(const ::std::string& value);
  inline void set_attacker_name(const char* value);
  inline void set_attacker_name(const char* value, size_t size);
  inline ::std::string* mutable_attacker_name();
  inline ::std::string* release_attacker_name();
  inline void set_allocated_attacker_name(::std::string* attacker_name);

  // optional int32 attacker_sex = 9;
  inline bool has_attacker_sex() const;
  inline void clear_attacker_sex();
  static const int kAttackerSexFieldNumber = 9;
  inline ::google::protobuf::int32 attacker_sex() const;
  inline void set_attacker_sex(::google::protobuf::int32 value);

  // optional int32 attacker_lv = 10;
  inline bool has_attacker_lv() const;
  inline void clear_attacker_lv();
  static const int kAttackerLvFieldNumber = 10;
  inline ::google::protobuf::int32 attacker_lv() const;
  inline void set_attacker_lv(::google::protobuf::int32 value);

  // optional int32 attacker_old_ranking_id = 12;
  inline bool has_attacker_old_ranking_id() const;
  inline void clear_attacker_old_ranking_id();
  static const int kAttackerOldRankingIdFieldNumber = 12;
  inline ::google::protobuf::int32 attacker_old_ranking_id() const;
  inline void set_attacker_old_ranking_id(::google::protobuf::int32 value);

  // optional int32 attacker_new_ranking_id = 13;
  inline bool has_attacker_new_ranking_id() const;
  inline void clear_attacker_new_ranking_id();
  static const int kAttackerNewRankingIdFieldNumber = 13;
  inline ::google::protobuf::int32 attacker_new_ranking_id() const;
  inline void set_attacker_new_ranking_id(::google::protobuf::int32 value);

  // optional bool win = 14;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 14;
  inline bool win() const;
  inline void set_win(bool value);

  // optional int32 battle_time = 15;
  inline bool has_battle_time() const;
  inline void clear_battle_time();
  static const int kBattleTimeFieldNumber = 15;
  inline ::google::protobuf::int32 battle_time() const;
  inline void set_battle_time(::google::protobuf::int32 value);

  // optional uint64 battle_id = 16;
  inline bool has_battle_id() const;
  inline void clear_battle_id();
  static const int kBattleIdFieldNumber = 16;
  inline ::google::protobuf::uint64 battle_id() const;
  inline void set_battle_id(::google::protobuf::uint64 value);

  // optional int32 grade = 17;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 17;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // repeated .SProtoSpace.hero_base_info heros = 18;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 18;
  inline const ::SProtoSpace::hero_base_info& heros(int index) const;
  inline ::SProtoSpace::hero_base_info* mutable_heros(int index);
  inline ::SProtoSpace::hero_base_info* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info >*
      mutable_heros();

  // @@protoc_insertion_point(class_scope:SProtoSpace.offical_battle_report_unit)
 private:
  inline void set_has_my_role_id();
  inline void clear_has_my_role_id();
  inline void set_has_my_role_name();
  inline void clear_has_my_role_name();
  inline void set_has_my_role_sex();
  inline void clear_has_my_role_sex();
  inline void set_has_my_role_lv();
  inline void clear_has_my_role_lv();
  inline void set_has_my_old_ranking_id();
  inline void clear_has_my_old_ranking_id();
  inline void set_has_my_new_ranking_id();
  inline void clear_has_my_new_ranking_id();
  inline void set_has_attacker_id();
  inline void clear_has_attacker_id();
  inline void set_has_attacker_name();
  inline void clear_has_attacker_name();
  inline void set_has_attacker_sex();
  inline void clear_has_attacker_sex();
  inline void set_has_attacker_lv();
  inline void clear_has_attacker_lv();
  inline void set_has_attacker_old_ranking_id();
  inline void clear_has_attacker_old_ranking_id();
  inline void set_has_attacker_new_ranking_id();
  inline void clear_has_attacker_new_ranking_id();
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_battle_time();
  inline void clear_has_battle_time();
  inline void set_has_battle_id();
  inline void clear_has_battle_id();
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 my_role_id_;
  ::std::string* my_role_name_;
  ::google::protobuf::int32 my_role_sex_;
  ::google::protobuf::int32 my_role_lv_;
  ::google::protobuf::int32 my_old_ranking_id_;
  ::google::protobuf::int32 my_new_ranking_id_;
  ::google::protobuf::uint64 attacker_id_;
  ::std::string* attacker_name_;
  ::google::protobuf::int32 attacker_sex_;
  ::google::protobuf::int32 attacker_lv_;
  ::google::protobuf::int32 attacker_old_ranking_id_;
  ::google::protobuf::int32 attacker_new_ranking_id_;
  bool win_;
  ::google::protobuf::int32 battle_time_;
  ::google::protobuf::uint64 battle_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info > heros_;
  ::google::protobuf::int32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static offical_battle_report_unit* default_instance_;
};
// -------------------------------------------------------------------

class talent_data : public ::google::protobuf::Message {
 public:
  talent_data();
  virtual ~talent_data();

  talent_data(const talent_data& from);

  inline talent_data& operator=(const talent_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talent_data& default_instance();

  void Swap(talent_data* other);

  // implements Message ----------------------------------------------

  talent_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const talent_data& from);
  void MergeFrom(const talent_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.TALENT_STATUS status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::SProtoSpace::TALENT_STATUS status() const;
  inline void set_status(::SProtoSpace::TALENT_STATUS value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.talent_data)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static talent_data* default_instance_;
};
// -------------------------------------------------------------------

class talent_battlt_data : public ::google::protobuf::Message {
 public:
  talent_battlt_data();
  virtual ~talent_battlt_data();

  talent_battlt_data(const talent_battlt_data& from);

  inline talent_battlt_data& operator=(const talent_battlt_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talent_battlt_data& default_instance();

  void Swap(talent_battlt_data* other);

  // implements Message ----------------------------------------------

  talent_battlt_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const talent_battlt_data& from);
  void MergeFrom(const talent_battlt_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.EAttribute type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::SProtoSpace::EAttribute type() const;
  inline void set_type(::SProtoSpace::EAttribute value);

  // optional float values = 2;
  inline bool has_values() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline float values() const;
  inline void set_values(float value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.talent_battlt_data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_values();
  inline void clear_has_values();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  float values_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static talent_battlt_data* default_instance_;
};
// -------------------------------------------------------------------

class cli_unit_role_fashion : public ::google::protobuf::Message {
 public:
  cli_unit_role_fashion();
  virtual ~cli_unit_role_fashion();

  cli_unit_role_fashion(const cli_unit_role_fashion& from);

  inline cli_unit_role_fashion& operator=(const cli_unit_role_fashion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cli_unit_role_fashion& default_instance();

  void Swap(cli_unit_role_fashion* other);

  // implements Message ----------------------------------------------

  cli_unit_role_fashion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cli_unit_role_fashion& from);
  void MergeFrom(const cli_unit_role_fashion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 config_id = 1;
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 1;
  inline ::google::protobuf::int32 config_id() const;
  inline void set_config_id(::google::protobuf::int32 value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 time_invalid = 3;
  inline bool has_time_invalid() const;
  inline void clear_time_invalid();
  static const int kTimeInvalidFieldNumber = 3;
  inline ::google::protobuf::uint32 time_invalid() const;
  inline void set_time_invalid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.cli_unit_role_fashion)
 private:
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_time_invalid();
  inline void clear_has_time_invalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::int32 config_id_;
  ::google::protobuf::uint32 time_invalid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static cli_unit_role_fashion* default_instance_;
};
// -------------------------------------------------------------------

class fashions_pack : public ::google::protobuf::Message {
 public:
  fashions_pack();
  virtual ~fashions_pack();

  fashions_pack(const fashions_pack& from);

  inline fashions_pack& operator=(const fashions_pack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fashions_pack& default_instance();

  void Swap(fashions_pack* other);

  // implements Message ----------------------------------------------

  fashions_pack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fashions_pack& from);
  void MergeFrom(const fashions_pack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.cli_unit_role_fashion fashions = 1;
  inline int fashions_size() const;
  inline void clear_fashions();
  static const int kFashionsFieldNumber = 1;
  inline const ::SProtoSpace::cli_unit_role_fashion& fashions(int index) const;
  inline ::SProtoSpace::cli_unit_role_fashion* mutable_fashions(int index);
  inline ::SProtoSpace::cli_unit_role_fashion* add_fashions();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::cli_unit_role_fashion >&
      fashions() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::cli_unit_role_fashion >*
      mutable_fashions();

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // @@protoc_insertion_point(class_scope:SProtoSpace.fashions_pack)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::cli_unit_role_fashion > fashions_;
  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static fashions_pack* default_instance_;
};
// -------------------------------------------------------------------

class red_pt_info : public ::google::protobuf::Message {
 public:
  red_pt_info();
  virtual ~red_pt_info();

  red_pt_info(const red_pt_info& from);

  inline red_pt_info& operator=(const red_pt_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const red_pt_info& default_instance();

  void Swap(red_pt_info* other);

  // implements Message ----------------------------------------------

  red_pt_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const red_pt_info& from);
  void MergeFrom(const red_pt_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.eRedPtType type_id = 1;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 1;
  inline ::SProtoSpace::eRedPtType type_id() const;
  inline void set_type_id(::SProtoSpace::eRedPtType value);

  // optional bool is_show = 2;
  inline bool has_is_show() const;
  inline void clear_is_show();
  static const int kIsShowFieldNumber = 2;
  inline bool is_show() const;
  inline void set_is_show(bool value);

  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 add_count = 4;
  inline bool has_add_count() const;
  inline void clear_add_count();
  static const int kAddCountFieldNumber = 4;
  inline ::google::protobuf::int32 add_count() const;
  inline void set_add_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.red_pt_info)
 private:
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_is_show();
  inline void clear_has_is_show();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_add_count();
  inline void clear_has_add_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_id_;
  bool is_show_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 add_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static red_pt_info* default_instance_;
};
// -------------------------------------------------------------------

class red_pt_infos : public ::google::protobuf::Message {
 public:
  red_pt_infos();
  virtual ~red_pt_infos();

  red_pt_infos(const red_pt_infos& from);

  inline red_pt_infos& operator=(const red_pt_infos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const red_pt_infos& default_instance();

  void Swap(red_pt_infos* other);

  // implements Message ----------------------------------------------

  red_pt_infos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const red_pt_infos& from);
  void MergeFrom(const red_pt_infos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.red_pt_info infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::SProtoSpace::red_pt_info& infos(int index) const;
  inline ::SProtoSpace::red_pt_info* mutable_infos(int index);
  inline ::SProtoSpace::red_pt_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::red_pt_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::red_pt_info >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:SProtoSpace.red_pt_infos)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::red_pt_info > infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static red_pt_infos* default_instance_;
};
// -------------------------------------------------------------------

class match_interval : public ::google::protobuf::Message {
 public:
  match_interval();
  virtual ~match_interval();

  match_interval(const match_interval& from);

  inline match_interval& operator=(const match_interval& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const match_interval& default_instance();

  void Swap(match_interval* other);

  // implements Message ----------------------------------------------

  match_interval* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const match_interval& from);
  void MergeFrom(const match_interval& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 week_day = 1;
  inline bool has_week_day() const;
  inline void clear_week_day();
  static const int kWeekDayFieldNumber = 1;
  inline ::google::protobuf::int32 week_day() const;
  inline void set_week_day(::google::protobuf::int32 value);

  // optional int32 start_time = 2;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  inline ::google::protobuf::int32 start_time() const;
  inline void set_start_time(::google::protobuf::int32 value);

  // optional int32 end_time = 3;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 3;
  inline ::google::protobuf::int32 end_time() const;
  inline void set_end_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.match_interval)
 private:
  inline void set_has_week_day();
  inline void clear_has_week_day();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 week_day_;
  ::google::protobuf::int32 start_time_;
  ::google::protobuf::int32 end_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static match_interval* default_instance_;
};
// -------------------------------------------------------------------

class grade_match_conf : public ::google::protobuf::Message {
 public:
  grade_match_conf();
  virtual ~grade_match_conf();

  grade_match_conf(const grade_match_conf& from);

  inline grade_match_conf& operator=(const grade_match_conf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const grade_match_conf& default_instance();

  void Swap(grade_match_conf* other);

  // implements Message ----------------------------------------------

  grade_match_conf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const grade_match_conf& from);
  void MergeFrom(const grade_match_conf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 grade = 1;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 1;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // repeated .SProtoSpace.match_interval apply = 2;
  inline int apply_size() const;
  inline void clear_apply();
  static const int kApplyFieldNumber = 2;
  inline const ::SProtoSpace::match_interval& apply(int index) const;
  inline ::SProtoSpace::match_interval* mutable_apply(int index);
  inline ::SProtoSpace::match_interval* add_apply();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::match_interval >&
      apply() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::match_interval >*
      mutable_apply();

  // repeated .SProtoSpace.match_interval settle = 3;
  inline int settle_size() const;
  inline void clear_settle();
  static const int kSettleFieldNumber = 3;
  inline const ::SProtoSpace::match_interval& settle(int index) const;
  inline ::SProtoSpace::match_interval* mutable_settle(int index);
  inline ::SProtoSpace::match_interval* add_settle();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::match_interval >&
      settle() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::match_interval >*
      mutable_settle();

  // @@protoc_insertion_point(class_scope:SProtoSpace.grade_match_conf)
 private:
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::match_interval > apply_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::match_interval > settle_;
  ::google::protobuf::int32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static grade_match_conf* default_instance_;
};
// -------------------------------------------------------------------

class single_plot_little_game : public ::google::protobuf::Message {
 public:
  single_plot_little_game();
  virtual ~single_plot_little_game();

  single_plot_little_game(const single_plot_little_game& from);

  inline single_plot_little_game& operator=(const single_plot_little_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const single_plot_little_game& default_instance();

  void Swap(single_plot_little_game* other);

  // implements Message ----------------------------------------------

  single_plot_little_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const single_plot_little_game& from);
  void MergeFrom(const single_plot_little_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cfg_id = 1;
  inline bool has_cfg_id() const;
  inline void clear_cfg_id();
  static const int kCfgIdFieldNumber = 1;
  inline ::google::protobuf::int32 cfg_id() const;
  inline void set_cfg_id(::google::protobuf::int32 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.single_plot_little_game)
 private:
  inline void set_has_cfg_id();
  inline void clear_has_cfg_id();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cfg_id_;
  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static single_plot_little_game* default_instance_;
};
// -------------------------------------------------------------------

class pack_plot_little_game : public ::google::protobuf::Message {
 public:
  pack_plot_little_game();
  virtual ~pack_plot_little_game();

  pack_plot_little_game(const pack_plot_little_game& from);

  inline pack_plot_little_game& operator=(const pack_plot_little_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pack_plot_little_game& default_instance();

  void Swap(pack_plot_little_game* other);

  // implements Message ----------------------------------------------

  pack_plot_little_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pack_plot_little_game& from);
  void MergeFrom(const pack_plot_little_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.single_plot_little_game plot_little_game_s = 1;
  inline int plot_little_game_s_size() const;
  inline void clear_plot_little_game_s();
  static const int kPlotLittleGameSFieldNumber = 1;
  inline const ::SProtoSpace::single_plot_little_game& plot_little_game_s(int index) const;
  inline ::SProtoSpace::single_plot_little_game* mutable_plot_little_game_s(int index);
  inline ::SProtoSpace::single_plot_little_game* add_plot_little_game_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::single_plot_little_game >&
      plot_little_game_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::single_plot_little_game >*
      mutable_plot_little_game_s();

  // @@protoc_insertion_point(class_scope:SProtoSpace.pack_plot_little_game)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::single_plot_little_game > plot_little_game_s_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static pack_plot_little_game* default_instance_;
};
// -------------------------------------------------------------------

class pet_attr_state : public ::google::protobuf::Message {
 public:
  pet_attr_state();
  virtual ~pet_attr_state();

  pet_attr_state(const pet_attr_state& from);

  inline pet_attr_state& operator=(const pet_attr_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_attr_state& default_instance();

  void Swap(pet_attr_state* other);

  // implements Message ----------------------------------------------

  pet_attr_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_attr_state& from);
  void MergeFrom(const pet_attr_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_attr_state)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static pet_attr_state* default_instance_;
};
// -------------------------------------------------------------------

class pet_out_event_item : public ::google::protobuf::Message {
 public:
  pet_out_event_item();
  virtual ~pet_out_event_item();

  pet_out_event_item(const pet_out_event_item& from);

  inline pet_out_event_item& operator=(const pet_out_event_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_out_event_item& default_instance();

  void Swap(pet_out_event_item* other);

  // implements Message ----------------------------------------------

  pet_out_event_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_out_event_item& from);
  void MergeFrom(const pet_out_event_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // optional int32 item_count = 2;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 2;
  inline ::google::protobuf::int32 item_count() const;
  inline void set_item_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_out_event_item)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_count();
  inline void clear_has_item_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static pet_out_event_item* default_instance_;
};
// -------------------------------------------------------------------

class pet_out_event_data : public ::google::protobuf::Message {
 public:
  pet_out_event_data();
  virtual ~pet_out_event_data();

  pet_out_event_data(const pet_out_event_data& from);

  inline pet_out_event_data& operator=(const pet_out_event_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_out_event_data& default_instance();

  void Swap(pet_out_event_data* other);

  // implements Message ----------------------------------------------

  pet_out_event_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_out_event_data& from);
  void MergeFrom(const pet_out_event_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cfg_id = 1;
  inline bool has_cfg_id() const;
  inline void clear_cfg_id();
  static const int kCfgIdFieldNumber = 1;
  inline ::google::protobuf::int32 cfg_id() const;
  inline void set_cfg_id(::google::protobuf::int32 value);

  // optional int32 done_time = 2;
  inline bool has_done_time() const;
  inline void clear_done_time();
  static const int kDoneTimeFieldNumber = 2;
  inline ::google::protobuf::int32 done_time() const;
  inline void set_done_time(::google::protobuf::int32 value);

  // repeated .SProtoSpace.pet_out_event_item item_s = 3;
  inline int item_s_size() const;
  inline void clear_item_s();
  static const int kItemSFieldNumber = 3;
  inline const ::SProtoSpace::pet_out_event_item& item_s(int index) const;
  inline ::SProtoSpace::pet_out_event_item* mutable_item_s(int index);
  inline ::SProtoSpace::pet_out_event_item* add_item_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_out_event_item >&
      item_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_out_event_item >*
      mutable_item_s();

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_out_event_data)
 private:
  inline void set_has_cfg_id();
  inline void clear_has_cfg_id();
  inline void set_has_done_time();
  inline void clear_has_done_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cfg_id_;
  ::google::protobuf::int32 done_time_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_out_event_item > item_s_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static pet_out_event_data* default_instance_;
};
// -------------------------------------------------------------------

class pet_single_data : public ::google::protobuf::Message {
 public:
  pet_single_data();
  virtual ~pet_single_data();

  pet_single_data(const pet_single_data& from);

  inline pet_single_data& operator=(const pet_single_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_single_data& default_instance();

  void Swap(pet_single_data* other);

  // implements Message ----------------------------------------------

  pet_single_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_single_data& from);
  void MergeFrom(const pet_single_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cfg_id = 1;
  inline bool has_cfg_id() const;
  inline void clear_cfg_id();
  static const int kCfgIdFieldNumber = 1;
  inline ::google::protobuf::int32 cfg_id() const;
  inline void set_cfg_id(::google::protobuf::int32 value);

  // repeated .SProtoSpace.pet_attr_state state_s = 2;
  inline int state_s_size() const;
  inline void clear_state_s();
  static const int kStateSFieldNumber = 2;
  inline const ::SProtoSpace::pet_attr_state& state_s(int index) const;
  inline ::SProtoSpace::pet_attr_state* mutable_state_s(int index);
  inline ::SProtoSpace::pet_attr_state* add_state_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_attr_state >&
      state_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_attr_state >*
      mutable_state_s();

  // optional int32 lv = 3;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 cur_lv_exp = 4;
  inline bool has_cur_lv_exp() const;
  inline void clear_cur_lv_exp();
  static const int kCurLvExpFieldNumber = 4;
  inline ::google::protobuf::int32 cur_lv_exp() const;
  inline void set_cur_lv_exp(::google::protobuf::int32 value);

  // optional uint32 out_time = 5;
  inline bool has_out_time() const;
  inline void clear_out_time();
  static const int kOutTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 out_time() const;
  inline void set_out_time(::google::protobuf::uint32 value);

  // optional uint32 back_time = 6;
  inline bool has_back_time() const;
  inline void clear_back_time();
  static const int kBackTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 back_time() const;
  inline void set_back_time(::google::protobuf::uint32 value);

  // optional int32 out_story_id = 7;
  inline bool has_out_story_id() const;
  inline void clear_out_story_id();
  static const int kOutStoryIdFieldNumber = 7;
  inline ::google::protobuf::int32 out_story_id() const;
  inline void set_out_story_id(::google::protobuf::int32 value);

  // repeated .SProtoSpace.pet_out_event_data out_event_s = 8;
  inline int out_event_s_size() const;
  inline void clear_out_event_s();
  static const int kOutEventSFieldNumber = 8;
  inline const ::SProtoSpace::pet_out_event_data& out_event_s(int index) const;
  inline ::SProtoSpace::pet_out_event_data* mutable_out_event_s(int index);
  inline ::SProtoSpace::pet_out_event_data* add_out_event_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_out_event_data >&
      out_event_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_out_event_data >*
      mutable_out_event_s();

  // optional string name = 9;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 9;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 last_update_time = 10;
  inline bool has_last_update_time() const;
  inline void clear_last_update_time();
  static const int kLastUpdateTimeFieldNumber = 10;
  inline ::google::protobuf::uint32 last_update_time() const;
  inline void set_last_update_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_single_data)
 private:
  inline void set_has_cfg_id();
  inline void clear_has_cfg_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_cur_lv_exp();
  inline void clear_has_cur_lv_exp();
  inline void set_has_out_time();
  inline void clear_has_out_time();
  inline void set_has_back_time();
  inline void clear_has_back_time();
  inline void set_has_out_story_id();
  inline void clear_has_out_story_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_last_update_time();
  inline void clear_has_last_update_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_attr_state > state_s_;
  ::google::protobuf::int32 cfg_id_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 cur_lv_exp_;
  ::google::protobuf::uint32 out_time_;
  ::google::protobuf::uint32 back_time_;
  ::google::protobuf::int32 out_story_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_out_event_data > out_event_s_;
  ::std::string* name_;
  ::google::protobuf::uint32 last_update_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static pet_single_data* default_instance_;
};
// -------------------------------------------------------------------

class pet_pack_data : public ::google::protobuf::Message {
 public:
  pet_pack_data();
  virtual ~pet_pack_data();

  pet_pack_data(const pet_pack_data& from);

  inline pet_pack_data& operator=(const pet_pack_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_pack_data& default_instance();

  void Swap(pet_pack_data* other);

  // implements Message ----------------------------------------------

  pet_pack_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_pack_data& from);
  void MergeFrom(const pet_pack_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.pet_single_data pet_s = 1;
  inline int pet_s_size() const;
  inline void clear_pet_s();
  static const int kPetSFieldNumber = 1;
  inline const ::SProtoSpace::pet_single_data& pet_s(int index) const;
  inline ::SProtoSpace::pet_single_data* mutable_pet_s(int index);
  inline ::SProtoSpace::pet_single_data* add_pet_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_single_data >&
      pet_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_single_data >*
      mutable_pet_s();

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_pack_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_single_data > pet_s_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5froletype_2eproto();
  friend void protobuf_AssignDesc_cm_5froletype_2eproto();
  friend void protobuf_ShutdownFile_cm_5froletype_2eproto();

  void InitAsDefaultInstance();
  static pet_pack_data* default_instance_;
};
// ===================================================================


// ===================================================================

// account_role_data

// optional uint64 role_id = 1;
inline bool account_role_data::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void account_role_data::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void account_role_data::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void account_role_data::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 account_role_data::role_id() const {
  return role_id_;
}
inline void account_role_data::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 2;
inline bool account_role_data::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void account_role_data::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void account_role_data::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void account_role_data::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& account_role_data::role_name() const {
  return *role_name_;
}
inline void account_role_data::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void account_role_data::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void account_role_data::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* account_role_data::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* account_role_data::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void account_role_data::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 db_svr_id = 3;
inline bool account_role_data::has_db_svr_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void account_role_data::set_has_db_svr_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void account_role_data::clear_has_db_svr_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void account_role_data::clear_db_svr_id() {
  db_svr_id_ = GOOGLE_ULONGLONG(0);
  clear_has_db_svr_id();
}
inline ::google::protobuf::uint64 account_role_data::db_svr_id() const {
  return db_svr_id_;
}
inline void account_role_data::set_db_svr_id(::google::protobuf::uint64 value) {
  set_has_db_svr_id();
  db_svr_id_ = value;
}

// optional uint32 sex = 4;
inline bool account_role_data::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void account_role_data::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void account_role_data::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void account_role_data::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 account_role_data::sex() const {
  return sex_;
}
inline void account_role_data::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 lv = 5;
inline bool account_role_data::has_lv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void account_role_data::set_has_lv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void account_role_data::clear_has_lv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void account_role_data::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 account_role_data::lv() const {
  return lv_;
}
inline void account_role_data::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// -------------------------------------------------------------------

// unit_attr_data

// optional uint32 key = 1;
inline bool unit_attr_data::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_attr_data::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_attr_data::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_attr_data::clear_key() {
  key_ = 0u;
  clear_has_key();
}
inline ::google::protobuf::uint32 unit_attr_data::key() const {
  return key_;
}
inline void unit_attr_data::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
}

// optional uint32 value = 2;
inline bool unit_attr_data::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_attr_data::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_attr_data::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_attr_data::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 unit_attr_data::value() const {
  return value_;
}
inline void unit_attr_data::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// unit_item_data

// optional uint32 db_mode = 1;
inline bool unit_item_data::has_db_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void unit_item_data::set_has_db_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void unit_item_data::clear_has_db_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void unit_item_data::clear_db_mode() {
  db_mode_ = 0u;
  clear_has_db_mode();
}
inline ::google::protobuf::uint32 unit_item_data::db_mode() const {
  return db_mode_;
}
inline void unit_item_data::set_db_mode(::google::protobuf::uint32 value) {
  set_has_db_mode();
  db_mode_ = value;
}

// optional uint64 uuid = 2;
inline bool unit_item_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void unit_item_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void unit_item_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void unit_item_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 unit_item_data::uuid() const {
  return uuid_;
}
inline void unit_item_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 tid = 3;
inline bool unit_item_data::has_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void unit_item_data::set_has_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void unit_item_data::clear_has_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void unit_item_data::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 unit_item_data::tid() const {
  return tid_;
}
inline void unit_item_data::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
}

// optional bool can_mail = 4;
inline bool unit_item_data::has_can_mail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void unit_item_data::set_has_can_mail() {
  _has_bits_[0] |= 0x00000008u;
}
inline void unit_item_data::clear_has_can_mail() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void unit_item_data::clear_can_mail() {
  can_mail_ = false;
  clear_has_can_mail();
}
inline bool unit_item_data::can_mail() const {
  return can_mail_;
}
inline void unit_item_data::set_can_mail(bool value) {
  set_has_can_mail();
  can_mail_ = value;
}

// optional bool bind = 5;
inline bool unit_item_data::has_bind() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void unit_item_data::set_has_bind() {
  _has_bits_[0] |= 0x00000010u;
}
inline void unit_item_data::clear_has_bind() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void unit_item_data::clear_bind() {
  bind_ = false;
  clear_has_bind();
}
inline bool unit_item_data::bind() const {
  return bind_;
}
inline void unit_item_data::set_bind(bool value) {
  set_has_bind();
  bind_ = value;
}

// optional bool lock = 6;
inline bool unit_item_data::has_lock() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void unit_item_data::set_has_lock() {
  _has_bits_[0] |= 0x00000020u;
}
inline void unit_item_data::clear_has_lock() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void unit_item_data::clear_lock() {
  lock_ = false;
  clear_has_lock();
}
inline bool unit_item_data::lock() const {
  return lock_;
}
inline void unit_item_data::set_lock(bool value) {
  set_has_lock();
  lock_ = value;
}

// optional bool dirty = 7;
inline bool unit_item_data::has_dirty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void unit_item_data::set_has_dirty() {
  _has_bits_[0] |= 0x00000040u;
}
inline void unit_item_data::clear_has_dirty() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void unit_item_data::clear_dirty() {
  dirty_ = false;
  clear_has_dirty();
}
inline bool unit_item_data::dirty() const {
  return dirty_;
}
inline void unit_item_data::set_dirty(bool value) {
  set_has_dirty();
  dirty_ = value;
}

// optional uint32 spawn_time = 8;
inline bool unit_item_data::has_spawn_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void unit_item_data::set_has_spawn_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void unit_item_data::clear_has_spawn_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void unit_item_data::clear_spawn_time() {
  spawn_time_ = 0u;
  clear_has_spawn_time();
}
inline ::google::protobuf::uint32 unit_item_data::spawn_time() const {
  return spawn_time_;
}
inline void unit_item_data::set_spawn_time(::google::protobuf::uint32 value) {
  set_has_spawn_time();
  spawn_time_ = value;
}

// optional uint32 expire_time = 9;
inline bool unit_item_data::has_expire_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void unit_item_data::set_has_expire_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void unit_item_data::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void unit_item_data::clear_expire_time() {
  expire_time_ = 0u;
  clear_has_expire_time();
}
inline ::google::protobuf::uint32 unit_item_data::expire_time() const {
  return expire_time_;
}
inline void unit_item_data::set_expire_time(::google::protobuf::uint32 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// optional uint32 bag_type = 10;
inline bool unit_item_data::has_bag_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void unit_item_data::set_has_bag_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void unit_item_data::clear_has_bag_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void unit_item_data::clear_bag_type() {
  bag_type_ = 0u;
  clear_has_bag_type();
}
inline ::google::protobuf::uint32 unit_item_data::bag_type() const {
  return bag_type_;
}
inline void unit_item_data::set_bag_type(::google::protobuf::uint32 value) {
  set_has_bag_type();
  bag_type_ = value;
}

// optional uint32 cur_num = 11;
inline bool unit_item_data::has_cur_num() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void unit_item_data::set_has_cur_num() {
  _has_bits_[0] |= 0x00000400u;
}
inline void unit_item_data::clear_has_cur_num() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void unit_item_data::clear_cur_num() {
  cur_num_ = 0u;
  clear_has_cur_num();
}
inline ::google::protobuf::uint32 unit_item_data::cur_num() const {
  return cur_num_;
}
inline void unit_item_data::set_cur_num(::google::protobuf::uint32 value) {
  set_has_cur_num();
  cur_num_ = value;
}

// optional uint32 level = 12;
inline bool unit_item_data::has_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void unit_item_data::set_has_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void unit_item_data::clear_has_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void unit_item_data::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 unit_item_data::level() const {
  return level_;
}
inline void unit_item_data::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 quality = 13;
inline bool unit_item_data::has_quality() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void unit_item_data::set_has_quality() {
  _has_bits_[0] |= 0x00001000u;
}
inline void unit_item_data::clear_has_quality() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void unit_item_data::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 unit_item_data::quality() const {
  return quality_;
}
inline void unit_item_data::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// repeated .SProtoSpace.unit_attr_data attrs = 100;
inline int unit_item_data::attrs_size() const {
  return attrs_.size();
}
inline void unit_item_data::clear_attrs() {
  attrs_.Clear();
}
inline const ::SProtoSpace::unit_attr_data& unit_item_data::attrs(int index) const {
  return attrs_.Get(index);
}
inline ::SProtoSpace::unit_attr_data* unit_item_data::mutable_attrs(int index) {
  return attrs_.Mutable(index);
}
inline ::SProtoSpace::unit_attr_data* unit_item_data::add_attrs() {
  return attrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_attr_data >&
unit_item_data::attrs() const {
  return attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_attr_data >*
unit_item_data::mutable_attrs() {
  return &attrs_;
}

// -------------------------------------------------------------------

// client_skill_data

// optional uint32 id = 1;
inline bool client_skill_data::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void client_skill_data::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void client_skill_data::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void client_skill_data::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 client_skill_data::id() const {
  return id_;
}
inline void client_skill_data::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 lv = 2;
inline bool client_skill_data::has_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void client_skill_data::set_has_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void client_skill_data::clear_has_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void client_skill_data::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 client_skill_data::lv() const {
  return lv_;
}
inline void client_skill_data::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 unlock = 3;
inline bool client_skill_data::has_unlock() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void client_skill_data::set_has_unlock() {
  _has_bits_[0] |= 0x00000004u;
}
inline void client_skill_data::clear_has_unlock() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void client_skill_data::clear_unlock() {
  unlock_ = 0;
  clear_has_unlock();
}
inline ::google::protobuf::int32 client_skill_data::unlock() const {
  return unlock_;
}
inline void client_skill_data::set_unlock(::google::protobuf::int32 value) {
  set_has_unlock();
  unlock_ = value;
}

// optional int32 slot = 4;
inline bool client_skill_data::has_slot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void client_skill_data::set_has_slot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void client_skill_data::clear_has_slot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void client_skill_data::clear_slot() {
  slot_ = 0;
  clear_has_slot();
}
inline ::google::protobuf::int32 client_skill_data::slot() const {
  return slot_;
}
inline void client_skill_data::set_slot(::google::protobuf::int32 value) {
  set_has_slot();
  slot_ = value;
}

// -------------------------------------------------------------------

// skin_entry

// optional uint32 id = 1;
inline bool skin_entry::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void skin_entry::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void skin_entry::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void skin_entry::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 skin_entry::id() const {
  return id_;
}
inline void skin_entry::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional bool valid = 2;
inline bool skin_entry::has_valid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void skin_entry::set_has_valid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void skin_entry::clear_has_valid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void skin_entry::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
inline bool skin_entry::valid() const {
  return valid_;
}
inline void skin_entry::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
}

// optional uint64 end_time = 3;
inline bool skin_entry::has_end_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void skin_entry::set_has_end_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void skin_entry::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void skin_entry::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 skin_entry::end_time() const {
  return end_time_;
}
inline void skin_entry::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
}

// -------------------------------------------------------------------

// skin_data

// optional uint32 active_id = 1;
inline bool skin_data::has_active_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void skin_data::set_has_active_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void skin_data::clear_has_active_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void skin_data::clear_active_id() {
  active_id_ = 0u;
  clear_has_active_id();
}
inline ::google::protobuf::uint32 skin_data::active_id() const {
  return active_id_;
}
inline void skin_data::set_active_id(::google::protobuf::uint32 value) {
  set_has_active_id();
  active_id_ = value;
}

// repeated .SProtoSpace.skin_entry skins = 2;
inline int skin_data::skins_size() const {
  return skins_.size();
}
inline void skin_data::clear_skins() {
  skins_.Clear();
}
inline const ::SProtoSpace::skin_entry& skin_data::skins(int index) const {
  return skins_.Get(index);
}
inline ::SProtoSpace::skin_entry* skin_data::mutable_skins(int index) {
  return skins_.Mutable(index);
}
inline ::SProtoSpace::skin_entry* skin_data::add_skins() {
  return skins_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::skin_entry >&
skin_data::skins() const {
  return skins_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::skin_entry >*
skin_data::mutable_skins() {
  return &skins_;
}

// -------------------------------------------------------------------

// hero_base_info

// optional uint64 hero_id = 1;
inline bool hero_base_info::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_base_info::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_base_info::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_base_info::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_base_info::hero_id() const {
  return hero_id_;
}
inline void hero_base_info::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional uint32 template_id = 2;
inline bool hero_base_info::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_base_info::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_base_info::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_base_info::clear_template_id() {
  template_id_ = 0u;
  clear_has_template_id();
}
inline ::google::protobuf::uint32 hero_base_info::template_id() const {
  return template_id_;
}
inline void hero_base_info::set_template_id(::google::protobuf::uint32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 level = 3;
inline bool hero_base_info::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_base_info::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_base_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_base_info::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 hero_base_info::level() const {
  return level_;
}
inline void hero_base_info::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 star = 4;
inline bool hero_base_info::has_star() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hero_base_info::set_has_star() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hero_base_info::clear_has_star() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hero_base_info::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 hero_base_info::star() const {
  return star_;
}
inline void hero_base_info::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// optional int32 quality = 5;
inline bool hero_base_info::has_quality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void hero_base_info::set_has_quality() {
  _has_bits_[0] |= 0x00000010u;
}
inline void hero_base_info::clear_has_quality() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void hero_base_info::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 hero_base_info::quality() const {
  return quality_;
}
inline void hero_base_info::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional string name = 6;
inline bool hero_base_info::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void hero_base_info::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void hero_base_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void hero_base_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& hero_base_info::name() const {
  return *name_;
}
inline void hero_base_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void hero_base_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void hero_base_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* hero_base_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* hero_base_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void hero_base_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 skin_id = 7;
inline bool hero_base_info::has_skin_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void hero_base_info::set_has_skin_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void hero_base_info::clear_has_skin_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void hero_base_info::clear_skin_id() {
  skin_id_ = 0;
  clear_has_skin_id();
}
inline ::google::protobuf::int32 hero_base_info::skin_id() const {
  return skin_id_;
}
inline void hero_base_info::set_skin_id(::google::protobuf::int32 value) {
  set_has_skin_id();
  skin_id_ = value;
}

// optional int32 exp = 8;
inline bool hero_base_info::has_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void hero_base_info::set_has_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void hero_base_info::clear_has_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void hero_base_info::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 hero_base_info::exp() const {
  return exp_;
}
inline void hero_base_info::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// -------------------------------------------------------------------

// hero_attr_value

// required .SProtoSpace.EAttribute type = 1;
inline bool hero_attr_value::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_attr_value::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_attr_value::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_attr_value::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::SProtoSpace::EAttribute hero_attr_value::type() const {
  return static_cast< ::SProtoSpace::EAttribute >(type_);
}
inline void hero_attr_value::set_type(::SProtoSpace::EAttribute value) {
  assert(::SProtoSpace::EAttribute_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 val = 2 [default = 0];
inline bool hero_attr_value::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_attr_value::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_attr_value::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_attr_value::clear_val() {
  val_ = 0;
  clear_has_val();
}
inline ::google::protobuf::int32 hero_attr_value::val() const {
  return val_;
}
inline void hero_attr_value::set_val(::google::protobuf::int32 value) {
  set_has_val();
  val_ = value;
}

// optional int32 val_ratio = 3 [default = 0];
inline bool hero_attr_value::has_val_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_attr_value::set_has_val_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_attr_value::clear_has_val_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_attr_value::clear_val_ratio() {
  val_ratio_ = 0;
  clear_has_val_ratio();
}
inline ::google::protobuf::int32 hero_attr_value::val_ratio() const {
  return val_ratio_;
}
inline void hero_attr_value::set_val_ratio(::google::protobuf::int32 value) {
  set_has_val_ratio();
  val_ratio_ = value;
}

// -------------------------------------------------------------------

// client_soul_data

// optional uint64 id = 1;
inline bool client_soul_data::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void client_soul_data::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void client_soul_data::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void client_soul_data::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 client_soul_data::id() const {
  return id_;
}
inline void client_soul_data::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 slot = 2;
inline bool client_soul_data::has_slot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void client_soul_data::set_has_slot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void client_soul_data::clear_has_slot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void client_soul_data::clear_slot() {
  slot_ = 0;
  clear_has_slot();
}
inline ::google::protobuf::int32 client_soul_data::slot() const {
  return slot_;
}
inline void client_soul_data::set_slot(::google::protobuf::int32 value) {
  set_has_slot();
  slot_ = value;
}

// -------------------------------------------------------------------

// hero_equip_data

// optional uint32 itemTid = 1;
inline bool hero_equip_data::has_itemtid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_equip_data::set_has_itemtid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_equip_data::clear_has_itemtid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_equip_data::clear_itemtid() {
  itemtid_ = 0u;
  clear_has_itemtid();
}
inline ::google::protobuf::uint32 hero_equip_data::itemtid() const {
  return itemtid_;
}
inline void hero_equip_data::set_itemtid(::google::protobuf::uint32 value) {
  set_has_itemtid();
  itemtid_ = value;
}

// optional uint32 slot = 2;
inline bool hero_equip_data::has_slot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_equip_data::set_has_slot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_equip_data::clear_has_slot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_equip_data::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
inline ::google::protobuf::uint32 hero_equip_data::slot() const {
  return slot_;
}
inline void hero_equip_data::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
}

// -------------------------------------------------------------------

// talisman_data

// optional uint64 uuid = 1;
inline bool talisman_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void talisman_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void talisman_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void talisman_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 talisman_data::uuid() const {
  return uuid_;
}
inline void talisman_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 itemTid = 2;
inline bool talisman_data::has_itemtid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void talisman_data::set_has_itemtid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void talisman_data::clear_has_itemtid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void talisman_data::clear_itemtid() {
  itemtid_ = 0;
  clear_has_itemtid();
}
inline ::google::protobuf::int32 talisman_data::itemtid() const {
  return itemtid_;
}
inline void talisman_data::set_itemtid(::google::protobuf::int32 value) {
  set_has_itemtid();
  itemtid_ = value;
}

// optional int32 level = 3;
inline bool talisman_data::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void talisman_data::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void talisman_data::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void talisman_data::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 talisman_data::level() const {
  return level_;
}
inline void talisman_data::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 exp = 4;
inline bool talisman_data::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void talisman_data::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void talisman_data::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void talisman_data::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 talisman_data::exp() const {
  return exp_;
}
inline void talisman_data::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 break_times = 5;
inline bool talisman_data::has_break_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void talisman_data::set_has_break_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void talisman_data::clear_has_break_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void talisman_data::clear_break_times() {
  break_times_ = 0;
  clear_has_break_times();
}
inline ::google::protobuf::int32 talisman_data::break_times() const {
  return break_times_;
}
inline void talisman_data::set_break_times(::google::protobuf::int32 value) {
  set_has_break_times();
  break_times_ = value;
}

// optional int32 slot = 6;
inline bool talisman_data::has_slot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void talisman_data::set_has_slot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void talisman_data::clear_has_slot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void talisman_data::clear_slot() {
  slot_ = 0;
  clear_has_slot();
}
inline ::google::protobuf::int32 talisman_data::slot() const {
  return slot_;
}
inline void talisman_data::set_slot(::google::protobuf::int32 value) {
  set_has_slot();
  slot_ = value;
}

// -------------------------------------------------------------------

// hero_show_data

// optional uint64 uuid = 1;
inline bool hero_show_data::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_show_data::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_show_data::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_show_data::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 hero_show_data::uuid() const {
  return uuid_;
}
inline void hero_show_data::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 template_id = 2;
inline bool hero_show_data::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_show_data::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_show_data::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_show_data::clear_template_id() {
  template_id_ = 0u;
  clear_has_template_id();
}
inline ::google::protobuf::uint32 hero_show_data::template_id() const {
  return template_id_;
}
inline void hero_show_data::set_template_id(::google::protobuf::uint32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 level = 3;
inline bool hero_show_data::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_show_data::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_show_data::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_show_data::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 hero_show_data::level() const {
  return level_;
}
inline void hero_show_data::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 star = 4;
inline bool hero_show_data::has_star() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hero_show_data::set_has_star() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hero_show_data::clear_has_star() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hero_show_data::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 hero_show_data::star() const {
  return star_;
}
inline void hero_show_data::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// optional int32 quality = 5;
inline bool hero_show_data::has_quality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void hero_show_data::set_has_quality() {
  _has_bits_[0] |= 0x00000010u;
}
inline void hero_show_data::clear_has_quality() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void hero_show_data::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 hero_show_data::quality() const {
  return quality_;
}
inline void hero_show_data::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// repeated .SProtoSpace.client_skill_data skill = 6;
inline int hero_show_data::skill_size() const {
  return skill_.size();
}
inline void hero_show_data::clear_skill() {
  skill_.Clear();
}
inline const ::SProtoSpace::client_skill_data& hero_show_data::skill(int index) const {
  return skill_.Get(index);
}
inline ::SProtoSpace::client_skill_data* hero_show_data::mutable_skill(int index) {
  return skill_.Mutable(index);
}
inline ::SProtoSpace::client_skill_data* hero_show_data::add_skill() {
  return skill_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_skill_data >&
hero_show_data::skill() const {
  return skill_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_skill_data >*
hero_show_data::mutable_skill() {
  return &skill_;
}

// repeated .SProtoSpace.client_soul_data soul = 7;
inline int hero_show_data::soul_size() const {
  return soul_.size();
}
inline void hero_show_data::clear_soul() {
  soul_.Clear();
}
inline const ::SProtoSpace::client_soul_data& hero_show_data::soul(int index) const {
  return soul_.Get(index);
}
inline ::SProtoSpace::client_soul_data* hero_show_data::mutable_soul(int index) {
  return soul_.Mutable(index);
}
inline ::SProtoSpace::client_soul_data* hero_show_data::add_soul() {
  return soul_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_soul_data >&
hero_show_data::soul() const {
  return soul_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_soul_data >*
hero_show_data::mutable_soul() {
  return &soul_;
}

// optional int32 exp = 8;
inline bool hero_show_data::has_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void hero_show_data::set_has_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void hero_show_data::clear_has_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void hero_show_data::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 hero_show_data::exp() const {
  return exp_;
}
inline void hero_show_data::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional bool awaken = 9;
inline bool hero_show_data::has_awaken() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void hero_show_data::set_has_awaken() {
  _has_bits_[0] |= 0x00000100u;
}
inline void hero_show_data::clear_has_awaken() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void hero_show_data::clear_awaken() {
  awaken_ = false;
  clear_has_awaken();
}
inline bool hero_show_data::awaken() const {
  return awaken_;
}
inline void hero_show_data::set_awaken(bool value) {
  set_has_awaken();
  awaken_ = value;
}

// repeated .SProtoSpace.hero_attr_value awaken_attr = 10;
inline int hero_show_data::awaken_attr_size() const {
  return awaken_attr_.size();
}
inline void hero_show_data::clear_awaken_attr() {
  awaken_attr_.Clear();
}
inline const ::SProtoSpace::hero_attr_value& hero_show_data::awaken_attr(int index) const {
  return awaken_attr_.Get(index);
}
inline ::SProtoSpace::hero_attr_value* hero_show_data::mutable_awaken_attr(int index) {
  return awaken_attr_.Mutable(index);
}
inline ::SProtoSpace::hero_attr_value* hero_show_data::add_awaken_attr() {
  return awaken_attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value >&
hero_show_data::awaken_attr() const {
  return awaken_attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value >*
hero_show_data::mutable_awaken_attr() {
  return &awaken_attr_;
}

// optional bool locked = 11;
inline bool hero_show_data::has_locked() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void hero_show_data::set_has_locked() {
  _has_bits_[0] |= 0x00000400u;
}
inline void hero_show_data::clear_has_locked() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void hero_show_data::clear_locked() {
  locked_ = false;
  clear_has_locked();
}
inline bool hero_show_data::locked() const {
  return locked_;
}
inline void hero_show_data::set_locked(bool value) {
  set_has_locked();
  locked_ = value;
}

// optional uint32 create_time = 12;
inline bool hero_show_data::has_create_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void hero_show_data::set_has_create_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void hero_show_data::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void hero_show_data::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 hero_show_data::create_time() const {
  return create_time_;
}
inline void hero_show_data::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional .SProtoSpace.skin_data skin_info = 13;
inline bool hero_show_data::has_skin_info() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void hero_show_data::set_has_skin_info() {
  _has_bits_[0] |= 0x00001000u;
}
inline void hero_show_data::clear_has_skin_info() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void hero_show_data::clear_skin_info() {
  if (skin_info_ != NULL) skin_info_->::SProtoSpace::skin_data::Clear();
  clear_has_skin_info();
}
inline const ::SProtoSpace::skin_data& hero_show_data::skin_info() const {
  return skin_info_ != NULL ? *skin_info_ : *default_instance_->skin_info_;
}
inline ::SProtoSpace::skin_data* hero_show_data::mutable_skin_info() {
  set_has_skin_info();
  if (skin_info_ == NULL) skin_info_ = new ::SProtoSpace::skin_data;
  return skin_info_;
}
inline ::SProtoSpace::skin_data* hero_show_data::release_skin_info() {
  clear_has_skin_info();
  ::SProtoSpace::skin_data* temp = skin_info_;
  skin_info_ = NULL;
  return temp;
}
inline void hero_show_data::set_allocated_skin_info(::SProtoSpace::skin_data* skin_info) {
  delete skin_info_;
  skin_info_ = skin_info;
  if (skin_info) {
    set_has_skin_info();
  } else {
    clear_has_skin_info();
  }
}

// optional string name = 14;
inline bool hero_show_data::has_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void hero_show_data::set_has_name() {
  _has_bits_[0] |= 0x00002000u;
}
inline void hero_show_data::clear_has_name() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void hero_show_data::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& hero_show_data::name() const {
  return *name_;
}
inline void hero_show_data::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void hero_show_data::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void hero_show_data::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* hero_show_data::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* hero_show_data::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void hero_show_data::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 fight_power = 15;
inline bool hero_show_data::has_fight_power() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void hero_show_data::set_has_fight_power() {
  _has_bits_[0] |= 0x00004000u;
}
inline void hero_show_data::clear_has_fight_power() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void hero_show_data::clear_fight_power() {
  fight_power_ = GOOGLE_LONGLONG(0);
  clear_has_fight_power();
}
inline ::google::protobuf::int64 hero_show_data::fight_power() const {
  return fight_power_;
}
inline void hero_show_data::set_fight_power(::google::protobuf::int64 value) {
  set_has_fight_power();
  fight_power_ = value;
}

// repeated .SProtoSpace.hero_equip_data equips = 16;
inline int hero_show_data::equips_size() const {
  return equips_.size();
}
inline void hero_show_data::clear_equips() {
  equips_.Clear();
}
inline const ::SProtoSpace::hero_equip_data& hero_show_data::equips(int index) const {
  return equips_.Get(index);
}
inline ::SProtoSpace::hero_equip_data* hero_show_data::mutable_equips(int index) {
  return equips_.Mutable(index);
}
inline ::SProtoSpace::hero_equip_data* hero_show_data::add_equips() {
  return equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >&
hero_show_data::equips() const {
  return equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >*
hero_show_data::mutable_equips() {
  return &equips_;
}

// repeated .SProtoSpace.talisman_data talismans = 17;
inline int hero_show_data::talismans_size() const {
  return talismans_.size();
}
inline void hero_show_data::clear_talismans() {
  talismans_.Clear();
}
inline const ::SProtoSpace::talisman_data& hero_show_data::talismans(int index) const {
  return talismans_.Get(index);
}
inline ::SProtoSpace::talisman_data* hero_show_data::mutable_talismans(int index) {
  return talismans_.Mutable(index);
}
inline ::SProtoSpace::talisman_data* hero_show_data::add_talismans() {
  return talismans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talisman_data >&
hero_show_data::talismans() const {
  return talismans_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talisman_data >*
hero_show_data::mutable_talismans() {
  return &talismans_;
}

// -------------------------------------------------------------------

// soul_attr

// optional int32 id = 1;
inline bool soul_attr::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void soul_attr::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void soul_attr::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void soul_attr::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 soul_attr::id() const {
  return id_;
}
inline void soul_attr::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 value = 2;
inline bool soul_attr::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void soul_attr::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void soul_attr::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void soul_attr::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 soul_attr::value() const {
  return value_;
}
inline void soul_attr::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// soul_info

// optional uint64 id = 1;
inline bool soul_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void soul_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void soul_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void soul_info::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 soul_info::id() const {
  return id_;
}
inline void soul_info::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 tmp_id = 2;
inline bool soul_info::has_tmp_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void soul_info::set_has_tmp_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void soul_info::clear_has_tmp_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void soul_info::clear_tmp_id() {
  tmp_id_ = 0;
  clear_has_tmp_id();
}
inline ::google::protobuf::int32 soul_info::tmp_id() const {
  return tmp_id_;
}
inline void soul_info::set_tmp_id(::google::protobuf::int32 value) {
  set_has_tmp_id();
  tmp_id_ = value;
}

// optional int32 lv = 3;
inline bool soul_info::has_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void soul_info::set_has_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void soul_info::clear_has_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void soul_info::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 soul_info::lv() const {
  return lv_;
}
inline void soul_info::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 exp = 4;
inline bool soul_info::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void soul_info::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void soul_info::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void soul_info::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 soul_info::exp() const {
  return exp_;
}
inline void soul_info::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional bool is_lock = 6;
inline bool soul_info::has_is_lock() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void soul_info::set_has_is_lock() {
  _has_bits_[0] |= 0x00000010u;
}
inline void soul_info::clear_has_is_lock() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void soul_info::clear_is_lock() {
  is_lock_ = false;
  clear_has_is_lock();
}
inline bool soul_info::is_lock() const {
  return is_lock_;
}
inline void soul_info::set_is_lock(bool value) {
  set_has_is_lock();
  is_lock_ = value;
}

// optional bool is_bind = 7;
inline bool soul_info::has_is_bind() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void soul_info::set_has_is_bind() {
  _has_bits_[0] |= 0x00000020u;
}
inline void soul_info::clear_has_is_bind() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void soul_info::clear_is_bind() {
  is_bind_ = false;
  clear_has_is_bind();
}
inline bool soul_info::is_bind() const {
  return is_bind_;
}
inline void soul_info::set_is_bind(bool value) {
  set_has_is_bind();
  is_bind_ = value;
}

// optional uint32 create_time = 8;
inline bool soul_info::has_create_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void soul_info::set_has_create_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void soul_info::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void soul_info::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 soul_info::create_time() const {
  return create_time_;
}
inline void soul_info::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// repeated .SProtoSpace.soul_attr main_attr = 9;
inline int soul_info::main_attr_size() const {
  return main_attr_.size();
}
inline void soul_info::clear_main_attr() {
  main_attr_.Clear();
}
inline const ::SProtoSpace::soul_attr& soul_info::main_attr(int index) const {
  return main_attr_.Get(index);
}
inline ::SProtoSpace::soul_attr* soul_info::mutable_main_attr(int index) {
  return main_attr_.Mutable(index);
}
inline ::SProtoSpace::soul_attr* soul_info::add_main_attr() {
  return main_attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_attr >&
soul_info::main_attr() const {
  return main_attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_attr >*
soul_info::mutable_main_attr() {
  return &main_attr_;
}

// repeated .SProtoSpace.soul_attr secondary_attr = 10;
inline int soul_info::secondary_attr_size() const {
  return secondary_attr_.size();
}
inline void soul_info::clear_secondary_attr() {
  secondary_attr_.Clear();
}
inline const ::SProtoSpace::soul_attr& soul_info::secondary_attr(int index) const {
  return secondary_attr_.Get(index);
}
inline ::SProtoSpace::soul_attr* soul_info::mutable_secondary_attr(int index) {
  return secondary_attr_.Mutable(index);
}
inline ::SProtoSpace::soul_attr* soul_info::add_secondary_attr() {
  return secondary_attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_attr >&
soul_info::secondary_attr() const {
  return secondary_attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_attr >*
soul_info::mutable_secondary_attr() {
  return &secondary_attr_;
}

// -------------------------------------------------------------------

// discover_monster

// optional int32 id = 1;
inline bool discover_monster::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void discover_monster::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void discover_monster::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void discover_monster::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 discover_monster::id() const {
  return id_;
}
inline void discover_monster::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 level = 2;
inline bool discover_monster::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void discover_monster::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void discover_monster::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void discover_monster::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 discover_monster::level() const {
  return level_;
}
inline void discover_monster::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// discover_data

// optional int32 config_id = 1;
inline bool discover_data::has_config_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void discover_data::set_has_config_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void discover_data::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void discover_data::clear_config_id() {
  config_id_ = 0;
  clear_has_config_id();
}
inline ::google::protobuf::int32 discover_data::config_id() const {
  return config_id_;
}
inline void discover_data::set_config_id(::google::protobuf::int32 value) {
  set_has_config_id();
  config_id_ = value;
}

// optional bool is_open = 2;
inline bool discover_data::has_is_open() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void discover_data::set_has_is_open() {
  _has_bits_[0] |= 0x00000002u;
}
inline void discover_data::clear_has_is_open() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void discover_data::clear_is_open() {
  is_open_ = false;
  clear_has_is_open();
}
inline bool discover_data::is_open() const {
  return is_open_;
}
inline void discover_data::set_is_open(bool value) {
  set_has_is_open();
  is_open_ = value;
}

// optional bool is_pass = 3;
inline bool discover_data::has_is_pass() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void discover_data::set_has_is_pass() {
  _has_bits_[0] |= 0x00000004u;
}
inline void discover_data::clear_has_is_pass() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void discover_data::clear_is_pass() {
  is_pass_ = false;
  clear_has_is_pass();
}
inline bool discover_data::is_pass() const {
  return is_pass_;
}
inline void discover_data::set_is_pass(bool value) {
  set_has_is_pass();
  is_pass_ = value;
}

// optional int32 mopping_times_remain = 4;
inline bool discover_data::has_mopping_times_remain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void discover_data::set_has_mopping_times_remain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void discover_data::clear_has_mopping_times_remain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void discover_data::clear_mopping_times_remain() {
  mopping_times_remain_ = 0;
  clear_has_mopping_times_remain();
}
inline ::google::protobuf::int32 discover_data::mopping_times_remain() const {
  return mopping_times_remain_;
}
inline void discover_data::set_mopping_times_remain(::google::protobuf::int32 value) {
  set_has_mopping_times_remain();
  mopping_times_remain_ = value;
}

// optional int32 pass_star = 5;
inline bool discover_data::has_pass_star() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void discover_data::set_has_pass_star() {
  _has_bits_[0] |= 0x00000010u;
}
inline void discover_data::clear_has_pass_star() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void discover_data::clear_pass_star() {
  pass_star_ = 0;
  clear_has_pass_star();
}
inline ::google::protobuf::int32 discover_data::pass_star() const {
  return pass_star_;
}
inline void discover_data::set_pass_star(::google::protobuf::int32 value) {
  set_has_pass_star();
  pass_star_ = value;
}

// -------------------------------------------------------------------

// dischapter_data

// optional int32 config_id = 1;
inline bool dischapter_data::has_config_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dischapter_data::set_has_config_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dischapter_data::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dischapter_data::clear_config_id() {
  config_id_ = 0;
  clear_has_config_id();
}
inline ::google::protobuf::int32 dischapter_data::config_id() const {
  return config_id_;
}
inline void dischapter_data::set_config_id(::google::protobuf::int32 value) {
  set_has_config_id();
  config_id_ = value;
}

// optional bool is_simpleopen = 2;
inline bool dischapter_data::has_is_simpleopen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dischapter_data::set_has_is_simpleopen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dischapter_data::clear_has_is_simpleopen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dischapter_data::clear_is_simpleopen() {
  is_simpleopen_ = false;
  clear_has_is_simpleopen();
}
inline bool dischapter_data::is_simpleopen() const {
  return is_simpleopen_;
}
inline void dischapter_data::set_is_simpleopen(bool value) {
  set_has_is_simpleopen();
  is_simpleopen_ = value;
}

// optional bool is_diffopen = 3;
inline bool dischapter_data::has_is_diffopen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dischapter_data::set_has_is_diffopen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dischapter_data::clear_has_is_diffopen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dischapter_data::clear_is_diffopen() {
  is_diffopen_ = false;
  clear_has_is_diffopen();
}
inline bool dischapter_data::is_diffopen() const {
  return is_diffopen_;
}
inline void dischapter_data::set_is_diffopen(bool value) {
  set_has_is_diffopen();
  is_diffopen_ = value;
}

// optional bool is_simplepass = 4;
inline bool dischapter_data::has_is_simplepass() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dischapter_data::set_has_is_simplepass() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dischapter_data::clear_has_is_simplepass() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dischapter_data::clear_is_simplepass() {
  is_simplepass_ = false;
  clear_has_is_simplepass();
}
inline bool dischapter_data::is_simplepass() const {
  return is_simplepass_;
}
inline void dischapter_data::set_is_simplepass(bool value) {
  set_has_is_simplepass();
  is_simplepass_ = value;
}

// optional bool is_diffpass = 5;
inline bool dischapter_data::has_is_diffpass() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void dischapter_data::set_has_is_diffpass() {
  _has_bits_[0] |= 0x00000010u;
}
inline void dischapter_data::clear_has_is_diffpass() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void dischapter_data::clear_is_diffpass() {
  is_diffpass_ = false;
  clear_has_is_diffpass();
}
inline bool dischapter_data::is_diffpass() const {
  return is_diffpass_;
}
inline void dischapter_data::set_is_diffpass(bool value) {
  set_has_is_diffpass();
  is_diffpass_ = value;
}

// -------------------------------------------------------------------

// all_discover_data

// optional int32 last_id = 1;
inline bool all_discover_data::has_last_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void all_discover_data::set_has_last_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void all_discover_data::clear_has_last_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void all_discover_data::clear_last_id() {
  last_id_ = 0;
  clear_has_last_id();
}
inline ::google::protobuf::int32 all_discover_data::last_id() const {
  return last_id_;
}
inline void all_discover_data::set_last_id(::google::protobuf::int32 value) {
  set_has_last_id();
  last_id_ = value;
}

// repeated .SProtoSpace.discover_data discover_s = 2;
inline int all_discover_data::discover_s_size() const {
  return discover_s_.size();
}
inline void all_discover_data::clear_discover_s() {
  discover_s_.Clear();
}
inline const ::SProtoSpace::discover_data& all_discover_data::discover_s(int index) const {
  return discover_s_.Get(index);
}
inline ::SProtoSpace::discover_data* all_discover_data::mutable_discover_s(int index) {
  return discover_s_.Mutable(index);
}
inline ::SProtoSpace::discover_data* all_discover_data::add_discover_s() {
  return discover_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discover_data >&
all_discover_data::discover_s() const {
  return discover_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discover_data >*
all_discover_data::mutable_discover_s() {
  return &discover_s_;
}

// -------------------------------------------------------------------

// drop_data

// required int32 id = 1;
inline bool drop_data::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void drop_data::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void drop_data::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void drop_data::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 drop_data::id() const {
  return id_;
}
inline void drop_data::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 type = 2;
inline bool drop_data::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void drop_data::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void drop_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void drop_data::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 drop_data::type() const {
  return type_;
}
inline void drop_data::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 count = 3;
inline bool drop_data::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void drop_data::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void drop_data::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void drop_data::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 drop_data::count() const {
  return count_;
}
inline void drop_data::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// role_attr_pair

// optional .SProtoSpace.EItemType type = 1;
inline bool role_attr_pair::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_attr_pair::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_attr_pair::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_attr_pair::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::SProtoSpace::EItemType role_attr_pair::type() const {
  return static_cast< ::SProtoSpace::EItemType >(type_);
}
inline void role_attr_pair::set_type(::SProtoSpace::EItemType value) {
  assert(::SProtoSpace::EItemType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 val = 2 [default = 0];
inline bool role_attr_pair::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_attr_pair::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_attr_pair::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_attr_pair::clear_val() {
  val_ = 0;
  clear_has_val();
}
inline ::google::protobuf::int32 role_attr_pair::val() const {
  return val_;
}
inline void role_attr_pair::set_val(::google::protobuf::int32 value) {
  set_has_val();
  val_ = value;
}

// -------------------------------------------------------------------

// player_property

// repeated .SProtoSpace.hero_attr_value attr_mod_data = 2;
inline int player_property::attr_mod_data_size() const {
  return attr_mod_data_.size();
}
inline void player_property::clear_attr_mod_data() {
  attr_mod_data_.Clear();
}
inline const ::SProtoSpace::hero_attr_value& player_property::attr_mod_data(int index) const {
  return attr_mod_data_.Get(index);
}
inline ::SProtoSpace::hero_attr_value* player_property::mutable_attr_mod_data(int index) {
  return attr_mod_data_.Mutable(index);
}
inline ::SProtoSpace::hero_attr_value* player_property::add_attr_mod_data() {
  return attr_mod_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value >&
player_property::attr_mod_data() const {
  return attr_mod_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value >*
player_property::mutable_attr_mod_data() {
  return &attr_mod_data_;
}

// repeated .SProtoSpace.hero_attr_value attr_mod_per = 3;
inline int player_property::attr_mod_per_size() const {
  return attr_mod_per_.size();
}
inline void player_property::clear_attr_mod_per() {
  attr_mod_per_.Clear();
}
inline const ::SProtoSpace::hero_attr_value& player_property::attr_mod_per(int index) const {
  return attr_mod_per_.Get(index);
}
inline ::SProtoSpace::hero_attr_value* player_property::mutable_attr_mod_per(int index) {
  return attr_mod_per_.Mutable(index);
}
inline ::SProtoSpace::hero_attr_value* player_property::add_attr_mod_per() {
  return attr_mod_per_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value >&
player_property::attr_mod_per() const {
  return attr_mod_per_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value >*
player_property::mutable_attr_mod_per() {
  return &attr_mod_per_;
}

// -------------------------------------------------------------------

// player_skill_info

// optional int32 template_id = 1;
inline bool player_skill_info::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_skill_info::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_skill_info::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_skill_info::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 player_skill_info::template_id() const {
  return template_id_;
}
inline void player_skill_info::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional .SProtoSpace.SKILL_STATUS skill_status = 2;
inline bool player_skill_info::has_skill_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_skill_info::set_has_skill_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_skill_info::clear_has_skill_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_skill_info::clear_skill_status() {
  skill_status_ = 1;
  clear_has_skill_status();
}
inline ::SProtoSpace::SKILL_STATUS player_skill_info::skill_status() const {
  return static_cast< ::SProtoSpace::SKILL_STATUS >(skill_status_);
}
inline void player_skill_info::set_skill_status(::SProtoSpace::SKILL_STATUS value) {
  assert(::SProtoSpace::SKILL_STATUS_IsValid(value));
  set_has_skill_status();
  skill_status_ = value;
}

// optional .SProtoSpace.PLAYER_SKILL_TYPE skill_type = 3;
inline bool player_skill_info::has_skill_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void player_skill_info::set_has_skill_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void player_skill_info::clear_has_skill_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void player_skill_info::clear_skill_type() {
  skill_type_ = 1;
  clear_has_skill_type();
}
inline ::SProtoSpace::PLAYER_SKILL_TYPE player_skill_info::skill_type() const {
  return static_cast< ::SProtoSpace::PLAYER_SKILL_TYPE >(skill_type_);
}
inline void player_skill_info::set_skill_type(::SProtoSpace::PLAYER_SKILL_TYPE value) {
  assert(::SProtoSpace::PLAYER_SKILL_TYPE_IsValid(value));
  set_has_skill_type();
  skill_type_ = value;
}

// optional int32 lv = 4;
inline bool player_skill_info::has_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void player_skill_info::set_has_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void player_skill_info::clear_has_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void player_skill_info::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 player_skill_info::lv() const {
  return lv_;
}
inline void player_skill_info::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// -------------------------------------------------------------------

// talent_info

// optional int32 template_id = 1;
inline bool talent_info::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void talent_info::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void talent_info::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void talent_info::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 talent_info::template_id() const {
  return template_id_;
}
inline void talent_info::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional .SProtoSpace.TALENT_STATUS talent_status = 2;
inline bool talent_info::has_talent_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void talent_info::set_has_talent_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void talent_info::clear_has_talent_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void talent_info::clear_talent_status() {
  talent_status_ = 1;
  clear_has_talent_status();
}
inline ::SProtoSpace::TALENT_STATUS talent_info::talent_status() const {
  return static_cast< ::SProtoSpace::TALENT_STATUS >(talent_status_);
}
inline void talent_info::set_talent_status(::SProtoSpace::TALENT_STATUS value) {
  assert(::SProtoSpace::TALENT_STATUS_IsValid(value));
  set_has_talent_status();
  talent_status_ = value;
}

// -------------------------------------------------------------------

// player_skin_info

// required uint32 template_id = 1;
inline bool player_skin_info::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_skin_info::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_skin_info::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_skin_info::clear_template_id() {
  template_id_ = 0u;
  clear_has_template_id();
}
inline ::google::protobuf::uint32 player_skin_info::template_id() const {
  return template_id_;
}
inline void player_skin_info::set_template_id(::google::protobuf::uint32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional uint64 end_time = 2;
inline bool player_skin_info::has_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_skin_info::set_has_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_skin_info::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_skin_info::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 player_skin_info::end_time() const {
  return end_time_;
}
inline void player_skin_info::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
}

// -------------------------------------------------------------------

// player_skin_data

// optional uint32 wear_id = 1;
inline bool player_skin_data::has_wear_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_skin_data::set_has_wear_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_skin_data::clear_has_wear_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_skin_data::clear_wear_id() {
  wear_id_ = 0u;
  clear_has_wear_id();
}
inline ::google::protobuf::uint32 player_skin_data::wear_id() const {
  return wear_id_;
}
inline void player_skin_data::set_wear_id(::google::protobuf::uint32 value) {
  set_has_wear_id();
  wear_id_ = value;
}

// repeated .SProtoSpace.player_skin_info skin_list = 2;
inline int player_skin_data::skin_list_size() const {
  return skin_list_.size();
}
inline void player_skin_data::clear_skin_list() {
  skin_list_.Clear();
}
inline const ::SProtoSpace::player_skin_info& player_skin_data::skin_list(int index) const {
  return skin_list_.Get(index);
}
inline ::SProtoSpace::player_skin_info* player_skin_data::mutable_skin_list(int index) {
  return skin_list_.Mutable(index);
}
inline ::SProtoSpace::player_skin_info* player_skin_data::add_skin_list() {
  return skin_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::player_skin_info >&
player_skin_data::skin_list() const {
  return skin_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::player_skin_info >*
player_skin_data::mutable_skin_list() {
  return &skin_list_;
}

// -------------------------------------------------------------------

// player_equip_data

// -------------------------------------------------------------------

// player_data

// required uint32 template_id = 1;
inline bool player_data::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_data::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_data::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_data::clear_template_id() {
  template_id_ = 0u;
  clear_has_template_id();
}
inline ::google::protobuf::uint32 player_data::template_id() const {
  return template_id_;
}
inline void player_data::set_template_id(::google::protobuf::uint32 value) {
  set_has_template_id();
  template_id_ = value;
}

// repeated .SProtoSpace.player_skill_info skill_data = 2;
inline int player_data::skill_data_size() const {
  return skill_data_.size();
}
inline void player_data::clear_skill_data() {
  skill_data_.Clear();
}
inline const ::SProtoSpace::player_skill_info& player_data::skill_data(int index) const {
  return skill_data_.Get(index);
}
inline ::SProtoSpace::player_skill_info* player_data::mutable_skill_data(int index) {
  return skill_data_.Mutable(index);
}
inline ::SProtoSpace::player_skill_info* player_data::add_skill_data() {
  return skill_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::player_skill_info >&
player_data::skill_data() const {
  return skill_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::player_skill_info >*
player_data::mutable_skill_data() {
  return &skill_data_;
}

// optional .SProtoSpace.player_skin_data skin_data = 3;
inline bool player_data::has_skin_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void player_data::set_has_skin_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void player_data::clear_has_skin_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void player_data::clear_skin_data() {
  if (skin_data_ != NULL) skin_data_->::SProtoSpace::player_skin_data::Clear();
  clear_has_skin_data();
}
inline const ::SProtoSpace::player_skin_data& player_data::skin_data() const {
  return skin_data_ != NULL ? *skin_data_ : *default_instance_->skin_data_;
}
inline ::SProtoSpace::player_skin_data* player_data::mutable_skin_data() {
  set_has_skin_data();
  if (skin_data_ == NULL) skin_data_ = new ::SProtoSpace::player_skin_data;
  return skin_data_;
}
inline ::SProtoSpace::player_skin_data* player_data::release_skin_data() {
  clear_has_skin_data();
  ::SProtoSpace::player_skin_data* temp = skin_data_;
  skin_data_ = NULL;
  return temp;
}
inline void player_data::set_allocated_skin_data(::SProtoSpace::player_skin_data* skin_data) {
  delete skin_data_;
  skin_data_ = skin_data;
  if (skin_data) {
    set_has_skin_data();
  } else {
    clear_has_skin_data();
  }
}

// optional .SProtoSpace.player_equip_data equip_list = 4;
inline bool player_data::has_equip_list() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void player_data::set_has_equip_list() {
  _has_bits_[0] |= 0x00000008u;
}
inline void player_data::clear_has_equip_list() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void player_data::clear_equip_list() {
  if (equip_list_ != NULL) equip_list_->::SProtoSpace::player_equip_data::Clear();
  clear_has_equip_list();
}
inline const ::SProtoSpace::player_equip_data& player_data::equip_list() const {
  return equip_list_ != NULL ? *equip_list_ : *default_instance_->equip_list_;
}
inline ::SProtoSpace::player_equip_data* player_data::mutable_equip_list() {
  set_has_equip_list();
  if (equip_list_ == NULL) equip_list_ = new ::SProtoSpace::player_equip_data;
  return equip_list_;
}
inline ::SProtoSpace::player_equip_data* player_data::release_equip_list() {
  clear_has_equip_list();
  ::SProtoSpace::player_equip_data* temp = equip_list_;
  equip_list_ = NULL;
  return temp;
}
inline void player_data::set_allocated_equip_list(::SProtoSpace::player_equip_data* equip_list) {
  delete equip_list_;
  equip_list_ = equip_list;
  if (equip_list) {
    set_has_equip_list();
  } else {
    clear_has_equip_list();
  }
}

// repeated .SProtoSpace.talent_data talents = 5;
inline int player_data::talents_size() const {
  return talents_.size();
}
inline void player_data::clear_talents() {
  talents_.Clear();
}
inline const ::SProtoSpace::talent_data& player_data::talents(int index) const {
  return talents_.Get(index);
}
inline ::SProtoSpace::talent_data* player_data::mutable_talents(int index) {
  return talents_.Mutable(index);
}
inline ::SProtoSpace::talent_data* player_data::add_talents() {
  return talents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talent_data >&
player_data::talents() const {
  return talents_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talent_data >*
player_data::mutable_talents() {
  return &talents_;
}

// optional int32 talent_grade = 6;
inline bool player_data::has_talent_grade() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void player_data::set_has_talent_grade() {
  _has_bits_[0] |= 0x00000020u;
}
inline void player_data::clear_has_talent_grade() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void player_data::clear_talent_grade() {
  talent_grade_ = 0;
  clear_has_talent_grade();
}
inline ::google::protobuf::int32 player_data::talent_grade() const {
  return talent_grade_;
}
inline void player_data::set_talent_grade(::google::protobuf::int32 value) {
  set_has_talent_grade();
  talent_grade_ = value;
}

// optional int32 fight_value = 7;
inline bool player_data::has_fight_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void player_data::set_has_fight_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void player_data::clear_has_fight_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void player_data::clear_fight_value() {
  fight_value_ = 0;
  clear_has_fight_value();
}
inline ::google::protobuf::int32 player_data::fight_value() const {
  return fight_value_;
}
inline void player_data::set_fight_value(::google::protobuf::int32 value) {
  set_has_fight_value();
  fight_value_ = value;
}

// repeated .SProtoSpace.talisman_data talismans = 8;
inline int player_data::talismans_size() const {
  return talismans_.size();
}
inline void player_data::clear_talismans() {
  talismans_.Clear();
}
inline const ::SProtoSpace::talisman_data& player_data::talismans(int index) const {
  return talismans_.Get(index);
}
inline ::SProtoSpace::talisman_data* player_data::mutable_talismans(int index) {
  return talismans_.Mutable(index);
}
inline ::SProtoSpace::talisman_data* player_data::add_talismans() {
  return talismans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talisman_data >&
player_data::talismans() const {
  return talismans_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talisman_data >*
player_data::mutable_talismans() {
  return &talismans_;
}

// -------------------------------------------------------------------

// account_token_data

// required string token = 1;
inline bool account_token_data::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void account_token_data::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void account_token_data::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void account_token_data::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& account_token_data::token() const {
  return *token_;
}
inline void account_token_data::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void account_token_data::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void account_token_data::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* account_token_data::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* account_token_data::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void account_token_data::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 tempid = 2;
inline bool account_token_data::has_tempid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void account_token_data::set_has_tempid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void account_token_data::clear_has_tempid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void account_token_data::clear_tempid() {
  tempid_ = 0u;
  clear_has_tempid();
}
inline ::google::protobuf::uint32 account_token_data::tempid() const {
  return tempid_;
}
inline void account_token_data::set_tempid(::google::protobuf::uint32 value) {
  set_has_tempid();
  tempid_ = value;
}

// required uint32 lastverifytime = 3;
inline bool account_token_data::has_lastverifytime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void account_token_data::set_has_lastverifytime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void account_token_data::clear_has_lastverifytime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void account_token_data::clear_lastverifytime() {
  lastverifytime_ = 0u;
  clear_has_lastverifytime();
}
inline ::google::protobuf::uint32 account_token_data::lastverifytime() const {
  return lastverifytime_;
}
inline void account_token_data::set_lastverifytime(::google::protobuf::uint32 value) {
  set_has_lastverifytime();
  lastverifytime_ = value;
}

// -------------------------------------------------------------------

// account_gate_data

// required uint64 gateid = 1;
inline bool account_gate_data::has_gateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void account_gate_data::set_has_gateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void account_gate_data::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void account_gate_data::clear_gateid() {
  gateid_ = GOOGLE_ULONGLONG(0);
  clear_has_gateid();
}
inline ::google::protobuf::uint64 account_gate_data::gateid() const {
  return gateid_;
}
inline void account_gate_data::set_gateid(::google::protobuf::uint64 value) {
  set_has_gateid();
  gateid_ = value;
}

// -------------------------------------------------------------------

// area_gateserver_info

// optional uint32 zone_id = 1;
inline bool area_gateserver_info::has_zone_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void area_gateserver_info::set_has_zone_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void area_gateserver_info::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void area_gateserver_info::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 area_gateserver_info::zone_id() const {
  return zone_id_;
}
inline void area_gateserver_info::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// optional string ip = 2;
inline bool area_gateserver_info::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void area_gateserver_info::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void area_gateserver_info::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void area_gateserver_info::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& area_gateserver_info::ip() const {
  return *ip_;
}
inline void area_gateserver_info::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void area_gateserver_info::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void area_gateserver_info::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* area_gateserver_info::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* area_gateserver_info::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void area_gateserver_info::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 port = 3;
inline bool area_gateserver_info::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void area_gateserver_info::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void area_gateserver_info::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void area_gateserver_info::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 area_gateserver_info::port() const {
  return port_;
}
inline void area_gateserver_info::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional uint32 status = 4;
inline bool area_gateserver_info::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void area_gateserver_info::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void area_gateserver_info::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void area_gateserver_info::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 area_gateserver_info::status() const {
  return status_;
}
inline void area_gateserver_info::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// game_system

// optional uint32 system_id = 1;
inline bool game_system::has_system_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_system::set_has_system_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_system::clear_has_system_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_system::clear_system_id() {
  system_id_ = 0u;
  clear_has_system_id();
}
inline ::google::protobuf::uint32 game_system::system_id() const {
  return system_id_;
}
inline void game_system::set_system_id(::google::protobuf::uint32 value) {
  set_has_system_id();
  system_id_ = value;
}

// optional bool is_open = 2;
inline bool game_system::has_is_open() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_system::set_has_is_open() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_system::clear_has_is_open() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_system::clear_is_open() {
  is_open_ = false;
  clear_has_is_open();
}
inline bool game_system::is_open() const {
  return is_open_;
}
inline void game_system::set_is_open(bool value) {
  set_has_is_open();
  is_open_ = value;
}

// -------------------------------------------------------------------

// chest_data

// optional uint32 item_id = 1;
inline bool chest_data::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chest_data::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chest_data::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chest_data::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 chest_data::item_id() const {
  return item_id_;
}
inline void chest_data::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint32 item_count = 2;
inline bool chest_data::has_item_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chest_data::set_has_item_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chest_data::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chest_data::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
inline ::google::protobuf::uint32 chest_data::item_count() const {
  return item_count_;
}
inline void chest_data::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
}

// -------------------------------------------------------------------

// role_chest

// optional uint64 chest_id = 1;
inline bool role_chest::has_chest_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_chest::set_has_chest_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_chest::clear_has_chest_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_chest::clear_chest_id() {
  chest_id_ = GOOGLE_ULONGLONG(0);
  clear_has_chest_id();
}
inline ::google::protobuf::uint64 role_chest::chest_id() const {
  return chest_id_;
}
inline void role_chest::set_chest_id(::google::protobuf::uint64 value) {
  set_has_chest_id();
  chest_id_ = value;
}

// optional .SProtoSpace.eChestQuality quality = 2;
inline bool role_chest::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_chest::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_chest::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_chest::clear_quality() {
  quality_ = 1;
  clear_has_quality();
}
inline ::SProtoSpace::eChestQuality role_chest::quality() const {
  return static_cast< ::SProtoSpace::eChestQuality >(quality_);
}
inline void role_chest::set_quality(::SProtoSpace::eChestQuality value) {
  assert(::SProtoSpace::eChestQuality_IsValid(value));
  set_has_quality();
  quality_ = value;
}

// repeated .SProtoSpace.chest_data chests = 3;
inline int role_chest::chests_size() const {
  return chests_.size();
}
inline void role_chest::clear_chests() {
  chests_.Clear();
}
inline const ::SProtoSpace::chest_data& role_chest::chests(int index) const {
  return chests_.Get(index);
}
inline ::SProtoSpace::chest_data* role_chest::mutable_chests(int index) {
  return chests_.Mutable(index);
}
inline ::SProtoSpace::chest_data* role_chest::add_chests() {
  return chests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chest_data >&
role_chest::chests() const {
  return chests_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chest_data >*
role_chest::mutable_chests() {
  return &chests_;
}

// -------------------------------------------------------------------

// offical_item_data

// optional .SProtoSpace.EGrade rank_lv = 1;
inline bool offical_item_data::has_rank_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_item_data::set_has_rank_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_item_data::clear_has_rank_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_item_data::clear_rank_lv() {
  rank_lv_ = 0;
  clear_has_rank_lv();
}
inline ::SProtoSpace::EGrade offical_item_data::rank_lv() const {
  return static_cast< ::SProtoSpace::EGrade >(rank_lv_);
}
inline void offical_item_data::set_rank_lv(::SProtoSpace::EGrade value) {
  assert(::SProtoSpace::EGrade_IsValid(value));
  set_has_rank_lv();
  rank_lv_ = value;
}

// optional uint64 role_id = 2;
inline bool offical_item_data::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offical_item_data::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offical_item_data::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offical_item_data::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 offical_item_data::role_id() const {
  return role_id_;
}
inline void offical_item_data::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 ranking_id = 3;
inline bool offical_item_data::has_ranking_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void offical_item_data::set_has_ranking_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void offical_item_data::clear_has_ranking_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void offical_item_data::clear_ranking_id() {
  ranking_id_ = 0u;
  clear_has_ranking_id();
}
inline ::google::protobuf::uint32 offical_item_data::ranking_id() const {
  return ranking_id_;
}
inline void offical_item_data::set_ranking_id(::google::protobuf::uint32 value) {
  set_has_ranking_id();
  ranking_id_ = value;
}

// optional uint32 lv = 4;
inline bool offical_item_data::has_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void offical_item_data::set_has_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void offical_item_data::clear_has_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void offical_item_data::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 offical_item_data::lv() const {
  return lv_;
}
inline void offical_item_data::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional uint32 sex = 5;
inline bool offical_item_data::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void offical_item_data::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void offical_item_data::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void offical_item_data::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 offical_item_data::sex() const {
  return sex_;
}
inline void offical_item_data::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 gongdoupower = 6;
inline bool offical_item_data::has_gongdoupower() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void offical_item_data::set_has_gongdoupower() {
  _has_bits_[0] |= 0x00000020u;
}
inline void offical_item_data::clear_has_gongdoupower() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void offical_item_data::clear_gongdoupower() {
  gongdoupower_ = 0u;
  clear_has_gongdoupower();
}
inline ::google::protobuf::uint32 offical_item_data::gongdoupower() const {
  return gongdoupower_;
}
inline void offical_item_data::set_gongdoupower(::google::protobuf::uint32 value) {
  set_has_gongdoupower();
  gongdoupower_ = value;
}

// optional int32 win_num = 7;
inline bool offical_item_data::has_win_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void offical_item_data::set_has_win_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void offical_item_data::clear_has_win_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void offical_item_data::clear_win_num() {
  win_num_ = 0;
  clear_has_win_num();
}
inline ::google::protobuf::int32 offical_item_data::win_num() const {
  return win_num_;
}
inline void offical_item_data::set_win_num(::google::protobuf::int32 value) {
  set_has_win_num();
  win_num_ = value;
}

// optional int32 fail_num = 8;
inline bool offical_item_data::has_fail_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void offical_item_data::set_has_fail_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void offical_item_data::clear_has_fail_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void offical_item_data::clear_fail_num() {
  fail_num_ = 0;
  clear_has_fail_num();
}
inline ::google::protobuf::int32 offical_item_data::fail_num() const {
  return fail_num_;
}
inline void offical_item_data::set_fail_num(::google::protobuf::int32 value) {
  set_has_fail_num();
  fail_num_ = value;
}

// optional string role_name = 9;
inline bool offical_item_data::has_role_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void offical_item_data::set_has_role_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void offical_item_data::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void offical_item_data::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& offical_item_data::role_name() const {
  return *role_name_;
}
inline void offical_item_data::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void offical_item_data::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void offical_item_data::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* offical_item_data::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* offical_item_data::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void offical_item_data::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string head = 10;
inline bool offical_item_data::has_head() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void offical_item_data::set_has_head() {
  _has_bits_[0] |= 0x00000200u;
}
inline void offical_item_data::clear_has_head() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void offical_item_data::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& offical_item_data::head() const {
  return *head_;
}
inline void offical_item_data::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void offical_item_data::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void offical_item_data::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* offical_item_data::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* offical_item_data::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void offical_item_data::set_allocated_head(::std::string* head) {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (head) {
    set_has_head();
    head_ = head;
  } else {
    clear_has_head();
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string union_name = 11;
inline bool offical_item_data::has_union_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void offical_item_data::set_has_union_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void offical_item_data::clear_has_union_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void offical_item_data::clear_union_name() {
  if (union_name_ != &::google::protobuf::internal::kEmptyString) {
    union_name_->clear();
  }
  clear_has_union_name();
}
inline const ::std::string& offical_item_data::union_name() const {
  return *union_name_;
}
inline void offical_item_data::set_union_name(const ::std::string& value) {
  set_has_union_name();
  if (union_name_ == &::google::protobuf::internal::kEmptyString) {
    union_name_ = new ::std::string;
  }
  union_name_->assign(value);
}
inline void offical_item_data::set_union_name(const char* value) {
  set_has_union_name();
  if (union_name_ == &::google::protobuf::internal::kEmptyString) {
    union_name_ = new ::std::string;
  }
  union_name_->assign(value);
}
inline void offical_item_data::set_union_name(const char* value, size_t size) {
  set_has_union_name();
  if (union_name_ == &::google::protobuf::internal::kEmptyString) {
    union_name_ = new ::std::string;
  }
  union_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* offical_item_data::mutable_union_name() {
  set_has_union_name();
  if (union_name_ == &::google::protobuf::internal::kEmptyString) {
    union_name_ = new ::std::string;
  }
  return union_name_;
}
inline ::std::string* offical_item_data::release_union_name() {
  clear_has_union_name();
  if (union_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = union_name_;
    union_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void offical_item_data::set_allocated_union_name(::std::string* union_name) {
  if (union_name_ != &::google::protobuf::internal::kEmptyString) {
    delete union_name_;
  }
  if (union_name) {
    set_has_union_name();
    union_name_ = union_name;
  } else {
    clear_has_union_name();
    union_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// offical_member_data

// optional uint64 role_id = 1;
inline bool offical_member_data::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_member_data::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_member_data::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_member_data::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 offical_member_data::role_id() const {
  return role_id_;
}
inline void offical_member_data::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 2;
inline bool offical_member_data::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offical_member_data::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offical_member_data::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offical_member_data::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& offical_member_data::role_name() const {
  return *role_name_;
}
inline void offical_member_data::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void offical_member_data::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void offical_member_data::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* offical_member_data::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* offical_member_data::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void offical_member_data::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ranking_id = 3;
inline bool offical_member_data::has_ranking_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void offical_member_data::set_has_ranking_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void offical_member_data::clear_has_ranking_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void offical_member_data::clear_ranking_id() {
  ranking_id_ = 0u;
  clear_has_ranking_id();
}
inline ::google::protobuf::uint32 offical_member_data::ranking_id() const {
  return ranking_id_;
}
inline void offical_member_data::set_ranking_id(::google::protobuf::uint32 value) {
  set_has_ranking_id();
  ranking_id_ = value;
}

// optional uint32 lv = 4;
inline bool offical_member_data::has_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void offical_member_data::set_has_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void offical_member_data::clear_has_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void offical_member_data::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 offical_member_data::lv() const {
  return lv_;
}
inline void offical_member_data::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional uint32 sex = 5;
inline bool offical_member_data::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void offical_member_data::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void offical_member_data::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void offical_member_data::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 offical_member_data::sex() const {
  return sex_;
}
inline void offical_member_data::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional string head = 6;
inline bool offical_member_data::has_head() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void offical_member_data::set_has_head() {
  _has_bits_[0] |= 0x00000020u;
}
inline void offical_member_data::clear_has_head() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void offical_member_data::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& offical_member_data::head() const {
  return *head_;
}
inline void offical_member_data::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void offical_member_data::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void offical_member_data::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* offical_member_data::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* offical_member_data::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void offical_member_data::set_allocated_head(::std::string* head) {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (head) {
    set_has_head();
    head_ = head;
  } else {
    clear_has_head();
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 gongdoupower = 7;
inline bool offical_member_data::has_gongdoupower() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void offical_member_data::set_has_gongdoupower() {
  _has_bits_[0] |= 0x00000040u;
}
inline void offical_member_data::clear_has_gongdoupower() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void offical_member_data::clear_gongdoupower() {
  gongdoupower_ = 0u;
  clear_has_gongdoupower();
}
inline ::google::protobuf::uint32 offical_member_data::gongdoupower() const {
  return gongdoupower_;
}
inline void offical_member_data::set_gongdoupower(::google::protobuf::uint32 value) {
  set_has_gongdoupower();
  gongdoupower_ = value;
}

// optional string union_name = 8;
inline bool offical_member_data::has_union_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void offical_member_data::set_has_union_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void offical_member_data::clear_has_union_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void offical_member_data::clear_union_name() {
  if (union_name_ != &::google::protobuf::internal::kEmptyString) {
    union_name_->clear();
  }
  clear_has_union_name();
}
inline const ::std::string& offical_member_data::union_name() const {
  return *union_name_;
}
inline void offical_member_data::set_union_name(const ::std::string& value) {
  set_has_union_name();
  if (union_name_ == &::google::protobuf::internal::kEmptyString) {
    union_name_ = new ::std::string;
  }
  union_name_->assign(value);
}
inline void offical_member_data::set_union_name(const char* value) {
  set_has_union_name();
  if (union_name_ == &::google::protobuf::internal::kEmptyString) {
    union_name_ = new ::std::string;
  }
  union_name_->assign(value);
}
inline void offical_member_data::set_union_name(const char* value, size_t size) {
  set_has_union_name();
  if (union_name_ == &::google::protobuf::internal::kEmptyString) {
    union_name_ = new ::std::string;
  }
  union_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* offical_member_data::mutable_union_name() {
  set_has_union_name();
  if (union_name_ == &::google::protobuf::internal::kEmptyString) {
    union_name_ = new ::std::string;
  }
  return union_name_;
}
inline ::std::string* offical_member_data::release_union_name() {
  clear_has_union_name();
  if (union_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = union_name_;
    union_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void offical_member_data::set_allocated_union_name(::std::string* union_name) {
  if (union_name_ != &::google::protobuf::internal::kEmptyString) {
    delete union_name_;
  }
  if (union_name) {
    set_has_union_name();
    union_name_ = union_name;
  } else {
    clear_has_union_name();
    union_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 grade = 9;
inline bool offical_member_data::has_grade() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void offical_member_data::set_has_grade() {
  _has_bits_[0] |= 0x00000100u;
}
inline void offical_member_data::clear_has_grade() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void offical_member_data::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 offical_member_data::grade() const {
  return grade_;
}
inline void offical_member_data::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// -------------------------------------------------------------------

// role_show_role_equipped

// optional uint64 show_role_id = 1;
inline bool role_show_role_equipped::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_role_equipped::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_role_equipped::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_role_equipped::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 role_show_role_equipped::show_role_id() const {
  return show_role_id_;
}
inline void role_show_role_equipped::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// -------------------------------------------------------------------

// offical_apply_data

// optional .SProtoSpace.EGrade rank_lv = 1;
inline bool offical_apply_data::has_rank_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_apply_data::set_has_rank_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_apply_data::clear_has_rank_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_apply_data::clear_rank_lv() {
  rank_lv_ = 0;
  clear_has_rank_lv();
}
inline ::SProtoSpace::EGrade offical_apply_data::rank_lv() const {
  return static_cast< ::SProtoSpace::EGrade >(rank_lv_);
}
inline void offical_apply_data::set_rank_lv(::SProtoSpace::EGrade value) {
  assert(::SProtoSpace::EGrade_IsValid(value));
  set_has_rank_lv();
  rank_lv_ = value;
}

// optional uint64 role_id = 2;
inline bool offical_apply_data::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offical_apply_data::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offical_apply_data::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offical_apply_data::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 offical_apply_data::role_id() const {
  return role_id_;
}
inline void offical_apply_data::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool offical_apply_data::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void offical_apply_data::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void offical_apply_data::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void offical_apply_data::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& offical_apply_data::role_name() const {
  return *role_name_;
}
inline void offical_apply_data::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void offical_apply_data::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void offical_apply_data::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* offical_apply_data::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* offical_apply_data::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void offical_apply_data::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string head = 4;
inline bool offical_apply_data::has_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void offical_apply_data::set_has_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void offical_apply_data::clear_has_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void offical_apply_data::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& offical_apply_data::head() const {
  return *head_;
}
inline void offical_apply_data::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void offical_apply_data::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void offical_apply_data::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* offical_apply_data::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* offical_apply_data::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void offical_apply_data::set_allocated_head(::std::string* head) {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (head) {
    set_has_head();
    head_ = head;
  } else {
    clear_has_head();
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 lv = 5;
inline bool offical_apply_data::has_lv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void offical_apply_data::set_has_lv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void offical_apply_data::clear_has_lv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void offical_apply_data::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 offical_apply_data::lv() const {
  return lv_;
}
inline void offical_apply_data::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional uint32 sex = 6;
inline bool offical_apply_data::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void offical_apply_data::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void offical_apply_data::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void offical_apply_data::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 offical_apply_data::sex() const {
  return sex_;
}
inline void offical_apply_data::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 grade = 7;
inline bool offical_apply_data::has_grade() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void offical_apply_data::set_has_grade() {
  _has_bits_[0] |= 0x00000040u;
}
inline void offical_apply_data::clear_has_grade() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void offical_apply_data::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 offical_apply_data::grade() const {
  return grade_;
}
inline void offical_apply_data::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint32 tm = 8;
inline bool offical_apply_data::has_tm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void offical_apply_data::set_has_tm() {
  _has_bits_[0] |= 0x00000080u;
}
inline void offical_apply_data::clear_has_tm() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void offical_apply_data::clear_tm() {
  tm_ = 0u;
  clear_has_tm();
}
inline ::google::protobuf::uint32 offical_apply_data::tm() const {
  return tm_;
}
inline void offical_apply_data::set_tm(::google::protobuf::uint32 value) {
  set_has_tm();
  tm_ = value;
}

// -------------------------------------------------------------------

// offical_apply_my_battle_data

// optional uint64 dest_role_id = 1;
inline bool offical_apply_my_battle_data::has_dest_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_apply_my_battle_data::set_has_dest_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_apply_my_battle_data::clear_has_dest_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_apply_my_battle_data::clear_dest_role_id() {
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dest_role_id();
}
inline ::google::protobuf::uint64 offical_apply_my_battle_data::dest_role_id() const {
  return dest_role_id_;
}
inline void offical_apply_my_battle_data::set_dest_role_id(::google::protobuf::uint64 value) {
  set_has_dest_role_id();
  dest_role_id_ = value;
}

// optional string dest_name = 2;
inline bool offical_apply_my_battle_data::has_dest_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offical_apply_my_battle_data::set_has_dest_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offical_apply_my_battle_data::clear_has_dest_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offical_apply_my_battle_data::clear_dest_name() {
  if (dest_name_ != &::google::protobuf::internal::kEmptyString) {
    dest_name_->clear();
  }
  clear_has_dest_name();
}
inline const ::std::string& offical_apply_my_battle_data::dest_name() const {
  return *dest_name_;
}
inline void offical_apply_my_battle_data::set_dest_name(const ::std::string& value) {
  set_has_dest_name();
  if (dest_name_ == &::google::protobuf::internal::kEmptyString) {
    dest_name_ = new ::std::string;
  }
  dest_name_->assign(value);
}
inline void offical_apply_my_battle_data::set_dest_name(const char* value) {
  set_has_dest_name();
  if (dest_name_ == &::google::protobuf::internal::kEmptyString) {
    dest_name_ = new ::std::string;
  }
  dest_name_->assign(value);
}
inline void offical_apply_my_battle_data::set_dest_name(const char* value, size_t size) {
  set_has_dest_name();
  if (dest_name_ == &::google::protobuf::internal::kEmptyString) {
    dest_name_ = new ::std::string;
  }
  dest_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* offical_apply_my_battle_data::mutable_dest_name() {
  set_has_dest_name();
  if (dest_name_ == &::google::protobuf::internal::kEmptyString) {
    dest_name_ = new ::std::string;
  }
  return dest_name_;
}
inline ::std::string* offical_apply_my_battle_data::release_dest_name() {
  clear_has_dest_name();
  if (dest_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dest_name_;
    dest_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void offical_apply_my_battle_data::set_allocated_dest_name(::std::string* dest_name) {
  if (dest_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_name_;
  }
  if (dest_name) {
    set_has_dest_name();
    dest_name_ = dest_name;
  } else {
    clear_has_dest_name();
    dest_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string dest_head = 3;
inline bool offical_apply_my_battle_data::has_dest_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void offical_apply_my_battle_data::set_has_dest_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void offical_apply_my_battle_data::clear_has_dest_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void offical_apply_my_battle_data::clear_dest_head() {
  if (dest_head_ != &::google::protobuf::internal::kEmptyString) {
    dest_head_->clear();
  }
  clear_has_dest_head();
}
inline const ::std::string& offical_apply_my_battle_data::dest_head() const {
  return *dest_head_;
}
inline void offical_apply_my_battle_data::set_dest_head(const ::std::string& value) {
  set_has_dest_head();
  if (dest_head_ == &::google::protobuf::internal::kEmptyString) {
    dest_head_ = new ::std::string;
  }
  dest_head_->assign(value);
}
inline void offical_apply_my_battle_data::set_dest_head(const char* value) {
  set_has_dest_head();
  if (dest_head_ == &::google::protobuf::internal::kEmptyString) {
    dest_head_ = new ::std::string;
  }
  dest_head_->assign(value);
}
inline void offical_apply_my_battle_data::set_dest_head(const char* value, size_t size) {
  set_has_dest_head();
  if (dest_head_ == &::google::protobuf::internal::kEmptyString) {
    dest_head_ = new ::std::string;
  }
  dest_head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* offical_apply_my_battle_data::mutable_dest_head() {
  set_has_dest_head();
  if (dest_head_ == &::google::protobuf::internal::kEmptyString) {
    dest_head_ = new ::std::string;
  }
  return dest_head_;
}
inline ::std::string* offical_apply_my_battle_data::release_dest_head() {
  clear_has_dest_head();
  if (dest_head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dest_head_;
    dest_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void offical_apply_my_battle_data::set_allocated_dest_head(::std::string* dest_head) {
  if (dest_head_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_head_;
  }
  if (dest_head) {
    set_has_dest_head();
    dest_head_ = dest_head;
  } else {
    clear_has_dest_head();
    dest_head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 sex = 4;
inline bool offical_apply_my_battle_data::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void offical_apply_my_battle_data::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void offical_apply_my_battle_data::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void offical_apply_my_battle_data::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 offical_apply_my_battle_data::sex() const {
  return sex_;
}
inline void offical_apply_my_battle_data::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 score = 5;
inline bool offical_apply_my_battle_data::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void offical_apply_my_battle_data::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void offical_apply_my_battle_data::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void offical_apply_my_battle_data::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 offical_apply_my_battle_data::score() const {
  return score_;
}
inline void offical_apply_my_battle_data::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional bool win = 6;
inline bool offical_apply_my_battle_data::has_win() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void offical_apply_my_battle_data::set_has_win() {
  _has_bits_[0] |= 0x00000020u;
}
inline void offical_apply_my_battle_data::clear_has_win() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void offical_apply_my_battle_data::clear_win() {
  win_ = false;
  clear_has_win();
}
inline bool offical_apply_my_battle_data::win() const {
  return win_;
}
inline void offical_apply_my_battle_data::set_win(bool value) {
  set_has_win();
  win_ = value;
}

// optional int32 grade = 7;
inline bool offical_apply_my_battle_data::has_grade() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void offical_apply_my_battle_data::set_has_grade() {
  _has_bits_[0] |= 0x00000040u;
}
inline void offical_apply_my_battle_data::clear_has_grade() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void offical_apply_my_battle_data::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 offical_apply_my_battle_data::grade() const {
  return grade_;
}
inline void offical_apply_my_battle_data::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// optional int32 place_id = 8;
inline bool offical_apply_my_battle_data::has_place_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void offical_apply_my_battle_data::set_has_place_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void offical_apply_my_battle_data::clear_has_place_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void offical_apply_my_battle_data::clear_place_id() {
  place_id_ = 0;
  clear_has_place_id();
}
inline ::google::protobuf::int32 offical_apply_my_battle_data::place_id() const {
  return place_id_;
}
inline void offical_apply_my_battle_data::set_place_id(::google::protobuf::int32 value) {
  set_has_place_id();
  place_id_ = value;
}

// optional int32 fight_power = 9;
inline bool offical_apply_my_battle_data::has_fight_power() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void offical_apply_my_battle_data::set_has_fight_power() {
  _has_bits_[0] |= 0x00000100u;
}
inline void offical_apply_my_battle_data::clear_has_fight_power() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void offical_apply_my_battle_data::clear_fight_power() {
  fight_power_ = 0;
  clear_has_fight_power();
}
inline ::google::protobuf::int32 offical_apply_my_battle_data::fight_power() const {
  return fight_power_;
}
inline void offical_apply_my_battle_data::set_fight_power(::google::protobuf::int32 value) {
  set_has_fight_power();
  fight_power_ = value;
}

// optional int32 level = 10;
inline bool offical_apply_my_battle_data::has_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void offical_apply_my_battle_data::set_has_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void offical_apply_my_battle_data::clear_has_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void offical_apply_my_battle_data::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 offical_apply_my_battle_data::level() const {
  return level_;
}
inline void offical_apply_my_battle_data::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// offical_apply_battle_data

// optional .SProtoSpace.EGrade rank_lv = 1;
inline bool offical_apply_battle_data::has_rank_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_apply_battle_data::set_has_rank_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_apply_battle_data::clear_has_rank_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_apply_battle_data::clear_rank_lv() {
  rank_lv_ = 0;
  clear_has_rank_lv();
}
inline ::SProtoSpace::EGrade offical_apply_battle_data::rank_lv() const {
  return static_cast< ::SProtoSpace::EGrade >(rank_lv_);
}
inline void offical_apply_battle_data::set_rank_lv(::SProtoSpace::EGrade value) {
  assert(::SProtoSpace::EGrade_IsValid(value));
  set_has_rank_lv();
  rank_lv_ = value;
}

// optional uint32 ranking_id = 2;
inline bool offical_apply_battle_data::has_ranking_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offical_apply_battle_data::set_has_ranking_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offical_apply_battle_data::clear_has_ranking_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offical_apply_battle_data::clear_ranking_id() {
  ranking_id_ = 0u;
  clear_has_ranking_id();
}
inline ::google::protobuf::uint32 offical_apply_battle_data::ranking_id() const {
  return ranking_id_;
}
inline void offical_apply_battle_data::set_ranking_id(::google::protobuf::uint32 value) {
  set_has_ranking_id();
  ranking_id_ = value;
}

// optional uint64 role_id = 3;
inline bool offical_apply_battle_data::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void offical_apply_battle_data::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void offical_apply_battle_data::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void offical_apply_battle_data::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 offical_apply_battle_data::role_id() const {
  return role_id_;
}
inline void offical_apply_battle_data::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 sex = 4;
inline bool offical_apply_battle_data::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void offical_apply_battle_data::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void offical_apply_battle_data::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void offical_apply_battle_data::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 offical_apply_battle_data::sex() const {
  return sex_;
}
inline void offical_apply_battle_data::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional string role_name = 5;
inline bool offical_apply_battle_data::has_role_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void offical_apply_battle_data::set_has_role_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void offical_apply_battle_data::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void offical_apply_battle_data::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& offical_apply_battle_data::role_name() const {
  return *role_name_;
}
inline void offical_apply_battle_data::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void offical_apply_battle_data::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void offical_apply_battle_data::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* offical_apply_battle_data::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* offical_apply_battle_data::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void offical_apply_battle_data::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 win_num = 6;
inline bool offical_apply_battle_data::has_win_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void offical_apply_battle_data::set_has_win_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void offical_apply_battle_data::clear_has_win_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void offical_apply_battle_data::clear_win_num() {
  win_num_ = 0u;
  clear_has_win_num();
}
inline ::google::protobuf::uint32 offical_apply_battle_data::win_num() const {
  return win_num_;
}
inline void offical_apply_battle_data::set_win_num(::google::protobuf::uint32 value) {
  set_has_win_num();
  win_num_ = value;
}

// optional uint32 failed_num = 7;
inline bool offical_apply_battle_data::has_failed_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void offical_apply_battle_data::set_has_failed_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void offical_apply_battle_data::clear_has_failed_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void offical_apply_battle_data::clear_failed_num() {
  failed_num_ = 0u;
  clear_has_failed_num();
}
inline ::google::protobuf::uint32 offical_apply_battle_data::failed_num() const {
  return failed_num_;
}
inline void offical_apply_battle_data::set_failed_num(::google::protobuf::uint32 value) {
  set_has_failed_num();
  failed_num_ = value;
}

// optional uint32 score = 8;
inline bool offical_apply_battle_data::has_score() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void offical_apply_battle_data::set_has_score() {
  _has_bits_[0] |= 0x00000080u;
}
inline void offical_apply_battle_data::clear_has_score() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void offical_apply_battle_data::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 offical_apply_battle_data::score() const {
  return score_;
}
inline void offical_apply_battle_data::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// optional bool admit = 9;
inline bool offical_apply_battle_data::has_admit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void offical_apply_battle_data::set_has_admit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void offical_apply_battle_data::clear_has_admit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void offical_apply_battle_data::clear_admit() {
  admit_ = false;
  clear_has_admit();
}
inline bool offical_apply_battle_data::admit() const {
  return admit_;
}
inline void offical_apply_battle_data::set_admit(bool value) {
  set_has_admit();
  admit_ = value;
}

// -------------------------------------------------------------------

// rank_base_item

// optional uint64 id = 1;
inline bool rank_base_item::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rank_base_item::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rank_base_item::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rank_base_item::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 rank_base_item::id() const {
  return id_;
}
inline void rank_base_item::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool rank_base_item::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rank_base_item::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rank_base_item::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rank_base_item::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& rank_base_item::name() const {
  return *name_;
}
inline void rank_base_item::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void rank_base_item::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void rank_base_item::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* rank_base_item::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* rank_base_item::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void rank_base_item::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string head = 3;
inline bool rank_base_item::has_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rank_base_item::set_has_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rank_base_item::clear_has_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rank_base_item::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& rank_base_item::head() const {
  return *head_;
}
inline void rank_base_item::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void rank_base_item::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void rank_base_item::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* rank_base_item::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* rank_base_item::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void rank_base_item::set_allocated_head(::std::string* head) {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (head) {
    set_has_head();
    head_ = head;
  } else {
    clear_has_head();
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 lv = 4;
inline bool rank_base_item::has_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rank_base_item::set_has_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rank_base_item::clear_has_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rank_base_item::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 rank_base_item::lv() const {
  return lv_;
}
inline void rank_base_item::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional uint32 sex = 5;
inline bool rank_base_item::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void rank_base_item::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void rank_base_item::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void rank_base_item::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 rank_base_item::sex() const {
  return sex_;
}
inline void rank_base_item::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 grade = 6;
inline bool rank_base_item::has_grade() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void rank_base_item::set_has_grade() {
  _has_bits_[0] |= 0x00000020u;
}
inline void rank_base_item::clear_has_grade() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void rank_base_item::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 rank_base_item::grade() const {
  return grade_;
}
inline void rank_base_item::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint32 avatar_box = 7;
inline bool rank_base_item::has_avatar_box() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void rank_base_item::set_has_avatar_box() {
  _has_bits_[0] |= 0x00000040u;
}
inline void rank_base_item::clear_has_avatar_box() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void rank_base_item::clear_avatar_box() {
  avatar_box_ = 0u;
  clear_has_avatar_box();
}
inline ::google::protobuf::uint32 rank_base_item::avatar_box() const {
  return avatar_box_;
}
inline void rank_base_item::set_avatar_box(::google::protobuf::uint32 value) {
  set_has_avatar_box();
  avatar_box_ = value;
}

// -------------------------------------------------------------------

// rank_common_item

// optional uint32 place_id = 1;
inline bool rank_common_item::has_place_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rank_common_item::set_has_place_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rank_common_item::clear_has_place_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rank_common_item::clear_place_id() {
  place_id_ = 0u;
  clear_has_place_id();
}
inline ::google::protobuf::uint32 rank_common_item::place_id() const {
  return place_id_;
}
inline void rank_common_item::set_place_id(::google::protobuf::uint32 value) {
  set_has_place_id();
  place_id_ = value;
}

// optional uint32 value = 2;
inline bool rank_common_item::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rank_common_item::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rank_common_item::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rank_common_item::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 rank_common_item::value() const {
  return value_;
}
inline void rank_common_item::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// optional .SProtoSpace.rank_base_item base_data = 3;
inline bool rank_common_item::has_base_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rank_common_item::set_has_base_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rank_common_item::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rank_common_item::clear_base_data() {
  if (base_data_ != NULL) base_data_->::SProtoSpace::rank_base_item::Clear();
  clear_has_base_data();
}
inline const ::SProtoSpace::rank_base_item& rank_common_item::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::SProtoSpace::rank_base_item* rank_common_item::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::SProtoSpace::rank_base_item;
  return base_data_;
}
inline ::SProtoSpace::rank_base_item* rank_common_item::release_base_data() {
  clear_has_base_data();
  ::SProtoSpace::rank_base_item* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void rank_common_item::set_allocated_base_data(::SProtoSpace::rank_base_item* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// -------------------------------------------------------------------

// public_role_base_info

// optional uint64 id = 1;
inline bool public_role_base_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void public_role_base_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void public_role_base_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void public_role_base_info::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 public_role_base_info::id() const {
  return id_;
}
inline void public_role_base_info::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool public_role_base_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void public_role_base_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void public_role_base_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void public_role_base_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& public_role_base_info::name() const {
  return *name_;
}
inline void public_role_base_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void public_role_base_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void public_role_base_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* public_role_base_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* public_role_base_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void public_role_base_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string head = 3;
inline bool public_role_base_info::has_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void public_role_base_info::set_has_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void public_role_base_info::clear_has_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void public_role_base_info::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& public_role_base_info::head() const {
  return *head_;
}
inline void public_role_base_info::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void public_role_base_info::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void public_role_base_info::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* public_role_base_info::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* public_role_base_info::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void public_role_base_info::set_allocated_head(::std::string* head) {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (head) {
    set_has_head();
    head_ = head;
  } else {
    clear_has_head();
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 lv = 4;
inline bool public_role_base_info::has_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void public_role_base_info::set_has_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void public_role_base_info::clear_has_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void public_role_base_info::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 public_role_base_info::lv() const {
  return lv_;
}
inline void public_role_base_info::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional uint32 sex = 5;
inline bool public_role_base_info::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void public_role_base_info::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void public_role_base_info::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void public_role_base_info::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 public_role_base_info::sex() const {
  return sex_;
}
inline void public_role_base_info::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 grade = 6;
inline bool public_role_base_info::has_grade() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void public_role_base_info::set_has_grade() {
  _has_bits_[0] |= 0x00000020u;
}
inline void public_role_base_info::clear_has_grade() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void public_role_base_info::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 public_role_base_info::grade() const {
  return grade_;
}
inline void public_role_base_info::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional int32 border = 7;
inline bool public_role_base_info::has_border() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void public_role_base_info::set_has_border() {
  _has_bits_[0] |= 0x00000040u;
}
inline void public_role_base_info::clear_has_border() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void public_role_base_info::clear_border() {
  border_ = 0;
  clear_has_border();
}
inline ::google::protobuf::int32 public_role_base_info::border() const {
  return border_;
}
inline void public_role_base_info::set_border(::google::protobuf::int32 value) {
  set_has_border();
  border_ = value;
}

// optional uint64 fight_power = 8;
inline bool public_role_base_info::has_fight_power() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void public_role_base_info::set_has_fight_power() {
  _has_bits_[0] |= 0x00000080u;
}
inline void public_role_base_info::clear_has_fight_power() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void public_role_base_info::clear_fight_power() {
  fight_power_ = GOOGLE_ULONGLONG(0);
  clear_has_fight_power();
}
inline ::google::protobuf::uint64 public_role_base_info::fight_power() const {
  return fight_power_;
}
inline void public_role_base_info::set_fight_power(::google::protobuf::uint64 value) {
  set_has_fight_power();
  fight_power_ = value;
}

// -------------------------------------------------------------------

// role_base_3part

// optional .SProtoSpace.public_role_base_info base = 1;
inline bool role_base_3part::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_base_3part::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_base_3part::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_base_3part::clear_base() {
  if (base_ != NULL) base_->::SProtoSpace::public_role_base_info::Clear();
  clear_has_base();
}
inline const ::SProtoSpace::public_role_base_info& role_base_3part::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::SProtoSpace::public_role_base_info* role_base_3part::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::SProtoSpace::public_role_base_info;
  return base_;
}
inline ::SProtoSpace::public_role_base_info* role_base_3part::release_base() {
  clear_has_base();
  ::SProtoSpace::public_role_base_info* temp = base_;
  base_ = NULL;
  return temp;
}
inline void role_base_3part::set_allocated_base(::SProtoSpace::public_role_base_info* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
}

// -------------------------------------------------------------------

// coordinate

// optional int32 x = 1;
inline bool coordinate::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void coordinate::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void coordinate::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void coordinate::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 coordinate::x() const {
  return x_;
}
inline void coordinate::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional int32 y = 2;
inline bool coordinate::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void coordinate::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void coordinate::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void coordinate::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 coordinate::y() const {
  return y_;
}
inline void coordinate::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// role_position

// optional uint64 id = 1;
inline bool role_position::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_position::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_position::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_position::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 role_position::id() const {
  return id_;
}
inline void role_position::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional .SProtoSpace.coordinate pos = 2;
inline bool role_position::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_position::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_position::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_position::clear_pos() {
  if (pos_ != NULL) pos_->::SProtoSpace::coordinate::Clear();
  clear_has_pos();
}
inline const ::SProtoSpace::coordinate& role_position::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::SProtoSpace::coordinate* role_position::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::SProtoSpace::coordinate;
  return pos_;
}
inline ::SProtoSpace::coordinate* role_position::release_pos() {
  clear_has_pos();
  ::SProtoSpace::coordinate* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void role_position::set_allocated_pos(::SProtoSpace::coordinate* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// -------------------------------------------------------------------

// role_move

// optional uint64 id = 1;
inline bool role_move::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_move::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_move::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_move::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 role_move::id() const {
  return id_;
}
inline void role_move::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional .SProtoSpace.coordinate sour_pos = 2;
inline bool role_move::has_sour_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_move::set_has_sour_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_move::clear_has_sour_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_move::clear_sour_pos() {
  if (sour_pos_ != NULL) sour_pos_->::SProtoSpace::coordinate::Clear();
  clear_has_sour_pos();
}
inline const ::SProtoSpace::coordinate& role_move::sour_pos() const {
  return sour_pos_ != NULL ? *sour_pos_ : *default_instance_->sour_pos_;
}
inline ::SProtoSpace::coordinate* role_move::mutable_sour_pos() {
  set_has_sour_pos();
  if (sour_pos_ == NULL) sour_pos_ = new ::SProtoSpace::coordinate;
  return sour_pos_;
}
inline ::SProtoSpace::coordinate* role_move::release_sour_pos() {
  clear_has_sour_pos();
  ::SProtoSpace::coordinate* temp = sour_pos_;
  sour_pos_ = NULL;
  return temp;
}
inline void role_move::set_allocated_sour_pos(::SProtoSpace::coordinate* sour_pos) {
  delete sour_pos_;
  sour_pos_ = sour_pos;
  if (sour_pos) {
    set_has_sour_pos();
  } else {
    clear_has_sour_pos();
  }
}

// optional .SProtoSpace.coordinate dest_pos = 3;
inline bool role_move::has_dest_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_move::set_has_dest_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_move::clear_has_dest_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_move::clear_dest_pos() {
  if (dest_pos_ != NULL) dest_pos_->::SProtoSpace::coordinate::Clear();
  clear_has_dest_pos();
}
inline const ::SProtoSpace::coordinate& role_move::dest_pos() const {
  return dest_pos_ != NULL ? *dest_pos_ : *default_instance_->dest_pos_;
}
inline ::SProtoSpace::coordinate* role_move::mutable_dest_pos() {
  set_has_dest_pos();
  if (dest_pos_ == NULL) dest_pos_ = new ::SProtoSpace::coordinate;
  return dest_pos_;
}
inline ::SProtoSpace::coordinate* role_move::release_dest_pos() {
  clear_has_dest_pos();
  ::SProtoSpace::coordinate* temp = dest_pos_;
  dest_pos_ = NULL;
  return temp;
}
inline void role_move::set_allocated_dest_pos(::SProtoSpace::coordinate* dest_pos) {
  delete dest_pos_;
  dest_pos_ = dest_pos;
  if (dest_pos) {
    set_has_dest_pos();
  } else {
    clear_has_dest_pos();
  }
}

// -------------------------------------------------------------------

// chat_room_state

// optional int32 room_id = 1;
inline bool chat_room_state::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chat_room_state::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chat_room_state::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chat_room_state::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 chat_room_state::room_id() const {
  return room_id_;
}
inline void chat_room_state::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional string room_name = 2;
inline bool chat_room_state::has_room_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chat_room_state::set_has_room_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chat_room_state::clear_has_room_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chat_room_state::clear_room_name() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    room_name_->clear();
  }
  clear_has_room_name();
}
inline const ::std::string& chat_room_state::room_name() const {
  return *room_name_;
}
inline void chat_room_state::set_room_name(const ::std::string& value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void chat_room_state::set_room_name(const char* value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void chat_room_state::set_room_name(const char* value, size_t size) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chat_room_state::mutable_room_name() {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}
inline ::std::string* chat_room_state::release_room_name() {
  clear_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = room_name_;
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chat_room_state::set_allocated_room_name(::std::string* room_name) {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (room_name) {
    set_has_room_name();
    room_name_ = room_name;
  } else {
    clear_has_room_name();
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 sexs = 3;
inline int chat_room_state::sexs_size() const {
  return sexs_.size();
}
inline void chat_room_state::clear_sexs() {
  sexs_.Clear();
}
inline ::google::protobuf::int32 chat_room_state::sexs(int index) const {
  return sexs_.Get(index);
}
inline void chat_room_state::set_sexs(int index, ::google::protobuf::int32 value) {
  sexs_.Set(index, value);
}
inline void chat_room_state::add_sexs(::google::protobuf::int32 value) {
  sexs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
chat_room_state::sexs() const {
  return sexs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
chat_room_state::mutable_sexs() {
  return &sexs_;
}

// optional bool token = 4;
inline bool chat_room_state::has_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chat_room_state::set_has_token() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chat_room_state::clear_has_token() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chat_room_state::clear_token() {
  token_ = false;
  clear_has_token();
}
inline bool chat_room_state::token() const {
  return token_;
}
inline void chat_room_state::set_token(bool value) {
  set_has_token();
  token_ = value;
}

// optional int32 conf_id = 5;
inline bool chat_room_state::has_conf_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void chat_room_state::set_has_conf_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void chat_room_state::clear_has_conf_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void chat_room_state::clear_conf_id() {
  conf_id_ = 0;
  clear_has_conf_id();
}
inline ::google::protobuf::int32 chat_room_state::conf_id() const {
  return conf_id_;
}
inline void chat_room_state::set_conf_id(::google::protobuf::int32 value) {
  set_has_conf_id();
  conf_id_ = value;
}

// optional bool top = 6;
inline bool chat_room_state::has_top() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void chat_room_state::set_has_top() {
  _has_bits_[0] |= 0x00000020u;
}
inline void chat_room_state::clear_has_top() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void chat_room_state::clear_top() {
  top_ = false;
  clear_has_top();
}
inline bool chat_room_state::top() const {
  return top_;
}
inline void chat_room_state::set_top(bool value) {
  set_has_top();
  top_ = value;
}

// -------------------------------------------------------------------

// plot_screen_info

// optional uint32 chapter_id = 1;
inline bool plot_screen_info::has_chapter_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void plot_screen_info::set_has_chapter_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void plot_screen_info::clear_has_chapter_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void plot_screen_info::clear_chapter_id() {
  chapter_id_ = 0u;
  clear_has_chapter_id();
}
inline ::google::protobuf::uint32 plot_screen_info::chapter_id() const {
  return chapter_id_;
}
inline void plot_screen_info::set_chapter_id(::google::protobuf::uint32 value) {
  set_has_chapter_id();
  chapter_id_ = value;
}

// optional uint32 screen_id = 2;
inline bool plot_screen_info::has_screen_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void plot_screen_info::set_has_screen_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void plot_screen_info::clear_has_screen_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void plot_screen_info::clear_screen_id() {
  screen_id_ = 0u;
  clear_has_screen_id();
}
inline ::google::protobuf::uint32 plot_screen_info::screen_id() const {
  return screen_id_;
}
inline void plot_screen_info::set_screen_id(::google::protobuf::uint32 value) {
  set_has_screen_id();
  screen_id_ = value;
}

// repeated uint32 section_ids = 3;
inline int plot_screen_info::section_ids_size() const {
  return section_ids_.size();
}
inline void plot_screen_info::clear_section_ids() {
  section_ids_.Clear();
}
inline ::google::protobuf::uint32 plot_screen_info::section_ids(int index) const {
  return section_ids_.Get(index);
}
inline void plot_screen_info::set_section_ids(int index, ::google::protobuf::uint32 value) {
  section_ids_.Set(index, value);
}
inline void plot_screen_info::add_section_ids(::google::protobuf::uint32 value) {
  section_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
plot_screen_info::section_ids() const {
  return section_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
plot_screen_info::mutable_section_ids() {
  return &section_ids_;
}

// -------------------------------------------------------------------

// add_character_attr_info

// optional .SProtoSpace.ECHARACTER_ATTRIBUTE_TYPE type = 1;
inline bool add_character_attr_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void add_character_attr_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void add_character_attr_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void add_character_attr_info::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::SProtoSpace::ECHARACTER_ATTRIBUTE_TYPE add_character_attr_info::type() const {
  return static_cast< ::SProtoSpace::ECHARACTER_ATTRIBUTE_TYPE >(type_);
}
inline void add_character_attr_info::set_type(::SProtoSpace::ECHARACTER_ATTRIBUTE_TYPE value) {
  assert(::SProtoSpace::ECHARACTER_ATTRIBUTE_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 change_value = 2;
inline bool add_character_attr_info::has_change_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void add_character_attr_info::set_has_change_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void add_character_attr_info::clear_has_change_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void add_character_attr_info::clear_change_value() {
  change_value_ = 0;
  clear_has_change_value();
}
inline ::google::protobuf::int32 add_character_attr_info::change_value() const {
  return change_value_;
}
inline void add_character_attr_info::set_change_value(::google::protobuf::int32 value) {
  set_has_change_value();
  change_value_ = value;
}

// -------------------------------------------------------------------

// add_royal_value_info

// optional uint32 npc_id = 1;
inline bool add_royal_value_info::has_npc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void add_royal_value_info::set_has_npc_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void add_royal_value_info::clear_has_npc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void add_royal_value_info::clear_npc_id() {
  npc_id_ = 0u;
  clear_has_npc_id();
}
inline ::google::protobuf::uint32 add_royal_value_info::npc_id() const {
  return npc_id_;
}
inline void add_royal_value_info::set_npc_id(::google::protobuf::uint32 value) {
  set_has_npc_id();
  npc_id_ = value;
}

// optional int32 change_value = 2;
inline bool add_royal_value_info::has_change_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void add_royal_value_info::set_has_change_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void add_royal_value_info::clear_has_change_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void add_royal_value_info::clear_change_value() {
  change_value_ = 0;
  clear_has_change_value();
}
inline ::google::protobuf::int32 add_royal_value_info::change_value() const {
  return change_value_;
}
inline void add_royal_value_info::set_change_value(::google::protobuf::int32 value) {
  set_has_change_value();
  change_value_ = value;
}

// -------------------------------------------------------------------

// character_attr_info

// optional .SProtoSpace.ECHARACTER_ATTRIBUTE_TYPE type = 1;
inline bool character_attr_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void character_attr_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void character_attr_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void character_attr_info::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::SProtoSpace::ECHARACTER_ATTRIBUTE_TYPE character_attr_info::type() const {
  return static_cast< ::SProtoSpace::ECHARACTER_ATTRIBUTE_TYPE >(type_);
}
inline void character_attr_info::set_type(::SProtoSpace::ECHARACTER_ATTRIBUTE_TYPE value) {
  assert(::SProtoSpace::ECHARACTER_ATTRIBUTE_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 current_value = 2;
inline bool character_attr_info::has_current_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void character_attr_info::set_has_current_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void character_attr_info::clear_has_current_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void character_attr_info::clear_current_value() {
  current_value_ = 0;
  clear_has_current_value();
}
inline ::google::protobuf::int32 character_attr_info::current_value() const {
  return current_value_;
}
inline void character_attr_info::set_current_value(::google::protobuf::int32 value) {
  set_has_current_value();
  current_value_ = value;
}

// -------------------------------------------------------------------

// itemid_and_num

// optional uint32 item_id = 1;
inline bool itemid_and_num::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void itemid_and_num::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void itemid_and_num::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void itemid_and_num::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 itemid_and_num::item_id() const {
  return item_id_;
}
inline void itemid_and_num::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint32 item_count = 2;
inline bool itemid_and_num::has_item_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void itemid_and_num::set_has_item_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void itemid_and_num::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void itemid_and_num::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
inline ::google::protobuf::uint32 itemid_and_num::item_count() const {
  return item_count_;
}
inline void itemid_and_num::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
}

// -------------------------------------------------------------------

// mail_attach

// optional int32 item_config_id = 1;
inline bool mail_attach::has_item_config_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_attach::set_has_item_config_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_attach::clear_has_item_config_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_attach::clear_item_config_id() {
  item_config_id_ = 0;
  clear_has_item_config_id();
}
inline ::google::protobuf::int32 mail_attach::item_config_id() const {
  return item_config_id_;
}
inline void mail_attach::set_item_config_id(::google::protobuf::int32 value) {
  set_has_item_config_id();
  item_config_id_ = value;
}

// optional int32 item_count = 2;
inline bool mail_attach::has_item_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_attach::set_has_item_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_attach::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_attach::clear_item_count() {
  item_count_ = 0;
  clear_has_item_count();
}
inline ::google::protobuf::int32 mail_attach::item_count() const {
  return item_count_;
}
inline void mail_attach::set_item_count(::google::protobuf::int32 value) {
  set_has_item_count();
  item_count_ = value;
}

// -------------------------------------------------------------------

// mail_instance_attaches

// repeated .SProtoSpace.mail_attach attachments = 1;
inline int mail_instance_attaches::attachments_size() const {
  return attachments_.size();
}
inline void mail_instance_attaches::clear_attachments() {
  attachments_.Clear();
}
inline const ::SProtoSpace::mail_attach& mail_instance_attaches::attachments(int index) const {
  return attachments_.Get(index);
}
inline ::SProtoSpace::mail_attach* mail_instance_attaches::mutable_attachments(int index) {
  return attachments_.Mutable(index);
}
inline ::SProtoSpace::mail_attach* mail_instance_attaches::add_attachments() {
  return attachments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::mail_attach >&
mail_instance_attaches::attachments() const {
  return attachments_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::mail_attach >*
mail_instance_attaches::mutable_attachments() {
  return &attachments_;
}

// -------------------------------------------------------------------

// mail_instance

// optional uint64 mail_instance_id = 1;
inline bool mail_instance::has_mail_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_instance::set_has_mail_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_instance::clear_has_mail_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_instance::clear_mail_instance_id() {
  mail_instance_id_ = GOOGLE_ULONGLONG(0);
  clear_has_mail_instance_id();
}
inline ::google::protobuf::uint64 mail_instance::mail_instance_id() const {
  return mail_instance_id_;
}
inline void mail_instance::set_mail_instance_id(::google::protobuf::uint64 value) {
  set_has_mail_instance_id();
  mail_instance_id_ = value;
}

// optional int32 mail_config_id = 2;
inline bool mail_instance::has_mail_config_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_instance::set_has_mail_config_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_instance::clear_has_mail_config_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_instance::clear_mail_config_id() {
  mail_config_id_ = 0;
  clear_has_mail_config_id();
}
inline ::google::protobuf::int32 mail_instance::mail_config_id() const {
  return mail_config_id_;
}
inline void mail_instance::set_mail_config_id(::google::protobuf::int32 value) {
  set_has_mail_config_id();
  mail_config_id_ = value;
}

// optional .SProtoSpace.eMailPriority priotity = 3;
inline bool mail_instance::has_priotity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mail_instance::set_has_priotity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mail_instance::clear_has_priotity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mail_instance::clear_priotity() {
  priotity_ = 0;
  clear_has_priotity();
}
inline ::SProtoSpace::eMailPriority mail_instance::priotity() const {
  return static_cast< ::SProtoSpace::eMailPriority >(priotity_);
}
inline void mail_instance::set_priotity(::SProtoSpace::eMailPriority value) {
  assert(::SProtoSpace::eMailPriority_IsValid(value));
  set_has_priotity();
  priotity_ = value;
}

// optional uint64 to_role_id = 4;
inline bool mail_instance::has_to_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mail_instance::set_has_to_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mail_instance::clear_has_to_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mail_instance::clear_to_role_id() {
  to_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_role_id();
}
inline ::google::protobuf::uint64 mail_instance::to_role_id() const {
  return to_role_id_;
}
inline void mail_instance::set_to_role_id(::google::protobuf::uint64 value) {
  set_has_to_role_id();
  to_role_id_ = value;
}

// optional uint64 from_role_id = 5;
inline bool mail_instance::has_from_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mail_instance::set_has_from_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mail_instance::clear_has_from_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mail_instance::clear_from_role_id() {
  from_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_role_id();
}
inline ::google::protobuf::uint64 mail_instance::from_role_id() const {
  return from_role_id_;
}
inline void mail_instance::set_from_role_id(::google::protobuf::uint64 value) {
  set_has_from_role_id();
  from_role_id_ = value;
}

// optional string title = 6;
inline bool mail_instance::has_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mail_instance::set_has_title() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mail_instance::clear_has_title() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mail_instance::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& mail_instance::title() const {
  return *title_;
}
inline void mail_instance::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void mail_instance::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void mail_instance::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_instance::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* mail_instance::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_instance::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 7;
inline bool mail_instance::has_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mail_instance::set_has_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mail_instance::clear_has_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mail_instance::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& mail_instance::content() const {
  return *content_;
}
inline void mail_instance::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void mail_instance::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void mail_instance::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_instance::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* mail_instance::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_instance::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .SProtoSpace.mail_instance_attaches attachments = 8;
inline bool mail_instance::has_attachments() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mail_instance::set_has_attachments() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mail_instance::clear_has_attachments() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mail_instance::clear_attachments() {
  if (attachments_ != NULL) attachments_->::SProtoSpace::mail_instance_attaches::Clear();
  clear_has_attachments();
}
inline const ::SProtoSpace::mail_instance_attaches& mail_instance::attachments() const {
  return attachments_ != NULL ? *attachments_ : *default_instance_->attachments_;
}
inline ::SProtoSpace::mail_instance_attaches* mail_instance::mutable_attachments() {
  set_has_attachments();
  if (attachments_ == NULL) attachments_ = new ::SProtoSpace::mail_instance_attaches;
  return attachments_;
}
inline ::SProtoSpace::mail_instance_attaches* mail_instance::release_attachments() {
  clear_has_attachments();
  ::SProtoSpace::mail_instance_attaches* temp = attachments_;
  attachments_ = NULL;
  return temp;
}
inline void mail_instance::set_allocated_attachments(::SProtoSpace::mail_instance_attaches* attachments) {
  delete attachments_;
  attachments_ = attachments;
  if (attachments) {
    set_has_attachments();
  } else {
    clear_has_attachments();
  }
}

// optional bool is_read = 9;
inline bool mail_instance::has_is_read() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mail_instance::set_has_is_read() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mail_instance::clear_has_is_read() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mail_instance::clear_is_read() {
  is_read_ = false;
  clear_has_is_read();
}
inline bool mail_instance::is_read() const {
  return is_read_;
}
inline void mail_instance::set_is_read(bool value) {
  set_has_is_read();
  is_read_ = value;
}

// optional bool is_get_attach = 10;
inline bool mail_instance::has_is_get_attach() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void mail_instance::set_has_is_get_attach() {
  _has_bits_[0] |= 0x00000200u;
}
inline void mail_instance::clear_has_is_get_attach() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void mail_instance::clear_is_get_attach() {
  is_get_attach_ = false;
  clear_has_is_get_attach();
}
inline bool mail_instance::is_get_attach() const {
  return is_get_attach_;
}
inline void mail_instance::set_is_get_attach(bool value) {
  set_has_is_get_attach();
  is_get_attach_ = value;
}

// optional uint64 invalid_utc_time = 11;
inline bool mail_instance::has_invalid_utc_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void mail_instance::set_has_invalid_utc_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void mail_instance::clear_has_invalid_utc_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void mail_instance::clear_invalid_utc_time() {
  invalid_utc_time_ = GOOGLE_ULONGLONG(0);
  clear_has_invalid_utc_time();
}
inline ::google::protobuf::uint64 mail_instance::invalid_utc_time() const {
  return invalid_utc_time_;
}
inline void mail_instance::set_invalid_utc_time(::google::protobuf::uint64 value) {
  set_has_invalid_utc_time();
  invalid_utc_time_ = value;
}

// optional uint64 mail_templet_id = 12;
inline bool mail_instance::has_mail_templet_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void mail_instance::set_has_mail_templet_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void mail_instance::clear_has_mail_templet_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void mail_instance::clear_mail_templet_id() {
  mail_templet_id_ = GOOGLE_ULONGLONG(0);
  clear_has_mail_templet_id();
}
inline ::google::protobuf::uint64 mail_instance::mail_templet_id() const {
  return mail_templet_id_;
}
inline void mail_instance::set_mail_templet_id(::google::protobuf::uint64 value) {
  set_has_mail_templet_id();
  mail_templet_id_ = value;
}

// optional .SProtoSpace.eMailServerType server_type = 13;
inline bool mail_instance::has_server_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void mail_instance::set_has_server_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void mail_instance::clear_has_server_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void mail_instance::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
inline ::SProtoSpace::eMailServerType mail_instance::server_type() const {
  return static_cast< ::SProtoSpace::eMailServerType >(server_type_);
}
inline void mail_instance::set_server_type(::SProtoSpace::eMailServerType value) {
  assert(::SProtoSpace::eMailServerType_IsValid(value));
  set_has_server_type();
  server_type_ = value;
}

// optional .SProtoSpace.eMailClientType client_type = 14;
inline bool mail_instance::has_client_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void mail_instance::set_has_client_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void mail_instance::clear_has_client_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void mail_instance::clear_client_type() {
  client_type_ = 0;
  clear_has_client_type();
}
inline ::SProtoSpace::eMailClientType mail_instance::client_type() const {
  return static_cast< ::SProtoSpace::eMailClientType >(client_type_);
}
inline void mail_instance::set_client_type(::SProtoSpace::eMailClientType value) {
  assert(::SProtoSpace::eMailClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
}

// optional string from_role_name = 15;
inline bool mail_instance::has_from_role_name() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void mail_instance::set_has_from_role_name() {
  _has_bits_[0] |= 0x00004000u;
}
inline void mail_instance::clear_has_from_role_name() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void mail_instance::clear_from_role_name() {
  if (from_role_name_ != &::google::protobuf::internal::kEmptyString) {
    from_role_name_->clear();
  }
  clear_has_from_role_name();
}
inline const ::std::string& mail_instance::from_role_name() const {
  return *from_role_name_;
}
inline void mail_instance::set_from_role_name(const ::std::string& value) {
  set_has_from_role_name();
  if (from_role_name_ == &::google::protobuf::internal::kEmptyString) {
    from_role_name_ = new ::std::string;
  }
  from_role_name_->assign(value);
}
inline void mail_instance::set_from_role_name(const char* value) {
  set_has_from_role_name();
  if (from_role_name_ == &::google::protobuf::internal::kEmptyString) {
    from_role_name_ = new ::std::string;
  }
  from_role_name_->assign(value);
}
inline void mail_instance::set_from_role_name(const char* value, size_t size) {
  set_has_from_role_name();
  if (from_role_name_ == &::google::protobuf::internal::kEmptyString) {
    from_role_name_ = new ::std::string;
  }
  from_role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_instance::mutable_from_role_name() {
  set_has_from_role_name();
  if (from_role_name_ == &::google::protobuf::internal::kEmptyString) {
    from_role_name_ = new ::std::string;
  }
  return from_role_name_;
}
inline ::std::string* mail_instance::release_from_role_name() {
  clear_has_from_role_name();
  if (from_role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_role_name_;
    from_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_instance::set_allocated_from_role_name(::std::string* from_role_name) {
  if (from_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_role_name_;
  }
  if (from_role_name) {
    set_has_from_role_name();
    from_role_name_ = from_role_name;
  } else {
    clear_has_from_role_name();
    from_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string from_role_avatar_url = 16;
inline bool mail_instance::has_from_role_avatar_url() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void mail_instance::set_has_from_role_avatar_url() {
  _has_bits_[0] |= 0x00008000u;
}
inline void mail_instance::clear_has_from_role_avatar_url() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void mail_instance::clear_from_role_avatar_url() {
  if (from_role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    from_role_avatar_url_->clear();
  }
  clear_has_from_role_avatar_url();
}
inline const ::std::string& mail_instance::from_role_avatar_url() const {
  return *from_role_avatar_url_;
}
inline void mail_instance::set_from_role_avatar_url(const ::std::string& value) {
  set_has_from_role_avatar_url();
  if (from_role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    from_role_avatar_url_ = new ::std::string;
  }
  from_role_avatar_url_->assign(value);
}
inline void mail_instance::set_from_role_avatar_url(const char* value) {
  set_has_from_role_avatar_url();
  if (from_role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    from_role_avatar_url_ = new ::std::string;
  }
  from_role_avatar_url_->assign(value);
}
inline void mail_instance::set_from_role_avatar_url(const char* value, size_t size) {
  set_has_from_role_avatar_url();
  if (from_role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    from_role_avatar_url_ = new ::std::string;
  }
  from_role_avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_instance::mutable_from_role_avatar_url() {
  set_has_from_role_avatar_url();
  if (from_role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    from_role_avatar_url_ = new ::std::string;
  }
  return from_role_avatar_url_;
}
inline ::std::string* mail_instance::release_from_role_avatar_url() {
  clear_has_from_role_avatar_url();
  if (from_role_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_role_avatar_url_;
    from_role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_instance::set_allocated_from_role_avatar_url(::std::string* from_role_avatar_url) {
  if (from_role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete from_role_avatar_url_;
  }
  if (from_role_avatar_url) {
    set_has_from_role_avatar_url();
    from_role_avatar_url_ = from_role_avatar_url;
  } else {
    clear_has_from_role_avatar_url();
    from_role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 from_role_gender_id = 17;
inline bool mail_instance::has_from_role_gender_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void mail_instance::set_has_from_role_gender_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void mail_instance::clear_has_from_role_gender_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void mail_instance::clear_from_role_gender_id() {
  from_role_gender_id_ = 0;
  clear_has_from_role_gender_id();
}
inline ::google::protobuf::int32 mail_instance::from_role_gender_id() const {
  return from_role_gender_id_;
}
inline void mail_instance::set_from_role_gender_id(::google::protobuf::int32 value) {
  set_has_from_role_gender_id();
  from_role_gender_id_ = value;
}

// optional int32 from_role_avatar_box_id = 18;
inline bool mail_instance::has_from_role_avatar_box_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void mail_instance::set_has_from_role_avatar_box_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void mail_instance::clear_has_from_role_avatar_box_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void mail_instance::clear_from_role_avatar_box_id() {
  from_role_avatar_box_id_ = 0;
  clear_has_from_role_avatar_box_id();
}
inline ::google::protobuf::int32 mail_instance::from_role_avatar_box_id() const {
  return from_role_avatar_box_id_;
}
inline void mail_instance::set_from_role_avatar_box_id(::google::protobuf::int32 value) {
  set_has_from_role_avatar_box_id();
  from_role_avatar_box_id_ = value;
}

// optional int32 from_role_level = 19;
inline bool mail_instance::has_from_role_level() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void mail_instance::set_has_from_role_level() {
  _has_bits_[0] |= 0x00040000u;
}
inline void mail_instance::clear_has_from_role_level() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void mail_instance::clear_from_role_level() {
  from_role_level_ = 0;
  clear_has_from_role_level();
}
inline ::google::protobuf::int32 mail_instance::from_role_level() const {
  return from_role_level_;
}
inline void mail_instance::set_from_role_level(::google::protobuf::int32 value) {
  set_has_from_role_level();
  from_role_level_ = value;
}

// optional int32 from_role_officer_grade = 20;
inline bool mail_instance::has_from_role_officer_grade() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void mail_instance::set_has_from_role_officer_grade() {
  _has_bits_[0] |= 0x00080000u;
}
inline void mail_instance::clear_has_from_role_officer_grade() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void mail_instance::clear_from_role_officer_grade() {
  from_role_officer_grade_ = 0;
  clear_has_from_role_officer_grade();
}
inline ::google::protobuf::int32 mail_instance::from_role_officer_grade() const {
  return from_role_officer_grade_;
}
inline void mail_instance::set_from_role_officer_grade(::google::protobuf::int32 value) {
  set_has_from_role_officer_grade();
  from_role_officer_grade_ = value;
}

// optional uint32 utc_time_generate = 21;
inline bool mail_instance::has_utc_time_generate() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void mail_instance::set_has_utc_time_generate() {
  _has_bits_[0] |= 0x00100000u;
}
inline void mail_instance::clear_has_utc_time_generate() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void mail_instance::clear_utc_time_generate() {
  utc_time_generate_ = 0u;
  clear_has_utc_time_generate();
}
inline ::google::protobuf::uint32 mail_instance::utc_time_generate() const {
  return utc_time_generate_;
}
inline void mail_instance::set_utc_time_generate(::google::protobuf::uint32 value) {
  set_has_utc_time_generate();
  utc_time_generate_ = value;
}

// optional uint32 utc_time_invalid = 22;
inline bool mail_instance::has_utc_time_invalid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void mail_instance::set_has_utc_time_invalid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void mail_instance::clear_has_utc_time_invalid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void mail_instance::clear_utc_time_invalid() {
  utc_time_invalid_ = 0u;
  clear_has_utc_time_invalid();
}
inline ::google::protobuf::uint32 mail_instance::utc_time_invalid() const {
  return utc_time_invalid_;
}
inline void mail_instance::set_utc_time_invalid(::google::protobuf::uint32 value) {
  set_has_utc_time_invalid();
  utc_time_invalid_ = value;
}

// optional uint32 time_generate = 23;
inline bool mail_instance::has_time_generate() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void mail_instance::set_has_time_generate() {
  _has_bits_[0] |= 0x00400000u;
}
inline void mail_instance::clear_has_time_generate() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void mail_instance::clear_time_generate() {
  time_generate_ = 0u;
  clear_has_time_generate();
}
inline ::google::protobuf::uint32 mail_instance::time_generate() const {
  return time_generate_;
}
inline void mail_instance::set_time_generate(::google::protobuf::uint32 value) {
  set_has_time_generate();
  time_generate_ = value;
}

// optional uint32 time_invalid = 24;
inline bool mail_instance::has_time_invalid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void mail_instance::set_has_time_invalid() {
  _has_bits_[0] |= 0x00800000u;
}
inline void mail_instance::clear_has_time_invalid() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void mail_instance::clear_time_invalid() {
  time_invalid_ = 0u;
  clear_has_time_invalid();
}
inline ::google::protobuf::uint32 mail_instance::time_invalid() const {
  return time_invalid_;
}
inline void mail_instance::set_time_invalid(::google::protobuf::uint32 value) {
  set_has_time_invalid();
  time_invalid_ = value;
}

// -------------------------------------------------------------------

// mail_from_role_info

// optional string role_name = 1;
inline bool mail_from_role_info::has_role_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_from_role_info::set_has_role_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_from_role_info::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_from_role_info::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& mail_from_role_info::role_name() const {
  return *role_name_;
}
inline void mail_from_role_info::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void mail_from_role_info::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void mail_from_role_info::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_from_role_info::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* mail_from_role_info::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_from_role_info::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string avatar_url = 2;
inline bool mail_from_role_info::has_avatar_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_from_role_info::set_has_avatar_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_from_role_info::clear_has_avatar_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_from_role_info::clear_avatar_url() {
  if (avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    avatar_url_->clear();
  }
  clear_has_avatar_url();
}
inline const ::std::string& mail_from_role_info::avatar_url() const {
  return *avatar_url_;
}
inline void mail_from_role_info::set_avatar_url(const ::std::string& value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
}
inline void mail_from_role_info::set_avatar_url(const char* value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
}
inline void mail_from_role_info::set_avatar_url(const char* value, size_t size) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_from_role_info::mutable_avatar_url() {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    avatar_url_ = new ::std::string;
  }
  return avatar_url_;
}
inline ::std::string* mail_from_role_info::release_avatar_url() {
  clear_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avatar_url_;
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_from_role_info::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_url_;
  }
  if (avatar_url) {
    set_has_avatar_url();
    avatar_url_ = avatar_url;
  } else {
    clear_has_avatar_url();
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 avatar_box_id = 3;
inline bool mail_from_role_info::has_avatar_box_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mail_from_role_info::set_has_avatar_box_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mail_from_role_info::clear_has_avatar_box_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mail_from_role_info::clear_avatar_box_id() {
  avatar_box_id_ = 0;
  clear_has_avatar_box_id();
}
inline ::google::protobuf::int32 mail_from_role_info::avatar_box_id() const {
  return avatar_box_id_;
}
inline void mail_from_role_info::set_avatar_box_id(::google::protobuf::int32 value) {
  set_has_avatar_box_id();
  avatar_box_id_ = value;
}

// optional int32 level = 4;
inline bool mail_from_role_info::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mail_from_role_info::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mail_from_role_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mail_from_role_info::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 mail_from_role_info::level() const {
  return level_;
}
inline void mail_from_role_info::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 office_grade = 5;
inline bool mail_from_role_info::has_office_grade() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mail_from_role_info::set_has_office_grade() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mail_from_role_info::clear_has_office_grade() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mail_from_role_info::clear_office_grade() {
  office_grade_ = 0;
  clear_has_office_grade();
}
inline ::google::protobuf::int32 mail_from_role_info::office_grade() const {
  return office_grade_;
}
inline void mail_from_role_info::set_office_grade(::google::protobuf::int32 value) {
  set_has_office_grade();
  office_grade_ = value;
}

// optional int32 gender_id = 6;
inline bool mail_from_role_info::has_gender_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mail_from_role_info::set_has_gender_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mail_from_role_info::clear_has_gender_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mail_from_role_info::clear_gender_id() {
  gender_id_ = 0;
  clear_has_gender_id();
}
inline ::google::protobuf::int32 mail_from_role_info::gender_id() const {
  return gender_id_;
}
inline void mail_from_role_info::set_gender_id(::google::protobuf::int32 value) {
  set_has_gender_id();
  gender_id_ = value;
}

// optional uint64 role_id = 17;
inline bool mail_from_role_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mail_from_role_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mail_from_role_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mail_from_role_info::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 mail_from_role_info::role_id() const {
  return role_id_;
}
inline void mail_from_role_info::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// mail

// optional uint64 id = 1;
inline bool mail::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 mail::id() const {
  return id_;
}
inline void mail::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 cfg_id = 2;
inline bool mail::has_cfg_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail::set_has_cfg_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail::clear_has_cfg_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail::clear_cfg_id() {
  cfg_id_ = 0;
  clear_has_cfg_id();
}
inline ::google::protobuf::int32 mail::cfg_id() const {
  return cfg_id_;
}
inline void mail::set_cfg_id(::google::protobuf::int32 value) {
  set_has_cfg_id();
  cfg_id_ = value;
}

// optional string title = 3;
inline bool mail::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mail::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mail::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mail::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& mail::title() const {
  return *title_;
}
inline void mail::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void mail::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void mail::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* mail::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 4;
inline bool mail::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mail::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mail::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mail::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& mail::content() const {
  return *content_;
}
inline void mail::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void mail::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void mail::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* mail::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 invalid_time = 5;
inline bool mail::has_invalid_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mail::set_has_invalid_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mail::clear_has_invalid_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mail::clear_invalid_time() {
  invalid_time_ = GOOGLE_ULONGLONG(0);
  clear_has_invalid_time();
}
inline ::google::protobuf::uint64 mail::invalid_time() const {
  return invalid_time_;
}
inline void mail::set_invalid_time(::google::protobuf::uint64 value) {
  set_has_invalid_time();
  invalid_time_ = value;
}

// optional .SProtoSpace.eMailClientType client_type = 6;
inline bool mail::has_client_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mail::set_has_client_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mail::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mail::clear_client_type() {
  client_type_ = 0;
  clear_has_client_type();
}
inline ::SProtoSpace::eMailClientType mail::client_type() const {
  return static_cast< ::SProtoSpace::eMailClientType >(client_type_);
}
inline void mail::set_client_type(::SProtoSpace::eMailClientType value) {
  assert(::SProtoSpace::eMailClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
}

// optional .SProtoSpace.eMailServerType server_type = 7;
inline bool mail::has_server_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mail::set_has_server_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mail::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mail::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
inline ::SProtoSpace::eMailServerType mail::server_type() const {
  return static_cast< ::SProtoSpace::eMailServerType >(server_type_);
}
inline void mail::set_server_type(::SProtoSpace::eMailServerType value) {
  assert(::SProtoSpace::eMailServerType_IsValid(value));
  set_has_server_type();
  server_type_ = value;
}

// optional .SProtoSpace.eMailPriority priotity_type = 8;
inline bool mail::has_priotity_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mail::set_has_priotity_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mail::clear_has_priotity_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mail::clear_priotity_type() {
  priotity_type_ = 0;
  clear_has_priotity_type();
}
inline ::SProtoSpace::eMailPriority mail::priotity_type() const {
  return static_cast< ::SProtoSpace::eMailPriority >(priotity_type_);
}
inline void mail::set_priotity_type(::SProtoSpace::eMailPriority value) {
  assert(::SProtoSpace::eMailPriority_IsValid(value));
  set_has_priotity_type();
  priotity_type_ = value;
}

// optional uint64 to_role_id = 9;
inline bool mail::has_to_role_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mail::set_has_to_role_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mail::clear_has_to_role_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mail::clear_to_role_id() {
  to_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_role_id();
}
inline ::google::protobuf::uint64 mail::to_role_id() const {
  return to_role_id_;
}
inline void mail::set_to_role_id(::google::protobuf::uint64 value) {
  set_has_to_role_id();
  to_role_id_ = value;
}

// optional uint64 from_role_id = 10;
inline bool mail::has_from_role_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void mail::set_has_from_role_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void mail::clear_has_from_role_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void mail::clear_from_role_id() {
  from_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_role_id();
}
inline ::google::protobuf::uint64 mail::from_role_id() const {
  return from_role_id_;
}
inline void mail::set_from_role_id(::google::protobuf::uint64 value) {
  set_has_from_role_id();
  from_role_id_ = value;
}

// optional .SProtoSpace.mail_from_role_info from_role_info = 11;
inline bool mail::has_from_role_info() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void mail::set_has_from_role_info() {
  _has_bits_[0] |= 0x00000400u;
}
inline void mail::clear_has_from_role_info() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void mail::clear_from_role_info() {
  if (from_role_info_ != NULL) from_role_info_->::SProtoSpace::mail_from_role_info::Clear();
  clear_has_from_role_info();
}
inline const ::SProtoSpace::mail_from_role_info& mail::from_role_info() const {
  return from_role_info_ != NULL ? *from_role_info_ : *default_instance_->from_role_info_;
}
inline ::SProtoSpace::mail_from_role_info* mail::mutable_from_role_info() {
  set_has_from_role_info();
  if (from_role_info_ == NULL) from_role_info_ = new ::SProtoSpace::mail_from_role_info;
  return from_role_info_;
}
inline ::SProtoSpace::mail_from_role_info* mail::release_from_role_info() {
  clear_has_from_role_info();
  ::SProtoSpace::mail_from_role_info* temp = from_role_info_;
  from_role_info_ = NULL;
  return temp;
}
inline void mail::set_allocated_from_role_info(::SProtoSpace::mail_from_role_info* from_role_info) {
  delete from_role_info_;
  from_role_info_ = from_role_info;
  if (from_role_info) {
    set_has_from_role_info();
  } else {
    clear_has_from_role_info();
  }
}

// optional .SProtoSpace.mail_instance_attaches attachment = 12;
inline bool mail::has_attachment() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void mail::set_has_attachment() {
  _has_bits_[0] |= 0x00000800u;
}
inline void mail::clear_has_attachment() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void mail::clear_attachment() {
  if (attachment_ != NULL) attachment_->::SProtoSpace::mail_instance_attaches::Clear();
  clear_has_attachment();
}
inline const ::SProtoSpace::mail_instance_attaches& mail::attachment() const {
  return attachment_ != NULL ? *attachment_ : *default_instance_->attachment_;
}
inline ::SProtoSpace::mail_instance_attaches* mail::mutable_attachment() {
  set_has_attachment();
  if (attachment_ == NULL) attachment_ = new ::SProtoSpace::mail_instance_attaches;
  return attachment_;
}
inline ::SProtoSpace::mail_instance_attaches* mail::release_attachment() {
  clear_has_attachment();
  ::SProtoSpace::mail_instance_attaches* temp = attachment_;
  attachment_ = NULL;
  return temp;
}
inline void mail::set_allocated_attachment(::SProtoSpace::mail_instance_attaches* attachment) {
  delete attachment_;
  attachment_ = attachment;
  if (attachment) {
    set_has_attachment();
  } else {
    clear_has_attachment();
  }
}

// optional bool is_read = 13;
inline bool mail::has_is_read() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void mail::set_has_is_read() {
  _has_bits_[0] |= 0x00001000u;
}
inline void mail::clear_has_is_read() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void mail::clear_is_read() {
  is_read_ = false;
  clear_has_is_read();
}
inline bool mail::is_read() const {
  return is_read_;
}
inline void mail::set_is_read(bool value) {
  set_has_is_read();
  is_read_ = value;
}

// optional bool is_get_attach = 14;
inline bool mail::has_is_get_attach() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void mail::set_has_is_get_attach() {
  _has_bits_[0] |= 0x00002000u;
}
inline void mail::clear_has_is_get_attach() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void mail::clear_is_get_attach() {
  is_get_attach_ = false;
  clear_has_is_get_attach();
}
inline bool mail::is_get_attach() const {
  return is_get_attach_;
}
inline void mail::set_is_get_attach(bool value) {
  set_has_is_get_attach();
  is_get_attach_ = value;
}

// optional uint64 templet_id = 15;
inline bool mail::has_templet_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void mail::set_has_templet_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void mail::clear_has_templet_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void mail::clear_templet_id() {
  templet_id_ = GOOGLE_ULONGLONG(0);
  clear_has_templet_id();
}
inline ::google::protobuf::uint64 mail::templet_id() const {
  return templet_id_;
}
inline void mail::set_templet_id(::google::protobuf::uint64 value) {
  set_has_templet_id();
  templet_id_ = value;
}

// optional uint32 generate_time_cli = 16;
inline bool mail::has_generate_time_cli() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void mail::set_has_generate_time_cli() {
  _has_bits_[0] |= 0x00008000u;
}
inline void mail::clear_has_generate_time_cli() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void mail::clear_generate_time_cli() {
  generate_time_cli_ = 0u;
  clear_has_generate_time_cli();
}
inline ::google::protobuf::uint32 mail::generate_time_cli() const {
  return generate_time_cli_;
}
inline void mail::set_generate_time_cli(::google::protobuf::uint32 value) {
  set_has_generate_time_cli();
  generate_time_cli_ = value;
}

// optional uint32 invalid_time_cli = 17;
inline bool mail::has_invalid_time_cli() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void mail::set_has_invalid_time_cli() {
  _has_bits_[0] |= 0x00010000u;
}
inline void mail::clear_has_invalid_time_cli() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void mail::clear_invalid_time_cli() {
  invalid_time_cli_ = 0u;
  clear_has_invalid_time_cli();
}
inline ::google::protobuf::uint32 mail::invalid_time_cli() const {
  return invalid_time_cli_;
}
inline void mail::set_invalid_time_cli(::google::protobuf::uint32 value) {
  set_has_invalid_time_cli();
  invalid_time_cli_ = value;
}

// -------------------------------------------------------------------

// mail_template

// optional uint64 mail_template_id = 1;
inline bool mail_template::has_mail_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_template::set_has_mail_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_template::clear_has_mail_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_template::clear_mail_template_id() {
  mail_template_id_ = GOOGLE_ULONGLONG(0);
  clear_has_mail_template_id();
}
inline ::google::protobuf::uint64 mail_template::mail_template_id() const {
  return mail_template_id_;
}
inline void mail_template::set_mail_template_id(::google::protobuf::uint64 value) {
  set_has_mail_template_id();
  mail_template_id_ = value;
}

// optional int32 mail_config_id = 2;
inline bool mail_template::has_mail_config_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_template::set_has_mail_config_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_template::clear_has_mail_config_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_template::clear_mail_config_id() {
  mail_config_id_ = 0;
  clear_has_mail_config_id();
}
inline ::google::protobuf::int32 mail_template::mail_config_id() const {
  return mail_config_id_;
}
inline void mail_template::set_mail_config_id(::google::protobuf::int32 value) {
  set_has_mail_config_id();
  mail_config_id_ = value;
}

// optional .SProtoSpace.eMailPriority priotity = 3;
inline bool mail_template::has_priotity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mail_template::set_has_priotity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mail_template::clear_has_priotity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mail_template::clear_priotity() {
  priotity_ = 0;
  clear_has_priotity();
}
inline ::SProtoSpace::eMailPriority mail_template::priotity() const {
  return static_cast< ::SProtoSpace::eMailPriority >(priotity_);
}
inline void mail_template::set_priotity(::SProtoSpace::eMailPriority value) {
  assert(::SProtoSpace::eMailPriority_IsValid(value));
  set_has_priotity();
  priotity_ = value;
}

// optional .SProtoSpace.eMailServerType server_type = 4;
inline bool mail_template::has_server_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mail_template::set_has_server_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mail_template::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mail_template::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
inline ::SProtoSpace::eMailServerType mail_template::server_type() const {
  return static_cast< ::SProtoSpace::eMailServerType >(server_type_);
}
inline void mail_template::set_server_type(::SProtoSpace::eMailServerType value) {
  assert(::SProtoSpace::eMailServerType_IsValid(value));
  set_has_server_type();
  server_type_ = value;
}

// optional .SProtoSpace.eMailClientType client_type = 5;
inline bool mail_template::has_client_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mail_template::set_has_client_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mail_template::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mail_template::clear_client_type() {
  client_type_ = 0;
  clear_has_client_type();
}
inline ::SProtoSpace::eMailClientType mail_template::client_type() const {
  return static_cast< ::SProtoSpace::eMailClientType >(client_type_);
}
inline void mail_template::set_client_type(::SProtoSpace::eMailClientType value) {
  assert(::SProtoSpace::eMailClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
}

// optional string title = 6;
inline bool mail_template::has_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mail_template::set_has_title() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mail_template::clear_has_title() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mail_template::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& mail_template::title() const {
  return *title_;
}
inline void mail_template::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void mail_template::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void mail_template::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_template::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* mail_template::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_template::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 7;
inline bool mail_template::has_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mail_template::set_has_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mail_template::clear_has_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mail_template::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& mail_template::content() const {
  return *content_;
}
inline void mail_template::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void mail_template::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void mail_template::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_template::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* mail_template::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_template::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 life_time = 8;
inline bool mail_template::has_life_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mail_template::set_has_life_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mail_template::clear_has_life_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mail_template::clear_life_time() {
  life_time_ = 0u;
  clear_has_life_time();
}
inline ::google::protobuf::uint32 mail_template::life_time() const {
  return life_time_;
}
inline void mail_template::set_life_time(::google::protobuf::uint32 value) {
  set_has_life_time();
  life_time_ = value;
}

// optional uint64 invalid_time = 9;
inline bool mail_template::has_invalid_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mail_template::set_has_invalid_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mail_template::clear_has_invalid_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mail_template::clear_invalid_time() {
  invalid_time_ = GOOGLE_ULONGLONG(0);
  clear_has_invalid_time();
}
inline ::google::protobuf::uint64 mail_template::invalid_time() const {
  return invalid_time_;
}
inline void mail_template::set_invalid_time(::google::protobuf::uint64 value) {
  set_has_invalid_time();
  invalid_time_ = value;
}

// optional .SProtoSpace.mail_instance_attaches attachment = 10;
inline bool mail_template::has_attachment() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void mail_template::set_has_attachment() {
  _has_bits_[0] |= 0x00000200u;
}
inline void mail_template::clear_has_attachment() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void mail_template::clear_attachment() {
  if (attachment_ != NULL) attachment_->::SProtoSpace::mail_instance_attaches::Clear();
  clear_has_attachment();
}
inline const ::SProtoSpace::mail_instance_attaches& mail_template::attachment() const {
  return attachment_ != NULL ? *attachment_ : *default_instance_->attachment_;
}
inline ::SProtoSpace::mail_instance_attaches* mail_template::mutable_attachment() {
  set_has_attachment();
  if (attachment_ == NULL) attachment_ = new ::SProtoSpace::mail_instance_attaches;
  return attachment_;
}
inline ::SProtoSpace::mail_instance_attaches* mail_template::release_attachment() {
  clear_has_attachment();
  ::SProtoSpace::mail_instance_attaches* temp = attachment_;
  attachment_ = NULL;
  return temp;
}
inline void mail_template::set_allocated_attachment(::SProtoSpace::mail_instance_attaches* attachment) {
  delete attachment_;
  attachment_ = attachment;
  if (attachment) {
    set_has_attachment();
  } else {
    clear_has_attachment();
  }
}

// -------------------------------------------------------------------

// event_offical_info

// optional uint32 grade = 1;
inline bool event_offical_info::has_grade() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void event_offical_info::set_has_grade() {
  _has_bits_[0] |= 0x00000001u;
}
inline void event_offical_info::clear_has_grade() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void event_offical_info::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 event_offical_info::grade() const {
  return grade_;
}
inline void event_offical_info::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// -------------------------------------------------------------------

// event_offical_reduce

// optional uint32 old_grade = 1;
inline bool event_offical_reduce::has_old_grade() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void event_offical_reduce::set_has_old_grade() {
  _has_bits_[0] |= 0x00000001u;
}
inline void event_offical_reduce::clear_has_old_grade() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void event_offical_reduce::clear_old_grade() {
  old_grade_ = 0u;
  clear_has_old_grade();
}
inline ::google::protobuf::uint32 event_offical_reduce::old_grade() const {
  return old_grade_;
}
inline void event_offical_reduce::set_old_grade(::google::protobuf::uint32 value) {
  set_has_old_grade();
  old_grade_ = value;
}

// optional uint32 new_grade = 2;
inline bool event_offical_reduce::has_new_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void event_offical_reduce::set_has_new_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void event_offical_reduce::clear_has_new_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void event_offical_reduce::clear_new_grade() {
  new_grade_ = 0u;
  clear_has_new_grade();
}
inline ::google::protobuf::uint32 event_offical_reduce::new_grade() const {
  return new_grade_;
}
inline void event_offical_reduce::set_new_grade(::google::protobuf::uint32 value) {
  set_has_new_grade();
  new_grade_ = value;
}

// -------------------------------------------------------------------

// event_flower_info

// optional int32 template_id = 1;
inline bool event_flower_info::has_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void event_flower_info::set_has_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void event_flower_info::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void event_flower_info::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 event_flower_info::template_id() const {
  return template_id_;
}
inline void event_flower_info::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 count_num = 2;
inline bool event_flower_info::has_count_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void event_flower_info::set_has_count_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void event_flower_info::clear_has_count_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void event_flower_info::clear_count_num() {
  count_num_ = 0;
  clear_has_count_num();
}
inline ::google::protobuf::int32 event_flower_info::count_num() const {
  return count_num_;
}
inline void event_flower_info::set_count_num(::google::protobuf::int32 value) {
  set_has_count_num();
  count_num_ = value;
}

// optional int32 default_remark_index = 3;
inline bool event_flower_info::has_default_remark_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void event_flower_info::set_has_default_remark_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void event_flower_info::clear_has_default_remark_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void event_flower_info::clear_default_remark_index() {
  default_remark_index_ = 0;
  clear_has_default_remark_index();
}
inline ::google::protobuf::int32 event_flower_info::default_remark_index() const {
  return default_remark_index_;
}
inline void event_flower_info::set_default_remark_index(::google::protobuf::int32 value) {
  set_has_default_remark_index();
  default_remark_index_ = value;
}

// optional string custom_remark = 4;
inline bool event_flower_info::has_custom_remark() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void event_flower_info::set_has_custom_remark() {
  _has_bits_[0] |= 0x00000008u;
}
inline void event_flower_info::clear_has_custom_remark() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void event_flower_info::clear_custom_remark() {
  if (custom_remark_ != &::google::protobuf::internal::kEmptyString) {
    custom_remark_->clear();
  }
  clear_has_custom_remark();
}
inline const ::std::string& event_flower_info::custom_remark() const {
  return *custom_remark_;
}
inline void event_flower_info::set_custom_remark(const ::std::string& value) {
  set_has_custom_remark();
  if (custom_remark_ == &::google::protobuf::internal::kEmptyString) {
    custom_remark_ = new ::std::string;
  }
  custom_remark_->assign(value);
}
inline void event_flower_info::set_custom_remark(const char* value) {
  set_has_custom_remark();
  if (custom_remark_ == &::google::protobuf::internal::kEmptyString) {
    custom_remark_ = new ::std::string;
  }
  custom_remark_->assign(value);
}
inline void event_flower_info::set_custom_remark(const char* value, size_t size) {
  set_has_custom_remark();
  if (custom_remark_ == &::google::protobuf::internal::kEmptyString) {
    custom_remark_ = new ::std::string;
  }
  custom_remark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* event_flower_info::mutable_custom_remark() {
  set_has_custom_remark();
  if (custom_remark_ == &::google::protobuf::internal::kEmptyString) {
    custom_remark_ = new ::std::string;
  }
  return custom_remark_;
}
inline ::std::string* event_flower_info::release_custom_remark() {
  clear_has_custom_remark();
  if (custom_remark_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = custom_remark_;
    custom_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void event_flower_info::set_allocated_custom_remark(::std::string* custom_remark) {
  if (custom_remark_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_remark_;
  }
  if (custom_remark) {
    set_has_custom_remark();
    custom_remark_ = custom_remark;
  } else {
    clear_has_custom_remark();
    custom_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// event_flower_send_info

// optional .SProtoSpace.public_role_base_info to_role_info = 1;
inline bool event_flower_send_info::has_to_role_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void event_flower_send_info::set_has_to_role_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void event_flower_send_info::clear_has_to_role_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void event_flower_send_info::clear_to_role_info() {
  if (to_role_info_ != NULL) to_role_info_->::SProtoSpace::public_role_base_info::Clear();
  clear_has_to_role_info();
}
inline const ::SProtoSpace::public_role_base_info& event_flower_send_info::to_role_info() const {
  return to_role_info_ != NULL ? *to_role_info_ : *default_instance_->to_role_info_;
}
inline ::SProtoSpace::public_role_base_info* event_flower_send_info::mutable_to_role_info() {
  set_has_to_role_info();
  if (to_role_info_ == NULL) to_role_info_ = new ::SProtoSpace::public_role_base_info;
  return to_role_info_;
}
inline ::SProtoSpace::public_role_base_info* event_flower_send_info::release_to_role_info() {
  clear_has_to_role_info();
  ::SProtoSpace::public_role_base_info* temp = to_role_info_;
  to_role_info_ = NULL;
  return temp;
}
inline void event_flower_send_info::set_allocated_to_role_info(::SProtoSpace::public_role_base_info* to_role_info) {
  delete to_role_info_;
  to_role_info_ = to_role_info;
  if (to_role_info) {
    set_has_to_role_info();
  } else {
    clear_has_to_role_info();
  }
}

// optional .SProtoSpace.event_flower_info flower_info = 2;
inline bool event_flower_send_info::has_flower_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void event_flower_send_info::set_has_flower_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void event_flower_send_info::clear_has_flower_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void event_flower_send_info::clear_flower_info() {
  if (flower_info_ != NULL) flower_info_->::SProtoSpace::event_flower_info::Clear();
  clear_has_flower_info();
}
inline const ::SProtoSpace::event_flower_info& event_flower_send_info::flower_info() const {
  return flower_info_ != NULL ? *flower_info_ : *default_instance_->flower_info_;
}
inline ::SProtoSpace::event_flower_info* event_flower_send_info::mutable_flower_info() {
  set_has_flower_info();
  if (flower_info_ == NULL) flower_info_ = new ::SProtoSpace::event_flower_info;
  return flower_info_;
}
inline ::SProtoSpace::event_flower_info* event_flower_send_info::release_flower_info() {
  clear_has_flower_info();
  ::SProtoSpace::event_flower_info* temp = flower_info_;
  flower_info_ = NULL;
  return temp;
}
inline void event_flower_send_info::set_allocated_flower_info(::SProtoSpace::event_flower_info* flower_info) {
  delete flower_info_;
  flower_info_ = flower_info;
  if (flower_info) {
    set_has_flower_info();
  } else {
    clear_has_flower_info();
  }
}

// -------------------------------------------------------------------

// db_event_msg_info

// optional uint64 id = 1;
inline bool db_event_msg_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_event_msg_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_event_msg_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_event_msg_info::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 db_event_msg_info::id() const {
  return id_;
}
inline void db_event_msg_info::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 role_id = 2;
inline bool db_event_msg_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_event_msg_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_event_msg_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_event_msg_info::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 db_event_msg_info::role_id() const {
  return role_id_;
}
inline void db_event_msg_info::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 from_id = 3;
inline bool db_event_msg_info::has_from_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_event_msg_info::set_has_from_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_event_msg_info::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_event_msg_info::clear_from_id() {
  from_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_id();
}
inline ::google::protobuf::uint64 db_event_msg_info::from_id() const {
  return from_id_;
}
inline void db_event_msg_info::set_from_id(::google::protobuf::uint64 value) {
  set_has_from_id();
  from_id_ = value;
}

// optional string from_name = 4;
inline bool db_event_msg_info::has_from_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_event_msg_info::set_has_from_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_event_msg_info::clear_has_from_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_event_msg_info::clear_from_name() {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    from_name_->clear();
  }
  clear_has_from_name();
}
inline const ::std::string& db_event_msg_info::from_name() const {
  return *from_name_;
}
inline void db_event_msg_info::set_from_name(const ::std::string& value) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(value);
}
inline void db_event_msg_info::set_from_name(const char* value) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(value);
}
inline void db_event_msg_info::set_from_name(const char* value, size_t size) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_event_msg_info::mutable_from_name() {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  return from_name_;
}
inline ::std::string* db_event_msg_info::release_from_name() {
  clear_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_name_;
    from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_event_msg_info::set_allocated_from_name(::std::string* from_name) {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_name_;
  }
  if (from_name) {
    set_has_from_name();
    from_name_ = from_name;
  } else {
    clear_has_from_name();
    from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 from_lv = 5;
inline bool db_event_msg_info::has_from_lv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_event_msg_info::set_has_from_lv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_event_msg_info::clear_has_from_lv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_event_msg_info::clear_from_lv() {
  from_lv_ = 0u;
  clear_has_from_lv();
}
inline ::google::protobuf::uint32 db_event_msg_info::from_lv() const {
  return from_lv_;
}
inline void db_event_msg_info::set_from_lv(::google::protobuf::uint32 value) {
  set_has_from_lv();
  from_lv_ = value;
}

// optional uint32 from_sex = 6;
inline bool db_event_msg_info::has_from_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_event_msg_info::set_has_from_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_event_msg_info::clear_has_from_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_event_msg_info::clear_from_sex() {
  from_sex_ = 0u;
  clear_has_from_sex();
}
inline ::google::protobuf::uint32 db_event_msg_info::from_sex() const {
  return from_sex_;
}
inline void db_event_msg_info::set_from_sex(::google::protobuf::uint32 value) {
  set_has_from_sex();
  from_sex_ = value;
}

// optional uint32 from_grade = 7;
inline bool db_event_msg_info::has_from_grade() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_event_msg_info::set_has_from_grade() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_event_msg_info::clear_has_from_grade() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_event_msg_info::clear_from_grade() {
  from_grade_ = 0u;
  clear_has_from_grade();
}
inline ::google::protobuf::uint32 db_event_msg_info::from_grade() const {
  return from_grade_;
}
inline void db_event_msg_info::set_from_grade(::google::protobuf::uint32 value) {
  set_has_from_grade();
  from_grade_ = value;
}

// optional int32 from_border = 8;
inline bool db_event_msg_info::has_from_border() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_event_msg_info::set_has_from_border() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_event_msg_info::clear_has_from_border() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_event_msg_info::clear_from_border() {
  from_border_ = 0;
  clear_has_from_border();
}
inline ::google::protobuf::int32 db_event_msg_info::from_border() const {
  return from_border_;
}
inline void db_event_msg_info::set_from_border(::google::protobuf::int32 value) {
  set_has_from_border();
  from_border_ = value;
}

// optional uint32 event_type = 9;
inline bool db_event_msg_info::has_event_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void db_event_msg_info::set_has_event_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void db_event_msg_info::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void db_event_msg_info::clear_event_type() {
  event_type_ = 0u;
  clear_has_event_type();
}
inline ::google::protobuf::uint32 db_event_msg_info::event_type() const {
  return event_type_;
}
inline void db_event_msg_info::set_event_type(::google::protobuf::uint32 value) {
  set_has_event_type();
  event_type_ = value;
}

// optional uint64 add_time = 10;
inline bool db_event_msg_info::has_add_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void db_event_msg_info::set_has_add_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void db_event_msg_info::clear_has_add_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void db_event_msg_info::clear_add_time() {
  add_time_ = GOOGLE_ULONGLONG(0);
  clear_has_add_time();
}
inline ::google::protobuf::uint64 db_event_msg_info::add_time() const {
  return add_time_;
}
inline void db_event_msg_info::set_add_time(::google::protobuf::uint64 value) {
  set_has_add_time();
  add_time_ = value;
}

// optional uint32 is_read = 11;
inline bool db_event_msg_info::has_is_read() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void db_event_msg_info::set_has_is_read() {
  _has_bits_[0] |= 0x00000400u;
}
inline void db_event_msg_info::clear_has_is_read() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void db_event_msg_info::clear_is_read() {
  is_read_ = 0u;
  clear_has_is_read();
}
inline ::google::protobuf::uint32 db_event_msg_info::is_read() const {
  return is_read_;
}
inline void db_event_msg_info::set_is_read(::google::protobuf::uint32 value) {
  set_has_is_read();
  is_read_ = value;
}

// optional uint32 msg_template_id = 12;
inline bool db_event_msg_info::has_msg_template_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void db_event_msg_info::set_has_msg_template_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void db_event_msg_info::clear_has_msg_template_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void db_event_msg_info::clear_msg_template_id() {
  msg_template_id_ = 0u;
  clear_has_msg_template_id();
}
inline ::google::protobuf::uint32 db_event_msg_info::msg_template_id() const {
  return msg_template_id_;
}
inline void db_event_msg_info::set_msg_template_id(::google::protobuf::uint32 value) {
  set_has_msg_template_id();
  msg_template_id_ = value;
}

// optional string msg_content = 13;
inline bool db_event_msg_info::has_msg_content() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void db_event_msg_info::set_has_msg_content() {
  _has_bits_[0] |= 0x00001000u;
}
inline void db_event_msg_info::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void db_event_msg_info::clear_msg_content() {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    msg_content_->clear();
  }
  clear_has_msg_content();
}
inline const ::std::string& db_event_msg_info::msg_content() const {
  return *msg_content_;
}
inline void db_event_msg_info::set_msg_content(const ::std::string& value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void db_event_msg_info::set_msg_content(const char* value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void db_event_msg_info::set_msg_content(const char* value, size_t size) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_event_msg_info::mutable_msg_content() {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  return msg_content_;
}
inline ::std::string* db_event_msg_info::release_msg_content() {
  clear_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_content_;
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_event_msg_info::set_allocated_msg_content(::std::string* msg_content) {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (msg_content) {
    set_has_msg_content();
    msg_content_ = msg_content;
  } else {
    clear_has_msg_content();
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// share_officer_upgrade

// optional uint64 share_id = 1;
inline bool share_officer_upgrade::has_share_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void share_officer_upgrade::set_has_share_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void share_officer_upgrade::clear_has_share_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void share_officer_upgrade::clear_share_id() {
  share_id_ = GOOGLE_ULONGLONG(0);
  clear_has_share_id();
}
inline ::google::protobuf::uint64 share_officer_upgrade::share_id() const {
  return share_id_;
}
inline void share_officer_upgrade::set_share_id(::google::protobuf::uint64 value) {
  set_has_share_id();
  share_id_ = value;
}

// optional uint64 role_id = 2;
inline bool share_officer_upgrade::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void share_officer_upgrade::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void share_officer_upgrade::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void share_officer_upgrade::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 share_officer_upgrade::role_id() const {
  return role_id_;
}
inline void share_officer_upgrade::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool share_officer_upgrade::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void share_officer_upgrade::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void share_officer_upgrade::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void share_officer_upgrade::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& share_officer_upgrade::role_name() const {
  return *role_name_;
}
inline void share_officer_upgrade::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void share_officer_upgrade::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void share_officer_upgrade::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* share_officer_upgrade::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* share_officer_upgrade::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void share_officer_upgrade::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 sex = 4;
inline bool share_officer_upgrade::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void share_officer_upgrade::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void share_officer_upgrade::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void share_officer_upgrade::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 share_officer_upgrade::sex() const {
  return sex_;
}
inline void share_officer_upgrade::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 lv = 5;
inline bool share_officer_upgrade::has_lv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void share_officer_upgrade::set_has_lv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void share_officer_upgrade::clear_has_lv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void share_officer_upgrade::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 share_officer_upgrade::lv() const {
  return lv_;
}
inline void share_officer_upgrade::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional uint32 grade = 6;
inline bool share_officer_upgrade::has_grade() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void share_officer_upgrade::set_has_grade() {
  _has_bits_[0] |= 0x00000020u;
}
inline void share_officer_upgrade::clear_has_grade() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void share_officer_upgrade::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 share_officer_upgrade::grade() const {
  return grade_;
}
inline void share_officer_upgrade::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint32 world_channel_id = 7;
inline bool share_officer_upgrade::has_world_channel_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void share_officer_upgrade::set_has_world_channel_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void share_officer_upgrade::clear_has_world_channel_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void share_officer_upgrade::clear_world_channel_id() {
  world_channel_id_ = 0u;
  clear_has_world_channel_id();
}
inline ::google::protobuf::uint32 share_officer_upgrade::world_channel_id() const {
  return world_channel_id_;
}
inline void share_officer_upgrade::set_world_channel_id(::google::protobuf::uint32 value) {
  set_has_world_channel_id();
  world_channel_id_ = value;
}

// optional string head = 8;
inline bool share_officer_upgrade::has_head() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void share_officer_upgrade::set_has_head() {
  _has_bits_[0] |= 0x00000080u;
}
inline void share_officer_upgrade::clear_has_head() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void share_officer_upgrade::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& share_officer_upgrade::head() const {
  return *head_;
}
inline void share_officer_upgrade::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void share_officer_upgrade::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void share_officer_upgrade::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* share_officer_upgrade::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* share_officer_upgrade::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void share_officer_upgrade::set_allocated_head(::std::string* head) {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (head) {
    set_has_head();
    head_ = head;
  } else {
    clear_has_head();
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// first_award_unit

// optional int32 grade = 1;
inline bool first_award_unit::has_grade() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void first_award_unit::set_has_grade() {
  _has_bits_[0] |= 0x00000001u;
}
inline void first_award_unit::clear_has_grade() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void first_award_unit::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 first_award_unit::grade() const {
  return grade_;
}
inline void first_award_unit::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// optional bool award = 2;
inline bool first_award_unit::has_award() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void first_award_unit::set_has_award() {
  _has_bits_[0] |= 0x00000002u;
}
inline void first_award_unit::clear_has_award() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void first_award_unit::clear_award() {
  award_ = false;
  clear_has_award();
}
inline bool first_award_unit::award() const {
  return award_;
}
inline void first_award_unit::set_award(bool value) {
  set_has_award();
  award_ = value;
}

// -------------------------------------------------------------------

// flower_info

// optional uint64 uuid = 1;
inline bool flower_info::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void flower_info::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void flower_info::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void flower_info::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 flower_info::uuid() const {
  return uuid_;
}
inline void flower_info::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional int32 template_id = 2;
inline bool flower_info::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void flower_info::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void flower_info::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void flower_info::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 flower_info::template_id() const {
  return template_id_;
}
inline void flower_info::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 count_num = 3;
inline bool flower_info::has_count_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void flower_info::set_has_count_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void flower_info::clear_has_count_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void flower_info::clear_count_num() {
  count_num_ = 0;
  clear_has_count_num();
}
inline ::google::protobuf::int32 flower_info::count_num() const {
  return count_num_;
}
inline void flower_info::set_count_num(::google::protobuf::int32 value) {
  set_has_count_num();
  count_num_ = value;
}

// -------------------------------------------------------------------

// flower_send_info

// optional uint64 to_role_id = 1;
inline bool flower_send_info::has_to_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void flower_send_info::set_has_to_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void flower_send_info::clear_has_to_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void flower_send_info::clear_to_role_id() {
  to_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_role_id();
}
inline ::google::protobuf::uint64 flower_send_info::to_role_id() const {
  return to_role_id_;
}
inline void flower_send_info::set_to_role_id(::google::protobuf::uint64 value) {
  set_has_to_role_id();
  to_role_id_ = value;
}

// optional string to_role_name = 2;
inline bool flower_send_info::has_to_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void flower_send_info::set_has_to_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void flower_send_info::clear_has_to_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void flower_send_info::clear_to_role_name() {
  if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
    to_role_name_->clear();
  }
  clear_has_to_role_name();
}
inline const ::std::string& flower_send_info::to_role_name() const {
  return *to_role_name_;
}
inline void flower_send_info::set_to_role_name(const ::std::string& value) {
  set_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    to_role_name_ = new ::std::string;
  }
  to_role_name_->assign(value);
}
inline void flower_send_info::set_to_role_name(const char* value) {
  set_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    to_role_name_ = new ::std::string;
  }
  to_role_name_->assign(value);
}
inline void flower_send_info::set_to_role_name(const char* value, size_t size) {
  set_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    to_role_name_ = new ::std::string;
  }
  to_role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* flower_send_info::mutable_to_role_name() {
  set_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    to_role_name_ = new ::std::string;
  }
  return to_role_name_;
}
inline ::std::string* flower_send_info::release_to_role_name() {
  clear_has_to_role_name();
  if (to_role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_role_name_;
    to_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void flower_send_info::set_allocated_to_role_name(::std::string* to_role_name) {
  if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_role_name_;
  }
  if (to_role_name) {
    set_has_to_role_name();
    to_role_name_ = to_role_name;
  } else {
    clear_has_to_role_name();
    to_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 send_flower_template_id = 3;
inline bool flower_send_info::has_send_flower_template_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void flower_send_info::set_has_send_flower_template_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void flower_send_info::clear_has_send_flower_template_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void flower_send_info::clear_send_flower_template_id() {
  send_flower_template_id_ = 0;
  clear_has_send_flower_template_id();
}
inline ::google::protobuf::int32 flower_send_info::send_flower_template_id() const {
  return send_flower_template_id_;
}
inline void flower_send_info::set_send_flower_template_id(::google::protobuf::int32 value) {
  set_has_send_flower_template_id();
  send_flower_template_id_ = value;
}

// optional int32 send_flower_num = 4;
inline bool flower_send_info::has_send_flower_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void flower_send_info::set_has_send_flower_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void flower_send_info::clear_has_send_flower_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void flower_send_info::clear_send_flower_num() {
  send_flower_num_ = 0;
  clear_has_send_flower_num();
}
inline ::google::protobuf::int32 flower_send_info::send_flower_num() const {
  return send_flower_num_;
}
inline void flower_send_info::set_send_flower_num(::google::protobuf::int32 value) {
  set_has_send_flower_num();
  send_flower_num_ = value;
}

// optional int32 default_remark_index = 5;
inline bool flower_send_info::has_default_remark_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void flower_send_info::set_has_default_remark_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void flower_send_info::clear_has_default_remark_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void flower_send_info::clear_default_remark_index() {
  default_remark_index_ = 0;
  clear_has_default_remark_index();
}
inline ::google::protobuf::int32 flower_send_info::default_remark_index() const {
  return default_remark_index_;
}
inline void flower_send_info::set_default_remark_index(::google::protobuf::int32 value) {
  set_has_default_remark_index();
  default_remark_index_ = value;
}

// optional string custom_remark = 6;
inline bool flower_send_info::has_custom_remark() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void flower_send_info::set_has_custom_remark() {
  _has_bits_[0] |= 0x00000020u;
}
inline void flower_send_info::clear_has_custom_remark() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void flower_send_info::clear_custom_remark() {
  if (custom_remark_ != &::google::protobuf::internal::kEmptyString) {
    custom_remark_->clear();
  }
  clear_has_custom_remark();
}
inline const ::std::string& flower_send_info::custom_remark() const {
  return *custom_remark_;
}
inline void flower_send_info::set_custom_remark(const ::std::string& value) {
  set_has_custom_remark();
  if (custom_remark_ == &::google::protobuf::internal::kEmptyString) {
    custom_remark_ = new ::std::string;
  }
  custom_remark_->assign(value);
}
inline void flower_send_info::set_custom_remark(const char* value) {
  set_has_custom_remark();
  if (custom_remark_ == &::google::protobuf::internal::kEmptyString) {
    custom_remark_ = new ::std::string;
  }
  custom_remark_->assign(value);
}
inline void flower_send_info::set_custom_remark(const char* value, size_t size) {
  set_has_custom_remark();
  if (custom_remark_ == &::google::protobuf::internal::kEmptyString) {
    custom_remark_ = new ::std::string;
  }
  custom_remark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* flower_send_info::mutable_custom_remark() {
  set_has_custom_remark();
  if (custom_remark_ == &::google::protobuf::internal::kEmptyString) {
    custom_remark_ = new ::std::string;
  }
  return custom_remark_;
}
inline ::std::string* flower_send_info::release_custom_remark() {
  clear_has_custom_remark();
  if (custom_remark_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = custom_remark_;
    custom_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void flower_send_info::set_allocated_custom_remark(::std::string* custom_remark) {
  if (custom_remark_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_remark_;
  }
  if (custom_remark) {
    set_has_custom_remark();
    custom_remark_ = custom_remark;
  } else {
    clear_has_custom_remark();
    custom_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// offical_battle_report_unit

// optional uint64 my_role_id = 1;
inline bool offical_battle_report_unit::has_my_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_battle_report_unit::set_has_my_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_battle_report_unit::clear_has_my_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_battle_report_unit::clear_my_role_id() {
  my_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_my_role_id();
}
inline ::google::protobuf::uint64 offical_battle_report_unit::my_role_id() const {
  return my_role_id_;
}
inline void offical_battle_report_unit::set_my_role_id(::google::protobuf::uint64 value) {
  set_has_my_role_id();
  my_role_id_ = value;
}

// optional string my_role_name = 2;
inline bool offical_battle_report_unit::has_my_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offical_battle_report_unit::set_has_my_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offical_battle_report_unit::clear_has_my_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offical_battle_report_unit::clear_my_role_name() {
  if (my_role_name_ != &::google::protobuf::internal::kEmptyString) {
    my_role_name_->clear();
  }
  clear_has_my_role_name();
}
inline const ::std::string& offical_battle_report_unit::my_role_name() const {
  return *my_role_name_;
}
inline void offical_battle_report_unit::set_my_role_name(const ::std::string& value) {
  set_has_my_role_name();
  if (my_role_name_ == &::google::protobuf::internal::kEmptyString) {
    my_role_name_ = new ::std::string;
  }
  my_role_name_->assign(value);
}
inline void offical_battle_report_unit::set_my_role_name(const char* value) {
  set_has_my_role_name();
  if (my_role_name_ == &::google::protobuf::internal::kEmptyString) {
    my_role_name_ = new ::std::string;
  }
  my_role_name_->assign(value);
}
inline void offical_battle_report_unit::set_my_role_name(const char* value, size_t size) {
  set_has_my_role_name();
  if (my_role_name_ == &::google::protobuf::internal::kEmptyString) {
    my_role_name_ = new ::std::string;
  }
  my_role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* offical_battle_report_unit::mutable_my_role_name() {
  set_has_my_role_name();
  if (my_role_name_ == &::google::protobuf::internal::kEmptyString) {
    my_role_name_ = new ::std::string;
  }
  return my_role_name_;
}
inline ::std::string* offical_battle_report_unit::release_my_role_name() {
  clear_has_my_role_name();
  if (my_role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = my_role_name_;
    my_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void offical_battle_report_unit::set_allocated_my_role_name(::std::string* my_role_name) {
  if (my_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete my_role_name_;
  }
  if (my_role_name) {
    set_has_my_role_name();
    my_role_name_ = my_role_name;
  } else {
    clear_has_my_role_name();
    my_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 my_role_sex = 3;
inline bool offical_battle_report_unit::has_my_role_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void offical_battle_report_unit::set_has_my_role_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void offical_battle_report_unit::clear_has_my_role_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void offical_battle_report_unit::clear_my_role_sex() {
  my_role_sex_ = 0;
  clear_has_my_role_sex();
}
inline ::google::protobuf::int32 offical_battle_report_unit::my_role_sex() const {
  return my_role_sex_;
}
inline void offical_battle_report_unit::set_my_role_sex(::google::protobuf::int32 value) {
  set_has_my_role_sex();
  my_role_sex_ = value;
}

// optional int32 my_role_lv = 4;
inline bool offical_battle_report_unit::has_my_role_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void offical_battle_report_unit::set_has_my_role_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void offical_battle_report_unit::clear_has_my_role_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void offical_battle_report_unit::clear_my_role_lv() {
  my_role_lv_ = 0;
  clear_has_my_role_lv();
}
inline ::google::protobuf::int32 offical_battle_report_unit::my_role_lv() const {
  return my_role_lv_;
}
inline void offical_battle_report_unit::set_my_role_lv(::google::protobuf::int32 value) {
  set_has_my_role_lv();
  my_role_lv_ = value;
}

// optional int32 my_old_ranking_id = 5;
inline bool offical_battle_report_unit::has_my_old_ranking_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void offical_battle_report_unit::set_has_my_old_ranking_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void offical_battle_report_unit::clear_has_my_old_ranking_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void offical_battle_report_unit::clear_my_old_ranking_id() {
  my_old_ranking_id_ = 0;
  clear_has_my_old_ranking_id();
}
inline ::google::protobuf::int32 offical_battle_report_unit::my_old_ranking_id() const {
  return my_old_ranking_id_;
}
inline void offical_battle_report_unit::set_my_old_ranking_id(::google::protobuf::int32 value) {
  set_has_my_old_ranking_id();
  my_old_ranking_id_ = value;
}

// optional int32 my_new_ranking_id = 6;
inline bool offical_battle_report_unit::has_my_new_ranking_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void offical_battle_report_unit::set_has_my_new_ranking_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void offical_battle_report_unit::clear_has_my_new_ranking_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void offical_battle_report_unit::clear_my_new_ranking_id() {
  my_new_ranking_id_ = 0;
  clear_has_my_new_ranking_id();
}
inline ::google::protobuf::int32 offical_battle_report_unit::my_new_ranking_id() const {
  return my_new_ranking_id_;
}
inline void offical_battle_report_unit::set_my_new_ranking_id(::google::protobuf::int32 value) {
  set_has_my_new_ranking_id();
  my_new_ranking_id_ = value;
}

// optional uint64 attacker_id = 7;
inline bool offical_battle_report_unit::has_attacker_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void offical_battle_report_unit::set_has_attacker_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void offical_battle_report_unit::clear_has_attacker_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void offical_battle_report_unit::clear_attacker_id() {
  attacker_id_ = GOOGLE_ULONGLONG(0);
  clear_has_attacker_id();
}
inline ::google::protobuf::uint64 offical_battle_report_unit::attacker_id() const {
  return attacker_id_;
}
inline void offical_battle_report_unit::set_attacker_id(::google::protobuf::uint64 value) {
  set_has_attacker_id();
  attacker_id_ = value;
}

// optional string attacker_name = 8;
inline bool offical_battle_report_unit::has_attacker_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void offical_battle_report_unit::set_has_attacker_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void offical_battle_report_unit::clear_has_attacker_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void offical_battle_report_unit::clear_attacker_name() {
  if (attacker_name_ != &::google::protobuf::internal::kEmptyString) {
    attacker_name_->clear();
  }
  clear_has_attacker_name();
}
inline const ::std::string& offical_battle_report_unit::attacker_name() const {
  return *attacker_name_;
}
inline void offical_battle_report_unit::set_attacker_name(const ::std::string& value) {
  set_has_attacker_name();
  if (attacker_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_name_ = new ::std::string;
  }
  attacker_name_->assign(value);
}
inline void offical_battle_report_unit::set_attacker_name(const char* value) {
  set_has_attacker_name();
  if (attacker_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_name_ = new ::std::string;
  }
  attacker_name_->assign(value);
}
inline void offical_battle_report_unit::set_attacker_name(const char* value, size_t size) {
  set_has_attacker_name();
  if (attacker_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_name_ = new ::std::string;
  }
  attacker_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* offical_battle_report_unit::mutable_attacker_name() {
  set_has_attacker_name();
  if (attacker_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_name_ = new ::std::string;
  }
  return attacker_name_;
}
inline ::std::string* offical_battle_report_unit::release_attacker_name() {
  clear_has_attacker_name();
  if (attacker_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attacker_name_;
    attacker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void offical_battle_report_unit::set_allocated_attacker_name(::std::string* attacker_name) {
  if (attacker_name_ != &::google::protobuf::internal::kEmptyString) {
    delete attacker_name_;
  }
  if (attacker_name) {
    set_has_attacker_name();
    attacker_name_ = attacker_name;
  } else {
    clear_has_attacker_name();
    attacker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 attacker_sex = 9;
inline bool offical_battle_report_unit::has_attacker_sex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void offical_battle_report_unit::set_has_attacker_sex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void offical_battle_report_unit::clear_has_attacker_sex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void offical_battle_report_unit::clear_attacker_sex() {
  attacker_sex_ = 0;
  clear_has_attacker_sex();
}
inline ::google::protobuf::int32 offical_battle_report_unit::attacker_sex() const {
  return attacker_sex_;
}
inline void offical_battle_report_unit::set_attacker_sex(::google::protobuf::int32 value) {
  set_has_attacker_sex();
  attacker_sex_ = value;
}

// optional int32 attacker_lv = 10;
inline bool offical_battle_report_unit::has_attacker_lv() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void offical_battle_report_unit::set_has_attacker_lv() {
  _has_bits_[0] |= 0x00000200u;
}
inline void offical_battle_report_unit::clear_has_attacker_lv() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void offical_battle_report_unit::clear_attacker_lv() {
  attacker_lv_ = 0;
  clear_has_attacker_lv();
}
inline ::google::protobuf::int32 offical_battle_report_unit::attacker_lv() const {
  return attacker_lv_;
}
inline void offical_battle_report_unit::set_attacker_lv(::google::protobuf::int32 value) {
  set_has_attacker_lv();
  attacker_lv_ = value;
}

// optional int32 attacker_old_ranking_id = 12;
inline bool offical_battle_report_unit::has_attacker_old_ranking_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void offical_battle_report_unit::set_has_attacker_old_ranking_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void offical_battle_report_unit::clear_has_attacker_old_ranking_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void offical_battle_report_unit::clear_attacker_old_ranking_id() {
  attacker_old_ranking_id_ = 0;
  clear_has_attacker_old_ranking_id();
}
inline ::google::protobuf::int32 offical_battle_report_unit::attacker_old_ranking_id() const {
  return attacker_old_ranking_id_;
}
inline void offical_battle_report_unit::set_attacker_old_ranking_id(::google::protobuf::int32 value) {
  set_has_attacker_old_ranking_id();
  attacker_old_ranking_id_ = value;
}

// optional int32 attacker_new_ranking_id = 13;
inline bool offical_battle_report_unit::has_attacker_new_ranking_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void offical_battle_report_unit::set_has_attacker_new_ranking_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void offical_battle_report_unit::clear_has_attacker_new_ranking_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void offical_battle_report_unit::clear_attacker_new_ranking_id() {
  attacker_new_ranking_id_ = 0;
  clear_has_attacker_new_ranking_id();
}
inline ::google::protobuf::int32 offical_battle_report_unit::attacker_new_ranking_id() const {
  return attacker_new_ranking_id_;
}
inline void offical_battle_report_unit::set_attacker_new_ranking_id(::google::protobuf::int32 value) {
  set_has_attacker_new_ranking_id();
  attacker_new_ranking_id_ = value;
}

// optional bool win = 14;
inline bool offical_battle_report_unit::has_win() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void offical_battle_report_unit::set_has_win() {
  _has_bits_[0] |= 0x00001000u;
}
inline void offical_battle_report_unit::clear_has_win() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void offical_battle_report_unit::clear_win() {
  win_ = false;
  clear_has_win();
}
inline bool offical_battle_report_unit::win() const {
  return win_;
}
inline void offical_battle_report_unit::set_win(bool value) {
  set_has_win();
  win_ = value;
}

// optional int32 battle_time = 15;
inline bool offical_battle_report_unit::has_battle_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void offical_battle_report_unit::set_has_battle_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void offical_battle_report_unit::clear_has_battle_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void offical_battle_report_unit::clear_battle_time() {
  battle_time_ = 0;
  clear_has_battle_time();
}
inline ::google::protobuf::int32 offical_battle_report_unit::battle_time() const {
  return battle_time_;
}
inline void offical_battle_report_unit::set_battle_time(::google::protobuf::int32 value) {
  set_has_battle_time();
  battle_time_ = value;
}

// optional uint64 battle_id = 16;
inline bool offical_battle_report_unit::has_battle_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void offical_battle_report_unit::set_has_battle_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void offical_battle_report_unit::clear_has_battle_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void offical_battle_report_unit::clear_battle_id() {
  battle_id_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_id();
}
inline ::google::protobuf::uint64 offical_battle_report_unit::battle_id() const {
  return battle_id_;
}
inline void offical_battle_report_unit::set_battle_id(::google::protobuf::uint64 value) {
  set_has_battle_id();
  battle_id_ = value;
}

// optional int32 grade = 17;
inline bool offical_battle_report_unit::has_grade() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void offical_battle_report_unit::set_has_grade() {
  _has_bits_[0] |= 0x00008000u;
}
inline void offical_battle_report_unit::clear_has_grade() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void offical_battle_report_unit::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 offical_battle_report_unit::grade() const {
  return grade_;
}
inline void offical_battle_report_unit::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// repeated .SProtoSpace.hero_base_info heros = 18;
inline int offical_battle_report_unit::heros_size() const {
  return heros_.size();
}
inline void offical_battle_report_unit::clear_heros() {
  heros_.Clear();
}
inline const ::SProtoSpace::hero_base_info& offical_battle_report_unit::heros(int index) const {
  return heros_.Get(index);
}
inline ::SProtoSpace::hero_base_info* offical_battle_report_unit::mutable_heros(int index) {
  return heros_.Mutable(index);
}
inline ::SProtoSpace::hero_base_info* offical_battle_report_unit::add_heros() {
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info >&
offical_battle_report_unit::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info >*
offical_battle_report_unit::mutable_heros() {
  return &heros_;
}

// -------------------------------------------------------------------

// talent_data

// optional int32 id = 1;
inline bool talent_data::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void talent_data::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void talent_data::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void talent_data::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 talent_data::id() const {
  return id_;
}
inline void talent_data::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .SProtoSpace.TALENT_STATUS status = 2;
inline bool talent_data::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void talent_data::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void talent_data::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void talent_data::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::SProtoSpace::TALENT_STATUS talent_data::status() const {
  return static_cast< ::SProtoSpace::TALENT_STATUS >(status_);
}
inline void talent_data::set_status(::SProtoSpace::TALENT_STATUS value) {
  assert(::SProtoSpace::TALENT_STATUS_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// talent_battlt_data

// optional .SProtoSpace.EAttribute type = 1;
inline bool talent_battlt_data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void talent_battlt_data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void talent_battlt_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void talent_battlt_data::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::SProtoSpace::EAttribute talent_battlt_data::type() const {
  return static_cast< ::SProtoSpace::EAttribute >(type_);
}
inline void talent_battlt_data::set_type(::SProtoSpace::EAttribute value) {
  assert(::SProtoSpace::EAttribute_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional float values = 2;
inline bool talent_battlt_data::has_values() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void talent_battlt_data::set_has_values() {
  _has_bits_[0] |= 0x00000002u;
}
inline void talent_battlt_data::clear_has_values() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void talent_battlt_data::clear_values() {
  values_ = 0;
  clear_has_values();
}
inline float talent_battlt_data::values() const {
  return values_;
}
inline void talent_battlt_data::set_values(float value) {
  set_has_values();
  values_ = value;
}

// -------------------------------------------------------------------

// cli_unit_role_fashion

// optional int32 config_id = 1;
inline bool cli_unit_role_fashion::has_config_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cli_unit_role_fashion::set_has_config_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cli_unit_role_fashion::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cli_unit_role_fashion::clear_config_id() {
  config_id_ = 0;
  clear_has_config_id();
}
inline ::google::protobuf::int32 cli_unit_role_fashion::config_id() const {
  return config_id_;
}
inline void cli_unit_role_fashion::set_config_id(::google::protobuf::int32 value) {
  set_has_config_id();
  config_id_ = value;
}

// optional uint64 uuid = 2;
inline bool cli_unit_role_fashion::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cli_unit_role_fashion::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cli_unit_role_fashion::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cli_unit_role_fashion::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 cli_unit_role_fashion::uuid() const {
  return uuid_;
}
inline void cli_unit_role_fashion::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 time_invalid = 3;
inline bool cli_unit_role_fashion::has_time_invalid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cli_unit_role_fashion::set_has_time_invalid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cli_unit_role_fashion::clear_has_time_invalid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cli_unit_role_fashion::clear_time_invalid() {
  time_invalid_ = 0u;
  clear_has_time_invalid();
}
inline ::google::protobuf::uint32 cli_unit_role_fashion::time_invalid() const {
  return time_invalid_;
}
inline void cli_unit_role_fashion::set_time_invalid(::google::protobuf::uint32 value) {
  set_has_time_invalid();
  time_invalid_ = value;
}

// -------------------------------------------------------------------

// fashions_pack

// repeated .SProtoSpace.cli_unit_role_fashion fashions = 1;
inline int fashions_pack::fashions_size() const {
  return fashions_.size();
}
inline void fashions_pack::clear_fashions() {
  fashions_.Clear();
}
inline const ::SProtoSpace::cli_unit_role_fashion& fashions_pack::fashions(int index) const {
  return fashions_.Get(index);
}
inline ::SProtoSpace::cli_unit_role_fashion* fashions_pack::mutable_fashions(int index) {
  return fashions_.Mutable(index);
}
inline ::SProtoSpace::cli_unit_role_fashion* fashions_pack::add_fashions() {
  return fashions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::cli_unit_role_fashion >&
fashions_pack::fashions() const {
  return fashions_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::cli_unit_role_fashion >*
fashions_pack::mutable_fashions() {
  return &fashions_;
}

// optional uint64 role_id = 2;
inline bool fashions_pack::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fashions_pack::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fashions_pack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fashions_pack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 fashions_pack::role_id() const {
  return role_id_;
}
inline void fashions_pack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool fashions_pack::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fashions_pack::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fashions_pack::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fashions_pack::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& fashions_pack::role_name() const {
  return *role_name_;
}
inline void fashions_pack::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void fashions_pack::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void fashions_pack::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fashions_pack::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* fashions_pack::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fashions_pack::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// red_pt_info

// optional .SProtoSpace.eRedPtType type_id = 1;
inline bool red_pt_info::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void red_pt_info::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void red_pt_info::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void red_pt_info::clear_type_id() {
  type_id_ = 1;
  clear_has_type_id();
}
inline ::SProtoSpace::eRedPtType red_pt_info::type_id() const {
  return static_cast< ::SProtoSpace::eRedPtType >(type_id_);
}
inline void red_pt_info::set_type_id(::SProtoSpace::eRedPtType value) {
  assert(::SProtoSpace::eRedPtType_IsValid(value));
  set_has_type_id();
  type_id_ = value;
}

// optional bool is_show = 2;
inline bool red_pt_info::has_is_show() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void red_pt_info::set_has_is_show() {
  _has_bits_[0] |= 0x00000002u;
}
inline void red_pt_info::clear_has_is_show() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void red_pt_info::clear_is_show() {
  is_show_ = false;
  clear_has_is_show();
}
inline bool red_pt_info::is_show() const {
  return is_show_;
}
inline void red_pt_info::set_is_show(bool value) {
  set_has_is_show();
  is_show_ = value;
}

// optional int32 count = 3;
inline bool red_pt_info::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void red_pt_info::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void red_pt_info::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void red_pt_info::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 red_pt_info::count() const {
  return count_;
}
inline void red_pt_info::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 add_count = 4;
inline bool red_pt_info::has_add_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void red_pt_info::set_has_add_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void red_pt_info::clear_has_add_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void red_pt_info::clear_add_count() {
  add_count_ = 0;
  clear_has_add_count();
}
inline ::google::protobuf::int32 red_pt_info::add_count() const {
  return add_count_;
}
inline void red_pt_info::set_add_count(::google::protobuf::int32 value) {
  set_has_add_count();
  add_count_ = value;
}

// -------------------------------------------------------------------

// red_pt_infos

// repeated .SProtoSpace.red_pt_info infos = 1;
inline int red_pt_infos::infos_size() const {
  return infos_.size();
}
inline void red_pt_infos::clear_infos() {
  infos_.Clear();
}
inline const ::SProtoSpace::red_pt_info& red_pt_infos::infos(int index) const {
  return infos_.Get(index);
}
inline ::SProtoSpace::red_pt_info* red_pt_infos::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::SProtoSpace::red_pt_info* red_pt_infos::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::red_pt_info >&
red_pt_infos::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::red_pt_info >*
red_pt_infos::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// match_interval

// optional int32 week_day = 1;
inline bool match_interval::has_week_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void match_interval::set_has_week_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void match_interval::clear_has_week_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void match_interval::clear_week_day() {
  week_day_ = 0;
  clear_has_week_day();
}
inline ::google::protobuf::int32 match_interval::week_day() const {
  return week_day_;
}
inline void match_interval::set_week_day(::google::protobuf::int32 value) {
  set_has_week_day();
  week_day_ = value;
}

// optional int32 start_time = 2;
inline bool match_interval::has_start_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void match_interval::set_has_start_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void match_interval::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void match_interval::clear_start_time() {
  start_time_ = 0;
  clear_has_start_time();
}
inline ::google::protobuf::int32 match_interval::start_time() const {
  return start_time_;
}
inline void match_interval::set_start_time(::google::protobuf::int32 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional int32 end_time = 3;
inline bool match_interval::has_end_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void match_interval::set_has_end_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void match_interval::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void match_interval::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
inline ::google::protobuf::int32 match_interval::end_time() const {
  return end_time_;
}
inline void match_interval::set_end_time(::google::protobuf::int32 value) {
  set_has_end_time();
  end_time_ = value;
}

// -------------------------------------------------------------------

// grade_match_conf

// optional int32 grade = 1;
inline bool grade_match_conf::has_grade() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void grade_match_conf::set_has_grade() {
  _has_bits_[0] |= 0x00000001u;
}
inline void grade_match_conf::clear_has_grade() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void grade_match_conf::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 grade_match_conf::grade() const {
  return grade_;
}
inline void grade_match_conf::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// repeated .SProtoSpace.match_interval apply = 2;
inline int grade_match_conf::apply_size() const {
  return apply_.size();
}
inline void grade_match_conf::clear_apply() {
  apply_.Clear();
}
inline const ::SProtoSpace::match_interval& grade_match_conf::apply(int index) const {
  return apply_.Get(index);
}
inline ::SProtoSpace::match_interval* grade_match_conf::mutable_apply(int index) {
  return apply_.Mutable(index);
}
inline ::SProtoSpace::match_interval* grade_match_conf::add_apply() {
  return apply_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::match_interval >&
grade_match_conf::apply() const {
  return apply_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::match_interval >*
grade_match_conf::mutable_apply() {
  return &apply_;
}

// repeated .SProtoSpace.match_interval settle = 3;
inline int grade_match_conf::settle_size() const {
  return settle_.size();
}
inline void grade_match_conf::clear_settle() {
  settle_.Clear();
}
inline const ::SProtoSpace::match_interval& grade_match_conf::settle(int index) const {
  return settle_.Get(index);
}
inline ::SProtoSpace::match_interval* grade_match_conf::mutable_settle(int index) {
  return settle_.Mutable(index);
}
inline ::SProtoSpace::match_interval* grade_match_conf::add_settle() {
  return settle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::match_interval >&
grade_match_conf::settle() const {
  return settle_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::match_interval >*
grade_match_conf::mutable_settle() {
  return &settle_;
}

// -------------------------------------------------------------------

// single_plot_little_game

// optional int32 cfg_id = 1;
inline bool single_plot_little_game::has_cfg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void single_plot_little_game::set_has_cfg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void single_plot_little_game::clear_has_cfg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void single_plot_little_game::clear_cfg_id() {
  cfg_id_ = 0;
  clear_has_cfg_id();
}
inline ::google::protobuf::int32 single_plot_little_game::cfg_id() const {
  return cfg_id_;
}
inline void single_plot_little_game::set_cfg_id(::google::protobuf::int32 value) {
  set_has_cfg_id();
  cfg_id_ = value;
}

// optional int32 state = 2;
inline bool single_plot_little_game::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void single_plot_little_game::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void single_plot_little_game::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void single_plot_little_game::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 single_plot_little_game::state() const {
  return state_;
}
inline void single_plot_little_game::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// pack_plot_little_game

// repeated .SProtoSpace.single_plot_little_game plot_little_game_s = 1;
inline int pack_plot_little_game::plot_little_game_s_size() const {
  return plot_little_game_s_.size();
}
inline void pack_plot_little_game::clear_plot_little_game_s() {
  plot_little_game_s_.Clear();
}
inline const ::SProtoSpace::single_plot_little_game& pack_plot_little_game::plot_little_game_s(int index) const {
  return plot_little_game_s_.Get(index);
}
inline ::SProtoSpace::single_plot_little_game* pack_plot_little_game::mutable_plot_little_game_s(int index) {
  return plot_little_game_s_.Mutable(index);
}
inline ::SProtoSpace::single_plot_little_game* pack_plot_little_game::add_plot_little_game_s() {
  return plot_little_game_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::single_plot_little_game >&
pack_plot_little_game::plot_little_game_s() const {
  return plot_little_game_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::single_plot_little_game >*
pack_plot_little_game::mutable_plot_little_game_s() {
  return &plot_little_game_s_;
}

// -------------------------------------------------------------------

// pet_attr_state

// optional int32 type = 1;
inline bool pet_attr_state::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_attr_state::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_attr_state::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_attr_state::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 pet_attr_state::type() const {
  return type_;
}
inline void pet_attr_state::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 value = 2;
inline bool pet_attr_state::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_attr_state::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_attr_state::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_attr_state::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 pet_attr_state::value() const {
  return value_;
}
inline void pet_attr_state::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// pet_out_event_item

// optional int32 item_id = 1;
inline bool pet_out_event_item::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_out_event_item::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_out_event_item::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_out_event_item::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 pet_out_event_item::item_id() const {
  return item_id_;
}
inline void pet_out_event_item::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 item_count = 2;
inline bool pet_out_event_item::has_item_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_out_event_item::set_has_item_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_out_event_item::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_out_event_item::clear_item_count() {
  item_count_ = 0;
  clear_has_item_count();
}
inline ::google::protobuf::int32 pet_out_event_item::item_count() const {
  return item_count_;
}
inline void pet_out_event_item::set_item_count(::google::protobuf::int32 value) {
  set_has_item_count();
  item_count_ = value;
}

// -------------------------------------------------------------------

// pet_out_event_data

// optional int32 cfg_id = 1;
inline bool pet_out_event_data::has_cfg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_out_event_data::set_has_cfg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_out_event_data::clear_has_cfg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_out_event_data::clear_cfg_id() {
  cfg_id_ = 0;
  clear_has_cfg_id();
}
inline ::google::protobuf::int32 pet_out_event_data::cfg_id() const {
  return cfg_id_;
}
inline void pet_out_event_data::set_cfg_id(::google::protobuf::int32 value) {
  set_has_cfg_id();
  cfg_id_ = value;
}

// optional int32 done_time = 2;
inline bool pet_out_event_data::has_done_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_out_event_data::set_has_done_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_out_event_data::clear_has_done_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_out_event_data::clear_done_time() {
  done_time_ = 0;
  clear_has_done_time();
}
inline ::google::protobuf::int32 pet_out_event_data::done_time() const {
  return done_time_;
}
inline void pet_out_event_data::set_done_time(::google::protobuf::int32 value) {
  set_has_done_time();
  done_time_ = value;
}

// repeated .SProtoSpace.pet_out_event_item item_s = 3;
inline int pet_out_event_data::item_s_size() const {
  return item_s_.size();
}
inline void pet_out_event_data::clear_item_s() {
  item_s_.Clear();
}
inline const ::SProtoSpace::pet_out_event_item& pet_out_event_data::item_s(int index) const {
  return item_s_.Get(index);
}
inline ::SProtoSpace::pet_out_event_item* pet_out_event_data::mutable_item_s(int index) {
  return item_s_.Mutable(index);
}
inline ::SProtoSpace::pet_out_event_item* pet_out_event_data::add_item_s() {
  return item_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_out_event_item >&
pet_out_event_data::item_s() const {
  return item_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_out_event_item >*
pet_out_event_data::mutable_item_s() {
  return &item_s_;
}

// -------------------------------------------------------------------

// pet_single_data

// optional int32 cfg_id = 1;
inline bool pet_single_data::has_cfg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_single_data::set_has_cfg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_single_data::clear_has_cfg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_single_data::clear_cfg_id() {
  cfg_id_ = 0;
  clear_has_cfg_id();
}
inline ::google::protobuf::int32 pet_single_data::cfg_id() const {
  return cfg_id_;
}
inline void pet_single_data::set_cfg_id(::google::protobuf::int32 value) {
  set_has_cfg_id();
  cfg_id_ = value;
}

// repeated .SProtoSpace.pet_attr_state state_s = 2;
inline int pet_single_data::state_s_size() const {
  return state_s_.size();
}
inline void pet_single_data::clear_state_s() {
  state_s_.Clear();
}
inline const ::SProtoSpace::pet_attr_state& pet_single_data::state_s(int index) const {
  return state_s_.Get(index);
}
inline ::SProtoSpace::pet_attr_state* pet_single_data::mutable_state_s(int index) {
  return state_s_.Mutable(index);
}
inline ::SProtoSpace::pet_attr_state* pet_single_data::add_state_s() {
  return state_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_attr_state >&
pet_single_data::state_s() const {
  return state_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_attr_state >*
pet_single_data::mutable_state_s() {
  return &state_s_;
}

// optional int32 lv = 3;
inline bool pet_single_data::has_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_single_data::set_has_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_single_data::clear_has_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_single_data::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 pet_single_data::lv() const {
  return lv_;
}
inline void pet_single_data::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 cur_lv_exp = 4;
inline bool pet_single_data::has_cur_lv_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pet_single_data::set_has_cur_lv_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pet_single_data::clear_has_cur_lv_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pet_single_data::clear_cur_lv_exp() {
  cur_lv_exp_ = 0;
  clear_has_cur_lv_exp();
}
inline ::google::protobuf::int32 pet_single_data::cur_lv_exp() const {
  return cur_lv_exp_;
}
inline void pet_single_data::set_cur_lv_exp(::google::protobuf::int32 value) {
  set_has_cur_lv_exp();
  cur_lv_exp_ = value;
}

// optional uint32 out_time = 5;
inline bool pet_single_data::has_out_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pet_single_data::set_has_out_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pet_single_data::clear_has_out_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pet_single_data::clear_out_time() {
  out_time_ = 0u;
  clear_has_out_time();
}
inline ::google::protobuf::uint32 pet_single_data::out_time() const {
  return out_time_;
}
inline void pet_single_data::set_out_time(::google::protobuf::uint32 value) {
  set_has_out_time();
  out_time_ = value;
}

// optional uint32 back_time = 6;
inline bool pet_single_data::has_back_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pet_single_data::set_has_back_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pet_single_data::clear_has_back_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pet_single_data::clear_back_time() {
  back_time_ = 0u;
  clear_has_back_time();
}
inline ::google::protobuf::uint32 pet_single_data::back_time() const {
  return back_time_;
}
inline void pet_single_data::set_back_time(::google::protobuf::uint32 value) {
  set_has_back_time();
  back_time_ = value;
}

// optional int32 out_story_id = 7;
inline bool pet_single_data::has_out_story_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pet_single_data::set_has_out_story_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pet_single_data::clear_has_out_story_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pet_single_data::clear_out_story_id() {
  out_story_id_ = 0;
  clear_has_out_story_id();
}
inline ::google::protobuf::int32 pet_single_data::out_story_id() const {
  return out_story_id_;
}
inline void pet_single_data::set_out_story_id(::google::protobuf::int32 value) {
  set_has_out_story_id();
  out_story_id_ = value;
}

// repeated .SProtoSpace.pet_out_event_data out_event_s = 8;
inline int pet_single_data::out_event_s_size() const {
  return out_event_s_.size();
}
inline void pet_single_data::clear_out_event_s() {
  out_event_s_.Clear();
}
inline const ::SProtoSpace::pet_out_event_data& pet_single_data::out_event_s(int index) const {
  return out_event_s_.Get(index);
}
inline ::SProtoSpace::pet_out_event_data* pet_single_data::mutable_out_event_s(int index) {
  return out_event_s_.Mutable(index);
}
inline ::SProtoSpace::pet_out_event_data* pet_single_data::add_out_event_s() {
  return out_event_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_out_event_data >&
pet_single_data::out_event_s() const {
  return out_event_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_out_event_data >*
pet_single_data::mutable_out_event_s() {
  return &out_event_s_;
}

// optional string name = 9;
inline bool pet_single_data::has_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pet_single_data::set_has_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pet_single_data::clear_has_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pet_single_data::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& pet_single_data::name() const {
  return *name_;
}
inline void pet_single_data::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void pet_single_data::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void pet_single_data::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pet_single_data::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* pet_single_data::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pet_single_data::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 last_update_time = 10;
inline bool pet_single_data::has_last_update_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pet_single_data::set_has_last_update_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pet_single_data::clear_has_last_update_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pet_single_data::clear_last_update_time() {
  last_update_time_ = 0u;
  clear_has_last_update_time();
}
inline ::google::protobuf::uint32 pet_single_data::last_update_time() const {
  return last_update_time_;
}
inline void pet_single_data::set_last_update_time(::google::protobuf::uint32 value) {
  set_has_last_update_time();
  last_update_time_ = value;
}

// -------------------------------------------------------------------

// pet_pack_data

// repeated .SProtoSpace.pet_single_data pet_s = 1;
inline int pet_pack_data::pet_s_size() const {
  return pet_s_.size();
}
inline void pet_pack_data::clear_pet_s() {
  pet_s_.Clear();
}
inline const ::SProtoSpace::pet_single_data& pet_pack_data::pet_s(int index) const {
  return pet_s_.Get(index);
}
inline ::SProtoSpace::pet_single_data* pet_pack_data::mutable_pet_s(int index) {
  return pet_s_.Mutable(index);
}
inline ::SProtoSpace::pet_single_data* pet_pack_data::add_pet_s() {
  return pet_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_single_data >&
pet_pack_data::pet_s() const {
  return pet_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_single_data >*
pet_pack_data::mutable_pet_s() {
  return &pet_s_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::UserStatus>() {
  return ::SProtoSpace::UserStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eCommonDefine>() {
  return ::SProtoSpace::eCommonDefine_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eCreateResult>() {
  return ::SProtoSpace::eCreateResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eEnterGameAck>() {
  return ::SProtoSpace::eEnterGameAck_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EQuerySceneType>() {
  return ::SProtoSpace::EQuerySceneType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ECreateSceneType>() {
  return ::SProtoSpace::ECreateSceneType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ESceneType>() {
  return ::SProtoSpace::ESceneType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EChat3DSceneType>() {
  return ::SProtoSpace::EChat3DSceneType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EAreaState>() {
  return ::SProtoSpace::EAreaState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EAwardType>() {
  return ::SProtoSpace::EAwardType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EToyCurrencyType>() {
  return ::SProtoSpace::EToyCurrencyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EQArardType>() {
  return ::SProtoSpace::EQArardType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EBagType>() {
  return ::SProtoSpace::EBagType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EItemClass>() {
  return ::SProtoSpace::EItemClass_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EItemType>() {
  return ::SProtoSpace::EItemType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EItemUseType>() {
  return ::SProtoSpace::EItemUseType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EItemUseConditionType>() {
  return ::SProtoSpace::EItemUseConditionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EItemUseGetType>() {
  return ::SProtoSpace::EItemUseGetType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EOperaType>() {
  return ::SProtoSpace::EOperaType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eKickoutReason>() {
  return ::SProtoSpace::eKickoutReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EAttribute>() {
  return ::SProtoSpace::EAttribute_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EEffect>() {
  return ::SProtoSpace::EEffect_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ERoleSexType>() {
  return ::SProtoSpace::ERoleSexType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ESoulSlot>() {
  return ::SProtoSpace::ESoulSlot_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EHeroEquipSlot>() {
  return ::SProtoSpace::EHeroEquipSlot_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EHeroTalismanSlot>() {
  return ::SProtoSpace::EHeroTalismanSlot_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ETalismanChangeType>() {
  return ::SProtoSpace::ETalismanChangeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ETalismanDestType>() {
  return ::SProtoSpace::ETalismanDestType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EOperatorType>() {
  return ::SProtoSpace::EOperatorType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EOperatorDataType>() {
  return ::SProtoSpace::EOperatorDataType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ESkillCfgOptType>() {
  return ::SProtoSpace::ESkillCfgOptType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ESkinOpenType>() {
  return ::SProtoSpace::ESkinOpenType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EFormtionHeroType>() {
  return ::SProtoSpace::EFormtionHeroType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ERoleEventType>() {
  return ::SProtoSpace::ERoleEventType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EHeroInfoChangeTag>() {
  return ::SProtoSpace::EHeroInfoChangeTag_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eItemPropertyType>() {
  return ::SProtoSpace::eItemPropertyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eItemFlagBits>() {
  return ::SProtoSpace::eItemFlagBits_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eDBGetRedisRoleDataType>() {
  return ::SProtoSpace::eDBGetRedisRoleDataType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eChestQuality>() {
  return ::SProtoSpace::eChestQuality_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eMemberStatus>() {
  return ::SProtoSpace::eMemberStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eTeamSize>() {
  return ::SProtoSpace::eTeamSize_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eTeamType>() {
  return ::SProtoSpace::eTeamType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eTeamPermission>() {
  return ::SProtoSpace::eTeamPermission_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eTeamStatus>() {
  return ::SProtoSpace::eTeamStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eArenaType>() {
  return ::SProtoSpace::eArenaType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EGrade>() {
  return ::SProtoSpace::EGrade_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EGradeType>() {
  return ::SProtoSpace::EGradeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eOfficeTestProgress>() {
  return ::SProtoSpace::eOfficeTestProgress_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::GET_PLOT_TYPE>() {
  return ::SProtoSpace::GET_PLOT_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ECHARACTER_ATTRIBUTE_TYPE>() {
  return ::SProtoSpace::ECHARACTER_ATTRIBUTE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::RANK_TYPE>() {
  return ::SProtoSpace::RANK_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ERoyalEventResult>() {
  return ::SProtoSpace::ERoyalEventResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::TASK_TYPE>() {
  return ::SProtoSpace::TASK_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::SKILL_STATUS>() {
  return ::SProtoSpace::SKILL_STATUS_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::TALENT_STATUS>() {
  return ::SProtoSpace::TALENT_STATUS_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::PLAYER_SKILL_TYPE>() {
  return ::SProtoSpace::PLAYER_SKILL_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eDiscoveryMoppingType>() {
  return ::SProtoSpace::eDiscoveryMoppingType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::CHAT_TYPE>() {
  return ::SProtoSpace::CHAT_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::DAILY_FORTUNE_TYPE>() {
  return ::SProtoSpace::DAILY_FORTUNE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EItemAttrType>() {
  return ::SProtoSpace::EItemAttrType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eMailPriority>() {
  return ::SProtoSpace::eMailPriority_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eMailClientType>() {
  return ::SProtoSpace::eMailClientType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eMailServerType>() {
  return ::SProtoSpace::eMailServerType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eMailLogicType>() {
  return ::SProtoSpace::eMailLogicType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eSendMailType>() {
  return ::SProtoSpace::eSendMailType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eFashionPos>() {
  return ::SProtoSpace::eFashionPos_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eFlowerRewardType>() {
  return ::SProtoSpace::eFlowerRewardType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eEventMsgType>() {
  return ::SProtoSpace::eEventMsgType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::FASHION_POSITION>() {
  return ::SProtoSpace::FASHION_POSITION_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::FASHION_STATE>() {
  return ::SProtoSpace::FASHION_STATE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::FASHION_GENDER>() {
  return ::SProtoSpace::FASHION_GENDER_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eRedPtType>() {
  return ::SProtoSpace::eRedPtType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cm_5froletype_2eproto__INCLUDED
