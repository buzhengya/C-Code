// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_activity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_activity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* game_job_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_job_reflection_ = NULL;
const ::google::protobuf::Descriptor* job_all_list_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  job_all_list_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* job_update_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  job_update_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* job_operation_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  job_operation_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* job_operation_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  job_operation_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* all_quests_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  all_quests_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* quests_update_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  quests_update_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* finish_quest_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  finish_quest_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* finish_quest_ack_rewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  finish_quest_ack_rewards_reflection_ = NULL;
const ::google::protobuf::Descriptor* finish_quest_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  finish_quest_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_quest_activity_reward_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_quest_activity_reward_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_quest_activity_reward_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_quest_activity_reward_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* shop_get_all_item_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shop_get_all_item_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* shop_get_all_item_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shop_get_all_item_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* shop_buy_item_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shop_buy_item_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* shop_buy_item_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shop_buy_item_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* shop_refresh_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shop_refresh_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* shop_refresh_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shop_refresh_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* shop_item_opt_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shop_item_opt_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* shop_item_opt_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shop_item_opt_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* shop_open_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shop_open_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_officer_apply_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_officer_apply_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_officer_apply_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_officer_apply_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* officer_daily_salary_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  officer_daily_salary_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* officer_daily_salary_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  officer_daily_salary_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* officer_result_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  officer_result_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_officer_applicants_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_officer_applicants_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_officer_applicants_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_officer_applicants_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* cancel_officer_apply_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cancel_officer_apply_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* cancel_officer_apply_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cancel_officer_apply_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* share_officer_upgrade_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  share_officer_upgrade_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* share_officer_upgrade_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  share_officer_upgrade_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_share_officer_upgrade_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_share_officer_upgrade_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_share_officer_upgrade_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_share_officer_upgrade_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_offical_first_award_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_offical_first_award_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_offical_first_award_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_offical_first_award_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_offical_first_award_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_offical_first_award_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_offical_challenge_roles_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_offical_challenge_roles_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_offical_challenge_roles_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_offical_challenge_roles_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* add_offical_challenge_num_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  add_offical_challenge_num_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* add_offical_challenge_num_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  add_offical_challenge_num_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* offical_battle_report_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offical_battle_report_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* offical_battle_report_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offical_battle_report_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* office_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  office_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_offical_member_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_offical_member_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_offical_member_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_offical_member_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_global_offical_rank_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_global_offical_rank_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_global_offical_rank_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_global_offical_rank_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_tower_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_tower_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_tower_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_tower_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* select_tower_floor_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  select_tower_floor_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* select_tower_floor_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  select_tower_floor_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* tower_die_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tower_die_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* tower_die_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tower_die_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* tower_step_fini_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tower_step_fini_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* tower_step_fini_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tower_step_fini_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* question_check_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  question_check_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* question_check_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  question_check_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_tower_info_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_tower_info_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* tower_raids_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tower_raids_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* tower_raids_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tower_raids_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* tower_reset_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tower_reset_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* tower_reset_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tower_reset_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* tower_reward_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tower_reward_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* question_find_wrong_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  question_find_wrong_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* question_find_wrong_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  question_find_wrong_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_adv_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_adv_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_adv_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_adv_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* select_adv_city_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  select_adv_city_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* select_adv_city_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  select_adv_city_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* adv_event_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  adv_event_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* adv_event_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  adv_event_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* adv_reward_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  adv_reward_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* adv_ask_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  adv_ask_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* adv_ask_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  adv_ask_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* adv_tujian_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  adv_tujian_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* adv_tujian_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  adv_tujian_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* leave_adv_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  leave_adv_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* leave_adv_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  leave_adv_ack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5factivity_2eproto() {
  protobuf_AddDesc_cs_5factivity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_activity.proto");
  GOOGLE_CHECK(file != NULL);
  game_job_descriptor_ = file->message_type(0);
  static const int game_job_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_job, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_job, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_job, is_receive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_job, cur_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_job, max_step_),
  };
  game_job_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_job_descriptor_,
      game_job::default_instance_,
      game_job_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_job, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_job, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_job));
  job_all_list_ntf_descriptor_ = file->message_type(1);
  static const int job_all_list_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_all_list_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_all_list_ntf, job_s_),
  };
  job_all_list_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      job_all_list_ntf_descriptor_,
      job_all_list_ntf::default_instance_,
      job_all_list_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_all_list_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_all_list_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(job_all_list_ntf));
  job_update_ntf_descriptor_ = file->message_type(2);
  static const int job_update_ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_update_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_update_ntf, add_job_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_update_ntf, del_job_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_update_ntf, fix_job_s_),
  };
  job_update_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      job_update_ntf_descriptor_,
      job_update_ntf::default_instance_,
      job_update_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_update_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_update_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(job_update_ntf));
  job_operation_req_descriptor_ = file->message_type(3);
  static const int job_operation_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_operation_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_operation_req, tpye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_operation_req, job_id_),
  };
  job_operation_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      job_operation_req_descriptor_,
      job_operation_req::default_instance_,
      job_operation_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_operation_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_operation_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(job_operation_req));
  job_operation_ack_descriptor_ = file->message_type(4);
  static const int job_operation_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_operation_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_operation_ack, ret_),
  };
  job_operation_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      job_operation_ack_descriptor_,
      job_operation_ack::default_instance_,
      job_operation_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_operation_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(job_operation_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(job_operation_ack));
  all_quests_ntf_descriptor_ = file->message_type(5);
  static const int all_quests_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_quests_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_quests_ntf, quests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_quests_ntf, activities_),
  };
  all_quests_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      all_quests_ntf_descriptor_,
      all_quests_ntf::default_instance_,
      all_quests_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_quests_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_quests_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(all_quests_ntf));
  quests_update_ntf_descriptor_ = file->message_type(6);
  static const int quests_update_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quests_update_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quests_update_ntf, quests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quests_update_ntf, activities_),
  };
  quests_update_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      quests_update_ntf_descriptor_,
      quests_update_ntf::default_instance_,
      quests_update_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quests_update_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quests_update_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(quests_update_ntf));
  finish_quest_req_descriptor_ = file->message_type(7);
  static const int finish_quest_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_quest_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_quest_req, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_quest_req, type_),
  };
  finish_quest_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      finish_quest_req_descriptor_,
      finish_quest_req::default_instance_,
      finish_quest_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_quest_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_quest_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(finish_quest_req));
  finish_quest_ack_rewards_descriptor_ = file->message_type(8);
  static const int finish_quest_ack_rewards_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_quest_ack_rewards, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_quest_ack_rewards, count_),
  };
  finish_quest_ack_rewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      finish_quest_ack_rewards_descriptor_,
      finish_quest_ack_rewards::default_instance_,
      finish_quest_ack_rewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_quest_ack_rewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_quest_ack_rewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(finish_quest_ack_rewards));
  finish_quest_ack_descriptor_ = file->message_type(9);
  static const int finish_quest_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_quest_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_quest_ack, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_quest_ack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_quest_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_quest_ack, rewwards_),
  };
  finish_quest_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      finish_quest_ack_descriptor_,
      finish_quest_ack::default_instance_,
      finish_quest_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_quest_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_quest_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(finish_quest_ack));
  get_quest_activity_reward_req_descriptor_ = file->message_type(10);
  static const int get_quest_activity_reward_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_quest_activity_reward_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_quest_activity_reward_req, activity_lv_),
  };
  get_quest_activity_reward_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_quest_activity_reward_req_descriptor_,
      get_quest_activity_reward_req::default_instance_,
      get_quest_activity_reward_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_quest_activity_reward_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_quest_activity_reward_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_quest_activity_reward_req));
  get_quest_activity_reward_ack_descriptor_ = file->message_type(11);
  static const int get_quest_activity_reward_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_quest_activity_reward_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_quest_activity_reward_ack, activity_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_quest_activity_reward_ack, ret_),
  };
  get_quest_activity_reward_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_quest_activity_reward_ack_descriptor_,
      get_quest_activity_reward_ack::default_instance_,
      get_quest_activity_reward_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_quest_activity_reward_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_quest_activity_reward_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_quest_activity_reward_ack));
  shop_get_all_item_req_descriptor_ = file->message_type(12);
  static const int shop_get_all_item_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_get_all_item_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_get_all_item_req, shop_config_id_),
  };
  shop_get_all_item_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shop_get_all_item_req_descriptor_,
      shop_get_all_item_req::default_instance_,
      shop_get_all_item_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_get_all_item_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_get_all_item_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shop_get_all_item_req));
  shop_get_all_item_ack_descriptor_ = file->message_type(13);
  static const int shop_get_all_item_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_get_all_item_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_get_all_item_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_get_all_item_ack, shop_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_get_all_item_ack, shop_info_),
  };
  shop_get_all_item_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shop_get_all_item_ack_descriptor_,
      shop_get_all_item_ack::default_instance_,
      shop_get_all_item_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_get_all_item_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_get_all_item_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shop_get_all_item_ack));
  shop_buy_item_req_descriptor_ = file->message_type(14);
  static const int shop_buy_item_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_buy_item_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_buy_item_req, shop_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_buy_item_req, sale_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_buy_item_req, buy_num_),
  };
  shop_buy_item_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shop_buy_item_req_descriptor_,
      shop_buy_item_req::default_instance_,
      shop_buy_item_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_buy_item_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_buy_item_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shop_buy_item_req));
  shop_buy_item_ack_descriptor_ = file->message_type(15);
  static const int shop_buy_item_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_buy_item_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_buy_item_ack, shop_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_buy_item_ack, sale_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_buy_item_ack, buy_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_buy_item_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_buy_item_ack, cost_infos_),
  };
  shop_buy_item_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shop_buy_item_ack_descriptor_,
      shop_buy_item_ack::default_instance_,
      shop_buy_item_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_buy_item_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_buy_item_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shop_buy_item_ack));
  shop_refresh_req_descriptor_ = file->message_type(16);
  static const int shop_refresh_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_refresh_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_refresh_req, shop_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_refresh_req, refresh_type_),
  };
  shop_refresh_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shop_refresh_req_descriptor_,
      shop_refresh_req::default_instance_,
      shop_refresh_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_refresh_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_refresh_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shop_refresh_req));
  shop_refresh_ack_descriptor_ = file->message_type(17);
  static const int shop_refresh_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_refresh_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_refresh_ack, shop_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_refresh_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_refresh_ack, cost_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_refresh_ack, shop_info_),
  };
  shop_refresh_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shop_refresh_ack_descriptor_,
      shop_refresh_ack::default_instance_,
      shop_refresh_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_refresh_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_refresh_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shop_refresh_ack));
  shop_item_opt_req_descriptor_ = file->message_type(18);
  static const int shop_item_opt_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_opt_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_opt_req, shop_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_opt_req, sale_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_opt_req, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_opt_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_opt_req, target_id_),
  };
  shop_item_opt_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shop_item_opt_req_descriptor_,
      shop_item_opt_req::default_instance_,
      shop_item_opt_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_opt_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_opt_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shop_item_opt_req));
  shop_item_opt_ack_descriptor_ = file->message_type(19);
  static const int shop_item_opt_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_opt_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_opt_ack, shop_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_opt_ack, sale_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_opt_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_opt_ack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_opt_ack, target_id_),
  };
  shop_item_opt_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shop_item_opt_ack_descriptor_,
      shop_item_opt_ack::default_instance_,
      shop_item_opt_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_opt_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_opt_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shop_item_opt_ack));
  shop_open_ntf_descriptor_ = file->message_type(20);
  static const int shop_open_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_open_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_open_ntf, shop_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_open_ntf, dead_line_),
  };
  shop_open_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shop_open_ntf_descriptor_,
      shop_open_ntf::default_instance_,
      shop_open_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_open_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_open_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shop_open_ntf));
  game_officer_apply_req_descriptor_ = file->message_type(21);
  static const int game_officer_apply_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_officer_apply_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_officer_apply_req, grade_),
  };
  game_officer_apply_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_officer_apply_req_descriptor_,
      game_officer_apply_req::default_instance_,
      game_officer_apply_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_officer_apply_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_officer_apply_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_officer_apply_req));
  game_officer_apply_ack_descriptor_ = file->message_type(22);
  static const int game_officer_apply_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_officer_apply_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_officer_apply_ack, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_officer_apply_ack, ret_),
  };
  game_officer_apply_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_officer_apply_ack_descriptor_,
      game_officer_apply_ack::default_instance_,
      game_officer_apply_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_officer_apply_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_officer_apply_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_officer_apply_ack));
  officer_daily_salary_req_descriptor_ = file->message_type(23);
  static const int officer_daily_salary_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_daily_salary_req, protoid_),
  };
  officer_daily_salary_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      officer_daily_salary_req_descriptor_,
      officer_daily_salary_req::default_instance_,
      officer_daily_salary_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_daily_salary_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_daily_salary_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(officer_daily_salary_req));
  officer_daily_salary_ack_descriptor_ = file->message_type(24);
  static const int officer_daily_salary_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_daily_salary_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_daily_salary_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_daily_salary_ack, items_),
  };
  officer_daily_salary_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      officer_daily_salary_ack_descriptor_,
      officer_daily_salary_ack::default_instance_,
      officer_daily_salary_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_daily_salary_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_daily_salary_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(officer_daily_salary_ack));
  officer_result_ntf_descriptor_ = file->message_type(25);
  static const int officer_result_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_result_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_result_ntf, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_result_ntf, admit_),
  };
  officer_result_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      officer_result_ntf_descriptor_,
      officer_result_ntf::default_instance_,
      officer_result_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_result_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_result_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(officer_result_ntf));
  get_officer_applicants_req_descriptor_ = file->message_type(26);
  static const int get_officer_applicants_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_officer_applicants_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_officer_applicants_req, grade_),
  };
  get_officer_applicants_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_officer_applicants_req_descriptor_,
      get_officer_applicants_req::default_instance_,
      get_officer_applicants_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_officer_applicants_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_officer_applicants_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_officer_applicants_req));
  get_officer_applicants_ack_descriptor_ = file->message_type(27);
  static const int get_officer_applicants_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_officer_applicants_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_officer_applicants_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_officer_applicants_ack, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_officer_applicants_ack, apply_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_officer_applicants_ack, posts_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_officer_applicants_ack, applys_),
  };
  get_officer_applicants_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_officer_applicants_ack_descriptor_,
      get_officer_applicants_ack::default_instance_,
      get_officer_applicants_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_officer_applicants_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_officer_applicants_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_officer_applicants_ack));
  cancel_officer_apply_req_descriptor_ = file->message_type(28);
  static const int cancel_officer_apply_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_officer_apply_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_officer_apply_req, grade_),
  };
  cancel_officer_apply_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cancel_officer_apply_req_descriptor_,
      cancel_officer_apply_req::default_instance_,
      cancel_officer_apply_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_officer_apply_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_officer_apply_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cancel_officer_apply_req));
  cancel_officer_apply_ack_descriptor_ = file->message_type(29);
  static const int cancel_officer_apply_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_officer_apply_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_officer_apply_ack, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_officer_apply_ack, ret_),
  };
  cancel_officer_apply_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cancel_officer_apply_ack_descriptor_,
      cancel_officer_apply_ack::default_instance_,
      cancel_officer_apply_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_officer_apply_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_officer_apply_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cancel_officer_apply_ack));
  share_officer_upgrade_req_descriptor_ = file->message_type(30);
  static const int share_officer_upgrade_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade_req, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade_req, world_channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade_req, content_),
  };
  share_officer_upgrade_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      share_officer_upgrade_req_descriptor_,
      share_officer_upgrade_req::default_instance_,
      share_officer_upgrade_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(share_officer_upgrade_req));
  share_officer_upgrade_ack_descriptor_ = file->message_type(31);
  static const int share_officer_upgrade_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade_ack, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade_ack, world_channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade_ack, ret_),
  };
  share_officer_upgrade_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      share_officer_upgrade_ack_descriptor_,
      share_officer_upgrade_ack::default_instance_,
      share_officer_upgrade_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(share_officer_upgrade_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(share_officer_upgrade_ack));
  get_share_officer_upgrade_req_descriptor_ = file->message_type(32);
  static const int get_share_officer_upgrade_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_share_officer_upgrade_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_share_officer_upgrade_req, share_id_),
  };
  get_share_officer_upgrade_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_share_officer_upgrade_req_descriptor_,
      get_share_officer_upgrade_req::default_instance_,
      get_share_officer_upgrade_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_share_officer_upgrade_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_share_officer_upgrade_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_share_officer_upgrade_req));
  get_share_officer_upgrade_ack_descriptor_ = file->message_type(33);
  static const int get_share_officer_upgrade_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_share_officer_upgrade_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_share_officer_upgrade_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_share_officer_upgrade_ack, data_),
  };
  get_share_officer_upgrade_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_share_officer_upgrade_ack_descriptor_,
      get_share_officer_upgrade_ack::default_instance_,
      get_share_officer_upgrade_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_share_officer_upgrade_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_share_officer_upgrade_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_share_officer_upgrade_ack));
  update_offical_first_award_ntf_descriptor_ = file->message_type(34);
  static const int update_offical_first_award_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_offical_first_award_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_offical_first_award_ntf, units_),
  };
  update_offical_first_award_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_offical_first_award_ntf_descriptor_,
      update_offical_first_award_ntf::default_instance_,
      update_offical_first_award_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_offical_first_award_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_offical_first_award_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_offical_first_award_ntf));
  get_offical_first_award_req_descriptor_ = file->message_type(35);
  static const int get_offical_first_award_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_first_award_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_first_award_req, grade_),
  };
  get_offical_first_award_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_offical_first_award_req_descriptor_,
      get_offical_first_award_req::default_instance_,
      get_offical_first_award_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_first_award_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_first_award_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_offical_first_award_req));
  get_offical_first_award_ack_descriptor_ = file->message_type(36);
  static const int get_offical_first_award_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_first_award_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_first_award_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_first_award_ack, grade_),
  };
  get_offical_first_award_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_offical_first_award_ack_descriptor_,
      get_offical_first_award_ack::default_instance_,
      get_offical_first_award_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_first_award_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_first_award_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_offical_first_award_ack));
  get_offical_challenge_roles_req_descriptor_ = file->message_type(37);
  static const int get_offical_challenge_roles_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_challenge_roles_req, protoid_),
  };
  get_offical_challenge_roles_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_offical_challenge_roles_req_descriptor_,
      get_offical_challenge_roles_req::default_instance_,
      get_offical_challenge_roles_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_challenge_roles_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_challenge_roles_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_offical_challenge_roles_req));
  get_offical_challenge_roles_ack_descriptor_ = file->message_type(38);
  static const int get_offical_challenge_roles_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_challenge_roles_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_challenge_roles_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_challenge_roles_ack, offical_challenge_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_challenge_roles_ack, offical_challenge_buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_challenge_roles_ack, items_),
  };
  get_offical_challenge_roles_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_offical_challenge_roles_ack_descriptor_,
      get_offical_challenge_roles_ack::default_instance_,
      get_offical_challenge_roles_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_challenge_roles_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_challenge_roles_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_offical_challenge_roles_ack));
  add_offical_challenge_num_req_descriptor_ = file->message_type(39);
  static const int add_offical_challenge_num_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_offical_challenge_num_req, protoid_),
  };
  add_offical_challenge_num_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      add_offical_challenge_num_req_descriptor_,
      add_offical_challenge_num_req::default_instance_,
      add_offical_challenge_num_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_offical_challenge_num_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_offical_challenge_num_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(add_offical_challenge_num_req));
  add_offical_challenge_num_ack_descriptor_ = file->message_type(40);
  static const int add_offical_challenge_num_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_offical_challenge_num_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_offical_challenge_num_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_offical_challenge_num_ack, offical_challenge_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_offical_challenge_num_ack, offical_challenge_buy_),
  };
  add_offical_challenge_num_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      add_offical_challenge_num_ack_descriptor_,
      add_offical_challenge_num_ack::default_instance_,
      add_offical_challenge_num_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_offical_challenge_num_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_offical_challenge_num_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(add_offical_challenge_num_ack));
  offical_battle_report_req_descriptor_ = file->message_type(41);
  static const int offical_battle_report_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_req, protoid_),
  };
  offical_battle_report_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      offical_battle_report_req_descriptor_,
      offical_battle_report_req::default_instance_,
      offical_battle_report_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(offical_battle_report_req));
  offical_battle_report_ack_descriptor_ = file->message_type(42);
  static const int offical_battle_report_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_ack, reports_),
  };
  offical_battle_report_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      offical_battle_report_ack_descriptor_,
      offical_battle_report_ack::default_instance_,
      offical_battle_report_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_battle_report_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(offical_battle_report_ack));
  office_result_descriptor_ = file->message_type(43);
  static const int office_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(office_result, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(office_result, battle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(office_result, winner_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(office_result, winner_camp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(office_result, data_),
  };
  office_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      office_result_descriptor_,
      office_result::default_instance_,
      office_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(office_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(office_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(office_result));
  get_offical_member_req_descriptor_ = file->message_type(44);
  static const int get_offical_member_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_member_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_member_req, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_member_req, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_member_req, end_index_),
  };
  get_offical_member_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_offical_member_req_descriptor_,
      get_offical_member_req::default_instance_,
      get_offical_member_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_member_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_member_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_offical_member_req));
  get_offical_member_ack_descriptor_ = file->message_type(45);
  static const int get_offical_member_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_member_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_member_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_member_ack, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_member_ack, members_),
  };
  get_offical_member_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_offical_member_ack_descriptor_,
      get_offical_member_ack::default_instance_,
      get_offical_member_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_member_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_member_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_offical_member_ack));
  get_global_offical_rank_req_descriptor_ = file->message_type(46);
  static const int get_global_offical_rank_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_global_offical_rank_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_global_offical_rank_req, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_global_offical_rank_req, end_),
  };
  get_global_offical_rank_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_global_offical_rank_req_descriptor_,
      get_global_offical_rank_req::default_instance_,
      get_global_offical_rank_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_global_offical_rank_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_global_offical_rank_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_global_offical_rank_req));
  get_global_offical_rank_ack_descriptor_ = file->message_type(47);
  static const int get_global_offical_rank_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_global_offical_rank_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_global_offical_rank_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_global_offical_rank_ack, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_global_offical_rank_ack, my_data_),
  };
  get_global_offical_rank_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_global_offical_rank_ack_descriptor_,
      get_global_offical_rank_ack::default_instance_,
      get_global_offical_rank_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_global_offical_rank_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_global_offical_rank_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_global_offical_rank_ack));
  enter_tower_req_descriptor_ = file->message_type(48);
  static const int enter_tower_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_tower_req, protoid_),
  };
  enter_tower_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_tower_req_descriptor_,
      enter_tower_req::default_instance_,
      enter_tower_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_tower_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_tower_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_tower_req));
  enter_tower_ack_descriptor_ = file->message_type(49);
  static const int enter_tower_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_tower_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_tower_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_tower_ack, tower_data_),
  };
  enter_tower_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_tower_ack_descriptor_,
      enter_tower_ack::default_instance_,
      enter_tower_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_tower_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_tower_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_tower_ack));
  select_tower_floor_req_descriptor_ = file->message_type(50);
  static const int select_tower_floor_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_tower_floor_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_tower_floor_req, tower_floor_),
  };
  select_tower_floor_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      select_tower_floor_req_descriptor_,
      select_tower_floor_req::default_instance_,
      select_tower_floor_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_tower_floor_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_tower_floor_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(select_tower_floor_req));
  select_tower_floor_ack_descriptor_ = file->message_type(51);
  static const int select_tower_floor_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_tower_floor_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_tower_floor_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_tower_floor_ack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_tower_floor_ack, data_),
  };
  select_tower_floor_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      select_tower_floor_ack_descriptor_,
      select_tower_floor_ack::default_instance_,
      select_tower_floor_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_tower_floor_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_tower_floor_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(select_tower_floor_ack));
  tower_die_req_descriptor_ = file->message_type(52);
  static const int tower_die_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_die_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_die_req, tower_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_die_req, cur_step_),
  };
  tower_die_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tower_die_req_descriptor_,
      tower_die_req::default_instance_,
      tower_die_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_die_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_die_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tower_die_req));
  tower_die_ack_descriptor_ = file->message_type(53);
  static const int tower_die_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_die_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_die_ack, tower_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_die_ack, cur_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_die_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_die_ack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_die_ack, data_),
  };
  tower_die_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tower_die_ack_descriptor_,
      tower_die_ack::default_instance_,
      tower_die_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_die_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_die_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tower_die_ack));
  tower_step_fini_req_descriptor_ = file->message_type(54);
  static const int tower_step_fini_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_step_fini_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_step_fini_req, tower_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_step_fini_req, cur_step_),
  };
  tower_step_fini_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tower_step_fini_req_descriptor_,
      tower_step_fini_req::default_instance_,
      tower_step_fini_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_step_fini_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_step_fini_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tower_step_fini_req));
  tower_step_fini_ack_descriptor_ = file->message_type(55);
  static const int tower_step_fini_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_step_fini_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_step_fini_ack, tower_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_step_fini_ack, cur_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_step_fini_ack, ret_),
  };
  tower_step_fini_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tower_step_fini_ack_descriptor_,
      tower_step_fini_ack::default_instance_,
      tower_step_fini_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_step_fini_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_step_fini_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tower_step_fini_ack));
  question_check_req_descriptor_ = file->message_type(56);
  static const int question_check_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_check_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_check_req, question_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_check_req, subquestion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_check_req, answers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_check_req, type_),
  };
  question_check_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      question_check_req_descriptor_,
      question_check_req::default_instance_,
      question_check_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_check_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_check_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(question_check_req));
  question_check_ack_descriptor_ = file->message_type(57);
  static const int question_check_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_check_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_check_ack, question_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_check_ack, answers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_check_ack, subquestion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_check_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_check_ack, type_),
  };
  question_check_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      question_check_ack_descriptor_,
      question_check_ack::default_instance_,
      question_check_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_check_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_check_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(question_check_ack));
  update_tower_info_ntf_descriptor_ = file->message_type(58);
  static const int update_tower_info_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_tower_info_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_tower_info_ntf, data_),
  };
  update_tower_info_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_tower_info_ntf_descriptor_,
      update_tower_info_ntf::default_instance_,
      update_tower_info_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_tower_info_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_tower_info_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_tower_info_ntf));
  tower_raids_req_descriptor_ = file->message_type(59);
  static const int tower_raids_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_raids_req, protoid_),
  };
  tower_raids_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tower_raids_req_descriptor_,
      tower_raids_req::default_instance_,
      tower_raids_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_raids_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_raids_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tower_raids_req));
  tower_raids_ack_descriptor_ = file->message_type(60);
  static const int tower_raids_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_raids_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_raids_ack, ret_),
  };
  tower_raids_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tower_raids_ack_descriptor_,
      tower_raids_ack::default_instance_,
      tower_raids_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_raids_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_raids_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tower_raids_ack));
  tower_reset_req_descriptor_ = file->message_type(61);
  static const int tower_reset_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_reset_req, protoid_),
  };
  tower_reset_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tower_reset_req_descriptor_,
      tower_reset_req::default_instance_,
      tower_reset_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_reset_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_reset_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tower_reset_req));
  tower_reset_ack_descriptor_ = file->message_type(62);
  static const int tower_reset_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_reset_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_reset_ack, ret_),
  };
  tower_reset_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tower_reset_ack_descriptor_,
      tower_reset_ack::default_instance_,
      tower_reset_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_reset_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_reset_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tower_reset_ack));
  tower_reward_ntf_descriptor_ = file->message_type(63);
  static const int tower_reward_ntf_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_reward_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_reward_ntf, floor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_reward_ntf, cur_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_reward_ntf, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_reward_ntf, is_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_reward_ntf, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_reward_ntf, ret_),
  };
  tower_reward_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tower_reward_ntf_descriptor_,
      tower_reward_ntf::default_instance_,
      tower_reward_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_reward_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_reward_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tower_reward_ntf));
  question_find_wrong_req_descriptor_ = file->message_type(64);
  static const int question_find_wrong_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_find_wrong_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_find_wrong_req, question_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_find_wrong_req, subquestion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_find_wrong_req, type_),
  };
  question_find_wrong_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      question_find_wrong_req_descriptor_,
      question_find_wrong_req::default_instance_,
      question_find_wrong_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_find_wrong_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_find_wrong_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(question_find_wrong_req));
  question_find_wrong_ack_descriptor_ = file->message_type(65);
  static const int question_find_wrong_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_find_wrong_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_find_wrong_ack, question_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_find_wrong_ack, error_answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_find_wrong_ack, subquestion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_find_wrong_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_find_wrong_ack, type_),
  };
  question_find_wrong_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      question_find_wrong_ack_descriptor_,
      question_find_wrong_ack::default_instance_,
      question_find_wrong_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_find_wrong_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_find_wrong_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(question_find_wrong_ack));
  enter_adv_req_descriptor_ = file->message_type(66);
  static const int enter_adv_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_adv_req, proto_id_),
  };
  enter_adv_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_adv_req_descriptor_,
      enter_adv_req::default_instance_,
      enter_adv_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_adv_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_adv_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_adv_req));
  enter_adv_ack_descriptor_ = file->message_type(67);
  static const int enter_adv_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_adv_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_adv_ack, adv_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_adv_ack, adv_energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_adv_ack, city_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_adv_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_adv_ack, ask_ids_),
  };
  enter_adv_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_adv_ack_descriptor_,
      enter_adv_ack::default_instance_,
      enter_adv_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_adv_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_adv_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_adv_ack));
  select_adv_city_req_descriptor_ = file->message_type(68);
  static const int select_adv_city_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_adv_city_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_adv_city_req, city_id_),
  };
  select_adv_city_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      select_adv_city_req_descriptor_,
      select_adv_city_req::default_instance_,
      select_adv_city_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_adv_city_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_adv_city_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(select_adv_city_req));
  select_adv_city_ack_descriptor_ = file->message_type(69);
  static const int select_adv_city_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_adv_city_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_adv_city_ack, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_adv_city_ack, weather_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_adv_city_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_adv_city_ack, data_),
  };
  select_adv_city_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      select_adv_city_ack_descriptor_,
      select_adv_city_ack::default_instance_,
      select_adv_city_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_adv_city_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_adv_city_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(select_adv_city_ack));
  adv_event_req_descriptor_ = file->message_type(70);
  static const int adv_event_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_event_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_event_req, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_event_req, slot_),
  };
  adv_event_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      adv_event_req_descriptor_,
      adv_event_req::default_instance_,
      adv_event_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_event_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_event_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(adv_event_req));
  adv_event_ack_descriptor_ = file->message_type(71);
  static const int adv_event_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_event_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_event_ack, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_event_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_event_ack, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_event_ack, event_type_),
  };
  adv_event_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      adv_event_ack_descriptor_,
      adv_event_ack::default_instance_,
      adv_event_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_event_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_event_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(adv_event_ack));
  adv_reward_ntf_descriptor_ = file->message_type(72);
  static const int adv_reward_ntf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_reward_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_reward_ntf, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_reward_ntf, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_reward_ntf, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_reward_ntf, reward_),
  };
  adv_reward_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      adv_reward_ntf_descriptor_,
      adv_reward_ntf::default_instance_,
      adv_reward_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_reward_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_reward_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(adv_reward_ntf));
  adv_ask_req_descriptor_ = file->message_type(73);
  static const int adv_ask_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_ask_req, proto_id_),
  };
  adv_ask_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      adv_ask_req_descriptor_,
      adv_ask_req::default_instance_,
      adv_ask_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_ask_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_ask_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(adv_ask_req));
  adv_ask_ack_descriptor_ = file->message_type(74);
  static const int adv_ask_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_ask_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_ask_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_ask_ack, ask_ids_),
  };
  adv_ask_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      adv_ask_ack_descriptor_,
      adv_ask_ack::default_instance_,
      adv_ask_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_ask_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_ask_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(adv_ask_ack));
  adv_tujian_req_descriptor_ = file->message_type(75);
  static const int adv_tujian_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_tujian_req, proto_id_),
  };
  adv_tujian_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      adv_tujian_req_descriptor_,
      adv_tujian_req::default_instance_,
      adv_tujian_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_tujian_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_tujian_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(adv_tujian_req));
  adv_tujian_ack_descriptor_ = file->message_type(76);
  static const int adv_tujian_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_tujian_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_tujian_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_tujian_ack, city_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_tujian_ack, hero_events_),
  };
  adv_tujian_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      adv_tujian_ack_descriptor_,
      adv_tujian_ack::default_instance_,
      adv_tujian_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_tujian_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_tujian_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(adv_tujian_ack));
  leave_adv_req_descriptor_ = file->message_type(77);
  static const int leave_adv_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(leave_adv_req, proto_id_),
  };
  leave_adv_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      leave_adv_req_descriptor_,
      leave_adv_req::default_instance_,
      leave_adv_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(leave_adv_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(leave_adv_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(leave_adv_req));
  leave_adv_ack_descriptor_ = file->message_type(78);
  static const int leave_adv_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(leave_adv_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(leave_adv_ack, ret_),
  };
  leave_adv_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      leave_adv_ack_descriptor_,
      leave_adv_ack::default_instance_,
      leave_adv_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(leave_adv_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(leave_adv_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(leave_adv_ack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5factivity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_job_descriptor_, &game_job::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    job_all_list_ntf_descriptor_, &job_all_list_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    job_update_ntf_descriptor_, &job_update_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    job_operation_req_descriptor_, &job_operation_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    job_operation_ack_descriptor_, &job_operation_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    all_quests_ntf_descriptor_, &all_quests_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    quests_update_ntf_descriptor_, &quests_update_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    finish_quest_req_descriptor_, &finish_quest_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    finish_quest_ack_rewards_descriptor_, &finish_quest_ack_rewards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    finish_quest_ack_descriptor_, &finish_quest_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_quest_activity_reward_req_descriptor_, &get_quest_activity_reward_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_quest_activity_reward_ack_descriptor_, &get_quest_activity_reward_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shop_get_all_item_req_descriptor_, &shop_get_all_item_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shop_get_all_item_ack_descriptor_, &shop_get_all_item_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shop_buy_item_req_descriptor_, &shop_buy_item_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shop_buy_item_ack_descriptor_, &shop_buy_item_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shop_refresh_req_descriptor_, &shop_refresh_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shop_refresh_ack_descriptor_, &shop_refresh_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shop_item_opt_req_descriptor_, &shop_item_opt_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shop_item_opt_ack_descriptor_, &shop_item_opt_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shop_open_ntf_descriptor_, &shop_open_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_officer_apply_req_descriptor_, &game_officer_apply_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_officer_apply_ack_descriptor_, &game_officer_apply_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    officer_daily_salary_req_descriptor_, &officer_daily_salary_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    officer_daily_salary_ack_descriptor_, &officer_daily_salary_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    officer_result_ntf_descriptor_, &officer_result_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_officer_applicants_req_descriptor_, &get_officer_applicants_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_officer_applicants_ack_descriptor_, &get_officer_applicants_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cancel_officer_apply_req_descriptor_, &cancel_officer_apply_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cancel_officer_apply_ack_descriptor_, &cancel_officer_apply_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    share_officer_upgrade_req_descriptor_, &share_officer_upgrade_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    share_officer_upgrade_ack_descriptor_, &share_officer_upgrade_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_share_officer_upgrade_req_descriptor_, &get_share_officer_upgrade_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_share_officer_upgrade_ack_descriptor_, &get_share_officer_upgrade_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_offical_first_award_ntf_descriptor_, &update_offical_first_award_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_offical_first_award_req_descriptor_, &get_offical_first_award_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_offical_first_award_ack_descriptor_, &get_offical_first_award_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_offical_challenge_roles_req_descriptor_, &get_offical_challenge_roles_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_offical_challenge_roles_ack_descriptor_, &get_offical_challenge_roles_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    add_offical_challenge_num_req_descriptor_, &add_offical_challenge_num_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    add_offical_challenge_num_ack_descriptor_, &add_offical_challenge_num_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    offical_battle_report_req_descriptor_, &offical_battle_report_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    offical_battle_report_ack_descriptor_, &offical_battle_report_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    office_result_descriptor_, &office_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_offical_member_req_descriptor_, &get_offical_member_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_offical_member_ack_descriptor_, &get_offical_member_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_global_offical_rank_req_descriptor_, &get_global_offical_rank_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_global_offical_rank_ack_descriptor_, &get_global_offical_rank_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_tower_req_descriptor_, &enter_tower_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_tower_ack_descriptor_, &enter_tower_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    select_tower_floor_req_descriptor_, &select_tower_floor_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    select_tower_floor_ack_descriptor_, &select_tower_floor_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tower_die_req_descriptor_, &tower_die_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tower_die_ack_descriptor_, &tower_die_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tower_step_fini_req_descriptor_, &tower_step_fini_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tower_step_fini_ack_descriptor_, &tower_step_fini_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    question_check_req_descriptor_, &question_check_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    question_check_ack_descriptor_, &question_check_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_tower_info_ntf_descriptor_, &update_tower_info_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tower_raids_req_descriptor_, &tower_raids_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tower_raids_ack_descriptor_, &tower_raids_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tower_reset_req_descriptor_, &tower_reset_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tower_reset_ack_descriptor_, &tower_reset_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tower_reward_ntf_descriptor_, &tower_reward_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    question_find_wrong_req_descriptor_, &question_find_wrong_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    question_find_wrong_ack_descriptor_, &question_find_wrong_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_adv_req_descriptor_, &enter_adv_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_adv_ack_descriptor_, &enter_adv_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    select_adv_city_req_descriptor_, &select_adv_city_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    select_adv_city_ack_descriptor_, &select_adv_city_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    adv_event_req_descriptor_, &adv_event_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    adv_event_ack_descriptor_, &adv_event_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    adv_reward_ntf_descriptor_, &adv_reward_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    adv_ask_req_descriptor_, &adv_ask_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    adv_ask_ack_descriptor_, &adv_ask_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    adv_tujian_req_descriptor_, &adv_tujian_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    adv_tujian_ack_descriptor_, &adv_tujian_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    leave_adv_req_descriptor_, &leave_adv_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    leave_adv_ack_descriptor_, &leave_adv_ack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5factivity_2eproto() {
  delete game_job::default_instance_;
  delete game_job_reflection_;
  delete job_all_list_ntf::default_instance_;
  delete job_all_list_ntf_reflection_;
  delete job_update_ntf::default_instance_;
  delete job_update_ntf_reflection_;
  delete job_operation_req::default_instance_;
  delete job_operation_req_reflection_;
  delete job_operation_ack::default_instance_;
  delete job_operation_ack_reflection_;
  delete all_quests_ntf::default_instance_;
  delete all_quests_ntf_reflection_;
  delete quests_update_ntf::default_instance_;
  delete quests_update_ntf_reflection_;
  delete finish_quest_req::default_instance_;
  delete finish_quest_req_reflection_;
  delete finish_quest_ack_rewards::default_instance_;
  delete finish_quest_ack_rewards_reflection_;
  delete finish_quest_ack::default_instance_;
  delete finish_quest_ack_reflection_;
  delete get_quest_activity_reward_req::default_instance_;
  delete get_quest_activity_reward_req_reflection_;
  delete get_quest_activity_reward_ack::default_instance_;
  delete get_quest_activity_reward_ack_reflection_;
  delete shop_get_all_item_req::default_instance_;
  delete shop_get_all_item_req_reflection_;
  delete shop_get_all_item_ack::default_instance_;
  delete shop_get_all_item_ack_reflection_;
  delete shop_buy_item_req::default_instance_;
  delete shop_buy_item_req_reflection_;
  delete shop_buy_item_ack::default_instance_;
  delete shop_buy_item_ack_reflection_;
  delete shop_refresh_req::default_instance_;
  delete shop_refresh_req_reflection_;
  delete shop_refresh_ack::default_instance_;
  delete shop_refresh_ack_reflection_;
  delete shop_item_opt_req::default_instance_;
  delete shop_item_opt_req_reflection_;
  delete shop_item_opt_ack::default_instance_;
  delete shop_item_opt_ack_reflection_;
  delete shop_open_ntf::default_instance_;
  delete shop_open_ntf_reflection_;
  delete game_officer_apply_req::default_instance_;
  delete game_officer_apply_req_reflection_;
  delete game_officer_apply_ack::default_instance_;
  delete game_officer_apply_ack_reflection_;
  delete officer_daily_salary_req::default_instance_;
  delete officer_daily_salary_req_reflection_;
  delete officer_daily_salary_ack::default_instance_;
  delete officer_daily_salary_ack_reflection_;
  delete officer_result_ntf::default_instance_;
  delete officer_result_ntf_reflection_;
  delete get_officer_applicants_req::default_instance_;
  delete get_officer_applicants_req_reflection_;
  delete get_officer_applicants_ack::default_instance_;
  delete get_officer_applicants_ack_reflection_;
  delete cancel_officer_apply_req::default_instance_;
  delete cancel_officer_apply_req_reflection_;
  delete cancel_officer_apply_ack::default_instance_;
  delete cancel_officer_apply_ack_reflection_;
  delete share_officer_upgrade_req::default_instance_;
  delete share_officer_upgrade_req_reflection_;
  delete share_officer_upgrade_ack::default_instance_;
  delete share_officer_upgrade_ack_reflection_;
  delete get_share_officer_upgrade_req::default_instance_;
  delete get_share_officer_upgrade_req_reflection_;
  delete get_share_officer_upgrade_ack::default_instance_;
  delete get_share_officer_upgrade_ack_reflection_;
  delete update_offical_first_award_ntf::default_instance_;
  delete update_offical_first_award_ntf_reflection_;
  delete get_offical_first_award_req::default_instance_;
  delete get_offical_first_award_req_reflection_;
  delete get_offical_first_award_ack::default_instance_;
  delete get_offical_first_award_ack_reflection_;
  delete get_offical_challenge_roles_req::default_instance_;
  delete get_offical_challenge_roles_req_reflection_;
  delete get_offical_challenge_roles_ack::default_instance_;
  delete get_offical_challenge_roles_ack_reflection_;
  delete add_offical_challenge_num_req::default_instance_;
  delete add_offical_challenge_num_req_reflection_;
  delete add_offical_challenge_num_ack::default_instance_;
  delete add_offical_challenge_num_ack_reflection_;
  delete offical_battle_report_req::default_instance_;
  delete offical_battle_report_req_reflection_;
  delete offical_battle_report_ack::default_instance_;
  delete offical_battle_report_ack_reflection_;
  delete office_result::default_instance_;
  delete office_result_reflection_;
  delete get_offical_member_req::default_instance_;
  delete get_offical_member_req_reflection_;
  delete get_offical_member_ack::default_instance_;
  delete get_offical_member_ack_reflection_;
  delete get_global_offical_rank_req::default_instance_;
  delete get_global_offical_rank_req_reflection_;
  delete get_global_offical_rank_ack::default_instance_;
  delete get_global_offical_rank_ack_reflection_;
  delete enter_tower_req::default_instance_;
  delete enter_tower_req_reflection_;
  delete enter_tower_ack::default_instance_;
  delete enter_tower_ack_reflection_;
  delete select_tower_floor_req::default_instance_;
  delete select_tower_floor_req_reflection_;
  delete select_tower_floor_ack::default_instance_;
  delete select_tower_floor_ack_reflection_;
  delete tower_die_req::default_instance_;
  delete tower_die_req_reflection_;
  delete tower_die_ack::default_instance_;
  delete tower_die_ack_reflection_;
  delete tower_step_fini_req::default_instance_;
  delete tower_step_fini_req_reflection_;
  delete tower_step_fini_ack::default_instance_;
  delete tower_step_fini_ack_reflection_;
  delete question_check_req::default_instance_;
  delete question_check_req_reflection_;
  delete question_check_ack::default_instance_;
  delete question_check_ack_reflection_;
  delete update_tower_info_ntf::default_instance_;
  delete update_tower_info_ntf_reflection_;
  delete tower_raids_req::default_instance_;
  delete tower_raids_req_reflection_;
  delete tower_raids_ack::default_instance_;
  delete tower_raids_ack_reflection_;
  delete tower_reset_req::default_instance_;
  delete tower_reset_req_reflection_;
  delete tower_reset_ack::default_instance_;
  delete tower_reset_ack_reflection_;
  delete tower_reward_ntf::default_instance_;
  delete tower_reward_ntf_reflection_;
  delete question_find_wrong_req::default_instance_;
  delete question_find_wrong_req_reflection_;
  delete question_find_wrong_ack::default_instance_;
  delete question_find_wrong_ack_reflection_;
  delete enter_adv_req::default_instance_;
  delete enter_adv_req_reflection_;
  delete enter_adv_ack::default_instance_;
  delete enter_adv_ack_reflection_;
  delete select_adv_city_req::default_instance_;
  delete select_adv_city_req_reflection_;
  delete select_adv_city_ack::default_instance_;
  delete select_adv_city_ack_reflection_;
  delete adv_event_req::default_instance_;
  delete adv_event_req_reflection_;
  delete adv_event_ack::default_instance_;
  delete adv_event_ack_reflection_;
  delete adv_reward_ntf::default_instance_;
  delete adv_reward_ntf_reflection_;
  delete adv_ask_req::default_instance_;
  delete adv_ask_req_reflection_;
  delete adv_ask_ack::default_instance_;
  delete adv_ask_ack_reflection_;
  delete adv_tujian_req::default_instance_;
  delete adv_tujian_req_reflection_;
  delete adv_tujian_ack::default_instance_;
  delete adv_tujian_ack_reflection_;
  delete leave_adv_req::default_instance_;
  delete leave_adv_req_reflection_;
  delete leave_adv_ack::default_instance_;
  delete leave_adv_ack_reflection_;
}

void protobuf_AddDesc_cs_5factivity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SProtoSpace::protobuf_AddDesc_cs_5fprotoid_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5factivitytype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5froletype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5fbattletype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cs_5frole_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021cs_activity.proto\022\013SProtoSpace\032\020cs_pro"
    "toid.proto\032\025cm_activitytype.proto\032\021cm_ro"
    "letype.proto\032\023cm_battletype.proto\032\rcs_ro"
    "le.proto\"`\n\010game_job\022\016\n\006job_id\030\001 \001(\005\022\014\n\004"
    "type\030\002 \001(\005\022\022\n\nis_receive\030\003 \001(\010\022\020\n\010cur_st"
    "ep\030\004 \001(\r\022\020\n\010max_step\030\005 \001(\r\"w\n\020job_all_li"
    "st_ntf\022=\n\007protoid\030\001 \001(\0162\027.SProtoSpace.EC"
    "SProtoID:\023job_all_list_ntf_id\022$\n\005job_s\030\002"
    " \003(\0132\025.SProtoSpace.game_job\"\313\001\n\016job_upda"
    "te_ntf\022;\n\007protoid\030\001 \001(\0162\027.SProtoSpace.EC"
    "SProtoID:\021job_update_ntf_id\022(\n\tadd_job_s"
    "\030\002 \003(\0132\025.SProtoSpace.game_job\022(\n\tdel_job"
    "_s\030\003 \003(\0132\025.SProtoSpace.game_job\022(\n\tfix_j"
    "ob_s\030\004 \003(\0132\025.SProtoSpace.game_job\"q\n\021job"
    "_operation_req\022>\n\007protoid\030\001 \001(\0162\027.SProto"
    "Space.ECSProtoID:\024job_operation_req_id\022\014"
    "\n\004tpye\030\002 \001(\005\022\016\n\006job_id\030\003 \001(\005\"c\n\021job_oper"
    "ation_ack\022>\n\007protoid\030\001 \001(\0162\027.SProtoSpace"
    ".ECSProtoID:\024job_operation_ack_id\022\016\n\003ret"
    "\030\002 \001(\005:\0010\"\253\001\n\016all_quests_ntf\022;\n\007protoid\030"
    "\001 \001(\0162\027.SProtoSpace.ECSProtoID:\021all_ques"
    "ts_ntf_id\022\'\n\006quests\030\002 \003(\0132\027.SProtoSpace."
    "quest_data\0223\n\nactivities\030\003 \003(\0132\037.SProtoS"
    "pace.task_activity_data\"\261\001\n\021quests_updat"
    "e_ntf\022>\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECS"
    "ProtoID:\024quests_update_ntf_id\022\'\n\006quests\030"
    "\002 \003(\0132\027.SProtoSpace.quest_data\0223\n\nactivi"
    "ties\030\003 \003(\0132\037.SProtoSpace.task_activity_d"
    "ata\"u\n\020finish_quest_req\022@\n\007protoid\030\001 \001(\016"
    "2\027.SProtoSpace.ECSProtoID:\026get_quest_awa"
    "rd_req_id\022\021\n\tconfig_id\030\002 \001(\005\022\014\n\004type\030\003 \001"
    "(\005\":\n\030finish_quest_ack_rewards\022\017\n\007item_i"
    "d\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\"\276\001\n\020finish_quest_"
    "ack\022@\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPr"
    "otoID:\026get_quest_award_ack_id\022\021\n\tconfig_"
    "id\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\022\016\n\006result\030\004 \001(\005\0227"
    "\n\010rewwards\030\005 \003(\0132%.SProtoSpace.finish_qu"
    "est_ack_rewards\"\200\001\n\035get_quest_activity_r"
    "eward_req\022J\n\007protoid\030\001 \001(\0162\027.SProtoSpace"
    ".ECSProtoID: get_quest_activity_reward_r"
    "eq_id\022\023\n\013activity_lv\030\002 \001(\005\"\215\001\n\035get_quest"
    "_activity_reward_ack\022J\n\007protoid\030\001 \001(\0162\027."
    "SProtoSpace.ECSProtoID: get_quest_activi"
    "ty_reward_ack_id\022\023\n\013activity_lv\030\002 \001(\005\022\013\n"
    "\003ret\030\003 \001(\005\"s\n\025shop_get_all_item_req\022B\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\030s"
    "hop_get_all_item_req_id\022\026\n\016shop_config_i"
    "d\030\002 \001(\005\"\253\001\n\025shop_get_all_item_ack\022B\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\030sho"
    "p_get_all_item_ack_id\022\013\n\003ret\030\002 \001(\005\022\026\n\016sh"
    "op_config_id\030\003 \001(\005\022)\n\tshop_info\030\004 \001(\0132\026."
    "SProtoSpace.shop_info\"\224\001\n\021shop_buy_item_"
    "req\022>\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPr"
    "otoID:\024shop_buy_item_req_id\022\026\n\016shop_conf"
    "ig_id\030\002 \001(\005\022\026\n\016sale_config_id\030\003 \001(\r\022\017\n\007b"
    "uy_num\030\004 \001(\r\"\322\001\n\021shop_buy_item_ack\022>\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\024sh"
    "op_buy_item_ack_id\022\026\n\016shop_config_id\030\002 \001"
    "(\005\022\026\n\016sale_config_id\030\003 \001(\r\022\017\n\007buy_num\030\004 "
    "\001(\r\022\013\n\003ret\030\005 \001(\r\022/\n\ncost_infos\030\007 \003(\0132\033.S"
    "ProtoSpace.shop_cost_info\"\177\n\020shop_refres"
    "h_req\022=\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECS"
    "ProtoID:\023shop_refresh_req_id\022\026\n\016shop_con"
    "fig_id\030\002 \001(\005\022\024\n\014refresh_type\030\003 \001(\005\"\322\001\n\020s"
    "hop_refresh_ack\022=\n\007protoid\030\001 \001(\0162\027.SProt"
    "oSpace.ECSProtoID:\023shop_refresh_ack_id\022\026"
    "\n\016shop_config_id\030\002 \001(\005\022\013\n\003ret\030\003 \001(\r\022/\n\nc"
    "ost_infos\030\004 \001(\0132\033.SProtoSpace.shop_cost_"
    "info\022)\n\tshop_info\030\005 \001(\0132\026.SProtoSpace.sh"
    "op_info\"\263\001\n\021shop_item_opt_req\022>\n\007protoid"
    "\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\024shop_it"
    "em_opt_req_id\022\026\n\016shop_config_id\030\002 \001(\005\022\026\n"
    "\016sale_config_id\030\003 \001(\005\022\r\n\005count\030\004 \001(\005\022\014\n\004"
    "type\030\005 \001(\005\022\021\n\ttarget_id\030\006 \001(\004\"\261\001\n\021shop_i"
    "tem_opt_ack\022>\n\007protoid\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID:\024shop_item_opt_ack_id\022\026\n\016s"
    "hop_config_id\030\002 \001(\005\022\026\n\016sale_config_id\030\003 "
    "\001(\005\022\013\n\003ret\030\004 \001(\005\022\014\n\004type\030\005 \001(\005\022\021\n\ttarget"
    "_id\030\006 \001(\004\"v\n\rshop_open_ntf\022:\n\007protoid\030\001 "
    "\001(\0162\027.SProtoSpace.ECSProtoID:\020shop_open_"
    "ntf_id\022\026\n\016shop_config_id\030\002 \001(\005\022\021\n\tdead_l"
    "ine\030\003 \001(\r\"l\n\026game_officer_apply_req\022C\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\031g"
    "ame_officer_apply_req_id\022\r\n\005grade\030\002 \001(\r\""
    "y\n\026game_officer_apply_ack\022C\n\007protoid\030\001 \001"
    "(\0162\027.SProtoSpace.ECSProtoID:\031game_office"
    "r_apply_ack_id\022\r\n\005grade\030\002 \001(\r\022\013\n\003ret\030\003 \001"
    "(\r\"a\n\030officer_daily_salary_req\022E\n\007protoi"
    "d\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\033office"
    "r_daily_salary_req_id\"\227\001\n\030officer_daily_"
    "salary_ack\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ECSProtoID:\033officer_daily_salary_ack_i"
    "d\022\013\n\003ret\030\002 \001(\r\022\'\n\005items\030\003 \003(\0132\030.SProtoSp"
    "ace.reward_item\"s\n\022officer_result_ntf\022\?\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\025officer_result_ntf_id\022\r\n\005grade\030\002 \001(\r\022\r\n"
    "\005admit\030\003 \001(\010\"t\n\032get_officer_applicants_r"
    "eq\022G\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPro"
    "toID:\035get_officer_applicants_req_id\022\r\n\005g"
    "rade\030\002 \001(\r\"\330\001\n\032get_officer_applicants_ac"
    "k\022G\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProt"
    "oID:\035get_officer_applicants_ack_id\022\013\n\003re"
    "t\030\002 \001(\005\022\r\n\005grade\030\003 \001(\r\022\021\n\tapply_num\030\004 \001("
    "\r\022\021\n\tposts_num\030\005 \001(\r\022/\n\006applys\030\006 \003(\0132\037.S"
    "ProtoSpace.offical_apply_data\"p\n\030cancel_"
    "officer_apply_req\022E\n\007protoid\030\001 \001(\0162\027.SPr"
    "otoSpace.ECSProtoID:\033cancel_officer_appl"
    "y_req_id\022\r\n\005grade\030\002 \001(\r\"}\n\030cancel_office"
    "r_apply_ack\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID:\033cancel_officer_apply_ack_"
    "id\022\r\n\005grade\030\002 \001(\r\022\013\n\003ret\030\003 \001(\r\"\235\001\n\031share"
    "_officer_upgrade_req\022F\n\007protoid\030\001 \001(\0162\027."
    "SProtoSpace.ECSProtoID:\034share_officer_up"
    "grade_req_id\022\r\n\005grade\030\002 \001(\r\022\030\n\020world_cha"
    "nnel_id\030\003 \001(\r\022\017\n\007content\030\004 \001(\t\"\231\001\n\031share"
    "_officer_upgrade_ack\022F\n\007protoid\030\001 \001(\0162\027."
    "SProtoSpace.ECSProtoID:\034share_officer_up"
    "grade_ack_id\022\r\n\005grade\030\002 \001(\r\022\030\n\020world_cha"
    "nnel_id\030\003 \001(\r\022\013\n\003ret\030\004 \001(\r\"}\n\035get_share_"
    "officer_upgrade_req\022J\n\007protoid\030\001 \001(\0162\027.S"
    "ProtoSpace.ECSProtoID: get_share_officer"
    "_upgrade_req_id\022\020\n\010share_id\030\002 \001(\004\"\252\001\n\035ge"
    "t_share_officer_upgrade_ack\022J\n\007protoid\030\001"
    " \001(\0162\027.SProtoSpace.ECSProtoID: get_share"
    "_officer_upgrade_ack_id\022\013\n\003ret\030\002 \001(\r\0220\n\004"
    "data\030\003 \001(\0132\".SProtoSpace.share_officer_u"
    "pgrade\"\226\001\n\036update_offical_first_award_nt"
    "f\022K\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProt"
    "oID:!update_offical_first_award_ntf_id\022\'"
    "\n\005units\030\002 \003(\0132\030.SProtoSpace.reward_item\""
    "v\n\033get_offical_first_award_req\022H\n\007protoi"
    "d\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\036get_of"
    "fical_first_award_req_id\022\r\n\005grade\030\002 \001(\005\""
    "\203\001\n\033get_offical_first_award_ack\022H\n\007proto"
    "id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\036get_o"
    "ffical_first_award_ack_id\022\013\n\003ret\030\002 \001(\r\022\r"
    "\n\005grade\030\003 \001(\005\"o\n\037get_offical_challenge_r"
    "oles_req\022L\n\007protoid\030\001 \001(\0162\027.SProtoSpace."
    "ECSProtoID:\"get_offical_challenge_roles_"
    "req_id\"\351\001\n\037get_offical_challenge_roles_a"
    "ck\022L\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPro"
    "toID:\"get_offical_challenge_roles_ack_id"
    "\022\013\n\003ret\030\002 \001(\r\022\035\n\025offical_challenge_num\030\003"
    " \001(\005\022\035\n\025offical_challenge_buy\030\004 \001(\005\022-\n\005i"
    "tems\030\005 \003(\0132\036.SProtoSpace.offical_item_da"
    "ta\"k\n\035add_offical_challenge_num_req\022J\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID: a"
    "dd_offical_challenge_num_req_id\"\266\001\n\035add_"
    "offical_challenge_num_ack\022J\n\007protoid\030\001 \001"
    "(\0162\027.SProtoSpace.ECSProtoID: add_offical"
    "_challenge_num_ack_id\022\013\n\003ret\030\002 \001(\r\022\035\n\025of"
    "fical_challenge_num\030\003 \001(\005\022\035\n\025offical_cha"
    "llenge_buy\030\004 \001(\005\"c\n\031offical_battle_repor"
    "t_req\022F\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECS"
    "ProtoID:\034offical_battle_report_req_id\"\252\001"
    "\n\031offical_battle_report_ack\022F\n\007protoid\030\001"
    " \001(\0162\027.SProtoSpace.ECSProtoID:\034offical_b"
    "attle_report_ack_id\022\013\n\003ret\030\002 \001(\r\0228\n\007repo"
    "rts\030\003 \003(\0132\'.SProtoSpace.offical_battle_r"
    "eport_unit\"\252\001\n\roffice_result\022\023\n\013battle_u"
    "uid\030\001 \001(\004\022-\n\013battle_type\030\002 \001(\0162\030.SProtoS"
    "pace.EBattleType\022\026\n\016winner_role_id\030\003 \001(\003"
    "\022\026\n\016winner_camp_id\030\004 \001(\005\022%\n\004data\030\005 \003(\0132\027"
    ".SProtoSpace.round_data\"\224\001\n\026get_offical_"
    "member_req\022C\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ECSProtoID:\031get_offical_member_req_id\022"
    "\r\n\005grade\030\002 \001(\005\022\023\n\013start_index\030\003 \001(\005\022\021\n\te"
    "nd_index\030\004 \001(\005\"\254\001\n\026get_offical_member_ac"
    "k\022C\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProt"
    "oID:\031get_offical_member_ack_id\022\013\n\003ret\030\002 "
    "\001(\005\022\r\n\005grade\030\003 \001(\005\0221\n\007members\030\004 \003(\0132 .SP"
    "rotoSpace.offical_member_data\"\204\001\n\033get_gl"
    "obal_offical_rank_req\022I\n\010proto_id\030\001 \001(\0162"
    "\027.SProtoSpace.ECSProtoID:\036get_global_off"
    "ical_rank_req_id\022\r\n\005start\030\002 \001(\005\022\013\n\003end\030\003"
    " \001(\005\"\333\001\n\033get_global_offical_rank_ack\022I\n\010"
    "proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\036get_global_offical_rank_ack_id\022\013\n\003ret\030\002"
    " \001(\r\0221\n\007members\030\003 \003(\0132 .SProtoSpace.offi"
    "cal_member_data\0221\n\007my_data\030\004 \001(\0132 .SProt"
    "oSpace.offical_member_data\"O\n\017enter_towe"
    "r_req\022<\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECS"
    "ProtoID:\022enter_tower_req_id\"\216\001\n\017enter_to"
    "wer_ack\022<\n\007protoid\030\001 \001(\0162\027.SProtoSpace.E"
    "CSProtoID:\022enter_tower_ack_id\022\013\n\003ret\030\002 \001"
    "(\r\0220\n\ntower_data\030\003 \001(\0132\034.SProtoSpace.tow"
    "er_base_info\"r\n\026select_tower_floor_req\022C"
    "\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID"
    ":\031select_tower_floor_req_id\022\023\n\013tower_flo"
    "or\030\002 \001(\r\"\242\001\n\026select_tower_floor_ack\022C\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\031s"
    "elect_tower_floor_ack_id\022\013\n\003ret\030\002 \001(\r\022\014\n"
    "\004type\030\003 \001(\r\022(\n\004data\030\004 \001(\0132\032.SProtoSpace."
    "question_data\"u\n\rtower_die_req\022:\n\007protoi"
    "d\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\020tower_"
    "die_req_id\022\023\n\013tower_floor\030\002 \001(\r\022\023\n\010cur_s"
    "tep\030\003 \001(\r:\0011\"\272\001\n\rtower_die_ack\022:\n\007protoi"
    "d\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\020tower_"
    "die_ack_id\022\023\n\013tower_floor\030\002 \001(\r\022\023\n\010cur_s"
    "tep\030\003 \001(\r:\0011\022\013\n\003ret\030\004 \001(\r\022\014\n\004type\030\005 \001(\r\022"
    "(\n\004data\030\006 \001(\0132\032.SProtoSpace.question_dat"
    "a\"\201\001\n\023tower_step_fini_req\022@\n\007protoid\030\001 \001"
    "(\0162\027.SProtoSpace.ECSProtoID:\026tower_step_"
    "fini_req_id\022\023\n\013tower_floor\030\002 \001(\r\022\023\n\010cur_"
    "step\030\003 \001(\r:\0011\"\216\001\n\023tower_step_fini_ack\022@\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\026tower_step_fini_ack_id\022\023\n\013tower_floor\030\002"
    " \001(\r\022\023\n\010cur_step\030\003 \001(\r:\0011\022\013\n\003ret\030\004 \001(\005\"\241"
    "\001\n\022question_check_req\022\?\n\007protoid\030\001 \001(\0162\027"
    ".SProtoSpace.ECSProtoID:\025question_check_"
    "req_id\022\023\n\013question_id\030\002 \001(\r\022\026\n\016subquesti"
    "on_id\030\003 \001(\r\022\017\n\007answers\030\004 \003(\r\022\014\n\004type\030\005 \001"
    "(\005\"\256\001\n\022question_check_ack\022\?\n\007protoid\030\001 \001"
    "(\0162\027.SProtoSpace.ECSProtoID:\025question_ch"
    "eck_ack_id\022\023\n\013question_id\030\002 \001(\r\022\017\n\007answe"
    "rs\030\003 \003(\r\022\026\n\016subquestion_id\030\004 \001(\r\022\013\n\003ret\030"
    "\005 \001(\r\022\014\n\004type\030\006 \001(\005\"\207\001\n\025update_tower_inf"
    "o_ntf\022B\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECS"
    "ProtoID:\030update_tower_info_ntf_id\022*\n\004dat"
    "a\030\002 \001(\0132\034.SProtoSpace.tower_base_info\"O\n"
    "\017tower_raids_req\022<\n\007protoid\030\001 \001(\0162\027.SPro"
    "toSpace.ECSProtoID:\022tower_raids_req_id\"\\"
    "\n\017tower_raids_ack\022<\n\007protoid\030\001 \001(\0162\027.SPr"
    "otoSpace.ECSProtoID:\022tower_raids_ack_id\022"
    "\013\n\003ret\030\002 \001(\r\"O\n\017tower_reset_req\022<\n\007proto"
    "id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\022tower"
    "_reset_req_id\"\\\n\017tower_reset_ack\022<\n\007prot"
    "oid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\022towe"
    "r_reset_ack_id\022\013\n\003ret\030\002 \001(\r\"\310\001\n\020tower_re"
    "ward_ntf\022=\n\007protoid\030\001 \001(\0162\027.SProtoSpace."
    "ECSProtoID:\023tower_reward_ntf_id\022\020\n\010floor"
    "_id\030\002 \001(\r\022\020\n\010cur_step\030\003 \001(\r\022\014\n\004type\030\004 \001("
    "\r\022\016\n\006is_win\030\005 \001(\010\022&\n\006reward\030\006 \003(\0132\026.SPro"
    "toSpace.item_info\022\013\n\003ret\030\007 \001(\005\"\232\001\n\027quest"
    "ion_find_wrong_req\022D\n\007protoid\030\001 \001(\0162\027.SP"
    "rotoSpace.ECSProtoID:\032question_find_wron"
    "g_req_id\022\023\n\013question_id\030\002 \001(\r\022\026\n\016subques"
    "tion_id\030\003 \001(\r\022\014\n\004type\030\004 \001(\005\"\275\001\n\027question"
    "_find_wrong_ack\022D\n\007protoid\030\001 \001(\0162\027.SProt"
    "oSpace.ECSProtoID:\032question_find_wrong_a"
    "ck_id\022\023\n\013question_id\030\002 \001(\r\022\024\n\014error_answ"
    "er\030\003 \001(\r\022\026\n\016subquestion_id\030\004 \001(\r\022\013\n\003ret\030"
    "\005 \001(\r\022\014\n\004type\030\006 \001(\005\"L\n\renter_adv_req\022;\n\010"
    "proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\020enter_adv_req_id\"\243\001\n\renter_adv_ack\022;\n\010p"
    "roto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\020"
    "enter_adv_ack_id\022\021\n\tadv_times\030\002 \001(\005\022\022\n\na"
    "dv_energy\030\003 \001(\005\022\020\n\010city_ids\030\004 \003(\005\022\013\n\003ret"
    "\030\005 \001(\005\022\017\n\007ask_ids\030\006 \003(\005\"i\n\023select_adv_ci"
    "ty_req\022A\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.E"
    "CSProtoID:\026select_adv_city_req_id\022\017\n\007cit"
    "y_id\030\002 \001(\005\"\317\001\n\023select_adv_city_ack\022A\n\010pr"
    "oto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\026s"
    "elect_adv_city_ack_id\022\017\n\007city_id\030\002 \001(\005\022+"
    "\n\007weather\030\003 \001(\0162\032.SProtoSpace.EWEATHER_T"
    "YPE\022\013\n\003ret\030\004 \001(\005\022*\n\004data\030\005 \003(\0132\034.SProtoS"
    "pace.hero_favor_info\"k\n\radv_event_req\022;\n"
    "\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID"
    ":\020adv_event_req_id\022\017\n\007city_id\030\002 \001(\005\022\014\n\004s"
    "lot\030\003 \001(\005\"\220\001\n\radv_event_ack\022;\n\010proto_id\030"
    "\001 \001(\0162\027.SProtoSpace.ECSProtoID:\020adv_even"
    "t_ack_id\022\017\n\007city_id\030\002 \001(\005\022\013\n\003ret\030\003 \001(\005\022\020"
    "\n\010event_id\030\004 \001(\005\022\022\n\nevent_type\030\005 \001(\005\"\246\001\n"
    "\016adv_reward_ntf\022<\n\010proto_id\030\001 \001(\0162\027.SPro"
    "toSpace.ECSProtoID:\021adv_reward_ntf_id\022\013\n"
    "\003ret\030\002 \001(\005\022\017\n\007city_id\030\003 \001(\005\022\020\n\010event_id\030"
    "\004 \001(\005\022&\n\006reward\030\005 \003(\0132\026.SProtoSpace.item"
    "_info\"H\n\013adv_ask_req\0229\n\010proto_id\030\001 \001(\0162\027"
    ".SProtoSpace.ECSProtoID:\016adv_ask_req_id\""
    "f\n\013adv_ask_ack\0229\n\010proto_id\030\001 \001(\0162\027.SProt"
    "oSpace.ECSProtoID:\016adv_ask_ack_id\022\013\n\003ret"
    "\030\002 \001(\005\022\017\n\007ask_ids\030\003 \003(\005\"N\n\016adv_tujian_re"
    "q\022<\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSPro"
    "toID:\021adv_tujian_req_id\"\303\001\n\016adv_tujian_a"
    "ck\022<\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSPr"
    "otoID:\021adv_tujian_ack_id\022\013\n\003ret\030\002 \001(\005\0222\n"
    "\013city_events\030\003 \003(\0132\035.SProtoSpace.city_ev"
    "ents_data\0222\n\013hero_events\030\004 \003(\0132\035.SProtoS"
    "pace.hero_events_data\"L\n\rleave_adv_req\022;"
    "\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoI"
    "D:\020leave_adv_req_id\"Y\n\rleave_adv_ack\022;\n\010"
    "proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\020leave_adv_ack_id\022\013\n\003ret\030\002 \001(\005", 11310);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_activity.proto", &protobuf_RegisterTypes);
  game_job::default_instance_ = new game_job();
  job_all_list_ntf::default_instance_ = new job_all_list_ntf();
  job_update_ntf::default_instance_ = new job_update_ntf();
  job_operation_req::default_instance_ = new job_operation_req();
  job_operation_ack::default_instance_ = new job_operation_ack();
  all_quests_ntf::default_instance_ = new all_quests_ntf();
  quests_update_ntf::default_instance_ = new quests_update_ntf();
  finish_quest_req::default_instance_ = new finish_quest_req();
  finish_quest_ack_rewards::default_instance_ = new finish_quest_ack_rewards();
  finish_quest_ack::default_instance_ = new finish_quest_ack();
  get_quest_activity_reward_req::default_instance_ = new get_quest_activity_reward_req();
  get_quest_activity_reward_ack::default_instance_ = new get_quest_activity_reward_ack();
  shop_get_all_item_req::default_instance_ = new shop_get_all_item_req();
  shop_get_all_item_ack::default_instance_ = new shop_get_all_item_ack();
  shop_buy_item_req::default_instance_ = new shop_buy_item_req();
  shop_buy_item_ack::default_instance_ = new shop_buy_item_ack();
  shop_refresh_req::default_instance_ = new shop_refresh_req();
  shop_refresh_ack::default_instance_ = new shop_refresh_ack();
  shop_item_opt_req::default_instance_ = new shop_item_opt_req();
  shop_item_opt_ack::default_instance_ = new shop_item_opt_ack();
  shop_open_ntf::default_instance_ = new shop_open_ntf();
  game_officer_apply_req::default_instance_ = new game_officer_apply_req();
  game_officer_apply_ack::default_instance_ = new game_officer_apply_ack();
  officer_daily_salary_req::default_instance_ = new officer_daily_salary_req();
  officer_daily_salary_ack::default_instance_ = new officer_daily_salary_ack();
  officer_result_ntf::default_instance_ = new officer_result_ntf();
  get_officer_applicants_req::default_instance_ = new get_officer_applicants_req();
  get_officer_applicants_ack::default_instance_ = new get_officer_applicants_ack();
  cancel_officer_apply_req::default_instance_ = new cancel_officer_apply_req();
  cancel_officer_apply_ack::default_instance_ = new cancel_officer_apply_ack();
  share_officer_upgrade_req::default_instance_ = new share_officer_upgrade_req();
  share_officer_upgrade_ack::default_instance_ = new share_officer_upgrade_ack();
  get_share_officer_upgrade_req::default_instance_ = new get_share_officer_upgrade_req();
  get_share_officer_upgrade_ack::default_instance_ = new get_share_officer_upgrade_ack();
  update_offical_first_award_ntf::default_instance_ = new update_offical_first_award_ntf();
  get_offical_first_award_req::default_instance_ = new get_offical_first_award_req();
  get_offical_first_award_ack::default_instance_ = new get_offical_first_award_ack();
  get_offical_challenge_roles_req::default_instance_ = new get_offical_challenge_roles_req();
  get_offical_challenge_roles_ack::default_instance_ = new get_offical_challenge_roles_ack();
  add_offical_challenge_num_req::default_instance_ = new add_offical_challenge_num_req();
  add_offical_challenge_num_ack::default_instance_ = new add_offical_challenge_num_ack();
  offical_battle_report_req::default_instance_ = new offical_battle_report_req();
  offical_battle_report_ack::default_instance_ = new offical_battle_report_ack();
  office_result::default_instance_ = new office_result();
  get_offical_member_req::default_instance_ = new get_offical_member_req();
  get_offical_member_ack::default_instance_ = new get_offical_member_ack();
  get_global_offical_rank_req::default_instance_ = new get_global_offical_rank_req();
  get_global_offical_rank_ack::default_instance_ = new get_global_offical_rank_ack();
  enter_tower_req::default_instance_ = new enter_tower_req();
  enter_tower_ack::default_instance_ = new enter_tower_ack();
  select_tower_floor_req::default_instance_ = new select_tower_floor_req();
  select_tower_floor_ack::default_instance_ = new select_tower_floor_ack();
  tower_die_req::default_instance_ = new tower_die_req();
  tower_die_ack::default_instance_ = new tower_die_ack();
  tower_step_fini_req::default_instance_ = new tower_step_fini_req();
  tower_step_fini_ack::default_instance_ = new tower_step_fini_ack();
  question_check_req::default_instance_ = new question_check_req();
  question_check_ack::default_instance_ = new question_check_ack();
  update_tower_info_ntf::default_instance_ = new update_tower_info_ntf();
  tower_raids_req::default_instance_ = new tower_raids_req();
  tower_raids_ack::default_instance_ = new tower_raids_ack();
  tower_reset_req::default_instance_ = new tower_reset_req();
  tower_reset_ack::default_instance_ = new tower_reset_ack();
  tower_reward_ntf::default_instance_ = new tower_reward_ntf();
  question_find_wrong_req::default_instance_ = new question_find_wrong_req();
  question_find_wrong_ack::default_instance_ = new question_find_wrong_ack();
  enter_adv_req::default_instance_ = new enter_adv_req();
  enter_adv_ack::default_instance_ = new enter_adv_ack();
  select_adv_city_req::default_instance_ = new select_adv_city_req();
  select_adv_city_ack::default_instance_ = new select_adv_city_ack();
  adv_event_req::default_instance_ = new adv_event_req();
  adv_event_ack::default_instance_ = new adv_event_ack();
  adv_reward_ntf::default_instance_ = new adv_reward_ntf();
  adv_ask_req::default_instance_ = new adv_ask_req();
  adv_ask_ack::default_instance_ = new adv_ask_ack();
  adv_tujian_req::default_instance_ = new adv_tujian_req();
  adv_tujian_ack::default_instance_ = new adv_tujian_ack();
  leave_adv_req::default_instance_ = new leave_adv_req();
  leave_adv_ack::default_instance_ = new leave_adv_ack();
  game_job::default_instance_->InitAsDefaultInstance();
  job_all_list_ntf::default_instance_->InitAsDefaultInstance();
  job_update_ntf::default_instance_->InitAsDefaultInstance();
  job_operation_req::default_instance_->InitAsDefaultInstance();
  job_operation_ack::default_instance_->InitAsDefaultInstance();
  all_quests_ntf::default_instance_->InitAsDefaultInstance();
  quests_update_ntf::default_instance_->InitAsDefaultInstance();
  finish_quest_req::default_instance_->InitAsDefaultInstance();
  finish_quest_ack_rewards::default_instance_->InitAsDefaultInstance();
  finish_quest_ack::default_instance_->InitAsDefaultInstance();
  get_quest_activity_reward_req::default_instance_->InitAsDefaultInstance();
  get_quest_activity_reward_ack::default_instance_->InitAsDefaultInstance();
  shop_get_all_item_req::default_instance_->InitAsDefaultInstance();
  shop_get_all_item_ack::default_instance_->InitAsDefaultInstance();
  shop_buy_item_req::default_instance_->InitAsDefaultInstance();
  shop_buy_item_ack::default_instance_->InitAsDefaultInstance();
  shop_refresh_req::default_instance_->InitAsDefaultInstance();
  shop_refresh_ack::default_instance_->InitAsDefaultInstance();
  shop_item_opt_req::default_instance_->InitAsDefaultInstance();
  shop_item_opt_ack::default_instance_->InitAsDefaultInstance();
  shop_open_ntf::default_instance_->InitAsDefaultInstance();
  game_officer_apply_req::default_instance_->InitAsDefaultInstance();
  game_officer_apply_ack::default_instance_->InitAsDefaultInstance();
  officer_daily_salary_req::default_instance_->InitAsDefaultInstance();
  officer_daily_salary_ack::default_instance_->InitAsDefaultInstance();
  officer_result_ntf::default_instance_->InitAsDefaultInstance();
  get_officer_applicants_req::default_instance_->InitAsDefaultInstance();
  get_officer_applicants_ack::default_instance_->InitAsDefaultInstance();
  cancel_officer_apply_req::default_instance_->InitAsDefaultInstance();
  cancel_officer_apply_ack::default_instance_->InitAsDefaultInstance();
  share_officer_upgrade_req::default_instance_->InitAsDefaultInstance();
  share_officer_upgrade_ack::default_instance_->InitAsDefaultInstance();
  get_share_officer_upgrade_req::default_instance_->InitAsDefaultInstance();
  get_share_officer_upgrade_ack::default_instance_->InitAsDefaultInstance();
  update_offical_first_award_ntf::default_instance_->InitAsDefaultInstance();
  get_offical_first_award_req::default_instance_->InitAsDefaultInstance();
  get_offical_first_award_ack::default_instance_->InitAsDefaultInstance();
  get_offical_challenge_roles_req::default_instance_->InitAsDefaultInstance();
  get_offical_challenge_roles_ack::default_instance_->InitAsDefaultInstance();
  add_offical_challenge_num_req::default_instance_->InitAsDefaultInstance();
  add_offical_challenge_num_ack::default_instance_->InitAsDefaultInstance();
  offical_battle_report_req::default_instance_->InitAsDefaultInstance();
  offical_battle_report_ack::default_instance_->InitAsDefaultInstance();
  office_result::default_instance_->InitAsDefaultInstance();
  get_offical_member_req::default_instance_->InitAsDefaultInstance();
  get_offical_member_ack::default_instance_->InitAsDefaultInstance();
  get_global_offical_rank_req::default_instance_->InitAsDefaultInstance();
  get_global_offical_rank_ack::default_instance_->InitAsDefaultInstance();
  enter_tower_req::default_instance_->InitAsDefaultInstance();
  enter_tower_ack::default_instance_->InitAsDefaultInstance();
  select_tower_floor_req::default_instance_->InitAsDefaultInstance();
  select_tower_floor_ack::default_instance_->InitAsDefaultInstance();
  tower_die_req::default_instance_->InitAsDefaultInstance();
  tower_die_ack::default_instance_->InitAsDefaultInstance();
  tower_step_fini_req::default_instance_->InitAsDefaultInstance();
  tower_step_fini_ack::default_instance_->InitAsDefaultInstance();
  question_check_req::default_instance_->InitAsDefaultInstance();
  question_check_ack::default_instance_->InitAsDefaultInstance();
  update_tower_info_ntf::default_instance_->InitAsDefaultInstance();
  tower_raids_req::default_instance_->InitAsDefaultInstance();
  tower_raids_ack::default_instance_->InitAsDefaultInstance();
  tower_reset_req::default_instance_->InitAsDefaultInstance();
  tower_reset_ack::default_instance_->InitAsDefaultInstance();
  tower_reward_ntf::default_instance_->InitAsDefaultInstance();
  question_find_wrong_req::default_instance_->InitAsDefaultInstance();
  question_find_wrong_ack::default_instance_->InitAsDefaultInstance();
  enter_adv_req::default_instance_->InitAsDefaultInstance();
  enter_adv_ack::default_instance_->InitAsDefaultInstance();
  select_adv_city_req::default_instance_->InitAsDefaultInstance();
  select_adv_city_ack::default_instance_->InitAsDefaultInstance();
  adv_event_req::default_instance_->InitAsDefaultInstance();
  adv_event_ack::default_instance_->InitAsDefaultInstance();
  adv_reward_ntf::default_instance_->InitAsDefaultInstance();
  adv_ask_req::default_instance_->InitAsDefaultInstance();
  adv_ask_ack::default_instance_->InitAsDefaultInstance();
  adv_tujian_req::default_instance_->InitAsDefaultInstance();
  adv_tujian_ack::default_instance_->InitAsDefaultInstance();
  leave_adv_req::default_instance_->InitAsDefaultInstance();
  leave_adv_ack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5factivity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5factivity_2eproto {
  StaticDescriptorInitializer_cs_5factivity_2eproto() {
    protobuf_AddDesc_cs_5factivity_2eproto();
  }
} static_descriptor_initializer_cs_5factivity_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int game_job::kJobIdFieldNumber;
const int game_job::kTypeFieldNumber;
const int game_job::kIsReceiveFieldNumber;
const int game_job::kCurStepFieldNumber;
const int game_job::kMaxStepFieldNumber;
#endif  // !_MSC_VER

game_job::game_job()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_job::InitAsDefaultInstance() {
}

game_job::game_job(const game_job& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_job::SharedCtor() {
  _cached_size_ = 0;
  job_id_ = 0;
  type_ = 0;
  is_receive_ = false;
  cur_step_ = 0u;
  max_step_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_job::~game_job() {
  SharedDtor();
}

void game_job::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_job::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_job::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_job_descriptor_;
}

const game_job& game_job::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

game_job* game_job::default_instance_ = NULL;

game_job* game_job::New() const {
  return new game_job;
}

void game_job::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    job_id_ = 0;
    type_ = 0;
    is_receive_ = false;
    cur_step_ = 0u;
    max_step_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_job::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 job_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
          set_has_job_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_receive;
        break;
      }

      // optional bool is_receive = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_receive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_receive_)));
          set_has_is_receive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_step;
        break;
      }

      // optional uint32 cur_step = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_step_)));
          set_has_cur_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_step;
        break;
      }

      // optional uint32 max_step = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_step_)));
          set_has_max_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_job::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 job_id = 1;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->job_id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional bool is_receive = 3;
  if (has_is_receive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_receive(), output);
  }

  // optional uint32 cur_step = 4;
  if (has_cur_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cur_step(), output);
  }

  // optional uint32 max_step = 5;
  if (has_max_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_job::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 job_id = 1;
  if (has_job_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->job_id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional bool is_receive = 3;
  if (has_is_receive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_receive(), target);
  }

  // optional uint32 cur_step = 4;
  if (has_cur_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cur_step(), target);
  }

  // optional uint32 max_step = 5;
  if (has_max_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_job::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 job_id = 1;
    if (has_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bool is_receive = 3;
    if (has_is_receive()) {
      total_size += 1 + 1;
    }

    // optional uint32 cur_step = 4;
    if (has_cur_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_step());
    }

    // optional uint32 max_step = 5;
    if (has_max_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_job::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_job* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_job*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_job::MergeFrom(const game_job& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_job_id()) {
      set_job_id(from.job_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_is_receive()) {
      set_is_receive(from.is_receive());
    }
    if (from.has_cur_step()) {
      set_cur_step(from.cur_step());
    }
    if (from.has_max_step()) {
      set_max_step(from.max_step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_job::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_job::CopyFrom(const game_job& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_job::IsInitialized() const {

  return true;
}

void game_job::Swap(game_job* other) {
  if (other != this) {
    std::swap(job_id_, other->job_id_);
    std::swap(type_, other->type_);
    std::swap(is_receive_, other->is_receive_);
    std::swap(cur_step_, other->cur_step_);
    std::swap(max_step_, other->max_step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_job::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_job_descriptor_;
  metadata.reflection = game_job_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int job_all_list_ntf::kProtoidFieldNumber;
const int job_all_list_ntf::kJobSFieldNumber;
#endif  // !_MSC_VER

job_all_list_ntf::job_all_list_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void job_all_list_ntf::InitAsDefaultInstance() {
}

job_all_list_ntf::job_all_list_ntf(const job_all_list_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void job_all_list_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5500;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

job_all_list_ntf::~job_all_list_ntf() {
  SharedDtor();
}

void job_all_list_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void job_all_list_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* job_all_list_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return job_all_list_ntf_descriptor_;
}

const job_all_list_ntf& job_all_list_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

job_all_list_ntf* job_all_list_ntf::default_instance_ = NULL;

job_all_list_ntf* job_all_list_ntf::New() const {
  return new job_all_list_ntf;
}

void job_all_list_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5500;
  }
  job_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool job_all_list_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_all_list_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_job_s;
        break;
      }

      // repeated .SProtoSpace.game_job job_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_job_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_job_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_job_s;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void job_all_list_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_all_list_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.game_job job_s = 2;
  for (int i = 0; i < this->job_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->job_s(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* job_all_list_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_all_list_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.game_job job_s = 2;
  for (int i = 0; i < this->job_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->job_s(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int job_all_list_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_all_list_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.game_job job_s = 2;
  total_size += 1 * this->job_s_size();
  for (int i = 0; i < this->job_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->job_s(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void job_all_list_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const job_all_list_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const job_all_list_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void job_all_list_ntf::MergeFrom(const job_all_list_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  job_s_.MergeFrom(from.job_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void job_all_list_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void job_all_list_ntf::CopyFrom(const job_all_list_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool job_all_list_ntf::IsInitialized() const {

  return true;
}

void job_all_list_ntf::Swap(job_all_list_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    job_s_.Swap(&other->job_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata job_all_list_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = job_all_list_ntf_descriptor_;
  metadata.reflection = job_all_list_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int job_update_ntf::kProtoidFieldNumber;
const int job_update_ntf::kAddJobSFieldNumber;
const int job_update_ntf::kDelJobSFieldNumber;
const int job_update_ntf::kFixJobSFieldNumber;
#endif  // !_MSC_VER

job_update_ntf::job_update_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void job_update_ntf::InitAsDefaultInstance() {
}

job_update_ntf::job_update_ntf(const job_update_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void job_update_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5501;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

job_update_ntf::~job_update_ntf() {
  SharedDtor();
}

void job_update_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void job_update_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* job_update_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return job_update_ntf_descriptor_;
}

const job_update_ntf& job_update_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

job_update_ntf* job_update_ntf::default_instance_ = NULL;

job_update_ntf* job_update_ntf::New() const {
  return new job_update_ntf;
}

void job_update_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5501;
  }
  add_job_s_.Clear();
  del_job_s_.Clear();
  fix_job_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool job_update_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_update_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_add_job_s;
        break;
      }

      // repeated .SProtoSpace.game_job add_job_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_job_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_add_job_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_add_job_s;
        if (input->ExpectTag(26)) goto parse_del_job_s;
        break;
      }

      // repeated .SProtoSpace.game_job del_job_s = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_del_job_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_del_job_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_del_job_s;
        if (input->ExpectTag(34)) goto parse_fix_job_s;
        break;
      }

      // repeated .SProtoSpace.game_job fix_job_s = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fix_job_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fix_job_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fix_job_s;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void job_update_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_update_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.game_job add_job_s = 2;
  for (int i = 0; i < this->add_job_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->add_job_s(i), output);
  }

  // repeated .SProtoSpace.game_job del_job_s = 3;
  for (int i = 0; i < this->del_job_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->del_job_s(i), output);
  }

  // repeated .SProtoSpace.game_job fix_job_s = 4;
  for (int i = 0; i < this->fix_job_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fix_job_s(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* job_update_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_update_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.game_job add_job_s = 2;
  for (int i = 0; i < this->add_job_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->add_job_s(i), target);
  }

  // repeated .SProtoSpace.game_job del_job_s = 3;
  for (int i = 0; i < this->del_job_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->del_job_s(i), target);
  }

  // repeated .SProtoSpace.game_job fix_job_s = 4;
  for (int i = 0; i < this->fix_job_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fix_job_s(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int job_update_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_update_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.game_job add_job_s = 2;
  total_size += 1 * this->add_job_s_size();
  for (int i = 0; i < this->add_job_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->add_job_s(i));
  }

  // repeated .SProtoSpace.game_job del_job_s = 3;
  total_size += 1 * this->del_job_s_size();
  for (int i = 0; i < this->del_job_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->del_job_s(i));
  }

  // repeated .SProtoSpace.game_job fix_job_s = 4;
  total_size += 1 * this->fix_job_s_size();
  for (int i = 0; i < this->fix_job_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fix_job_s(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void job_update_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const job_update_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const job_update_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void job_update_ntf::MergeFrom(const job_update_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  add_job_s_.MergeFrom(from.add_job_s_);
  del_job_s_.MergeFrom(from.del_job_s_);
  fix_job_s_.MergeFrom(from.fix_job_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void job_update_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void job_update_ntf::CopyFrom(const job_update_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool job_update_ntf::IsInitialized() const {

  return true;
}

void job_update_ntf::Swap(job_update_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    add_job_s_.Swap(&other->add_job_s_);
    del_job_s_.Swap(&other->del_job_s_);
    fix_job_s_.Swap(&other->fix_job_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata job_update_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = job_update_ntf_descriptor_;
  metadata.reflection = job_update_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int job_operation_req::kProtoidFieldNumber;
const int job_operation_req::kTpyeFieldNumber;
const int job_operation_req::kJobIdFieldNumber;
#endif  // !_MSC_VER

job_operation_req::job_operation_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void job_operation_req::InitAsDefaultInstance() {
}

job_operation_req::job_operation_req(const job_operation_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void job_operation_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5502;
  tpye_ = 0;
  job_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

job_operation_req::~job_operation_req() {
  SharedDtor();
}

void job_operation_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void job_operation_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* job_operation_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return job_operation_req_descriptor_;
}

const job_operation_req& job_operation_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

job_operation_req* job_operation_req::default_instance_ = NULL;

job_operation_req* job_operation_req::New() const {
  return new job_operation_req;
}

void job_operation_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5502;
    tpye_ = 0;
    job_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool job_operation_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_operation_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tpye;
        break;
      }

      // optional int32 tpye = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tpye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tpye_)));
          set_has_tpye();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job_id;
        break;
      }

      // optional int32 job_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
          set_has_job_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void job_operation_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_operation_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 tpye = 2;
  if (has_tpye()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tpye(), output);
  }

  // optional int32 job_id = 3;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->job_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* job_operation_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_operation_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 tpye = 2;
  if (has_tpye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tpye(), target);
  }

  // optional int32 job_id = 3;
  if (has_job_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->job_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int job_operation_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_operation_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 tpye = 2;
    if (has_tpye()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tpye());
    }

    // optional int32 job_id = 3;
    if (has_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void job_operation_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const job_operation_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const job_operation_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void job_operation_req::MergeFrom(const job_operation_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_tpye()) {
      set_tpye(from.tpye());
    }
    if (from.has_job_id()) {
      set_job_id(from.job_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void job_operation_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void job_operation_req::CopyFrom(const job_operation_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool job_operation_req::IsInitialized() const {

  return true;
}

void job_operation_req::Swap(job_operation_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(tpye_, other->tpye_);
    std::swap(job_id_, other->job_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata job_operation_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = job_operation_req_descriptor_;
  metadata.reflection = job_operation_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int job_operation_ack::kProtoidFieldNumber;
const int job_operation_ack::kRetFieldNumber;
#endif  // !_MSC_VER

job_operation_ack::job_operation_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void job_operation_ack::InitAsDefaultInstance() {
}

job_operation_ack::job_operation_ack(const job_operation_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void job_operation_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5503;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

job_operation_ack::~job_operation_ack() {
  SharedDtor();
}

void job_operation_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void job_operation_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* job_operation_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return job_operation_ack_descriptor_;
}

const job_operation_ack& job_operation_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

job_operation_ack* job_operation_ack::default_instance_ = NULL;

job_operation_ack* job_operation_ack::New() const {
  return new job_operation_ack;
}

void job_operation_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5503;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool job_operation_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_operation_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void job_operation_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_operation_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2 [default = 0];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* job_operation_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_operation_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2 [default = 0];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int job_operation_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = job_operation_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2 [default = 0];
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void job_operation_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const job_operation_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const job_operation_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void job_operation_ack::MergeFrom(const job_operation_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void job_operation_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void job_operation_ack::CopyFrom(const job_operation_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool job_operation_ack::IsInitialized() const {

  return true;
}

void job_operation_ack::Swap(job_operation_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata job_operation_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = job_operation_ack_descriptor_;
  metadata.reflection = job_operation_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int all_quests_ntf::kProtoidFieldNumber;
const int all_quests_ntf::kQuestsFieldNumber;
const int all_quests_ntf::kActivitiesFieldNumber;
#endif  // !_MSC_VER

all_quests_ntf::all_quests_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void all_quests_ntf::InitAsDefaultInstance() {
}

all_quests_ntf::all_quests_ntf(const all_quests_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void all_quests_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5510;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

all_quests_ntf::~all_quests_ntf() {
  SharedDtor();
}

void all_quests_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void all_quests_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* all_quests_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return all_quests_ntf_descriptor_;
}

const all_quests_ntf& all_quests_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

all_quests_ntf* all_quests_ntf::default_instance_ = NULL;

all_quests_ntf* all_quests_ntf::New() const {
  return new all_quests_ntf;
}

void all_quests_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5510;
  }
  quests_.Clear();
  activities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool all_quests_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = all_quests_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quests;
        break;
      }

      // repeated .SProtoSpace.quest_data quests = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quests;
        if (input->ExpectTag(26)) goto parse_activities;
        break;
      }

      // repeated .SProtoSpace.task_activity_data activities = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_activities;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void all_quests_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = all_quests_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.quest_data quests = 2;
  for (int i = 0; i < this->quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->quests(i), output);
  }

  // repeated .SProtoSpace.task_activity_data activities = 3;
  for (int i = 0; i < this->activities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->activities(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* all_quests_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = all_quests_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.quest_data quests = 2;
  for (int i = 0; i < this->quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->quests(i), target);
  }

  // repeated .SProtoSpace.task_activity_data activities = 3;
  for (int i = 0; i < this->activities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->activities(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int all_quests_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = all_quests_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.quest_data quests = 2;
  total_size += 1 * this->quests_size();
  for (int i = 0; i < this->quests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quests(i));
  }

  // repeated .SProtoSpace.task_activity_data activities = 3;
  total_size += 1 * this->activities_size();
  for (int i = 0; i < this->activities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activities(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void all_quests_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const all_quests_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const all_quests_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void all_quests_ntf::MergeFrom(const all_quests_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  quests_.MergeFrom(from.quests_);
  activities_.MergeFrom(from.activities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void all_quests_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void all_quests_ntf::CopyFrom(const all_quests_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool all_quests_ntf::IsInitialized() const {

  return true;
}

void all_quests_ntf::Swap(all_quests_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    quests_.Swap(&other->quests_);
    activities_.Swap(&other->activities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata all_quests_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = all_quests_ntf_descriptor_;
  metadata.reflection = all_quests_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int quests_update_ntf::kProtoidFieldNumber;
const int quests_update_ntf::kQuestsFieldNumber;
const int quests_update_ntf::kActivitiesFieldNumber;
#endif  // !_MSC_VER

quests_update_ntf::quests_update_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void quests_update_ntf::InitAsDefaultInstance() {
}

quests_update_ntf::quests_update_ntf(const quests_update_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void quests_update_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5511;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

quests_update_ntf::~quests_update_ntf() {
  SharedDtor();
}

void quests_update_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void quests_update_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* quests_update_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return quests_update_ntf_descriptor_;
}

const quests_update_ntf& quests_update_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

quests_update_ntf* quests_update_ntf::default_instance_ = NULL;

quests_update_ntf* quests_update_ntf::New() const {
  return new quests_update_ntf;
}

void quests_update_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5511;
  }
  quests_.Clear();
  activities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool quests_update_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = quests_update_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quests;
        break;
      }

      // repeated .SProtoSpace.quest_data quests = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quests;
        if (input->ExpectTag(26)) goto parse_activities;
        break;
      }

      // repeated .SProtoSpace.task_activity_data activities = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_activities;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void quests_update_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = quests_update_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.quest_data quests = 2;
  for (int i = 0; i < this->quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->quests(i), output);
  }

  // repeated .SProtoSpace.task_activity_data activities = 3;
  for (int i = 0; i < this->activities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->activities(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* quests_update_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = quests_update_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.quest_data quests = 2;
  for (int i = 0; i < this->quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->quests(i), target);
  }

  // repeated .SProtoSpace.task_activity_data activities = 3;
  for (int i = 0; i < this->activities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->activities(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int quests_update_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = quests_update_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.quest_data quests = 2;
  total_size += 1 * this->quests_size();
  for (int i = 0; i < this->quests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quests(i));
  }

  // repeated .SProtoSpace.task_activity_data activities = 3;
  total_size += 1 * this->activities_size();
  for (int i = 0; i < this->activities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activities(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void quests_update_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const quests_update_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const quests_update_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void quests_update_ntf::MergeFrom(const quests_update_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  quests_.MergeFrom(from.quests_);
  activities_.MergeFrom(from.activities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void quests_update_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void quests_update_ntf::CopyFrom(const quests_update_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool quests_update_ntf::IsInitialized() const {

  return true;
}

void quests_update_ntf::Swap(quests_update_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    quests_.Swap(&other->quests_);
    activities_.Swap(&other->activities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata quests_update_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = quests_update_ntf_descriptor_;
  metadata.reflection = quests_update_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int finish_quest_req::kProtoidFieldNumber;
const int finish_quest_req::kConfigIdFieldNumber;
const int finish_quest_req::kTypeFieldNumber;
#endif  // !_MSC_VER

finish_quest_req::finish_quest_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void finish_quest_req::InitAsDefaultInstance() {
}

finish_quest_req::finish_quest_req(const finish_quest_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void finish_quest_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5512;
  config_id_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

finish_quest_req::~finish_quest_req() {
  SharedDtor();
}

void finish_quest_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void finish_quest_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* finish_quest_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return finish_quest_req_descriptor_;
}

const finish_quest_req& finish_quest_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

finish_quest_req* finish_quest_req::default_instance_ = NULL;

finish_quest_req* finish_quest_req::New() const {
  return new finish_quest_req;
}

void finish_quest_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5512;
    config_id_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool finish_quest_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_award_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_config_id;
        break;
      }

      // optional int32 config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void finish_quest_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_award_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 config_id = 2;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->config_id(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* finish_quest_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_award_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 config_id = 2;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->config_id(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int finish_quest_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_award_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 config_id = 2;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_id());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void finish_quest_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const finish_quest_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const finish_quest_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void finish_quest_req::MergeFrom(const finish_quest_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void finish_quest_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void finish_quest_req::CopyFrom(const finish_quest_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool finish_quest_req::IsInitialized() const {

  return true;
}

void finish_quest_req::Swap(finish_quest_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(config_id_, other->config_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata finish_quest_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = finish_quest_req_descriptor_;
  metadata.reflection = finish_quest_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int finish_quest_ack_rewards::kItemIdFieldNumber;
const int finish_quest_ack_rewards::kCountFieldNumber;
#endif  // !_MSC_VER

finish_quest_ack_rewards::finish_quest_ack_rewards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void finish_quest_ack_rewards::InitAsDefaultInstance() {
}

finish_quest_ack_rewards::finish_quest_ack_rewards(const finish_quest_ack_rewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void finish_quest_ack_rewards::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

finish_quest_ack_rewards::~finish_quest_ack_rewards() {
  SharedDtor();
}

void finish_quest_ack_rewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void finish_quest_ack_rewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* finish_quest_ack_rewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return finish_quest_ack_rewards_descriptor_;
}

const finish_quest_ack_rewards& finish_quest_ack_rewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

finish_quest_ack_rewards* finish_quest_ack_rewards::default_instance_ = NULL;

finish_quest_ack_rewards* finish_quest_ack_rewards::New() const {
  return new finish_quest_ack_rewards;
}

void finish_quest_ack_rewards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool finish_quest_ack_rewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void finish_quest_ack_rewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* finish_quest_ack_rewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int finish_quest_ack_rewards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void finish_quest_ack_rewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const finish_quest_ack_rewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const finish_quest_ack_rewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void finish_quest_ack_rewards::MergeFrom(const finish_quest_ack_rewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void finish_quest_ack_rewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void finish_quest_ack_rewards::CopyFrom(const finish_quest_ack_rewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool finish_quest_ack_rewards::IsInitialized() const {

  return true;
}

void finish_quest_ack_rewards::Swap(finish_quest_ack_rewards* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata finish_quest_ack_rewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = finish_quest_ack_rewards_descriptor_;
  metadata.reflection = finish_quest_ack_rewards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int finish_quest_ack::kProtoidFieldNumber;
const int finish_quest_ack::kConfigIdFieldNumber;
const int finish_quest_ack::kTypeFieldNumber;
const int finish_quest_ack::kResultFieldNumber;
const int finish_quest_ack::kRewwardsFieldNumber;
#endif  // !_MSC_VER

finish_quest_ack::finish_quest_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void finish_quest_ack::InitAsDefaultInstance() {
}

finish_quest_ack::finish_quest_ack(const finish_quest_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void finish_quest_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5513;
  config_id_ = 0;
  type_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

finish_quest_ack::~finish_quest_ack() {
  SharedDtor();
}

void finish_quest_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void finish_quest_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* finish_quest_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return finish_quest_ack_descriptor_;
}

const finish_quest_ack& finish_quest_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

finish_quest_ack* finish_quest_ack::default_instance_ = NULL;

finish_quest_ack* finish_quest_ack::New() const {
  return new finish_quest_ack;
}

void finish_quest_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5513;
    config_id_ = 0;
    type_ = 0;
    result_ = 0;
  }
  rewwards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool finish_quest_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_award_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_config_id;
        break;
      }

      // optional int32 config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional int32 result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rewwards;
        break;
      }

      // repeated .SProtoSpace.finish_quest_ack_rewards rewwards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewwards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewwards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rewwards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void finish_quest_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_award_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 config_id = 2;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->config_id(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->result(), output);
  }

  // repeated .SProtoSpace.finish_quest_ack_rewards rewwards = 5;
  for (int i = 0; i < this->rewwards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rewwards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* finish_quest_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_award_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 config_id = 2;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->config_id(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->result(), target);
  }

  // repeated .SProtoSpace.finish_quest_ack_rewards rewwards = 5;
  for (int i = 0; i < this->rewwards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rewwards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int finish_quest_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_award_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 config_id = 2;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_id());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .SProtoSpace.finish_quest_ack_rewards rewwards = 5;
  total_size += 1 * this->rewwards_size();
  for (int i = 0; i < this->rewwards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewwards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void finish_quest_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const finish_quest_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const finish_quest_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void finish_quest_ack::MergeFrom(const finish_quest_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewwards_.MergeFrom(from.rewwards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void finish_quest_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void finish_quest_ack::CopyFrom(const finish_quest_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool finish_quest_ack::IsInitialized() const {

  return true;
}

void finish_quest_ack::Swap(finish_quest_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(config_id_, other->config_id_);
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    rewwards_.Swap(&other->rewwards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata finish_quest_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = finish_quest_ack_descriptor_;
  metadata.reflection = finish_quest_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_quest_activity_reward_req::kProtoidFieldNumber;
const int get_quest_activity_reward_req::kActivityLvFieldNumber;
#endif  // !_MSC_VER

get_quest_activity_reward_req::get_quest_activity_reward_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_quest_activity_reward_req::InitAsDefaultInstance() {
}

get_quest_activity_reward_req::get_quest_activity_reward_req(const get_quest_activity_reward_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_quest_activity_reward_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5514;
  activity_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_quest_activity_reward_req::~get_quest_activity_reward_req() {
  SharedDtor();
}

void get_quest_activity_reward_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_quest_activity_reward_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_quest_activity_reward_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_quest_activity_reward_req_descriptor_;
}

const get_quest_activity_reward_req& get_quest_activity_reward_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

get_quest_activity_reward_req* get_quest_activity_reward_req::default_instance_ = NULL;

get_quest_activity_reward_req* get_quest_activity_reward_req::New() const {
  return new get_quest_activity_reward_req;
}

void get_quest_activity_reward_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5514;
    activity_lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_quest_activity_reward_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_activity_reward_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_lv;
        break;
      }

      // optional int32 activity_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_lv_)));
          set_has_activity_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_quest_activity_reward_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_activity_reward_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 activity_lv = 2;
  if (has_activity_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->activity_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_quest_activity_reward_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_activity_reward_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 activity_lv = 2;
  if (has_activity_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->activity_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_quest_activity_reward_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_activity_reward_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 activity_lv = 2;
    if (has_activity_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_quest_activity_reward_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_quest_activity_reward_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_quest_activity_reward_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_quest_activity_reward_req::MergeFrom(const get_quest_activity_reward_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_activity_lv()) {
      set_activity_lv(from.activity_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_quest_activity_reward_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_quest_activity_reward_req::CopyFrom(const get_quest_activity_reward_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_quest_activity_reward_req::IsInitialized() const {

  return true;
}

void get_quest_activity_reward_req::Swap(get_quest_activity_reward_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(activity_lv_, other->activity_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_quest_activity_reward_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_quest_activity_reward_req_descriptor_;
  metadata.reflection = get_quest_activity_reward_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_quest_activity_reward_ack::kProtoidFieldNumber;
const int get_quest_activity_reward_ack::kActivityLvFieldNumber;
const int get_quest_activity_reward_ack::kRetFieldNumber;
#endif  // !_MSC_VER

get_quest_activity_reward_ack::get_quest_activity_reward_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_quest_activity_reward_ack::InitAsDefaultInstance() {
}

get_quest_activity_reward_ack::get_quest_activity_reward_ack(const get_quest_activity_reward_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_quest_activity_reward_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5515;
  activity_lv_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_quest_activity_reward_ack::~get_quest_activity_reward_ack() {
  SharedDtor();
}

void get_quest_activity_reward_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_quest_activity_reward_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_quest_activity_reward_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_quest_activity_reward_ack_descriptor_;
}

const get_quest_activity_reward_ack& get_quest_activity_reward_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

get_quest_activity_reward_ack* get_quest_activity_reward_ack::default_instance_ = NULL;

get_quest_activity_reward_ack* get_quest_activity_reward_ack::New() const {
  return new get_quest_activity_reward_ack;
}

void get_quest_activity_reward_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5515;
    activity_lv_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_quest_activity_reward_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_activity_reward_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_lv;
        break;
      }

      // optional int32 activity_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_lv_)));
          set_has_activity_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_quest_activity_reward_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_activity_reward_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 activity_lv = 2;
  if (has_activity_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->activity_lv(), output);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_quest_activity_reward_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_activity_reward_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 activity_lv = 2;
  if (has_activity_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->activity_lv(), target);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_quest_activity_reward_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_quest_activity_reward_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 activity_lv = 2;
    if (has_activity_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_lv());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_quest_activity_reward_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_quest_activity_reward_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_quest_activity_reward_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_quest_activity_reward_ack::MergeFrom(const get_quest_activity_reward_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_activity_lv()) {
      set_activity_lv(from.activity_lv());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_quest_activity_reward_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_quest_activity_reward_ack::CopyFrom(const get_quest_activity_reward_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_quest_activity_reward_ack::IsInitialized() const {

  return true;
}

void get_quest_activity_reward_ack::Swap(get_quest_activity_reward_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(activity_lv_, other->activity_lv_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_quest_activity_reward_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_quest_activity_reward_ack_descriptor_;
  metadata.reflection = get_quest_activity_reward_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shop_get_all_item_req::kProtoidFieldNumber;
const int shop_get_all_item_req::kShopConfigIdFieldNumber;
#endif  // !_MSC_VER

shop_get_all_item_req::shop_get_all_item_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shop_get_all_item_req::InitAsDefaultInstance() {
}

shop_get_all_item_req::shop_get_all_item_req(const shop_get_all_item_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shop_get_all_item_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5602;
  shop_config_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shop_get_all_item_req::~shop_get_all_item_req() {
  SharedDtor();
}

void shop_get_all_item_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void shop_get_all_item_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shop_get_all_item_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shop_get_all_item_req_descriptor_;
}

const shop_get_all_item_req& shop_get_all_item_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

shop_get_all_item_req* shop_get_all_item_req::default_instance_ = NULL;

shop_get_all_item_req* shop_get_all_item_req::New() const {
  return new shop_get_all_item_req;
}

void shop_get_all_item_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5602;
    shop_config_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shop_get_all_item_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_get_all_item_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shop_config_id;
        break;
      }

      // optional int32 shop_config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_config_id_)));
          set_has_shop_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shop_get_all_item_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_get_all_item_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 shop_config_id = 2;
  if (has_shop_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shop_config_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shop_get_all_item_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_get_all_item_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 shop_config_id = 2;
  if (has_shop_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shop_config_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shop_get_all_item_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_get_all_item_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 shop_config_id = 2;
    if (has_shop_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_config_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shop_get_all_item_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shop_get_all_item_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shop_get_all_item_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shop_get_all_item_req::MergeFrom(const shop_get_all_item_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_shop_config_id()) {
      set_shop_config_id(from.shop_config_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shop_get_all_item_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shop_get_all_item_req::CopyFrom(const shop_get_all_item_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shop_get_all_item_req::IsInitialized() const {

  return true;
}

void shop_get_all_item_req::Swap(shop_get_all_item_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(shop_config_id_, other->shop_config_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shop_get_all_item_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shop_get_all_item_req_descriptor_;
  metadata.reflection = shop_get_all_item_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shop_get_all_item_ack::kProtoidFieldNumber;
const int shop_get_all_item_ack::kRetFieldNumber;
const int shop_get_all_item_ack::kShopConfigIdFieldNumber;
const int shop_get_all_item_ack::kShopInfoFieldNumber;
#endif  // !_MSC_VER

shop_get_all_item_ack::shop_get_all_item_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shop_get_all_item_ack::InitAsDefaultInstance() {
  shop_info_ = const_cast< ::SProtoSpace::shop_info*>(&::SProtoSpace::shop_info::default_instance());
}

shop_get_all_item_ack::shop_get_all_item_ack(const shop_get_all_item_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shop_get_all_item_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5603;
  ret_ = 0;
  shop_config_id_ = 0;
  shop_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shop_get_all_item_ack::~shop_get_all_item_ack() {
  SharedDtor();
}

void shop_get_all_item_ack::SharedDtor() {
  if (this != default_instance_) {
    delete shop_info_;
  }
}

void shop_get_all_item_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shop_get_all_item_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shop_get_all_item_ack_descriptor_;
}

const shop_get_all_item_ack& shop_get_all_item_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

shop_get_all_item_ack* shop_get_all_item_ack::default_instance_ = NULL;

shop_get_all_item_ack* shop_get_all_item_ack::New() const {
  return new shop_get_all_item_ack;
}

void shop_get_all_item_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5603;
    ret_ = 0;
    shop_config_id_ = 0;
    if (has_shop_info()) {
      if (shop_info_ != NULL) shop_info_->::SProtoSpace::shop_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shop_get_all_item_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_get_all_item_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_shop_config_id;
        break;
      }

      // optional int32 shop_config_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_config_id_)));
          set_has_shop_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_shop_info;
        break;
      }

      // optional .SProtoSpace.shop_info shop_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shop_get_all_item_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_get_all_item_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 shop_config_id = 3;
  if (has_shop_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->shop_config_id(), output);
  }

  // optional .SProtoSpace.shop_info shop_info = 4;
  if (has_shop_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->shop_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shop_get_all_item_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_get_all_item_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 shop_config_id = 3;
  if (has_shop_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->shop_config_id(), target);
  }

  // optional .SProtoSpace.shop_info shop_info = 4;
  if (has_shop_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->shop_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shop_get_all_item_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_get_all_item_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 shop_config_id = 3;
    if (has_shop_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_config_id());
    }

    // optional .SProtoSpace.shop_info shop_info = 4;
    if (has_shop_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shop_get_all_item_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shop_get_all_item_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shop_get_all_item_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shop_get_all_item_ack::MergeFrom(const shop_get_all_item_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_shop_config_id()) {
      set_shop_config_id(from.shop_config_id());
    }
    if (from.has_shop_info()) {
      mutable_shop_info()->::SProtoSpace::shop_info::MergeFrom(from.shop_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shop_get_all_item_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shop_get_all_item_ack::CopyFrom(const shop_get_all_item_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shop_get_all_item_ack::IsInitialized() const {

  return true;
}

void shop_get_all_item_ack::Swap(shop_get_all_item_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(shop_config_id_, other->shop_config_id_);
    std::swap(shop_info_, other->shop_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shop_get_all_item_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shop_get_all_item_ack_descriptor_;
  metadata.reflection = shop_get_all_item_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shop_buy_item_req::kProtoidFieldNumber;
const int shop_buy_item_req::kShopConfigIdFieldNumber;
const int shop_buy_item_req::kSaleConfigIdFieldNumber;
const int shop_buy_item_req::kBuyNumFieldNumber;
#endif  // !_MSC_VER

shop_buy_item_req::shop_buy_item_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shop_buy_item_req::InitAsDefaultInstance() {
}

shop_buy_item_req::shop_buy_item_req(const shop_buy_item_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shop_buy_item_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5604;
  shop_config_id_ = 0;
  sale_config_id_ = 0u;
  buy_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shop_buy_item_req::~shop_buy_item_req() {
  SharedDtor();
}

void shop_buy_item_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void shop_buy_item_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shop_buy_item_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shop_buy_item_req_descriptor_;
}

const shop_buy_item_req& shop_buy_item_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

shop_buy_item_req* shop_buy_item_req::default_instance_ = NULL;

shop_buy_item_req* shop_buy_item_req::New() const {
  return new shop_buy_item_req;
}

void shop_buy_item_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5604;
    shop_config_id_ = 0;
    sale_config_id_ = 0u;
    buy_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shop_buy_item_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_buy_item_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shop_config_id;
        break;
      }

      // optional int32 shop_config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_config_id_)));
          set_has_shop_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sale_config_id;
        break;
      }

      // optional uint32 sale_config_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sale_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sale_config_id_)));
          set_has_sale_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buy_num;
        break;
      }

      // optional uint32 buy_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_num_)));
          set_has_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shop_buy_item_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_buy_item_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 shop_config_id = 2;
  if (has_shop_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shop_config_id(), output);
  }

  // optional uint32 sale_config_id = 3;
  if (has_sale_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sale_config_id(), output);
  }

  // optional uint32 buy_num = 4;
  if (has_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buy_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shop_buy_item_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_buy_item_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 shop_config_id = 2;
  if (has_shop_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shop_config_id(), target);
  }

  // optional uint32 sale_config_id = 3;
  if (has_sale_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sale_config_id(), target);
  }

  // optional uint32 buy_num = 4;
  if (has_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buy_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shop_buy_item_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_buy_item_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 shop_config_id = 2;
    if (has_shop_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_config_id());
    }

    // optional uint32 sale_config_id = 3;
    if (has_sale_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sale_config_id());
    }

    // optional uint32 buy_num = 4;
    if (has_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shop_buy_item_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shop_buy_item_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shop_buy_item_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shop_buy_item_req::MergeFrom(const shop_buy_item_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_shop_config_id()) {
      set_shop_config_id(from.shop_config_id());
    }
    if (from.has_sale_config_id()) {
      set_sale_config_id(from.sale_config_id());
    }
    if (from.has_buy_num()) {
      set_buy_num(from.buy_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shop_buy_item_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shop_buy_item_req::CopyFrom(const shop_buy_item_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shop_buy_item_req::IsInitialized() const {

  return true;
}

void shop_buy_item_req::Swap(shop_buy_item_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(shop_config_id_, other->shop_config_id_);
    std::swap(sale_config_id_, other->sale_config_id_);
    std::swap(buy_num_, other->buy_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shop_buy_item_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shop_buy_item_req_descriptor_;
  metadata.reflection = shop_buy_item_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shop_buy_item_ack::kProtoidFieldNumber;
const int shop_buy_item_ack::kShopConfigIdFieldNumber;
const int shop_buy_item_ack::kSaleConfigIdFieldNumber;
const int shop_buy_item_ack::kBuyNumFieldNumber;
const int shop_buy_item_ack::kRetFieldNumber;
const int shop_buy_item_ack::kCostInfosFieldNumber;
#endif  // !_MSC_VER

shop_buy_item_ack::shop_buy_item_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shop_buy_item_ack::InitAsDefaultInstance() {
}

shop_buy_item_ack::shop_buy_item_ack(const shop_buy_item_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shop_buy_item_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5605;
  shop_config_id_ = 0;
  sale_config_id_ = 0u;
  buy_num_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shop_buy_item_ack::~shop_buy_item_ack() {
  SharedDtor();
}

void shop_buy_item_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void shop_buy_item_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shop_buy_item_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shop_buy_item_ack_descriptor_;
}

const shop_buy_item_ack& shop_buy_item_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

shop_buy_item_ack* shop_buy_item_ack::default_instance_ = NULL;

shop_buy_item_ack* shop_buy_item_ack::New() const {
  return new shop_buy_item_ack;
}

void shop_buy_item_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5605;
    shop_config_id_ = 0;
    sale_config_id_ = 0u;
    buy_num_ = 0u;
    ret_ = 0u;
  }
  cost_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shop_buy_item_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_buy_item_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shop_config_id;
        break;
      }

      // optional int32 shop_config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_config_id_)));
          set_has_shop_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sale_config_id;
        break;
      }

      // optional uint32 sale_config_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sale_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sale_config_id_)));
          set_has_sale_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buy_num;
        break;
      }

      // optional uint32 buy_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_num_)));
          set_has_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_cost_infos;
        break;
      }

      // repeated .SProtoSpace.shop_cost_info cost_infos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cost_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cost_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_cost_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shop_buy_item_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_buy_item_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 shop_config_id = 2;
  if (has_shop_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shop_config_id(), output);
  }

  // optional uint32 sale_config_id = 3;
  if (has_sale_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sale_config_id(), output);
  }

  // optional uint32 buy_num = 4;
  if (has_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buy_num(), output);
  }

  // optional uint32 ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ret(), output);
  }

  // repeated .SProtoSpace.shop_cost_info cost_infos = 7;
  for (int i = 0; i < this->cost_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->cost_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shop_buy_item_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_buy_item_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 shop_config_id = 2;
  if (has_shop_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shop_config_id(), target);
  }

  // optional uint32 sale_config_id = 3;
  if (has_sale_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sale_config_id(), target);
  }

  // optional uint32 buy_num = 4;
  if (has_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buy_num(), target);
  }

  // optional uint32 ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ret(), target);
  }

  // repeated .SProtoSpace.shop_cost_info cost_infos = 7;
  for (int i = 0; i < this->cost_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->cost_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shop_buy_item_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_buy_item_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 shop_config_id = 2;
    if (has_shop_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_config_id());
    }

    // optional uint32 sale_config_id = 3;
    if (has_sale_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sale_config_id());
    }

    // optional uint32 buy_num = 4;
    if (has_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_num());
    }

    // optional uint32 ret = 5;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .SProtoSpace.shop_cost_info cost_infos = 7;
  total_size += 1 * this->cost_infos_size();
  for (int i = 0; i < this->cost_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cost_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shop_buy_item_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shop_buy_item_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shop_buy_item_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shop_buy_item_ack::MergeFrom(const shop_buy_item_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  cost_infos_.MergeFrom(from.cost_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_shop_config_id()) {
      set_shop_config_id(from.shop_config_id());
    }
    if (from.has_sale_config_id()) {
      set_sale_config_id(from.sale_config_id());
    }
    if (from.has_buy_num()) {
      set_buy_num(from.buy_num());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shop_buy_item_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shop_buy_item_ack::CopyFrom(const shop_buy_item_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shop_buy_item_ack::IsInitialized() const {

  return true;
}

void shop_buy_item_ack::Swap(shop_buy_item_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(shop_config_id_, other->shop_config_id_);
    std::swap(sale_config_id_, other->sale_config_id_);
    std::swap(buy_num_, other->buy_num_);
    std::swap(ret_, other->ret_);
    cost_infos_.Swap(&other->cost_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shop_buy_item_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shop_buy_item_ack_descriptor_;
  metadata.reflection = shop_buy_item_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shop_refresh_req::kProtoidFieldNumber;
const int shop_refresh_req::kShopConfigIdFieldNumber;
const int shop_refresh_req::kRefreshTypeFieldNumber;
#endif  // !_MSC_VER

shop_refresh_req::shop_refresh_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shop_refresh_req::InitAsDefaultInstance() {
}

shop_refresh_req::shop_refresh_req(const shop_refresh_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shop_refresh_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5606;
  shop_config_id_ = 0;
  refresh_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shop_refresh_req::~shop_refresh_req() {
  SharedDtor();
}

void shop_refresh_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void shop_refresh_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shop_refresh_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shop_refresh_req_descriptor_;
}

const shop_refresh_req& shop_refresh_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

shop_refresh_req* shop_refresh_req::default_instance_ = NULL;

shop_refresh_req* shop_refresh_req::New() const {
  return new shop_refresh_req;
}

void shop_refresh_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5606;
    shop_config_id_ = 0;
    refresh_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shop_refresh_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_refresh_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shop_config_id;
        break;
      }

      // optional int32 shop_config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_config_id_)));
          set_has_shop_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_refresh_type;
        break;
      }

      // optional int32 refresh_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refresh_type_)));
          set_has_refresh_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shop_refresh_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_refresh_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 shop_config_id = 2;
  if (has_shop_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shop_config_id(), output);
  }

  // optional int32 refresh_type = 3;
  if (has_refresh_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->refresh_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shop_refresh_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_refresh_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 shop_config_id = 2;
  if (has_shop_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shop_config_id(), target);
  }

  // optional int32 refresh_type = 3;
  if (has_refresh_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->refresh_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shop_refresh_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_refresh_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 shop_config_id = 2;
    if (has_shop_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_config_id());
    }

    // optional int32 refresh_type = 3;
    if (has_refresh_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refresh_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shop_refresh_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shop_refresh_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shop_refresh_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shop_refresh_req::MergeFrom(const shop_refresh_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_shop_config_id()) {
      set_shop_config_id(from.shop_config_id());
    }
    if (from.has_refresh_type()) {
      set_refresh_type(from.refresh_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shop_refresh_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shop_refresh_req::CopyFrom(const shop_refresh_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shop_refresh_req::IsInitialized() const {

  return true;
}

void shop_refresh_req::Swap(shop_refresh_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(shop_config_id_, other->shop_config_id_);
    std::swap(refresh_type_, other->refresh_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shop_refresh_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shop_refresh_req_descriptor_;
  metadata.reflection = shop_refresh_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shop_refresh_ack::kProtoidFieldNumber;
const int shop_refresh_ack::kShopConfigIdFieldNumber;
const int shop_refresh_ack::kRetFieldNumber;
const int shop_refresh_ack::kCostInfosFieldNumber;
const int shop_refresh_ack::kShopInfoFieldNumber;
#endif  // !_MSC_VER

shop_refresh_ack::shop_refresh_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shop_refresh_ack::InitAsDefaultInstance() {
  cost_infos_ = const_cast< ::SProtoSpace::shop_cost_info*>(&::SProtoSpace::shop_cost_info::default_instance());
  shop_info_ = const_cast< ::SProtoSpace::shop_info*>(&::SProtoSpace::shop_info::default_instance());
}

shop_refresh_ack::shop_refresh_ack(const shop_refresh_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shop_refresh_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5607;
  shop_config_id_ = 0;
  ret_ = 0u;
  cost_infos_ = NULL;
  shop_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shop_refresh_ack::~shop_refresh_ack() {
  SharedDtor();
}

void shop_refresh_ack::SharedDtor() {
  if (this != default_instance_) {
    delete cost_infos_;
    delete shop_info_;
  }
}

void shop_refresh_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shop_refresh_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shop_refresh_ack_descriptor_;
}

const shop_refresh_ack& shop_refresh_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

shop_refresh_ack* shop_refresh_ack::default_instance_ = NULL;

shop_refresh_ack* shop_refresh_ack::New() const {
  return new shop_refresh_ack;
}

void shop_refresh_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5607;
    shop_config_id_ = 0;
    ret_ = 0u;
    if (has_cost_infos()) {
      if (cost_infos_ != NULL) cost_infos_->::SProtoSpace::shop_cost_info::Clear();
    }
    if (has_shop_info()) {
      if (shop_info_ != NULL) shop_info_->::SProtoSpace::shop_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shop_refresh_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_refresh_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shop_config_id;
        break;
      }

      // optional int32 shop_config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_config_id_)));
          set_has_shop_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cost_infos;
        break;
      }

      // optional .SProtoSpace.shop_cost_info cost_infos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cost_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cost_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_shop_info;
        break;
      }

      // optional .SProtoSpace.shop_info shop_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shop_refresh_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_refresh_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 shop_config_id = 2;
  if (has_shop_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shop_config_id(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  // optional .SProtoSpace.shop_cost_info cost_infos = 4;
  if (has_cost_infos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cost_infos(), output);
  }

  // optional .SProtoSpace.shop_info shop_info = 5;
  if (has_shop_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->shop_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shop_refresh_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_refresh_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 shop_config_id = 2;
  if (has_shop_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shop_config_id(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  // optional .SProtoSpace.shop_cost_info cost_infos = 4;
  if (has_cost_infos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cost_infos(), target);
  }

  // optional .SProtoSpace.shop_info shop_info = 5;
  if (has_shop_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->shop_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shop_refresh_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_refresh_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 shop_config_id = 2;
    if (has_shop_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_config_id());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional .SProtoSpace.shop_cost_info cost_infos = 4;
    if (has_cost_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cost_infos());
    }

    // optional .SProtoSpace.shop_info shop_info = 5;
    if (has_shop_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shop_refresh_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shop_refresh_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shop_refresh_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shop_refresh_ack::MergeFrom(const shop_refresh_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_shop_config_id()) {
      set_shop_config_id(from.shop_config_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cost_infos()) {
      mutable_cost_infos()->::SProtoSpace::shop_cost_info::MergeFrom(from.cost_infos());
    }
    if (from.has_shop_info()) {
      mutable_shop_info()->::SProtoSpace::shop_info::MergeFrom(from.shop_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shop_refresh_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shop_refresh_ack::CopyFrom(const shop_refresh_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shop_refresh_ack::IsInitialized() const {

  return true;
}

void shop_refresh_ack::Swap(shop_refresh_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(shop_config_id_, other->shop_config_id_);
    std::swap(ret_, other->ret_);
    std::swap(cost_infos_, other->cost_infos_);
    std::swap(shop_info_, other->shop_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shop_refresh_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shop_refresh_ack_descriptor_;
  metadata.reflection = shop_refresh_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shop_item_opt_req::kProtoidFieldNumber;
const int shop_item_opt_req::kShopConfigIdFieldNumber;
const int shop_item_opt_req::kSaleConfigIdFieldNumber;
const int shop_item_opt_req::kCountFieldNumber;
const int shop_item_opt_req::kTypeFieldNumber;
const int shop_item_opt_req::kTargetIdFieldNumber;
#endif  // !_MSC_VER

shop_item_opt_req::shop_item_opt_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shop_item_opt_req::InitAsDefaultInstance() {
}

shop_item_opt_req::shop_item_opt_req(const shop_item_opt_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shop_item_opt_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5609;
  shop_config_id_ = 0;
  sale_config_id_ = 0;
  count_ = 0;
  type_ = 0;
  target_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shop_item_opt_req::~shop_item_opt_req() {
  SharedDtor();
}

void shop_item_opt_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void shop_item_opt_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shop_item_opt_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shop_item_opt_req_descriptor_;
}

const shop_item_opt_req& shop_item_opt_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

shop_item_opt_req* shop_item_opt_req::default_instance_ = NULL;

shop_item_opt_req* shop_item_opt_req::New() const {
  return new shop_item_opt_req;
}

void shop_item_opt_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5609;
    shop_config_id_ = 0;
    sale_config_id_ = 0;
    count_ = 0;
    type_ = 0;
    target_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shop_item_opt_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_item_opt_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shop_config_id;
        break;
      }

      // optional int32 shop_config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_config_id_)));
          set_has_shop_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sale_config_id;
        break;
      }

      // optional int32 sale_config_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sale_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sale_config_id_)));
          set_has_sale_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shop_item_opt_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_item_opt_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 shop_config_id = 2;
  if (has_shop_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shop_config_id(), output);
  }

  // optional int32 sale_config_id = 3;
  if (has_sale_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sale_config_id(), output);
  }

  // optional int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional uint64 target_id = 6;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->target_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shop_item_opt_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_item_opt_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 shop_config_id = 2;
  if (has_shop_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shop_config_id(), target);
  }

  // optional int32 sale_config_id = 3;
  if (has_sale_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sale_config_id(), target);
  }

  // optional int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // optional uint64 target_id = 6;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->target_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shop_item_opt_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_item_opt_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 shop_config_id = 2;
    if (has_shop_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_config_id());
    }

    // optional int32 sale_config_id = 3;
    if (has_sale_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sale_config_id());
    }

    // optional int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 target_id = 6;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shop_item_opt_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shop_item_opt_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shop_item_opt_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shop_item_opt_req::MergeFrom(const shop_item_opt_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_shop_config_id()) {
      set_shop_config_id(from.shop_config_id());
    }
    if (from.has_sale_config_id()) {
      set_sale_config_id(from.sale_config_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shop_item_opt_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shop_item_opt_req::CopyFrom(const shop_item_opt_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shop_item_opt_req::IsInitialized() const {

  return true;
}

void shop_item_opt_req::Swap(shop_item_opt_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(shop_config_id_, other->shop_config_id_);
    std::swap(sale_config_id_, other->sale_config_id_);
    std::swap(count_, other->count_);
    std::swap(type_, other->type_);
    std::swap(target_id_, other->target_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shop_item_opt_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shop_item_opt_req_descriptor_;
  metadata.reflection = shop_item_opt_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shop_item_opt_ack::kProtoidFieldNumber;
const int shop_item_opt_ack::kShopConfigIdFieldNumber;
const int shop_item_opt_ack::kSaleConfigIdFieldNumber;
const int shop_item_opt_ack::kRetFieldNumber;
const int shop_item_opt_ack::kTypeFieldNumber;
const int shop_item_opt_ack::kTargetIdFieldNumber;
#endif  // !_MSC_VER

shop_item_opt_ack::shop_item_opt_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shop_item_opt_ack::InitAsDefaultInstance() {
}

shop_item_opt_ack::shop_item_opt_ack(const shop_item_opt_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shop_item_opt_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5610;
  shop_config_id_ = 0;
  sale_config_id_ = 0;
  ret_ = 0;
  type_ = 0;
  target_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shop_item_opt_ack::~shop_item_opt_ack() {
  SharedDtor();
}

void shop_item_opt_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void shop_item_opt_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shop_item_opt_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shop_item_opt_ack_descriptor_;
}

const shop_item_opt_ack& shop_item_opt_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

shop_item_opt_ack* shop_item_opt_ack::default_instance_ = NULL;

shop_item_opt_ack* shop_item_opt_ack::New() const {
  return new shop_item_opt_ack;
}

void shop_item_opt_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5610;
    shop_config_id_ = 0;
    sale_config_id_ = 0;
    ret_ = 0;
    type_ = 0;
    target_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shop_item_opt_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_item_opt_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shop_config_id;
        break;
      }

      // optional int32 shop_config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_config_id_)));
          set_has_shop_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sale_config_id;
        break;
      }

      // optional int32 sale_config_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sale_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sale_config_id_)));
          set_has_sale_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional int32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shop_item_opt_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_item_opt_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 shop_config_id = 2;
  if (has_shop_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shop_config_id(), output);
  }

  // optional int32 sale_config_id = 3;
  if (has_sale_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sale_config_id(), output);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional uint64 target_id = 6;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->target_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shop_item_opt_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_item_opt_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 shop_config_id = 2;
  if (has_shop_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shop_config_id(), target);
  }

  // optional int32 sale_config_id = 3;
  if (has_sale_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sale_config_id(), target);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ret(), target);
  }

  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // optional uint64 target_id = 6;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->target_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shop_item_opt_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_item_opt_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 shop_config_id = 2;
    if (has_shop_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_config_id());
    }

    // optional int32 sale_config_id = 3;
    if (has_sale_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sale_config_id());
    }

    // optional int32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 target_id = 6;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shop_item_opt_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shop_item_opt_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shop_item_opt_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shop_item_opt_ack::MergeFrom(const shop_item_opt_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_shop_config_id()) {
      set_shop_config_id(from.shop_config_id());
    }
    if (from.has_sale_config_id()) {
      set_sale_config_id(from.sale_config_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shop_item_opt_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shop_item_opt_ack::CopyFrom(const shop_item_opt_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shop_item_opt_ack::IsInitialized() const {

  return true;
}

void shop_item_opt_ack::Swap(shop_item_opt_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(shop_config_id_, other->shop_config_id_);
    std::swap(sale_config_id_, other->sale_config_id_);
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(target_id_, other->target_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shop_item_opt_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shop_item_opt_ack_descriptor_;
  metadata.reflection = shop_item_opt_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shop_open_ntf::kProtoidFieldNumber;
const int shop_open_ntf::kShopConfigIdFieldNumber;
const int shop_open_ntf::kDeadLineFieldNumber;
#endif  // !_MSC_VER

shop_open_ntf::shop_open_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shop_open_ntf::InitAsDefaultInstance() {
}

shop_open_ntf::shop_open_ntf(const shop_open_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shop_open_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5608;
  shop_config_id_ = 0;
  dead_line_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shop_open_ntf::~shop_open_ntf() {
  SharedDtor();
}

void shop_open_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void shop_open_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shop_open_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shop_open_ntf_descriptor_;
}

const shop_open_ntf& shop_open_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

shop_open_ntf* shop_open_ntf::default_instance_ = NULL;

shop_open_ntf* shop_open_ntf::New() const {
  return new shop_open_ntf;
}

void shop_open_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5608;
    shop_config_id_ = 0;
    dead_line_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shop_open_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_open_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shop_config_id;
        break;
      }

      // optional int32 shop_config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_config_id_)));
          set_has_shop_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dead_line;
        break;
      }

      // optional uint32 dead_line = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_line_)));
          set_has_dead_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shop_open_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_open_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 shop_config_id = 2;
  if (has_shop_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shop_config_id(), output);
  }

  // optional uint32 dead_line = 3;
  if (has_dead_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dead_line(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shop_open_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_open_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 shop_config_id = 2;
  if (has_shop_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shop_config_id(), target);
  }

  // optional uint32 dead_line = 3;
  if (has_dead_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dead_line(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shop_open_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = shop_open_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 shop_config_id = 2;
    if (has_shop_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_config_id());
    }

    // optional uint32 dead_line = 3;
    if (has_dead_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_line());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shop_open_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shop_open_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shop_open_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shop_open_ntf::MergeFrom(const shop_open_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_shop_config_id()) {
      set_shop_config_id(from.shop_config_id());
    }
    if (from.has_dead_line()) {
      set_dead_line(from.dead_line());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shop_open_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shop_open_ntf::CopyFrom(const shop_open_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shop_open_ntf::IsInitialized() const {

  return true;
}

void shop_open_ntf::Swap(shop_open_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(shop_config_id_, other->shop_config_id_);
    std::swap(dead_line_, other->dead_line_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shop_open_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shop_open_ntf_descriptor_;
  metadata.reflection = shop_open_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_officer_apply_req::kProtoidFieldNumber;
const int game_officer_apply_req::kGradeFieldNumber;
#endif  // !_MSC_VER

game_officer_apply_req::game_officer_apply_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_officer_apply_req::InitAsDefaultInstance() {
}

game_officer_apply_req::game_officer_apply_req(const game_officer_apply_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_officer_apply_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6706;
  grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_officer_apply_req::~game_officer_apply_req() {
  SharedDtor();
}

void game_officer_apply_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_officer_apply_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_officer_apply_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_officer_apply_req_descriptor_;
}

const game_officer_apply_req& game_officer_apply_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

game_officer_apply_req* game_officer_apply_req::default_instance_ = NULL;

game_officer_apply_req* game_officer_apply_req::New() const {
  return new game_officer_apply_req;
}

void game_officer_apply_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6706;
    grade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_officer_apply_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = game_officer_apply_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_officer_apply_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = game_officer_apply_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_officer_apply_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = game_officer_apply_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_officer_apply_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = game_officer_apply_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_officer_apply_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_officer_apply_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_officer_apply_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_officer_apply_req::MergeFrom(const game_officer_apply_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_officer_apply_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_officer_apply_req::CopyFrom(const game_officer_apply_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_officer_apply_req::IsInitialized() const {

  return true;
}

void game_officer_apply_req::Swap(game_officer_apply_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_officer_apply_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_officer_apply_req_descriptor_;
  metadata.reflection = game_officer_apply_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_officer_apply_ack::kProtoidFieldNumber;
const int game_officer_apply_ack::kGradeFieldNumber;
const int game_officer_apply_ack::kRetFieldNumber;
#endif  // !_MSC_VER

game_officer_apply_ack::game_officer_apply_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_officer_apply_ack::InitAsDefaultInstance() {
}

game_officer_apply_ack::game_officer_apply_ack(const game_officer_apply_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_officer_apply_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6707;
  grade_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_officer_apply_ack::~game_officer_apply_ack() {
  SharedDtor();
}

void game_officer_apply_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_officer_apply_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_officer_apply_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_officer_apply_ack_descriptor_;
}

const game_officer_apply_ack& game_officer_apply_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

game_officer_apply_ack* game_officer_apply_ack::default_instance_ = NULL;

game_officer_apply_ack* game_officer_apply_ack::New() const {
  return new game_officer_apply_ack;
}

void game_officer_apply_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6707;
    grade_ = 0u;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_officer_apply_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = game_officer_apply_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_officer_apply_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = game_officer_apply_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grade(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_officer_apply_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = game_officer_apply_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grade(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_officer_apply_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = game_officer_apply_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_officer_apply_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_officer_apply_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_officer_apply_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_officer_apply_ack::MergeFrom(const game_officer_apply_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_officer_apply_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_officer_apply_ack::CopyFrom(const game_officer_apply_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_officer_apply_ack::IsInitialized() const {

  return true;
}

void game_officer_apply_ack::Swap(game_officer_apply_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(grade_, other->grade_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_officer_apply_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_officer_apply_ack_descriptor_;
  metadata.reflection = game_officer_apply_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int officer_daily_salary_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

officer_daily_salary_req::officer_daily_salary_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void officer_daily_salary_req::InitAsDefaultInstance() {
}

officer_daily_salary_req::officer_daily_salary_req(const officer_daily_salary_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void officer_daily_salary_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6710;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

officer_daily_salary_req::~officer_daily_salary_req() {
  SharedDtor();
}

void officer_daily_salary_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void officer_daily_salary_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* officer_daily_salary_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return officer_daily_salary_req_descriptor_;
}

const officer_daily_salary_req& officer_daily_salary_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

officer_daily_salary_req* officer_daily_salary_req::default_instance_ = NULL;

officer_daily_salary_req* officer_daily_salary_req::New() const {
  return new officer_daily_salary_req;
}

void officer_daily_salary_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6710;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool officer_daily_salary_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = officer_daily_salary_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void officer_daily_salary_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = officer_daily_salary_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* officer_daily_salary_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = officer_daily_salary_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int officer_daily_salary_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = officer_daily_salary_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void officer_daily_salary_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const officer_daily_salary_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const officer_daily_salary_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void officer_daily_salary_req::MergeFrom(const officer_daily_salary_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void officer_daily_salary_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void officer_daily_salary_req::CopyFrom(const officer_daily_salary_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool officer_daily_salary_req::IsInitialized() const {

  return true;
}

void officer_daily_salary_req::Swap(officer_daily_salary_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata officer_daily_salary_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = officer_daily_salary_req_descriptor_;
  metadata.reflection = officer_daily_salary_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int officer_daily_salary_ack::kProtoidFieldNumber;
const int officer_daily_salary_ack::kRetFieldNumber;
const int officer_daily_salary_ack::kItemsFieldNumber;
#endif  // !_MSC_VER

officer_daily_salary_ack::officer_daily_salary_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void officer_daily_salary_ack::InitAsDefaultInstance() {
}

officer_daily_salary_ack::officer_daily_salary_ack(const officer_daily_salary_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void officer_daily_salary_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6711;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

officer_daily_salary_ack::~officer_daily_salary_ack() {
  SharedDtor();
}

void officer_daily_salary_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void officer_daily_salary_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* officer_daily_salary_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return officer_daily_salary_ack_descriptor_;
}

const officer_daily_salary_ack& officer_daily_salary_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

officer_daily_salary_ack* officer_daily_salary_ack::default_instance_ = NULL;

officer_daily_salary_ack* officer_daily_salary_ack::New() const {
  return new officer_daily_salary_ack;
}

void officer_daily_salary_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6711;
    ret_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool officer_daily_salary_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = officer_daily_salary_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .SProtoSpace.reward_item items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void officer_daily_salary_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = officer_daily_salary_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // repeated .SProtoSpace.reward_item items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* officer_daily_salary_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = officer_daily_salary_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // repeated .SProtoSpace.reward_item items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int officer_daily_salary_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = officer_daily_salary_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .SProtoSpace.reward_item items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void officer_daily_salary_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const officer_daily_salary_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const officer_daily_salary_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void officer_daily_salary_ack::MergeFrom(const officer_daily_salary_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void officer_daily_salary_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void officer_daily_salary_ack::CopyFrom(const officer_daily_salary_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool officer_daily_salary_ack::IsInitialized() const {

  return true;
}

void officer_daily_salary_ack::Swap(officer_daily_salary_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata officer_daily_salary_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = officer_daily_salary_ack_descriptor_;
  metadata.reflection = officer_daily_salary_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int officer_result_ntf::kProtoidFieldNumber;
const int officer_result_ntf::kGradeFieldNumber;
const int officer_result_ntf::kAdmitFieldNumber;
#endif  // !_MSC_VER

officer_result_ntf::officer_result_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void officer_result_ntf::InitAsDefaultInstance() {
}

officer_result_ntf::officer_result_ntf(const officer_result_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void officer_result_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6712;
  grade_ = 0u;
  admit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

officer_result_ntf::~officer_result_ntf() {
  SharedDtor();
}

void officer_result_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void officer_result_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* officer_result_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return officer_result_ntf_descriptor_;
}

const officer_result_ntf& officer_result_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

officer_result_ntf* officer_result_ntf::default_instance_ = NULL;

officer_result_ntf* officer_result_ntf::New() const {
  return new officer_result_ntf;
}

void officer_result_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6712;
    grade_ = 0u;
    admit_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool officer_result_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = officer_result_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_admit;
        break;
      }

      // optional bool admit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_admit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &admit_)));
          set_has_admit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void officer_result_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = officer_result_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grade(), output);
  }

  // optional bool admit = 3;
  if (has_admit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->admit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* officer_result_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = officer_result_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grade(), target);
  }

  // optional bool admit = 3;
  if (has_admit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->admit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int officer_result_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = officer_result_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional bool admit = 3;
    if (has_admit()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void officer_result_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const officer_result_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const officer_result_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void officer_result_ntf::MergeFrom(const officer_result_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_admit()) {
      set_admit(from.admit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void officer_result_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void officer_result_ntf::CopyFrom(const officer_result_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool officer_result_ntf::IsInitialized() const {

  return true;
}

void officer_result_ntf::Swap(officer_result_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(grade_, other->grade_);
    std::swap(admit_, other->admit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata officer_result_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = officer_result_ntf_descriptor_;
  metadata.reflection = officer_result_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_officer_applicants_req::kProtoidFieldNumber;
const int get_officer_applicants_req::kGradeFieldNumber;
#endif  // !_MSC_VER

get_officer_applicants_req::get_officer_applicants_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_officer_applicants_req::InitAsDefaultInstance() {
}

get_officer_applicants_req::get_officer_applicants_req(const get_officer_applicants_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_officer_applicants_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6715;
  grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_officer_applicants_req::~get_officer_applicants_req() {
  SharedDtor();
}

void get_officer_applicants_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_officer_applicants_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_officer_applicants_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_officer_applicants_req_descriptor_;
}

const get_officer_applicants_req& get_officer_applicants_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

get_officer_applicants_req* get_officer_applicants_req::default_instance_ = NULL;

get_officer_applicants_req* get_officer_applicants_req::New() const {
  return new get_officer_applicants_req;
}

void get_officer_applicants_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6715;
    grade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_officer_applicants_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_officer_applicants_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_officer_applicants_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_officer_applicants_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_officer_applicants_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_officer_applicants_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_officer_applicants_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_officer_applicants_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_officer_applicants_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_officer_applicants_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_officer_applicants_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_officer_applicants_req::MergeFrom(const get_officer_applicants_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_officer_applicants_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_officer_applicants_req::CopyFrom(const get_officer_applicants_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_officer_applicants_req::IsInitialized() const {

  return true;
}

void get_officer_applicants_req::Swap(get_officer_applicants_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_officer_applicants_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_officer_applicants_req_descriptor_;
  metadata.reflection = get_officer_applicants_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_officer_applicants_ack::kProtoidFieldNumber;
const int get_officer_applicants_ack::kRetFieldNumber;
const int get_officer_applicants_ack::kGradeFieldNumber;
const int get_officer_applicants_ack::kApplyNumFieldNumber;
const int get_officer_applicants_ack::kPostsNumFieldNumber;
const int get_officer_applicants_ack::kApplysFieldNumber;
#endif  // !_MSC_VER

get_officer_applicants_ack::get_officer_applicants_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_officer_applicants_ack::InitAsDefaultInstance() {
}

get_officer_applicants_ack::get_officer_applicants_ack(const get_officer_applicants_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_officer_applicants_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6716;
  ret_ = 0;
  grade_ = 0u;
  apply_num_ = 0u;
  posts_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_officer_applicants_ack::~get_officer_applicants_ack() {
  SharedDtor();
}

void get_officer_applicants_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_officer_applicants_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_officer_applicants_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_officer_applicants_ack_descriptor_;
}

const get_officer_applicants_ack& get_officer_applicants_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

get_officer_applicants_ack* get_officer_applicants_ack::default_instance_ = NULL;

get_officer_applicants_ack* get_officer_applicants_ack::New() const {
  return new get_officer_applicants_ack;
}

void get_officer_applicants_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6716;
    ret_ = 0;
    grade_ = 0u;
    apply_num_ = 0u;
    posts_num_ = 0u;
  }
  applys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_officer_applicants_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_officer_applicants_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_apply_num;
        break;
      }

      // optional uint32 apply_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apply_num_)));
          set_has_apply_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_posts_num;
        break;
      }

      // optional uint32 posts_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posts_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posts_num_)));
          set_has_posts_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_applys;
        break;
      }

      // repeated .SProtoSpace.offical_apply_data applys = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_applys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_officer_applicants_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_officer_applicants_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->grade(), output);
  }

  // optional uint32 apply_num = 4;
  if (has_apply_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->apply_num(), output);
  }

  // optional uint32 posts_num = 5;
  if (has_posts_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->posts_num(), output);
  }

  // repeated .SProtoSpace.offical_apply_data applys = 6;
  for (int i = 0; i < this->applys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->applys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_officer_applicants_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_officer_applicants_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->grade(), target);
  }

  // optional uint32 apply_num = 4;
  if (has_apply_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->apply_num(), target);
  }

  // optional uint32 posts_num = 5;
  if (has_posts_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->posts_num(), target);
  }

  // repeated .SProtoSpace.offical_apply_data applys = 6;
  for (int i = 0; i < this->applys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->applys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_officer_applicants_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_officer_applicants_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional uint32 apply_num = 4;
    if (has_apply_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apply_num());
    }

    // optional uint32 posts_num = 5;
    if (has_posts_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posts_num());
    }

  }
  // repeated .SProtoSpace.offical_apply_data applys = 6;
  total_size += 1 * this->applys_size();
  for (int i = 0; i < this->applys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_officer_applicants_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_officer_applicants_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_officer_applicants_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_officer_applicants_ack::MergeFrom(const get_officer_applicants_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  applys_.MergeFrom(from.applys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_apply_num()) {
      set_apply_num(from.apply_num());
    }
    if (from.has_posts_num()) {
      set_posts_num(from.posts_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_officer_applicants_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_officer_applicants_ack::CopyFrom(const get_officer_applicants_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_officer_applicants_ack::IsInitialized() const {

  return true;
}

void get_officer_applicants_ack::Swap(get_officer_applicants_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(grade_, other->grade_);
    std::swap(apply_num_, other->apply_num_);
    std::swap(posts_num_, other->posts_num_);
    applys_.Swap(&other->applys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_officer_applicants_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_officer_applicants_ack_descriptor_;
  metadata.reflection = get_officer_applicants_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cancel_officer_apply_req::kProtoidFieldNumber;
const int cancel_officer_apply_req::kGradeFieldNumber;
#endif  // !_MSC_VER

cancel_officer_apply_req::cancel_officer_apply_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cancel_officer_apply_req::InitAsDefaultInstance() {
}

cancel_officer_apply_req::cancel_officer_apply_req(const cancel_officer_apply_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cancel_officer_apply_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6717;
  grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cancel_officer_apply_req::~cancel_officer_apply_req() {
  SharedDtor();
}

void cancel_officer_apply_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cancel_officer_apply_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cancel_officer_apply_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cancel_officer_apply_req_descriptor_;
}

const cancel_officer_apply_req& cancel_officer_apply_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

cancel_officer_apply_req* cancel_officer_apply_req::default_instance_ = NULL;

cancel_officer_apply_req* cancel_officer_apply_req::New() const {
  return new cancel_officer_apply_req;
}

void cancel_officer_apply_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6717;
    grade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cancel_officer_apply_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = cancel_officer_apply_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cancel_officer_apply_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = cancel_officer_apply_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cancel_officer_apply_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = cancel_officer_apply_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cancel_officer_apply_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = cancel_officer_apply_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cancel_officer_apply_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cancel_officer_apply_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cancel_officer_apply_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cancel_officer_apply_req::MergeFrom(const cancel_officer_apply_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cancel_officer_apply_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cancel_officer_apply_req::CopyFrom(const cancel_officer_apply_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cancel_officer_apply_req::IsInitialized() const {

  return true;
}

void cancel_officer_apply_req::Swap(cancel_officer_apply_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cancel_officer_apply_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cancel_officer_apply_req_descriptor_;
  metadata.reflection = cancel_officer_apply_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cancel_officer_apply_ack::kProtoidFieldNumber;
const int cancel_officer_apply_ack::kGradeFieldNumber;
const int cancel_officer_apply_ack::kRetFieldNumber;
#endif  // !_MSC_VER

cancel_officer_apply_ack::cancel_officer_apply_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cancel_officer_apply_ack::InitAsDefaultInstance() {
}

cancel_officer_apply_ack::cancel_officer_apply_ack(const cancel_officer_apply_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cancel_officer_apply_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6718;
  grade_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cancel_officer_apply_ack::~cancel_officer_apply_ack() {
  SharedDtor();
}

void cancel_officer_apply_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cancel_officer_apply_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cancel_officer_apply_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cancel_officer_apply_ack_descriptor_;
}

const cancel_officer_apply_ack& cancel_officer_apply_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

cancel_officer_apply_ack* cancel_officer_apply_ack::default_instance_ = NULL;

cancel_officer_apply_ack* cancel_officer_apply_ack::New() const {
  return new cancel_officer_apply_ack;
}

void cancel_officer_apply_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6718;
    grade_ = 0u;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cancel_officer_apply_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = cancel_officer_apply_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cancel_officer_apply_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = cancel_officer_apply_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grade(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cancel_officer_apply_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = cancel_officer_apply_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grade(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cancel_officer_apply_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = cancel_officer_apply_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cancel_officer_apply_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cancel_officer_apply_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cancel_officer_apply_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cancel_officer_apply_ack::MergeFrom(const cancel_officer_apply_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cancel_officer_apply_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cancel_officer_apply_ack::CopyFrom(const cancel_officer_apply_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cancel_officer_apply_ack::IsInitialized() const {

  return true;
}

void cancel_officer_apply_ack::Swap(cancel_officer_apply_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(grade_, other->grade_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cancel_officer_apply_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cancel_officer_apply_ack_descriptor_;
  metadata.reflection = cancel_officer_apply_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int share_officer_upgrade_req::kProtoidFieldNumber;
const int share_officer_upgrade_req::kGradeFieldNumber;
const int share_officer_upgrade_req::kWorldChannelIdFieldNumber;
const int share_officer_upgrade_req::kContentFieldNumber;
#endif  // !_MSC_VER

share_officer_upgrade_req::share_officer_upgrade_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void share_officer_upgrade_req::InitAsDefaultInstance() {
}

share_officer_upgrade_req::share_officer_upgrade_req(const share_officer_upgrade_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void share_officer_upgrade_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6719;
  grade_ = 0u;
  world_channel_id_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

share_officer_upgrade_req::~share_officer_upgrade_req() {
  SharedDtor();
}

void share_officer_upgrade_req::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void share_officer_upgrade_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* share_officer_upgrade_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return share_officer_upgrade_req_descriptor_;
}

const share_officer_upgrade_req& share_officer_upgrade_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

share_officer_upgrade_req* share_officer_upgrade_req::default_instance_ = NULL;

share_officer_upgrade_req* share_officer_upgrade_req::New() const {
  return new share_officer_upgrade_req;
}

void share_officer_upgrade_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6719;
    grade_ = 0u;
    world_channel_id_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool share_officer_upgrade_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = share_officer_upgrade_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_world_channel_id;
        break;
      }

      // optional uint32 world_channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &world_channel_id_)));
          set_has_world_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void share_officer_upgrade_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = share_officer_upgrade_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grade(), output);
  }

  // optional uint32 world_channel_id = 3;
  if (has_world_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->world_channel_id(), output);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* share_officer_upgrade_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = share_officer_upgrade_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grade(), target);
  }

  // optional uint32 world_channel_id = 3;
  if (has_world_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->world_channel_id(), target);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int share_officer_upgrade_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = share_officer_upgrade_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional uint32 world_channel_id = 3;
    if (has_world_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->world_channel_id());
    }

    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void share_officer_upgrade_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const share_officer_upgrade_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const share_officer_upgrade_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void share_officer_upgrade_req::MergeFrom(const share_officer_upgrade_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_world_channel_id()) {
      set_world_channel_id(from.world_channel_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void share_officer_upgrade_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void share_officer_upgrade_req::CopyFrom(const share_officer_upgrade_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool share_officer_upgrade_req::IsInitialized() const {

  return true;
}

void share_officer_upgrade_req::Swap(share_officer_upgrade_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(grade_, other->grade_);
    std::swap(world_channel_id_, other->world_channel_id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata share_officer_upgrade_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = share_officer_upgrade_req_descriptor_;
  metadata.reflection = share_officer_upgrade_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int share_officer_upgrade_ack::kProtoidFieldNumber;
const int share_officer_upgrade_ack::kGradeFieldNumber;
const int share_officer_upgrade_ack::kWorldChannelIdFieldNumber;
const int share_officer_upgrade_ack::kRetFieldNumber;
#endif  // !_MSC_VER

share_officer_upgrade_ack::share_officer_upgrade_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void share_officer_upgrade_ack::InitAsDefaultInstance() {
}

share_officer_upgrade_ack::share_officer_upgrade_ack(const share_officer_upgrade_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void share_officer_upgrade_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6720;
  grade_ = 0u;
  world_channel_id_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

share_officer_upgrade_ack::~share_officer_upgrade_ack() {
  SharedDtor();
}

void share_officer_upgrade_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void share_officer_upgrade_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* share_officer_upgrade_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return share_officer_upgrade_ack_descriptor_;
}

const share_officer_upgrade_ack& share_officer_upgrade_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

share_officer_upgrade_ack* share_officer_upgrade_ack::default_instance_ = NULL;

share_officer_upgrade_ack* share_officer_upgrade_ack::New() const {
  return new share_officer_upgrade_ack;
}

void share_officer_upgrade_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6720;
    grade_ = 0u;
    world_channel_id_ = 0u;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool share_officer_upgrade_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = share_officer_upgrade_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_world_channel_id;
        break;
      }

      // optional uint32 world_channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &world_channel_id_)));
          set_has_world_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void share_officer_upgrade_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = share_officer_upgrade_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grade(), output);
  }

  // optional uint32 world_channel_id = 3;
  if (has_world_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->world_channel_id(), output);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* share_officer_upgrade_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = share_officer_upgrade_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grade(), target);
  }

  // optional uint32 world_channel_id = 3;
  if (has_world_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->world_channel_id(), target);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int share_officer_upgrade_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = share_officer_upgrade_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional uint32 world_channel_id = 3;
    if (has_world_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->world_channel_id());
    }

    // optional uint32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void share_officer_upgrade_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const share_officer_upgrade_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const share_officer_upgrade_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void share_officer_upgrade_ack::MergeFrom(const share_officer_upgrade_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_world_channel_id()) {
      set_world_channel_id(from.world_channel_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void share_officer_upgrade_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void share_officer_upgrade_ack::CopyFrom(const share_officer_upgrade_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool share_officer_upgrade_ack::IsInitialized() const {

  return true;
}

void share_officer_upgrade_ack::Swap(share_officer_upgrade_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(grade_, other->grade_);
    std::swap(world_channel_id_, other->world_channel_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata share_officer_upgrade_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = share_officer_upgrade_ack_descriptor_;
  metadata.reflection = share_officer_upgrade_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_share_officer_upgrade_req::kProtoidFieldNumber;
const int get_share_officer_upgrade_req::kShareIdFieldNumber;
#endif  // !_MSC_VER

get_share_officer_upgrade_req::get_share_officer_upgrade_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_share_officer_upgrade_req::InitAsDefaultInstance() {
}

get_share_officer_upgrade_req::get_share_officer_upgrade_req(const get_share_officer_upgrade_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_share_officer_upgrade_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6721;
  share_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_share_officer_upgrade_req::~get_share_officer_upgrade_req() {
  SharedDtor();
}

void get_share_officer_upgrade_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_share_officer_upgrade_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_share_officer_upgrade_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_share_officer_upgrade_req_descriptor_;
}

const get_share_officer_upgrade_req& get_share_officer_upgrade_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

get_share_officer_upgrade_req* get_share_officer_upgrade_req::default_instance_ = NULL;

get_share_officer_upgrade_req* get_share_officer_upgrade_req::New() const {
  return new get_share_officer_upgrade_req;
}

void get_share_officer_upgrade_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6721;
    share_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_share_officer_upgrade_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_share_officer_upgrade_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_share_id;
        break;
      }

      // optional uint64 share_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_share_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &share_id_)));
          set_has_share_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_share_officer_upgrade_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_share_officer_upgrade_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 share_id = 2;
  if (has_share_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->share_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_share_officer_upgrade_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_share_officer_upgrade_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 share_id = 2;
  if (has_share_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->share_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_share_officer_upgrade_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_share_officer_upgrade_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 share_id = 2;
    if (has_share_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->share_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_share_officer_upgrade_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_share_officer_upgrade_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_share_officer_upgrade_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_share_officer_upgrade_req::MergeFrom(const get_share_officer_upgrade_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_share_id()) {
      set_share_id(from.share_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_share_officer_upgrade_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_share_officer_upgrade_req::CopyFrom(const get_share_officer_upgrade_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_share_officer_upgrade_req::IsInitialized() const {

  return true;
}

void get_share_officer_upgrade_req::Swap(get_share_officer_upgrade_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(share_id_, other->share_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_share_officer_upgrade_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_share_officer_upgrade_req_descriptor_;
  metadata.reflection = get_share_officer_upgrade_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_share_officer_upgrade_ack::kProtoidFieldNumber;
const int get_share_officer_upgrade_ack::kRetFieldNumber;
const int get_share_officer_upgrade_ack::kDataFieldNumber;
#endif  // !_MSC_VER

get_share_officer_upgrade_ack::get_share_officer_upgrade_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_share_officer_upgrade_ack::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::share_officer_upgrade*>(&::SProtoSpace::share_officer_upgrade::default_instance());
}

get_share_officer_upgrade_ack::get_share_officer_upgrade_ack(const get_share_officer_upgrade_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_share_officer_upgrade_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6722;
  ret_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_share_officer_upgrade_ack::~get_share_officer_upgrade_ack() {
  SharedDtor();
}

void get_share_officer_upgrade_ack::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void get_share_officer_upgrade_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_share_officer_upgrade_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_share_officer_upgrade_ack_descriptor_;
}

const get_share_officer_upgrade_ack& get_share_officer_upgrade_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

get_share_officer_upgrade_ack* get_share_officer_upgrade_ack::default_instance_ = NULL;

get_share_officer_upgrade_ack* get_share_officer_upgrade_ack::New() const {
  return new get_share_officer_upgrade_ack;
}

void get_share_officer_upgrade_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6722;
    ret_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::share_officer_upgrade::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_share_officer_upgrade_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_share_officer_upgrade_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.share_officer_upgrade data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_share_officer_upgrade_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_share_officer_upgrade_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional .SProtoSpace.share_officer_upgrade data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_share_officer_upgrade_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_share_officer_upgrade_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional .SProtoSpace.share_officer_upgrade data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_share_officer_upgrade_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_share_officer_upgrade_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional .SProtoSpace.share_officer_upgrade data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_share_officer_upgrade_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_share_officer_upgrade_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_share_officer_upgrade_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_share_officer_upgrade_ack::MergeFrom(const get_share_officer_upgrade_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::share_officer_upgrade::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_share_officer_upgrade_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_share_officer_upgrade_ack::CopyFrom(const get_share_officer_upgrade_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_share_officer_upgrade_ack::IsInitialized() const {

  return true;
}

void get_share_officer_upgrade_ack::Swap(get_share_officer_upgrade_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_share_officer_upgrade_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_share_officer_upgrade_ack_descriptor_;
  metadata.reflection = get_share_officer_upgrade_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_offical_first_award_ntf::kProtoidFieldNumber;
const int update_offical_first_award_ntf::kUnitsFieldNumber;
#endif  // !_MSC_VER

update_offical_first_award_ntf::update_offical_first_award_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_offical_first_award_ntf::InitAsDefaultInstance() {
}

update_offical_first_award_ntf::update_offical_first_award_ntf(const update_offical_first_award_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_offical_first_award_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6723;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_offical_first_award_ntf::~update_offical_first_award_ntf() {
  SharedDtor();
}

void update_offical_first_award_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void update_offical_first_award_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_offical_first_award_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_offical_first_award_ntf_descriptor_;
}

const update_offical_first_award_ntf& update_offical_first_award_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

update_offical_first_award_ntf* update_offical_first_award_ntf::default_instance_ = NULL;

update_offical_first_award_ntf* update_offical_first_award_ntf::New() const {
  return new update_offical_first_award_ntf;
}

void update_offical_first_award_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6723;
  }
  units_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_offical_first_award_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_offical_first_award_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_units;
        break;
      }

      // repeated .SProtoSpace.reward_item units = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_units:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_units()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_units;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_offical_first_award_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_offical_first_award_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.reward_item units = 2;
  for (int i = 0; i < this->units_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->units(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_offical_first_award_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_offical_first_award_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.reward_item units = 2;
  for (int i = 0; i < this->units_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->units(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_offical_first_award_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_offical_first_award_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.reward_item units = 2;
  total_size += 1 * this->units_size();
  for (int i = 0; i < this->units_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->units(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_offical_first_award_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_offical_first_award_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_offical_first_award_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_offical_first_award_ntf::MergeFrom(const update_offical_first_award_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  units_.MergeFrom(from.units_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_offical_first_award_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_offical_first_award_ntf::CopyFrom(const update_offical_first_award_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_offical_first_award_ntf::IsInitialized() const {

  return true;
}

void update_offical_first_award_ntf::Swap(update_offical_first_award_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    units_.Swap(&other->units_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_offical_first_award_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_offical_first_award_ntf_descriptor_;
  metadata.reflection = update_offical_first_award_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_offical_first_award_req::kProtoidFieldNumber;
const int get_offical_first_award_req::kGradeFieldNumber;
#endif  // !_MSC_VER

get_offical_first_award_req::get_offical_first_award_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_offical_first_award_req::InitAsDefaultInstance() {
}

get_offical_first_award_req::get_offical_first_award_req(const get_offical_first_award_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_offical_first_award_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6724;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_offical_first_award_req::~get_offical_first_award_req() {
  SharedDtor();
}

void get_offical_first_award_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_offical_first_award_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_offical_first_award_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_offical_first_award_req_descriptor_;
}

const get_offical_first_award_req& get_offical_first_award_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

get_offical_first_award_req* get_offical_first_award_req::default_instance_ = NULL;

get_offical_first_award_req* get_offical_first_award_req::New() const {
  return new get_offical_first_award_req;
}

void get_offical_first_award_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6724;
    grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_offical_first_award_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_first_award_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional int32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_offical_first_award_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_first_award_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_offical_first_award_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_first_award_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_offical_first_award_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_first_award_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_offical_first_award_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_offical_first_award_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_offical_first_award_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_offical_first_award_req::MergeFrom(const get_offical_first_award_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_offical_first_award_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_offical_first_award_req::CopyFrom(const get_offical_first_award_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_offical_first_award_req::IsInitialized() const {

  return true;
}

void get_offical_first_award_req::Swap(get_offical_first_award_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_offical_first_award_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_offical_first_award_req_descriptor_;
  metadata.reflection = get_offical_first_award_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_offical_first_award_ack::kProtoidFieldNumber;
const int get_offical_first_award_ack::kRetFieldNumber;
const int get_offical_first_award_ack::kGradeFieldNumber;
#endif  // !_MSC_VER

get_offical_first_award_ack::get_offical_first_award_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_offical_first_award_ack::InitAsDefaultInstance() {
}

get_offical_first_award_ack::get_offical_first_award_ack(const get_offical_first_award_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_offical_first_award_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6725;
  ret_ = 0u;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_offical_first_award_ack::~get_offical_first_award_ack() {
  SharedDtor();
}

void get_offical_first_award_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_offical_first_award_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_offical_first_award_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_offical_first_award_ack_descriptor_;
}

const get_offical_first_award_ack& get_offical_first_award_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

get_offical_first_award_ack* get_offical_first_award_ack::default_instance_ = NULL;

get_offical_first_award_ack* get_offical_first_award_ack::New() const {
  return new get_offical_first_award_ack;
}

void get_offical_first_award_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6725;
    ret_ = 0u;
    grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_offical_first_award_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_first_award_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }

      // optional int32 grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_offical_first_award_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_first_award_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional int32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_offical_first_award_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_first_award_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional int32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_offical_first_award_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_first_award_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional int32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_offical_first_award_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_offical_first_award_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_offical_first_award_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_offical_first_award_ack::MergeFrom(const get_offical_first_award_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_offical_first_award_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_offical_first_award_ack::CopyFrom(const get_offical_first_award_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_offical_first_award_ack::IsInitialized() const {

  return true;
}

void get_offical_first_award_ack::Swap(get_offical_first_award_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_offical_first_award_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_offical_first_award_ack_descriptor_;
  metadata.reflection = get_offical_first_award_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_offical_challenge_roles_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

get_offical_challenge_roles_req::get_offical_challenge_roles_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_offical_challenge_roles_req::InitAsDefaultInstance() {
}

get_offical_challenge_roles_req::get_offical_challenge_roles_req(const get_offical_challenge_roles_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_offical_challenge_roles_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6726;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_offical_challenge_roles_req::~get_offical_challenge_roles_req() {
  SharedDtor();
}

void get_offical_challenge_roles_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_offical_challenge_roles_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_offical_challenge_roles_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_offical_challenge_roles_req_descriptor_;
}

const get_offical_challenge_roles_req& get_offical_challenge_roles_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

get_offical_challenge_roles_req* get_offical_challenge_roles_req::default_instance_ = NULL;

get_offical_challenge_roles_req* get_offical_challenge_roles_req::New() const {
  return new get_offical_challenge_roles_req;
}

void get_offical_challenge_roles_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6726;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_offical_challenge_roles_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_challenge_roles_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_offical_challenge_roles_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_challenge_roles_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_offical_challenge_roles_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_challenge_roles_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_offical_challenge_roles_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_challenge_roles_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_offical_challenge_roles_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_offical_challenge_roles_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_offical_challenge_roles_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_offical_challenge_roles_req::MergeFrom(const get_offical_challenge_roles_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_offical_challenge_roles_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_offical_challenge_roles_req::CopyFrom(const get_offical_challenge_roles_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_offical_challenge_roles_req::IsInitialized() const {

  return true;
}

void get_offical_challenge_roles_req::Swap(get_offical_challenge_roles_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_offical_challenge_roles_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_offical_challenge_roles_req_descriptor_;
  metadata.reflection = get_offical_challenge_roles_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_offical_challenge_roles_ack::kProtoidFieldNumber;
const int get_offical_challenge_roles_ack::kRetFieldNumber;
const int get_offical_challenge_roles_ack::kOfficalChallengeNumFieldNumber;
const int get_offical_challenge_roles_ack::kOfficalChallengeBuyFieldNumber;
const int get_offical_challenge_roles_ack::kItemsFieldNumber;
#endif  // !_MSC_VER

get_offical_challenge_roles_ack::get_offical_challenge_roles_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_offical_challenge_roles_ack::InitAsDefaultInstance() {
}

get_offical_challenge_roles_ack::get_offical_challenge_roles_ack(const get_offical_challenge_roles_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_offical_challenge_roles_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6727;
  ret_ = 0u;
  offical_challenge_num_ = 0;
  offical_challenge_buy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_offical_challenge_roles_ack::~get_offical_challenge_roles_ack() {
  SharedDtor();
}

void get_offical_challenge_roles_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_offical_challenge_roles_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_offical_challenge_roles_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_offical_challenge_roles_ack_descriptor_;
}

const get_offical_challenge_roles_ack& get_offical_challenge_roles_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

get_offical_challenge_roles_ack* get_offical_challenge_roles_ack::default_instance_ = NULL;

get_offical_challenge_roles_ack* get_offical_challenge_roles_ack::New() const {
  return new get_offical_challenge_roles_ack;
}

void get_offical_challenge_roles_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6727;
    ret_ = 0u;
    offical_challenge_num_ = 0;
    offical_challenge_buy_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_offical_challenge_roles_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_challenge_roles_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offical_challenge_num;
        break;
      }

      // optional int32 offical_challenge_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offical_challenge_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offical_challenge_num_)));
          set_has_offical_challenge_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offical_challenge_buy;
        break;
      }

      // optional int32 offical_challenge_buy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offical_challenge_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offical_challenge_buy_)));
          set_has_offical_challenge_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }

      // repeated .SProtoSpace.offical_item_data items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_offical_challenge_roles_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_challenge_roles_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional int32 offical_challenge_num = 3;
  if (has_offical_challenge_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offical_challenge_num(), output);
  }

  // optional int32 offical_challenge_buy = 4;
  if (has_offical_challenge_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offical_challenge_buy(), output);
  }

  // repeated .SProtoSpace.offical_item_data items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_offical_challenge_roles_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_challenge_roles_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional int32 offical_challenge_num = 3;
  if (has_offical_challenge_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offical_challenge_num(), target);
  }

  // optional int32 offical_challenge_buy = 4;
  if (has_offical_challenge_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offical_challenge_buy(), target);
  }

  // repeated .SProtoSpace.offical_item_data items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_offical_challenge_roles_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_challenge_roles_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional int32 offical_challenge_num = 3;
    if (has_offical_challenge_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offical_challenge_num());
    }

    // optional int32 offical_challenge_buy = 4;
    if (has_offical_challenge_buy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offical_challenge_buy());
    }

  }
  // repeated .SProtoSpace.offical_item_data items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_offical_challenge_roles_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_offical_challenge_roles_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_offical_challenge_roles_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_offical_challenge_roles_ack::MergeFrom(const get_offical_challenge_roles_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_offical_challenge_num()) {
      set_offical_challenge_num(from.offical_challenge_num());
    }
    if (from.has_offical_challenge_buy()) {
      set_offical_challenge_buy(from.offical_challenge_buy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_offical_challenge_roles_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_offical_challenge_roles_ack::CopyFrom(const get_offical_challenge_roles_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_offical_challenge_roles_ack::IsInitialized() const {

  return true;
}

void get_offical_challenge_roles_ack::Swap(get_offical_challenge_roles_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(offical_challenge_num_, other->offical_challenge_num_);
    std::swap(offical_challenge_buy_, other->offical_challenge_buy_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_offical_challenge_roles_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_offical_challenge_roles_ack_descriptor_;
  metadata.reflection = get_offical_challenge_roles_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int add_offical_challenge_num_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

add_offical_challenge_num_req::add_offical_challenge_num_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void add_offical_challenge_num_req::InitAsDefaultInstance() {
}

add_offical_challenge_num_req::add_offical_challenge_num_req(const add_offical_challenge_num_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void add_offical_challenge_num_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6728;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

add_offical_challenge_num_req::~add_offical_challenge_num_req() {
  SharedDtor();
}

void add_offical_challenge_num_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void add_offical_challenge_num_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* add_offical_challenge_num_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return add_offical_challenge_num_req_descriptor_;
}

const add_offical_challenge_num_req& add_offical_challenge_num_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

add_offical_challenge_num_req* add_offical_challenge_num_req::default_instance_ = NULL;

add_offical_challenge_num_req* add_offical_challenge_num_req::New() const {
  return new add_offical_challenge_num_req;
}

void add_offical_challenge_num_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6728;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool add_offical_challenge_num_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = add_offical_challenge_num_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void add_offical_challenge_num_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = add_offical_challenge_num_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* add_offical_challenge_num_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = add_offical_challenge_num_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int add_offical_challenge_num_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = add_offical_challenge_num_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void add_offical_challenge_num_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const add_offical_challenge_num_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const add_offical_challenge_num_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void add_offical_challenge_num_req::MergeFrom(const add_offical_challenge_num_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void add_offical_challenge_num_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_offical_challenge_num_req::CopyFrom(const add_offical_challenge_num_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_offical_challenge_num_req::IsInitialized() const {

  return true;
}

void add_offical_challenge_num_req::Swap(add_offical_challenge_num_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata add_offical_challenge_num_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = add_offical_challenge_num_req_descriptor_;
  metadata.reflection = add_offical_challenge_num_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int add_offical_challenge_num_ack::kProtoidFieldNumber;
const int add_offical_challenge_num_ack::kRetFieldNumber;
const int add_offical_challenge_num_ack::kOfficalChallengeNumFieldNumber;
const int add_offical_challenge_num_ack::kOfficalChallengeBuyFieldNumber;
#endif  // !_MSC_VER

add_offical_challenge_num_ack::add_offical_challenge_num_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void add_offical_challenge_num_ack::InitAsDefaultInstance() {
}

add_offical_challenge_num_ack::add_offical_challenge_num_ack(const add_offical_challenge_num_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void add_offical_challenge_num_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6729;
  ret_ = 0u;
  offical_challenge_num_ = 0;
  offical_challenge_buy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

add_offical_challenge_num_ack::~add_offical_challenge_num_ack() {
  SharedDtor();
}

void add_offical_challenge_num_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void add_offical_challenge_num_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* add_offical_challenge_num_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return add_offical_challenge_num_ack_descriptor_;
}

const add_offical_challenge_num_ack& add_offical_challenge_num_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

add_offical_challenge_num_ack* add_offical_challenge_num_ack::default_instance_ = NULL;

add_offical_challenge_num_ack* add_offical_challenge_num_ack::New() const {
  return new add_offical_challenge_num_ack;
}

void add_offical_challenge_num_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6729;
    ret_ = 0u;
    offical_challenge_num_ = 0;
    offical_challenge_buy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool add_offical_challenge_num_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = add_offical_challenge_num_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offical_challenge_num;
        break;
      }

      // optional int32 offical_challenge_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offical_challenge_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offical_challenge_num_)));
          set_has_offical_challenge_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offical_challenge_buy;
        break;
      }

      // optional int32 offical_challenge_buy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offical_challenge_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offical_challenge_buy_)));
          set_has_offical_challenge_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void add_offical_challenge_num_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = add_offical_challenge_num_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional int32 offical_challenge_num = 3;
  if (has_offical_challenge_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offical_challenge_num(), output);
  }

  // optional int32 offical_challenge_buy = 4;
  if (has_offical_challenge_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offical_challenge_buy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* add_offical_challenge_num_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = add_offical_challenge_num_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional int32 offical_challenge_num = 3;
  if (has_offical_challenge_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offical_challenge_num(), target);
  }

  // optional int32 offical_challenge_buy = 4;
  if (has_offical_challenge_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offical_challenge_buy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int add_offical_challenge_num_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = add_offical_challenge_num_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional int32 offical_challenge_num = 3;
    if (has_offical_challenge_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offical_challenge_num());
    }

    // optional int32 offical_challenge_buy = 4;
    if (has_offical_challenge_buy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offical_challenge_buy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void add_offical_challenge_num_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const add_offical_challenge_num_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const add_offical_challenge_num_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void add_offical_challenge_num_ack::MergeFrom(const add_offical_challenge_num_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_offical_challenge_num()) {
      set_offical_challenge_num(from.offical_challenge_num());
    }
    if (from.has_offical_challenge_buy()) {
      set_offical_challenge_buy(from.offical_challenge_buy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void add_offical_challenge_num_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_offical_challenge_num_ack::CopyFrom(const add_offical_challenge_num_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_offical_challenge_num_ack::IsInitialized() const {

  return true;
}

void add_offical_challenge_num_ack::Swap(add_offical_challenge_num_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(offical_challenge_num_, other->offical_challenge_num_);
    std::swap(offical_challenge_buy_, other->offical_challenge_buy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata add_offical_challenge_num_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = add_offical_challenge_num_ack_descriptor_;
  metadata.reflection = add_offical_challenge_num_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int offical_battle_report_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

offical_battle_report_req::offical_battle_report_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void offical_battle_report_req::InitAsDefaultInstance() {
}

offical_battle_report_req::offical_battle_report_req(const offical_battle_report_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void offical_battle_report_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6730;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

offical_battle_report_req::~offical_battle_report_req() {
  SharedDtor();
}

void offical_battle_report_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void offical_battle_report_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offical_battle_report_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offical_battle_report_req_descriptor_;
}

const offical_battle_report_req& offical_battle_report_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

offical_battle_report_req* offical_battle_report_req::default_instance_ = NULL;

offical_battle_report_req* offical_battle_report_req::New() const {
  return new offical_battle_report_req;
}

void offical_battle_report_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6730;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool offical_battle_report_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = offical_battle_report_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void offical_battle_report_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = offical_battle_report_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* offical_battle_report_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = offical_battle_report_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int offical_battle_report_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = offical_battle_report_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offical_battle_report_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const offical_battle_report_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const offical_battle_report_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offical_battle_report_req::MergeFrom(const offical_battle_report_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void offical_battle_report_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offical_battle_report_req::CopyFrom(const offical_battle_report_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offical_battle_report_req::IsInitialized() const {

  return true;
}

void offical_battle_report_req::Swap(offical_battle_report_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata offical_battle_report_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offical_battle_report_req_descriptor_;
  metadata.reflection = offical_battle_report_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int offical_battle_report_ack::kProtoidFieldNumber;
const int offical_battle_report_ack::kRetFieldNumber;
const int offical_battle_report_ack::kReportsFieldNumber;
#endif  // !_MSC_VER

offical_battle_report_ack::offical_battle_report_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void offical_battle_report_ack::InitAsDefaultInstance() {
}

offical_battle_report_ack::offical_battle_report_ack(const offical_battle_report_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void offical_battle_report_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6731;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

offical_battle_report_ack::~offical_battle_report_ack() {
  SharedDtor();
}

void offical_battle_report_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void offical_battle_report_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offical_battle_report_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offical_battle_report_ack_descriptor_;
}

const offical_battle_report_ack& offical_battle_report_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

offical_battle_report_ack* offical_battle_report_ack::default_instance_ = NULL;

offical_battle_report_ack* offical_battle_report_ack::New() const {
  return new offical_battle_report_ack;
}

void offical_battle_report_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6731;
    ret_ = 0u;
  }
  reports_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool offical_battle_report_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = offical_battle_report_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reports;
        break;
      }

      // repeated .SProtoSpace.offical_battle_report_unit reports = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reports()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reports;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void offical_battle_report_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = offical_battle_report_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // repeated .SProtoSpace.offical_battle_report_unit reports = 3;
  for (int i = 0; i < this->reports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reports(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* offical_battle_report_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = offical_battle_report_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // repeated .SProtoSpace.offical_battle_report_unit reports = 3;
  for (int i = 0; i < this->reports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reports(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int offical_battle_report_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = offical_battle_report_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .SProtoSpace.offical_battle_report_unit reports = 3;
  total_size += 1 * this->reports_size();
  for (int i = 0; i < this->reports_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reports(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offical_battle_report_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const offical_battle_report_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const offical_battle_report_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offical_battle_report_ack::MergeFrom(const offical_battle_report_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  reports_.MergeFrom(from.reports_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void offical_battle_report_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offical_battle_report_ack::CopyFrom(const offical_battle_report_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offical_battle_report_ack::IsInitialized() const {

  return true;
}

void offical_battle_report_ack::Swap(offical_battle_report_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    reports_.Swap(&other->reports_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata offical_battle_report_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offical_battle_report_ack_descriptor_;
  metadata.reflection = offical_battle_report_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int office_result::kBattleUuidFieldNumber;
const int office_result::kBattleTypeFieldNumber;
const int office_result::kWinnerRoleIdFieldNumber;
const int office_result::kWinnerCampIdFieldNumber;
const int office_result::kDataFieldNumber;
#endif  // !_MSC_VER

office_result::office_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void office_result::InitAsDefaultInstance() {
}

office_result::office_result(const office_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void office_result::SharedCtor() {
  _cached_size_ = 0;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  battle_type_ = 1;
  winner_role_id_ = GOOGLE_LONGLONG(0);
  winner_camp_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

office_result::~office_result() {
  SharedDtor();
}

void office_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void office_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* office_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return office_result_descriptor_;
}

const office_result& office_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

office_result* office_result::default_instance_ = NULL;

office_result* office_result::New() const {
  return new office_result;
}

void office_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    battle_type_ = 1;
    winner_role_id_ = GOOGLE_LONGLONG(0);
    winner_camp_id_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool office_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 battle_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_type;
        break;
      }

      // optional .SProtoSpace.EBattleType battle_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EBattleType_IsValid(value)) {
            set_battle_type(static_cast< ::SProtoSpace::EBattleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winner_role_id;
        break;
      }

      // optional int64 winner_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winner_role_id_)));
          set_has_winner_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_winner_camp_id;
        break;
      }

      // optional int32 winner_camp_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner_camp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_camp_id_)));
          set_has_winner_camp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // repeated .SProtoSpace.round_data data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void office_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 battle_uuid = 1;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battle_uuid(), output);
  }

  // optional .SProtoSpace.EBattleType battle_type = 2;
  if (has_battle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->battle_type(), output);
  }

  // optional int64 winner_role_id = 3;
  if (has_winner_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->winner_role_id(), output);
  }

  // optional int32 winner_camp_id = 4;
  if (has_winner_camp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->winner_camp_id(), output);
  }

  // repeated .SProtoSpace.round_data data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* office_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 battle_uuid = 1;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battle_uuid(), target);
  }

  // optional .SProtoSpace.EBattleType battle_type = 2;
  if (has_battle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->battle_type(), target);
  }

  // optional int64 winner_role_id = 3;
  if (has_winner_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->winner_role_id(), target);
  }

  // optional int32 winner_camp_id = 4;
  if (has_winner_camp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->winner_camp_id(), target);
  }

  // repeated .SProtoSpace.round_data data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int office_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 battle_uuid = 1;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional .SProtoSpace.EBattleType battle_type = 2;
    if (has_battle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->battle_type());
    }

    // optional int64 winner_role_id = 3;
    if (has_winner_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->winner_role_id());
    }

    // optional int32 winner_camp_id = 4;
    if (has_winner_camp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner_camp_id());
    }

  }
  // repeated .SProtoSpace.round_data data = 5;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void office_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const office_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const office_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void office_result::MergeFrom(const office_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_battle_type()) {
      set_battle_type(from.battle_type());
    }
    if (from.has_winner_role_id()) {
      set_winner_role_id(from.winner_role_id());
    }
    if (from.has_winner_camp_id()) {
      set_winner_camp_id(from.winner_camp_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void office_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void office_result::CopyFrom(const office_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool office_result::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void office_result::Swap(office_result* other) {
  if (other != this) {
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(battle_type_, other->battle_type_);
    std::swap(winner_role_id_, other->winner_role_id_);
    std::swap(winner_camp_id_, other->winner_camp_id_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata office_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = office_result_descriptor_;
  metadata.reflection = office_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_offical_member_req::kProtoidFieldNumber;
const int get_offical_member_req::kGradeFieldNumber;
const int get_offical_member_req::kStartIndexFieldNumber;
const int get_offical_member_req::kEndIndexFieldNumber;
#endif  // !_MSC_VER

get_offical_member_req::get_offical_member_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_offical_member_req::InitAsDefaultInstance() {
}

get_offical_member_req::get_offical_member_req(const get_offical_member_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_offical_member_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6736;
  grade_ = 0;
  start_index_ = 0;
  end_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_offical_member_req::~get_offical_member_req() {
  SharedDtor();
}

void get_offical_member_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_offical_member_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_offical_member_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_offical_member_req_descriptor_;
}

const get_offical_member_req& get_offical_member_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

get_offical_member_req* get_offical_member_req::default_instance_ = NULL;

get_offical_member_req* get_offical_member_req::New() const {
  return new get_offical_member_req;
}

void get_offical_member_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6736;
    grade_ = 0;
    start_index_ = 0;
    end_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_offical_member_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_member_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional int32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_index;
        break;
      }

      // optional int32 start_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_index;
        break;
      }

      // optional int32 end_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_index_)));
          set_has_end_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_offical_member_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_member_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }

  // optional int32 start_index = 3;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_index(), output);
  }

  // optional int32 end_index = 4;
  if (has_end_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->end_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_offical_member_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_member_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }

  // optional int32 start_index = 3;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start_index(), target);
  }

  // optional int32 end_index = 4;
  if (has_end_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->end_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_offical_member_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_member_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional int32 start_index = 3;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_index());
    }

    // optional int32 end_index = 4;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_offical_member_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_offical_member_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_offical_member_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_offical_member_req::MergeFrom(const get_offical_member_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_end_index()) {
      set_end_index(from.end_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_offical_member_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_offical_member_req::CopyFrom(const get_offical_member_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_offical_member_req::IsInitialized() const {

  return true;
}

void get_offical_member_req::Swap(get_offical_member_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(grade_, other->grade_);
    std::swap(start_index_, other->start_index_);
    std::swap(end_index_, other->end_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_offical_member_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_offical_member_req_descriptor_;
  metadata.reflection = get_offical_member_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_offical_member_ack::kProtoidFieldNumber;
const int get_offical_member_ack::kRetFieldNumber;
const int get_offical_member_ack::kGradeFieldNumber;
const int get_offical_member_ack::kMembersFieldNumber;
#endif  // !_MSC_VER

get_offical_member_ack::get_offical_member_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_offical_member_ack::InitAsDefaultInstance() {
}

get_offical_member_ack::get_offical_member_ack(const get_offical_member_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_offical_member_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6737;
  ret_ = 0;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_offical_member_ack::~get_offical_member_ack() {
  SharedDtor();
}

void get_offical_member_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_offical_member_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_offical_member_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_offical_member_ack_descriptor_;
}

const get_offical_member_ack& get_offical_member_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

get_offical_member_ack* get_offical_member_ack::default_instance_ = NULL;

get_offical_member_ack* get_offical_member_ack::New() const {
  return new get_offical_member_ack;
}

void get_offical_member_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6737;
    ret_ = 0;
    grade_ = 0;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_offical_member_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_member_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }

      // optional int32 grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_members;
        break;
      }

      // repeated .SProtoSpace.offical_member_data members = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_members;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_offical_member_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_member_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grade(), output);
  }

  // repeated .SProtoSpace.offical_member_data members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_offical_member_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_member_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grade(), target);
  }

  // repeated .SProtoSpace.offical_member_data members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_offical_member_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_offical_member_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  // repeated .SProtoSpace.offical_member_data members = 4;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_offical_member_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_offical_member_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_offical_member_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_offical_member_ack::MergeFrom(const get_offical_member_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_offical_member_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_offical_member_ack::CopyFrom(const get_offical_member_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_offical_member_ack::IsInitialized() const {

  return true;
}

void get_offical_member_ack::Swap(get_offical_member_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(grade_, other->grade_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_offical_member_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_offical_member_ack_descriptor_;
  metadata.reflection = get_offical_member_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_global_offical_rank_req::kProtoIdFieldNumber;
const int get_global_offical_rank_req::kStartFieldNumber;
const int get_global_offical_rank_req::kEndFieldNumber;
#endif  // !_MSC_VER

get_global_offical_rank_req::get_global_offical_rank_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_global_offical_rank_req::InitAsDefaultInstance() {
}

get_global_offical_rank_req::get_global_offical_rank_req(const get_global_offical_rank_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_global_offical_rank_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6738;
  start_ = 0;
  end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_global_offical_rank_req::~get_global_offical_rank_req() {
  SharedDtor();
}

void get_global_offical_rank_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_global_offical_rank_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_global_offical_rank_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_global_offical_rank_req_descriptor_;
}

const get_global_offical_rank_req& get_global_offical_rank_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

get_global_offical_rank_req* get_global_offical_rank_req::default_instance_ = NULL;

get_global_offical_rank_req* get_global_offical_rank_req::New() const {
  return new get_global_offical_rank_req;
}

void get_global_offical_rank_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6738;
    start_ = 0;
    end_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_global_offical_rank_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_global_offical_rank_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start;
        break;
      }

      // optional int32 start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end;
        break;
      }

      // optional int32 end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_global_offical_rank_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_global_offical_rank_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start(), output);
  }

  // optional int32 end = 3;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_global_offical_rank_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_global_offical_rank_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 start = 2;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start(), target);
  }

  // optional int32 end = 3;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_global_offical_rank_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_global_offical_rank_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 start = 2;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start());
    }

    // optional int32 end = 3;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_global_offical_rank_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_global_offical_rank_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_global_offical_rank_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_global_offical_rank_req::MergeFrom(const get_global_offical_rank_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_global_offical_rank_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_global_offical_rank_req::CopyFrom(const get_global_offical_rank_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_global_offical_rank_req::IsInitialized() const {

  return true;
}

void get_global_offical_rank_req::Swap(get_global_offical_rank_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_global_offical_rank_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_global_offical_rank_req_descriptor_;
  metadata.reflection = get_global_offical_rank_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_global_offical_rank_ack::kProtoIdFieldNumber;
const int get_global_offical_rank_ack::kRetFieldNumber;
const int get_global_offical_rank_ack::kMembersFieldNumber;
const int get_global_offical_rank_ack::kMyDataFieldNumber;
#endif  // !_MSC_VER

get_global_offical_rank_ack::get_global_offical_rank_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_global_offical_rank_ack::InitAsDefaultInstance() {
  my_data_ = const_cast< ::SProtoSpace::offical_member_data*>(&::SProtoSpace::offical_member_data::default_instance());
}

get_global_offical_rank_ack::get_global_offical_rank_ack(const get_global_offical_rank_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_global_offical_rank_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6739;
  ret_ = 0u;
  my_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_global_offical_rank_ack::~get_global_offical_rank_ack() {
  SharedDtor();
}

void get_global_offical_rank_ack::SharedDtor() {
  if (this != default_instance_) {
    delete my_data_;
  }
}

void get_global_offical_rank_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_global_offical_rank_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_global_offical_rank_ack_descriptor_;
}

const get_global_offical_rank_ack& get_global_offical_rank_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

get_global_offical_rank_ack* get_global_offical_rank_ack::default_instance_ = NULL;

get_global_offical_rank_ack* get_global_offical_rank_ack::New() const {
  return new get_global_offical_rank_ack;
}

void get_global_offical_rank_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6739;
    ret_ = 0u;
    if (has_my_data()) {
      if (my_data_ != NULL) my_data_->::SProtoSpace::offical_member_data::Clear();
    }
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_global_offical_rank_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_global_offical_rank_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_members;
        break;
      }

      // repeated .SProtoSpace.offical_member_data members = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_members;
        if (input->ExpectTag(34)) goto parse_my_data;
        break;
      }

      // optional .SProtoSpace.offical_member_data my_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_global_offical_rank_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_global_offical_rank_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // repeated .SProtoSpace.offical_member_data members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->members(i), output);
  }

  // optional .SProtoSpace.offical_member_data my_data = 4;
  if (has_my_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->my_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_global_offical_rank_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_global_offical_rank_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // repeated .SProtoSpace.offical_member_data members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->members(i), target);
  }

  // optional .SProtoSpace.offical_member_data my_data = 4;
  if (has_my_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->my_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_global_offical_rank_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_global_offical_rank_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional .SProtoSpace.offical_member_data my_data = 4;
    if (has_my_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_data());
    }

  }
  // repeated .SProtoSpace.offical_member_data members = 3;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_global_offical_rank_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_global_offical_rank_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_global_offical_rank_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_global_offical_rank_ack::MergeFrom(const get_global_offical_rank_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_my_data()) {
      mutable_my_data()->::SProtoSpace::offical_member_data::MergeFrom(from.my_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_global_offical_rank_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_global_offical_rank_ack::CopyFrom(const get_global_offical_rank_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_global_offical_rank_ack::IsInitialized() const {

  return true;
}

void get_global_offical_rank_ack::Swap(get_global_offical_rank_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    members_.Swap(&other->members_);
    std::swap(my_data_, other->my_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_global_offical_rank_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_global_offical_rank_ack_descriptor_;
  metadata.reflection = get_global_offical_rank_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enter_tower_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

enter_tower_req::enter_tower_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_tower_req::InitAsDefaultInstance() {
}

enter_tower_req::enter_tower_req(const enter_tower_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_tower_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7251;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_tower_req::~enter_tower_req() {
  SharedDtor();
}

void enter_tower_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void enter_tower_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_tower_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_tower_req_descriptor_;
}

const enter_tower_req& enter_tower_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

enter_tower_req* enter_tower_req::default_instance_ = NULL;

enter_tower_req* enter_tower_req::New() const {
  return new enter_tower_req;
}

void enter_tower_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7251;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_tower_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_tower_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_tower_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_tower_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_tower_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_tower_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_tower_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_tower_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_tower_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_tower_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_tower_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_tower_req::MergeFrom(const enter_tower_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_tower_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_tower_req::CopyFrom(const enter_tower_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_tower_req::IsInitialized() const {

  return true;
}

void enter_tower_req::Swap(enter_tower_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_tower_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_tower_req_descriptor_;
  metadata.reflection = enter_tower_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enter_tower_ack::kProtoidFieldNumber;
const int enter_tower_ack::kRetFieldNumber;
const int enter_tower_ack::kTowerDataFieldNumber;
#endif  // !_MSC_VER

enter_tower_ack::enter_tower_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_tower_ack::InitAsDefaultInstance() {
  tower_data_ = const_cast< ::SProtoSpace::tower_base_info*>(&::SProtoSpace::tower_base_info::default_instance());
}

enter_tower_ack::enter_tower_ack(const enter_tower_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_tower_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7252;
  ret_ = 0u;
  tower_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_tower_ack::~enter_tower_ack() {
  SharedDtor();
}

void enter_tower_ack::SharedDtor() {
  if (this != default_instance_) {
    delete tower_data_;
  }
}

void enter_tower_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_tower_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_tower_ack_descriptor_;
}

const enter_tower_ack& enter_tower_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

enter_tower_ack* enter_tower_ack::default_instance_ = NULL;

enter_tower_ack* enter_tower_ack::New() const {
  return new enter_tower_ack;
}

void enter_tower_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7252;
    ret_ = 0u;
    if (has_tower_data()) {
      if (tower_data_ != NULL) tower_data_->::SProtoSpace::tower_base_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_tower_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_tower_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tower_data;
        break;
      }

      // optional .SProtoSpace.tower_base_info tower_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tower_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tower_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_tower_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_tower_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional .SProtoSpace.tower_base_info tower_data = 3;
  if (has_tower_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tower_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_tower_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_tower_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional .SProtoSpace.tower_base_info tower_data = 3;
  if (has_tower_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tower_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_tower_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_tower_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional .SProtoSpace.tower_base_info tower_data = 3;
    if (has_tower_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tower_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_tower_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_tower_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_tower_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_tower_ack::MergeFrom(const enter_tower_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_tower_data()) {
      mutable_tower_data()->::SProtoSpace::tower_base_info::MergeFrom(from.tower_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_tower_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_tower_ack::CopyFrom(const enter_tower_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_tower_ack::IsInitialized() const {

  return true;
}

void enter_tower_ack::Swap(enter_tower_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(tower_data_, other->tower_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_tower_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_tower_ack_descriptor_;
  metadata.reflection = enter_tower_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int select_tower_floor_req::kProtoidFieldNumber;
const int select_tower_floor_req::kTowerFloorFieldNumber;
#endif  // !_MSC_VER

select_tower_floor_req::select_tower_floor_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void select_tower_floor_req::InitAsDefaultInstance() {
}

select_tower_floor_req::select_tower_floor_req(const select_tower_floor_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void select_tower_floor_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7253;
  tower_floor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

select_tower_floor_req::~select_tower_floor_req() {
  SharedDtor();
}

void select_tower_floor_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void select_tower_floor_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* select_tower_floor_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return select_tower_floor_req_descriptor_;
}

const select_tower_floor_req& select_tower_floor_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

select_tower_floor_req* select_tower_floor_req::default_instance_ = NULL;

select_tower_floor_req* select_tower_floor_req::New() const {
  return new select_tower_floor_req;
}

void select_tower_floor_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7253;
    tower_floor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool select_tower_floor_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = select_tower_floor_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tower_floor;
        break;
      }

      // optional uint32 tower_floor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_floor_)));
          set_has_tower_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void select_tower_floor_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = select_tower_floor_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 tower_floor = 2;
  if (has_tower_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tower_floor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* select_tower_floor_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = select_tower_floor_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 tower_floor = 2;
  if (has_tower_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tower_floor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int select_tower_floor_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = select_tower_floor_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 tower_floor = 2;
    if (has_tower_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_floor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void select_tower_floor_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const select_tower_floor_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const select_tower_floor_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void select_tower_floor_req::MergeFrom(const select_tower_floor_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_tower_floor()) {
      set_tower_floor(from.tower_floor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void select_tower_floor_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void select_tower_floor_req::CopyFrom(const select_tower_floor_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool select_tower_floor_req::IsInitialized() const {

  return true;
}

void select_tower_floor_req::Swap(select_tower_floor_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(tower_floor_, other->tower_floor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata select_tower_floor_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = select_tower_floor_req_descriptor_;
  metadata.reflection = select_tower_floor_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int select_tower_floor_ack::kProtoidFieldNumber;
const int select_tower_floor_ack::kRetFieldNumber;
const int select_tower_floor_ack::kTypeFieldNumber;
const int select_tower_floor_ack::kDataFieldNumber;
#endif  // !_MSC_VER

select_tower_floor_ack::select_tower_floor_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void select_tower_floor_ack::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::question_data*>(&::SProtoSpace::question_data::default_instance());
}

select_tower_floor_ack::select_tower_floor_ack(const select_tower_floor_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void select_tower_floor_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7254;
  ret_ = 0u;
  type_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

select_tower_floor_ack::~select_tower_floor_ack() {
  SharedDtor();
}

void select_tower_floor_ack::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void select_tower_floor_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* select_tower_floor_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return select_tower_floor_ack_descriptor_;
}

const select_tower_floor_ack& select_tower_floor_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

select_tower_floor_ack* select_tower_floor_ack::default_instance_ = NULL;

select_tower_floor_ack* select_tower_floor_ack::New() const {
  return new select_tower_floor_ack;
}

void select_tower_floor_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7254;
    ret_ = 0u;
    type_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::question_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool select_tower_floor_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = select_tower_floor_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.question_data data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void select_tower_floor_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = select_tower_floor_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional .SProtoSpace.question_data data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* select_tower_floor_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = select_tower_floor_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional .SProtoSpace.question_data data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int select_tower_floor_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = select_tower_floor_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .SProtoSpace.question_data data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void select_tower_floor_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const select_tower_floor_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const select_tower_floor_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void select_tower_floor_ack::MergeFrom(const select_tower_floor_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::question_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void select_tower_floor_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void select_tower_floor_ack::CopyFrom(const select_tower_floor_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool select_tower_floor_ack::IsInitialized() const {

  return true;
}

void select_tower_floor_ack::Swap(select_tower_floor_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata select_tower_floor_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = select_tower_floor_ack_descriptor_;
  metadata.reflection = select_tower_floor_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tower_die_req::kProtoidFieldNumber;
const int tower_die_req::kTowerFloorFieldNumber;
const int tower_die_req::kCurStepFieldNumber;
#endif  // !_MSC_VER

tower_die_req::tower_die_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tower_die_req::InitAsDefaultInstance() {
}

tower_die_req::tower_die_req(const tower_die_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tower_die_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7265;
  tower_floor_ = 0u;
  cur_step_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tower_die_req::~tower_die_req() {
  SharedDtor();
}

void tower_die_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tower_die_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tower_die_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tower_die_req_descriptor_;
}

const tower_die_req& tower_die_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

tower_die_req* tower_die_req::default_instance_ = NULL;

tower_die_req* tower_die_req::New() const {
  return new tower_die_req;
}

void tower_die_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7265;
    tower_floor_ = 0u;
    cur_step_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tower_die_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_die_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tower_floor;
        break;
      }

      // optional uint32 tower_floor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_floor_)));
          set_has_tower_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_step;
        break;
      }

      // optional uint32 cur_step = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_step_)));
          set_has_cur_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tower_die_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_die_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 tower_floor = 2;
  if (has_tower_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tower_floor(), output);
  }

  // optional uint32 cur_step = 3 [default = 1];
  if (has_cur_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tower_die_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_die_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 tower_floor = 2;
  if (has_tower_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tower_floor(), target);
  }

  // optional uint32 cur_step = 3 [default = 1];
  if (has_cur_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tower_die_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_die_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 tower_floor = 2;
    if (has_tower_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_floor());
    }

    // optional uint32 cur_step = 3 [default = 1];
    if (has_cur_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tower_die_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tower_die_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tower_die_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tower_die_req::MergeFrom(const tower_die_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_tower_floor()) {
      set_tower_floor(from.tower_floor());
    }
    if (from.has_cur_step()) {
      set_cur_step(from.cur_step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tower_die_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tower_die_req::CopyFrom(const tower_die_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tower_die_req::IsInitialized() const {

  return true;
}

void tower_die_req::Swap(tower_die_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(tower_floor_, other->tower_floor_);
    std::swap(cur_step_, other->cur_step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tower_die_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tower_die_req_descriptor_;
  metadata.reflection = tower_die_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tower_die_ack::kProtoidFieldNumber;
const int tower_die_ack::kTowerFloorFieldNumber;
const int tower_die_ack::kCurStepFieldNumber;
const int tower_die_ack::kRetFieldNumber;
const int tower_die_ack::kTypeFieldNumber;
const int tower_die_ack::kDataFieldNumber;
#endif  // !_MSC_VER

tower_die_ack::tower_die_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tower_die_ack::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::question_data*>(&::SProtoSpace::question_data::default_instance());
}

tower_die_ack::tower_die_ack(const tower_die_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tower_die_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7266;
  tower_floor_ = 0u;
  cur_step_ = 1u;
  ret_ = 0u;
  type_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tower_die_ack::~tower_die_ack() {
  SharedDtor();
}

void tower_die_ack::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void tower_die_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tower_die_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tower_die_ack_descriptor_;
}

const tower_die_ack& tower_die_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

tower_die_ack* tower_die_ack::default_instance_ = NULL;

tower_die_ack* tower_die_ack::New() const {
  return new tower_die_ack;
}

void tower_die_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7266;
    tower_floor_ = 0u;
    cur_step_ = 1u;
    ret_ = 0u;
    type_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::question_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tower_die_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_die_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tower_floor;
        break;
      }

      // optional uint32 tower_floor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_floor_)));
          set_has_tower_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_step;
        break;
      }

      // optional uint32 cur_step = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_step_)));
          set_has_cur_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional uint32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.question_data data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tower_die_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_die_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 tower_floor = 2;
  if (has_tower_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tower_floor(), output);
  }

  // optional uint32 cur_step = 3 [default = 1];
  if (has_cur_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_step(), output);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ret(), output);
  }

  // optional uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  // optional .SProtoSpace.question_data data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tower_die_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_die_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 tower_floor = 2;
  if (has_tower_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tower_floor(), target);
  }

  // optional uint32 cur_step = 3 [default = 1];
  if (has_cur_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_step(), target);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ret(), target);
  }

  // optional uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  // optional .SProtoSpace.question_data data = 6;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tower_die_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_die_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 tower_floor = 2;
    if (has_tower_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_floor());
    }

    // optional uint32 cur_step = 3 [default = 1];
    if (has_cur_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_step());
    }

    // optional uint32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .SProtoSpace.question_data data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tower_die_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tower_die_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tower_die_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tower_die_ack::MergeFrom(const tower_die_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_tower_floor()) {
      set_tower_floor(from.tower_floor());
    }
    if (from.has_cur_step()) {
      set_cur_step(from.cur_step());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::question_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tower_die_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tower_die_ack::CopyFrom(const tower_die_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tower_die_ack::IsInitialized() const {

  return true;
}

void tower_die_ack::Swap(tower_die_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(tower_floor_, other->tower_floor_);
    std::swap(cur_step_, other->cur_step_);
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tower_die_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tower_die_ack_descriptor_;
  metadata.reflection = tower_die_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tower_step_fini_req::kProtoidFieldNumber;
const int tower_step_fini_req::kTowerFloorFieldNumber;
const int tower_step_fini_req::kCurStepFieldNumber;
#endif  // !_MSC_VER

tower_step_fini_req::tower_step_fini_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tower_step_fini_req::InitAsDefaultInstance() {
}

tower_step_fini_req::tower_step_fini_req(const tower_step_fini_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tower_step_fini_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7267;
  tower_floor_ = 0u;
  cur_step_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tower_step_fini_req::~tower_step_fini_req() {
  SharedDtor();
}

void tower_step_fini_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tower_step_fini_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tower_step_fini_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tower_step_fini_req_descriptor_;
}

const tower_step_fini_req& tower_step_fini_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

tower_step_fini_req* tower_step_fini_req::default_instance_ = NULL;

tower_step_fini_req* tower_step_fini_req::New() const {
  return new tower_step_fini_req;
}

void tower_step_fini_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7267;
    tower_floor_ = 0u;
    cur_step_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tower_step_fini_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_step_fini_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tower_floor;
        break;
      }

      // optional uint32 tower_floor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_floor_)));
          set_has_tower_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_step;
        break;
      }

      // optional uint32 cur_step = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_step_)));
          set_has_cur_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tower_step_fini_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_step_fini_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 tower_floor = 2;
  if (has_tower_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tower_floor(), output);
  }

  // optional uint32 cur_step = 3 [default = 1];
  if (has_cur_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tower_step_fini_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_step_fini_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 tower_floor = 2;
  if (has_tower_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tower_floor(), target);
  }

  // optional uint32 cur_step = 3 [default = 1];
  if (has_cur_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tower_step_fini_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_step_fini_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 tower_floor = 2;
    if (has_tower_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_floor());
    }

    // optional uint32 cur_step = 3 [default = 1];
    if (has_cur_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tower_step_fini_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tower_step_fini_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tower_step_fini_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tower_step_fini_req::MergeFrom(const tower_step_fini_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_tower_floor()) {
      set_tower_floor(from.tower_floor());
    }
    if (from.has_cur_step()) {
      set_cur_step(from.cur_step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tower_step_fini_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tower_step_fini_req::CopyFrom(const tower_step_fini_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tower_step_fini_req::IsInitialized() const {

  return true;
}

void tower_step_fini_req::Swap(tower_step_fini_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(tower_floor_, other->tower_floor_);
    std::swap(cur_step_, other->cur_step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tower_step_fini_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tower_step_fini_req_descriptor_;
  metadata.reflection = tower_step_fini_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tower_step_fini_ack::kProtoidFieldNumber;
const int tower_step_fini_ack::kTowerFloorFieldNumber;
const int tower_step_fini_ack::kCurStepFieldNumber;
const int tower_step_fini_ack::kRetFieldNumber;
#endif  // !_MSC_VER

tower_step_fini_ack::tower_step_fini_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tower_step_fini_ack::InitAsDefaultInstance() {
}

tower_step_fini_ack::tower_step_fini_ack(const tower_step_fini_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tower_step_fini_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7268;
  tower_floor_ = 0u;
  cur_step_ = 1u;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tower_step_fini_ack::~tower_step_fini_ack() {
  SharedDtor();
}

void tower_step_fini_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tower_step_fini_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tower_step_fini_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tower_step_fini_ack_descriptor_;
}

const tower_step_fini_ack& tower_step_fini_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

tower_step_fini_ack* tower_step_fini_ack::default_instance_ = NULL;

tower_step_fini_ack* tower_step_fini_ack::New() const {
  return new tower_step_fini_ack;
}

void tower_step_fini_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7268;
    tower_floor_ = 0u;
    cur_step_ = 1u;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tower_step_fini_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_step_fini_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tower_floor;
        break;
      }

      // optional uint32 tower_floor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_floor_)));
          set_has_tower_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_step;
        break;
      }

      // optional uint32 cur_step = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_step_)));
          set_has_cur_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional int32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tower_step_fini_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_step_fini_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 tower_floor = 2;
  if (has_tower_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tower_floor(), output);
  }

  // optional uint32 cur_step = 3 [default = 1];
  if (has_cur_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_step(), output);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tower_step_fini_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_step_fini_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 tower_floor = 2;
  if (has_tower_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tower_floor(), target);
  }

  // optional uint32 cur_step = 3 [default = 1];
  if (has_cur_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_step(), target);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tower_step_fini_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_step_fini_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 tower_floor = 2;
    if (has_tower_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_floor());
    }

    // optional uint32 cur_step = 3 [default = 1];
    if (has_cur_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_step());
    }

    // optional int32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tower_step_fini_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tower_step_fini_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tower_step_fini_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tower_step_fini_ack::MergeFrom(const tower_step_fini_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_tower_floor()) {
      set_tower_floor(from.tower_floor());
    }
    if (from.has_cur_step()) {
      set_cur_step(from.cur_step());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tower_step_fini_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tower_step_fini_ack::CopyFrom(const tower_step_fini_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tower_step_fini_ack::IsInitialized() const {

  return true;
}

void tower_step_fini_ack::Swap(tower_step_fini_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(tower_floor_, other->tower_floor_);
    std::swap(cur_step_, other->cur_step_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tower_step_fini_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tower_step_fini_ack_descriptor_;
  metadata.reflection = tower_step_fini_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int question_check_req::kProtoidFieldNumber;
const int question_check_req::kQuestionIdFieldNumber;
const int question_check_req::kSubquestionIdFieldNumber;
const int question_check_req::kAnswersFieldNumber;
const int question_check_req::kTypeFieldNumber;
#endif  // !_MSC_VER

question_check_req::question_check_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void question_check_req::InitAsDefaultInstance() {
}

question_check_req::question_check_req(const question_check_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void question_check_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7255;
  question_id_ = 0u;
  subquestion_id_ = 0u;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

question_check_req::~question_check_req() {
  SharedDtor();
}

void question_check_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void question_check_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* question_check_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return question_check_req_descriptor_;
}

const question_check_req& question_check_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

question_check_req* question_check_req::default_instance_ = NULL;

question_check_req* question_check_req::New() const {
  return new question_check_req;
}

void question_check_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7255;
    question_id_ = 0u;
    subquestion_id_ = 0u;
    type_ = 0;
  }
  answers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool question_check_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_check_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_question_id;
        break;
      }

      // optional uint32 question_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_question_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_id_)));
          set_has_question_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_subquestion_id;
        break;
      }

      // optional uint32 subquestion_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subquestion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subquestion_id_)));
          set_has_subquestion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_answers;
        break;
      }

      // repeated uint32 answers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_answers())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_answers())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_answers;
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void question_check_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_check_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 question_id = 2;
  if (has_question_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->question_id(), output);
  }

  // optional uint32 subquestion_id = 3;
  if (has_subquestion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->subquestion_id(), output);
  }

  // repeated uint32 answers = 4;
  for (int i = 0; i < this->answers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->answers(i), output);
  }

  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* question_check_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_check_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 question_id = 2;
  if (has_question_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->question_id(), target);
  }

  // optional uint32 subquestion_id = 3;
  if (has_subquestion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->subquestion_id(), target);
  }

  // repeated uint32 answers = 4;
  for (int i = 0; i < this->answers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->answers(i), target);
  }

  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int question_check_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_check_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 question_id = 2;
    if (has_question_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->question_id());
    }

    // optional uint32 subquestion_id = 3;
    if (has_subquestion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subquestion_id());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated uint32 answers = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->answers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->answers(i));
    }
    total_size += 1 * this->answers_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void question_check_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const question_check_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const question_check_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void question_check_req::MergeFrom(const question_check_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  answers_.MergeFrom(from.answers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_question_id()) {
      set_question_id(from.question_id());
    }
    if (from.has_subquestion_id()) {
      set_subquestion_id(from.subquestion_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void question_check_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void question_check_req::CopyFrom(const question_check_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool question_check_req::IsInitialized() const {

  return true;
}

void question_check_req::Swap(question_check_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(question_id_, other->question_id_);
    std::swap(subquestion_id_, other->subquestion_id_);
    answers_.Swap(&other->answers_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata question_check_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = question_check_req_descriptor_;
  metadata.reflection = question_check_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int question_check_ack::kProtoidFieldNumber;
const int question_check_ack::kQuestionIdFieldNumber;
const int question_check_ack::kAnswersFieldNumber;
const int question_check_ack::kSubquestionIdFieldNumber;
const int question_check_ack::kRetFieldNumber;
const int question_check_ack::kTypeFieldNumber;
#endif  // !_MSC_VER

question_check_ack::question_check_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void question_check_ack::InitAsDefaultInstance() {
}

question_check_ack::question_check_ack(const question_check_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void question_check_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7256;
  question_id_ = 0u;
  subquestion_id_ = 0u;
  ret_ = 0u;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

question_check_ack::~question_check_ack() {
  SharedDtor();
}

void question_check_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void question_check_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* question_check_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return question_check_ack_descriptor_;
}

const question_check_ack& question_check_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

question_check_ack* question_check_ack::default_instance_ = NULL;

question_check_ack* question_check_ack::New() const {
  return new question_check_ack;
}

void question_check_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7256;
    question_id_ = 0u;
    subquestion_id_ = 0u;
    ret_ = 0u;
    type_ = 0;
  }
  answers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool question_check_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_check_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_question_id;
        break;
      }

      // optional uint32 question_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_question_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_id_)));
          set_has_question_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_answers;
        break;
      }

      // repeated uint32 answers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_answers())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_answers())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_answers;
        if (input->ExpectTag(32)) goto parse_subquestion_id;
        break;
      }

      // optional uint32 subquestion_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subquestion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subquestion_id_)));
          set_has_subquestion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional int32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void question_check_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_check_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 question_id = 2;
  if (has_question_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->question_id(), output);
  }

  // repeated uint32 answers = 3;
  for (int i = 0; i < this->answers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->answers(i), output);
  }

  // optional uint32 subquestion_id = 4;
  if (has_subquestion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->subquestion_id(), output);
  }

  // optional uint32 ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ret(), output);
  }

  // optional int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* question_check_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_check_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 question_id = 2;
  if (has_question_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->question_id(), target);
  }

  // repeated uint32 answers = 3;
  for (int i = 0; i < this->answers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->answers(i), target);
  }

  // optional uint32 subquestion_id = 4;
  if (has_subquestion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->subquestion_id(), target);
  }

  // optional uint32 ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ret(), target);
  }

  // optional int32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int question_check_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_check_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 question_id = 2;
    if (has_question_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->question_id());
    }

    // optional uint32 subquestion_id = 4;
    if (has_subquestion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subquestion_id());
    }

    // optional uint32 ret = 5;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated uint32 answers = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->answers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->answers(i));
    }
    total_size += 1 * this->answers_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void question_check_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const question_check_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const question_check_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void question_check_ack::MergeFrom(const question_check_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  answers_.MergeFrom(from.answers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_question_id()) {
      set_question_id(from.question_id());
    }
    if (from.has_subquestion_id()) {
      set_subquestion_id(from.subquestion_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void question_check_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void question_check_ack::CopyFrom(const question_check_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool question_check_ack::IsInitialized() const {

  return true;
}

void question_check_ack::Swap(question_check_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(question_id_, other->question_id_);
    answers_.Swap(&other->answers_);
    std::swap(subquestion_id_, other->subquestion_id_);
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata question_check_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = question_check_ack_descriptor_;
  metadata.reflection = question_check_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_tower_info_ntf::kProtoidFieldNumber;
const int update_tower_info_ntf::kDataFieldNumber;
#endif  // !_MSC_VER

update_tower_info_ntf::update_tower_info_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_tower_info_ntf::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::tower_base_info*>(&::SProtoSpace::tower_base_info::default_instance());
}

update_tower_info_ntf::update_tower_info_ntf(const update_tower_info_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_tower_info_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7257;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_tower_info_ntf::~update_tower_info_ntf() {
  SharedDtor();
}

void update_tower_info_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void update_tower_info_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_tower_info_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_tower_info_ntf_descriptor_;
}

const update_tower_info_ntf& update_tower_info_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

update_tower_info_ntf* update_tower_info_ntf::default_instance_ = NULL;

update_tower_info_ntf* update_tower_info_ntf::New() const {
  return new update_tower_info_ntf;
}

void update_tower_info_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7257;
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::tower_base_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_tower_info_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_tower_info_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.tower_base_info data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_tower_info_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_tower_info_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.tower_base_info data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_tower_info_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_tower_info_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.tower_base_info data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_tower_info_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_tower_info_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.tower_base_info data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_tower_info_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_tower_info_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_tower_info_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_tower_info_ntf::MergeFrom(const update_tower_info_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::tower_base_info::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_tower_info_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_tower_info_ntf::CopyFrom(const update_tower_info_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_tower_info_ntf::IsInitialized() const {

  return true;
}

void update_tower_info_ntf::Swap(update_tower_info_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_tower_info_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_tower_info_ntf_descriptor_;
  metadata.reflection = update_tower_info_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tower_raids_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

tower_raids_req::tower_raids_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tower_raids_req::InitAsDefaultInstance() {
}

tower_raids_req::tower_raids_req(const tower_raids_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tower_raids_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7258;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tower_raids_req::~tower_raids_req() {
  SharedDtor();
}

void tower_raids_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tower_raids_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tower_raids_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tower_raids_req_descriptor_;
}

const tower_raids_req& tower_raids_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

tower_raids_req* tower_raids_req::default_instance_ = NULL;

tower_raids_req* tower_raids_req::New() const {
  return new tower_raids_req;
}

void tower_raids_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7258;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tower_raids_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_raids_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tower_raids_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_raids_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tower_raids_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_raids_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tower_raids_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_raids_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tower_raids_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tower_raids_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tower_raids_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tower_raids_req::MergeFrom(const tower_raids_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tower_raids_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tower_raids_req::CopyFrom(const tower_raids_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tower_raids_req::IsInitialized() const {

  return true;
}

void tower_raids_req::Swap(tower_raids_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tower_raids_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tower_raids_req_descriptor_;
  metadata.reflection = tower_raids_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tower_raids_ack::kProtoidFieldNumber;
const int tower_raids_ack::kRetFieldNumber;
#endif  // !_MSC_VER

tower_raids_ack::tower_raids_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tower_raids_ack::InitAsDefaultInstance() {
}

tower_raids_ack::tower_raids_ack(const tower_raids_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tower_raids_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7259;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tower_raids_ack::~tower_raids_ack() {
  SharedDtor();
}

void tower_raids_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tower_raids_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tower_raids_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tower_raids_ack_descriptor_;
}

const tower_raids_ack& tower_raids_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

tower_raids_ack* tower_raids_ack::default_instance_ = NULL;

tower_raids_ack* tower_raids_ack::New() const {
  return new tower_raids_ack;
}

void tower_raids_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7259;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tower_raids_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_raids_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tower_raids_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_raids_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tower_raids_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_raids_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tower_raids_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_raids_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tower_raids_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tower_raids_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tower_raids_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tower_raids_ack::MergeFrom(const tower_raids_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tower_raids_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tower_raids_ack::CopyFrom(const tower_raids_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tower_raids_ack::IsInitialized() const {

  return true;
}

void tower_raids_ack::Swap(tower_raids_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tower_raids_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tower_raids_ack_descriptor_;
  metadata.reflection = tower_raids_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tower_reset_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

tower_reset_req::tower_reset_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tower_reset_req::InitAsDefaultInstance() {
}

tower_reset_req::tower_reset_req(const tower_reset_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tower_reset_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7260;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tower_reset_req::~tower_reset_req() {
  SharedDtor();
}

void tower_reset_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tower_reset_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tower_reset_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tower_reset_req_descriptor_;
}

const tower_reset_req& tower_reset_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

tower_reset_req* tower_reset_req::default_instance_ = NULL;

tower_reset_req* tower_reset_req::New() const {
  return new tower_reset_req;
}

void tower_reset_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7260;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tower_reset_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_reset_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tower_reset_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_reset_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tower_reset_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_reset_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tower_reset_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_reset_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tower_reset_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tower_reset_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tower_reset_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tower_reset_req::MergeFrom(const tower_reset_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tower_reset_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tower_reset_req::CopyFrom(const tower_reset_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tower_reset_req::IsInitialized() const {

  return true;
}

void tower_reset_req::Swap(tower_reset_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tower_reset_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tower_reset_req_descriptor_;
  metadata.reflection = tower_reset_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tower_reset_ack::kProtoidFieldNumber;
const int tower_reset_ack::kRetFieldNumber;
#endif  // !_MSC_VER

tower_reset_ack::tower_reset_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tower_reset_ack::InitAsDefaultInstance() {
}

tower_reset_ack::tower_reset_ack(const tower_reset_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tower_reset_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7261;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tower_reset_ack::~tower_reset_ack() {
  SharedDtor();
}

void tower_reset_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tower_reset_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tower_reset_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tower_reset_ack_descriptor_;
}

const tower_reset_ack& tower_reset_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

tower_reset_ack* tower_reset_ack::default_instance_ = NULL;

tower_reset_ack* tower_reset_ack::New() const {
  return new tower_reset_ack;
}

void tower_reset_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7261;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tower_reset_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_reset_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tower_reset_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_reset_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tower_reset_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_reset_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tower_reset_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_reset_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tower_reset_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tower_reset_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tower_reset_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tower_reset_ack::MergeFrom(const tower_reset_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tower_reset_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tower_reset_ack::CopyFrom(const tower_reset_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tower_reset_ack::IsInitialized() const {

  return true;
}

void tower_reset_ack::Swap(tower_reset_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tower_reset_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tower_reset_ack_descriptor_;
  metadata.reflection = tower_reset_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tower_reward_ntf::kProtoidFieldNumber;
const int tower_reward_ntf::kFloorIdFieldNumber;
const int tower_reward_ntf::kCurStepFieldNumber;
const int tower_reward_ntf::kTypeFieldNumber;
const int tower_reward_ntf::kIsWinFieldNumber;
const int tower_reward_ntf::kRewardFieldNumber;
const int tower_reward_ntf::kRetFieldNumber;
#endif  // !_MSC_VER

tower_reward_ntf::tower_reward_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tower_reward_ntf::InitAsDefaultInstance() {
}

tower_reward_ntf::tower_reward_ntf(const tower_reward_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tower_reward_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7262;
  floor_id_ = 0u;
  cur_step_ = 0u;
  type_ = 0u;
  is_win_ = false;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tower_reward_ntf::~tower_reward_ntf() {
  SharedDtor();
}

void tower_reward_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tower_reward_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tower_reward_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tower_reward_ntf_descriptor_;
}

const tower_reward_ntf& tower_reward_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

tower_reward_ntf* tower_reward_ntf::default_instance_ = NULL;

tower_reward_ntf* tower_reward_ntf::New() const {
  return new tower_reward_ntf;
}

void tower_reward_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7262;
    floor_id_ = 0u;
    cur_step_ = 0u;
    type_ = 0u;
    is_win_ = false;
    ret_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tower_reward_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_reward_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_floor_id;
        break;
      }

      // optional uint32 floor_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_floor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &floor_id_)));
          set_has_floor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_step;
        break;
      }

      // optional uint32 cur_step = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_step_)));
          set_has_cur_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_win;
        break;
      }

      // optional bool is_win = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_win_)));
          set_has_is_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_reward;
        break;
      }

      // repeated .SProtoSpace.item_info reward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_reward;
        if (input->ExpectTag(56)) goto parse_ret;
        break;
      }

      // optional int32 ret = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tower_reward_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_reward_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 floor_id = 2;
  if (has_floor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->floor_id(), output);
  }

  // optional uint32 cur_step = 3;
  if (has_cur_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_step(), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // optional bool is_win = 5;
  if (has_is_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_win(), output);
  }

  // repeated .SProtoSpace.item_info reward = 6;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->reward(i), output);
  }

  // optional int32 ret = 7;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tower_reward_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_reward_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 floor_id = 2;
  if (has_floor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->floor_id(), target);
  }

  // optional uint32 cur_step = 3;
  if (has_cur_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_step(), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // optional bool is_win = 5;
  if (has_is_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_win(), target);
  }

  // repeated .SProtoSpace.item_info reward = 6;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->reward(i), target);
  }

  // optional int32 ret = 7;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tower_reward_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = tower_reward_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 floor_id = 2;
    if (has_floor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->floor_id());
    }

    // optional uint32 cur_step = 3;
    if (has_cur_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_step());
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional bool is_win = 5;
    if (has_is_win()) {
      total_size += 1 + 1;
    }

    // optional int32 ret = 7;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .SProtoSpace.item_info reward = 6;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tower_reward_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tower_reward_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tower_reward_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tower_reward_ntf::MergeFrom(const tower_reward_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_floor_id()) {
      set_floor_id(from.floor_id());
    }
    if (from.has_cur_step()) {
      set_cur_step(from.cur_step());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_is_win()) {
      set_is_win(from.is_win());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tower_reward_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tower_reward_ntf::CopyFrom(const tower_reward_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tower_reward_ntf::IsInitialized() const {

  return true;
}

void tower_reward_ntf::Swap(tower_reward_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(floor_id_, other->floor_id_);
    std::swap(cur_step_, other->cur_step_);
    std::swap(type_, other->type_);
    std::swap(is_win_, other->is_win_);
    reward_.Swap(&other->reward_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tower_reward_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tower_reward_ntf_descriptor_;
  metadata.reflection = tower_reward_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int question_find_wrong_req::kProtoidFieldNumber;
const int question_find_wrong_req::kQuestionIdFieldNumber;
const int question_find_wrong_req::kSubquestionIdFieldNumber;
const int question_find_wrong_req::kTypeFieldNumber;
#endif  // !_MSC_VER

question_find_wrong_req::question_find_wrong_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void question_find_wrong_req::InitAsDefaultInstance() {
}

question_find_wrong_req::question_find_wrong_req(const question_find_wrong_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void question_find_wrong_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7263;
  question_id_ = 0u;
  subquestion_id_ = 0u;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

question_find_wrong_req::~question_find_wrong_req() {
  SharedDtor();
}

void question_find_wrong_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void question_find_wrong_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* question_find_wrong_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return question_find_wrong_req_descriptor_;
}

const question_find_wrong_req& question_find_wrong_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

question_find_wrong_req* question_find_wrong_req::default_instance_ = NULL;

question_find_wrong_req* question_find_wrong_req::New() const {
  return new question_find_wrong_req;
}

void question_find_wrong_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7263;
    question_id_ = 0u;
    subquestion_id_ = 0u;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool question_find_wrong_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_find_wrong_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_question_id;
        break;
      }

      // optional uint32 question_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_question_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_id_)));
          set_has_question_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_subquestion_id;
        break;
      }

      // optional uint32 subquestion_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subquestion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subquestion_id_)));
          set_has_subquestion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void question_find_wrong_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_find_wrong_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 question_id = 2;
  if (has_question_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->question_id(), output);
  }

  // optional uint32 subquestion_id = 3;
  if (has_subquestion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->subquestion_id(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* question_find_wrong_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_find_wrong_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 question_id = 2;
  if (has_question_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->question_id(), target);
  }

  // optional uint32 subquestion_id = 3;
  if (has_subquestion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->subquestion_id(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int question_find_wrong_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_find_wrong_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 question_id = 2;
    if (has_question_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->question_id());
    }

    // optional uint32 subquestion_id = 3;
    if (has_subquestion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subquestion_id());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void question_find_wrong_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const question_find_wrong_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const question_find_wrong_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void question_find_wrong_req::MergeFrom(const question_find_wrong_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_question_id()) {
      set_question_id(from.question_id());
    }
    if (from.has_subquestion_id()) {
      set_subquestion_id(from.subquestion_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void question_find_wrong_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void question_find_wrong_req::CopyFrom(const question_find_wrong_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool question_find_wrong_req::IsInitialized() const {

  return true;
}

void question_find_wrong_req::Swap(question_find_wrong_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(question_id_, other->question_id_);
    std::swap(subquestion_id_, other->subquestion_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata question_find_wrong_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = question_find_wrong_req_descriptor_;
  metadata.reflection = question_find_wrong_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int question_find_wrong_ack::kProtoidFieldNumber;
const int question_find_wrong_ack::kQuestionIdFieldNumber;
const int question_find_wrong_ack::kErrorAnswerFieldNumber;
const int question_find_wrong_ack::kSubquestionIdFieldNumber;
const int question_find_wrong_ack::kRetFieldNumber;
const int question_find_wrong_ack::kTypeFieldNumber;
#endif  // !_MSC_VER

question_find_wrong_ack::question_find_wrong_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void question_find_wrong_ack::InitAsDefaultInstance() {
}

question_find_wrong_ack::question_find_wrong_ack(const question_find_wrong_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void question_find_wrong_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7264;
  question_id_ = 0u;
  error_answer_ = 0u;
  subquestion_id_ = 0u;
  ret_ = 0u;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

question_find_wrong_ack::~question_find_wrong_ack() {
  SharedDtor();
}

void question_find_wrong_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void question_find_wrong_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* question_find_wrong_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return question_find_wrong_ack_descriptor_;
}

const question_find_wrong_ack& question_find_wrong_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

question_find_wrong_ack* question_find_wrong_ack::default_instance_ = NULL;

question_find_wrong_ack* question_find_wrong_ack::New() const {
  return new question_find_wrong_ack;
}

void question_find_wrong_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7264;
    question_id_ = 0u;
    error_answer_ = 0u;
    subquestion_id_ = 0u;
    ret_ = 0u;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool question_find_wrong_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_find_wrong_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_question_id;
        break;
      }

      // optional uint32 question_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_question_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_id_)));
          set_has_question_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error_answer;
        break;
      }

      // optional uint32 error_answer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_answer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_answer_)));
          set_has_error_answer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_subquestion_id;
        break;
      }

      // optional uint32 subquestion_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subquestion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subquestion_id_)));
          set_has_subquestion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional int32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void question_find_wrong_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_find_wrong_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 question_id = 2;
  if (has_question_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->question_id(), output);
  }

  // optional uint32 error_answer = 3;
  if (has_error_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->error_answer(), output);
  }

  // optional uint32 subquestion_id = 4;
  if (has_subquestion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->subquestion_id(), output);
  }

  // optional uint32 ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ret(), output);
  }

  // optional int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* question_find_wrong_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_find_wrong_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 question_id = 2;
  if (has_question_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->question_id(), target);
  }

  // optional uint32 error_answer = 3;
  if (has_error_answer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->error_answer(), target);
  }

  // optional uint32 subquestion_id = 4;
  if (has_subquestion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->subquestion_id(), target);
  }

  // optional uint32 ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ret(), target);
  }

  // optional int32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int question_find_wrong_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = question_find_wrong_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 question_id = 2;
    if (has_question_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->question_id());
    }

    // optional uint32 error_answer = 3;
    if (has_error_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_answer());
    }

    // optional uint32 subquestion_id = 4;
    if (has_subquestion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subquestion_id());
    }

    // optional uint32 ret = 5;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void question_find_wrong_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const question_find_wrong_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const question_find_wrong_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void question_find_wrong_ack::MergeFrom(const question_find_wrong_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_question_id()) {
      set_question_id(from.question_id());
    }
    if (from.has_error_answer()) {
      set_error_answer(from.error_answer());
    }
    if (from.has_subquestion_id()) {
      set_subquestion_id(from.subquestion_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void question_find_wrong_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void question_find_wrong_ack::CopyFrom(const question_find_wrong_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool question_find_wrong_ack::IsInitialized() const {

  return true;
}

void question_find_wrong_ack::Swap(question_find_wrong_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(question_id_, other->question_id_);
    std::swap(error_answer_, other->error_answer_);
    std::swap(subquestion_id_, other->subquestion_id_);
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata question_find_wrong_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = question_find_wrong_ack_descriptor_;
  metadata.reflection = question_find_wrong_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enter_adv_req::kProtoIdFieldNumber;
#endif  // !_MSC_VER

enter_adv_req::enter_adv_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_adv_req::InitAsDefaultInstance() {
}

enter_adv_req::enter_adv_req(const enter_adv_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_adv_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7500;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_adv_req::~enter_adv_req() {
  SharedDtor();
}

void enter_adv_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void enter_adv_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_adv_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_adv_req_descriptor_;
}

const enter_adv_req& enter_adv_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

enter_adv_req* enter_adv_req::default_instance_ = NULL;

enter_adv_req* enter_adv_req::New() const {
  return new enter_adv_req;
}

void enter_adv_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7500;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_adv_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_adv_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_adv_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_adv_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_adv_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_adv_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_adv_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_adv_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_adv_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_adv_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_adv_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_adv_req::MergeFrom(const enter_adv_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_adv_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_adv_req::CopyFrom(const enter_adv_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_adv_req::IsInitialized() const {

  return true;
}

void enter_adv_req::Swap(enter_adv_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_adv_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_adv_req_descriptor_;
  metadata.reflection = enter_adv_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enter_adv_ack::kProtoIdFieldNumber;
const int enter_adv_ack::kAdvTimesFieldNumber;
const int enter_adv_ack::kAdvEnergyFieldNumber;
const int enter_adv_ack::kCityIdsFieldNumber;
const int enter_adv_ack::kRetFieldNumber;
const int enter_adv_ack::kAskIdsFieldNumber;
#endif  // !_MSC_VER

enter_adv_ack::enter_adv_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_adv_ack::InitAsDefaultInstance() {
}

enter_adv_ack::enter_adv_ack(const enter_adv_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_adv_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7501;
  adv_times_ = 0;
  adv_energy_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_adv_ack::~enter_adv_ack() {
  SharedDtor();
}

void enter_adv_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void enter_adv_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_adv_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_adv_ack_descriptor_;
}

const enter_adv_ack& enter_adv_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

enter_adv_ack* enter_adv_ack::default_instance_ = NULL;

enter_adv_ack* enter_adv_ack::New() const {
  return new enter_adv_ack;
}

void enter_adv_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7501;
    adv_times_ = 0;
    adv_energy_ = 0;
    ret_ = 0;
  }
  city_ids_.Clear();
  ask_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_adv_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_adv_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_adv_times;
        break;
      }

      // optional int32 adv_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adv_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adv_times_)));
          set_has_adv_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_adv_energy;
        break;
      }

      // optional int32 adv_energy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adv_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adv_energy_)));
          set_has_adv_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_city_ids;
        break;
      }

      // repeated int32 city_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_city_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_city_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_city_ids;
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional int32 ret = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ask_ids;
        break;
      }

      // repeated int32 ask_ids = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ask_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_ask_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ask_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ask_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_adv_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_adv_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 adv_times = 2;
  if (has_adv_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->adv_times(), output);
  }

  // optional int32 adv_energy = 3;
  if (has_adv_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->adv_energy(), output);
  }

  // repeated int32 city_ids = 4;
  for (int i = 0; i < this->city_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->city_ids(i), output);
  }

  // optional int32 ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ret(), output);
  }

  // repeated int32 ask_ids = 6;
  for (int i = 0; i < this->ask_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->ask_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_adv_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_adv_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 adv_times = 2;
  if (has_adv_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->adv_times(), target);
  }

  // optional int32 adv_energy = 3;
  if (has_adv_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->adv_energy(), target);
  }

  // repeated int32 city_ids = 4;
  for (int i = 0; i < this->city_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->city_ids(i), target);
  }

  // optional int32 ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ret(), target);
  }

  // repeated int32 ask_ids = 6;
  for (int i = 0; i < this->ask_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->ask_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_adv_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_adv_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 adv_times = 2;
    if (has_adv_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adv_times());
    }

    // optional int32 adv_energy = 3;
    if (has_adv_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adv_energy());
    }

    // optional int32 ret = 5;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated int32 city_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->city_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->city_ids(i));
    }
    total_size += 1 * this->city_ids_size() + data_size;
  }

  // repeated int32 ask_ids = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->ask_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ask_ids(i));
    }
    total_size += 1 * this->ask_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_adv_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_adv_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_adv_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_adv_ack::MergeFrom(const enter_adv_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  city_ids_.MergeFrom(from.city_ids_);
  ask_ids_.MergeFrom(from.ask_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_adv_times()) {
      set_adv_times(from.adv_times());
    }
    if (from.has_adv_energy()) {
      set_adv_energy(from.adv_energy());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_adv_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_adv_ack::CopyFrom(const enter_adv_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_adv_ack::IsInitialized() const {

  return true;
}

void enter_adv_ack::Swap(enter_adv_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(adv_times_, other->adv_times_);
    std::swap(adv_energy_, other->adv_energy_);
    city_ids_.Swap(&other->city_ids_);
    std::swap(ret_, other->ret_);
    ask_ids_.Swap(&other->ask_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_adv_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_adv_ack_descriptor_;
  metadata.reflection = enter_adv_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int select_adv_city_req::kProtoIdFieldNumber;
const int select_adv_city_req::kCityIdFieldNumber;
#endif  // !_MSC_VER

select_adv_city_req::select_adv_city_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void select_adv_city_req::InitAsDefaultInstance() {
}

select_adv_city_req::select_adv_city_req(const select_adv_city_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void select_adv_city_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7502;
  city_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

select_adv_city_req::~select_adv_city_req() {
  SharedDtor();
}

void select_adv_city_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void select_adv_city_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* select_adv_city_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return select_adv_city_req_descriptor_;
}

const select_adv_city_req& select_adv_city_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

select_adv_city_req* select_adv_city_req::default_instance_ = NULL;

select_adv_city_req* select_adv_city_req::New() const {
  return new select_adv_city_req;
}

void select_adv_city_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7502;
    city_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool select_adv_city_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = select_adv_city_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_city_id;
        break;
      }

      // optional int32 city_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void select_adv_city_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = select_adv_city_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 city_id = 2;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->city_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* select_adv_city_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = select_adv_city_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 city_id = 2;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->city_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int select_adv_city_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = select_adv_city_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 city_id = 2;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->city_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void select_adv_city_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const select_adv_city_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const select_adv_city_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void select_adv_city_req::MergeFrom(const select_adv_city_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void select_adv_city_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void select_adv_city_req::CopyFrom(const select_adv_city_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool select_adv_city_req::IsInitialized() const {

  return true;
}

void select_adv_city_req::Swap(select_adv_city_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(city_id_, other->city_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata select_adv_city_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = select_adv_city_req_descriptor_;
  metadata.reflection = select_adv_city_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int select_adv_city_ack::kProtoIdFieldNumber;
const int select_adv_city_ack::kCityIdFieldNumber;
const int select_adv_city_ack::kWeatherFieldNumber;
const int select_adv_city_ack::kRetFieldNumber;
const int select_adv_city_ack::kDataFieldNumber;
#endif  // !_MSC_VER

select_adv_city_ack::select_adv_city_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void select_adv_city_ack::InitAsDefaultInstance() {
}

select_adv_city_ack::select_adv_city_ack(const select_adv_city_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void select_adv_city_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7503;
  city_id_ = 0;
  weather_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

select_adv_city_ack::~select_adv_city_ack() {
  SharedDtor();
}

void select_adv_city_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void select_adv_city_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* select_adv_city_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return select_adv_city_ack_descriptor_;
}

const select_adv_city_ack& select_adv_city_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

select_adv_city_ack* select_adv_city_ack::default_instance_ = NULL;

select_adv_city_ack* select_adv_city_ack::New() const {
  return new select_adv_city_ack;
}

void select_adv_city_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7503;
    city_id_ = 0;
    weather_ = 0;
    ret_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool select_adv_city_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = select_adv_city_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_city_id;
        break;
      }

      // optional int32 city_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_weather;
        break;
      }

      // optional .SProtoSpace.EWEATHER_TYPE weather = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weather:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EWEATHER_TYPE_IsValid(value)) {
            set_weather(static_cast< ::SProtoSpace::EWEATHER_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional int32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // repeated .SProtoSpace.hero_favor_info data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void select_adv_city_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = select_adv_city_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 city_id = 2;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->city_id(), output);
  }

  // optional .SProtoSpace.EWEATHER_TYPE weather = 3;
  if (has_weather()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->weather(), output);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  // repeated .SProtoSpace.hero_favor_info data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* select_adv_city_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = select_adv_city_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 city_id = 2;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->city_id(), target);
  }

  // optional .SProtoSpace.EWEATHER_TYPE weather = 3;
  if (has_weather()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->weather(), target);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ret(), target);
  }

  // repeated .SProtoSpace.hero_favor_info data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int select_adv_city_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = select_adv_city_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 city_id = 2;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->city_id());
    }

    // optional .SProtoSpace.EWEATHER_TYPE weather = 3;
    if (has_weather()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->weather());
    }

    // optional int32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .SProtoSpace.hero_favor_info data = 5;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void select_adv_city_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const select_adv_city_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const select_adv_city_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void select_adv_city_ack::MergeFrom(const select_adv_city_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_weather()) {
      set_weather(from.weather());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void select_adv_city_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void select_adv_city_ack::CopyFrom(const select_adv_city_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool select_adv_city_ack::IsInitialized() const {

  return true;
}

void select_adv_city_ack::Swap(select_adv_city_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(city_id_, other->city_id_);
    std::swap(weather_, other->weather_);
    std::swap(ret_, other->ret_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata select_adv_city_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = select_adv_city_ack_descriptor_;
  metadata.reflection = select_adv_city_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int adv_event_req::kProtoIdFieldNumber;
const int adv_event_req::kCityIdFieldNumber;
const int adv_event_req::kSlotFieldNumber;
#endif  // !_MSC_VER

adv_event_req::adv_event_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void adv_event_req::InitAsDefaultInstance() {
}

adv_event_req::adv_event_req(const adv_event_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void adv_event_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7504;
  city_id_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

adv_event_req::~adv_event_req() {
  SharedDtor();
}

void adv_event_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void adv_event_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* adv_event_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return adv_event_req_descriptor_;
}

const adv_event_req& adv_event_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

adv_event_req* adv_event_req::default_instance_ = NULL;

adv_event_req* adv_event_req::New() const {
  return new adv_event_req;
}

void adv_event_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7504;
    city_id_ = 0;
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool adv_event_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_event_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_city_id;
        break;
      }

      // optional int32 city_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot;
        break;
      }

      // optional int32 slot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void adv_event_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_event_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 city_id = 2;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->city_id(), output);
  }

  // optional int32 slot = 3;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* adv_event_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_event_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 city_id = 2;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->city_id(), target);
  }

  // optional int32 slot = 3;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int adv_event_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_event_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 city_id = 2;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->city_id());
    }

    // optional int32 slot = 3;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void adv_event_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const adv_event_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const adv_event_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void adv_event_req::MergeFrom(const adv_event_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void adv_event_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void adv_event_req::CopyFrom(const adv_event_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool adv_event_req::IsInitialized() const {

  return true;
}

void adv_event_req::Swap(adv_event_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(city_id_, other->city_id_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata adv_event_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = adv_event_req_descriptor_;
  metadata.reflection = adv_event_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int adv_event_ack::kProtoIdFieldNumber;
const int adv_event_ack::kCityIdFieldNumber;
const int adv_event_ack::kRetFieldNumber;
const int adv_event_ack::kEventIdFieldNumber;
const int adv_event_ack::kEventTypeFieldNumber;
#endif  // !_MSC_VER

adv_event_ack::adv_event_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void adv_event_ack::InitAsDefaultInstance() {
}

adv_event_ack::adv_event_ack(const adv_event_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void adv_event_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7505;
  city_id_ = 0;
  ret_ = 0;
  event_id_ = 0;
  event_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

adv_event_ack::~adv_event_ack() {
  SharedDtor();
}

void adv_event_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void adv_event_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* adv_event_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return adv_event_ack_descriptor_;
}

const adv_event_ack& adv_event_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

adv_event_ack* adv_event_ack::default_instance_ = NULL;

adv_event_ack* adv_event_ack::New() const {
  return new adv_event_ack;
}

void adv_event_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7505;
    city_id_ = 0;
    ret_ = 0;
    event_id_ = 0;
    event_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool adv_event_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_event_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_city_id;
        break;
      }

      // optional int32 city_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_event_id;
        break;
      }

      // optional int32 event_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_event_type;
        break;
      }

      // optional int32 event_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void adv_event_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_event_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 city_id = 2;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->city_id(), output);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  // optional int32 event_id = 4;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->event_id(), output);
  }

  // optional int32 event_type = 5;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->event_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* adv_event_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_event_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 city_id = 2;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->city_id(), target);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  // optional int32 event_id = 4;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->event_id(), target);
  }

  // optional int32 event_type = 5;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->event_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int adv_event_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_event_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 city_id = 2;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->city_id());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 event_id = 4;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // optional int32 event_type = 5;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void adv_event_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const adv_event_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const adv_event_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void adv_event_ack::MergeFrom(const adv_event_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void adv_event_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void adv_event_ack::CopyFrom(const adv_event_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool adv_event_ack::IsInitialized() const {

  return true;
}

void adv_event_ack::Swap(adv_event_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(city_id_, other->city_id_);
    std::swap(ret_, other->ret_);
    std::swap(event_id_, other->event_id_);
    std::swap(event_type_, other->event_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata adv_event_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = adv_event_ack_descriptor_;
  metadata.reflection = adv_event_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int adv_reward_ntf::kProtoIdFieldNumber;
const int adv_reward_ntf::kRetFieldNumber;
const int adv_reward_ntf::kCityIdFieldNumber;
const int adv_reward_ntf::kEventIdFieldNumber;
const int adv_reward_ntf::kRewardFieldNumber;
#endif  // !_MSC_VER

adv_reward_ntf::adv_reward_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void adv_reward_ntf::InitAsDefaultInstance() {
}

adv_reward_ntf::adv_reward_ntf(const adv_reward_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void adv_reward_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7506;
  ret_ = 0;
  city_id_ = 0;
  event_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

adv_reward_ntf::~adv_reward_ntf() {
  SharedDtor();
}

void adv_reward_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void adv_reward_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* adv_reward_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return adv_reward_ntf_descriptor_;
}

const adv_reward_ntf& adv_reward_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

adv_reward_ntf* adv_reward_ntf::default_instance_ = NULL;

adv_reward_ntf* adv_reward_ntf::New() const {
  return new adv_reward_ntf;
}

void adv_reward_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7506;
    ret_ = 0;
    city_id_ = 0;
    event_id_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool adv_reward_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_reward_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_city_id;
        break;
      }

      // optional int32 city_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_event_id;
        break;
      }

      // optional int32 event_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        break;
      }

      // repeated .SProtoSpace.item_info reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void adv_reward_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_reward_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 city_id = 3;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->city_id(), output);
  }

  // optional int32 event_id = 4;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->event_id(), output);
  }

  // repeated .SProtoSpace.item_info reward = 5;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* adv_reward_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_reward_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 city_id = 3;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->city_id(), target);
  }

  // optional int32 event_id = 4;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->event_id(), target);
  }

  // repeated .SProtoSpace.item_info reward = 5;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int adv_reward_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_reward_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 city_id = 3;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->city_id());
    }

    // optional int32 event_id = 4;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

  }
  // repeated .SProtoSpace.item_info reward = 5;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void adv_reward_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const adv_reward_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const adv_reward_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void adv_reward_ntf::MergeFrom(const adv_reward_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void adv_reward_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void adv_reward_ntf::CopyFrom(const adv_reward_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool adv_reward_ntf::IsInitialized() const {

  return true;
}

void adv_reward_ntf::Swap(adv_reward_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(city_id_, other->city_id_);
    std::swap(event_id_, other->event_id_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata adv_reward_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = adv_reward_ntf_descriptor_;
  metadata.reflection = adv_reward_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int adv_ask_req::kProtoIdFieldNumber;
#endif  // !_MSC_VER

adv_ask_req::adv_ask_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void adv_ask_req::InitAsDefaultInstance() {
}

adv_ask_req::adv_ask_req(const adv_ask_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void adv_ask_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7507;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

adv_ask_req::~adv_ask_req() {
  SharedDtor();
}

void adv_ask_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void adv_ask_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* adv_ask_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return adv_ask_req_descriptor_;
}

const adv_ask_req& adv_ask_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

adv_ask_req* adv_ask_req::default_instance_ = NULL;

adv_ask_req* adv_ask_req::New() const {
  return new adv_ask_req;
}

void adv_ask_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7507;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool adv_ask_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_ask_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void adv_ask_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_ask_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* adv_ask_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_ask_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int adv_ask_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_ask_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void adv_ask_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const adv_ask_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const adv_ask_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void adv_ask_req::MergeFrom(const adv_ask_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void adv_ask_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void adv_ask_req::CopyFrom(const adv_ask_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool adv_ask_req::IsInitialized() const {

  return true;
}

void adv_ask_req::Swap(adv_ask_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata adv_ask_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = adv_ask_req_descriptor_;
  metadata.reflection = adv_ask_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int adv_ask_ack::kProtoIdFieldNumber;
const int adv_ask_ack::kRetFieldNumber;
const int adv_ask_ack::kAskIdsFieldNumber;
#endif  // !_MSC_VER

adv_ask_ack::adv_ask_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void adv_ask_ack::InitAsDefaultInstance() {
}

adv_ask_ack::adv_ask_ack(const adv_ask_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void adv_ask_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7508;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

adv_ask_ack::~adv_ask_ack() {
  SharedDtor();
}

void adv_ask_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void adv_ask_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* adv_ask_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return adv_ask_ack_descriptor_;
}

const adv_ask_ack& adv_ask_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

adv_ask_ack* adv_ask_ack::default_instance_ = NULL;

adv_ask_ack* adv_ask_ack::New() const {
  return new adv_ask_ack;
}

void adv_ask_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7508;
    ret_ = 0;
  }
  ask_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool adv_ask_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_ask_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ask_ids;
        break;
      }

      // repeated int32 ask_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ask_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_ask_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ask_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ask_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void adv_ask_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_ask_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // repeated int32 ask_ids = 3;
  for (int i = 0; i < this->ask_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->ask_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* adv_ask_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_ask_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // repeated int32 ask_ids = 3;
  for (int i = 0; i < this->ask_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->ask_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int adv_ask_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_ask_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated int32 ask_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ask_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ask_ids(i));
    }
    total_size += 1 * this->ask_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void adv_ask_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const adv_ask_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const adv_ask_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void adv_ask_ack::MergeFrom(const adv_ask_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  ask_ids_.MergeFrom(from.ask_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void adv_ask_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void adv_ask_ack::CopyFrom(const adv_ask_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool adv_ask_ack::IsInitialized() const {

  return true;
}

void adv_ask_ack::Swap(adv_ask_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    ask_ids_.Swap(&other->ask_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata adv_ask_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = adv_ask_ack_descriptor_;
  metadata.reflection = adv_ask_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int adv_tujian_req::kProtoIdFieldNumber;
#endif  // !_MSC_VER

adv_tujian_req::adv_tujian_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void adv_tujian_req::InitAsDefaultInstance() {
}

adv_tujian_req::adv_tujian_req(const adv_tujian_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void adv_tujian_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7509;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

adv_tujian_req::~adv_tujian_req() {
  SharedDtor();
}

void adv_tujian_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void adv_tujian_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* adv_tujian_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return adv_tujian_req_descriptor_;
}

const adv_tujian_req& adv_tujian_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

adv_tujian_req* adv_tujian_req::default_instance_ = NULL;

adv_tujian_req* adv_tujian_req::New() const {
  return new adv_tujian_req;
}

void adv_tujian_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7509;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool adv_tujian_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_tujian_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void adv_tujian_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_tujian_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* adv_tujian_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_tujian_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int adv_tujian_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_tujian_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void adv_tujian_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const adv_tujian_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const adv_tujian_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void adv_tujian_req::MergeFrom(const adv_tujian_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void adv_tujian_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void adv_tujian_req::CopyFrom(const adv_tujian_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool adv_tujian_req::IsInitialized() const {

  return true;
}

void adv_tujian_req::Swap(adv_tujian_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata adv_tujian_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = adv_tujian_req_descriptor_;
  metadata.reflection = adv_tujian_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int adv_tujian_ack::kProtoIdFieldNumber;
const int adv_tujian_ack::kRetFieldNumber;
const int adv_tujian_ack::kCityEventsFieldNumber;
const int adv_tujian_ack::kHeroEventsFieldNumber;
#endif  // !_MSC_VER

adv_tujian_ack::adv_tujian_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void adv_tujian_ack::InitAsDefaultInstance() {
}

adv_tujian_ack::adv_tujian_ack(const adv_tujian_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void adv_tujian_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7510;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

adv_tujian_ack::~adv_tujian_ack() {
  SharedDtor();
}

void adv_tujian_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void adv_tujian_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* adv_tujian_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return adv_tujian_ack_descriptor_;
}

const adv_tujian_ack& adv_tujian_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

adv_tujian_ack* adv_tujian_ack::default_instance_ = NULL;

adv_tujian_ack* adv_tujian_ack::New() const {
  return new adv_tujian_ack;
}

void adv_tujian_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7510;
    ret_ = 0;
  }
  city_events_.Clear();
  hero_events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool adv_tujian_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_tujian_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_city_events;
        break;
      }

      // repeated .SProtoSpace.city_events_data city_events = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_city_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_city_events;
        if (input->ExpectTag(34)) goto parse_hero_events;
        break;
      }

      // repeated .SProtoSpace.hero_events_data hero_events = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hero_events;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void adv_tujian_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_tujian_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // repeated .SProtoSpace.city_events_data city_events = 3;
  for (int i = 0; i < this->city_events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->city_events(i), output);
  }

  // repeated .SProtoSpace.hero_events_data hero_events = 4;
  for (int i = 0; i < this->hero_events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hero_events(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* adv_tujian_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_tujian_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // repeated .SProtoSpace.city_events_data city_events = 3;
  for (int i = 0; i < this->city_events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->city_events(i), target);
  }

  // repeated .SProtoSpace.hero_events_data hero_events = 4;
  for (int i = 0; i < this->hero_events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hero_events(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int adv_tujian_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = adv_tujian_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .SProtoSpace.city_events_data city_events = 3;
  total_size += 1 * this->city_events_size();
  for (int i = 0; i < this->city_events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->city_events(i));
  }

  // repeated .SProtoSpace.hero_events_data hero_events = 4;
  total_size += 1 * this->hero_events_size();
  for (int i = 0; i < this->hero_events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void adv_tujian_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const adv_tujian_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const adv_tujian_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void adv_tujian_ack::MergeFrom(const adv_tujian_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  city_events_.MergeFrom(from.city_events_);
  hero_events_.MergeFrom(from.hero_events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void adv_tujian_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void adv_tujian_ack::CopyFrom(const adv_tujian_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool adv_tujian_ack::IsInitialized() const {

  return true;
}

void adv_tujian_ack::Swap(adv_tujian_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    city_events_.Swap(&other->city_events_);
    hero_events_.Swap(&other->hero_events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata adv_tujian_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = adv_tujian_ack_descriptor_;
  metadata.reflection = adv_tujian_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int leave_adv_req::kProtoIdFieldNumber;
#endif  // !_MSC_VER

leave_adv_req::leave_adv_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void leave_adv_req::InitAsDefaultInstance() {
}

leave_adv_req::leave_adv_req(const leave_adv_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void leave_adv_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7513;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

leave_adv_req::~leave_adv_req() {
  SharedDtor();
}

void leave_adv_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void leave_adv_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* leave_adv_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return leave_adv_req_descriptor_;
}

const leave_adv_req& leave_adv_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

leave_adv_req* leave_adv_req::default_instance_ = NULL;

leave_adv_req* leave_adv_req::New() const {
  return new leave_adv_req;
}

void leave_adv_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7513;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool leave_adv_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = leave_adv_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void leave_adv_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = leave_adv_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* leave_adv_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = leave_adv_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int leave_adv_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = leave_adv_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void leave_adv_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const leave_adv_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const leave_adv_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void leave_adv_req::MergeFrom(const leave_adv_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void leave_adv_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void leave_adv_req::CopyFrom(const leave_adv_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool leave_adv_req::IsInitialized() const {

  return true;
}

void leave_adv_req::Swap(leave_adv_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata leave_adv_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = leave_adv_req_descriptor_;
  metadata.reflection = leave_adv_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int leave_adv_ack::kProtoIdFieldNumber;
const int leave_adv_ack::kRetFieldNumber;
#endif  // !_MSC_VER

leave_adv_ack::leave_adv_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void leave_adv_ack::InitAsDefaultInstance() {
}

leave_adv_ack::leave_adv_ack(const leave_adv_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void leave_adv_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 7514;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

leave_adv_ack::~leave_adv_ack() {
  SharedDtor();
}

void leave_adv_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void leave_adv_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* leave_adv_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return leave_adv_ack_descriptor_;
}

const leave_adv_ack& leave_adv_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5factivity_2eproto();
  return *default_instance_;
}

leave_adv_ack* leave_adv_ack::default_instance_ = NULL;

leave_adv_ack* leave_adv_ack::New() const {
  return new leave_adv_ack;
}

void leave_adv_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 7514;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool leave_adv_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = leave_adv_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void leave_adv_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = leave_adv_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* leave_adv_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = leave_adv_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int leave_adv_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = leave_adv_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void leave_adv_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const leave_adv_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const leave_adv_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void leave_adv_ack::MergeFrom(const leave_adv_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void leave_adv_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void leave_adv_ack::CopyFrom(const leave_adv_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool leave_adv_ack::IsInitialized() const {

  return true;
}

void leave_adv_ack::Swap(leave_adv_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata leave_adv_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = leave_adv_ack_descriptor_;
  metadata.reflection = leave_adv_ack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
