// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cm_battletype.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cm_battletype.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* reward_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reward_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* round_op_skill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  round_op_skill_reflection_ = NULL;
const ::google::protobuf::Descriptor* round_op_param_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  round_op_param_reflection_ = NULL;
const ::google::protobuf::Descriptor* damage_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  damage_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* obj_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  obj_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* round_skill_data_damage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  round_skill_data_damage_reflection_ = NULL;
const ::google::protobuf::Descriptor* round_skill_data_cure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  round_skill_data_cure_reflection_ = NULL;
const ::google::protobuf::Descriptor* round_buff_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  round_buff_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* round_state_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  round_state_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* round_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  round_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* seq_useskill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  seq_useskill_reflection_ = NULL;
const ::google::protobuf::Descriptor* seq_buff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  seq_buff_reflection_ = NULL;
const ::google::protobuf::Descriptor* seq_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  seq_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* seq_damage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  seq_damage_reflection_ = NULL;
const ::google::protobuf::Descriptor* seq_relive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  seq_relive_reflection_ = NULL;
const ::google::protobuf::Descriptor* seq_attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  seq_attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* seq_extra_action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  seq_extra_action_reflection_ = NULL;
const ::google::protobuf::Descriptor* seq_sp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  seq_sp_reflection_ = NULL;
const ::google::protobuf::Descriptor* opt_seq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  opt_seq_reflection_ = NULL;
const ::google::protobuf::Descriptor* hit_seq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hit_seq_reflection_ = NULL;
const ::google::protobuf::Descriptor* opt_seqs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  opt_seqs_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_hero_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_hero_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_player_base_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_player_base_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_role_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_role_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_camp_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_camp_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* pvp_battle_init_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pvp_battle_init_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_end_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_end_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* pve_check_battle_init_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pve_check_battle_init_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* create_battle_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  create_battle_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* running_entity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  running_entity_reflection_ = NULL;
const ::google::protobuf::Descriptor* running_queue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  running_queue_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_hero_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_hero_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_battle_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_battle_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_pvp_battle_camp_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_pvp_battle_camp_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_pvp_battle_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_pvp_battle_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_battle_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_battle_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_check_opt_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_check_opt_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* office_end_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  office_end_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_replay_round_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_replay_round_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_replay_turn_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_replay_turn_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_replay_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_replay_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* lsg_position_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lsg_position_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* comment_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  comment_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* comment_all_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  comment_all_reflection_ = NULL;
const ::google::protobuf::Descriptor* date_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  date_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* show_player_base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  show_player_base_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ECrossServerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBattleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EHeroFormationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EObjType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECampType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPlayerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERoundOP_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERoundDataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBuffDataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EStateDataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBattleTargetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDamageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBuffType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBuffTriggerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBuffReasonType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBuffEndType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EStateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGetValueType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDispelBuffType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMarkEffectType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESeqOptType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EOptSeqTimeLine_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETriggerConditionClass_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETriggerConditionAttrType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBuffEffectType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cm_5fbattletype_2eproto() {
  protobuf_AddDesc_cm_5fbattletype_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cm_battletype.proto");
  GOOGLE_CHECK(file != NULL);
  reward_item_descriptor_ = file->message_type(0);
  static const int reward_item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_item, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_item, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_item, count_),
  };
  reward_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reward_item_descriptor_,
      reward_item::default_instance_,
      reward_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reward_item));
  battle_reward_descriptor_ = file->message_type(1);
  static const int battle_reward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_reward, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_reward, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_reward, hero_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_reward, view_hero_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_reward, items_),
  };
  battle_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_reward_descriptor_,
      battle_reward::default_instance_,
      battle_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_reward));
  round_op_skill_descriptor_ = file->message_type(2);
  static const int round_op_skill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_op_skill, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_op_skill, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_op_skill, skill_id_),
  };
  round_op_skill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      round_op_skill_descriptor_,
      round_op_skill::default_instance_,
      round_op_skill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_op_skill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_op_skill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(round_op_skill));
  round_op_param_descriptor_ = file->message_type(3);
  static const int round_op_param_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_op_param, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_op_param, skill_),
  };
  round_op_param_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      round_op_param_descriptor_,
      round_op_param::default_instance_,
      round_op_param_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_op_param, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_op_param, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(round_op_param));
  damage_data_descriptor_ = file->message_type(4);
  static const int damage_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(damage_data, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(damage_data, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(damage_data, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(damage_data, critical_),
  };
  damage_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      damage_data_descriptor_,
      damage_data::default_instance_,
      damage_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(damage_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(damage_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(damage_data));
  obj_state_descriptor_ = file->message_type(5);
  static const int obj_state_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(obj_state, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(obj_state, buff_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(obj_state, hp_),
  };
  obj_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      obj_state_descriptor_,
      obj_state::default_instance_,
      obj_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(obj_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(obj_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(obj_state));
  round_skill_data_damage_descriptor_ = file->message_type(6);
  static const int round_skill_data_damage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_skill_data_damage, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_skill_data_damage, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_skill_data_damage, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_skill_data_damage, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_skill_data_damage, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_skill_data_damage, critical_),
  };
  round_skill_data_damage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      round_skill_data_damage_descriptor_,
      round_skill_data_damage::default_instance_,
      round_skill_data_damage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_skill_data_damage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_skill_data_damage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(round_skill_data_damage));
  round_skill_data_cure_descriptor_ = file->message_type(7);
  static const int round_skill_data_cure_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_skill_data_cure, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_skill_data_cure, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_skill_data_cure, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_skill_data_cure, add_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_skill_data_cure, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_skill_data_cure, critical_),
  };
  round_skill_data_cure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      round_skill_data_cure_descriptor_,
      round_skill_data_cure::default_instance_,
      round_skill_data_cure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_skill_data_cure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_skill_data_cure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(round_skill_data_cure));
  round_buff_data_descriptor_ = file->message_type(8);
  static const int round_buff_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_buff_data, buff_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_buff_data, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_buff_data, buff_uid_),
  };
  round_buff_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      round_buff_data_descriptor_,
      round_buff_data::default_instance_,
      round_buff_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_buff_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_buff_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(round_buff_data));
  round_state_data_descriptor_ = file->message_type(9);
  static const int round_state_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_state_data, state_flag_),
  };
  round_state_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      round_state_data_descriptor_,
      round_state_data::default_instance_,
      round_state_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_state_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_state_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(round_state_data));
  round_data_descriptor_ = file->message_type(10);
  static const int round_data_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_data, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_data, buff_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_data, state_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_data, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_data, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_data, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_data, sp_),
  };
  round_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      round_data_descriptor_,
      round_data::default_instance_,
      round_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(round_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(round_data));
  seq_useskill_descriptor_ = file->message_type(11);
  static const int seq_useskill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_useskill, cast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_useskill, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_useskill, skill_id_),
  };
  seq_useskill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      seq_useskill_descriptor_,
      seq_useskill::default_instance_,
      seq_useskill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_useskill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_useskill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(seq_useskill));
  seq_buff_descriptor_ = file->message_type(12);
  static const int seq_buff_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_buff, cast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_buff, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_buff, buff_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_buff, buff_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_buff, last_round_),
  };
  seq_buff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      seq_buff_descriptor_,
      seq_buff::default_instance_,
      seq_buff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_buff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_buff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(seq_buff));
  seq_state_descriptor_ = file->message_type(13);
  static const int seq_state_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_state, cast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_state, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_state, state_index_),
  };
  seq_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      seq_state_descriptor_,
      seq_state::default_instance_,
      seq_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(seq_state));
  seq_damage_descriptor_ = file->message_type(14);
  static const int seq_damage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_damage, cast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_damage, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_damage, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_damage, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_damage, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_damage, critical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_damage, buff_id_),
  };
  seq_damage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      seq_damage_descriptor_,
      seq_damage::default_instance_,
      seq_damage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_damage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_damage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(seq_damage));
  seq_relive_descriptor_ = file->message_type(15);
  static const int seq_relive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_relive, cast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_relive, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_relive, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_relive, hp_),
  };
  seq_relive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      seq_relive_descriptor_,
      seq_relive::default_instance_,
      seq_relive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_relive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_relive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(seq_relive));
  seq_attr_descriptor_ = file->message_type(16);
  static const int seq_attr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_attr, cast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_attr, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_attr, change_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_attr, val_),
  };
  seq_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      seq_attr_descriptor_,
      seq_attr::default_instance_,
      seq_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(seq_attr));
  seq_extra_action_descriptor_ = file->message_type(17);
  static const int seq_extra_action_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_extra_action, cast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_extra_action, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_extra_action, skill_id_),
  };
  seq_extra_action_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      seq_extra_action_descriptor_,
      seq_extra_action::default_instance_,
      seq_extra_action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_extra_action, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_extra_action, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(seq_extra_action));
  seq_sp_descriptor_ = file->message_type(18);
  static const int seq_sp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_sp, cast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_sp, change_sp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_sp, sp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_sp, max_sp_),
  };
  seq_sp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      seq_sp_descriptor_,
      seq_sp::default_instance_,
      seq_sp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_sp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seq_sp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(seq_sp));
  opt_seq_descriptor_ = file->message_type(19);
  static const int opt_seq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_seq, opt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_seq, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_seq, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_seq, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_seq, relive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_seq, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_seq, extra_action_),
  };
  opt_seq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      opt_seq_descriptor_,
      opt_seq::default_instance_,
      opt_seq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_seq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_seq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(opt_seq));
  hit_seq_descriptor_ = file->message_type(20);
  static const int hit_seq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_seq, time_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_seq, hit_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_seq, seqs_),
  };
  hit_seq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hit_seq_descriptor_,
      hit_seq::default_instance_,
      hit_seq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_seq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_seq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hit_seq));
  opt_seqs_descriptor_ = file->message_type(21);
  static const int opt_seqs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_seqs, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_seqs, seqs_),
  };
  opt_seqs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      opt_seqs_descriptor_,
      opt_seqs::default_instance_,
      opt_seqs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_seqs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(opt_seqs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(opt_seqs));
  battle_hero_info_descriptor_ = file->message_type(22);
  static const int battle_hero_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_hero_info, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_hero_info, base_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_hero_info, skill_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_hero_info, rd_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_hero_info, total_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_hero_info, formation_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_hero_info, create_type_),
  };
  battle_hero_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_hero_info_descriptor_,
      battle_hero_info::default_instance_,
      battle_hero_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_hero_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_hero_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_hero_info));
  battle_player_base_info_descriptor_ = file->message_type(23);
  static const int battle_player_base_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_player_base_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_player_base_info, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_player_base_info, level_),
  };
  battle_player_base_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_player_base_info_descriptor_,
      battle_player_base_info::default_instance_,
      battle_player_base_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_player_base_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_player_base_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_player_base_info));
  battle_player_info_descriptor_ = file->message_type(24);
  static const int battle_player_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_player_info, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_player_info, base_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_player_info, skill_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_player_info, rd_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_player_info, formation_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_player_info, total_attr_),
  };
  battle_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_player_info_descriptor_,
      battle_player_info::default_instance_,
      battle_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_player_info));
  battle_role_info_descriptor_ = file->message_type(25);
  static const int battle_role_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_role_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_role_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_role_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_role_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_role_info, heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_role_info, gsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_role_info, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_role_info, gtid_),
  };
  battle_role_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_role_info_descriptor_,
      battle_role_info::default_instance_,
      battle_role_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_role_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_role_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_role_info));
  battle_camp_info_descriptor_ = file->message_type(26);
  static const int battle_camp_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_camp_info, roles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_camp_info, init_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_camp_info, camp_),
  };
  battle_camp_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_camp_info_descriptor_,
      battle_camp_info::default_instance_,
      battle_camp_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_camp_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_camp_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_camp_info));
  pvp_battle_init_data_descriptor_ = file->message_type(27);
  static const int pvp_battle_init_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_battle_init_data, camps_),
  };
  pvp_battle_init_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pvp_battle_init_data_descriptor_,
      pvp_battle_init_data::default_instance_,
      pvp_battle_init_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_battle_init_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvp_battle_init_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pvp_battle_init_data));
  battle_end_data_descriptor_ = file->message_type(28);
  static const int battle_end_data_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_data, battle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_data, is_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_data, opts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_data, module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_data, formation_type_),
  };
  battle_end_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_end_data_descriptor_,
      battle_end_data::default_instance_,
      battle_end_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_end_data));
  pve_check_battle_init_data_descriptor_ = file->message_type(29);
  static const int pve_check_battle_init_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pve_check_battle_init_data, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pve_check_battle_init_data, gs_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pve_check_battle_init_data, battle_end_info_),
  };
  pve_check_battle_init_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pve_check_battle_init_data_descriptor_,
      pve_check_battle_init_data::default_instance_,
      pve_check_battle_init_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pve_check_battle_init_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pve_check_battle_init_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pve_check_battle_init_data));
  create_battle_data_descriptor_ = file->message_type(30);
  static const int create_battle_data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_battle_data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_battle_data, combat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_battle_data, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_battle_data, pvp_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_battle_data, pve_check_data_),
  };
  create_battle_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      create_battle_data_descriptor_,
      create_battle_data::default_instance_,
      create_battle_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_battle_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_battle_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(create_battle_data));
  running_entity_descriptor_ = file->message_type(31);
  static const int running_entity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(running_entity, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(running_entity, position_),
  };
  running_entity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      running_entity_descriptor_,
      running_entity::default_instance_,
      running_entity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(running_entity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(running_entity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(running_entity));
  running_queue_descriptor_ = file->message_type(32);
  static const int running_queue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(running_queue, lenth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(running_queue, enities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(running_queue, wait_enities_),
  };
  running_queue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      running_queue_descriptor_,
      running_queue::default_instance_,
      running_queue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(running_queue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(running_queue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(running_queue));
  client_hero_info_descriptor_ = file->message_type(33);
  static const int client_hero_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_hero_info, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_hero_info, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_hero_info, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_hero_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_hero_info, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_hero_info, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_hero_info, name_),
  };
  client_hero_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_hero_info_descriptor_,
      client_hero_info::default_instance_,
      client_hero_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_hero_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_hero_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_hero_info));
  client_battle_player_info_descriptor_ = file->message_type(34);
  static const int client_battle_player_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_battle_player_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_battle_player_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_battle_player_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_battle_player_info, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_battle_player_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_battle_player_info, heroes_),
  };
  client_battle_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_battle_player_info_descriptor_,
      client_battle_player_info::default_instance_,
      client_battle_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_battle_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_battle_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_battle_player_info));
  client_pvp_battle_camp_data_descriptor_ = file->message_type(35);
  static const int client_pvp_battle_camp_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_pvp_battle_camp_data, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_pvp_battle_camp_data, init_power_),
  };
  client_pvp_battle_camp_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_pvp_battle_camp_data_descriptor_,
      client_pvp_battle_camp_data::default_instance_,
      client_pvp_battle_camp_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_pvp_battle_camp_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_pvp_battle_camp_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_pvp_battle_camp_data));
  client_pvp_battle_data_descriptor_ = file->message_type(36);
  static const int client_pvp_battle_data_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_pvp_battle_data, camps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_pvp_battle_data, running_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_pvp_battle_data, round_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_pvp_battle_data, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_pvp_battle_data, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_pvp_battle_data, seed_count_),
  };
  client_pvp_battle_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_pvp_battle_data_descriptor_,
      client_pvp_battle_data::default_instance_,
      client_pvp_battle_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_pvp_battle_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_pvp_battle_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_pvp_battle_data));
  client_battle_data_descriptor_ = file->message_type(37);
  static const int client_battle_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_battle_data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_battle_data, pvp_data_),
  };
  client_battle_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_battle_data_descriptor_,
      client_battle_data::default_instance_,
      client_battle_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_battle_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_battle_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_battle_data));
  battle_check_opt_data_descriptor_ = file->message_type(38);
  static const int battle_check_opt_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_check_opt_data, round_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_check_opt_data, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_check_opt_data, data_),
  };
  battle_check_opt_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_check_opt_data_descriptor_,
      battle_check_opt_data::default_instance_,
      battle_check_opt_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_check_opt_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_check_opt_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_check_opt_data));
  office_end_info_descriptor_ = file->message_type(39);
  static const int office_end_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(office_end_info, round_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(office_end_info, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(office_end_info, data_),
  };
  office_end_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      office_end_info_descriptor_,
      office_end_info::default_instance_,
      office_end_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(office_end_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(office_end_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(office_end_info));
  battle_replay_round_info_descriptor_ = file->message_type(40);
  static const int battle_replay_round_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_round_info, round_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_round_info, opts_),
  };
  battle_replay_round_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_replay_round_info_descriptor_,
      battle_replay_round_info::default_instance_,
      battle_replay_round_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_round_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_round_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_replay_round_info));
  battle_replay_turn_info_descriptor_ = file->message_type(41);
  static const int battle_replay_turn_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_turn_info, turn_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_turn_info, init_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_turn_info, opts_),
  };
  battle_replay_turn_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_replay_turn_info_descriptor_,
      battle_replay_turn_info::default_instance_,
      battle_replay_turn_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_turn_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_turn_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_replay_turn_info));
  battle_replay_info_descriptor_ = file->message_type(42);
  static const int battle_replay_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_info, combat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_info, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_info, winner_camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_info, opts_),
  };
  battle_replay_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_replay_info_descriptor_,
      battle_replay_info::default_instance_,
      battle_replay_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_replay_info));
  lsg_position_info_descriptor_ = file->message_type(43);
  static const int lsg_position_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lsg_position_info, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lsg_position_info, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lsg_position_info, position_name_),
  };
  lsg_position_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lsg_position_info_descriptor_,
      lsg_position_info::default_instance_,
      lsg_position_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lsg_position_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lsg_position_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lsg_position_info));
  comment_info_descriptor_ = file->message_type(44);
  static const int comment_info_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comment_info, comment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comment_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comment_info, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comment_info, role_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comment_info, role_border_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comment_info, role_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comment_info, to_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comment_info, to_role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comment_info, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comment_info, time_),
  };
  comment_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      comment_info_descriptor_,
      comment_info::default_instance_,
      comment_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comment_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comment_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(comment_info));
  comment_all_descriptor_ = file->message_type(45);
  static const int comment_all_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comment_all, comment_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comment_all, index_),
  };
  comment_all_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      comment_all_descriptor_,
      comment_all::default_instance_,
      comment_all_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comment_all, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comment_all, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(comment_all));
  date_info_descriptor_ = file->message_type(46);
  static const int date_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(date_info, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(date_info, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(date_info, day_),
  };
  date_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      date_info_descriptor_,
      date_info::default_instance_,
      date_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(date_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(date_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(date_info));
  show_player_base_descriptor_ = file->message_type(47);
  static const int show_player_base_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, like_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, partner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, partner_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, office_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, fimily_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, fimily_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, liked_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, border_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, star_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, popularity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, charm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, fight_value_),
  };
  show_player_base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      show_player_base_descriptor_,
      show_player_base::default_instance_,
      show_player_base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(show_player_base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(show_player_base));
  ECrossServerType_descriptor_ = file->enum_type(0);
  EBattleType_descriptor_ = file->enum_type(1);
  EHeroFormationType_descriptor_ = file->enum_type(2);
  EObjType_descriptor_ = file->enum_type(3);
  ECampType_descriptor_ = file->enum_type(4);
  EPlayerType_descriptor_ = file->enum_type(5);
  ERoundOP_descriptor_ = file->enum_type(6);
  ERoundDataType_descriptor_ = file->enum_type(7);
  EBuffDataType_descriptor_ = file->enum_type(8);
  EStateDataType_descriptor_ = file->enum_type(9);
  EBattleTargetType_descriptor_ = file->enum_type(10);
  EDamageType_descriptor_ = file->enum_type(11);
  EBuffType_descriptor_ = file->enum_type(12);
  EBuffTriggerType_descriptor_ = file->enum_type(13);
  EBuffReasonType_descriptor_ = file->enum_type(14);
  EBuffEndType_descriptor_ = file->enum_type(15);
  EStateType_descriptor_ = file->enum_type(16);
  EGetValueType_descriptor_ = file->enum_type(17);
  EDispelBuffType_descriptor_ = file->enum_type(18);
  EMarkEffectType_descriptor_ = file->enum_type(19);
  ESeqOptType_descriptor_ = file->enum_type(20);
  EOptSeqTimeLine_descriptor_ = file->enum_type(21);
  ETriggerConditionClass_descriptor_ = file->enum_type(22);
  ETriggerConditionAttrType_descriptor_ = file->enum_type(23);
  EBuffEffectType_descriptor_ = file->enum_type(24);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cm_5fbattletype_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reward_item_descriptor_, &reward_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_reward_descriptor_, &battle_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    round_op_skill_descriptor_, &round_op_skill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    round_op_param_descriptor_, &round_op_param::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    damage_data_descriptor_, &damage_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    obj_state_descriptor_, &obj_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    round_skill_data_damage_descriptor_, &round_skill_data_damage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    round_skill_data_cure_descriptor_, &round_skill_data_cure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    round_buff_data_descriptor_, &round_buff_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    round_state_data_descriptor_, &round_state_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    round_data_descriptor_, &round_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    seq_useskill_descriptor_, &seq_useskill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    seq_buff_descriptor_, &seq_buff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    seq_state_descriptor_, &seq_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    seq_damage_descriptor_, &seq_damage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    seq_relive_descriptor_, &seq_relive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    seq_attr_descriptor_, &seq_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    seq_extra_action_descriptor_, &seq_extra_action::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    seq_sp_descriptor_, &seq_sp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    opt_seq_descriptor_, &opt_seq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hit_seq_descriptor_, &hit_seq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    opt_seqs_descriptor_, &opt_seqs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_hero_info_descriptor_, &battle_hero_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_player_base_info_descriptor_, &battle_player_base_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_player_info_descriptor_, &battle_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_role_info_descriptor_, &battle_role_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_camp_info_descriptor_, &battle_camp_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pvp_battle_init_data_descriptor_, &pvp_battle_init_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_end_data_descriptor_, &battle_end_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pve_check_battle_init_data_descriptor_, &pve_check_battle_init_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    create_battle_data_descriptor_, &create_battle_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    running_entity_descriptor_, &running_entity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    running_queue_descriptor_, &running_queue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_hero_info_descriptor_, &client_hero_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_battle_player_info_descriptor_, &client_battle_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_pvp_battle_camp_data_descriptor_, &client_pvp_battle_camp_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_pvp_battle_data_descriptor_, &client_pvp_battle_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_battle_data_descriptor_, &client_battle_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_check_opt_data_descriptor_, &battle_check_opt_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    office_end_info_descriptor_, &office_end_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_replay_round_info_descriptor_, &battle_replay_round_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_replay_turn_info_descriptor_, &battle_replay_turn_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_replay_info_descriptor_, &battle_replay_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lsg_position_info_descriptor_, &lsg_position_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    comment_info_descriptor_, &comment_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    comment_all_descriptor_, &comment_all::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    date_info_descriptor_, &date_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    show_player_base_descriptor_, &show_player_base::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cm_5fbattletype_2eproto() {
  delete reward_item::default_instance_;
  delete reward_item_reflection_;
  delete battle_reward::default_instance_;
  delete battle_reward_reflection_;
  delete round_op_skill::default_instance_;
  delete round_op_skill_reflection_;
  delete round_op_param::default_instance_;
  delete round_op_param_reflection_;
  delete damage_data::default_instance_;
  delete damage_data_reflection_;
  delete obj_state::default_instance_;
  delete obj_state_reflection_;
  delete round_skill_data_damage::default_instance_;
  delete round_skill_data_damage_reflection_;
  delete round_skill_data_cure::default_instance_;
  delete round_skill_data_cure_reflection_;
  delete round_buff_data::default_instance_;
  delete round_buff_data_reflection_;
  delete round_state_data::default_instance_;
  delete round_state_data_reflection_;
  delete round_data::default_instance_;
  delete round_data_reflection_;
  delete seq_useskill::default_instance_;
  delete seq_useskill_reflection_;
  delete seq_buff::default_instance_;
  delete seq_buff_reflection_;
  delete seq_state::default_instance_;
  delete seq_state_reflection_;
  delete seq_damage::default_instance_;
  delete seq_damage_reflection_;
  delete seq_relive::default_instance_;
  delete seq_relive_reflection_;
  delete seq_attr::default_instance_;
  delete seq_attr_reflection_;
  delete seq_extra_action::default_instance_;
  delete seq_extra_action_reflection_;
  delete seq_sp::default_instance_;
  delete seq_sp_reflection_;
  delete opt_seq::default_instance_;
  delete opt_seq_reflection_;
  delete hit_seq::default_instance_;
  delete hit_seq_reflection_;
  delete opt_seqs::default_instance_;
  delete opt_seqs_reflection_;
  delete battle_hero_info::default_instance_;
  delete battle_hero_info_reflection_;
  delete battle_player_base_info::default_instance_;
  delete battle_player_base_info_reflection_;
  delete battle_player_info::default_instance_;
  delete battle_player_info_reflection_;
  delete battle_role_info::default_instance_;
  delete battle_role_info_reflection_;
  delete battle_camp_info::default_instance_;
  delete battle_camp_info_reflection_;
  delete pvp_battle_init_data::default_instance_;
  delete pvp_battle_init_data_reflection_;
  delete battle_end_data::default_instance_;
  delete battle_end_data_reflection_;
  delete pve_check_battle_init_data::default_instance_;
  delete pve_check_battle_init_data_reflection_;
  delete create_battle_data::default_instance_;
  delete create_battle_data_reflection_;
  delete running_entity::default_instance_;
  delete running_entity_reflection_;
  delete running_queue::default_instance_;
  delete running_queue_reflection_;
  delete client_hero_info::default_instance_;
  delete client_hero_info_reflection_;
  delete client_battle_player_info::default_instance_;
  delete client_battle_player_info_reflection_;
  delete client_pvp_battle_camp_data::default_instance_;
  delete client_pvp_battle_camp_data_reflection_;
  delete client_pvp_battle_data::default_instance_;
  delete client_pvp_battle_data_reflection_;
  delete client_battle_data::default_instance_;
  delete client_battle_data_reflection_;
  delete battle_check_opt_data::default_instance_;
  delete battle_check_opt_data_reflection_;
  delete office_end_info::default_instance_;
  delete office_end_info_reflection_;
  delete battle_replay_round_info::default_instance_;
  delete battle_replay_round_info_reflection_;
  delete battle_replay_turn_info::default_instance_;
  delete battle_replay_turn_info_reflection_;
  delete battle_replay_info::default_instance_;
  delete battle_replay_info_reflection_;
  delete lsg_position_info::default_instance_;
  delete lsg_position_info_reflection_;
  delete comment_info::default_instance_;
  delete comment_info_reflection_;
  delete comment_all::default_instance_;
  delete comment_all_reflection_;
  delete date_info::default_instance_;
  delete date_info_reflection_;
  delete show_player_base::default_instance_;
  delete show_player_base_reflection_;
}

void protobuf_AddDesc_cm_5fbattletype_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SProtoSpace::protobuf_AddDesc_cm_5froletype_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023cm_battletype.proto\022\013SProtoSpace\032\021cm_r"
    "oletype.proto\"6\n\013reward_item\022\013\n\003uid\030\001 \001("
    "\003\022\013\n\003tid\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\"|\n\rbattle_"
    "reward\022\014\n\004gold\030\001 \001(\005\022\013\n\003exp\030\002 \001(\005\022\020\n\010her"
    "o_exp\030\003 \001(\005\022\025\n\rview_hero_exp\030\004 \001(\005\022\'\n\005it"
    "ems\030\005 \003(\0132\030.SProtoSpace.reward_item\"E\n\016r"
    "ound_op_skill\022\016\n\006obj_id\030\001 \001(\004\022\021\n\ttarget_"
    "id\030\002 \001(\004\022\020\n\010skill_id\030\003 \001(\r\"a\n\016round_op_p"
    "aram\022#\n\004type\030\001 \001(\0162\025.SProtoSpace.ERoundO"
    "P\022*\n\005skill\030\002 \001(\0132\033.SProtoSpace.round_op_"
    "skill\"K\n\013damage_data\022\016\n\006obj_id\030\001 \002(\r\022\016\n\006"
    "damage\030\002 \002(\r\022\n\n\002hp\030\003 \002(\r\022\020\n\010critical\030\004 \002"
    "(\010\":\n\tobj_state\022\016\n\006obj_id\030\001 \002(\004\022\021\n\tbuff_"
    "list\030\002 \003(\r\022\n\n\002hp\030\003 \002(\005\"|\n\027round_skill_da"
    "ta_damage\022\016\n\006obj_id\030\001 \002(\004\022\021\n\ttarget_id\030\002"
    " \002(\004\022\020\n\010skill_id\030\003 \002(\r\022\016\n\006damage\030\004 \002(\r\022\n"
    "\n\002hp\030\005 \002(\r\022\020\n\010critical\030\006 \002(\010\"z\n\025round_sk"
    "ill_data_cure\022\016\n\006obj_id\030\001 \002(\004\022\021\n\ttarget_"
    "id\030\002 \002(\004\022\020\n\010skill_id\030\003 \002(\r\022\016\n\006add_hp\030\004 \002"
    "(\r\022\n\n\002hp\030\005 \002(\r\022\020\n\010critical\030\006 \002(\010\"G\n\017roun"
    "d_buff_data\022\020\n\010buff_tid\030\001 \001(\r\022\020\n\010lasttim"
    "e\030\002 \001(\005\022\020\n\010buff_uid\030\003 \001(\r\"&\n\020round_state"
    "_data\022\022\n\nstate_flag\030\001 \002(\r\"\265\001\n\nround_data"
    "\022\016\n\006obj_id\030\001 \001(\004\022/\n\tbuff_data\030\002 \003(\0132\034.SP"
    "rotoSpace.round_buff_data\0221\n\nstate_data\030"
    "\003 \001(\0132\035.SProtoSpace.round_state_data\022\n\n\002"
    "hp\030\004 \001(\005\022\014\n\004camp\030\005 \001(\005\022\r\n\005maxhp\030\006 \001(\005\022\n\n"
    "\002sp\030\007 \001(\005\"D\n\014seq_useskill\022\017\n\007cast_id\030\001 \001"
    "(\004\022\021\n\ttarget_id\030\002 \001(\004\022\020\n\010skill_id\030\003 \001(\r\""
    "f\n\010seq_buff\022\017\n\007cast_id\030\001 \001(\004\022\021\n\ttarget_i"
    "d\030\002 \001(\004\022\020\n\010buff_uid\030\003 \001(\r\022\020\n\010buff_tid\030\004 "
    "\001(\r\022\022\n\nlast_round\030\005 \001(\r\"D\n\tseq_state\022\017\n\007"
    "cast_id\030\001 \001(\004\022\021\n\ttarget_id\030\002 \001(\004\022\023\n\013stat"
    "e_index\030\003 \001(\r\"\201\001\n\nseq_damage\022\017\n\007cast_id\030"
    "\001 \001(\004\022\021\n\ttarget_id\030\002 \001(\004\022\r\n\005dodge\030\003 \001(\010\022"
    "\016\n\006damage\030\004 \001(\r\022\n\n\002hp\030\005 \001(\r\022\020\n\010critical\030"
    "\006 \001(\010\022\022\n\007buff_id\030\007 \001(\r:\0010\"N\n\nseq_relive\022"
    "\017\n\007cast_id\030\001 \001(\004\022\021\n\ttarget_id\030\002 \001(\004\022\020\n\010s"
    "kill_id\030\003 \001(\r\022\n\n\002hp\030\004 \001(\r\"K\n\010seq_attr\022\017\n"
    "\007cast_id\030\001 \001(\004\022\014\n\004attr\030\002 \001(\r\022\023\n\013change_a"
    "ttr\030\003 \001(\005\022\013\n\003val\030\004 \001(\005\"H\n\020seq_extra_acti"
    "on\022\017\n\007cast_id\030\001 \001(\004\022\021\n\ttarget_id\030\002 \001(\004\022\020"
    "\n\010skill_id\030\003 \001(\r\"H\n\006seq_sp\022\017\n\007cast_id\030\001 "
    "\001(\004\022\021\n\tchange_sp\030\002 \001(\r\022\n\n\002sp\030\003 \001(\r\022\016\n\006ma"
    "x_sp\030\004 \001(\r\"\255\002\n\007opt_seq\022*\n\010opt_type\030\001 \001(\016"
    "2\030.SProtoSpace.ESeqOptType\022#\n\004buff\030\002 \001(\013"
    "2\025.SProtoSpace.seq_buff\022%\n\005state\030\003 \001(\0132\026"
    ".SProtoSpace.seq_state\022\'\n\006damage\030\004 \001(\0132\027"
    ".SProtoSpace.seq_damage\022\'\n\006relive\030\005 \001(\0132"
    "\027.SProtoSpace.seq_relive\022#\n\004attr\030\006 \001(\0132\025"
    ".SProtoSpace.seq_attr\0223\n\014extra_action\030\007 "
    "\001(\0132\035.SProtoSpace.seq_extra_action\"q\n\007hi"
    "t_seq\022/\n\ttime_type\030\001 \001(\0162\034.SProtoSpace.E"
    "OptSeqTimeLine\022\021\n\thit_index\030\002 \001(\r\022\"\n\004seq"
    "s\030\003 \003(\0132\024.SProtoSpace.opt_seq\"X\n\010opt_seq"
    "s\022(\n\003opt\030\001 \001(\0132\033.SProtoSpace.round_op_pa"
    "ram\022\"\n\004seqs\030\002 \003(\0132\024.SProtoSpace.hit_seq\""
    "\254\002\n\020battle_hero_info\022)\n\004base\030\001 \001(\0132\033.SPr"
    "otoSpace.hero_base_info\022/\n\tbase_attr\030\002 \003"
    "(\0132\034.SProtoSpace.hero_attr_value\0222\n\nskil"
    "l_data\030\003 \003(\0132\036.SProtoSpace.client_skill_"
    "data\022(\n\007rd_data\030\004 \001(\0132\027.SProtoSpace.roun"
    "d_data\0220\n\ntotal_attr\030\005 \003(\0132\034.SProtoSpace"
    ".hero_attr_value\022\027\n\017formation_index\030\006 \001("
    "\005\022\023\n\013create_type\030\007 \001(\005\"I\n\027battle_player_"
    "base_info\022\n\n\002id\030\001 \001(\004\022\023\n\013template_id\030\002 \001"
    "(\r\022\r\n\005level\030\003 \001(\005\"\242\002\n\022battle_player_info"
    "\0222\n\004base\030\001 \001(\0132$.SProtoSpace.battle_play"
    "er_base_info\022/\n\tbase_attr\030\002 \003(\0132\034.SProto"
    "Space.hero_attr_value\0222\n\nskill_data\030\003 \003("
    "\0132\036.SProtoSpace.client_skill_data\022(\n\007rd_"
    "data\030\004 \001(\0132\027.SProtoSpace.round_data\022\027\n\017f"
    "ormation_index\030\005 \001(\005\0220\n\ntotal_attr\030\006 \003(\013"
    "2\034.SProtoSpace.hero_attr_value\"\337\001\n\020battl"
    "e_role_info\022&\n\004type\030\007 \001(\0162\030.SProtoSpace."
    "EPlayerType\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\r\n"
    "\005level\030\003 \001(\005\022-\n\006heroes\030\004 \003(\0132\035.SProtoSpa"
    "ce.battle_hero_info\022\014\n\004gsid\030\005 \001(\004\022/\n\006pla"
    "yer\030\006 \001(\0132\037.SProtoSpace.battle_player_in"
    "fo\022\014\n\004gtid\030\010 \001(\004\"b\n\020battle_camp_info\022,\n\005"
    "roles\030\001 \003(\0132\035.SProtoSpace.battle_role_in"
    "fo\022\022\n\ninit_power\030\002 \001(\005\022\014\n\004camp\030\003 \001(\005\"D\n\024"
    "pvp_battle_init_data\022,\n\005camps\030\001 \003(\0132\035.SP"
    "rotoSpace.battle_camp_info\"\300\001\n\017battle_en"
    "d_data\022\014\n\004type\030\001 \001(\005\022\021\n\tbattle_id\030\002 \001(\005\022"
    "\016\n\006is_win\030\003 \001(\010\0220\n\004opts\030\004 \003(\0132\".SProtoSp"
    "ace.battle_check_opt_data\022\021\n\tmodule_id\030\005"
    " \001(\005\0227\n\016formation_type\030\006 \001(\0162\037.SProtoSpa"
    "ce.EHeroFormationType\"s\n\032pve_check_battl"
    "e_init_data\022\017\n\007role_id\030\001 \001(\004\022\r\n\005gs_id\030\002 "
    "\001(\004\0225\n\017battle_end_info\030\003 \001(\0132\034.SProtoSpa"
    "ce.battle_end_data\"\323\001\n\022create_battle_dat"
    "a\022&\n\004type\030\001 \001(\0162\030.SProtoSpace.EBattleTyp"
    "e\022\021\n\tcombat_id\030\002 \001(\r\022\014\n\004seed\030\003 \001(\r\0223\n\010pv"
    "p_data\030\004 \001(\0132!.SProtoSpace.pvp_battle_in"
    "it_data\022\?\n\016pve_check_data\030\005 \001(\0132\'.SProto"
    "Space.pve_check_battle_init_data\"1\n\016runn"
    "ing_entity\022\r\n\005objid\030\001 \001(\004\022\020\n\010position\030\002 "
    "\001(\005\"\177\n\rrunning_queue\022\r\n\005lenth\030\001 \001(\005\022,\n\007e"
    "nities\030\002 \003(\0132\033.SProtoSpace.running_entit"
    "y\0221\n\014wait_enities\030\003 \003(\0132\033.SProtoSpace.ru"
    "nning_entity\"\200\001\n\020client_hero_info\022\014\n\004uui"
    "d\030\001 \002(\004\022\r\n\005objid\030\002 \002(\r\022\023\n\013template_id\030\003 "
    "\002(\r\022\r\n\005level\030\004 \002(\005\022\014\n\004star\030\005 \002(\005\022\017\n\007qual"
    "ity\030\006 \001(\005\022\014\n\004name\030\007 \001(\t\"\251\001\n\031client_battl"
    "e_player_info\022\n\n\002id\030\001 \002(\004\022\014\n\004name\030\002 \002(\t\022"
    "\r\n\005level\030\003 \002(\005\022\014\n\004camp\030\004 \002(\005\022&\n\004type\030\005 \002"
    "(\0162\030.SProtoSpace.EPlayerType\022-\n\006heroes\030\006"
    " \003(\0132\035.SProtoSpace.client_hero_info\"j\n\033c"
    "lient_pvp_battle_camp_data\0227\n\007players\030\001 "
    "\003(\0132&.SProtoSpace.client_battle_player_i"
    "nfo\022\022\n\ninit_power\030\002 \002(\005\"\331\001\n\026client_pvp_b"
    "attle_data\022,\n\005camps\030\001 \003(\0132\035.SProtoSpace."
    "battle_camp_info\0220\n\014running_data\030\002 \001(\0132\032"
    ".SProtoSpace.running_queue\022\023\n\013round_inde"
    "x\030\003 \001(\005\022(\n\003opt\030\004 \001(\0132\033.SProtoSpace.round"
    "_op_param\022\014\n\004seed\030\005 \001(\r\022\022\n\nseed_count\030\006 "
    "\001(\r\"s\n\022client_battle_data\022&\n\004type\030\001 \002(\0162"
    "\030.SProtoSpace.EBattleType\0225\n\010pvp_data\030\002 "
    "\001(\0132#.SProtoSpace.client_pvp_battle_data"
    "\"}\n\025battle_check_opt_data\022\023\n\013round_index"
    "\030\001 \001(\005\022(\n\003opt\030\002 \001(\0132\033.SProtoSpace.round_"
    "op_param\022%\n\004data\030\003 \003(\0132\027.SProtoSpace.rou"
    "nd_data\"w\n\017office_end_info\022\023\n\013round_inde"
    "x\030\001 \001(\005\022(\n\003opt\030\002 \001(\0132\033.SProtoSpace.round"
    "_op_param\022%\n\004data\030\003 \003(\0132\027.SProtoSpace.ro"
    "und_data\"a\n\030battle_replay_round_info\022\023\n\013"
    "round_index\030\001 \001(\005\0220\n\004opts\030\002 \003(\0132\".SProto"
    "Space.battle_check_opt_data\"\230\001\n\027battle_r"
    "eplay_turn_info\022\022\n\nturn_index\030\001 \001(\005\0224\n\ti"
    "nit_data\030\002 \001(\0132!.SProtoSpace.pvp_battle_"
    "init_data\0223\n\004opts\030\003 \003(\0132%.SProtoSpace.ba"
    "ttle_replay_round_info\"\246\001\n\022battle_replay"
    "_info\022&\n\004type\030\001 \001(\0162\030.SProtoSpace.EBattl"
    "eType\022\021\n\tcombat_id\030\002 \001(\r\022\014\n\004seed\030\003 \001(\r\022\023"
    "\n\013winner_camp\030\004 \001(\005\0222\n\004opts\030\005 \003(\0132$.SPro"
    "toSpace.battle_replay_turn_info\"@\n\021lsg_p"
    "osition_info\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\025\n\rpo"
    "sition_name\030\003 \001(\t\"\307\001\n\014comment_info\022\022\n\nco"
    "mment_id\030\001 \001(\004\022\017\n\007role_id\030\002 \001(\004\022\021\n\trole_"
    "name\030\003 \001(\t\022\020\n\010role_sex\030\004 \001(\005\022\023\n\013role_bor"
    "der\030\005 \001(\005\022\017\n\007role_lv\030\006 \001(\005\022\022\n\nto_role_id"
    "\030\007 \001(\004\022\024\n\014to_role_name\030\010 \001(\t\022\017\n\007comment\030"
    "\t \001(\t\022\014\n\004time\030\n \001(\004\"M\n\013comment_all\022/\n\014co"
    "mment_list\030\001 \003(\0132\031.SProtoSpace.comment_i"
    "nfo\022\r\n\005index\030\002 \001(\005\"A\n\tdate_info\022\022\n\004year\030"
    "\001 \001(\r:\0042000\022\020\n\005month\030\002 \001(\r:\0011\022\016\n\003day\030\003 \001"
    "(\r:\0011\"\275\003\n\020show_player_base\022\014\n\004uuid\030\002 \001(\004"
    "\022\n\n\002lv\030\003 \001(\r\022\014\n\004name\030\004 \001(\t\022\013\n\003sex\030\005 \001(\005\022"
    "\014\n\004like\030\006 \001(\r\022\r\n\005title\030\007 \001(\r\022\022\n\npartner_"
    "id\030\010 \001(\004\022\024\n\014partner_name\030\t \001(\t\022\016\n\006office"
    "\030\n \001(\r\022\021\n\tfimily_id\030\013 \001(\004\022\023\n\013fimily_name"
    "\030\014 \001(\t\022\021\n\tsignature\030\r \001(\t\0220\n\010position\030\016 "
    "\001(\0132\036.SProtoSpace.lsg_position_info\022\022\n\nl"
    "iked_list\030\020 \003(\004\022\016\n\006border\030\022 \001(\r\022(\n\010birth"
    "day\030\023 \001(\0132\026.SProtoSpace.date_info\022\024\n\tsta"
    "r_sign\030\024 \001(\r:\0011\022\025\n\npopularity\030\025 \001(\r:\0010\022\020"
    "\n\005charm\030\026 \001(\r:\0010\022\016\n\006labels\030\027 \003(\r\022\023\n\013figh"
    "t_value\030\030 \001(\005*[\n\020ECrossServerType\022\026\n\022BAC"
    "K_NORMAL_SERVER\020\000\022\026\n\022CROSS_LOCAL_SERVER\020"
    "\001\022\027\n\023CROSS_GLOBAL_SERVER\020\002*\354\002\n\013EBattleTy"
    "pe\022\023\n\017BATTLE_TYPE_PVP\020\001\022\034\n\030BATTLE_TYPE_P"
    "VE_DISCOVER\020\002\022\035\n\031BATTLE_TYPE_PVE_CHALLEN"
    "GE\020\003\022\031\n\025BATTLE_TYPE_PVE_CHECK\020\004\022\025\n\021BATTL"
    "E_TYPE_OPERA\020\005\022\023\n\017BATTLE_TYPE_JJC\020\006\022\026\n\022B"
    "ATTLE_TYPE_OFFICE\020\007\022\032\n\026BATTLE_TYPE_OFFIC"
    "E_NPC\020\010\022 \n\034BATTLE_TYPE_OFFICE_CHALLENGE\020"
    "\t\022\023\n\017BATTLE_TYPE_PVE\020\n\022\025\n\021BATTLE_TYPE_TO"
    "WER\020\013\022\023\n\017BATTLE_TYPE_ADV\020\014\022\025\n\021BATTLE_TYP"
    "E_ROYAL\020\r\022\026\n\022BATTLE_TYPE_CUSTOM\020\016*\237\001\n\022EH"
    "eroFormationType\022\026\n\022HERO_FORMATION_TMP\020\001"
    "\022\031\n\025HERO_FORMATION_COMMON\020\002\022\030\n\024HERO_FORM"
    "ATION_OPERA\020\003\022\036\n\032HERO_FORMATION_OFFICAL_"
    "NPC\020\004\022\034\n\030HERO_FORMATION_BASE_POOL\020\t*p\n\010E"
    "ObjType\022\021\n\rOBJ_TYPE_NONE\020\000\022\023\n\017OBJ_TYPE_P"
    "LAYER\020\001\022\021\n\rOBJ_TYPE_HERO\020\002\022\024\n\020OBJ_TYPE_M"
    "ONSTER\020\003\022\023\n\017OBJ_TYPE_SUMMON\020\004*-\n\tECampTy"
    "pe\022\017\n\013CAMP_TYPE_0\020\000\022\017\n\013CAMP_TYPE_1\020\001*P\n\013"
    "EPlayerType\022\024\n\020PLAYER_TYPE_NONE\020\000\022\026\n\022PLA"
    "YER_TYPE_PLAYER\020\001\022\023\n\017PLAYER_TYPE_NPC\020\002*#"
    "\n\010ERoundOP\022\027\n\023ROUND_OP_TYPE_SKILL\020\001*\241\001\n\016"
    "ERoundDataType\022\030\n\024ROUND_DATA_TYPE_NONE\020\000"
    "\022 \n\034ROUND_DATA_TYPE_SKILL_DAMAGE\020\001\022\036\n\032RO"
    "UND_DATA_TYPE_SKILL_CURE\020\002\022\030\n\024ROUND_DATA"
    "_TYPE_BUFF\020\003\022\031\n\025ROUND_DATA_TYPE_STATE\020\004*"
    "w\n\rEBuffDataType\022\027\n\023BUFF_DATA_TYPE_NONE\020"
    "\000\022\026\n\022BUFF_DATA_TYPE_ADD\020\001\022\031\n\025BUFF_DATA_T"
    "YPE_REMOVE\020\002\022\032\n\026BUFF_DATA_TYPE_REFRESH\020\003"
    "*_\n\016EStateDataType\022\030\n\024STATE_DATA_TYPE_NO"
    "NE\020\000\022\027\n\023STATE_DATA_TYPE_ADD\020\001\022\032\n\026STATE_D"
    "ATA_TYPE_REMOVE\020\002*\203\n\n\021EBattleTargetType\022"
    "\034\n\030BATTLE_TARGET_TYPE_CLICK\020\000\022\032\n\026BATTLE_"
    "TARGET_TYPE_ALL\020\001\022\033\n\027BATTLE_TARGET_TYPE_"
    "SELF\020\004\022#\n\037BATTLE_TARGET_TYPE_FRIEND_OTHE"
    "R\020\005\022\"\n\036BATTLE_TARGET_TYPE_ENEMY_OTHER\020\006\022"
    " \n\034BATTLE_TARGET_TYPE_OTHER_ALL\020\007\022\"\n\036BAT"
    "TLE_TARGET_TYPE_FRIEND_DEAD\020\010\022$\n BATTLE_"
    "TARGET_TYPE_FRIEND_SUMMON\020\t\022)\n%BATTLE_TA"
    "RGET_TYPE_ENEMY_FRONT_SINGLE\020\n\022(\n$BATTLE"
    "_TARGET_TYPE_ENEMY_BACK_SINGLE\020\013\022)\n%BATT"
    "LE_TARGET_TYPE_ENEMY_FRONT_AROUNT\020\014\022(\n$B"
    "ATTLE_TARGET_TYPE_ENEMY_BACK_AROUNT\020\r\022\"\n"
    "\036BATTLE_TARGET_TYPE_ENEMY_FRONT\020\016\022!\n\035BAT"
    "TLE_TARGET_TYPE_ENEMY_BACK\020\017\022#\n\037BATTLE_T"
    "ARGET_TYPE_ENEMY_COLUMN\020\020\022 \n\034BATTLE_TARG"
    "ET_TYPE_ENEMY_ALL\020\021\022*\n&BATTLE_TARGET_TYP"
    "E_ENEMY_COLUMN_RANDOM\020\022\022\'\n#BATTLE_TARGET"
    "_TYPE_ENEMY_ALL_RANDOM\020\023\022#\n\037BATTLE_TARGE"
    "T_TYPE_ENEMY_MIN_HP\020\024\022#\n\037BATTLE_TARGET_T"
    "YPE_ENEMY_MAX_HP\020\025\022#\n\037BATTLE_TARGET_TYPE"
    "_ENEMY_MAX_SP\020\026\022$\n BATTLE_TARGET_TYPE_EN"
    "EMY_MAX_ATK\020\027\022!\n\035BATTLE_TARGET_TYPE_ENEM"
    "Y_MALE\020\030\022#\n\037BATTLE_TARGET_TYPE_ENEMY_FEM"
    "ALE\020\031\022#\n\037BATTLE_TARGET_TYPE_ENEMY_ATTACK"
    "\020\032\022\"\n\036BATTLE_TARGET_TYPE_SELF_SINGLE\020d\022#"
    "\n\037BATTLE_TARGET_TYPE_FRIEND_FRONT\020e\022\"\n\036B"
    "ATTLE_TARGET_TYPE_FRIEND_BACK\020f\022!\n\035BATTL"
    "E_TARGET_TYPE_FRIEND_ALL\020g\022(\n$BATTLE_TAR"
    "GET_TYPE_FRIEND_ALL_RANDOM\020h\022$\n BATTLE_T"
    "ARGET_TYPE_FRIEND_MIN_HP\020i\022\"\n\036BATTLE_TAR"
    "GET_TYPE_FRIEND_MALE\020j\022$\n BATTLE_TARGET_"
    "TYPE_FRIEND_FEMALE\020k\022)\n%BATTLE_TARGET_TY"
    "PE_FRIEND_SELF_COMBOL\020l*\207\001\n\013EDamageType\022"
    "\024\n\020DAMAGE_TYPE_NONE\020\000\022\026\n\022DAMAGE_TYPE_DAM"
    "AGE\020\001\022\024\n\020DAMAGE_TYPE_CURE\020\002\022\030\n\024DAMAGE_TY"
    "PE_ADD_BUFF\020\003\022\032\n\026DAMAGE_TYPE_CLEAR_BUFF\020"
    "\004*\247\005\n\tEBuffType\022\024\n\020BUFF_TYPE_DAMAGE\020\001\022\031\n"
    "\025BUFF_TYPE_CHANGE_ATTR\020\002\022\023\n\017BUFF_TYPE_ST"
    "ATE\020\003\022\022\n\016BUFF_TYPE_AURA\020\004\022\024\n\020BUFF_TYPE_S"
    "HIELD\020\005\022\030\n\024BUFF_TYPE_ACTION_BAR\020\006\022\032\n\026BUF"
    "F_TYPE_EXTRA_ACTION\020\007\022\027\n\023BUFF_TYPE_USE_S"
    "KILL\020\010\022\031\n\025BUFF_TYPE_DISPEL_BUFF\020\t\022\026\n\022BUF"
    "F_TYPE_ADD_BUFF\020\n\022\027\n\023BUFF_TYPE_HP_CHANGE"
    "\020\013\022\031\n\025BUFF_TYPE_CONVERT_PRO\020\014\022\034\n\030BUFF_TY"
    "PE_DAMAGE_TO_HEAL\020\r\022\037\n\033BUFF_TYPE_SELF_DA"
    "MAGE_SCALE\020\016\022\035\n\031BUFF_TYPE_MULTI_HP_CHANG"
    "E\020\017\022\033\n\027BUFF_TYPE_STATE_TO_ATTR\020\020\022\033\n\027BUFF"
    "_TYPE_STATE_TO_BUFF\020\021\022\024\n\020BUFF_TYPE_SUMMO"
    "N\020\022\022\024\n\020BUFF_TYPE_RELIVE\020\023\022\022\n\016BUFF_TYPE_M"
    "ARK\020\024\022\026\n\022BUFF_TYPE_MARK_ADD\020\025\022\032\n\026BUFF_TY"
    "PE_MARK_TO_BUFF\020\026\022\023\n\017BUFF_TYPE_POWER\020\027\022\036"
    "\n\032BUFF_TYPE_LOSE_HP_TO_SCALE\020\030\022\032\n\026BUFF_T"
    "YPE_SEAL_PASSIVE\020d\022\027\n\023BUFF_TYPE_SEAL_SOU"
    "L\020e*\323\006\n\020EBuffTriggerType\022\032\n\026BUFF_TRIGGER"
    "_TYPE_NONE\020\000\022#\n\037BUFF_TRIGGER_TYPE_ATTACK"
    "_BEFORE\020\001\022\034\n\030BUFF_TRIGGER_TYPE_ATTACK\020\002\022"
    "!\n\035BUFF_TRIGGER_TYPE_ATTACK_CRIT\020\003\022\"\n\036BU"
    "FF_TRIGGER_TYPE_ATTACK_AFTER\020\004\022\037\n\033BUFF_T"
    "RIGGER_TYPE_BE_ATTACK\020\005\022$\n BUFF_TRIGGER_"
    "TYPE_BE_ATTACK_CRIT\020\006\022!\n\035BUFF_TRIGGER_TY"
    "PE_CURE_BEFORE\020\007\022\032\n\026BUFF_TRIGGER_TYPE_CU"
    "RE\020\010\022\037\n\033BUFF_TRIGGER_TYPE_CURE_CRIT\020\t\022 \n"
    "\034BUFF_TRIGGER_TYPE_CURE_AFTER\020\n\022\035\n\031BUFF_"
    "TRIGGER_TYPE_BE_CURE\020\013\022\"\n\036BUFF_TRIGGER_T"
    "YPE_BE_CURE_CRIT\020\014\022\037\n\033BUFF_TRIGGER_TYPE_"
    "ROUND_END\020\r\022!\n\035BUFF_TRIGGER_TYPE_ROUND_S"
    "TART\020\016\022 \n\034BUFF_TRIGGER_TYPE_ACTIVE_END\020\017"
    "\022\"\n\036BUFF_TRIGGER_TYPE_ACTIVE_START\020\020\022\037\n\033"
    "BUFF_TRIGGER_TYPE_SKILL_END\020\021\022!\n\035BUFF_TR"
    "IGGER_TYPE_SKILL_START\020\022\022\032\n\026BUFF_TRIGGER"
    "_TYPE_KILL\020\023\022\032\n\026BUFF_TRIGGER_TYPE_DEAD\020\024"
    "\022\034\n\030BUFF_TRIGGER_TYPE_RELIVE\020\025\022\037\n\033BUFF_T"
    "RIGGER_TYPE_HP_CHANGE\020\026\022\"\n\036BUFF_TRIGGER_"
    "TYPE_BUFF_BREAKUP\020\027\022$\n BUFF_TRIGGER_TYPE"
    "_DEBUFF_BREAKUP\020\030*e\n\017EBuffReasonType\022\032\n\026"
    "BUFF_REASON_TYPE_START\020\000\022\034\n\030BUFF_REASON_"
    "TYPE_TRIGGER\020\001\022\030\n\024BUFF_REASON_TYPE_END\020\002"
    "*s\n\014EBuffEndType\022\030\n\024BUFF_END_TYPE_NORMAL"
    "\020\000\022\026\n\022BUFF_END_TYPE_AURA\020\001\022\030\n\024BUFF_END_T"
    "YPE_DISPEL\020\002\022\027\n\023BUFF_END_TYPE_FORCE\020\003*\341\002"
    "\n\nEStateType\022\023\n\017STATE_TYPE_NONE\020\000\022\025\n\021STA"
    "TE_TYPE_FREEZE\020\001\022\023\n\017STATE_TYPE_STUN\020\002\022\024\n"
    "\020STATE_TYPE_SLEEP\020\003\022\022\n\016STATE_TYPE_HEX\020\004\022"
    "\024\n\020STATE_TYPE_CHARM\020\005\022\030\n\024STATE_TYPE_CONF"
    "USION\020\006\022\026\n\022STATE_TYPE_SILENCE\020\007\022\024\n\020STATE"
    "_TYPE_TAUNT\020\010\022\026\n\022STATE_TYPE_NO_CRIT\020\t\022\026\n"
    "\022STATE_TYPE_NO_CURE\020\n\022\032\n\026STATE_TYPE_IMMU"
    "NE_STUN\020\013\022\035\n\031STATE_TYPE_IMMUNE_SILENCE\020\014"
    "\022\037\n\033STATE_TYPE_IMMUNE_REDUCE_SP\020\r*\313\002\n\rEG"
    "etValueType\022\027\n\023GET_VALUE_TYPE_NONE\020\000\022\035\n\031"
    "GET_VALUE_TYPE_ATTACK_ATK\020\001\022\037\n\033GET_VALUE"
    "_TYPE_ATTACK_CURHP\020\002\022\037\n\033GET_VALUE_TYPE_A"
    "TTACK_MAXHP\020\003\022\035\n\031GET_VALUE_TYPE_ATTACK_D"
    "EF\020\004\022\037\n\033GET_VALUE_TYPE_TARGET_CURHP\020\005\022\037\n"
    "\033GET_VALUE_TYPE_TARGET_MAXHP\020\006\022\035\n\031GET_VA"
    "LUE_TYPE_TARGET_ATK\020\007\022\035\n\031GET_VALUE_TYPE_"
    "TARGET_DEF\020\010\022!\n\035GET_VALUE_TYPE_TARGET_LO"
    "ST_HP\020\t*x\n\017EDispelBuffType\022 \n\034DISPEL_BUF"
    "F_TYPE_EFFECT_TYPE\020\001\022\036\n\032DISPEL_BUFF_TYPE"
    "_BUFF_TYPE\020\002\022#\n\037DISPEL_BUFF_TYPE_BUFF_CO"
    "NFIG_ID\020\003*\201\001\n\017EMarkEffectType\022!\n\035MARK_EF"
    "FECT_TYPE_INCREASE_DMG\020\001\022*\n&MARK_EFFECT_"
    "TYPE_INCREASE_ATTACK_COUNT\020\002\022\037\n\033MARK_EFF"
    "ECT_TYPE_RECOVER_HP\020\003*\267\002\n\013ESeqOptType\022\025\n"
    "\021SEQ_OPT_TYPE_NONE\020\000\022\027\n\023SEQ_OPT_TYPE_DAM"
    "AGE\020\001\022\025\n\021SEQ_OPT_TYPE_CURE\020\002\022\027\n\023SEQ_OPT_"
    "TYPE_RELIVE\020\003\022\034\n\030SEQ_OPT_TYPE_UPDATE_BUF"
    "F\020\004\022\034\n\030SEQ_OPT_TYPE_REMOVE_BUFF\020\005\022\035\n\031SEQ"
    "_OPT_TYPE_UPDATE_STATE\020\006\022\035\n\031SEQ_OPT_TYPE"
    "_REMOVE_STATE\020\007\022\030\n\024SEQ_OPT_TYPE_TRIGGER\020"
    "\010\022\025\n\021SEQ_OPT_TYPE_ATTR\020\t\022\035\n\031SEQ_OPT_TYPE"
    "_EXTRA_ACTION\020\n*\202\002\n\017EOptSeqTimeLine\022\035\n\031S"
    "EQ_TIME_LINE_SKILL_START\020\001\022\035\n\031SEQ_TIME_L"
    "INE_SKILL_USING\020\002\022\033\n\027SEQ_TIME_LINE_SKILL"
    "_END\020\003\022\032\n\026SEQ_TIME_LINE_SHOT_END\020\004\022\034\n\030SE"
    "Q_TIME_LINE_SHOT_START\020\005\022\035\n\031SEQ_TIME_LIN"
    "E_ROUND_START\020\006\022\033\n\027SEQ_TIME_LINE_ROUND_E"
    "ND\020\007\022\036\n\032SEQ_TIME_LINE_EXTRA_ACTION\020\010*^\n\026"
    "ETriggerConditionClass\022 \n\034TRIGGER_CONDIT"
    "ION_CLASS_ATTR\020\001\022\"\n\036TRIGGER_CONDITION_CL"
    "ASS_ATTACK\020\002*\363\002\n\031ETriggerConditionAttrTy"
    "pe\022(\n$TRIGGER_CONDITION_ATTR_TYPE_LESS_P"
    "ER\020\001\022(\n$TRIGGER_CONDITION_ATTR_TYPE_MORE"
    "_PER\020\002\022(\n$TRIGGER_CONDITION_ATTR_TYPE_LO"
    "SE_PER\020\003\022(\n$TRIGGER_CONDITION_ATTR_TYPE_"
    "LESS_VAL\020\004\022(\n$TRIGGER_CONDITION_ATTR_TYP"
    "E_MORE_VAL\020\005\022(\n$TRIGGER_CONDITION_ATTR_T"
    "YPE_LOSE_VAL\020\006\022,\n(TRIGGER_CONDITION_ATTR"
    "_TYPE_LESS_TRIGGER\020\007\022,\n(TRIGGER_CONDITIO"
    "N_ATTR_TYPE_MORE_TRIGGER\020\010*j\n\017EBuffEffec"
    "tType\022\031\n\025BUFF_EFFECT_TYPE_STUN\020\001\022\034\n\030BUFF"
    "_EFFECT_TYPE_SILENCE\020\002\022\036\n\032BUFF_EFFECT_TY"
    "PE_REDUCE_SP\020\003", 12894);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cm_battletype.proto", &protobuf_RegisterTypes);
  reward_item::default_instance_ = new reward_item();
  battle_reward::default_instance_ = new battle_reward();
  round_op_skill::default_instance_ = new round_op_skill();
  round_op_param::default_instance_ = new round_op_param();
  damage_data::default_instance_ = new damage_data();
  obj_state::default_instance_ = new obj_state();
  round_skill_data_damage::default_instance_ = new round_skill_data_damage();
  round_skill_data_cure::default_instance_ = new round_skill_data_cure();
  round_buff_data::default_instance_ = new round_buff_data();
  round_state_data::default_instance_ = new round_state_data();
  round_data::default_instance_ = new round_data();
  seq_useskill::default_instance_ = new seq_useskill();
  seq_buff::default_instance_ = new seq_buff();
  seq_state::default_instance_ = new seq_state();
  seq_damage::default_instance_ = new seq_damage();
  seq_relive::default_instance_ = new seq_relive();
  seq_attr::default_instance_ = new seq_attr();
  seq_extra_action::default_instance_ = new seq_extra_action();
  seq_sp::default_instance_ = new seq_sp();
  opt_seq::default_instance_ = new opt_seq();
  hit_seq::default_instance_ = new hit_seq();
  opt_seqs::default_instance_ = new opt_seqs();
  battle_hero_info::default_instance_ = new battle_hero_info();
  battle_player_base_info::default_instance_ = new battle_player_base_info();
  battle_player_info::default_instance_ = new battle_player_info();
  battle_role_info::default_instance_ = new battle_role_info();
  battle_camp_info::default_instance_ = new battle_camp_info();
  pvp_battle_init_data::default_instance_ = new pvp_battle_init_data();
  battle_end_data::default_instance_ = new battle_end_data();
  pve_check_battle_init_data::default_instance_ = new pve_check_battle_init_data();
  create_battle_data::default_instance_ = new create_battle_data();
  running_entity::default_instance_ = new running_entity();
  running_queue::default_instance_ = new running_queue();
  client_hero_info::default_instance_ = new client_hero_info();
  client_battle_player_info::default_instance_ = new client_battle_player_info();
  client_pvp_battle_camp_data::default_instance_ = new client_pvp_battle_camp_data();
  client_pvp_battle_data::default_instance_ = new client_pvp_battle_data();
  client_battle_data::default_instance_ = new client_battle_data();
  battle_check_opt_data::default_instance_ = new battle_check_opt_data();
  office_end_info::default_instance_ = new office_end_info();
  battle_replay_round_info::default_instance_ = new battle_replay_round_info();
  battle_replay_turn_info::default_instance_ = new battle_replay_turn_info();
  battle_replay_info::default_instance_ = new battle_replay_info();
  lsg_position_info::default_instance_ = new lsg_position_info();
  comment_info::default_instance_ = new comment_info();
  comment_all::default_instance_ = new comment_all();
  date_info::default_instance_ = new date_info();
  show_player_base::default_instance_ = new show_player_base();
  reward_item::default_instance_->InitAsDefaultInstance();
  battle_reward::default_instance_->InitAsDefaultInstance();
  round_op_skill::default_instance_->InitAsDefaultInstance();
  round_op_param::default_instance_->InitAsDefaultInstance();
  damage_data::default_instance_->InitAsDefaultInstance();
  obj_state::default_instance_->InitAsDefaultInstance();
  round_skill_data_damage::default_instance_->InitAsDefaultInstance();
  round_skill_data_cure::default_instance_->InitAsDefaultInstance();
  round_buff_data::default_instance_->InitAsDefaultInstance();
  round_state_data::default_instance_->InitAsDefaultInstance();
  round_data::default_instance_->InitAsDefaultInstance();
  seq_useskill::default_instance_->InitAsDefaultInstance();
  seq_buff::default_instance_->InitAsDefaultInstance();
  seq_state::default_instance_->InitAsDefaultInstance();
  seq_damage::default_instance_->InitAsDefaultInstance();
  seq_relive::default_instance_->InitAsDefaultInstance();
  seq_attr::default_instance_->InitAsDefaultInstance();
  seq_extra_action::default_instance_->InitAsDefaultInstance();
  seq_sp::default_instance_->InitAsDefaultInstance();
  opt_seq::default_instance_->InitAsDefaultInstance();
  hit_seq::default_instance_->InitAsDefaultInstance();
  opt_seqs::default_instance_->InitAsDefaultInstance();
  battle_hero_info::default_instance_->InitAsDefaultInstance();
  battle_player_base_info::default_instance_->InitAsDefaultInstance();
  battle_player_info::default_instance_->InitAsDefaultInstance();
  battle_role_info::default_instance_->InitAsDefaultInstance();
  battle_camp_info::default_instance_->InitAsDefaultInstance();
  pvp_battle_init_data::default_instance_->InitAsDefaultInstance();
  battle_end_data::default_instance_->InitAsDefaultInstance();
  pve_check_battle_init_data::default_instance_->InitAsDefaultInstance();
  create_battle_data::default_instance_->InitAsDefaultInstance();
  running_entity::default_instance_->InitAsDefaultInstance();
  running_queue::default_instance_->InitAsDefaultInstance();
  client_hero_info::default_instance_->InitAsDefaultInstance();
  client_battle_player_info::default_instance_->InitAsDefaultInstance();
  client_pvp_battle_camp_data::default_instance_->InitAsDefaultInstance();
  client_pvp_battle_data::default_instance_->InitAsDefaultInstance();
  client_battle_data::default_instance_->InitAsDefaultInstance();
  battle_check_opt_data::default_instance_->InitAsDefaultInstance();
  office_end_info::default_instance_->InitAsDefaultInstance();
  battle_replay_round_info::default_instance_->InitAsDefaultInstance();
  battle_replay_turn_info::default_instance_->InitAsDefaultInstance();
  battle_replay_info::default_instance_->InitAsDefaultInstance();
  lsg_position_info::default_instance_->InitAsDefaultInstance();
  comment_info::default_instance_->InitAsDefaultInstance();
  comment_all::default_instance_->InitAsDefaultInstance();
  date_info::default_instance_->InitAsDefaultInstance();
  show_player_base::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cm_5fbattletype_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cm_5fbattletype_2eproto {
  StaticDescriptorInitializer_cm_5fbattletype_2eproto() {
    protobuf_AddDesc_cm_5fbattletype_2eproto();
  }
} static_descriptor_initializer_cm_5fbattletype_2eproto_;
const ::google::protobuf::EnumDescriptor* ECrossServerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECrossServerType_descriptor_;
}
bool ECrossServerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBattleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBattleType_descriptor_;
}
bool EBattleType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EHeroFormationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EHeroFormationType_descriptor_;
}
bool EHeroFormationType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EObjType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EObjType_descriptor_;
}
bool EObjType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECampType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECampType_descriptor_;
}
bool ECampType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPlayerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPlayerType_descriptor_;
}
bool EPlayerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERoundOP_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERoundOP_descriptor_;
}
bool ERoundOP_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERoundDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERoundDataType_descriptor_;
}
bool ERoundDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBuffDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBuffDataType_descriptor_;
}
bool EBuffDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStateDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EStateDataType_descriptor_;
}
bool EStateDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBattleTargetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBattleTargetType_descriptor_;
}
bool EBattleTargetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDamageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDamageType_descriptor_;
}
bool EDamageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBuffType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBuffType_descriptor_;
}
bool EBuffType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBuffTriggerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBuffTriggerType_descriptor_;
}
bool EBuffTriggerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBuffReasonType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBuffReasonType_descriptor_;
}
bool EBuffReasonType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBuffEndType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBuffEndType_descriptor_;
}
bool EBuffEndType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EStateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EStateType_descriptor_;
}
bool EStateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGetValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGetValueType_descriptor_;
}
bool EGetValueType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDispelBuffType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDispelBuffType_descriptor_;
}
bool EDispelBuffType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMarkEffectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMarkEffectType_descriptor_;
}
bool EMarkEffectType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESeqOptType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESeqOptType_descriptor_;
}
bool ESeqOptType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EOptSeqTimeLine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EOptSeqTimeLine_descriptor_;
}
bool EOptSeqTimeLine_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETriggerConditionClass_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETriggerConditionClass_descriptor_;
}
bool ETriggerConditionClass_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETriggerConditionAttrType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETriggerConditionAttrType_descriptor_;
}
bool ETriggerConditionAttrType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBuffEffectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBuffEffectType_descriptor_;
}
bool EBuffEffectType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int reward_item::kUidFieldNumber;
const int reward_item::kTidFieldNumber;
const int reward_item::kCountFieldNumber;
#endif  // !_MSC_VER

reward_item::reward_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void reward_item::InitAsDefaultInstance() {
}

reward_item::reward_item(const reward_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void reward_item::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  tid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reward_item::~reward_item() {
  SharedDtor();
}

void reward_item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void reward_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reward_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reward_item_descriptor_;
}

const reward_item& reward_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

reward_item* reward_item::default_instance_ = NULL;

reward_item* reward_item::New() const {
  return new reward_item;
}

void reward_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    tid_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reward_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tid;
        break;
      }

      // optional int32 tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void reward_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // optional int32 tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tid(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* reward_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // optional int32 tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tid(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int reward_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional int32 tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reward_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reward_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reward_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reward_item::MergeFrom(const reward_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reward_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reward_item::CopyFrom(const reward_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reward_item::IsInitialized() const {

  return true;
}

void reward_item::Swap(reward_item* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(tid_, other->tid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reward_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reward_item_descriptor_;
  metadata.reflection = reward_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_reward::kGoldFieldNumber;
const int battle_reward::kExpFieldNumber;
const int battle_reward::kHeroExpFieldNumber;
const int battle_reward::kViewHeroExpFieldNumber;
const int battle_reward::kItemsFieldNumber;
#endif  // !_MSC_VER

battle_reward::battle_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_reward::InitAsDefaultInstance() {
}

battle_reward::battle_reward(const battle_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_reward::SharedCtor() {
  _cached_size_ = 0;
  gold_ = 0;
  exp_ = 0;
  hero_exp_ = 0;
  view_hero_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_reward::~battle_reward() {
  SharedDtor();
}

void battle_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_reward_descriptor_;
}

const battle_reward& battle_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

battle_reward* battle_reward::default_instance_ = NULL;

battle_reward* battle_reward::New() const {
  return new battle_reward;
}

void battle_reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gold_ = 0;
    exp_ = 0;
    hero_exp_ = 0;
    view_hero_exp_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_exp;
        break;
      }

      // optional int32 hero_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_exp_)));
          set_has_hero_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_view_hero_exp;
        break;
      }

      // optional int32 view_hero_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_view_hero_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_hero_exp_)));
          set_has_view_hero_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }

      // repeated .SProtoSpace.reward_item items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gold = 1;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gold(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // optional int32 hero_exp = 3;
  if (has_hero_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hero_exp(), output);
  }

  // optional int32 view_hero_exp = 4;
  if (has_view_hero_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->view_hero_exp(), output);
  }

  // repeated .SProtoSpace.reward_item items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gold = 1;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gold(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // optional int32 hero_exp = 3;
  if (has_hero_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hero_exp(), target);
  }

  // optional int32 view_hero_exp = 4;
  if (has_view_hero_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->view_hero_exp(), target);
  }

  // repeated .SProtoSpace.reward_item items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gold = 1;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 hero_exp = 3;
    if (has_hero_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_exp());
    }

    // optional int32 view_hero_exp = 4;
    if (has_view_hero_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->view_hero_exp());
    }

  }
  // repeated .SProtoSpace.reward_item items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_reward::MergeFrom(const battle_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_hero_exp()) {
      set_hero_exp(from.hero_exp());
    }
    if (from.has_view_hero_exp()) {
      set_view_hero_exp(from.view_hero_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_reward::CopyFrom(const battle_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_reward::IsInitialized() const {

  return true;
}

void battle_reward::Swap(battle_reward* other) {
  if (other != this) {
    std::swap(gold_, other->gold_);
    std::swap(exp_, other->exp_);
    std::swap(hero_exp_, other->hero_exp_);
    std::swap(view_hero_exp_, other->view_hero_exp_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_reward_descriptor_;
  metadata.reflection = battle_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int round_op_skill::kObjIdFieldNumber;
const int round_op_skill::kTargetIdFieldNumber;
const int round_op_skill::kSkillIdFieldNumber;
#endif  // !_MSC_VER

round_op_skill::round_op_skill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void round_op_skill::InitAsDefaultInstance() {
}

round_op_skill::round_op_skill(const round_op_skill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void round_op_skill::SharedCtor() {
  _cached_size_ = 0;
  obj_id_ = GOOGLE_ULONGLONG(0);
  target_id_ = GOOGLE_ULONGLONG(0);
  skill_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

round_op_skill::~round_op_skill() {
  SharedDtor();
}

void round_op_skill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void round_op_skill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* round_op_skill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return round_op_skill_descriptor_;
}

const round_op_skill& round_op_skill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

round_op_skill* round_op_skill::default_instance_ = NULL;

round_op_skill* round_op_skill::New() const {
  return new round_op_skill;
}

void round_op_skill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_id_ = GOOGLE_ULONGLONG(0);
    target_id_ = GOOGLE_ULONGLONG(0);
    skill_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool round_op_skill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 obj_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_id;
        break;
      }

      // optional uint32 skill_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void round_op_skill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->obj_id(), output);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_id(), output);
  }

  // optional uint32 skill_id = 3;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* round_op_skill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 obj_id = 1;
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->obj_id(), target);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_id(), target);
  }

  // optional uint32 skill_id = 3;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int round_op_skill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 obj_id = 1;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->obj_id());
    }

    // optional uint64 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional uint32 skill_id = 3;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void round_op_skill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const round_op_skill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const round_op_skill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void round_op_skill::MergeFrom(const round_op_skill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void round_op_skill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void round_op_skill::CopyFrom(const round_op_skill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool round_op_skill::IsInitialized() const {

  return true;
}

void round_op_skill::Swap(round_op_skill* other) {
  if (other != this) {
    std::swap(obj_id_, other->obj_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata round_op_skill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = round_op_skill_descriptor_;
  metadata.reflection = round_op_skill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int round_op_param::kTypeFieldNumber;
const int round_op_param::kSkillFieldNumber;
#endif  // !_MSC_VER

round_op_param::round_op_param()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void round_op_param::InitAsDefaultInstance() {
  skill_ = const_cast< ::SProtoSpace::round_op_skill*>(&::SProtoSpace::round_op_skill::default_instance());
}

round_op_param::round_op_param(const round_op_param& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void round_op_param::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  skill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

round_op_param::~round_op_param() {
  SharedDtor();
}

void round_op_param::SharedDtor() {
  if (this != default_instance_) {
    delete skill_;
  }
}

void round_op_param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* round_op_param::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return round_op_param_descriptor_;
}

const round_op_param& round_op_param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

round_op_param* round_op_param::default_instance_ = NULL;

round_op_param* round_op_param::New() const {
  return new round_op_param;
}

void round_op_param::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_skill()) {
      if (skill_ != NULL) skill_->::SProtoSpace::round_op_skill::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool round_op_param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ERoundOP type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ERoundOP_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::ERoundOP >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skill;
        break;
      }

      // optional .SProtoSpace.round_op_skill skill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void round_op_param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ERoundOP type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .SProtoSpace.round_op_skill skill = 2;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* round_op_param::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ERoundOP type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .SProtoSpace.round_op_skill skill = 2;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int round_op_param::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ERoundOP type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .SProtoSpace.round_op_skill skill = 2;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void round_op_param::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const round_op_param* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const round_op_param*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void round_op_param::MergeFrom(const round_op_param& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_skill()) {
      mutable_skill()->::SProtoSpace::round_op_skill::MergeFrom(from.skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void round_op_param::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void round_op_param::CopyFrom(const round_op_param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool round_op_param::IsInitialized() const {

  return true;
}

void round_op_param::Swap(round_op_param* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(skill_, other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata round_op_param::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = round_op_param_descriptor_;
  metadata.reflection = round_op_param_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int damage_data::kObjIdFieldNumber;
const int damage_data::kDamageFieldNumber;
const int damage_data::kHpFieldNumber;
const int damage_data::kCriticalFieldNumber;
#endif  // !_MSC_VER

damage_data::damage_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void damage_data::InitAsDefaultInstance() {
}

damage_data::damage_data(const damage_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void damage_data::SharedCtor() {
  _cached_size_ = 0;
  obj_id_ = 0u;
  damage_ = 0u;
  hp_ = 0u;
  critical_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

damage_data::~damage_data() {
  SharedDtor();
}

void damage_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void damage_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* damage_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return damage_data_descriptor_;
}

const damage_data& damage_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

damage_data* damage_data::default_instance_ = NULL;

damage_data* damage_data::New() const {
  return new damage_data;
}

void damage_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_id_ = 0u;
    damage_ = 0u;
    hp_ = 0u;
    critical_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool damage_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 obj_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damage;
        break;
      }

      // required uint32 damage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // required uint32 hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_critical;
        break;
      }

      // required bool critical = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &critical_)));
          set_has_critical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void damage_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->obj_id(), output);
  }

  // required uint32 damage = 2;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damage(), output);
  }

  // required uint32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hp(), output);
  }

  // required bool critical = 4;
  if (has_critical()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->critical(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* damage_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 obj_id = 1;
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->obj_id(), target);
  }

  // required uint32 damage = 2;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->damage(), target);
  }

  // required uint32 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hp(), target);
  }

  // required bool critical = 4;
  if (has_critical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->critical(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int damage_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 obj_id = 1;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obj_id());
    }

    // required uint32 damage = 2;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // required uint32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // required bool critical = 4;
    if (has_critical()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void damage_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const damage_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const damage_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void damage_data::MergeFrom(const damage_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_critical()) {
      set_critical(from.critical());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void damage_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void damage_data::CopyFrom(const damage_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool damage_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void damage_data::Swap(damage_data* other) {
  if (other != this) {
    std::swap(obj_id_, other->obj_id_);
    std::swap(damage_, other->damage_);
    std::swap(hp_, other->hp_);
    std::swap(critical_, other->critical_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata damage_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = damage_data_descriptor_;
  metadata.reflection = damage_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int obj_state::kObjIdFieldNumber;
const int obj_state::kBuffListFieldNumber;
const int obj_state::kHpFieldNumber;
#endif  // !_MSC_VER

obj_state::obj_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void obj_state::InitAsDefaultInstance() {
}

obj_state::obj_state(const obj_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void obj_state::SharedCtor() {
  _cached_size_ = 0;
  obj_id_ = GOOGLE_ULONGLONG(0);
  hp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

obj_state::~obj_state() {
  SharedDtor();
}

void obj_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void obj_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* obj_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return obj_state_descriptor_;
}

const obj_state& obj_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

obj_state* obj_state::default_instance_ = NULL;

obj_state* obj_state::New() const {
  return new obj_state;
}

void obj_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_id_ = GOOGLE_ULONGLONG(0);
    hp_ = 0;
  }
  buff_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool obj_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 obj_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buff_list;
        break;
      }

      // repeated uint32 buff_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_buff_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buff_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buff_list;
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // required int32 hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void obj_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->obj_id(), output);
  }

  // repeated uint32 buff_list = 2;
  for (int i = 0; i < this->buff_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->buff_list(i), output);
  }

  // required int32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* obj_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 obj_id = 1;
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->obj_id(), target);
  }

  // repeated uint32 buff_list = 2;
  for (int i = 0; i < this->buff_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->buff_list(i), target);
  }

  // required int32 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int obj_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 obj_id = 1;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->obj_id());
    }

    // required int32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

  }
  // repeated uint32 buff_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->buff_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buff_list(i));
    }
    total_size += 1 * this->buff_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void obj_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const obj_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const obj_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void obj_state::MergeFrom(const obj_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  buff_list_.MergeFrom(from.buff_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void obj_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void obj_state::CopyFrom(const obj_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool obj_state::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void obj_state::Swap(obj_state* other) {
  if (other != this) {
    std::swap(obj_id_, other->obj_id_);
    buff_list_.Swap(&other->buff_list_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata obj_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = obj_state_descriptor_;
  metadata.reflection = obj_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int round_skill_data_damage::kObjIdFieldNumber;
const int round_skill_data_damage::kTargetIdFieldNumber;
const int round_skill_data_damage::kSkillIdFieldNumber;
const int round_skill_data_damage::kDamageFieldNumber;
const int round_skill_data_damage::kHpFieldNumber;
const int round_skill_data_damage::kCriticalFieldNumber;
#endif  // !_MSC_VER

round_skill_data_damage::round_skill_data_damage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void round_skill_data_damage::InitAsDefaultInstance() {
}

round_skill_data_damage::round_skill_data_damage(const round_skill_data_damage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void round_skill_data_damage::SharedCtor() {
  _cached_size_ = 0;
  obj_id_ = GOOGLE_ULONGLONG(0);
  target_id_ = GOOGLE_ULONGLONG(0);
  skill_id_ = 0u;
  damage_ = 0u;
  hp_ = 0u;
  critical_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

round_skill_data_damage::~round_skill_data_damage() {
  SharedDtor();
}

void round_skill_data_damage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void round_skill_data_damage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* round_skill_data_damage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return round_skill_data_damage_descriptor_;
}

const round_skill_data_damage& round_skill_data_damage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

round_skill_data_damage* round_skill_data_damage::default_instance_ = NULL;

round_skill_data_damage* round_skill_data_damage::New() const {
  return new round_skill_data_damage;
}

void round_skill_data_damage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_id_ = GOOGLE_ULONGLONG(0);
    target_id_ = GOOGLE_ULONGLONG(0);
    skill_id_ = 0u;
    damage_ = 0u;
    hp_ = 0u;
    critical_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool round_skill_data_damage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 obj_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // required uint64 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_id;
        break;
      }

      // required uint32 skill_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_damage;
        break;
      }

      // required uint32 damage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }

      // required uint32 hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_critical;
        break;
      }

      // required bool critical = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &critical_)));
          set_has_critical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void round_skill_data_damage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->obj_id(), output);
  }

  // required uint64 target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_id(), output);
  }

  // required uint32 skill_id = 3;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_id(), output);
  }

  // required uint32 damage = 4;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->damage(), output);
  }

  // required uint32 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hp(), output);
  }

  // required bool critical = 6;
  if (has_critical()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->critical(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* round_skill_data_damage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 obj_id = 1;
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->obj_id(), target);
  }

  // required uint64 target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_id(), target);
  }

  // required uint32 skill_id = 3;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_id(), target);
  }

  // required uint32 damage = 4;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->damage(), target);
  }

  // required uint32 hp = 5;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hp(), target);
  }

  // required bool critical = 6;
  if (has_critical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->critical(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int round_skill_data_damage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 obj_id = 1;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->obj_id());
    }

    // required uint64 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // required uint32 skill_id = 3;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // required uint32 damage = 4;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // required uint32 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // required bool critical = 6;
    if (has_critical()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void round_skill_data_damage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const round_skill_data_damage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const round_skill_data_damage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void round_skill_data_damage::MergeFrom(const round_skill_data_damage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_critical()) {
      set_critical(from.critical());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void round_skill_data_damage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void round_skill_data_damage::CopyFrom(const round_skill_data_damage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool round_skill_data_damage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void round_skill_data_damage::Swap(round_skill_data_damage* other) {
  if (other != this) {
    std::swap(obj_id_, other->obj_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(damage_, other->damage_);
    std::swap(hp_, other->hp_);
    std::swap(critical_, other->critical_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata round_skill_data_damage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = round_skill_data_damage_descriptor_;
  metadata.reflection = round_skill_data_damage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int round_skill_data_cure::kObjIdFieldNumber;
const int round_skill_data_cure::kTargetIdFieldNumber;
const int round_skill_data_cure::kSkillIdFieldNumber;
const int round_skill_data_cure::kAddHpFieldNumber;
const int round_skill_data_cure::kHpFieldNumber;
const int round_skill_data_cure::kCriticalFieldNumber;
#endif  // !_MSC_VER

round_skill_data_cure::round_skill_data_cure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void round_skill_data_cure::InitAsDefaultInstance() {
}

round_skill_data_cure::round_skill_data_cure(const round_skill_data_cure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void round_skill_data_cure::SharedCtor() {
  _cached_size_ = 0;
  obj_id_ = GOOGLE_ULONGLONG(0);
  target_id_ = GOOGLE_ULONGLONG(0);
  skill_id_ = 0u;
  add_hp_ = 0u;
  hp_ = 0u;
  critical_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

round_skill_data_cure::~round_skill_data_cure() {
  SharedDtor();
}

void round_skill_data_cure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void round_skill_data_cure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* round_skill_data_cure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return round_skill_data_cure_descriptor_;
}

const round_skill_data_cure& round_skill_data_cure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

round_skill_data_cure* round_skill_data_cure::default_instance_ = NULL;

round_skill_data_cure* round_skill_data_cure::New() const {
  return new round_skill_data_cure;
}

void round_skill_data_cure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_id_ = GOOGLE_ULONGLONG(0);
    target_id_ = GOOGLE_ULONGLONG(0);
    skill_id_ = 0u;
    add_hp_ = 0u;
    hp_ = 0u;
    critical_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool round_skill_data_cure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 obj_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // required uint64 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_id;
        break;
      }

      // required uint32 skill_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_add_hp;
        break;
      }

      // required uint32 add_hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_hp_)));
          set_has_add_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }

      // required uint32 hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_critical;
        break;
      }

      // required bool critical = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &critical_)));
          set_has_critical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void round_skill_data_cure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->obj_id(), output);
  }

  // required uint64 target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_id(), output);
  }

  // required uint32 skill_id = 3;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_id(), output);
  }

  // required uint32 add_hp = 4;
  if (has_add_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->add_hp(), output);
  }

  // required uint32 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hp(), output);
  }

  // required bool critical = 6;
  if (has_critical()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->critical(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* round_skill_data_cure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 obj_id = 1;
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->obj_id(), target);
  }

  // required uint64 target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_id(), target);
  }

  // required uint32 skill_id = 3;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_id(), target);
  }

  // required uint32 add_hp = 4;
  if (has_add_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->add_hp(), target);
  }

  // required uint32 hp = 5;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hp(), target);
  }

  // required bool critical = 6;
  if (has_critical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->critical(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int round_skill_data_cure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 obj_id = 1;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->obj_id());
    }

    // required uint64 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // required uint32 skill_id = 3;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // required uint32 add_hp = 4;
    if (has_add_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_hp());
    }

    // required uint32 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // required bool critical = 6;
    if (has_critical()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void round_skill_data_cure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const round_skill_data_cure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const round_skill_data_cure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void round_skill_data_cure::MergeFrom(const round_skill_data_cure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_add_hp()) {
      set_add_hp(from.add_hp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_critical()) {
      set_critical(from.critical());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void round_skill_data_cure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void round_skill_data_cure::CopyFrom(const round_skill_data_cure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool round_skill_data_cure::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void round_skill_data_cure::Swap(round_skill_data_cure* other) {
  if (other != this) {
    std::swap(obj_id_, other->obj_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(add_hp_, other->add_hp_);
    std::swap(hp_, other->hp_);
    std::swap(critical_, other->critical_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata round_skill_data_cure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = round_skill_data_cure_descriptor_;
  metadata.reflection = round_skill_data_cure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int round_buff_data::kBuffTidFieldNumber;
const int round_buff_data::kLasttimeFieldNumber;
const int round_buff_data::kBuffUidFieldNumber;
#endif  // !_MSC_VER

round_buff_data::round_buff_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void round_buff_data::InitAsDefaultInstance() {
}

round_buff_data::round_buff_data(const round_buff_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void round_buff_data::SharedCtor() {
  _cached_size_ = 0;
  buff_tid_ = 0u;
  lasttime_ = 0;
  buff_uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

round_buff_data::~round_buff_data() {
  SharedDtor();
}

void round_buff_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void round_buff_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* round_buff_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return round_buff_data_descriptor_;
}

const round_buff_data& round_buff_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

round_buff_data* round_buff_data::default_instance_ = NULL;

round_buff_data* round_buff_data::New() const {
  return new round_buff_data;
}

void round_buff_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buff_tid_ = 0u;
    lasttime_ = 0;
    buff_uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool round_buff_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 buff_tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_tid_)));
          set_has_buff_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lasttime;
        break;
      }

      // optional int32 lasttime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lasttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buff_uid;
        break;
      }

      // optional uint32 buff_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_uid_)));
          set_has_buff_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void round_buff_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 buff_tid = 1;
  if (has_buff_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buff_tid(), output);
  }

  // optional int32 lasttime = 2;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lasttime(), output);
  }

  // optional uint32 buff_uid = 3;
  if (has_buff_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buff_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* round_buff_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 buff_tid = 1;
  if (has_buff_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buff_tid(), target);
  }

  // optional int32 lasttime = 2;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lasttime(), target);
  }

  // optional uint32 buff_uid = 3;
  if (has_buff_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buff_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int round_buff_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 buff_tid = 1;
    if (has_buff_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buff_tid());
    }

    // optional int32 lasttime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

    // optional uint32 buff_uid = 3;
    if (has_buff_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buff_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void round_buff_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const round_buff_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const round_buff_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void round_buff_data::MergeFrom(const round_buff_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_tid()) {
      set_buff_tid(from.buff_tid());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_buff_uid()) {
      set_buff_uid(from.buff_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void round_buff_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void round_buff_data::CopyFrom(const round_buff_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool round_buff_data::IsInitialized() const {

  return true;
}

void round_buff_data::Swap(round_buff_data* other) {
  if (other != this) {
    std::swap(buff_tid_, other->buff_tid_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(buff_uid_, other->buff_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata round_buff_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = round_buff_data_descriptor_;
  metadata.reflection = round_buff_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int round_state_data::kStateFlagFieldNumber;
#endif  // !_MSC_VER

round_state_data::round_state_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void round_state_data::InitAsDefaultInstance() {
}

round_state_data::round_state_data(const round_state_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void round_state_data::SharedCtor() {
  _cached_size_ = 0;
  state_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

round_state_data::~round_state_data() {
  SharedDtor();
}

void round_state_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void round_state_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* round_state_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return round_state_data_descriptor_;
}

const round_state_data& round_state_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

round_state_data* round_state_data::default_instance_ = NULL;

round_state_data* round_state_data::New() const {
  return new round_state_data;
}

void round_state_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool round_state_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 state_flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_flag_)));
          set_has_state_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void round_state_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 state_flag = 1;
  if (has_state_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->state_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* round_state_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 state_flag = 1;
  if (has_state_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->state_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int round_state_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 state_flag = 1;
    if (has_state_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void round_state_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const round_state_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const round_state_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void round_state_data::MergeFrom(const round_state_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state_flag()) {
      set_state_flag(from.state_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void round_state_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void round_state_data::CopyFrom(const round_state_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool round_state_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void round_state_data::Swap(round_state_data* other) {
  if (other != this) {
    std::swap(state_flag_, other->state_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata round_state_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = round_state_data_descriptor_;
  metadata.reflection = round_state_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int round_data::kObjIdFieldNumber;
const int round_data::kBuffDataFieldNumber;
const int round_data::kStateDataFieldNumber;
const int round_data::kHpFieldNumber;
const int round_data::kCampFieldNumber;
const int round_data::kMaxhpFieldNumber;
const int round_data::kSpFieldNumber;
#endif  // !_MSC_VER

round_data::round_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void round_data::InitAsDefaultInstance() {
  state_data_ = const_cast< ::SProtoSpace::round_state_data*>(&::SProtoSpace::round_state_data::default_instance());
}

round_data::round_data(const round_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void round_data::SharedCtor() {
  _cached_size_ = 0;
  obj_id_ = GOOGLE_ULONGLONG(0);
  state_data_ = NULL;
  hp_ = 0;
  camp_ = 0;
  maxhp_ = 0;
  sp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

round_data::~round_data() {
  SharedDtor();
}

void round_data::SharedDtor() {
  if (this != default_instance_) {
    delete state_data_;
  }
}

void round_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* round_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return round_data_descriptor_;
}

const round_data& round_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

round_data* round_data::default_instance_ = NULL;

round_data* round_data::New() const {
  return new round_data;
}

void round_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_id_ = GOOGLE_ULONGLONG(0);
    if (has_state_data()) {
      if (state_data_ != NULL) state_data_->::SProtoSpace::round_state_data::Clear();
    }
    hp_ = 0;
    camp_ = 0;
    maxhp_ = 0;
    sp_ = 0;
  }
  buff_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool round_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 obj_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buff_data;
        break;
      }

      // repeated .SProtoSpace.round_buff_data buff_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buff_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buff_data;
        if (input->ExpectTag(26)) goto parse_state_data;
        break;
      }

      // optional .SProtoSpace.round_state_data state_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hp;
        break;
      }

      // optional int32 hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_camp;
        break;
      }

      // optional int32 camp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_maxhp;
        break;
      }

      // optional int32 maxhp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sp;
        break;
      }

      // optional int32 sp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sp_)));
          set_has_sp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void round_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->obj_id(), output);
  }

  // repeated .SProtoSpace.round_buff_data buff_data = 2;
  for (int i = 0; i < this->buff_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buff_data(i), output);
  }

  // optional .SProtoSpace.round_state_data state_data = 3;
  if (has_state_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->state_data(), output);
  }

  // optional int32 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hp(), output);
  }

  // optional int32 camp = 5;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->camp(), output);
  }

  // optional int32 maxhp = 6;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maxhp(), output);
  }

  // optional int32 sp = 7;
  if (has_sp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* round_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 obj_id = 1;
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->obj_id(), target);
  }

  // repeated .SProtoSpace.round_buff_data buff_data = 2;
  for (int i = 0; i < this->buff_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buff_data(i), target);
  }

  // optional .SProtoSpace.round_state_data state_data = 3;
  if (has_state_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->state_data(), target);
  }

  // optional int32 hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hp(), target);
  }

  // optional int32 camp = 5;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->camp(), target);
  }

  // optional int32 maxhp = 6;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->maxhp(), target);
  }

  // optional int32 sp = 7;
  if (has_sp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int round_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 obj_id = 1;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->obj_id());
    }

    // optional .SProtoSpace.round_state_data state_data = 3;
    if (has_state_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state_data());
    }

    // optional int32 hp = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 camp = 5;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // optional int32 maxhp = 6;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

    // optional int32 sp = 7;
    if (has_sp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sp());
    }

  }
  // repeated .SProtoSpace.round_buff_data buff_data = 2;
  total_size += 1 * this->buff_data_size();
  for (int i = 0; i < this->buff_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buff_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void round_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const round_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const round_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void round_data::MergeFrom(const round_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  buff_data_.MergeFrom(from.buff_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_state_data()) {
      mutable_state_data()->::SProtoSpace::round_state_data::MergeFrom(from.state_data());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_sp()) {
      set_sp(from.sp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void round_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void round_data::CopyFrom(const round_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool round_data::IsInitialized() const {

  if (has_state_data()) {
    if (!this->state_data().IsInitialized()) return false;
  }
  return true;
}

void round_data::Swap(round_data* other) {
  if (other != this) {
    std::swap(obj_id_, other->obj_id_);
    buff_data_.Swap(&other->buff_data_);
    std::swap(state_data_, other->state_data_);
    std::swap(hp_, other->hp_);
    std::swap(camp_, other->camp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(sp_, other->sp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata round_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = round_data_descriptor_;
  metadata.reflection = round_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int seq_useskill::kCastIdFieldNumber;
const int seq_useskill::kTargetIdFieldNumber;
const int seq_useskill::kSkillIdFieldNumber;
#endif  // !_MSC_VER

seq_useskill::seq_useskill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void seq_useskill::InitAsDefaultInstance() {
}

seq_useskill::seq_useskill(const seq_useskill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void seq_useskill::SharedCtor() {
  _cached_size_ = 0;
  cast_id_ = GOOGLE_ULONGLONG(0);
  target_id_ = GOOGLE_ULONGLONG(0);
  skill_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

seq_useskill::~seq_useskill() {
  SharedDtor();
}

void seq_useskill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void seq_useskill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* seq_useskill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return seq_useskill_descriptor_;
}

const seq_useskill& seq_useskill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

seq_useskill* seq_useskill::default_instance_ = NULL;

seq_useskill* seq_useskill::New() const {
  return new seq_useskill;
}

void seq_useskill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cast_id_ = GOOGLE_ULONGLONG(0);
    target_id_ = GOOGLE_ULONGLONG(0);
    skill_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool seq_useskill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cast_id_)));
          set_has_cast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_id;
        break;
      }

      // optional uint32 skill_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void seq_useskill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cast_id = 1;
  if (has_cast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cast_id(), output);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_id(), output);
  }

  // optional uint32 skill_id = 3;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* seq_useskill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cast_id = 1;
  if (has_cast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cast_id(), target);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_id(), target);
  }

  // optional uint32 skill_id = 3;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int seq_useskill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cast_id = 1;
    if (has_cast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cast_id());
    }

    // optional uint64 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional uint32 skill_id = 3;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void seq_useskill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const seq_useskill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const seq_useskill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void seq_useskill::MergeFrom(const seq_useskill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cast_id()) {
      set_cast_id(from.cast_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void seq_useskill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void seq_useskill::CopyFrom(const seq_useskill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool seq_useskill::IsInitialized() const {

  return true;
}

void seq_useskill::Swap(seq_useskill* other) {
  if (other != this) {
    std::swap(cast_id_, other->cast_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata seq_useskill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = seq_useskill_descriptor_;
  metadata.reflection = seq_useskill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int seq_buff::kCastIdFieldNumber;
const int seq_buff::kTargetIdFieldNumber;
const int seq_buff::kBuffUidFieldNumber;
const int seq_buff::kBuffTidFieldNumber;
const int seq_buff::kLastRoundFieldNumber;
#endif  // !_MSC_VER

seq_buff::seq_buff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void seq_buff::InitAsDefaultInstance() {
}

seq_buff::seq_buff(const seq_buff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void seq_buff::SharedCtor() {
  _cached_size_ = 0;
  cast_id_ = GOOGLE_ULONGLONG(0);
  target_id_ = GOOGLE_ULONGLONG(0);
  buff_uid_ = 0u;
  buff_tid_ = 0u;
  last_round_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

seq_buff::~seq_buff() {
  SharedDtor();
}

void seq_buff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void seq_buff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* seq_buff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return seq_buff_descriptor_;
}

const seq_buff& seq_buff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

seq_buff* seq_buff::default_instance_ = NULL;

seq_buff* seq_buff::New() const {
  return new seq_buff;
}

void seq_buff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cast_id_ = GOOGLE_ULONGLONG(0);
    target_id_ = GOOGLE_ULONGLONG(0);
    buff_uid_ = 0u;
    buff_tid_ = 0u;
    last_round_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool seq_buff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cast_id_)));
          set_has_cast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buff_uid;
        break;
      }

      // optional uint32 buff_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_uid_)));
          set_has_buff_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buff_tid;
        break;
      }

      // optional uint32 buff_tid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_tid_)));
          set_has_buff_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_round;
        break;
      }

      // optional uint32 last_round = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_round_)));
          set_has_last_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void seq_buff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cast_id = 1;
  if (has_cast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cast_id(), output);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_id(), output);
  }

  // optional uint32 buff_uid = 3;
  if (has_buff_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buff_uid(), output);
  }

  // optional uint32 buff_tid = 4;
  if (has_buff_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buff_tid(), output);
  }

  // optional uint32 last_round = 5;
  if (has_last_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_round(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* seq_buff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cast_id = 1;
  if (has_cast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cast_id(), target);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_id(), target);
  }

  // optional uint32 buff_uid = 3;
  if (has_buff_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buff_uid(), target);
  }

  // optional uint32 buff_tid = 4;
  if (has_buff_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buff_tid(), target);
  }

  // optional uint32 last_round = 5;
  if (has_last_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_round(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int seq_buff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cast_id = 1;
    if (has_cast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cast_id());
    }

    // optional uint64 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional uint32 buff_uid = 3;
    if (has_buff_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buff_uid());
    }

    // optional uint32 buff_tid = 4;
    if (has_buff_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buff_tid());
    }

    // optional uint32 last_round = 5;
    if (has_last_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_round());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void seq_buff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const seq_buff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const seq_buff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void seq_buff::MergeFrom(const seq_buff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cast_id()) {
      set_cast_id(from.cast_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_buff_uid()) {
      set_buff_uid(from.buff_uid());
    }
    if (from.has_buff_tid()) {
      set_buff_tid(from.buff_tid());
    }
    if (from.has_last_round()) {
      set_last_round(from.last_round());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void seq_buff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void seq_buff::CopyFrom(const seq_buff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool seq_buff::IsInitialized() const {

  return true;
}

void seq_buff::Swap(seq_buff* other) {
  if (other != this) {
    std::swap(cast_id_, other->cast_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(buff_uid_, other->buff_uid_);
    std::swap(buff_tid_, other->buff_tid_);
    std::swap(last_round_, other->last_round_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata seq_buff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = seq_buff_descriptor_;
  metadata.reflection = seq_buff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int seq_state::kCastIdFieldNumber;
const int seq_state::kTargetIdFieldNumber;
const int seq_state::kStateIndexFieldNumber;
#endif  // !_MSC_VER

seq_state::seq_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void seq_state::InitAsDefaultInstance() {
}

seq_state::seq_state(const seq_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void seq_state::SharedCtor() {
  _cached_size_ = 0;
  cast_id_ = GOOGLE_ULONGLONG(0);
  target_id_ = GOOGLE_ULONGLONG(0);
  state_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

seq_state::~seq_state() {
  SharedDtor();
}

void seq_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void seq_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* seq_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return seq_state_descriptor_;
}

const seq_state& seq_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

seq_state* seq_state::default_instance_ = NULL;

seq_state* seq_state::New() const {
  return new seq_state;
}

void seq_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cast_id_ = GOOGLE_ULONGLONG(0);
    target_id_ = GOOGLE_ULONGLONG(0);
    state_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool seq_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cast_id_)));
          set_has_cast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state_index;
        break;
      }

      // optional uint32 state_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_index_)));
          set_has_state_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void seq_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cast_id = 1;
  if (has_cast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cast_id(), output);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_id(), output);
  }

  // optional uint32 state_index = 3;
  if (has_state_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* seq_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cast_id = 1;
  if (has_cast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cast_id(), target);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_id(), target);
  }

  // optional uint32 state_index = 3;
  if (has_state_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int seq_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cast_id = 1;
    if (has_cast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cast_id());
    }

    // optional uint64 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional uint32 state_index = 3;
    if (has_state_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void seq_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const seq_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const seq_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void seq_state::MergeFrom(const seq_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cast_id()) {
      set_cast_id(from.cast_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_state_index()) {
      set_state_index(from.state_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void seq_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void seq_state::CopyFrom(const seq_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool seq_state::IsInitialized() const {

  return true;
}

void seq_state::Swap(seq_state* other) {
  if (other != this) {
    std::swap(cast_id_, other->cast_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(state_index_, other->state_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata seq_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = seq_state_descriptor_;
  metadata.reflection = seq_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int seq_damage::kCastIdFieldNumber;
const int seq_damage::kTargetIdFieldNumber;
const int seq_damage::kDodgeFieldNumber;
const int seq_damage::kDamageFieldNumber;
const int seq_damage::kHpFieldNumber;
const int seq_damage::kCriticalFieldNumber;
const int seq_damage::kBuffIdFieldNumber;
#endif  // !_MSC_VER

seq_damage::seq_damage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void seq_damage::InitAsDefaultInstance() {
}

seq_damage::seq_damage(const seq_damage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void seq_damage::SharedCtor() {
  _cached_size_ = 0;
  cast_id_ = GOOGLE_ULONGLONG(0);
  target_id_ = GOOGLE_ULONGLONG(0);
  dodge_ = false;
  damage_ = 0u;
  hp_ = 0u;
  critical_ = false;
  buff_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

seq_damage::~seq_damage() {
  SharedDtor();
}

void seq_damage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void seq_damage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* seq_damage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return seq_damage_descriptor_;
}

const seq_damage& seq_damage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

seq_damage* seq_damage::default_instance_ = NULL;

seq_damage* seq_damage::New() const {
  return new seq_damage;
}

void seq_damage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cast_id_ = GOOGLE_ULONGLONG(0);
    target_id_ = GOOGLE_ULONGLONG(0);
    dodge_ = false;
    damage_ = 0u;
    hp_ = 0u;
    critical_ = false;
    buff_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool seq_damage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cast_id_)));
          set_has_cast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dodge;
        break;
      }

      // optional bool dodge = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_damage;
        break;
      }

      // optional uint32 damage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_critical;
        break;
      }

      // optional bool critical = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &critical_)));
          set_has_critical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_buff_id;
        break;
      }

      // optional uint32 buff_id = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_id_)));
          set_has_buff_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void seq_damage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cast_id = 1;
  if (has_cast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cast_id(), output);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_id(), output);
  }

  // optional bool dodge = 3;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->dodge(), output);
  }

  // optional uint32 damage = 4;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->damage(), output);
  }

  // optional uint32 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hp(), output);
  }

  // optional bool critical = 6;
  if (has_critical()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->critical(), output);
  }

  // optional uint32 buff_id = 7 [default = 0];
  if (has_buff_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->buff_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* seq_damage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cast_id = 1;
  if (has_cast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cast_id(), target);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_id(), target);
  }

  // optional bool dodge = 3;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->dodge(), target);
  }

  // optional uint32 damage = 4;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->damage(), target);
  }

  // optional uint32 hp = 5;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hp(), target);
  }

  // optional bool critical = 6;
  if (has_critical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->critical(), target);
  }

  // optional uint32 buff_id = 7 [default = 0];
  if (has_buff_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->buff_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int seq_damage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cast_id = 1;
    if (has_cast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cast_id());
    }

    // optional uint64 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional bool dodge = 3;
    if (has_dodge()) {
      total_size += 1 + 1;
    }

    // optional uint32 damage = 4;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // optional uint32 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional bool critical = 6;
    if (has_critical()) {
      total_size += 1 + 1;
    }

    // optional uint32 buff_id = 7 [default = 0];
    if (has_buff_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buff_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void seq_damage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const seq_damage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const seq_damage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void seq_damage::MergeFrom(const seq_damage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cast_id()) {
      set_cast_id(from.cast_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_critical()) {
      set_critical(from.critical());
    }
    if (from.has_buff_id()) {
      set_buff_id(from.buff_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void seq_damage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void seq_damage::CopyFrom(const seq_damage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool seq_damage::IsInitialized() const {

  return true;
}

void seq_damage::Swap(seq_damage* other) {
  if (other != this) {
    std::swap(cast_id_, other->cast_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(dodge_, other->dodge_);
    std::swap(damage_, other->damage_);
    std::swap(hp_, other->hp_);
    std::swap(critical_, other->critical_);
    std::swap(buff_id_, other->buff_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata seq_damage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = seq_damage_descriptor_;
  metadata.reflection = seq_damage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int seq_relive::kCastIdFieldNumber;
const int seq_relive::kTargetIdFieldNumber;
const int seq_relive::kSkillIdFieldNumber;
const int seq_relive::kHpFieldNumber;
#endif  // !_MSC_VER

seq_relive::seq_relive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void seq_relive::InitAsDefaultInstance() {
}

seq_relive::seq_relive(const seq_relive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void seq_relive::SharedCtor() {
  _cached_size_ = 0;
  cast_id_ = GOOGLE_ULONGLONG(0);
  target_id_ = GOOGLE_ULONGLONG(0);
  skill_id_ = 0u;
  hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

seq_relive::~seq_relive() {
  SharedDtor();
}

void seq_relive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void seq_relive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* seq_relive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return seq_relive_descriptor_;
}

const seq_relive& seq_relive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

seq_relive* seq_relive::default_instance_ = NULL;

seq_relive* seq_relive::New() const {
  return new seq_relive;
}

void seq_relive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cast_id_ = GOOGLE_ULONGLONG(0);
    target_id_ = GOOGLE_ULONGLONG(0);
    skill_id_ = 0u;
    hp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool seq_relive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cast_id_)));
          set_has_cast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_id;
        break;
      }

      // optional uint32 skill_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void seq_relive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cast_id = 1;
  if (has_cast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cast_id(), output);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_id(), output);
  }

  // optional uint32 skill_id = 3;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_id(), output);
  }

  // optional uint32 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* seq_relive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cast_id = 1;
  if (has_cast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cast_id(), target);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_id(), target);
  }

  // optional uint32 skill_id = 3;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_id(), target);
  }

  // optional uint32 hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int seq_relive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cast_id = 1;
    if (has_cast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cast_id());
    }

    // optional uint64 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional uint32 skill_id = 3;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // optional uint32 hp = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void seq_relive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const seq_relive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const seq_relive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void seq_relive::MergeFrom(const seq_relive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cast_id()) {
      set_cast_id(from.cast_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void seq_relive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void seq_relive::CopyFrom(const seq_relive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool seq_relive::IsInitialized() const {

  return true;
}

void seq_relive::Swap(seq_relive* other) {
  if (other != this) {
    std::swap(cast_id_, other->cast_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata seq_relive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = seq_relive_descriptor_;
  metadata.reflection = seq_relive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int seq_attr::kCastIdFieldNumber;
const int seq_attr::kAttrFieldNumber;
const int seq_attr::kChangeAttrFieldNumber;
const int seq_attr::kValFieldNumber;
#endif  // !_MSC_VER

seq_attr::seq_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void seq_attr::InitAsDefaultInstance() {
}

seq_attr::seq_attr(const seq_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void seq_attr::SharedCtor() {
  _cached_size_ = 0;
  cast_id_ = GOOGLE_ULONGLONG(0);
  attr_ = 0u;
  change_attr_ = 0;
  val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

seq_attr::~seq_attr() {
  SharedDtor();
}

void seq_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void seq_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* seq_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return seq_attr_descriptor_;
}

const seq_attr& seq_attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

seq_attr* seq_attr::default_instance_ = NULL;

seq_attr* seq_attr::New() const {
  return new seq_attr;
}

void seq_attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cast_id_ = GOOGLE_ULONGLONG(0);
    attr_ = 0u;
    change_attr_ = 0;
    val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool seq_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cast_id_)));
          set_has_cast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attr;
        break;
      }

      // optional uint32 attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_)));
          set_has_attr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_change_attr;
        break;
      }

      // optional int32 change_attr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_attr_)));
          set_has_change_attr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_val;
        break;
      }

      // optional int32 val = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void seq_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cast_id = 1;
  if (has_cast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cast_id(), output);
  }

  // optional uint32 attr = 2;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attr(), output);
  }

  // optional int32 change_attr = 3;
  if (has_change_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->change_attr(), output);
  }

  // optional int32 val = 4;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* seq_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cast_id = 1;
  if (has_cast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cast_id(), target);
  }

  // optional uint32 attr = 2;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attr(), target);
  }

  // optional int32 change_attr = 3;
  if (has_change_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->change_attr(), target);
  }

  // optional int32 val = 4;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int seq_attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cast_id = 1;
    if (has_cast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cast_id());
    }

    // optional uint32 attr = 2;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr());
    }

    // optional int32 change_attr = 3;
    if (has_change_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_attr());
    }

    // optional int32 val = 4;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void seq_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const seq_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const seq_attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void seq_attr::MergeFrom(const seq_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cast_id()) {
      set_cast_id(from.cast_id());
    }
    if (from.has_attr()) {
      set_attr(from.attr());
    }
    if (from.has_change_attr()) {
      set_change_attr(from.change_attr());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void seq_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void seq_attr::CopyFrom(const seq_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool seq_attr::IsInitialized() const {

  return true;
}

void seq_attr::Swap(seq_attr* other) {
  if (other != this) {
    std::swap(cast_id_, other->cast_id_);
    std::swap(attr_, other->attr_);
    std::swap(change_attr_, other->change_attr_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata seq_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = seq_attr_descriptor_;
  metadata.reflection = seq_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int seq_extra_action::kCastIdFieldNumber;
const int seq_extra_action::kTargetIdFieldNumber;
const int seq_extra_action::kSkillIdFieldNumber;
#endif  // !_MSC_VER

seq_extra_action::seq_extra_action()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void seq_extra_action::InitAsDefaultInstance() {
}

seq_extra_action::seq_extra_action(const seq_extra_action& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void seq_extra_action::SharedCtor() {
  _cached_size_ = 0;
  cast_id_ = GOOGLE_ULONGLONG(0);
  target_id_ = GOOGLE_ULONGLONG(0);
  skill_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

seq_extra_action::~seq_extra_action() {
  SharedDtor();
}

void seq_extra_action::SharedDtor() {
  if (this != default_instance_) {
  }
}

void seq_extra_action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* seq_extra_action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return seq_extra_action_descriptor_;
}

const seq_extra_action& seq_extra_action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

seq_extra_action* seq_extra_action::default_instance_ = NULL;

seq_extra_action* seq_extra_action::New() const {
  return new seq_extra_action;
}

void seq_extra_action::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cast_id_ = GOOGLE_ULONGLONG(0);
    target_id_ = GOOGLE_ULONGLONG(0);
    skill_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool seq_extra_action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cast_id_)));
          set_has_cast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_id;
        break;
      }

      // optional uint32 skill_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void seq_extra_action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cast_id = 1;
  if (has_cast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cast_id(), output);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_id(), output);
  }

  // optional uint32 skill_id = 3;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* seq_extra_action::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cast_id = 1;
  if (has_cast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cast_id(), target);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_id(), target);
  }

  // optional uint32 skill_id = 3;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int seq_extra_action::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cast_id = 1;
    if (has_cast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cast_id());
    }

    // optional uint64 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional uint32 skill_id = 3;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void seq_extra_action::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const seq_extra_action* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const seq_extra_action*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void seq_extra_action::MergeFrom(const seq_extra_action& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cast_id()) {
      set_cast_id(from.cast_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void seq_extra_action::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void seq_extra_action::CopyFrom(const seq_extra_action& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool seq_extra_action::IsInitialized() const {

  return true;
}

void seq_extra_action::Swap(seq_extra_action* other) {
  if (other != this) {
    std::swap(cast_id_, other->cast_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata seq_extra_action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = seq_extra_action_descriptor_;
  metadata.reflection = seq_extra_action_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int seq_sp::kCastIdFieldNumber;
const int seq_sp::kChangeSpFieldNumber;
const int seq_sp::kSpFieldNumber;
const int seq_sp::kMaxSpFieldNumber;
#endif  // !_MSC_VER

seq_sp::seq_sp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void seq_sp::InitAsDefaultInstance() {
}

seq_sp::seq_sp(const seq_sp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void seq_sp::SharedCtor() {
  _cached_size_ = 0;
  cast_id_ = GOOGLE_ULONGLONG(0);
  change_sp_ = 0u;
  sp_ = 0u;
  max_sp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

seq_sp::~seq_sp() {
  SharedDtor();
}

void seq_sp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void seq_sp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* seq_sp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return seq_sp_descriptor_;
}

const seq_sp& seq_sp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

seq_sp* seq_sp::default_instance_ = NULL;

seq_sp* seq_sp::New() const {
  return new seq_sp;
}

void seq_sp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cast_id_ = GOOGLE_ULONGLONG(0);
    change_sp_ = 0u;
    sp_ = 0u;
    max_sp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool seq_sp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cast_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cast_id_)));
          set_has_cast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_change_sp;
        break;
      }

      // optional uint32 change_sp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_sp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_sp_)));
          set_has_change_sp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sp;
        break;
      }

      // optional uint32 sp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sp_)));
          set_has_sp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_sp;
        break;
      }

      // optional uint32 max_sp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_sp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_sp_)));
          set_has_max_sp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void seq_sp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cast_id = 1;
  if (has_cast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cast_id(), output);
  }

  // optional uint32 change_sp = 2;
  if (has_change_sp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_sp(), output);
  }

  // optional uint32 sp = 3;
  if (has_sp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sp(), output);
  }

  // optional uint32 max_sp = 4;
  if (has_max_sp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_sp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* seq_sp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cast_id = 1;
  if (has_cast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cast_id(), target);
  }

  // optional uint32 change_sp = 2;
  if (has_change_sp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->change_sp(), target);
  }

  // optional uint32 sp = 3;
  if (has_sp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sp(), target);
  }

  // optional uint32 max_sp = 4;
  if (has_max_sp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_sp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int seq_sp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cast_id = 1;
    if (has_cast_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cast_id());
    }

    // optional uint32 change_sp = 2;
    if (has_change_sp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_sp());
    }

    // optional uint32 sp = 3;
    if (has_sp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sp());
    }

    // optional uint32 max_sp = 4;
    if (has_max_sp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_sp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void seq_sp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const seq_sp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const seq_sp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void seq_sp::MergeFrom(const seq_sp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cast_id()) {
      set_cast_id(from.cast_id());
    }
    if (from.has_change_sp()) {
      set_change_sp(from.change_sp());
    }
    if (from.has_sp()) {
      set_sp(from.sp());
    }
    if (from.has_max_sp()) {
      set_max_sp(from.max_sp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void seq_sp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void seq_sp::CopyFrom(const seq_sp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool seq_sp::IsInitialized() const {

  return true;
}

void seq_sp::Swap(seq_sp* other) {
  if (other != this) {
    std::swap(cast_id_, other->cast_id_);
    std::swap(change_sp_, other->change_sp_);
    std::swap(sp_, other->sp_);
    std::swap(max_sp_, other->max_sp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata seq_sp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = seq_sp_descriptor_;
  metadata.reflection = seq_sp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int opt_seq::kOptTypeFieldNumber;
const int opt_seq::kBuffFieldNumber;
const int opt_seq::kStateFieldNumber;
const int opt_seq::kDamageFieldNumber;
const int opt_seq::kReliveFieldNumber;
const int opt_seq::kAttrFieldNumber;
const int opt_seq::kExtraActionFieldNumber;
#endif  // !_MSC_VER

opt_seq::opt_seq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void opt_seq::InitAsDefaultInstance() {
  buff_ = const_cast< ::SProtoSpace::seq_buff*>(&::SProtoSpace::seq_buff::default_instance());
  state_ = const_cast< ::SProtoSpace::seq_state*>(&::SProtoSpace::seq_state::default_instance());
  damage_ = const_cast< ::SProtoSpace::seq_damage*>(&::SProtoSpace::seq_damage::default_instance());
  relive_ = const_cast< ::SProtoSpace::seq_relive*>(&::SProtoSpace::seq_relive::default_instance());
  attr_ = const_cast< ::SProtoSpace::seq_attr*>(&::SProtoSpace::seq_attr::default_instance());
  extra_action_ = const_cast< ::SProtoSpace::seq_extra_action*>(&::SProtoSpace::seq_extra_action::default_instance());
}

opt_seq::opt_seq(const opt_seq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void opt_seq::SharedCtor() {
  _cached_size_ = 0;
  opt_type_ = 0;
  buff_ = NULL;
  state_ = NULL;
  damage_ = NULL;
  relive_ = NULL;
  attr_ = NULL;
  extra_action_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

opt_seq::~opt_seq() {
  SharedDtor();
}

void opt_seq::SharedDtor() {
  if (this != default_instance_) {
    delete buff_;
    delete state_;
    delete damage_;
    delete relive_;
    delete attr_;
    delete extra_action_;
  }
}

void opt_seq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* opt_seq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return opt_seq_descriptor_;
}

const opt_seq& opt_seq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

opt_seq* opt_seq::default_instance_ = NULL;

opt_seq* opt_seq::New() const {
  return new opt_seq;
}

void opt_seq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_type_ = 0;
    if (has_buff()) {
      if (buff_ != NULL) buff_->::SProtoSpace::seq_buff::Clear();
    }
    if (has_state()) {
      if (state_ != NULL) state_->::SProtoSpace::seq_state::Clear();
    }
    if (has_damage()) {
      if (damage_ != NULL) damage_->::SProtoSpace::seq_damage::Clear();
    }
    if (has_relive()) {
      if (relive_ != NULL) relive_->::SProtoSpace::seq_relive::Clear();
    }
    if (has_attr()) {
      if (attr_ != NULL) attr_->::SProtoSpace::seq_attr::Clear();
    }
    if (has_extra_action()) {
      if (extra_action_ != NULL) extra_action_->::SProtoSpace::seq_extra_action::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool opt_seq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESeqOptType opt_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESeqOptType_IsValid(value)) {
            set_opt_type(static_cast< ::SProtoSpace::ESeqOptType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buff;
        break;
      }

      // optional .SProtoSpace.seq_buff buff = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_state;
        break;
      }

      // optional .SProtoSpace.seq_state state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_damage;
        break;
      }

      // optional .SProtoSpace.seq_damage damage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_damage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_relive;
        break;
      }

      // optional .SProtoSpace.seq_relive relive = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_attr;
        break;
      }

      // optional .SProtoSpace.seq_attr attr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_extra_action;
        break;
      }

      // optional .SProtoSpace.seq_extra_action extra_action = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extra_action()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void opt_seq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESeqOptType opt_type = 1;
  if (has_opt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->opt_type(), output);
  }

  // optional .SProtoSpace.seq_buff buff = 2;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buff(), output);
  }

  // optional .SProtoSpace.seq_state state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->state(), output);
  }

  // optional .SProtoSpace.seq_damage damage = 4;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->damage(), output);
  }

  // optional .SProtoSpace.seq_relive relive = 5;
  if (has_relive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->relive(), output);
  }

  // optional .SProtoSpace.seq_attr attr = 6;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attr(), output);
  }

  // optional .SProtoSpace.seq_extra_action extra_action = 7;
  if (has_extra_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->extra_action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* opt_seq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESeqOptType opt_type = 1;
  if (has_opt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->opt_type(), target);
  }

  // optional .SProtoSpace.seq_buff buff = 2;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buff(), target);
  }

  // optional .SProtoSpace.seq_state state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->state(), target);
  }

  // optional .SProtoSpace.seq_damage damage = 4;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->damage(), target);
  }

  // optional .SProtoSpace.seq_relive relive = 5;
  if (has_relive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->relive(), target);
  }

  // optional .SProtoSpace.seq_attr attr = 6;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attr(), target);
  }

  // optional .SProtoSpace.seq_extra_action extra_action = 7;
  if (has_extra_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->extra_action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int opt_seq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESeqOptType opt_type = 1;
    if (has_opt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opt_type());
    }

    // optional .SProtoSpace.seq_buff buff = 2;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buff());
    }

    // optional .SProtoSpace.seq_state state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional .SProtoSpace.seq_damage damage = 4;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->damage());
    }

    // optional .SProtoSpace.seq_relive relive = 5;
    if (has_relive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relive());
    }

    // optional .SProtoSpace.seq_attr attr = 6;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

    // optional .SProtoSpace.seq_extra_action extra_action = 7;
    if (has_extra_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extra_action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void opt_seq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const opt_seq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const opt_seq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void opt_seq::MergeFrom(const opt_seq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt_type()) {
      set_opt_type(from.opt_type());
    }
    if (from.has_buff()) {
      mutable_buff()->::SProtoSpace::seq_buff::MergeFrom(from.buff());
    }
    if (from.has_state()) {
      mutable_state()->::SProtoSpace::seq_state::MergeFrom(from.state());
    }
    if (from.has_damage()) {
      mutable_damage()->::SProtoSpace::seq_damage::MergeFrom(from.damage());
    }
    if (from.has_relive()) {
      mutable_relive()->::SProtoSpace::seq_relive::MergeFrom(from.relive());
    }
    if (from.has_attr()) {
      mutable_attr()->::SProtoSpace::seq_attr::MergeFrom(from.attr());
    }
    if (from.has_extra_action()) {
      mutable_extra_action()->::SProtoSpace::seq_extra_action::MergeFrom(from.extra_action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void opt_seq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void opt_seq::CopyFrom(const opt_seq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool opt_seq::IsInitialized() const {

  return true;
}

void opt_seq::Swap(opt_seq* other) {
  if (other != this) {
    std::swap(opt_type_, other->opt_type_);
    std::swap(buff_, other->buff_);
    std::swap(state_, other->state_);
    std::swap(damage_, other->damage_);
    std::swap(relive_, other->relive_);
    std::swap(attr_, other->attr_);
    std::swap(extra_action_, other->extra_action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata opt_seq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = opt_seq_descriptor_;
  metadata.reflection = opt_seq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hit_seq::kTimeTypeFieldNumber;
const int hit_seq::kHitIndexFieldNumber;
const int hit_seq::kSeqsFieldNumber;
#endif  // !_MSC_VER

hit_seq::hit_seq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hit_seq::InitAsDefaultInstance() {
}

hit_seq::hit_seq(const hit_seq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hit_seq::SharedCtor() {
  _cached_size_ = 0;
  time_type_ = 1;
  hit_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hit_seq::~hit_seq() {
  SharedDtor();
}

void hit_seq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hit_seq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hit_seq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hit_seq_descriptor_;
}

const hit_seq& hit_seq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

hit_seq* hit_seq::default_instance_ = NULL;

hit_seq* hit_seq::New() const {
  return new hit_seq;
}

void hit_seq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_type_ = 1;
    hit_index_ = 0u;
  }
  seqs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hit_seq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.EOptSeqTimeLine time_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EOptSeqTimeLine_IsValid(value)) {
            set_time_type(static_cast< ::SProtoSpace::EOptSeqTimeLine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hit_index;
        break;
      }

      // optional uint32 hit_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_index_)));
          set_has_hit_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seqs;
        break;
      }

      // repeated .SProtoSpace.opt_seq seqs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seqs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seqs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seqs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hit_seq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.EOptSeqTimeLine time_type = 1;
  if (has_time_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->time_type(), output);
  }

  // optional uint32 hit_index = 2;
  if (has_hit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hit_index(), output);
  }

  // repeated .SProtoSpace.opt_seq seqs = 3;
  for (int i = 0; i < this->seqs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->seqs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hit_seq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.EOptSeqTimeLine time_type = 1;
  if (has_time_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->time_type(), target);
  }

  // optional uint32 hit_index = 2;
  if (has_hit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hit_index(), target);
  }

  // repeated .SProtoSpace.opt_seq seqs = 3;
  for (int i = 0; i < this->seqs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->seqs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hit_seq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.EOptSeqTimeLine time_type = 1;
    if (has_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->time_type());
    }

    // optional uint32 hit_index = 2;
    if (has_hit_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit_index());
    }

  }
  // repeated .SProtoSpace.opt_seq seqs = 3;
  total_size += 1 * this->seqs_size();
  for (int i = 0; i < this->seqs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seqs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hit_seq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hit_seq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hit_seq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hit_seq::MergeFrom(const hit_seq& from) {
  GOOGLE_CHECK_NE(&from, this);
  seqs_.MergeFrom(from.seqs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_type()) {
      set_time_type(from.time_type());
    }
    if (from.has_hit_index()) {
      set_hit_index(from.hit_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hit_seq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hit_seq::CopyFrom(const hit_seq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hit_seq::IsInitialized() const {

  return true;
}

void hit_seq::Swap(hit_seq* other) {
  if (other != this) {
    std::swap(time_type_, other->time_type_);
    std::swap(hit_index_, other->hit_index_);
    seqs_.Swap(&other->seqs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hit_seq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hit_seq_descriptor_;
  metadata.reflection = hit_seq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int opt_seqs::kOptFieldNumber;
const int opt_seqs::kSeqsFieldNumber;
#endif  // !_MSC_VER

opt_seqs::opt_seqs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void opt_seqs::InitAsDefaultInstance() {
  opt_ = const_cast< ::SProtoSpace::round_op_param*>(&::SProtoSpace::round_op_param::default_instance());
}

opt_seqs::opt_seqs(const opt_seqs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void opt_seqs::SharedCtor() {
  _cached_size_ = 0;
  opt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

opt_seqs::~opt_seqs() {
  SharedDtor();
}

void opt_seqs::SharedDtor() {
  if (this != default_instance_) {
    delete opt_;
  }
}

void opt_seqs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* opt_seqs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return opt_seqs_descriptor_;
}

const opt_seqs& opt_seqs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

opt_seqs* opt_seqs::default_instance_ = NULL;

opt_seqs* opt_seqs::New() const {
  return new opt_seqs;
}

void opt_seqs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_opt()) {
      if (opt_ != NULL) opt_->::SProtoSpace::round_op_param::Clear();
    }
  }
  seqs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool opt_seqs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.round_op_param opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_seqs;
        break;
      }

      // repeated .SProtoSpace.hit_seq seqs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seqs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seqs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_seqs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void opt_seqs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.round_op_param opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->opt(), output);
  }

  // repeated .SProtoSpace.hit_seq seqs = 2;
  for (int i = 0; i < this->seqs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->seqs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* opt_seqs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.round_op_param opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->opt(), target);
  }

  // repeated .SProtoSpace.hit_seq seqs = 2;
  for (int i = 0; i < this->seqs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->seqs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int opt_seqs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.round_op_param opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opt());
    }

  }
  // repeated .SProtoSpace.hit_seq seqs = 2;
  total_size += 1 * this->seqs_size();
  for (int i = 0; i < this->seqs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seqs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void opt_seqs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const opt_seqs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const opt_seqs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void opt_seqs::MergeFrom(const opt_seqs& from) {
  GOOGLE_CHECK_NE(&from, this);
  seqs_.MergeFrom(from.seqs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      mutable_opt()->::SProtoSpace::round_op_param::MergeFrom(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void opt_seqs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void opt_seqs::CopyFrom(const opt_seqs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool opt_seqs::IsInitialized() const {

  return true;
}

void opt_seqs::Swap(opt_seqs* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    seqs_.Swap(&other->seqs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata opt_seqs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = opt_seqs_descriptor_;
  metadata.reflection = opt_seqs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_hero_info::kBaseFieldNumber;
const int battle_hero_info::kBaseAttrFieldNumber;
const int battle_hero_info::kSkillDataFieldNumber;
const int battle_hero_info::kRdDataFieldNumber;
const int battle_hero_info::kTotalAttrFieldNumber;
const int battle_hero_info::kFormationIndexFieldNumber;
const int battle_hero_info::kCreateTypeFieldNumber;
#endif  // !_MSC_VER

battle_hero_info::battle_hero_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_hero_info::InitAsDefaultInstance() {
  base_ = const_cast< ::SProtoSpace::hero_base_info*>(&::SProtoSpace::hero_base_info::default_instance());
  rd_data_ = const_cast< ::SProtoSpace::round_data*>(&::SProtoSpace::round_data::default_instance());
}

battle_hero_info::battle_hero_info(const battle_hero_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_hero_info::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  rd_data_ = NULL;
  formation_index_ = 0;
  create_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_hero_info::~battle_hero_info() {
  SharedDtor();
}

void battle_hero_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete rd_data_;
  }
}

void battle_hero_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_hero_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_hero_info_descriptor_;
}

const battle_hero_info& battle_hero_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

battle_hero_info* battle_hero_info::default_instance_ = NULL;

battle_hero_info* battle_hero_info::New() const {
  return new battle_hero_info;
}

void battle_hero_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::SProtoSpace::hero_base_info::Clear();
    }
    if (has_rd_data()) {
      if (rd_data_ != NULL) rd_data_->::SProtoSpace::round_data::Clear();
    }
    formation_index_ = 0;
    create_type_ = 0;
  }
  base_attr_.Clear();
  skill_data_.Clear();
  total_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_hero_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.hero_base_info base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base_attr;
        break;
      }

      // repeated .SProtoSpace.hero_attr_value base_attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_base_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base_attr;
        if (input->ExpectTag(26)) goto parse_skill_data;
        break;
      }

      // repeated .SProtoSpace.client_skill_data skill_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill_data;
        if (input->ExpectTag(34)) goto parse_rd_data;
        break;
      }

      // optional .SProtoSpace.round_data rd_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rd_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rd_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_total_attr;
        break;
      }

      // repeated .SProtoSpace.hero_attr_value total_attr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_total_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_total_attr;
        if (input->ExpectTag(48)) goto parse_formation_index;
        break;
      }

      // optional int32 formation_index = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formation_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &formation_index_)));
          set_has_formation_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_create_type;
        break;
      }

      // optional int32 create_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_type_)));
          set_has_create_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_hero_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.hero_base_info base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // repeated .SProtoSpace.hero_attr_value base_attr = 2;
  for (int i = 0; i < this->base_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base_attr(i), output);
  }

  // repeated .SProtoSpace.client_skill_data skill_data = 3;
  for (int i = 0; i < this->skill_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skill_data(i), output);
  }

  // optional .SProtoSpace.round_data rd_data = 4;
  if (has_rd_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rd_data(), output);
  }

  // repeated .SProtoSpace.hero_attr_value total_attr = 5;
  for (int i = 0; i < this->total_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->total_attr(i), output);
  }

  // optional int32 formation_index = 6;
  if (has_formation_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->formation_index(), output);
  }

  // optional int32 create_type = 7;
  if (has_create_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->create_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_hero_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.hero_base_info base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // repeated .SProtoSpace.hero_attr_value base_attr = 2;
  for (int i = 0; i < this->base_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base_attr(i), target);
  }

  // repeated .SProtoSpace.client_skill_data skill_data = 3;
  for (int i = 0; i < this->skill_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skill_data(i), target);
  }

  // optional .SProtoSpace.round_data rd_data = 4;
  if (has_rd_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rd_data(), target);
  }

  // repeated .SProtoSpace.hero_attr_value total_attr = 5;
  for (int i = 0; i < this->total_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->total_attr(i), target);
  }

  // optional int32 formation_index = 6;
  if (has_formation_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->formation_index(), target);
  }

  // optional int32 create_type = 7;
  if (has_create_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->create_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_hero_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.hero_base_info base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .SProtoSpace.round_data rd_data = 4;
    if (has_rd_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rd_data());
    }

    // optional int32 formation_index = 6;
    if (has_formation_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->formation_index());
    }

    // optional int32 create_type = 7;
    if (has_create_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_type());
    }

  }
  // repeated .SProtoSpace.hero_attr_value base_attr = 2;
  total_size += 1 * this->base_attr_size();
  for (int i = 0; i < this->base_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->base_attr(i));
  }

  // repeated .SProtoSpace.client_skill_data skill_data = 3;
  total_size += 1 * this->skill_data_size();
  for (int i = 0; i < this->skill_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_data(i));
  }

  // repeated .SProtoSpace.hero_attr_value total_attr = 5;
  total_size += 1 * this->total_attr_size();
  for (int i = 0; i < this->total_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->total_attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_hero_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_hero_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_hero_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_hero_info::MergeFrom(const battle_hero_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  base_attr_.MergeFrom(from.base_attr_);
  skill_data_.MergeFrom(from.skill_data_);
  total_attr_.MergeFrom(from.total_attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::SProtoSpace::hero_base_info::MergeFrom(from.base());
    }
    if (from.has_rd_data()) {
      mutable_rd_data()->::SProtoSpace::round_data::MergeFrom(from.rd_data());
    }
    if (from.has_formation_index()) {
      set_formation_index(from.formation_index());
    }
    if (from.has_create_type()) {
      set_create_type(from.create_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_hero_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_hero_info::CopyFrom(const battle_hero_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_hero_info::IsInitialized() const {

  for (int i = 0; i < base_attr_size(); i++) {
    if (!this->base_attr(i).IsInitialized()) return false;
  }
  if (has_rd_data()) {
    if (!this->rd_data().IsInitialized()) return false;
  }
  for (int i = 0; i < total_attr_size(); i++) {
    if (!this->total_attr(i).IsInitialized()) return false;
  }
  return true;
}

void battle_hero_info::Swap(battle_hero_info* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    base_attr_.Swap(&other->base_attr_);
    skill_data_.Swap(&other->skill_data_);
    std::swap(rd_data_, other->rd_data_);
    total_attr_.Swap(&other->total_attr_);
    std::swap(formation_index_, other->formation_index_);
    std::swap(create_type_, other->create_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_hero_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_hero_info_descriptor_;
  metadata.reflection = battle_hero_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_player_base_info::kIdFieldNumber;
const int battle_player_base_info::kTemplateIdFieldNumber;
const int battle_player_base_info::kLevelFieldNumber;
#endif  // !_MSC_VER

battle_player_base_info::battle_player_base_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_player_base_info::InitAsDefaultInstance() {
}

battle_player_base_info::battle_player_base_info(const battle_player_base_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_player_base_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  template_id_ = 0u;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_player_base_info::~battle_player_base_info() {
  SharedDtor();
}

void battle_player_base_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_player_base_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_player_base_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_player_base_info_descriptor_;
}

const battle_player_base_info& battle_player_base_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

battle_player_base_info* battle_player_base_info::default_instance_ = NULL;

battle_player_base_info* battle_player_base_info::New() const {
  return new battle_player_base_info;
}

void battle_player_base_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    template_id_ = 0u;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_player_base_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional uint32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_player_base_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->template_id(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_player_base_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->template_id(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_player_base_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_id());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_player_base_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_player_base_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_player_base_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_player_base_info::MergeFrom(const battle_player_base_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_player_base_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_player_base_info::CopyFrom(const battle_player_base_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_player_base_info::IsInitialized() const {

  return true;
}

void battle_player_base_info::Swap(battle_player_base_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(template_id_, other->template_id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_player_base_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_player_base_info_descriptor_;
  metadata.reflection = battle_player_base_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_player_info::kBaseFieldNumber;
const int battle_player_info::kBaseAttrFieldNumber;
const int battle_player_info::kSkillDataFieldNumber;
const int battle_player_info::kRdDataFieldNumber;
const int battle_player_info::kFormationIndexFieldNumber;
const int battle_player_info::kTotalAttrFieldNumber;
#endif  // !_MSC_VER

battle_player_info::battle_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_player_info::InitAsDefaultInstance() {
  base_ = const_cast< ::SProtoSpace::battle_player_base_info*>(&::SProtoSpace::battle_player_base_info::default_instance());
  rd_data_ = const_cast< ::SProtoSpace::round_data*>(&::SProtoSpace::round_data::default_instance());
}

battle_player_info::battle_player_info(const battle_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_player_info::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  rd_data_ = NULL;
  formation_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_player_info::~battle_player_info() {
  SharedDtor();
}

void battle_player_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete rd_data_;
  }
}

void battle_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_player_info_descriptor_;
}

const battle_player_info& battle_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

battle_player_info* battle_player_info::default_instance_ = NULL;

battle_player_info* battle_player_info::New() const {
  return new battle_player_info;
}

void battle_player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::SProtoSpace::battle_player_base_info::Clear();
    }
    if (has_rd_data()) {
      if (rd_data_ != NULL) rd_data_->::SProtoSpace::round_data::Clear();
    }
    formation_index_ = 0;
  }
  base_attr_.Clear();
  skill_data_.Clear();
  total_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.battle_player_base_info base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base_attr;
        break;
      }

      // repeated .SProtoSpace.hero_attr_value base_attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_base_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base_attr;
        if (input->ExpectTag(26)) goto parse_skill_data;
        break;
      }

      // repeated .SProtoSpace.client_skill_data skill_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill_data;
        if (input->ExpectTag(34)) goto parse_rd_data;
        break;
      }

      // optional .SProtoSpace.round_data rd_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rd_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rd_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_formation_index;
        break;
      }

      // optional int32 formation_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formation_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &formation_index_)));
          set_has_formation_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_total_attr;
        break;
      }

      // repeated .SProtoSpace.hero_attr_value total_attr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_total_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_total_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.battle_player_base_info base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // repeated .SProtoSpace.hero_attr_value base_attr = 2;
  for (int i = 0; i < this->base_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base_attr(i), output);
  }

  // repeated .SProtoSpace.client_skill_data skill_data = 3;
  for (int i = 0; i < this->skill_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skill_data(i), output);
  }

  // optional .SProtoSpace.round_data rd_data = 4;
  if (has_rd_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rd_data(), output);
  }

  // optional int32 formation_index = 5;
  if (has_formation_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->formation_index(), output);
  }

  // repeated .SProtoSpace.hero_attr_value total_attr = 6;
  for (int i = 0; i < this->total_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->total_attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.battle_player_base_info base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // repeated .SProtoSpace.hero_attr_value base_attr = 2;
  for (int i = 0; i < this->base_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base_attr(i), target);
  }

  // repeated .SProtoSpace.client_skill_data skill_data = 3;
  for (int i = 0; i < this->skill_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skill_data(i), target);
  }

  // optional .SProtoSpace.round_data rd_data = 4;
  if (has_rd_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rd_data(), target);
  }

  // optional int32 formation_index = 5;
  if (has_formation_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->formation_index(), target);
  }

  // repeated .SProtoSpace.hero_attr_value total_attr = 6;
  for (int i = 0; i < this->total_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->total_attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.battle_player_base_info base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .SProtoSpace.round_data rd_data = 4;
    if (has_rd_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rd_data());
    }

    // optional int32 formation_index = 5;
    if (has_formation_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->formation_index());
    }

  }
  // repeated .SProtoSpace.hero_attr_value base_attr = 2;
  total_size += 1 * this->base_attr_size();
  for (int i = 0; i < this->base_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->base_attr(i));
  }

  // repeated .SProtoSpace.client_skill_data skill_data = 3;
  total_size += 1 * this->skill_data_size();
  for (int i = 0; i < this->skill_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_data(i));
  }

  // repeated .SProtoSpace.hero_attr_value total_attr = 6;
  total_size += 1 * this->total_attr_size();
  for (int i = 0; i < this->total_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->total_attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_player_info::MergeFrom(const battle_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  base_attr_.MergeFrom(from.base_attr_);
  skill_data_.MergeFrom(from.skill_data_);
  total_attr_.MergeFrom(from.total_attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::SProtoSpace::battle_player_base_info::MergeFrom(from.base());
    }
    if (from.has_rd_data()) {
      mutable_rd_data()->::SProtoSpace::round_data::MergeFrom(from.rd_data());
    }
    if (from.has_formation_index()) {
      set_formation_index(from.formation_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_player_info::CopyFrom(const battle_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_player_info::IsInitialized() const {

  for (int i = 0; i < base_attr_size(); i++) {
    if (!this->base_attr(i).IsInitialized()) return false;
  }
  if (has_rd_data()) {
    if (!this->rd_data().IsInitialized()) return false;
  }
  for (int i = 0; i < total_attr_size(); i++) {
    if (!this->total_attr(i).IsInitialized()) return false;
  }
  return true;
}

void battle_player_info::Swap(battle_player_info* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    base_attr_.Swap(&other->base_attr_);
    skill_data_.Swap(&other->skill_data_);
    std::swap(rd_data_, other->rd_data_);
    std::swap(formation_index_, other->formation_index_);
    total_attr_.Swap(&other->total_attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_player_info_descriptor_;
  metadata.reflection = battle_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_role_info::kTypeFieldNumber;
const int battle_role_info::kIdFieldNumber;
const int battle_role_info::kNameFieldNumber;
const int battle_role_info::kLevelFieldNumber;
const int battle_role_info::kHeroesFieldNumber;
const int battle_role_info::kGsidFieldNumber;
const int battle_role_info::kPlayerFieldNumber;
const int battle_role_info::kGtidFieldNumber;
#endif  // !_MSC_VER

battle_role_info::battle_role_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_role_info::InitAsDefaultInstance() {
  player_ = const_cast< ::SProtoSpace::battle_player_info*>(&::SProtoSpace::battle_player_info::default_instance());
}

battle_role_info::battle_role_info(const battle_role_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_role_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  gsid_ = GOOGLE_ULONGLONG(0);
  player_ = NULL;
  gtid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_role_info::~battle_role_info() {
  SharedDtor();
}

void battle_role_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete player_;
  }
}

void battle_role_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_role_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_role_info_descriptor_;
}

const battle_role_info& battle_role_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

battle_role_info* battle_role_info::default_instance_ = NULL;

battle_role_info* battle_role_info::New() const {
  return new battle_role_info;
}

void battle_role_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    gsid_ = GOOGLE_ULONGLONG(0);
    if (has_player()) {
      if (player_ != NULL) player_->::SProtoSpace::battle_player_info::Clear();
    }
    gtid_ = GOOGLE_ULONGLONG(0);
  }
  heroes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_role_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_heroes;
        break;
      }

      // repeated .SProtoSpace.battle_hero_info heroes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_heroes;
        if (input->ExpectTag(40)) goto parse_gsid;
        break;
      }

      // optional uint64 gsid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gsid_)));
          set_has_gsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_player;
        break;
      }

      // optional .SProtoSpace.battle_player_info player = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.EPlayerType type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EPlayerType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EPlayerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gtid;
        break;
      }

      // optional uint64 gtid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gtid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gtid_)));
          set_has_gtid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_role_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // repeated .SProtoSpace.battle_hero_info heroes = 4;
  for (int i = 0; i < this->heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->heroes(i), output);
  }

  // optional uint64 gsid = 5;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->gsid(), output);
  }

  // optional .SProtoSpace.battle_player_info player = 6;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->player(), output);
  }

  // optional .SProtoSpace.EPlayerType type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  // optional uint64 gtid = 8;
  if (has_gtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->gtid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_role_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // repeated .SProtoSpace.battle_hero_info heroes = 4;
  for (int i = 0; i < this->heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->heroes(i), target);
  }

  // optional uint64 gsid = 5;
  if (has_gsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->gsid(), target);
  }

  // optional .SProtoSpace.battle_player_info player = 6;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->player(), target);
  }

  // optional .SProtoSpace.EPlayerType type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  // optional uint64 gtid = 8;
  if (has_gtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->gtid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_role_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.EPlayerType type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint64 gsid = 5;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gsid());
    }

    // optional .SProtoSpace.battle_player_info player = 6;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }

    // optional uint64 gtid = 8;
    if (has_gtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gtid());
    }

  }
  // repeated .SProtoSpace.battle_hero_info heroes = 4;
  total_size += 1 * this->heroes_size();
  for (int i = 0; i < this->heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_role_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_role_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_role_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_role_info::MergeFrom(const battle_role_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroes_.MergeFrom(from.heroes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
    if (from.has_player()) {
      mutable_player()->::SProtoSpace::battle_player_info::MergeFrom(from.player());
    }
    if (from.has_gtid()) {
      set_gtid(from.gtid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_role_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_role_info::CopyFrom(const battle_role_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_role_info::IsInitialized() const {

  for (int i = 0; i < heroes_size(); i++) {
    if (!this->heroes(i).IsInitialized()) return false;
  }
  if (has_player()) {
    if (!this->player().IsInitialized()) return false;
  }
  return true;
}

void battle_role_info::Swap(battle_role_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    heroes_.Swap(&other->heroes_);
    std::swap(gsid_, other->gsid_);
    std::swap(player_, other->player_);
    std::swap(gtid_, other->gtid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_role_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_role_info_descriptor_;
  metadata.reflection = battle_role_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_camp_info::kRolesFieldNumber;
const int battle_camp_info::kInitPowerFieldNumber;
const int battle_camp_info::kCampFieldNumber;
#endif  // !_MSC_VER

battle_camp_info::battle_camp_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_camp_info::InitAsDefaultInstance() {
}

battle_camp_info::battle_camp_info(const battle_camp_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_camp_info::SharedCtor() {
  _cached_size_ = 0;
  init_power_ = 0;
  camp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_camp_info::~battle_camp_info() {
  SharedDtor();
}

void battle_camp_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_camp_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_camp_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_camp_info_descriptor_;
}

const battle_camp_info& battle_camp_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

battle_camp_info* battle_camp_info::default_instance_ = NULL;

battle_camp_info* battle_camp_info::New() const {
  return new battle_camp_info;
}

void battle_camp_info::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    init_power_ = 0;
    camp_ = 0;
  }
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_camp_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.battle_role_info roles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roles;
        if (input->ExpectTag(16)) goto parse_init_power;
        break;
      }

      // optional int32 init_power = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_power_)));
          set_has_init_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_camp;
        break;
      }

      // optional int32 camp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_camp_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.battle_role_info roles = 1;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roles(i), output);
  }

  // optional int32 init_power = 2;
  if (has_init_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->init_power(), output);
  }

  // optional int32 camp = 3;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->camp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_camp_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.battle_role_info roles = 1;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roles(i), target);
  }

  // optional int32 init_power = 2;
  if (has_init_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->init_power(), target);
  }

  // optional int32 camp = 3;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->camp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_camp_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 init_power = 2;
    if (has_init_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_power());
    }

    // optional int32 camp = 3;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

  }
  // repeated .SProtoSpace.battle_role_info roles = 1;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_camp_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_camp_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_camp_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_camp_info::MergeFrom(const battle_camp_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_init_power()) {
      set_init_power(from.init_power());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_camp_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_camp_info::CopyFrom(const battle_camp_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_camp_info::IsInitialized() const {

  for (int i = 0; i < roles_size(); i++) {
    if (!this->roles(i).IsInitialized()) return false;
  }
  return true;
}

void battle_camp_info::Swap(battle_camp_info* other) {
  if (other != this) {
    roles_.Swap(&other->roles_);
    std::swap(init_power_, other->init_power_);
    std::swap(camp_, other->camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_camp_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_camp_info_descriptor_;
  metadata.reflection = battle_camp_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pvp_battle_init_data::kCampsFieldNumber;
#endif  // !_MSC_VER

pvp_battle_init_data::pvp_battle_init_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pvp_battle_init_data::InitAsDefaultInstance() {
}

pvp_battle_init_data::pvp_battle_init_data(const pvp_battle_init_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pvp_battle_init_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pvp_battle_init_data::~pvp_battle_init_data() {
  SharedDtor();
}

void pvp_battle_init_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pvp_battle_init_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pvp_battle_init_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pvp_battle_init_data_descriptor_;
}

const pvp_battle_init_data& pvp_battle_init_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

pvp_battle_init_data* pvp_battle_init_data::default_instance_ = NULL;

pvp_battle_init_data* pvp_battle_init_data::New() const {
  return new pvp_battle_init_data;
}

void pvp_battle_init_data::Clear() {
  camps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pvp_battle_init_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.battle_camp_info camps = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_camps;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pvp_battle_init_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.battle_camp_info camps = 1;
  for (int i = 0; i < this->camps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->camps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pvp_battle_init_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.battle_camp_info camps = 1;
  for (int i = 0; i < this->camps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->camps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pvp_battle_init_data::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.battle_camp_info camps = 1;
  total_size += 1 * this->camps_size();
  for (int i = 0; i < this->camps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pvp_battle_init_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pvp_battle_init_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pvp_battle_init_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pvp_battle_init_data::MergeFrom(const pvp_battle_init_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  camps_.MergeFrom(from.camps_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pvp_battle_init_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pvp_battle_init_data::CopyFrom(const pvp_battle_init_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pvp_battle_init_data::IsInitialized() const {

  for (int i = 0; i < camps_size(); i++) {
    if (!this->camps(i).IsInitialized()) return false;
  }
  return true;
}

void pvp_battle_init_data::Swap(pvp_battle_init_data* other) {
  if (other != this) {
    camps_.Swap(&other->camps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pvp_battle_init_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pvp_battle_init_data_descriptor_;
  metadata.reflection = pvp_battle_init_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_end_data::kTypeFieldNumber;
const int battle_end_data::kBattleIdFieldNumber;
const int battle_end_data::kIsWinFieldNumber;
const int battle_end_data::kOptsFieldNumber;
const int battle_end_data::kModuleIdFieldNumber;
const int battle_end_data::kFormationTypeFieldNumber;
#endif  // !_MSC_VER

battle_end_data::battle_end_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_end_data::InitAsDefaultInstance() {
}

battle_end_data::battle_end_data(const battle_end_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_end_data::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  battle_id_ = 0;
  is_win_ = false;
  module_id_ = 0;
  formation_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_end_data::~battle_end_data() {
  SharedDtor();
}

void battle_end_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_end_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_end_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_end_data_descriptor_;
}

const battle_end_data& battle_end_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

battle_end_data* battle_end_data::default_instance_ = NULL;

battle_end_data* battle_end_data::New() const {
  return new battle_end_data;
}

void battle_end_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    battle_id_ = 0;
    is_win_ = false;
    module_id_ = 0;
    formation_type_ = 1;
  }
  opts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_end_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_id;
        break;
      }

      // optional int32 battle_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_id_)));
          set_has_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_win;
        break;
      }

      // optional bool is_win = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_win_)));
          set_has_is_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_opts;
        break;
      }

      // repeated .SProtoSpace.battle_check_opt_data opts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_opts;
        if (input->ExpectTag(40)) goto parse_module_id;
        break;
      }

      // optional int32 module_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_formation_type;
        break;
      }

      // optional .SProtoSpace.EHeroFormationType formation_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formation_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EHeroFormationType_IsValid(value)) {
            set_formation_type(static_cast< ::SProtoSpace::EHeroFormationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_end_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 battle_id = 2;
  if (has_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battle_id(), output);
  }

  // optional bool is_win = 3;
  if (has_is_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_win(), output);
  }

  // repeated .SProtoSpace.battle_check_opt_data opts = 4;
  for (int i = 0; i < this->opts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->opts(i), output);
  }

  // optional int32 module_id = 5;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->module_id(), output);
  }

  // optional .SProtoSpace.EHeroFormationType formation_type = 6;
  if (has_formation_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->formation_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_end_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 battle_id = 2;
  if (has_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battle_id(), target);
  }

  // optional bool is_win = 3;
  if (has_is_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_win(), target);
  }

  // repeated .SProtoSpace.battle_check_opt_data opts = 4;
  for (int i = 0; i < this->opts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->opts(i), target);
  }

  // optional int32 module_id = 5;
  if (has_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->module_id(), target);
  }

  // optional .SProtoSpace.EHeroFormationType formation_type = 6;
  if (has_formation_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->formation_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_end_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 battle_id = 2;
    if (has_battle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_id());
    }

    // optional bool is_win = 3;
    if (has_is_win()) {
      total_size += 1 + 1;
    }

    // optional int32 module_id = 5;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->module_id());
    }

    // optional .SProtoSpace.EHeroFormationType formation_type = 6;
    if (has_formation_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->formation_type());
    }

  }
  // repeated .SProtoSpace.battle_check_opt_data opts = 4;
  total_size += 1 * this->opts_size();
  for (int i = 0; i < this->opts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_end_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_end_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_end_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_end_data::MergeFrom(const battle_end_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  opts_.MergeFrom(from.opts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_battle_id()) {
      set_battle_id(from.battle_id());
    }
    if (from.has_is_win()) {
      set_is_win(from.is_win());
    }
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
    if (from.has_formation_type()) {
      set_formation_type(from.formation_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_end_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_end_data::CopyFrom(const battle_end_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_end_data::IsInitialized() const {

  for (int i = 0; i < opts_size(); i++) {
    if (!this->opts(i).IsInitialized()) return false;
  }
  return true;
}

void battle_end_data::Swap(battle_end_data* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(battle_id_, other->battle_id_);
    std::swap(is_win_, other->is_win_);
    opts_.Swap(&other->opts_);
    std::swap(module_id_, other->module_id_);
    std::swap(formation_type_, other->formation_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_end_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_end_data_descriptor_;
  metadata.reflection = battle_end_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pve_check_battle_init_data::kRoleIdFieldNumber;
const int pve_check_battle_init_data::kGsIdFieldNumber;
const int pve_check_battle_init_data::kBattleEndInfoFieldNumber;
#endif  // !_MSC_VER

pve_check_battle_init_data::pve_check_battle_init_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pve_check_battle_init_data::InitAsDefaultInstance() {
  battle_end_info_ = const_cast< ::SProtoSpace::battle_end_data*>(&::SProtoSpace::battle_end_data::default_instance());
}

pve_check_battle_init_data::pve_check_battle_init_data(const pve_check_battle_init_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pve_check_battle_init_data::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  gs_id_ = GOOGLE_ULONGLONG(0);
  battle_end_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pve_check_battle_init_data::~pve_check_battle_init_data() {
  SharedDtor();
}

void pve_check_battle_init_data::SharedDtor() {
  if (this != default_instance_) {
    delete battle_end_info_;
  }
}

void pve_check_battle_init_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pve_check_battle_init_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pve_check_battle_init_data_descriptor_;
}

const pve_check_battle_init_data& pve_check_battle_init_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

pve_check_battle_init_data* pve_check_battle_init_data::default_instance_ = NULL;

pve_check_battle_init_data* pve_check_battle_init_data::New() const {
  return new pve_check_battle_init_data;
}

void pve_check_battle_init_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    gs_id_ = GOOGLE_ULONGLONG(0);
    if (has_battle_end_info()) {
      if (battle_end_info_ != NULL) battle_end_info_->::SProtoSpace::battle_end_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pve_check_battle_init_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gs_id;
        break;
      }

      // optional uint64 gs_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gs_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gs_id_)));
          set_has_gs_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battle_end_info;
        break;
      }

      // optional .SProtoSpace.battle_end_data battle_end_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_end_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_end_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pve_check_battle_init_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint64 gs_id = 2;
  if (has_gs_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gs_id(), output);
  }

  // optional .SProtoSpace.battle_end_data battle_end_info = 3;
  if (has_battle_end_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battle_end_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pve_check_battle_init_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint64 gs_id = 2;
  if (has_gs_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gs_id(), target);
  }

  // optional .SProtoSpace.battle_end_data battle_end_info = 3;
  if (has_battle_end_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battle_end_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pve_check_battle_init_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 gs_id = 2;
    if (has_gs_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gs_id());
    }

    // optional .SProtoSpace.battle_end_data battle_end_info = 3;
    if (has_battle_end_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_end_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pve_check_battle_init_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pve_check_battle_init_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pve_check_battle_init_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pve_check_battle_init_data::MergeFrom(const pve_check_battle_init_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_gs_id()) {
      set_gs_id(from.gs_id());
    }
    if (from.has_battle_end_info()) {
      mutable_battle_end_info()->::SProtoSpace::battle_end_data::MergeFrom(from.battle_end_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pve_check_battle_init_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pve_check_battle_init_data::CopyFrom(const pve_check_battle_init_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pve_check_battle_init_data::IsInitialized() const {

  if (has_battle_end_info()) {
    if (!this->battle_end_info().IsInitialized()) return false;
  }
  return true;
}

void pve_check_battle_init_data::Swap(pve_check_battle_init_data* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(gs_id_, other->gs_id_);
    std::swap(battle_end_info_, other->battle_end_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pve_check_battle_init_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pve_check_battle_init_data_descriptor_;
  metadata.reflection = pve_check_battle_init_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int create_battle_data::kTypeFieldNumber;
const int create_battle_data::kCombatIdFieldNumber;
const int create_battle_data::kSeedFieldNumber;
const int create_battle_data::kPvpDataFieldNumber;
const int create_battle_data::kPveCheckDataFieldNumber;
#endif  // !_MSC_VER

create_battle_data::create_battle_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void create_battle_data::InitAsDefaultInstance() {
  pvp_data_ = const_cast< ::SProtoSpace::pvp_battle_init_data*>(&::SProtoSpace::pvp_battle_init_data::default_instance());
  pve_check_data_ = const_cast< ::SProtoSpace::pve_check_battle_init_data*>(&::SProtoSpace::pve_check_battle_init_data::default_instance());
}

create_battle_data::create_battle_data(const create_battle_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void create_battle_data::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  combat_id_ = 0u;
  seed_ = 0u;
  pvp_data_ = NULL;
  pve_check_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

create_battle_data::~create_battle_data() {
  SharedDtor();
}

void create_battle_data::SharedDtor() {
  if (this != default_instance_) {
    delete pvp_data_;
    delete pve_check_data_;
  }
}

void create_battle_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_battle_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return create_battle_data_descriptor_;
}

const create_battle_data& create_battle_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

create_battle_data* create_battle_data::default_instance_ = NULL;

create_battle_data* create_battle_data::New() const {
  return new create_battle_data;
}

void create_battle_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    combat_id_ = 0u;
    seed_ = 0u;
    if (has_pvp_data()) {
      if (pvp_data_ != NULL) pvp_data_->::SProtoSpace::pvp_battle_init_data::Clear();
    }
    if (has_pve_check_data()) {
      if (pve_check_data_ != NULL) pve_check_data_->::SProtoSpace::pve_check_battle_init_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool create_battle_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.EBattleType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EBattleType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EBattleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_combat_id;
        break;
      }

      // optional uint32 combat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combat_id_)));
          set_has_combat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seed;
        break;
      }

      // optional uint32 seed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pvp_data;
        break;
      }

      // optional .SProtoSpace.pvp_battle_init_data pvp_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pvp_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvp_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pve_check_data;
        break;
      }

      // optional .SProtoSpace.pve_check_battle_init_data pve_check_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pve_check_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pve_check_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void create_battle_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.EBattleType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 combat_id = 2;
  if (has_combat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->combat_id(), output);
  }

  // optional uint32 seed = 3;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seed(), output);
  }

  // optional .SProtoSpace.pvp_battle_init_data pvp_data = 4;
  if (has_pvp_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pvp_data(), output);
  }

  // optional .SProtoSpace.pve_check_battle_init_data pve_check_data = 5;
  if (has_pve_check_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pve_check_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* create_battle_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.EBattleType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 combat_id = 2;
  if (has_combat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->combat_id(), target);
  }

  // optional uint32 seed = 3;
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seed(), target);
  }

  // optional .SProtoSpace.pvp_battle_init_data pvp_data = 4;
  if (has_pvp_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pvp_data(), target);
  }

  // optional .SProtoSpace.pve_check_battle_init_data pve_check_data = 5;
  if (has_pve_check_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pve_check_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int create_battle_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.EBattleType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 combat_id = 2;
    if (has_combat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combat_id());
    }

    // optional uint32 seed = 3;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seed());
    }

    // optional .SProtoSpace.pvp_battle_init_data pvp_data = 4;
    if (has_pvp_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvp_data());
    }

    // optional .SProtoSpace.pve_check_battle_init_data pve_check_data = 5;
    if (has_pve_check_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pve_check_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_battle_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const create_battle_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const create_battle_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void create_battle_data::MergeFrom(const create_battle_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_combat_id()) {
      set_combat_id(from.combat_id());
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_pvp_data()) {
      mutable_pvp_data()->::SProtoSpace::pvp_battle_init_data::MergeFrom(from.pvp_data());
    }
    if (from.has_pve_check_data()) {
      mutable_pve_check_data()->::SProtoSpace::pve_check_battle_init_data::MergeFrom(from.pve_check_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void create_battle_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_battle_data::CopyFrom(const create_battle_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_battle_data::IsInitialized() const {

  if (has_pvp_data()) {
    if (!this->pvp_data().IsInitialized()) return false;
  }
  if (has_pve_check_data()) {
    if (!this->pve_check_data().IsInitialized()) return false;
  }
  return true;
}

void create_battle_data::Swap(create_battle_data* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(combat_id_, other->combat_id_);
    std::swap(seed_, other->seed_);
    std::swap(pvp_data_, other->pvp_data_);
    std::swap(pve_check_data_, other->pve_check_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata create_battle_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = create_battle_data_descriptor_;
  metadata.reflection = create_battle_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int running_entity::kObjidFieldNumber;
const int running_entity::kPositionFieldNumber;
#endif  // !_MSC_VER

running_entity::running_entity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void running_entity::InitAsDefaultInstance() {
}

running_entity::running_entity(const running_entity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void running_entity::SharedCtor() {
  _cached_size_ = 0;
  objid_ = GOOGLE_ULONGLONG(0);
  position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

running_entity::~running_entity() {
  SharedDtor();
}

void running_entity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void running_entity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* running_entity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return running_entity_descriptor_;
}

const running_entity& running_entity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

running_entity* running_entity::default_instance_ = NULL;

running_entity* running_entity::New() const {
  return new running_entity;
}

void running_entity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = GOOGLE_ULONGLONG(0);
    position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool running_entity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional int32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void running_entity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 objid = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->objid(), output);
  }

  // optional int32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* running_entity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 objid = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->objid(), target);
  }

  // optional int32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int running_entity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 objid = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->objid());
    }

    // optional int32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void running_entity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const running_entity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const running_entity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void running_entity::MergeFrom(const running_entity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void running_entity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void running_entity::CopyFrom(const running_entity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool running_entity::IsInitialized() const {

  return true;
}

void running_entity::Swap(running_entity* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata running_entity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = running_entity_descriptor_;
  metadata.reflection = running_entity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int running_queue::kLenthFieldNumber;
const int running_queue::kEnitiesFieldNumber;
const int running_queue::kWaitEnitiesFieldNumber;
#endif  // !_MSC_VER

running_queue::running_queue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void running_queue::InitAsDefaultInstance() {
}

running_queue::running_queue(const running_queue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void running_queue::SharedCtor() {
  _cached_size_ = 0;
  lenth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

running_queue::~running_queue() {
  SharedDtor();
}

void running_queue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void running_queue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* running_queue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return running_queue_descriptor_;
}

const running_queue& running_queue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

running_queue* running_queue::default_instance_ = NULL;

running_queue* running_queue::New() const {
  return new running_queue;
}

void running_queue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lenth_ = 0;
  }
  enities_.Clear();
  wait_enities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool running_queue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lenth = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lenth_)));
          set_has_lenth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_enities;
        break;
      }

      // repeated .SProtoSpace.running_entity enities = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_enities;
        if (input->ExpectTag(26)) goto parse_wait_enities;
        break;
      }

      // repeated .SProtoSpace.running_entity wait_enities = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wait_enities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wait_enities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_wait_enities;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void running_queue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lenth = 1;
  if (has_lenth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lenth(), output);
  }

  // repeated .SProtoSpace.running_entity enities = 2;
  for (int i = 0; i < this->enities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->enities(i), output);
  }

  // repeated .SProtoSpace.running_entity wait_enities = 3;
  for (int i = 0; i < this->wait_enities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->wait_enities(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* running_queue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lenth = 1;
  if (has_lenth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lenth(), target);
  }

  // repeated .SProtoSpace.running_entity enities = 2;
  for (int i = 0; i < this->enities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->enities(i), target);
  }

  // repeated .SProtoSpace.running_entity wait_enities = 3;
  for (int i = 0; i < this->wait_enities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->wait_enities(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int running_queue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lenth = 1;
    if (has_lenth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lenth());
    }

  }
  // repeated .SProtoSpace.running_entity enities = 2;
  total_size += 1 * this->enities_size();
  for (int i = 0; i < this->enities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enities(i));
  }

  // repeated .SProtoSpace.running_entity wait_enities = 3;
  total_size += 1 * this->wait_enities_size();
  for (int i = 0; i < this->wait_enities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wait_enities(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void running_queue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const running_queue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const running_queue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void running_queue::MergeFrom(const running_queue& from) {
  GOOGLE_CHECK_NE(&from, this);
  enities_.MergeFrom(from.enities_);
  wait_enities_.MergeFrom(from.wait_enities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lenth()) {
      set_lenth(from.lenth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void running_queue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void running_queue::CopyFrom(const running_queue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool running_queue::IsInitialized() const {

  return true;
}

void running_queue::Swap(running_queue* other) {
  if (other != this) {
    std::swap(lenth_, other->lenth_);
    enities_.Swap(&other->enities_);
    wait_enities_.Swap(&other->wait_enities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata running_queue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = running_queue_descriptor_;
  metadata.reflection = running_queue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_hero_info::kUuidFieldNumber;
const int client_hero_info::kObjidFieldNumber;
const int client_hero_info::kTemplateIdFieldNumber;
const int client_hero_info::kLevelFieldNumber;
const int client_hero_info::kStarFieldNumber;
const int client_hero_info::kQualityFieldNumber;
const int client_hero_info::kNameFieldNumber;
#endif  // !_MSC_VER

client_hero_info::client_hero_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void client_hero_info::InitAsDefaultInstance() {
}

client_hero_info::client_hero_info(const client_hero_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void client_hero_info::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  objid_ = 0u;
  template_id_ = 0u;
  level_ = 0;
  star_ = 0;
  quality_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_hero_info::~client_hero_info() {
  SharedDtor();
}

void client_hero_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void client_hero_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_hero_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_hero_info_descriptor_;
}

const client_hero_info& client_hero_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

client_hero_info* client_hero_info::default_instance_ = NULL;

client_hero_info* client_hero_info::New() const {
  return new client_hero_info;
}

void client_hero_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    objid_ = 0u;
    template_id_ = 0u;
    level_ = 0;
    star_ = 0;
    quality_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_hero_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objid;
        break;
      }

      // required uint32 objid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_template_id;
        break;
      }

      // required uint32 template_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_star;
        break;
      }

      // required int32 star = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_quality;
        break;
      }

      // optional int32 quality = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void client_hero_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // required uint32 objid = 2;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->objid(), output);
  }

  // required uint32 template_id = 3;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->template_id(), output);
  }

  // required int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // required int32 star = 5;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->star(), output);
  }

  // optional int32 quality = 6;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->quality(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* client_hero_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // required uint32 objid = 2;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->objid(), target);
  }

  // required uint32 template_id = 3;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->template_id(), target);
  }

  // required int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // required int32 star = 5;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->star(), target);
  }

  // optional int32 quality = 6;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->quality(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int client_hero_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // required uint32 objid = 2;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->objid());
    }

    // required uint32 template_id = 3;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_id());
    }

    // required int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 star = 5;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 quality = 6;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_hero_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_hero_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_hero_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_hero_info::MergeFrom(const client_hero_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_hero_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_hero_info::CopyFrom(const client_hero_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_hero_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void client_hero_info::Swap(client_hero_info* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(objid_, other->objid_);
    std::swap(template_id_, other->template_id_);
    std::swap(level_, other->level_);
    std::swap(star_, other->star_);
    std::swap(quality_, other->quality_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_hero_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_hero_info_descriptor_;
  metadata.reflection = client_hero_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_battle_player_info::kIdFieldNumber;
const int client_battle_player_info::kNameFieldNumber;
const int client_battle_player_info::kLevelFieldNumber;
const int client_battle_player_info::kCampFieldNumber;
const int client_battle_player_info::kTypeFieldNumber;
const int client_battle_player_info::kHeroesFieldNumber;
#endif  // !_MSC_VER

client_battle_player_info::client_battle_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void client_battle_player_info::InitAsDefaultInstance() {
}

client_battle_player_info::client_battle_player_info(const client_battle_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void client_battle_player_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  camp_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_battle_player_info::~client_battle_player_info() {
  SharedDtor();
}

void client_battle_player_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void client_battle_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_battle_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_battle_player_info_descriptor_;
}

const client_battle_player_info& client_battle_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

client_battle_player_info* client_battle_player_info::default_instance_ = NULL;

client_battle_player_info* client_battle_player_info::New() const {
  return new client_battle_player_info;
}

void client_battle_player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    camp_ = 0;
    type_ = 0;
  }
  heroes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_battle_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_camp;
        break;
      }

      // required int32 camp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required .SProtoSpace.EPlayerType type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EPlayerType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EPlayerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_heroes;
        break;
      }

      // repeated .SProtoSpace.client_hero_info heroes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_heroes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void client_battle_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 camp = 4;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->camp(), output);
  }

  // required .SProtoSpace.EPlayerType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // repeated .SProtoSpace.client_hero_info heroes = 6;
  for (int i = 0; i < this->heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->heroes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* client_battle_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 camp = 4;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->camp(), target);
  }

  // required .SProtoSpace.EPlayerType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // repeated .SProtoSpace.client_hero_info heroes = 6;
  for (int i = 0; i < this->heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->heroes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int client_battle_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 camp = 4;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // required .SProtoSpace.EPlayerType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .SProtoSpace.client_hero_info heroes = 6;
  total_size += 1 * this->heroes_size();
  for (int i = 0; i < this->heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_battle_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_battle_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_battle_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_battle_player_info::MergeFrom(const client_battle_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroes_.MergeFrom(from.heroes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_battle_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_battle_player_info::CopyFrom(const client_battle_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_battle_player_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < heroes_size(); i++) {
    if (!this->heroes(i).IsInitialized()) return false;
  }
  return true;
}

void client_battle_player_info::Swap(client_battle_player_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(camp_, other->camp_);
    std::swap(type_, other->type_);
    heroes_.Swap(&other->heroes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_battle_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_battle_player_info_descriptor_;
  metadata.reflection = client_battle_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_pvp_battle_camp_data::kPlayersFieldNumber;
const int client_pvp_battle_camp_data::kInitPowerFieldNumber;
#endif  // !_MSC_VER

client_pvp_battle_camp_data::client_pvp_battle_camp_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void client_pvp_battle_camp_data::InitAsDefaultInstance() {
}

client_pvp_battle_camp_data::client_pvp_battle_camp_data(const client_pvp_battle_camp_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void client_pvp_battle_camp_data::SharedCtor() {
  _cached_size_ = 0;
  init_power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_pvp_battle_camp_data::~client_pvp_battle_camp_data() {
  SharedDtor();
}

void client_pvp_battle_camp_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void client_pvp_battle_camp_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_pvp_battle_camp_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_pvp_battle_camp_data_descriptor_;
}

const client_pvp_battle_camp_data& client_pvp_battle_camp_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

client_pvp_battle_camp_data* client_pvp_battle_camp_data::default_instance_ = NULL;

client_pvp_battle_camp_data* client_pvp_battle_camp_data::New() const {
  return new client_pvp_battle_camp_data;
}

void client_pvp_battle_camp_data::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    init_power_ = 0;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_pvp_battle_camp_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.client_battle_player_info players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectTag(16)) goto parse_init_power;
        break;
      }

      // required int32 init_power = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_power_)));
          set_has_init_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void client_pvp_battle_camp_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.client_battle_player_info players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  // required int32 init_power = 2;
  if (has_init_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->init_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* client_pvp_battle_camp_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.client_battle_player_info players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  // required int32 init_power = 2;
  if (has_init_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->init_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int client_pvp_battle_camp_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 init_power = 2;
    if (has_init_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_power());
    }

  }
  // repeated .SProtoSpace.client_battle_player_info players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_pvp_battle_camp_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_pvp_battle_camp_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_pvp_battle_camp_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_pvp_battle_camp_data::MergeFrom(const client_pvp_battle_camp_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_init_power()) {
      set_init_power(from.init_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_pvp_battle_camp_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_pvp_battle_camp_data::CopyFrom(const client_pvp_battle_camp_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_pvp_battle_camp_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void client_pvp_battle_camp_data::Swap(client_pvp_battle_camp_data* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(init_power_, other->init_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_pvp_battle_camp_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_pvp_battle_camp_data_descriptor_;
  metadata.reflection = client_pvp_battle_camp_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_pvp_battle_data::kCampsFieldNumber;
const int client_pvp_battle_data::kRunningDataFieldNumber;
const int client_pvp_battle_data::kRoundIndexFieldNumber;
const int client_pvp_battle_data::kOptFieldNumber;
const int client_pvp_battle_data::kSeedFieldNumber;
const int client_pvp_battle_data::kSeedCountFieldNumber;
#endif  // !_MSC_VER

client_pvp_battle_data::client_pvp_battle_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void client_pvp_battle_data::InitAsDefaultInstance() {
  running_data_ = const_cast< ::SProtoSpace::running_queue*>(&::SProtoSpace::running_queue::default_instance());
  opt_ = const_cast< ::SProtoSpace::round_op_param*>(&::SProtoSpace::round_op_param::default_instance());
}

client_pvp_battle_data::client_pvp_battle_data(const client_pvp_battle_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void client_pvp_battle_data::SharedCtor() {
  _cached_size_ = 0;
  running_data_ = NULL;
  round_index_ = 0;
  opt_ = NULL;
  seed_ = 0u;
  seed_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_pvp_battle_data::~client_pvp_battle_data() {
  SharedDtor();
}

void client_pvp_battle_data::SharedDtor() {
  if (this != default_instance_) {
    delete running_data_;
    delete opt_;
  }
}

void client_pvp_battle_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_pvp_battle_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_pvp_battle_data_descriptor_;
}

const client_pvp_battle_data& client_pvp_battle_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

client_pvp_battle_data* client_pvp_battle_data::default_instance_ = NULL;

client_pvp_battle_data* client_pvp_battle_data::New() const {
  return new client_pvp_battle_data;
}

void client_pvp_battle_data::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_running_data()) {
      if (running_data_ != NULL) running_data_->::SProtoSpace::running_queue::Clear();
    }
    round_index_ = 0;
    if (has_opt()) {
      if (opt_ != NULL) opt_->::SProtoSpace::round_op_param::Clear();
    }
    seed_ = 0u;
    seed_count_ = 0u;
  }
  camps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_pvp_battle_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.battle_camp_info camps = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_camps;
        if (input->ExpectTag(18)) goto parse_running_data;
        break;
      }

      // optional .SProtoSpace.running_queue running_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_running_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_running_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_round_index;
        break;
      }

      // optional int32 round_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_index_)));
          set_has_round_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_opt;
        break;
      }

      // optional .SProtoSpace.round_op_param opt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_seed;
        break;
      }

      // optional uint32 seed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_seed_count;
        break;
      }

      // optional uint32 seed_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seed_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seed_count_)));
          set_has_seed_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void client_pvp_battle_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.battle_camp_info camps = 1;
  for (int i = 0; i < this->camps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->camps(i), output);
  }

  // optional .SProtoSpace.running_queue running_data = 2;
  if (has_running_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->running_data(), output);
  }

  // optional int32 round_index = 3;
  if (has_round_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->round_index(), output);
  }

  // optional .SProtoSpace.round_op_param opt = 4;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->opt(), output);
  }

  // optional uint32 seed = 5;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seed(), output);
  }

  // optional uint32 seed_count = 6;
  if (has_seed_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seed_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* client_pvp_battle_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.battle_camp_info camps = 1;
  for (int i = 0; i < this->camps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->camps(i), target);
  }

  // optional .SProtoSpace.running_queue running_data = 2;
  if (has_running_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->running_data(), target);
  }

  // optional int32 round_index = 3;
  if (has_round_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->round_index(), target);
  }

  // optional .SProtoSpace.round_op_param opt = 4;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->opt(), target);
  }

  // optional uint32 seed = 5;
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seed(), target);
  }

  // optional uint32 seed_count = 6;
  if (has_seed_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seed_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int client_pvp_battle_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .SProtoSpace.running_queue running_data = 2;
    if (has_running_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->running_data());
    }

    // optional int32 round_index = 3;
    if (has_round_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_index());
    }

    // optional .SProtoSpace.round_op_param opt = 4;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opt());
    }

    // optional uint32 seed = 5;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seed());
    }

    // optional uint32 seed_count = 6;
    if (has_seed_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seed_count());
    }

  }
  // repeated .SProtoSpace.battle_camp_info camps = 1;
  total_size += 1 * this->camps_size();
  for (int i = 0; i < this->camps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_pvp_battle_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_pvp_battle_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_pvp_battle_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_pvp_battle_data::MergeFrom(const client_pvp_battle_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  camps_.MergeFrom(from.camps_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_running_data()) {
      mutable_running_data()->::SProtoSpace::running_queue::MergeFrom(from.running_data());
    }
    if (from.has_round_index()) {
      set_round_index(from.round_index());
    }
    if (from.has_opt()) {
      mutable_opt()->::SProtoSpace::round_op_param::MergeFrom(from.opt());
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_seed_count()) {
      set_seed_count(from.seed_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_pvp_battle_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_pvp_battle_data::CopyFrom(const client_pvp_battle_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_pvp_battle_data::IsInitialized() const {

  for (int i = 0; i < camps_size(); i++) {
    if (!this->camps(i).IsInitialized()) return false;
  }
  return true;
}

void client_pvp_battle_data::Swap(client_pvp_battle_data* other) {
  if (other != this) {
    camps_.Swap(&other->camps_);
    std::swap(running_data_, other->running_data_);
    std::swap(round_index_, other->round_index_);
    std::swap(opt_, other->opt_);
    std::swap(seed_, other->seed_);
    std::swap(seed_count_, other->seed_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_pvp_battle_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_pvp_battle_data_descriptor_;
  metadata.reflection = client_pvp_battle_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_battle_data::kTypeFieldNumber;
const int client_battle_data::kPvpDataFieldNumber;
#endif  // !_MSC_VER

client_battle_data::client_battle_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void client_battle_data::InitAsDefaultInstance() {
  pvp_data_ = const_cast< ::SProtoSpace::client_pvp_battle_data*>(&::SProtoSpace::client_pvp_battle_data::default_instance());
}

client_battle_data::client_battle_data(const client_battle_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void client_battle_data::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  pvp_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_battle_data::~client_battle_data() {
  SharedDtor();
}

void client_battle_data::SharedDtor() {
  if (this != default_instance_) {
    delete pvp_data_;
  }
}

void client_battle_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_battle_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_battle_data_descriptor_;
}

const client_battle_data& client_battle_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

client_battle_data* client_battle_data::default_instance_ = NULL;

client_battle_data* client_battle_data::New() const {
  return new client_battle_data;
}

void client_battle_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_pvp_data()) {
      if (pvp_data_ != NULL) pvp_data_->::SProtoSpace::client_pvp_battle_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_battle_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SProtoSpace.EBattleType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EBattleType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EBattleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pvp_data;
        break;
      }

      // optional .SProtoSpace.client_pvp_battle_data pvp_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pvp_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvp_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void client_battle_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SProtoSpace.EBattleType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .SProtoSpace.client_pvp_battle_data pvp_data = 2;
  if (has_pvp_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pvp_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* client_battle_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SProtoSpace.EBattleType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .SProtoSpace.client_pvp_battle_data pvp_data = 2;
  if (has_pvp_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pvp_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int client_battle_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SProtoSpace.EBattleType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .SProtoSpace.client_pvp_battle_data pvp_data = 2;
    if (has_pvp_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvp_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_battle_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_battle_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_battle_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_battle_data::MergeFrom(const client_battle_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pvp_data()) {
      mutable_pvp_data()->::SProtoSpace::client_pvp_battle_data::MergeFrom(from.pvp_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_battle_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_battle_data::CopyFrom(const client_battle_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_battle_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pvp_data()) {
    if (!this->pvp_data().IsInitialized()) return false;
  }
  return true;
}

void client_battle_data::Swap(client_battle_data* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(pvp_data_, other->pvp_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_battle_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_battle_data_descriptor_;
  metadata.reflection = client_battle_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_check_opt_data::kRoundIndexFieldNumber;
const int battle_check_opt_data::kOptFieldNumber;
const int battle_check_opt_data::kDataFieldNumber;
#endif  // !_MSC_VER

battle_check_opt_data::battle_check_opt_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_check_opt_data::InitAsDefaultInstance() {
  opt_ = const_cast< ::SProtoSpace::round_op_param*>(&::SProtoSpace::round_op_param::default_instance());
}

battle_check_opt_data::battle_check_opt_data(const battle_check_opt_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_check_opt_data::SharedCtor() {
  _cached_size_ = 0;
  round_index_ = 0;
  opt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_check_opt_data::~battle_check_opt_data() {
  SharedDtor();
}

void battle_check_opt_data::SharedDtor() {
  if (this != default_instance_) {
    delete opt_;
  }
}

void battle_check_opt_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_check_opt_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_check_opt_data_descriptor_;
}

const battle_check_opt_data& battle_check_opt_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

battle_check_opt_data* battle_check_opt_data::default_instance_ = NULL;

battle_check_opt_data* battle_check_opt_data::New() const {
  return new battle_check_opt_data;
}

void battle_check_opt_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    round_index_ = 0;
    if (has_opt()) {
      if (opt_ != NULL) opt_->::SProtoSpace::round_op_param::Clear();
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_check_opt_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 round_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_index_)));
          set_has_round_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_opt;
        break;
      }

      // optional .SProtoSpace.round_op_param opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .SProtoSpace.round_data data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_check_opt_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 round_index = 1;
  if (has_round_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->round_index(), output);
  }

  // optional .SProtoSpace.round_op_param opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->opt(), output);
  }

  // repeated .SProtoSpace.round_data data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_check_opt_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 round_index = 1;
  if (has_round_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->round_index(), target);
  }

  // optional .SProtoSpace.round_op_param opt = 2;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->opt(), target);
  }

  // repeated .SProtoSpace.round_data data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_check_opt_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 round_index = 1;
    if (has_round_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_index());
    }

    // optional .SProtoSpace.round_op_param opt = 2;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opt());
    }

  }
  // repeated .SProtoSpace.round_data data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_check_opt_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_check_opt_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_check_opt_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_check_opt_data::MergeFrom(const battle_check_opt_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_round_index()) {
      set_round_index(from.round_index());
    }
    if (from.has_opt()) {
      mutable_opt()->::SProtoSpace::round_op_param::MergeFrom(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_check_opt_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_check_opt_data::CopyFrom(const battle_check_opt_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_check_opt_data::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void battle_check_opt_data::Swap(battle_check_opt_data* other) {
  if (other != this) {
    std::swap(round_index_, other->round_index_);
    std::swap(opt_, other->opt_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_check_opt_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_check_opt_data_descriptor_;
  metadata.reflection = battle_check_opt_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int office_end_info::kRoundIndexFieldNumber;
const int office_end_info::kOptFieldNumber;
const int office_end_info::kDataFieldNumber;
#endif  // !_MSC_VER

office_end_info::office_end_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void office_end_info::InitAsDefaultInstance() {
  opt_ = const_cast< ::SProtoSpace::round_op_param*>(&::SProtoSpace::round_op_param::default_instance());
}

office_end_info::office_end_info(const office_end_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void office_end_info::SharedCtor() {
  _cached_size_ = 0;
  round_index_ = 0;
  opt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

office_end_info::~office_end_info() {
  SharedDtor();
}

void office_end_info::SharedDtor() {
  if (this != default_instance_) {
    delete opt_;
  }
}

void office_end_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* office_end_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return office_end_info_descriptor_;
}

const office_end_info& office_end_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

office_end_info* office_end_info::default_instance_ = NULL;

office_end_info* office_end_info::New() const {
  return new office_end_info;
}

void office_end_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    round_index_ = 0;
    if (has_opt()) {
      if (opt_ != NULL) opt_->::SProtoSpace::round_op_param::Clear();
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool office_end_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 round_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_index_)));
          set_has_round_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_opt;
        break;
      }

      // optional .SProtoSpace.round_op_param opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .SProtoSpace.round_data data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void office_end_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 round_index = 1;
  if (has_round_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->round_index(), output);
  }

  // optional .SProtoSpace.round_op_param opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->opt(), output);
  }

  // repeated .SProtoSpace.round_data data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* office_end_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 round_index = 1;
  if (has_round_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->round_index(), target);
  }

  // optional .SProtoSpace.round_op_param opt = 2;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->opt(), target);
  }

  // repeated .SProtoSpace.round_data data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int office_end_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 round_index = 1;
    if (has_round_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_index());
    }

    // optional .SProtoSpace.round_op_param opt = 2;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opt());
    }

  }
  // repeated .SProtoSpace.round_data data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void office_end_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const office_end_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const office_end_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void office_end_info::MergeFrom(const office_end_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_round_index()) {
      set_round_index(from.round_index());
    }
    if (from.has_opt()) {
      mutable_opt()->::SProtoSpace::round_op_param::MergeFrom(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void office_end_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void office_end_info::CopyFrom(const office_end_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool office_end_info::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void office_end_info::Swap(office_end_info* other) {
  if (other != this) {
    std::swap(round_index_, other->round_index_);
    std::swap(opt_, other->opt_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata office_end_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = office_end_info_descriptor_;
  metadata.reflection = office_end_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_replay_round_info::kRoundIndexFieldNumber;
const int battle_replay_round_info::kOptsFieldNumber;
#endif  // !_MSC_VER

battle_replay_round_info::battle_replay_round_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_replay_round_info::InitAsDefaultInstance() {
}

battle_replay_round_info::battle_replay_round_info(const battle_replay_round_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_replay_round_info::SharedCtor() {
  _cached_size_ = 0;
  round_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_replay_round_info::~battle_replay_round_info() {
  SharedDtor();
}

void battle_replay_round_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_replay_round_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_replay_round_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_replay_round_info_descriptor_;
}

const battle_replay_round_info& battle_replay_round_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

battle_replay_round_info* battle_replay_round_info::default_instance_ = NULL;

battle_replay_round_info* battle_replay_round_info::New() const {
  return new battle_replay_round_info;
}

void battle_replay_round_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    round_index_ = 0;
  }
  opts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_replay_round_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 round_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_index_)));
          set_has_round_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_opts;
        break;
      }

      // repeated .SProtoSpace.battle_check_opt_data opts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_opts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_replay_round_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 round_index = 1;
  if (has_round_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->round_index(), output);
  }

  // repeated .SProtoSpace.battle_check_opt_data opts = 2;
  for (int i = 0; i < this->opts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->opts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_replay_round_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 round_index = 1;
  if (has_round_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->round_index(), target);
  }

  // repeated .SProtoSpace.battle_check_opt_data opts = 2;
  for (int i = 0; i < this->opts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->opts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_replay_round_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 round_index = 1;
    if (has_round_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_index());
    }

  }
  // repeated .SProtoSpace.battle_check_opt_data opts = 2;
  total_size += 1 * this->opts_size();
  for (int i = 0; i < this->opts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_replay_round_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_replay_round_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_replay_round_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_replay_round_info::MergeFrom(const battle_replay_round_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  opts_.MergeFrom(from.opts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_round_index()) {
      set_round_index(from.round_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_replay_round_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_replay_round_info::CopyFrom(const battle_replay_round_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_replay_round_info::IsInitialized() const {

  for (int i = 0; i < opts_size(); i++) {
    if (!this->opts(i).IsInitialized()) return false;
  }
  return true;
}

void battle_replay_round_info::Swap(battle_replay_round_info* other) {
  if (other != this) {
    std::swap(round_index_, other->round_index_);
    opts_.Swap(&other->opts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_replay_round_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_replay_round_info_descriptor_;
  metadata.reflection = battle_replay_round_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_replay_turn_info::kTurnIndexFieldNumber;
const int battle_replay_turn_info::kInitDataFieldNumber;
const int battle_replay_turn_info::kOptsFieldNumber;
#endif  // !_MSC_VER

battle_replay_turn_info::battle_replay_turn_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_replay_turn_info::InitAsDefaultInstance() {
  init_data_ = const_cast< ::SProtoSpace::pvp_battle_init_data*>(&::SProtoSpace::pvp_battle_init_data::default_instance());
}

battle_replay_turn_info::battle_replay_turn_info(const battle_replay_turn_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_replay_turn_info::SharedCtor() {
  _cached_size_ = 0;
  turn_index_ = 0;
  init_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_replay_turn_info::~battle_replay_turn_info() {
  SharedDtor();
}

void battle_replay_turn_info::SharedDtor() {
  if (this != default_instance_) {
    delete init_data_;
  }
}

void battle_replay_turn_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_replay_turn_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_replay_turn_info_descriptor_;
}

const battle_replay_turn_info& battle_replay_turn_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

battle_replay_turn_info* battle_replay_turn_info::default_instance_ = NULL;

battle_replay_turn_info* battle_replay_turn_info::New() const {
  return new battle_replay_turn_info;
}

void battle_replay_turn_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    turn_index_ = 0;
    if (has_init_data()) {
      if (init_data_ != NULL) init_data_->::SProtoSpace::pvp_battle_init_data::Clear();
    }
  }
  opts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_replay_turn_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 turn_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turn_index_)));
          set_has_turn_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_init_data;
        break;
      }

      // optional .SProtoSpace.pvp_battle_init_data init_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_init_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_opts;
        break;
      }

      // repeated .SProtoSpace.battle_replay_round_info opts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_opts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_replay_turn_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 turn_index = 1;
  if (has_turn_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->turn_index(), output);
  }

  // optional .SProtoSpace.pvp_battle_init_data init_data = 2;
  if (has_init_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->init_data(), output);
  }

  // repeated .SProtoSpace.battle_replay_round_info opts = 3;
  for (int i = 0; i < this->opts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->opts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_replay_turn_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 turn_index = 1;
  if (has_turn_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->turn_index(), target);
  }

  // optional .SProtoSpace.pvp_battle_init_data init_data = 2;
  if (has_init_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->init_data(), target);
  }

  // repeated .SProtoSpace.battle_replay_round_info opts = 3;
  for (int i = 0; i < this->opts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->opts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_replay_turn_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 turn_index = 1;
    if (has_turn_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turn_index());
    }

    // optional .SProtoSpace.pvp_battle_init_data init_data = 2;
    if (has_init_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->init_data());
    }

  }
  // repeated .SProtoSpace.battle_replay_round_info opts = 3;
  total_size += 1 * this->opts_size();
  for (int i = 0; i < this->opts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_replay_turn_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_replay_turn_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_replay_turn_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_replay_turn_info::MergeFrom(const battle_replay_turn_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  opts_.MergeFrom(from.opts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_turn_index()) {
      set_turn_index(from.turn_index());
    }
    if (from.has_init_data()) {
      mutable_init_data()->::SProtoSpace::pvp_battle_init_data::MergeFrom(from.init_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_replay_turn_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_replay_turn_info::CopyFrom(const battle_replay_turn_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_replay_turn_info::IsInitialized() const {

  if (has_init_data()) {
    if (!this->init_data().IsInitialized()) return false;
  }
  for (int i = 0; i < opts_size(); i++) {
    if (!this->opts(i).IsInitialized()) return false;
  }
  return true;
}

void battle_replay_turn_info::Swap(battle_replay_turn_info* other) {
  if (other != this) {
    std::swap(turn_index_, other->turn_index_);
    std::swap(init_data_, other->init_data_);
    opts_.Swap(&other->opts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_replay_turn_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_replay_turn_info_descriptor_;
  metadata.reflection = battle_replay_turn_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_replay_info::kTypeFieldNumber;
const int battle_replay_info::kCombatIdFieldNumber;
const int battle_replay_info::kSeedFieldNumber;
const int battle_replay_info::kWinnerCampFieldNumber;
const int battle_replay_info::kOptsFieldNumber;
#endif  // !_MSC_VER

battle_replay_info::battle_replay_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_replay_info::InitAsDefaultInstance() {
}

battle_replay_info::battle_replay_info(const battle_replay_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_replay_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  combat_id_ = 0u;
  seed_ = 0u;
  winner_camp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_replay_info::~battle_replay_info() {
  SharedDtor();
}

void battle_replay_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_replay_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_replay_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_replay_info_descriptor_;
}

const battle_replay_info& battle_replay_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

battle_replay_info* battle_replay_info::default_instance_ = NULL;

battle_replay_info* battle_replay_info::New() const {
  return new battle_replay_info;
}

void battle_replay_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    combat_id_ = 0u;
    seed_ = 0u;
    winner_camp_ = 0;
  }
  opts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_replay_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.EBattleType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EBattleType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EBattleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_combat_id;
        break;
      }

      // optional uint32 combat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combat_id_)));
          set_has_combat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seed;
        break;
      }

      // optional uint32 seed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_winner_camp;
        break;
      }

      // optional int32 winner_camp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_camp_)));
          set_has_winner_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_opts;
        break;
      }

      // repeated .SProtoSpace.battle_replay_turn_info opts = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_opts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_replay_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.EBattleType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 combat_id = 2;
  if (has_combat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->combat_id(), output);
  }

  // optional uint32 seed = 3;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seed(), output);
  }

  // optional int32 winner_camp = 4;
  if (has_winner_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->winner_camp(), output);
  }

  // repeated .SProtoSpace.battle_replay_turn_info opts = 5;
  for (int i = 0; i < this->opts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->opts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_replay_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.EBattleType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 combat_id = 2;
  if (has_combat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->combat_id(), target);
  }

  // optional uint32 seed = 3;
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seed(), target);
  }

  // optional int32 winner_camp = 4;
  if (has_winner_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->winner_camp(), target);
  }

  // repeated .SProtoSpace.battle_replay_turn_info opts = 5;
  for (int i = 0; i < this->opts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->opts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_replay_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.EBattleType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 combat_id = 2;
    if (has_combat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combat_id());
    }

    // optional uint32 seed = 3;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seed());
    }

    // optional int32 winner_camp = 4;
    if (has_winner_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner_camp());
    }

  }
  // repeated .SProtoSpace.battle_replay_turn_info opts = 5;
  total_size += 1 * this->opts_size();
  for (int i = 0; i < this->opts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_replay_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_replay_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_replay_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_replay_info::MergeFrom(const battle_replay_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  opts_.MergeFrom(from.opts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_combat_id()) {
      set_combat_id(from.combat_id());
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_winner_camp()) {
      set_winner_camp(from.winner_camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_replay_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_replay_info::CopyFrom(const battle_replay_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_replay_info::IsInitialized() const {

  for (int i = 0; i < opts_size(); i++) {
    if (!this->opts(i).IsInitialized()) return false;
  }
  return true;
}

void battle_replay_info::Swap(battle_replay_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(combat_id_, other->combat_id_);
    std::swap(seed_, other->seed_);
    std::swap(winner_camp_, other->winner_camp_);
    opts_.Swap(&other->opts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_replay_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_replay_info_descriptor_;
  metadata.reflection = battle_replay_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lsg_position_info::kXFieldNumber;
const int lsg_position_info::kYFieldNumber;
const int lsg_position_info::kPositionNameFieldNumber;
#endif  // !_MSC_VER

lsg_position_info::lsg_position_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lsg_position_info::InitAsDefaultInstance() {
}

lsg_position_info::lsg_position_info(const lsg_position_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lsg_position_info::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  position_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lsg_position_info::~lsg_position_info() {
  SharedDtor();
}

void lsg_position_info::SharedDtor() {
  if (position_name_ != &::google::protobuf::internal::kEmptyString) {
    delete position_name_;
  }
  if (this != default_instance_) {
  }
}

void lsg_position_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lsg_position_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lsg_position_info_descriptor_;
}

const lsg_position_info& lsg_position_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

lsg_position_info* lsg_position_info::default_instance_ = NULL;

lsg_position_info* lsg_position_info::New() const {
  return new lsg_position_info;
}

void lsg_position_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    if (has_position_name()) {
      if (position_name_ != &::google::protobuf::internal::kEmptyString) {
        position_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lsg_position_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position_name;
        break;
      }

      // optional string position_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->position_name().data(), this->position_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lsg_position_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional string position_name = 3;
  if (has_position_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->position_name().data(), this->position_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->position_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lsg_position_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional string position_name = 3;
  if (has_position_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->position_name().data(), this->position_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->position_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lsg_position_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional string position_name = 3;
    if (has_position_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lsg_position_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lsg_position_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lsg_position_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lsg_position_info::MergeFrom(const lsg_position_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_position_name()) {
      set_position_name(from.position_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lsg_position_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lsg_position_info::CopyFrom(const lsg_position_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lsg_position_info::IsInitialized() const {

  return true;
}

void lsg_position_info::Swap(lsg_position_info* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(position_name_, other->position_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lsg_position_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lsg_position_info_descriptor_;
  metadata.reflection = lsg_position_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int comment_info::kCommentIdFieldNumber;
const int comment_info::kRoleIdFieldNumber;
const int comment_info::kRoleNameFieldNumber;
const int comment_info::kRoleSexFieldNumber;
const int comment_info::kRoleBorderFieldNumber;
const int comment_info::kRoleLvFieldNumber;
const int comment_info::kToRoleIdFieldNumber;
const int comment_info::kToRoleNameFieldNumber;
const int comment_info::kCommentFieldNumber;
const int comment_info::kTimeFieldNumber;
#endif  // !_MSC_VER

comment_info::comment_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void comment_info::InitAsDefaultInstance() {
}

comment_info::comment_info(const comment_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void comment_info::SharedCtor() {
  _cached_size_ = 0;
  comment_id_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_sex_ = 0;
  role_border_ = 0;
  role_lv_ = 0;
  to_role_id_ = GOOGLE_ULONGLONG(0);
  to_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

comment_info::~comment_info() {
  SharedDtor();
}

void comment_info::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_role_name_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void comment_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* comment_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return comment_info_descriptor_;
}

const comment_info& comment_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

comment_info* comment_info::default_instance_ = NULL;

comment_info* comment_info::New() const {
  return new comment_info;
}

void comment_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    comment_id_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    role_sex_ = 0;
    role_border_ = 0;
    role_lv_ = 0;
    to_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_to_role_name()) {
      if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
        to_role_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool comment_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 comment_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_sex;
        break;
      }

      // optional int32 role_sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_sex_)));
          set_has_role_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role_border;
        break;
      }

      // optional int32 role_border = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_border:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_border_)));
          set_has_role_border();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_role_lv;
        break;
      }

      // optional int32 role_lv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_lv_)));
          set_has_role_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_to_role_id;
        break;
      }

      // optional uint64 to_role_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_role_id_)));
          set_has_to_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_to_role_name;
        break;
      }

      // optional string to_role_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_role_name().data(), this->to_role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_comment;
        break;
      }

      // optional string comment = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_time;
        break;
      }

      // optional uint64 time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void comment_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 comment_id = 1;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->comment_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional int32 role_sex = 4;
  if (has_role_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->role_sex(), output);
  }

  // optional int32 role_border = 5;
  if (has_role_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->role_border(), output);
  }

  // optional int32 role_lv = 6;
  if (has_role_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->role_lv(), output);
  }

  // optional uint64 to_role_id = 7;
  if (has_to_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->to_role_id(), output);
  }

  // optional string to_role_name = 8;
  if (has_to_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_role_name().data(), this->to_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->to_role_name(), output);
  }

  // optional string comment = 9;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->comment(), output);
  }

  // optional uint64 time = 10;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* comment_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 comment_id = 1;
  if (has_comment_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->comment_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional int32 role_sex = 4;
  if (has_role_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->role_sex(), target);
  }

  // optional int32 role_border = 5;
  if (has_role_border()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->role_border(), target);
  }

  // optional int32 role_lv = 6;
  if (has_role_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->role_lv(), target);
  }

  // optional uint64 to_role_id = 7;
  if (has_to_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->to_role_id(), target);
  }

  // optional string to_role_name = 8;
  if (has_to_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_role_name().data(), this->to_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->to_role_name(), target);
  }

  // optional string comment = 9;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->comment(), target);
  }

  // optional uint64 time = 10;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int comment_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 comment_id = 1;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->comment_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional int32 role_sex = 4;
    if (has_role_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_sex());
    }

    // optional int32 role_border = 5;
    if (has_role_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_border());
    }

    // optional int32 role_lv = 6;
    if (has_role_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_lv());
    }

    // optional uint64 to_role_id = 7;
    if (has_to_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_role_id());
    }

    // optional string to_role_name = 8;
    if (has_to_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_role_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string comment = 9;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional uint64 time = 10;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void comment_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const comment_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const comment_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void comment_info::MergeFrom(const comment_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_sex()) {
      set_role_sex(from.role_sex());
    }
    if (from.has_role_border()) {
      set_role_border(from.role_border());
    }
    if (from.has_role_lv()) {
      set_role_lv(from.role_lv());
    }
    if (from.has_to_role_id()) {
      set_to_role_id(from.to_role_id());
    }
    if (from.has_to_role_name()) {
      set_to_role_name(from.to_role_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void comment_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void comment_info::CopyFrom(const comment_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool comment_info::IsInitialized() const {

  return true;
}

void comment_info::Swap(comment_info* other) {
  if (other != this) {
    std::swap(comment_id_, other->comment_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_sex_, other->role_sex_);
    std::swap(role_border_, other->role_border_);
    std::swap(role_lv_, other->role_lv_);
    std::swap(to_role_id_, other->to_role_id_);
    std::swap(to_role_name_, other->to_role_name_);
    std::swap(comment_, other->comment_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata comment_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = comment_info_descriptor_;
  metadata.reflection = comment_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int comment_all::kCommentListFieldNumber;
const int comment_all::kIndexFieldNumber;
#endif  // !_MSC_VER

comment_all::comment_all()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void comment_all::InitAsDefaultInstance() {
}

comment_all::comment_all(const comment_all& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void comment_all::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

comment_all::~comment_all() {
  SharedDtor();
}

void comment_all::SharedDtor() {
  if (this != default_instance_) {
  }
}

void comment_all::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* comment_all::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return comment_all_descriptor_;
}

const comment_all& comment_all::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

comment_all* comment_all::default_instance_ = NULL;

comment_all* comment_all::New() const {
  return new comment_all;
}

void comment_all::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    index_ = 0;
  }
  comment_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool comment_all::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.comment_info comment_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_comment_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_comment_list;
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void comment_all::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.comment_info comment_list = 1;
  for (int i = 0; i < this->comment_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->comment_list(i), output);
  }

  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* comment_all::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.comment_info comment_list = 1;
  for (int i = 0; i < this->comment_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->comment_list(i), target);
  }

  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int comment_all::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  // repeated .SProtoSpace.comment_info comment_list = 1;
  total_size += 1 * this->comment_list_size();
  for (int i = 0; i < this->comment_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comment_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void comment_all::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const comment_all* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const comment_all*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void comment_all::MergeFrom(const comment_all& from) {
  GOOGLE_CHECK_NE(&from, this);
  comment_list_.MergeFrom(from.comment_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void comment_all::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void comment_all::CopyFrom(const comment_all& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool comment_all::IsInitialized() const {

  return true;
}

void comment_all::Swap(comment_all* other) {
  if (other != this) {
    comment_list_.Swap(&other->comment_list_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata comment_all::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = comment_all_descriptor_;
  metadata.reflection = comment_all_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int date_info::kYearFieldNumber;
const int date_info::kMonthFieldNumber;
const int date_info::kDayFieldNumber;
#endif  // !_MSC_VER

date_info::date_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void date_info::InitAsDefaultInstance() {
}

date_info::date_info(const date_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void date_info::SharedCtor() {
  _cached_size_ = 0;
  year_ = 2000u;
  month_ = 1u;
  day_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

date_info::~date_info() {
  SharedDtor();
}

void date_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void date_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* date_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return date_info_descriptor_;
}

const date_info& date_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

date_info* date_info::default_instance_ = NULL;

date_info* date_info::New() const {
  return new date_info;
}

void date_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    year_ = 2000u;
    month_ = 1u;
    day_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool date_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 year = 1 [default = 2000];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_month;
        break;
      }

      // optional uint32 month = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_day;
        break;
      }

      // optional uint32 day = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void date_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 year = 1 [default = 2000];
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->year(), output);
  }

  // optional uint32 month = 2 [default = 1];
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->month(), output);
  }

  // optional uint32 day = 3 [default = 1];
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* date_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 year = 1 [default = 2000];
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->year(), target);
  }

  // optional uint32 month = 2 [default = 1];
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->month(), target);
  }

  // optional uint32 day = 3 [default = 1];
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int date_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 year = 1 [default = 2000];
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

    // optional uint32 month = 2 [default = 1];
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // optional uint32 day = 3 [default = 1];
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void date_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const date_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const date_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void date_info::MergeFrom(const date_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void date_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void date_info::CopyFrom(const date_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool date_info::IsInitialized() const {

  return true;
}

void date_info::Swap(date_info* other) {
  if (other != this) {
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata date_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = date_info_descriptor_;
  metadata.reflection = date_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int show_player_base::kUuidFieldNumber;
const int show_player_base::kLvFieldNumber;
const int show_player_base::kNameFieldNumber;
const int show_player_base::kSexFieldNumber;
const int show_player_base::kLikeFieldNumber;
const int show_player_base::kTitleFieldNumber;
const int show_player_base::kPartnerIdFieldNumber;
const int show_player_base::kPartnerNameFieldNumber;
const int show_player_base::kOfficeFieldNumber;
const int show_player_base::kFimilyIdFieldNumber;
const int show_player_base::kFimilyNameFieldNumber;
const int show_player_base::kSignatureFieldNumber;
const int show_player_base::kPositionFieldNumber;
const int show_player_base::kLikedListFieldNumber;
const int show_player_base::kBorderFieldNumber;
const int show_player_base::kBirthdayFieldNumber;
const int show_player_base::kStarSignFieldNumber;
const int show_player_base::kPopularityFieldNumber;
const int show_player_base::kCharmFieldNumber;
const int show_player_base::kLabelsFieldNumber;
const int show_player_base::kFightValueFieldNumber;
#endif  // !_MSC_VER

show_player_base::show_player_base()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void show_player_base::InitAsDefaultInstance() {
  position_ = const_cast< ::SProtoSpace::lsg_position_info*>(&::SProtoSpace::lsg_position_info::default_instance());
  birthday_ = const_cast< ::SProtoSpace::date_info*>(&::SProtoSpace::date_info::default_instance());
}

show_player_base::show_player_base(const show_player_base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void show_player_base::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  lv_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  like_ = 0u;
  title_ = 0u;
  partner_id_ = GOOGLE_ULONGLONG(0);
  partner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  office_ = 0u;
  fimily_id_ = GOOGLE_ULONGLONG(0);
  fimily_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_ = NULL;
  border_ = 0u;
  birthday_ = NULL;
  star_sign_ = 1u;
  popularity_ = 0u;
  charm_ = 0u;
  fight_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

show_player_base::~show_player_base() {
  SharedDtor();
}

void show_player_base::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (partner_name_ != &::google::protobuf::internal::kEmptyString) {
    delete partner_name_;
  }
  if (fimily_name_ != &::google::protobuf::internal::kEmptyString) {
    delete fimily_name_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
    delete position_;
    delete birthday_;
  }
}

void show_player_base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* show_player_base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return show_player_base_descriptor_;
}

const show_player_base& show_player_base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5fbattletype_2eproto();
  return *default_instance_;
}

show_player_base* show_player_base::default_instance_ = NULL;

show_player_base* show_player_base::New() const {
  return new show_player_base;
}

void show_player_base::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    lv_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    like_ = 0u;
    title_ = 0u;
    partner_id_ = GOOGLE_ULONGLONG(0);
    if (has_partner_name()) {
      if (partner_name_ != &::google::protobuf::internal::kEmptyString) {
        partner_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    office_ = 0u;
    fimily_id_ = GOOGLE_ULONGLONG(0);
    if (has_fimily_name()) {
      if (fimily_name_ != &::google::protobuf::internal::kEmptyString) {
        fimily_name_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::SProtoSpace::lsg_position_info::Clear();
    }
    border_ = 0u;
    if (has_birthday()) {
      if (birthday_ != NULL) birthday_->::SProtoSpace::date_info::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    star_sign_ = 1u;
    popularity_ = 0u;
    charm_ = 0u;
    fight_value_ = 0;
  }
  liked_list_.Clear();
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool show_player_base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional int32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_like;
        break;
      }

      // optional uint32 like = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_like:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &like_)));
          set_has_like();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_title;
        break;
      }

      // optional uint32 title = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_partner_id;
        break;
      }

      // optional uint64 partner_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &partner_id_)));
          set_has_partner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_partner_name;
        break;
      }

      // optional string partner_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->partner_name().data(), this->partner_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_office;
        break;
      }

      // optional uint32 office = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &office_)));
          set_has_office();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fimily_id;
        break;
      }

      // optional uint64 fimily_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fimily_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fimily_id_)));
          set_has_fimily_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_fimily_name;
        break;
      }

      // optional string fimily_name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fimily_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fimily_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fimily_name().data(), this->fimily_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_signature;
        break;
      }

      // optional string signature = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_position;
        break;
      }

      // optional .SProtoSpace.lsg_position_info position = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_liked_list;
        break;
      }

      // repeated uint64 liked_list = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_liked_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 128, input, this->mutable_liked_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_liked_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_liked_list;
        if (input->ExpectTag(144)) goto parse_border;
        break;
      }

      // optional uint32 border = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_border:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &border_)));
          set_has_border();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_birthday;
        break;
      }

      // optional .SProtoSpace.date_info birthday = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_birthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_birthday()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_star_sign;
        break;
      }

      // optional uint32 star_sign = 20 [default = 1];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_sign_)));
          set_has_star_sign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_popularity;
        break;
      }

      // optional uint32 popularity = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_popularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &popularity_)));
          set_has_popularity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_charm;
        break;
      }

      // optional uint32 charm = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charm_)));
          set_has_charm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_labels;
        break;
      }

      // repeated uint32 labels = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_labels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 184, input, this->mutable_labels())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_labels())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_labels;
        if (input->ExpectTag(192)) goto parse_fight_value;
        break;
      }

      // optional int32 fight_value = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_value_)));
          set_has_fight_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void show_player_base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lv(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // optional uint32 like = 6;
  if (has_like()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->like(), output);
  }

  // optional uint32 title = 7;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->title(), output);
  }

  // optional uint64 partner_id = 8;
  if (has_partner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->partner_id(), output);
  }

  // optional string partner_name = 9;
  if (has_partner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partner_name().data(), this->partner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->partner_name(), output);
  }

  // optional uint32 office = 10;
  if (has_office()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->office(), output);
  }

  // optional uint64 fimily_id = 11;
  if (has_fimily_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->fimily_id(), output);
  }

  // optional string fimily_name = 12;
  if (has_fimily_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fimily_name().data(), this->fimily_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->fimily_name(), output);
  }

  // optional string signature = 13;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->signature(), output);
  }

  // optional .SProtoSpace.lsg_position_info position = 14;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->position(), output);
  }

  // repeated uint64 liked_list = 16;
  for (int i = 0; i < this->liked_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      16, this->liked_list(i), output);
  }

  // optional uint32 border = 18;
  if (has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->border(), output);
  }

  // optional .SProtoSpace.date_info birthday = 19;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->birthday(), output);
  }

  // optional uint32 star_sign = 20 [default = 1];
  if (has_star_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->star_sign(), output);
  }

  // optional uint32 popularity = 21 [default = 0];
  if (has_popularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->popularity(), output);
  }

  // optional uint32 charm = 22 [default = 0];
  if (has_charm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->charm(), output);
  }

  // repeated uint32 labels = 23;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      23, this->labels(i), output);
  }

  // optional int32 fight_value = 24;
  if (has_fight_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->fight_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* show_player_base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lv(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 like = 6;
  if (has_like()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->like(), target);
  }

  // optional uint32 title = 7;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->title(), target);
  }

  // optional uint64 partner_id = 8;
  if (has_partner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->partner_id(), target);
  }

  // optional string partner_name = 9;
  if (has_partner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partner_name().data(), this->partner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->partner_name(), target);
  }

  // optional uint32 office = 10;
  if (has_office()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->office(), target);
  }

  // optional uint64 fimily_id = 11;
  if (has_fimily_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->fimily_id(), target);
  }

  // optional string fimily_name = 12;
  if (has_fimily_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fimily_name().data(), this->fimily_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->fimily_name(), target);
  }

  // optional string signature = 13;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->signature(), target);
  }

  // optional .SProtoSpace.lsg_position_info position = 14;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->position(), target);
  }

  // repeated uint64 liked_list = 16;
  for (int i = 0; i < this->liked_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(16, this->liked_list(i), target);
  }

  // optional uint32 border = 18;
  if (has_border()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->border(), target);
  }

  // optional .SProtoSpace.date_info birthday = 19;
  if (has_birthday()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->birthday(), target);
  }

  // optional uint32 star_sign = 20 [default = 1];
  if (has_star_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->star_sign(), target);
  }

  // optional uint32 popularity = 21 [default = 0];
  if (has_popularity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->popularity(), target);
  }

  // optional uint32 charm = 22 [default = 0];
  if (has_charm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->charm(), target);
  }

  // repeated uint32 labels = 23;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(23, this->labels(i), target);
  }

  // optional int32 fight_value = 24;
  if (has_fight_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->fight_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int show_player_base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional uint32 like = 6;
    if (has_like()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->like());
    }

    // optional uint32 title = 7;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->title());
    }

    // optional uint64 partner_id = 8;
    if (has_partner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->partner_id());
    }

    // optional string partner_name = 9;
    if (has_partner_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partner_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 office = 10;
    if (has_office()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->office());
    }

    // optional uint64 fimily_id = 11;
    if (has_fimily_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fimily_id());
    }

    // optional string fimily_name = 12;
    if (has_fimily_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fimily_name());
    }

    // optional string signature = 13;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional .SProtoSpace.lsg_position_info position = 14;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional uint32 border = 18;
    if (has_border()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->border());
    }

    // optional .SProtoSpace.date_info birthday = 19;
    if (has_birthday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->birthday());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 star_sign = 20 [default = 1];
    if (has_star_sign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_sign());
    }

    // optional uint32 popularity = 21 [default = 0];
    if (has_popularity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->popularity());
    }

    // optional uint32 charm = 22 [default = 0];
    if (has_charm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charm());
    }

    // optional int32 fight_value = 24;
    if (has_fight_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_value());
    }

  }
  // repeated uint64 liked_list = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->liked_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->liked_list(i));
    }
    total_size += 2 * this->liked_list_size() + data_size;
  }

  // repeated uint32 labels = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->labels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->labels(i));
    }
    total_size += 2 * this->labels_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void show_player_base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const show_player_base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const show_player_base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void show_player_base::MergeFrom(const show_player_base& from) {
  GOOGLE_CHECK_NE(&from, this);
  liked_list_.MergeFrom(from.liked_list_);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_like()) {
      set_like(from.like());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_partner_id()) {
      set_partner_id(from.partner_id());
    }
    if (from.has_partner_name()) {
      set_partner_name(from.partner_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_office()) {
      set_office(from.office());
    }
    if (from.has_fimily_id()) {
      set_fimily_id(from.fimily_id());
    }
    if (from.has_fimily_name()) {
      set_fimily_name(from.fimily_name());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_position()) {
      mutable_position()->::SProtoSpace::lsg_position_info::MergeFrom(from.position());
    }
    if (from.has_border()) {
      set_border(from.border());
    }
    if (from.has_birthday()) {
      mutable_birthday()->::SProtoSpace::date_info::MergeFrom(from.birthday());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_star_sign()) {
      set_star_sign(from.star_sign());
    }
    if (from.has_popularity()) {
      set_popularity(from.popularity());
    }
    if (from.has_charm()) {
      set_charm(from.charm());
    }
    if (from.has_fight_value()) {
      set_fight_value(from.fight_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void show_player_base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void show_player_base::CopyFrom(const show_player_base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool show_player_base::IsInitialized() const {

  return true;
}

void show_player_base::Swap(show_player_base* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(lv_, other->lv_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(like_, other->like_);
    std::swap(title_, other->title_);
    std::swap(partner_id_, other->partner_id_);
    std::swap(partner_name_, other->partner_name_);
    std::swap(office_, other->office_);
    std::swap(fimily_id_, other->fimily_id_);
    std::swap(fimily_name_, other->fimily_name_);
    std::swap(signature_, other->signature_);
    std::swap(position_, other->position_);
    liked_list_.Swap(&other->liked_list_);
    std::swap(border_, other->border_);
    std::swap(birthday_, other->birthday_);
    std::swap(star_sign_, other->star_sign_);
    std::swap(popularity_, other->popularity_);
    std::swap(charm_, other->charm_);
    labels_.Swap(&other->labels_);
    std::swap(fight_value_, other->fight_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata show_player_base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = show_player_base_descriptor_;
  metadata.reflection = show_player_base_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
