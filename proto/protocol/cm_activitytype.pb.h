// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cm_activitytype.proto

#ifndef PROTOBUF_cm_5factivitytype_2eproto__INCLUDED
#define PROTOBUF_cm_5factivitytype_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cm_5factivitytype_2eproto();
void protobuf_AssignDesc_cm_5factivitytype_2eproto();
void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

class quest_progress;
class quest_data;
class task_activity_data;
class royal_task_info;
class royal_info;
class royal_gift_info;
class royal_task_update_info;
class royal_base_info;
class shop_cost_info;
class shop_item_info;
class shop_info;
class refresh_time_info;
class tower_base_info;
class question_info;
class question_data;
class adv_city_data;
class adv_event_data;
class hero_events_data;
class city_events_data;
class hero_favor_info;

enum EQuestStatus {
  E_QUEST_LOCKED = 0,
  E_QUEST_UNACCEPTED = 1,
  E_QUEST_ACCEPTED = 2,
  E_QUEST_COMPLETED = 3,
  E_QUEST_FINISHED = 4
};
bool EQuestStatus_IsValid(int value);
const EQuestStatus EQuestStatus_MIN = E_QUEST_LOCKED;
const EQuestStatus EQuestStatus_MAX = E_QUEST_FINISHED;
const int EQuestStatus_ARRAYSIZE = EQuestStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EQuestStatus_descriptor();
inline const ::std::string& EQuestStatus_Name(EQuestStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EQuestStatus_descriptor(), value);
}
inline bool EQuestStatus_Parse(
    const ::std::string& name, EQuestStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EQuestStatus>(
    EQuestStatus_descriptor(), name, value);
}
enum ERoyalTaskStatus {
  ROYAL_TASK_STATUS_NONE = 0,
  ROYAL_TASK_STATUS_DOING = 1,
  ROYAL_TASK_STATUS_FINISHED = 2,
  ROYAL_TASK_STATUS_END = 3
};
bool ERoyalTaskStatus_IsValid(int value);
const ERoyalTaskStatus ERoyalTaskStatus_MIN = ROYAL_TASK_STATUS_NONE;
const ERoyalTaskStatus ERoyalTaskStatus_MAX = ROYAL_TASK_STATUS_END;
const int ERoyalTaskStatus_ARRAYSIZE = ERoyalTaskStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERoyalTaskStatus_descriptor();
inline const ::std::string& ERoyalTaskStatus_Name(ERoyalTaskStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERoyalTaskStatus_descriptor(), value);
}
inline bool ERoyalTaskStatus_Parse(
    const ::std::string& name, ERoyalTaskStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERoyalTaskStatus>(
    ERoyalTaskStatus_descriptor(), name, value);
}
enum EGameTaskType {
  TASK_MAINLINE = 0,
  TASK_DAILY = 1,
  TASK_ACHIEVE = 2,
  TASK_ROYAL = 3,
  TASK_BRANCH = 4
};
bool EGameTaskType_IsValid(int value);
const EGameTaskType EGameTaskType_MIN = TASK_MAINLINE;
const EGameTaskType EGameTaskType_MAX = TASK_BRANCH;
const int EGameTaskType_ARRAYSIZE = EGameTaskType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGameTaskType_descriptor();
inline const ::std::string& EGameTaskType_Name(EGameTaskType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGameTaskType_descriptor(), value);
}
inline bool EGameTaskType_Parse(
    const ::std::string& name, EGameTaskType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGameTaskType>(
    EGameTaskType_descriptor(), name, value);
}
enum ERoyalEventType {
  Royal_Event_TP_None = 0,
  Royal_Event_TP_Question = 1,
  Royal_Event_TP_AVG = 2,
  Royal_Event_TP_Combat = 3
};
bool ERoyalEventType_IsValid(int value);
const ERoyalEventType ERoyalEventType_MIN = Royal_Event_TP_None;
const ERoyalEventType ERoyalEventType_MAX = Royal_Event_TP_Combat;
const int ERoyalEventType_ARRAYSIZE = ERoyalEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERoyalEventType_descriptor();
inline const ::std::string& ERoyalEventType_Name(ERoyalEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERoyalEventType_descriptor(), value);
}
inline bool ERoyalEventType_Parse(
    const ::std::string& name, ERoyalEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERoyalEventType>(
    ERoyalEventType_descriptor(), name, value);
}
enum ERoyalOpenCondiType {
  Royal_Condi_TP_Intimacy = 1,
  Royal_Condi_TP_Royal_Level = 2
};
bool ERoyalOpenCondiType_IsValid(int value);
const ERoyalOpenCondiType ERoyalOpenCondiType_MIN = Royal_Condi_TP_Intimacy;
const ERoyalOpenCondiType ERoyalOpenCondiType_MAX = Royal_Condi_TP_Royal_Level;
const int ERoyalOpenCondiType_ARRAYSIZE = ERoyalOpenCondiType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERoyalOpenCondiType_descriptor();
inline const ::std::string& ERoyalOpenCondiType_Name(ERoyalOpenCondiType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERoyalOpenCondiType_descriptor(), value);
}
inline bool ERoyalOpenCondiType_Parse(
    const ::std::string& name, ERoyalOpenCondiType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERoyalOpenCondiType>(
    ERoyalOpenCondiType_descriptor(), name, value);
}
enum ESHOP_OPT_TYPE {
  SHOP_OPT_TP_GIVE = 1,
  SHOP_OPT_TP_WISH = 2,
  SHOP_OPT_TP_RECV = 3
};
bool ESHOP_OPT_TYPE_IsValid(int value);
const ESHOP_OPT_TYPE ESHOP_OPT_TYPE_MIN = SHOP_OPT_TP_GIVE;
const ESHOP_OPT_TYPE ESHOP_OPT_TYPE_MAX = SHOP_OPT_TP_RECV;
const int ESHOP_OPT_TYPE_ARRAYSIZE = ESHOP_OPT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESHOP_OPT_TYPE_descriptor();
inline const ::std::string& ESHOP_OPT_TYPE_Name(ESHOP_OPT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESHOP_OPT_TYPE_descriptor(), value);
}
inline bool ESHOP_OPT_TYPE_Parse(
    const ::std::string& name, ESHOP_OPT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESHOP_OPT_TYPE>(
    ESHOP_OPT_TYPE_descriptor(), name, value);
}
enum EShopOpenCondiType {
  EShopOpenCondiTP_LEVEL = 1,
  EShopOpenCondiTP_MODULE = 2
};
bool EShopOpenCondiType_IsValid(int value);
const EShopOpenCondiType EShopOpenCondiType_MIN = EShopOpenCondiTP_LEVEL;
const EShopOpenCondiType EShopOpenCondiType_MAX = EShopOpenCondiTP_MODULE;
const int EShopOpenCondiType_ARRAYSIZE = EShopOpenCondiType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EShopOpenCondiType_descriptor();
inline const ::std::string& EShopOpenCondiType_Name(EShopOpenCondiType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EShopOpenCondiType_descriptor(), value);
}
inline bool EShopOpenCondiType_Parse(
    const ::std::string& name, EShopOpenCondiType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EShopOpenCondiType>(
    EShopOpenCondiType_descriptor(), name, value);
}
enum ESHOP_TYPE {
  SHOP_TP_ITEM_DAY = 101,
  SHOP_TP_ITEM_GROCERY = 102,
  SHOP_TP_ITEM_TOWER = 103,
  SHOP_TP_ITEM_OFFICE = 104,
  SHOP_TP_ITEM_FAMILY = 105,
  SHOP_TP_GIFT_DISCOUNT = 201,
  SHOP_TP_GIFT_VIP = 202,
  SHOP_TP_GIFT_SKIN = 301,
  SHOP_TP_GIFT_CHARGE = 401,
  SHOP_TP_GIFT_TIMELIMIT = 501
};
bool ESHOP_TYPE_IsValid(int value);
const ESHOP_TYPE ESHOP_TYPE_MIN = SHOP_TP_ITEM_DAY;
const ESHOP_TYPE ESHOP_TYPE_MAX = SHOP_TP_GIFT_TIMELIMIT;
const int ESHOP_TYPE_ARRAYSIZE = ESHOP_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESHOP_TYPE_descriptor();
inline const ::std::string& ESHOP_TYPE_Name(ESHOP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESHOP_TYPE_descriptor(), value);
}
inline bool ESHOP_TYPE_Parse(
    const ::std::string& name, ESHOP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESHOP_TYPE>(
    ESHOP_TYPE_descriptor(), name, value);
}
enum ESHOP_GOODS_LIMIT_TYPE {
  GOODS_LIMIT_TP_LV = 1,
  GOODS_LIMIT_TP_VIP_LV = 2,
  GOODS_LIMIT_TP_FAMILY_LV = 3,
  GOODS_LIMIT_TP_GRADE = 4,
  GOODS_LIMIT_TP_TOWER_FLOOR = 5
};
bool ESHOP_GOODS_LIMIT_TYPE_IsValid(int value);
const ESHOP_GOODS_LIMIT_TYPE ESHOP_GOODS_LIMIT_TYPE_MIN = GOODS_LIMIT_TP_LV;
const ESHOP_GOODS_LIMIT_TYPE ESHOP_GOODS_LIMIT_TYPE_MAX = GOODS_LIMIT_TP_TOWER_FLOOR;
const int ESHOP_GOODS_LIMIT_TYPE_ARRAYSIZE = ESHOP_GOODS_LIMIT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESHOP_GOODS_LIMIT_TYPE_descriptor();
inline const ::std::string& ESHOP_GOODS_LIMIT_TYPE_Name(ESHOP_GOODS_LIMIT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESHOP_GOODS_LIMIT_TYPE_descriptor(), value);
}
inline bool ESHOP_GOODS_LIMIT_TYPE_Parse(
    const ::std::string& name, ESHOP_GOODS_LIMIT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESHOP_GOODS_LIMIT_TYPE>(
    ESHOP_GOODS_LIMIT_TYPE_descriptor(), name, value);
}
enum ESHOP_BUY_LIMIT_TYPE {
  BUY_LIMIT_TP_DAY = 1,
  BUY_LIMIT_TP_WEEK = 2,
  BUY_LIMIT_TP_MONTH = 3,
  BUY_LIMIT_TP_REFRESH = 4,
  BUY_LIMIT_TP_FOREVER = 5
};
bool ESHOP_BUY_LIMIT_TYPE_IsValid(int value);
const ESHOP_BUY_LIMIT_TYPE ESHOP_BUY_LIMIT_TYPE_MIN = BUY_LIMIT_TP_DAY;
const ESHOP_BUY_LIMIT_TYPE ESHOP_BUY_LIMIT_TYPE_MAX = BUY_LIMIT_TP_FOREVER;
const int ESHOP_BUY_LIMIT_TYPE_ARRAYSIZE = ESHOP_BUY_LIMIT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESHOP_BUY_LIMIT_TYPE_descriptor();
inline const ::std::string& ESHOP_BUY_LIMIT_TYPE_Name(ESHOP_BUY_LIMIT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESHOP_BUY_LIMIT_TYPE_descriptor(), value);
}
inline bool ESHOP_BUY_LIMIT_TYPE_Parse(
    const ::std::string& name, ESHOP_BUY_LIMIT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESHOP_BUY_LIMIT_TYPE>(
    ESHOP_BUY_LIMIT_TYPE_descriptor(), name, value);
}
enum EQuestionType {
  EQuestion_TP_Scene = 1,
  EQuestion_TP_Video = 2,
  EQuestion_TP_Science = 3,
  EQuestion_TP_Humanity = 4
};
bool EQuestionType_IsValid(int value);
const EQuestionType EQuestionType_MIN = EQuestion_TP_Scene;
const EQuestionType EQuestionType_MAX = EQuestion_TP_Humanity;
const int EQuestionType_ARRAYSIZE = EQuestionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EQuestionType_descriptor();
inline const ::std::string& EQuestionType_Name(EQuestionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EQuestionType_descriptor(), value);
}
inline bool EQuestionType_Parse(
    const ::std::string& name, EQuestionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EQuestionType>(
    EQuestionType_descriptor(), name, value);
}
enum EQuestionClass {
  EQuestion_Single = 1,
  EQuestion_Multi = 2
};
bool EQuestionClass_IsValid(int value);
const EQuestionClass EQuestionClass_MIN = EQuestion_Single;
const EQuestionClass EQuestionClass_MAX = EQuestion_Multi;
const int EQuestionClass_ARRAYSIZE = EQuestionClass_MAX + 1;

const ::google::protobuf::EnumDescriptor* EQuestionClass_descriptor();
inline const ::std::string& EQuestionClass_Name(EQuestionClass value) {
  return ::google::protobuf::internal::NameOfEnum(
    EQuestionClass_descriptor(), value);
}
inline bool EQuestionClass_Parse(
    const ::std::string& name, EQuestionClass* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EQuestionClass>(
    EQuestionClass_descriptor(), name, value);
}
enum EWEATHER_TYPE {
  EWEATHER_TP_NONE = 0,
  EWEATHER_TP_QINGTIAN = 1,
  EWEATHER_TP_XIAYU = 2,
  EWEATHER_TP_DALEI = 3
};
bool EWEATHER_TYPE_IsValid(int value);
const EWEATHER_TYPE EWEATHER_TYPE_MIN = EWEATHER_TP_NONE;
const EWEATHER_TYPE EWEATHER_TYPE_MAX = EWEATHER_TP_DALEI;
const int EWEATHER_TYPE_ARRAYSIZE = EWEATHER_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* EWEATHER_TYPE_descriptor();
inline const ::std::string& EWEATHER_TYPE_Name(EWEATHER_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    EWEATHER_TYPE_descriptor(), value);
}
inline bool EWEATHER_TYPE_Parse(
    const ::std::string& name, EWEATHER_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EWEATHER_TYPE>(
    EWEATHER_TYPE_descriptor(), name, value);
}
enum EShiChen_TYPE {
  ESHICHEN_TP_NONE = 0,
  ESHICHEN_TP_QINGCHEN = 1,
  ESHICHEN_TP_BAITIAN = 2,
  ESHICHEN_TP_BANGWAN = 3,
  ESHICHEN_TP_SHENYE = 4
};
bool EShiChen_TYPE_IsValid(int value);
const EShiChen_TYPE EShiChen_TYPE_MIN = ESHICHEN_TP_NONE;
const EShiChen_TYPE EShiChen_TYPE_MAX = ESHICHEN_TP_SHENYE;
const int EShiChen_TYPE_ARRAYSIZE = EShiChen_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* EShiChen_TYPE_descriptor();
inline const ::std::string& EShiChen_TYPE_Name(EShiChen_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    EShiChen_TYPE_descriptor(), value);
}
inline bool EShiChen_TYPE_Parse(
    const ::std::string& name, EShiChen_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EShiChen_TYPE>(
    EShiChen_TYPE_descriptor(), name, value);
}
enum EEventClass {
  EVENT_TP_FIXED = 0,
  EVENT_TP_RANDOM = 1
};
bool EEventClass_IsValid(int value);
const EEventClass EEventClass_MIN = EVENT_TP_FIXED;
const EEventClass EEventClass_MAX = EVENT_TP_RANDOM;
const int EEventClass_ARRAYSIZE = EEventClass_MAX + 1;

const ::google::protobuf::EnumDescriptor* EEventClass_descriptor();
inline const ::std::string& EEventClass_Name(EEventClass value) {
  return ::google::protobuf::internal::NameOfEnum(
    EEventClass_descriptor(), value);
}
inline bool EEventClass_Parse(
    const ::std::string& name, EEventClass* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EEventClass>(
    EEventClass_descriptor(), name, value);
}
enum EEventType {
  EVENT_TP_FUNC = 1,
  EVENT_TP_AVG = 2
};
bool EEventType_IsValid(int value);
const EEventType EEventType_MIN = EVENT_TP_FUNC;
const EEventType EEventType_MAX = EVENT_TP_AVG;
const int EEventType_ARRAYSIZE = EEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EEventType_descriptor();
inline const ::std::string& EEventType_Name(EEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EEventType_descriptor(), value);
}
inline bool EEventType_Parse(
    const ::std::string& name, EEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EEventType>(
    EEventType_descriptor(), name, value);
}
enum EEventFuncTYpe {
  EVENT_FUNC_QUESTION = 1,
  EVENT_FUNC_SHOP = 2
};
bool EEventFuncTYpe_IsValid(int value);
const EEventFuncTYpe EEventFuncTYpe_MIN = EVENT_FUNC_QUESTION;
const EEventFuncTYpe EEventFuncTYpe_MAX = EVENT_FUNC_SHOP;
const int EEventFuncTYpe_ARRAYSIZE = EEventFuncTYpe_MAX + 1;

const ::google::protobuf::EnumDescriptor* EEventFuncTYpe_descriptor();
inline const ::std::string& EEventFuncTYpe_Name(EEventFuncTYpe value) {
  return ::google::protobuf::internal::NameOfEnum(
    EEventFuncTYpe_descriptor(), value);
}
inline bool EEventFuncTYpe_Parse(
    const ::std::string& name, EEventFuncTYpe* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EEventFuncTYpe>(
    EEventFuncTYpe_descriptor(), name, value);
}
// ===================================================================

class quest_progress : public ::google::protobuf::Message {
 public:
  quest_progress();
  virtual ~quest_progress();

  quest_progress(const quest_progress& from);

  inline quest_progress& operator=(const quest_progress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const quest_progress& default_instance();

  void Swap(quest_progress* other);

  // implements Message ----------------------------------------------

  quest_progress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const quest_progress& from);
  void MergeFrom(const quest_progress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cond_id = 1;
  inline bool has_cond_id() const;
  inline void clear_cond_id();
  static const int kCondIdFieldNumber = 1;
  inline ::google::protobuf::int32 cond_id() const;
  inline void set_cond_id(::google::protobuf::int32 value);

  // optional int32 cur_step = 2;
  inline bool has_cur_step() const;
  inline void clear_cur_step();
  static const int kCurStepFieldNumber = 2;
  inline ::google::protobuf::int32 cur_step() const;
  inline void set_cur_step(::google::protobuf::int32 value);

  // optional int32 max_step = 3;
  inline bool has_max_step() const;
  inline void clear_max_step();
  static const int kMaxStepFieldNumber = 3;
  inline ::google::protobuf::int32 max_step() const;
  inline void set_max_step(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.quest_progress)
 private:
  inline void set_has_cond_id();
  inline void clear_has_cond_id();
  inline void set_has_cur_step();
  inline void clear_has_cur_step();
  inline void set_has_max_step();
  inline void clear_has_max_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cond_id_;
  ::google::protobuf::int32 cur_step_;
  ::google::protobuf::int32 max_step_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5factivitytype_2eproto();
  friend void protobuf_AssignDesc_cm_5factivitytype_2eproto();
  friend void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

  void InitAsDefaultInstance();
  static quest_progress* default_instance_;
};
// -------------------------------------------------------------------

class quest_data : public ::google::protobuf::Message {
 public:
  quest_data();
  virtual ~quest_data();

  quest_data(const quest_data& from);

  inline quest_data& operator=(const quest_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const quest_data& default_instance();

  void Swap(quest_data* other);

  // implements Message ----------------------------------------------

  quest_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const quest_data& from);
  void MergeFrom(const quest_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 config_id = 1;
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 1;
  inline ::google::protobuf::int32 config_id() const;
  inline void set_config_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional .SProtoSpace.EQuestStatus status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::SProtoSpace::EQuestStatus status() const;
  inline void set_status(::SProtoSpace::EQuestStatus value);

  // repeated .SProtoSpace.quest_progress prog = 4;
  inline int prog_size() const;
  inline void clear_prog();
  static const int kProgFieldNumber = 4;
  inline const ::SProtoSpace::quest_progress& prog(int index) const;
  inline ::SProtoSpace::quest_progress* mutable_prog(int index);
  inline ::SProtoSpace::quest_progress* add_prog();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::quest_progress >&
      prog() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::quest_progress >*
      mutable_prog();

  // optional uint32 achievement_utc_time = 5;
  inline bool has_achievement_utc_time() const;
  inline void clear_achievement_utc_time();
  static const int kAchievementUtcTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 achievement_utc_time() const;
  inline void set_achievement_utc_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.quest_data)
 private:
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_achievement_utc_time();
  inline void clear_has_achievement_utc_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 config_id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::quest_progress > prog_;
  int status_;
  ::google::protobuf::uint32 achievement_utc_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5factivitytype_2eproto();
  friend void protobuf_AssignDesc_cm_5factivitytype_2eproto();
  friend void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

  void InitAsDefaultInstance();
  static quest_data* default_instance_;
};
// -------------------------------------------------------------------

class task_activity_data : public ::google::protobuf::Message {
 public:
  task_activity_data();
  virtual ~task_activity_data();

  task_activity_data(const task_activity_data& from);

  inline task_activity_data& operator=(const task_activity_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const task_activity_data& default_instance();

  void Swap(task_activity_data* other);

  // implements Message ----------------------------------------------

  task_activity_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const task_activity_data& from);
  void MergeFrom(const task_activity_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 config_id = 1;
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 1;
  inline ::google::protobuf::int32 config_id() const;
  inline void set_config_id(::google::protobuf::int32 value);

  // optional bool reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline bool reward() const;
  inline void set_reward(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.task_activity_data)
 private:
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 config_id_;
  bool reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5factivitytype_2eproto();
  friend void protobuf_AssignDesc_cm_5factivitytype_2eproto();
  friend void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

  void InitAsDefaultInstance();
  static task_activity_data* default_instance_;
};
// -------------------------------------------------------------------

class royal_task_info : public ::google::protobuf::Message {
 public:
  royal_task_info();
  virtual ~royal_task_info();

  royal_task_info(const royal_task_info& from);

  inline royal_task_info& operator=(const royal_task_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const royal_task_info& default_instance();

  void Swap(royal_task_info* other);

  // implements Message ----------------------------------------------

  royal_task_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const royal_task_info& from);
  void MergeFrom(const royal_task_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 config_id = 1;
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 1;
  inline ::google::protobuf::uint32 config_id() const;
  inline void set_config_id(::google::protobuf::uint32 value);

  // optional int32 max_step = 2;
  inline bool has_max_step() const;
  inline void clear_max_step();
  static const int kMaxStepFieldNumber = 2;
  inline ::google::protobuf::int32 max_step() const;
  inline void set_max_step(::google::protobuf::int32 value);

  // optional int32 cur_step = 3;
  inline bool has_cur_step() const;
  inline void clear_cur_step();
  static const int kCurStepFieldNumber = 3;
  inline ::google::protobuf::int32 cur_step() const;
  inline void set_cur_step(::google::protobuf::int32 value);

  // optional .SProtoSpace.ERoyalTaskStatus status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::SProtoSpace::ERoyalTaskStatus status() const;
  inline void set_status(::SProtoSpace::ERoyalTaskStatus value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.royal_task_info)
 private:
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_max_step();
  inline void clear_has_max_step();
  inline void set_has_cur_step();
  inline void clear_has_cur_step();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 config_id_;
  ::google::protobuf::int32 max_step_;
  ::google::protobuf::int32 cur_step_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5factivitytype_2eproto();
  friend void protobuf_AssignDesc_cm_5factivitytype_2eproto();
  friend void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

  void InitAsDefaultInstance();
  static royal_task_info* default_instance_;
};
// -------------------------------------------------------------------

class royal_info : public ::google::protobuf::Message {
 public:
  royal_info();
  virtual ~royal_info();

  royal_info(const royal_info& from);

  inline royal_info& operator=(const royal_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const royal_info& default_instance();

  void Swap(royal_info* other);

  // implements Message ----------------------------------------------

  royal_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const royal_info& from);
  void MergeFrom(const royal_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 config_id = 1;
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 1;
  inline ::google::protobuf::int32 config_id() const;
  inline void set_config_id(::google::protobuf::int32 value);

  // optional int32 intimacy = 2;
  inline bool has_intimacy() const;
  inline void clear_intimacy();
  static const int kIntimacyFieldNumber = 2;
  inline ::google::protobuf::int32 intimacy() const;
  inline void set_intimacy(::google::protobuf::int32 value);

  // optional int32 quality = 3;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 3;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // repeated int32 has_received = 4;
  inline int has_received_size() const;
  inline void clear_has_received();
  static const int kHasReceivedFieldNumber = 4;
  inline ::google::protobuf::int32 has_received(int index) const;
  inline void set_has_received(int index, ::google::protobuf::int32 value);
  inline void add_has_received(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      has_received() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_has_received();

  // optional bool active = 5;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 5;
  inline bool active() const;
  inline void set_active(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.royal_info)
 private:
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_intimacy();
  inline void clear_has_intimacy();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_active();
  inline void clear_has_active();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 config_id_;
  ::google::protobuf::int32 intimacy_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > has_received_;
  ::google::protobuf::int32 quality_;
  bool active_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5factivitytype_2eproto();
  friend void protobuf_AssignDesc_cm_5factivitytype_2eproto();
  friend void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

  void InitAsDefaultInstance();
  static royal_info* default_instance_;
};
// -------------------------------------------------------------------

class royal_gift_info : public ::google::protobuf::Message {
 public:
  royal_gift_info();
  virtual ~royal_gift_info();

  royal_gift_info(const royal_gift_info& from);

  inline royal_gift_info& operator=(const royal_gift_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const royal_gift_info& default_instance();

  void Swap(royal_gift_info* other);

  // implements Message ----------------------------------------------

  royal_gift_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const royal_gift_info& from);
  void MergeFrom(const royal_gift_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gift_id = 1;
  inline bool has_gift_id() const;
  inline void clear_gift_id();
  static const int kGiftIdFieldNumber = 1;
  inline ::google::protobuf::uint32 gift_id() const;
  inline void set_gift_id(::google::protobuf::uint32 value);

  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.royal_gift_info)
 private:
  inline void set_has_gift_id();
  inline void clear_has_gift_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gift_id_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5factivitytype_2eproto();
  friend void protobuf_AssignDesc_cm_5factivitytype_2eproto();
  friend void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

  void InitAsDefaultInstance();
  static royal_gift_info* default_instance_;
};
// -------------------------------------------------------------------

class royal_task_update_info : public ::google::protobuf::Message {
 public:
  royal_task_update_info();
  virtual ~royal_task_update_info();

  royal_task_update_info(const royal_task_update_info& from);

  inline royal_task_update_info& operator=(const royal_task_update_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const royal_task_update_info& default_instance();

  void Swap(royal_task_update_info* other);

  // implements Message ----------------------------------------------

  royal_task_update_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const royal_task_update_info& from);
  void MergeFrom(const royal_task_update_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 config_id = 1;
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 1;
  inline ::google::protobuf::uint32 config_id() const;
  inline void set_config_id(::google::protobuf::uint32 value);

  // optional uint32 task_config_id = 2;
  inline bool has_task_config_id() const;
  inline void clear_task_config_id();
  static const int kTaskConfigIdFieldNumber = 2;
  inline ::google::protobuf::uint32 task_config_id() const;
  inline void set_task_config_id(::google::protobuf::uint32 value);

  // optional uint32 cur_step = 3;
  inline bool has_cur_step() const;
  inline void clear_cur_step();
  static const int kCurStepFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_step() const;
  inline void set_cur_step(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.royal_task_update_info)
 private:
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_task_config_id();
  inline void clear_has_task_config_id();
  inline void set_has_cur_step();
  inline void clear_has_cur_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 config_id_;
  ::google::protobuf::uint32 task_config_id_;
  ::google::protobuf::uint32 cur_step_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5factivitytype_2eproto();
  friend void protobuf_AssignDesc_cm_5factivitytype_2eproto();
  friend void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

  void InitAsDefaultInstance();
  static royal_task_update_info* default_instance_;
};
// -------------------------------------------------------------------

class royal_base_info : public ::google::protobuf::Message {
 public:
  royal_base_info();
  virtual ~royal_base_info();

  royal_base_info(const royal_base_info& from);

  inline royal_base_info& operator=(const royal_base_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const royal_base_info& default_instance();

  void Swap(royal_base_info* other);

  // implements Message ----------------------------------------------

  royal_base_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const royal_base_info& from);
  void MergeFrom(const royal_base_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 refresh_times = 1;
  inline bool has_refresh_times() const;
  inline void clear_refresh_times();
  static const int kRefreshTimesFieldNumber = 1;
  inline ::google::protobuf::int32 refresh_times() const;
  inline void set_refresh_times(::google::protobuf::int32 value);

  // optional uint32 visit_times = 2;
  inline bool has_visit_times() const;
  inline void clear_visit_times();
  static const int kVisitTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 visit_times() const;
  inline void set_visit_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.royal_base_info)
 private:
  inline void set_has_refresh_times();
  inline void clear_has_refresh_times();
  inline void set_has_visit_times();
  inline void clear_has_visit_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 refresh_times_;
  ::google::protobuf::uint32 visit_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5factivitytype_2eproto();
  friend void protobuf_AssignDesc_cm_5factivitytype_2eproto();
  friend void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

  void InitAsDefaultInstance();
  static royal_base_info* default_instance_;
};
// -------------------------------------------------------------------

class shop_cost_info : public ::google::protobuf::Message {
 public:
  shop_cost_info();
  virtual ~shop_cost_info();

  shop_cost_info(const shop_cost_info& from);

  inline shop_cost_info& operator=(const shop_cost_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shop_cost_info& default_instance();

  void Swap(shop_cost_info* other);

  // implements Message ----------------------------------------------

  shop_cost_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shop_cost_info& from);
  void MergeFrom(const shop_cost_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cost_type = 1;
  inline bool has_cost_type() const;
  inline void clear_cost_type();
  static const int kCostTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 cost_type() const;
  inline void set_cost_type(::google::protobuf::uint32 value);

  // optional uint32 cost_num = 2;
  inline bool has_cost_num() const;
  inline void clear_cost_num();
  static const int kCostNumFieldNumber = 2;
  inline ::google::protobuf::uint32 cost_num() const;
  inline void set_cost_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.shop_cost_info)
 private:
  inline void set_has_cost_type();
  inline void clear_has_cost_type();
  inline void set_has_cost_num();
  inline void clear_has_cost_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cost_type_;
  ::google::protobuf::uint32 cost_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5factivitytype_2eproto();
  friend void protobuf_AssignDesc_cm_5factivitytype_2eproto();
  friend void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

  void InitAsDefaultInstance();
  static shop_cost_info* default_instance_;
};
// -------------------------------------------------------------------

class shop_item_info : public ::google::protobuf::Message {
 public:
  shop_item_info();
  virtual ~shop_item_info();

  shop_item_info(const shop_item_info& from);

  inline shop_item_info& operator=(const shop_item_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shop_item_info& default_instance();

  void Swap(shop_item_info* other);

  // implements Message ----------------------------------------------

  shop_item_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shop_item_info& from);
  void MergeFrom(const shop_item_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sale_config_id = 1;
  inline bool has_sale_config_id() const;
  inline void clear_sale_config_id();
  static const int kSaleConfigIdFieldNumber = 1;
  inline ::google::protobuf::uint32 sale_config_id() const;
  inline void set_sale_config_id(::google::protobuf::uint32 value);

  // optional uint32 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional uint32 buy_cur_num = 3;
  inline bool has_buy_cur_num() const;
  inline void clear_buy_cur_num();
  static const int kBuyCurNumFieldNumber = 3;
  inline ::google::protobuf::uint32 buy_cur_num() const;
  inline void set_buy_cur_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.shop_item_info)
 private:
  inline void set_has_sale_config_id();
  inline void clear_has_sale_config_id();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_buy_cur_num();
  inline void clear_has_buy_cur_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 sale_config_id_;
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 buy_cur_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5factivitytype_2eproto();
  friend void protobuf_AssignDesc_cm_5factivitytype_2eproto();
  friend void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

  void InitAsDefaultInstance();
  static shop_item_info* default_instance_;
};
// -------------------------------------------------------------------

class shop_info : public ::google::protobuf::Message {
 public:
  shop_info();
  virtual ~shop_info();

  shop_info(const shop_info& from);

  inline shop_info& operator=(const shop_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shop_info& default_instance();

  void Swap(shop_info* other);

  // implements Message ----------------------------------------------

  shop_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shop_info& from);
  void MergeFrom(const shop_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 shop_config_id = 1;
  inline bool has_shop_config_id() const;
  inline void clear_shop_config_id();
  static const int kShopConfigIdFieldNumber = 1;
  inline ::google::protobuf::int32 shop_config_id() const;
  inline void set_shop_config_id(::google::protobuf::int32 value);

  // optional uint32 user_refresh_times = 2;
  inline bool has_user_refresh_times() const;
  inline void clear_user_refresh_times();
  static const int kUserRefreshTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 user_refresh_times() const;
  inline void set_user_refresh_times(::google::protobuf::uint32 value);

  // optional uint64 sys_next_refresh_times = 3;
  inline bool has_sys_next_refresh_times() const;
  inline void clear_sys_next_refresh_times();
  static const int kSysNextRefreshTimesFieldNumber = 3;
  inline ::google::protobuf::uint64 sys_next_refresh_times() const;
  inline void set_sys_next_refresh_times(::google::protobuf::uint64 value);

  // repeated .SProtoSpace.shop_item_info sale_items = 4;
  inline int sale_items_size() const;
  inline void clear_sale_items();
  static const int kSaleItemsFieldNumber = 4;
  inline const ::SProtoSpace::shop_item_info& sale_items(int index) const;
  inline ::SProtoSpace::shop_item_info* mutable_sale_items(int index);
  inline ::SProtoSpace::shop_item_info* add_sale_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::shop_item_info >&
      sale_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::shop_item_info >*
      mutable_sale_items();

  // @@protoc_insertion_point(class_scope:SProtoSpace.shop_info)
 private:
  inline void set_has_shop_config_id();
  inline void clear_has_shop_config_id();
  inline void set_has_user_refresh_times();
  inline void clear_has_user_refresh_times();
  inline void set_has_sys_next_refresh_times();
  inline void clear_has_sys_next_refresh_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 shop_config_id_;
  ::google::protobuf::uint32 user_refresh_times_;
  ::google::protobuf::uint64 sys_next_refresh_times_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::shop_item_info > sale_items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5factivitytype_2eproto();
  friend void protobuf_AssignDesc_cm_5factivitytype_2eproto();
  friend void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

  void InitAsDefaultInstance();
  static shop_info* default_instance_;
};
// -------------------------------------------------------------------

class refresh_time_info : public ::google::protobuf::Message {
 public:
  refresh_time_info();
  virtual ~refresh_time_info();

  refresh_time_info(const refresh_time_info& from);

  inline refresh_time_info& operator=(const refresh_time_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const refresh_time_info& default_instance();

  void Swap(refresh_time_info* other);

  // implements Message ----------------------------------------------

  refresh_time_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const refresh_time_info& from);
  void MergeFrom(const refresh_time_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 day = 1;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // optional uint32 hour = 2;
  inline bool has_hour() const;
  inline void clear_hour();
  static const int kHourFieldNumber = 2;
  inline ::google::protobuf::uint32 hour() const;
  inline void set_hour(::google::protobuf::uint32 value);

  // optional uint32 minute = 3;
  inline bool has_minute() const;
  inline void clear_minute();
  static const int kMinuteFieldNumber = 3;
  inline ::google::protobuf::uint32 minute() const;
  inline void set_minute(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.refresh_time_info)
 private:
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_hour();
  inline void clear_has_hour();
  inline void set_has_minute();
  inline void clear_has_minute();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 day_;
  ::google::protobuf::uint32 hour_;
  ::google::protobuf::uint32 minute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5factivitytype_2eproto();
  friend void protobuf_AssignDesc_cm_5factivitytype_2eproto();
  friend void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

  void InitAsDefaultInstance();
  static refresh_time_info* default_instance_;
};
// -------------------------------------------------------------------

class tower_base_info : public ::google::protobuf::Message {
 public:
  tower_base_info();
  virtual ~tower_base_info();

  tower_base_info(const tower_base_info& from);

  inline tower_base_info& operator=(const tower_base_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tower_base_info& default_instance();

  void Swap(tower_base_info* other);

  // implements Message ----------------------------------------------

  tower_base_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tower_base_info& from);
  void MergeFrom(const tower_base_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 max_floor = 2 [default = 0];
  inline bool has_max_floor() const;
  inline void clear_max_floor();
  static const int kMaxFloorFieldNumber = 2;
  inline ::google::protobuf::uint32 max_floor() const;
  inline void set_max_floor(::google::protobuf::uint32 value);

  // optional uint32 reset_times = 3 [default = 1];
  inline bool has_reset_times() const;
  inline void clear_reset_times();
  static const int kResetTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 reset_times() const;
  inline void set_reset_times(::google::protobuf::uint32 value);

  // optional uint32 cur_floor = 4 [default = 1];
  inline bool has_cur_floor() const;
  inline void clear_cur_floor();
  static const int kCurFloorFieldNumber = 4;
  inline ::google::protobuf::uint32 cur_floor() const;
  inline void set_cur_floor(::google::protobuf::uint32 value);

  // optional uint32 cur_step = 5;
  inline bool has_cur_step() const;
  inline void clear_cur_step();
  static const int kCurStepFieldNumber = 5;
  inline ::google::protobuf::uint32 cur_step() const;
  inline void set_cur_step(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.tower_base_info)
 private:
  inline void set_has_max_floor();
  inline void clear_has_max_floor();
  inline void set_has_reset_times();
  inline void clear_has_reset_times();
  inline void set_has_cur_floor();
  inline void clear_has_cur_floor();
  inline void set_has_cur_step();
  inline void clear_has_cur_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 max_floor_;
  ::google::protobuf::uint32 reset_times_;
  ::google::protobuf::uint32 cur_floor_;
  ::google::protobuf::uint32 cur_step_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5factivitytype_2eproto();
  friend void protobuf_AssignDesc_cm_5factivitytype_2eproto();
  friend void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

  void InitAsDefaultInstance();
  static tower_base_info* default_instance_;
};
// -------------------------------------------------------------------

class question_info : public ::google::protobuf::Message {
 public:
  question_info();
  virtual ~question_info();

  question_info(const question_info& from);

  inline question_info& operator=(const question_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const question_info& default_instance();

  void Swap(question_info* other);

  // implements Message ----------------------------------------------

  question_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const question_info& from);
  void MergeFrom(const question_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 question_id = 1;
  inline bool has_question_id() const;
  inline void clear_question_id();
  static const int kQuestionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 question_id() const;
  inline void set_question_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.question_info)
 private:
  inline void set_has_question_id();
  inline void clear_has_question_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 question_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5factivitytype_2eproto();
  friend void protobuf_AssignDesc_cm_5factivitytype_2eproto();
  friend void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

  void InitAsDefaultInstance();
  static question_info* default_instance_;
};
// -------------------------------------------------------------------

class question_data : public ::google::protobuf::Message {
 public:
  question_data();
  virtual ~question_data();

  question_data(const question_data& from);

  inline question_data& operator=(const question_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const question_data& default_instance();

  void Swap(question_data* other);

  // implements Message ----------------------------------------------

  question_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const question_data& from);
  void MergeFrom(const question_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated uint32 questions = 2;
  inline int questions_size() const;
  inline void clear_questions();
  static const int kQuestionsFieldNumber = 2;
  inline ::google::protobuf::uint32 questions(int index) const;
  inline void set_questions(int index, ::google::protobuf::uint32 value);
  inline void add_questions(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      questions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_questions();

  // @@protoc_insertion_point(class_scope:SProtoSpace.question_data)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > questions_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5factivitytype_2eproto();
  friend void protobuf_AssignDesc_cm_5factivitytype_2eproto();
  friend void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

  void InitAsDefaultInstance();
  static question_data* default_instance_;
};
// -------------------------------------------------------------------

class adv_city_data : public ::google::protobuf::Message {
 public:
  adv_city_data();
  virtual ~adv_city_data();

  adv_city_data(const adv_city_data& from);

  inline adv_city_data& operator=(const adv_city_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const adv_city_data& default_instance();

  void Swap(adv_city_data* other);

  // implements Message ----------------------------------------------

  adv_city_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const adv_city_data& from);
  void MergeFrom(const adv_city_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 city_id = 1;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 1;
  inline ::google::protobuf::int32 city_id() const;
  inline void set_city_id(::google::protobuf::int32 value);

  // optional bool unlock = 2;
  inline bool has_unlock() const;
  inline void clear_unlock();
  static const int kUnlockFieldNumber = 2;
  inline bool unlock() const;
  inline void set_unlock(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.adv_city_data)
 private:
  inline void set_has_city_id();
  inline void clear_has_city_id();
  inline void set_has_unlock();
  inline void clear_has_unlock();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 city_id_;
  bool unlock_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5factivitytype_2eproto();
  friend void protobuf_AssignDesc_cm_5factivitytype_2eproto();
  friend void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

  void InitAsDefaultInstance();
  static adv_city_data* default_instance_;
};
// -------------------------------------------------------------------

class adv_event_data : public ::google::protobuf::Message {
 public:
  adv_event_data();
  virtual ~adv_event_data();

  adv_event_data(const adv_event_data& from);

  inline adv_event_data& operator=(const adv_event_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const adv_event_data& default_instance();

  void Swap(adv_event_data* other);

  // implements Message ----------------------------------------------

  adv_event_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const adv_event_data& from);
  void MergeFrom(const adv_event_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::int32 event_id() const;
  inline void set_event_id(::google::protobuf::int32 value);

  // optional int32 weather = 2;
  inline bool has_weather() const;
  inline void clear_weather();
  static const int kWeatherFieldNumber = 2;
  inline ::google::protobuf::int32 weather() const;
  inline void set_weather(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.adv_event_data)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_weather();
  inline void clear_has_weather();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 event_id_;
  ::google::protobuf::int32 weather_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5factivitytype_2eproto();
  friend void protobuf_AssignDesc_cm_5factivitytype_2eproto();
  friend void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

  void InitAsDefaultInstance();
  static adv_event_data* default_instance_;
};
// -------------------------------------------------------------------

class hero_events_data : public ::google::protobuf::Message {
 public:
  hero_events_data();
  virtual ~hero_events_data();

  hero_events_data(const hero_events_data& from);

  inline hero_events_data& operator=(const hero_events_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_events_data& default_instance();

  void Swap(hero_events_data* other);

  // implements Message ----------------------------------------------

  hero_events_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_events_data& from);
  void MergeFrom(const hero_events_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::int32 hero_id() const;
  inline void set_hero_id(::google::protobuf::int32 value);

  // optional int32 hero_favor = 2;
  inline bool has_hero_favor() const;
  inline void clear_hero_favor();
  static const int kHeroFavorFieldNumber = 2;
  inline ::google::protobuf::int32 hero_favor() const;
  inline void set_hero_favor(::google::protobuf::int32 value);

  // optional int32 hero_lv = 3;
  inline bool has_hero_lv() const;
  inline void clear_hero_lv();
  static const int kHeroLvFieldNumber = 3;
  inline ::google::protobuf::int32 hero_lv() const;
  inline void set_hero_lv(::google::protobuf::int32 value);

  // optional int32 open_count = 4;
  inline bool has_open_count() const;
  inline void clear_open_count();
  static const int kOpenCountFieldNumber = 4;
  inline ::google::protobuf::int32 open_count() const;
  inline void set_open_count(::google::protobuf::int32 value);

  // optional int32 all_count = 5;
  inline bool has_all_count() const;
  inline void clear_all_count();
  static const int kAllCountFieldNumber = 5;
  inline ::google::protobuf::int32 all_count() const;
  inline void set_all_count(::google::protobuf::int32 value);

  // repeated .SProtoSpace.adv_event_data event_ids = 6;
  inline int event_ids_size() const;
  inline void clear_event_ids();
  static const int kEventIdsFieldNumber = 6;
  inline const ::SProtoSpace::adv_event_data& event_ids(int index) const;
  inline ::SProtoSpace::adv_event_data* mutable_event_ids(int index);
  inline ::SProtoSpace::adv_event_data* add_event_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::adv_event_data >&
      event_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::adv_event_data >*
      mutable_event_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_events_data)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_hero_favor();
  inline void clear_has_hero_favor();
  inline void set_has_hero_lv();
  inline void clear_has_hero_lv();
  inline void set_has_open_count();
  inline void clear_has_open_count();
  inline void set_has_all_count();
  inline void clear_has_all_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 hero_id_;
  ::google::protobuf::int32 hero_favor_;
  ::google::protobuf::int32 hero_lv_;
  ::google::protobuf::int32 open_count_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::adv_event_data > event_ids_;
  ::google::protobuf::int32 all_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5factivitytype_2eproto();
  friend void protobuf_AssignDesc_cm_5factivitytype_2eproto();
  friend void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

  void InitAsDefaultInstance();
  static hero_events_data* default_instance_;
};
// -------------------------------------------------------------------

class city_events_data : public ::google::protobuf::Message {
 public:
  city_events_data();
  virtual ~city_events_data();

  city_events_data(const city_events_data& from);

  inline city_events_data& operator=(const city_events_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const city_events_data& default_instance();

  void Swap(city_events_data* other);

  // implements Message ----------------------------------------------

  city_events_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const city_events_data& from);
  void MergeFrom(const city_events_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 city_id = 1;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 1;
  inline ::google::protobuf::int32 city_id() const;
  inline void set_city_id(::google::protobuf::int32 value);

  // optional int32 open_count = 2;
  inline bool has_open_count() const;
  inline void clear_open_count();
  static const int kOpenCountFieldNumber = 2;
  inline ::google::protobuf::int32 open_count() const;
  inline void set_open_count(::google::protobuf::int32 value);

  // optional int32 all_count = 3;
  inline bool has_all_count() const;
  inline void clear_all_count();
  static const int kAllCountFieldNumber = 3;
  inline ::google::protobuf::int32 all_count() const;
  inline void set_all_count(::google::protobuf::int32 value);

  // repeated .SProtoSpace.adv_event_data event_ids = 4;
  inline int event_ids_size() const;
  inline void clear_event_ids();
  static const int kEventIdsFieldNumber = 4;
  inline const ::SProtoSpace::adv_event_data& event_ids(int index) const;
  inline ::SProtoSpace::adv_event_data* mutable_event_ids(int index);
  inline ::SProtoSpace::adv_event_data* add_event_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::adv_event_data >&
      event_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::adv_event_data >*
      mutable_event_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.city_events_data)
 private:
  inline void set_has_city_id();
  inline void clear_has_city_id();
  inline void set_has_open_count();
  inline void clear_has_open_count();
  inline void set_has_all_count();
  inline void clear_has_all_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 city_id_;
  ::google::protobuf::int32 open_count_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::adv_event_data > event_ids_;
  ::google::protobuf::int32 all_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5factivitytype_2eproto();
  friend void protobuf_AssignDesc_cm_5factivitytype_2eproto();
  friend void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

  void InitAsDefaultInstance();
  static city_events_data* default_instance_;
};
// -------------------------------------------------------------------

class hero_favor_info : public ::google::protobuf::Message {
 public:
  hero_favor_info();
  virtual ~hero_favor_info();

  hero_favor_info(const hero_favor_info& from);

  inline hero_favor_info& operator=(const hero_favor_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_favor_info& default_instance();

  void Swap(hero_favor_info* other);

  // implements Message ----------------------------------------------

  hero_favor_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_favor_info& from);
  void MergeFrom(const hero_favor_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::int32 hero_id() const;
  inline void set_hero_id(::google::protobuf::int32 value);

  // optional int32 favor = 2;
  inline bool has_favor() const;
  inline void clear_favor();
  static const int kFavorFieldNumber = 2;
  inline ::google::protobuf::int32 favor() const;
  inline void set_favor(::google::protobuf::int32 value);

  // optional int32 lv = 3;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_favor_info)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_favor();
  inline void clear_has_favor();
  inline void set_has_lv();
  inline void clear_has_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 hero_id_;
  ::google::protobuf::int32 favor_;
  ::google::protobuf::int32 lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cm_5factivitytype_2eproto();
  friend void protobuf_AssignDesc_cm_5factivitytype_2eproto();
  friend void protobuf_ShutdownFile_cm_5factivitytype_2eproto();

  void InitAsDefaultInstance();
  static hero_favor_info* default_instance_;
};
// ===================================================================


// ===================================================================

// quest_progress

// optional int32 cond_id = 1;
inline bool quest_progress::has_cond_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void quest_progress::set_has_cond_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void quest_progress::clear_has_cond_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void quest_progress::clear_cond_id() {
  cond_id_ = 0;
  clear_has_cond_id();
}
inline ::google::protobuf::int32 quest_progress::cond_id() const {
  return cond_id_;
}
inline void quest_progress::set_cond_id(::google::protobuf::int32 value) {
  set_has_cond_id();
  cond_id_ = value;
}

// optional int32 cur_step = 2;
inline bool quest_progress::has_cur_step() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void quest_progress::set_has_cur_step() {
  _has_bits_[0] |= 0x00000002u;
}
inline void quest_progress::clear_has_cur_step() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void quest_progress::clear_cur_step() {
  cur_step_ = 0;
  clear_has_cur_step();
}
inline ::google::protobuf::int32 quest_progress::cur_step() const {
  return cur_step_;
}
inline void quest_progress::set_cur_step(::google::protobuf::int32 value) {
  set_has_cur_step();
  cur_step_ = value;
}

// optional int32 max_step = 3;
inline bool quest_progress::has_max_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void quest_progress::set_has_max_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void quest_progress::clear_has_max_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void quest_progress::clear_max_step() {
  max_step_ = 0;
  clear_has_max_step();
}
inline ::google::protobuf::int32 quest_progress::max_step() const {
  return max_step_;
}
inline void quest_progress::set_max_step(::google::protobuf::int32 value) {
  set_has_max_step();
  max_step_ = value;
}

// -------------------------------------------------------------------

// quest_data

// optional int32 config_id = 1;
inline bool quest_data::has_config_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void quest_data::set_has_config_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void quest_data::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void quest_data::clear_config_id() {
  config_id_ = 0;
  clear_has_config_id();
}
inline ::google::protobuf::int32 quest_data::config_id() const {
  return config_id_;
}
inline void quest_data::set_config_id(::google::protobuf::int32 value) {
  set_has_config_id();
  config_id_ = value;
}

// optional int32 type = 2;
inline bool quest_data::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void quest_data::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void quest_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void quest_data::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 quest_data::type() const {
  return type_;
}
inline void quest_data::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional .SProtoSpace.EQuestStatus status = 3;
inline bool quest_data::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void quest_data::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void quest_data::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void quest_data::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::SProtoSpace::EQuestStatus quest_data::status() const {
  return static_cast< ::SProtoSpace::EQuestStatus >(status_);
}
inline void quest_data::set_status(::SProtoSpace::EQuestStatus value) {
  assert(::SProtoSpace::EQuestStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// repeated .SProtoSpace.quest_progress prog = 4;
inline int quest_data::prog_size() const {
  return prog_.size();
}
inline void quest_data::clear_prog() {
  prog_.Clear();
}
inline const ::SProtoSpace::quest_progress& quest_data::prog(int index) const {
  return prog_.Get(index);
}
inline ::SProtoSpace::quest_progress* quest_data::mutable_prog(int index) {
  return prog_.Mutable(index);
}
inline ::SProtoSpace::quest_progress* quest_data::add_prog() {
  return prog_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::quest_progress >&
quest_data::prog() const {
  return prog_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::quest_progress >*
quest_data::mutable_prog() {
  return &prog_;
}

// optional uint32 achievement_utc_time = 5;
inline bool quest_data::has_achievement_utc_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void quest_data::set_has_achievement_utc_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void quest_data::clear_has_achievement_utc_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void quest_data::clear_achievement_utc_time() {
  achievement_utc_time_ = 0u;
  clear_has_achievement_utc_time();
}
inline ::google::protobuf::uint32 quest_data::achievement_utc_time() const {
  return achievement_utc_time_;
}
inline void quest_data::set_achievement_utc_time(::google::protobuf::uint32 value) {
  set_has_achievement_utc_time();
  achievement_utc_time_ = value;
}

// -------------------------------------------------------------------

// task_activity_data

// optional int32 config_id = 1;
inline bool task_activity_data::has_config_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void task_activity_data::set_has_config_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void task_activity_data::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void task_activity_data::clear_config_id() {
  config_id_ = 0;
  clear_has_config_id();
}
inline ::google::protobuf::int32 task_activity_data::config_id() const {
  return config_id_;
}
inline void task_activity_data::set_config_id(::google::protobuf::int32 value) {
  set_has_config_id();
  config_id_ = value;
}

// optional bool reward = 2;
inline bool task_activity_data::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void task_activity_data::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void task_activity_data::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void task_activity_data::clear_reward() {
  reward_ = false;
  clear_has_reward();
}
inline bool task_activity_data::reward() const {
  return reward_;
}
inline void task_activity_data::set_reward(bool value) {
  set_has_reward();
  reward_ = value;
}

// -------------------------------------------------------------------

// royal_task_info

// optional uint32 config_id = 1;
inline bool royal_task_info::has_config_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void royal_task_info::set_has_config_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void royal_task_info::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void royal_task_info::clear_config_id() {
  config_id_ = 0u;
  clear_has_config_id();
}
inline ::google::protobuf::uint32 royal_task_info::config_id() const {
  return config_id_;
}
inline void royal_task_info::set_config_id(::google::protobuf::uint32 value) {
  set_has_config_id();
  config_id_ = value;
}

// optional int32 max_step = 2;
inline bool royal_task_info::has_max_step() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void royal_task_info::set_has_max_step() {
  _has_bits_[0] |= 0x00000002u;
}
inline void royal_task_info::clear_has_max_step() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void royal_task_info::clear_max_step() {
  max_step_ = 0;
  clear_has_max_step();
}
inline ::google::protobuf::int32 royal_task_info::max_step() const {
  return max_step_;
}
inline void royal_task_info::set_max_step(::google::protobuf::int32 value) {
  set_has_max_step();
  max_step_ = value;
}

// optional int32 cur_step = 3;
inline bool royal_task_info::has_cur_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void royal_task_info::set_has_cur_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void royal_task_info::clear_has_cur_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void royal_task_info::clear_cur_step() {
  cur_step_ = 0;
  clear_has_cur_step();
}
inline ::google::protobuf::int32 royal_task_info::cur_step() const {
  return cur_step_;
}
inline void royal_task_info::set_cur_step(::google::protobuf::int32 value) {
  set_has_cur_step();
  cur_step_ = value;
}

// optional .SProtoSpace.ERoyalTaskStatus status = 4;
inline bool royal_task_info::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void royal_task_info::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void royal_task_info::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void royal_task_info::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::SProtoSpace::ERoyalTaskStatus royal_task_info::status() const {
  return static_cast< ::SProtoSpace::ERoyalTaskStatus >(status_);
}
inline void royal_task_info::set_status(::SProtoSpace::ERoyalTaskStatus value) {
  assert(::SProtoSpace::ERoyalTaskStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// royal_info

// optional int32 config_id = 1;
inline bool royal_info::has_config_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void royal_info::set_has_config_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void royal_info::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void royal_info::clear_config_id() {
  config_id_ = 0;
  clear_has_config_id();
}
inline ::google::protobuf::int32 royal_info::config_id() const {
  return config_id_;
}
inline void royal_info::set_config_id(::google::protobuf::int32 value) {
  set_has_config_id();
  config_id_ = value;
}

// optional int32 intimacy = 2;
inline bool royal_info::has_intimacy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void royal_info::set_has_intimacy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void royal_info::clear_has_intimacy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void royal_info::clear_intimacy() {
  intimacy_ = 0;
  clear_has_intimacy();
}
inline ::google::protobuf::int32 royal_info::intimacy() const {
  return intimacy_;
}
inline void royal_info::set_intimacy(::google::protobuf::int32 value) {
  set_has_intimacy();
  intimacy_ = value;
}

// optional int32 quality = 3;
inline bool royal_info::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void royal_info::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void royal_info::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void royal_info::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 royal_info::quality() const {
  return quality_;
}
inline void royal_info::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// repeated int32 has_received = 4;
inline int royal_info::has_received_size() const {
  return has_received_.size();
}
inline void royal_info::clear_has_received() {
  has_received_.Clear();
}
inline ::google::protobuf::int32 royal_info::has_received(int index) const {
  return has_received_.Get(index);
}
inline void royal_info::set_has_received(int index, ::google::protobuf::int32 value) {
  has_received_.Set(index, value);
}
inline void royal_info::add_has_received(::google::protobuf::int32 value) {
  has_received_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
royal_info::has_received() const {
  return has_received_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
royal_info::mutable_has_received() {
  return &has_received_;
}

// optional bool active = 5;
inline bool royal_info::has_active() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void royal_info::set_has_active() {
  _has_bits_[0] |= 0x00000010u;
}
inline void royal_info::clear_has_active() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void royal_info::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool royal_info::active() const {
  return active_;
}
inline void royal_info::set_active(bool value) {
  set_has_active();
  active_ = value;
}

// -------------------------------------------------------------------

// royal_gift_info

// optional uint32 gift_id = 1;
inline bool royal_gift_info::has_gift_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void royal_gift_info::set_has_gift_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void royal_gift_info::clear_has_gift_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void royal_gift_info::clear_gift_id() {
  gift_id_ = 0u;
  clear_has_gift_id();
}
inline ::google::protobuf::uint32 royal_gift_info::gift_id() const {
  return gift_id_;
}
inline void royal_gift_info::set_gift_id(::google::protobuf::uint32 value) {
  set_has_gift_id();
  gift_id_ = value;
}

// optional uint32 count = 2;
inline bool royal_gift_info::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void royal_gift_info::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void royal_gift_info::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void royal_gift_info::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 royal_gift_info::count() const {
  return count_;
}
inline void royal_gift_info::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// royal_task_update_info

// optional uint32 config_id = 1;
inline bool royal_task_update_info::has_config_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void royal_task_update_info::set_has_config_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void royal_task_update_info::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void royal_task_update_info::clear_config_id() {
  config_id_ = 0u;
  clear_has_config_id();
}
inline ::google::protobuf::uint32 royal_task_update_info::config_id() const {
  return config_id_;
}
inline void royal_task_update_info::set_config_id(::google::protobuf::uint32 value) {
  set_has_config_id();
  config_id_ = value;
}

// optional uint32 task_config_id = 2;
inline bool royal_task_update_info::has_task_config_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void royal_task_update_info::set_has_task_config_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void royal_task_update_info::clear_has_task_config_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void royal_task_update_info::clear_task_config_id() {
  task_config_id_ = 0u;
  clear_has_task_config_id();
}
inline ::google::protobuf::uint32 royal_task_update_info::task_config_id() const {
  return task_config_id_;
}
inline void royal_task_update_info::set_task_config_id(::google::protobuf::uint32 value) {
  set_has_task_config_id();
  task_config_id_ = value;
}

// optional uint32 cur_step = 3;
inline bool royal_task_update_info::has_cur_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void royal_task_update_info::set_has_cur_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void royal_task_update_info::clear_has_cur_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void royal_task_update_info::clear_cur_step() {
  cur_step_ = 0u;
  clear_has_cur_step();
}
inline ::google::protobuf::uint32 royal_task_update_info::cur_step() const {
  return cur_step_;
}
inline void royal_task_update_info::set_cur_step(::google::protobuf::uint32 value) {
  set_has_cur_step();
  cur_step_ = value;
}

// -------------------------------------------------------------------

// royal_base_info

// optional int32 refresh_times = 1;
inline bool royal_base_info::has_refresh_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void royal_base_info::set_has_refresh_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void royal_base_info::clear_has_refresh_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void royal_base_info::clear_refresh_times() {
  refresh_times_ = 0;
  clear_has_refresh_times();
}
inline ::google::protobuf::int32 royal_base_info::refresh_times() const {
  return refresh_times_;
}
inline void royal_base_info::set_refresh_times(::google::protobuf::int32 value) {
  set_has_refresh_times();
  refresh_times_ = value;
}

// optional uint32 visit_times = 2;
inline bool royal_base_info::has_visit_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void royal_base_info::set_has_visit_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void royal_base_info::clear_has_visit_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void royal_base_info::clear_visit_times() {
  visit_times_ = 0u;
  clear_has_visit_times();
}
inline ::google::protobuf::uint32 royal_base_info::visit_times() const {
  return visit_times_;
}
inline void royal_base_info::set_visit_times(::google::protobuf::uint32 value) {
  set_has_visit_times();
  visit_times_ = value;
}

// -------------------------------------------------------------------

// shop_cost_info

// optional uint32 cost_type = 1;
inline bool shop_cost_info::has_cost_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shop_cost_info::set_has_cost_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shop_cost_info::clear_has_cost_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shop_cost_info::clear_cost_type() {
  cost_type_ = 0u;
  clear_has_cost_type();
}
inline ::google::protobuf::uint32 shop_cost_info::cost_type() const {
  return cost_type_;
}
inline void shop_cost_info::set_cost_type(::google::protobuf::uint32 value) {
  set_has_cost_type();
  cost_type_ = value;
}

// optional uint32 cost_num = 2;
inline bool shop_cost_info::has_cost_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void shop_cost_info::set_has_cost_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void shop_cost_info::clear_has_cost_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void shop_cost_info::clear_cost_num() {
  cost_num_ = 0u;
  clear_has_cost_num();
}
inline ::google::protobuf::uint32 shop_cost_info::cost_num() const {
  return cost_num_;
}
inline void shop_cost_info::set_cost_num(::google::protobuf::uint32 value) {
  set_has_cost_num();
  cost_num_ = value;
}

// -------------------------------------------------------------------

// shop_item_info

// optional uint32 sale_config_id = 1;
inline bool shop_item_info::has_sale_config_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shop_item_info::set_has_sale_config_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shop_item_info::clear_has_sale_config_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shop_item_info::clear_sale_config_id() {
  sale_config_id_ = 0u;
  clear_has_sale_config_id();
}
inline ::google::protobuf::uint32 shop_item_info::sale_config_id() const {
  return sale_config_id_;
}
inline void shop_item_info::set_sale_config_id(::google::protobuf::uint32 value) {
  set_has_sale_config_id();
  sale_config_id_ = value;
}

// optional uint32 item_id = 2;
inline bool shop_item_info::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void shop_item_info::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void shop_item_info::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void shop_item_info::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 shop_item_info::item_id() const {
  return item_id_;
}
inline void shop_item_info::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint32 buy_cur_num = 3;
inline bool shop_item_info::has_buy_cur_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void shop_item_info::set_has_buy_cur_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void shop_item_info::clear_has_buy_cur_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void shop_item_info::clear_buy_cur_num() {
  buy_cur_num_ = 0u;
  clear_has_buy_cur_num();
}
inline ::google::protobuf::uint32 shop_item_info::buy_cur_num() const {
  return buy_cur_num_;
}
inline void shop_item_info::set_buy_cur_num(::google::protobuf::uint32 value) {
  set_has_buy_cur_num();
  buy_cur_num_ = value;
}

// -------------------------------------------------------------------

// shop_info

// optional int32 shop_config_id = 1;
inline bool shop_info::has_shop_config_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shop_info::set_has_shop_config_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shop_info::clear_has_shop_config_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shop_info::clear_shop_config_id() {
  shop_config_id_ = 0;
  clear_has_shop_config_id();
}
inline ::google::protobuf::int32 shop_info::shop_config_id() const {
  return shop_config_id_;
}
inline void shop_info::set_shop_config_id(::google::protobuf::int32 value) {
  set_has_shop_config_id();
  shop_config_id_ = value;
}

// optional uint32 user_refresh_times = 2;
inline bool shop_info::has_user_refresh_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void shop_info::set_has_user_refresh_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void shop_info::clear_has_user_refresh_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void shop_info::clear_user_refresh_times() {
  user_refresh_times_ = 0u;
  clear_has_user_refresh_times();
}
inline ::google::protobuf::uint32 shop_info::user_refresh_times() const {
  return user_refresh_times_;
}
inline void shop_info::set_user_refresh_times(::google::protobuf::uint32 value) {
  set_has_user_refresh_times();
  user_refresh_times_ = value;
}

// optional uint64 sys_next_refresh_times = 3;
inline bool shop_info::has_sys_next_refresh_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void shop_info::set_has_sys_next_refresh_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void shop_info::clear_has_sys_next_refresh_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void shop_info::clear_sys_next_refresh_times() {
  sys_next_refresh_times_ = GOOGLE_ULONGLONG(0);
  clear_has_sys_next_refresh_times();
}
inline ::google::protobuf::uint64 shop_info::sys_next_refresh_times() const {
  return sys_next_refresh_times_;
}
inline void shop_info::set_sys_next_refresh_times(::google::protobuf::uint64 value) {
  set_has_sys_next_refresh_times();
  sys_next_refresh_times_ = value;
}

// repeated .SProtoSpace.shop_item_info sale_items = 4;
inline int shop_info::sale_items_size() const {
  return sale_items_.size();
}
inline void shop_info::clear_sale_items() {
  sale_items_.Clear();
}
inline const ::SProtoSpace::shop_item_info& shop_info::sale_items(int index) const {
  return sale_items_.Get(index);
}
inline ::SProtoSpace::shop_item_info* shop_info::mutable_sale_items(int index) {
  return sale_items_.Mutable(index);
}
inline ::SProtoSpace::shop_item_info* shop_info::add_sale_items() {
  return sale_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::shop_item_info >&
shop_info::sale_items() const {
  return sale_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::shop_item_info >*
shop_info::mutable_sale_items() {
  return &sale_items_;
}

// -------------------------------------------------------------------

// refresh_time_info

// optional uint32 day = 1;
inline bool refresh_time_info::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void refresh_time_info::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void refresh_time_info::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void refresh_time_info::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 refresh_time_info::day() const {
  return day_;
}
inline void refresh_time_info::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}

// optional uint32 hour = 2;
inline bool refresh_time_info::has_hour() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void refresh_time_info::set_has_hour() {
  _has_bits_[0] |= 0x00000002u;
}
inline void refresh_time_info::clear_has_hour() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void refresh_time_info::clear_hour() {
  hour_ = 0u;
  clear_has_hour();
}
inline ::google::protobuf::uint32 refresh_time_info::hour() const {
  return hour_;
}
inline void refresh_time_info::set_hour(::google::protobuf::uint32 value) {
  set_has_hour();
  hour_ = value;
}

// optional uint32 minute = 3;
inline bool refresh_time_info::has_minute() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void refresh_time_info::set_has_minute() {
  _has_bits_[0] |= 0x00000004u;
}
inline void refresh_time_info::clear_has_minute() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void refresh_time_info::clear_minute() {
  minute_ = 0u;
  clear_has_minute();
}
inline ::google::protobuf::uint32 refresh_time_info::minute() const {
  return minute_;
}
inline void refresh_time_info::set_minute(::google::protobuf::uint32 value) {
  set_has_minute();
  minute_ = value;
}

// -------------------------------------------------------------------

// tower_base_info

// optional uint32 max_floor = 2 [default = 0];
inline bool tower_base_info::has_max_floor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tower_base_info::set_has_max_floor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tower_base_info::clear_has_max_floor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tower_base_info::clear_max_floor() {
  max_floor_ = 0u;
  clear_has_max_floor();
}
inline ::google::protobuf::uint32 tower_base_info::max_floor() const {
  return max_floor_;
}
inline void tower_base_info::set_max_floor(::google::protobuf::uint32 value) {
  set_has_max_floor();
  max_floor_ = value;
}

// optional uint32 reset_times = 3 [default = 1];
inline bool tower_base_info::has_reset_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tower_base_info::set_has_reset_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tower_base_info::clear_has_reset_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tower_base_info::clear_reset_times() {
  reset_times_ = 1u;
  clear_has_reset_times();
}
inline ::google::protobuf::uint32 tower_base_info::reset_times() const {
  return reset_times_;
}
inline void tower_base_info::set_reset_times(::google::protobuf::uint32 value) {
  set_has_reset_times();
  reset_times_ = value;
}

// optional uint32 cur_floor = 4 [default = 1];
inline bool tower_base_info::has_cur_floor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tower_base_info::set_has_cur_floor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tower_base_info::clear_has_cur_floor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tower_base_info::clear_cur_floor() {
  cur_floor_ = 1u;
  clear_has_cur_floor();
}
inline ::google::protobuf::uint32 tower_base_info::cur_floor() const {
  return cur_floor_;
}
inline void tower_base_info::set_cur_floor(::google::protobuf::uint32 value) {
  set_has_cur_floor();
  cur_floor_ = value;
}

// optional uint32 cur_step = 5;
inline bool tower_base_info::has_cur_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tower_base_info::set_has_cur_step() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tower_base_info::clear_has_cur_step() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tower_base_info::clear_cur_step() {
  cur_step_ = 0u;
  clear_has_cur_step();
}
inline ::google::protobuf::uint32 tower_base_info::cur_step() const {
  return cur_step_;
}
inline void tower_base_info::set_cur_step(::google::protobuf::uint32 value) {
  set_has_cur_step();
  cur_step_ = value;
}

// -------------------------------------------------------------------

// question_info

// optional uint32 question_id = 1;
inline bool question_info::has_question_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void question_info::set_has_question_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void question_info::clear_has_question_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void question_info::clear_question_id() {
  question_id_ = 0u;
  clear_has_question_id();
}
inline ::google::protobuf::uint32 question_info::question_id() const {
  return question_id_;
}
inline void question_info::set_question_id(::google::protobuf::uint32 value) {
  set_has_question_id();
  question_id_ = value;
}

// -------------------------------------------------------------------

// question_data

// optional uint32 type = 1;
inline bool question_data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void question_data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void question_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void question_data::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 question_data::type() const {
  return type_;
}
inline void question_data::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// repeated uint32 questions = 2;
inline int question_data::questions_size() const {
  return questions_.size();
}
inline void question_data::clear_questions() {
  questions_.Clear();
}
inline ::google::protobuf::uint32 question_data::questions(int index) const {
  return questions_.Get(index);
}
inline void question_data::set_questions(int index, ::google::protobuf::uint32 value) {
  questions_.Set(index, value);
}
inline void question_data::add_questions(::google::protobuf::uint32 value) {
  questions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
question_data::questions() const {
  return questions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
question_data::mutable_questions() {
  return &questions_;
}

// -------------------------------------------------------------------

// adv_city_data

// optional int32 city_id = 1;
inline bool adv_city_data::has_city_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void adv_city_data::set_has_city_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void adv_city_data::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void adv_city_data::clear_city_id() {
  city_id_ = 0;
  clear_has_city_id();
}
inline ::google::protobuf::int32 adv_city_data::city_id() const {
  return city_id_;
}
inline void adv_city_data::set_city_id(::google::protobuf::int32 value) {
  set_has_city_id();
  city_id_ = value;
}

// optional bool unlock = 2;
inline bool adv_city_data::has_unlock() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void adv_city_data::set_has_unlock() {
  _has_bits_[0] |= 0x00000002u;
}
inline void adv_city_data::clear_has_unlock() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void adv_city_data::clear_unlock() {
  unlock_ = false;
  clear_has_unlock();
}
inline bool adv_city_data::unlock() const {
  return unlock_;
}
inline void adv_city_data::set_unlock(bool value) {
  set_has_unlock();
  unlock_ = value;
}

// -------------------------------------------------------------------

// adv_event_data

// optional int32 event_id = 1;
inline bool adv_event_data::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void adv_event_data::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void adv_event_data::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void adv_event_data::clear_event_id() {
  event_id_ = 0;
  clear_has_event_id();
}
inline ::google::protobuf::int32 adv_event_data::event_id() const {
  return event_id_;
}
inline void adv_event_data::set_event_id(::google::protobuf::int32 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional int32 weather = 2;
inline bool adv_event_data::has_weather() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void adv_event_data::set_has_weather() {
  _has_bits_[0] |= 0x00000002u;
}
inline void adv_event_data::clear_has_weather() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void adv_event_data::clear_weather() {
  weather_ = 0;
  clear_has_weather();
}
inline ::google::protobuf::int32 adv_event_data::weather() const {
  return weather_;
}
inline void adv_event_data::set_weather(::google::protobuf::int32 value) {
  set_has_weather();
  weather_ = value;
}

// -------------------------------------------------------------------

// hero_events_data

// optional int32 hero_id = 1;
inline bool hero_events_data::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_events_data::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_events_data::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_events_data::clear_hero_id() {
  hero_id_ = 0;
  clear_has_hero_id();
}
inline ::google::protobuf::int32 hero_events_data::hero_id() const {
  return hero_id_;
}
inline void hero_events_data::set_hero_id(::google::protobuf::int32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional int32 hero_favor = 2;
inline bool hero_events_data::has_hero_favor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_events_data::set_has_hero_favor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_events_data::clear_has_hero_favor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_events_data::clear_hero_favor() {
  hero_favor_ = 0;
  clear_has_hero_favor();
}
inline ::google::protobuf::int32 hero_events_data::hero_favor() const {
  return hero_favor_;
}
inline void hero_events_data::set_hero_favor(::google::protobuf::int32 value) {
  set_has_hero_favor();
  hero_favor_ = value;
}

// optional int32 hero_lv = 3;
inline bool hero_events_data::has_hero_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_events_data::set_has_hero_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_events_data::clear_has_hero_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_events_data::clear_hero_lv() {
  hero_lv_ = 0;
  clear_has_hero_lv();
}
inline ::google::protobuf::int32 hero_events_data::hero_lv() const {
  return hero_lv_;
}
inline void hero_events_data::set_hero_lv(::google::protobuf::int32 value) {
  set_has_hero_lv();
  hero_lv_ = value;
}

// optional int32 open_count = 4;
inline bool hero_events_data::has_open_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hero_events_data::set_has_open_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hero_events_data::clear_has_open_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hero_events_data::clear_open_count() {
  open_count_ = 0;
  clear_has_open_count();
}
inline ::google::protobuf::int32 hero_events_data::open_count() const {
  return open_count_;
}
inline void hero_events_data::set_open_count(::google::protobuf::int32 value) {
  set_has_open_count();
  open_count_ = value;
}

// optional int32 all_count = 5;
inline bool hero_events_data::has_all_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void hero_events_data::set_has_all_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void hero_events_data::clear_has_all_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void hero_events_data::clear_all_count() {
  all_count_ = 0;
  clear_has_all_count();
}
inline ::google::protobuf::int32 hero_events_data::all_count() const {
  return all_count_;
}
inline void hero_events_data::set_all_count(::google::protobuf::int32 value) {
  set_has_all_count();
  all_count_ = value;
}

// repeated .SProtoSpace.adv_event_data event_ids = 6;
inline int hero_events_data::event_ids_size() const {
  return event_ids_.size();
}
inline void hero_events_data::clear_event_ids() {
  event_ids_.Clear();
}
inline const ::SProtoSpace::adv_event_data& hero_events_data::event_ids(int index) const {
  return event_ids_.Get(index);
}
inline ::SProtoSpace::adv_event_data* hero_events_data::mutable_event_ids(int index) {
  return event_ids_.Mutable(index);
}
inline ::SProtoSpace::adv_event_data* hero_events_data::add_event_ids() {
  return event_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::adv_event_data >&
hero_events_data::event_ids() const {
  return event_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::adv_event_data >*
hero_events_data::mutable_event_ids() {
  return &event_ids_;
}

// -------------------------------------------------------------------

// city_events_data

// optional int32 city_id = 1;
inline bool city_events_data::has_city_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void city_events_data::set_has_city_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void city_events_data::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void city_events_data::clear_city_id() {
  city_id_ = 0;
  clear_has_city_id();
}
inline ::google::protobuf::int32 city_events_data::city_id() const {
  return city_id_;
}
inline void city_events_data::set_city_id(::google::protobuf::int32 value) {
  set_has_city_id();
  city_id_ = value;
}

// optional int32 open_count = 2;
inline bool city_events_data::has_open_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void city_events_data::set_has_open_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void city_events_data::clear_has_open_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void city_events_data::clear_open_count() {
  open_count_ = 0;
  clear_has_open_count();
}
inline ::google::protobuf::int32 city_events_data::open_count() const {
  return open_count_;
}
inline void city_events_data::set_open_count(::google::protobuf::int32 value) {
  set_has_open_count();
  open_count_ = value;
}

// optional int32 all_count = 3;
inline bool city_events_data::has_all_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void city_events_data::set_has_all_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void city_events_data::clear_has_all_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void city_events_data::clear_all_count() {
  all_count_ = 0;
  clear_has_all_count();
}
inline ::google::protobuf::int32 city_events_data::all_count() const {
  return all_count_;
}
inline void city_events_data::set_all_count(::google::protobuf::int32 value) {
  set_has_all_count();
  all_count_ = value;
}

// repeated .SProtoSpace.adv_event_data event_ids = 4;
inline int city_events_data::event_ids_size() const {
  return event_ids_.size();
}
inline void city_events_data::clear_event_ids() {
  event_ids_.Clear();
}
inline const ::SProtoSpace::adv_event_data& city_events_data::event_ids(int index) const {
  return event_ids_.Get(index);
}
inline ::SProtoSpace::adv_event_data* city_events_data::mutable_event_ids(int index) {
  return event_ids_.Mutable(index);
}
inline ::SProtoSpace::adv_event_data* city_events_data::add_event_ids() {
  return event_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::adv_event_data >&
city_events_data::event_ids() const {
  return event_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::adv_event_data >*
city_events_data::mutable_event_ids() {
  return &event_ids_;
}

// -------------------------------------------------------------------

// hero_favor_info

// optional int32 hero_id = 1;
inline bool hero_favor_info::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_favor_info::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_favor_info::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_favor_info::clear_hero_id() {
  hero_id_ = 0;
  clear_has_hero_id();
}
inline ::google::protobuf::int32 hero_favor_info::hero_id() const {
  return hero_id_;
}
inline void hero_favor_info::set_hero_id(::google::protobuf::int32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional int32 favor = 2;
inline bool hero_favor_info::has_favor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_favor_info::set_has_favor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_favor_info::clear_has_favor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_favor_info::clear_favor() {
  favor_ = 0;
  clear_has_favor();
}
inline ::google::protobuf::int32 hero_favor_info::favor() const {
  return favor_;
}
inline void hero_favor_info::set_favor(::google::protobuf::int32 value) {
  set_has_favor();
  favor_ = value;
}

// optional int32 lv = 3;
inline bool hero_favor_info::has_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_favor_info::set_has_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_favor_info::clear_has_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_favor_info::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 hero_favor_info::lv() const {
  return lv_;
}
inline void hero_favor_info::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EQuestStatus>() {
  return ::SProtoSpace::EQuestStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ERoyalTaskStatus>() {
  return ::SProtoSpace::ERoyalTaskStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EGameTaskType>() {
  return ::SProtoSpace::EGameTaskType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ERoyalEventType>() {
  return ::SProtoSpace::ERoyalEventType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ERoyalOpenCondiType>() {
  return ::SProtoSpace::ERoyalOpenCondiType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ESHOP_OPT_TYPE>() {
  return ::SProtoSpace::ESHOP_OPT_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EShopOpenCondiType>() {
  return ::SProtoSpace::EShopOpenCondiType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ESHOP_TYPE>() {
  return ::SProtoSpace::ESHOP_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ESHOP_GOODS_LIMIT_TYPE>() {
  return ::SProtoSpace::ESHOP_GOODS_LIMIT_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ESHOP_BUY_LIMIT_TYPE>() {
  return ::SProtoSpace::ESHOP_BUY_LIMIT_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EQuestionType>() {
  return ::SProtoSpace::EQuestionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EQuestionClass>() {
  return ::SProtoSpace::EQuestionClass_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EWEATHER_TYPE>() {
  return ::SProtoSpace::EWEATHER_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EShiChen_TYPE>() {
  return ::SProtoSpace::EShiChen_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EEventClass>() {
  return ::SProtoSpace::EEventClass_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EEventType>() {
  return ::SProtoSpace::EEventType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EEventFuncTYpe>() {
  return ::SProtoSpace::EEventFuncTYpe_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cm_5factivitytype_2eproto__INCLUDED
