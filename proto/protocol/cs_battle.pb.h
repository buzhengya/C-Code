// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_battle.proto

#ifndef PROTOBUF_cs_5fbattle_2eproto__INCLUDED
#define PROTOBUF_cs_5fbattle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cs_protoid.pb.h"
#include "cm_battletype.pb.h"
#include "cs_errorcode.pb.h"
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_5fbattle_2eproto();
void protobuf_AssignDesc_cs_5fbattle_2eproto();
void protobuf_ShutdownFile_cs_5fbattle_2eproto();

class battle_1v1_req;
class battle_1v1_ack;
class battle_ready_req;
class battle_ready_ack;
class battle_ready_ntf;
class battle_change_hero_req;
class battle_change_hero_ack;
class battle_change_hero_ntf;
class battle_shot_operate_req;
class battle_shot_operate_ack;
class battle_turn_begin_ntf;
class battle_turn_end_ntf;
class battle_round_begin_ntf;
class battle_round_end_ntf;
class battle_shot_begin_ntf;
class battle_shot_end_ntf;
class battle_info_ntf;
class battle_begin_ntf;
class battle_end_ntf;
class battle_extra_operator_req;
class battle_extra_operator_ack;
class battle_extra_operator_ntf;
class battle_shot_ready_ntf;
class battle_jump_over_ntf;
class battle_begin_req;
class battle_begin_ack;
class battle_end_req;
class battle_end_ack;
class battle_replay_req;
class battle_replay_ack;
class test_office_battle_req;
class test_office_battle_ack;
class hero_formation;
class role_battle_formation_get_ntf;
class role_battle_formation_save_req;
class role_battle_formation_save_ack;
class role_battle_formation_fight_power_req;
class role_battle_formation_fight_power_ack;
class role_battle_hero_fight_power_req;
class role_battle_hero_fight_power_ack;

// ===================================================================

class battle_1v1_req : public ::google::protobuf::Message {
 public:
  battle_1v1_req();
  virtual ~battle_1v1_req();

  battle_1v1_req(const battle_1v1_req& from);

  inline battle_1v1_req& operator=(const battle_1v1_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_1v1_req& default_instance();

  void Swap(battle_1v1_req* other);

  // implements Message ----------------------------------------------

  battle_1v1_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_1v1_req& from);
  void MergeFrom(const battle_1v1_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_1v1_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.EBattleType battle_type = 2;
  inline bool has_battle_type() const;
  inline void clear_battle_type();
  static const int kBattleTypeFieldNumber = 2;
  inline ::SProtoSpace::EBattleType battle_type() const;
  inline void set_battle_type(::SProtoSpace::EBattleType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_1v1_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_type();
  inline void clear_has_battle_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int battle_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_1v1_req* default_instance_;
};
// -------------------------------------------------------------------

class battle_1v1_ack : public ::google::protobuf::Message {
 public:
  battle_1v1_ack();
  virtual ~battle_1v1_ack();

  battle_1v1_ack(const battle_1v1_ack& from);

  inline battle_1v1_ack& operator=(const battle_1v1_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_1v1_ack& default_instance();

  void Swap(battle_1v1_ack* other);

  // implements Message ----------------------------------------------

  battle_1v1_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_1v1_ack& from);
  void MergeFrom(const battle_1v1_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_1v1_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_1v1_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_1v1_ack* default_instance_;
};
// -------------------------------------------------------------------

class battle_ready_req : public ::google::protobuf::Message {
 public:
  battle_ready_req();
  virtual ~battle_ready_req();

  battle_ready_req(const battle_ready_req& from);

  inline battle_ready_req& operator=(const battle_ready_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_ready_req& default_instance();

  void Swap(battle_ready_req* other);

  // implements Message ----------------------------------------------

  battle_ready_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_ready_req& from);
  void MergeFrom(const battle_ready_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_ready_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_ready_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_ready_req* default_instance_;
};
// -------------------------------------------------------------------

class battle_ready_ack : public ::google::protobuf::Message {
 public:
  battle_ready_ack();
  virtual ~battle_ready_ack();

  battle_ready_ack(const battle_ready_ack& from);

  inline battle_ready_ack& operator=(const battle_ready_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_ready_ack& default_instance();

  void Swap(battle_ready_ack* other);

  // implements Message ----------------------------------------------

  battle_ready_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_ready_ack& from);
  void MergeFrom(const battle_ready_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_ready_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_ready_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_ready_ack* default_instance_;
};
// -------------------------------------------------------------------

class battle_ready_ntf : public ::google::protobuf::Message {
 public:
  battle_ready_ntf();
  virtual ~battle_ready_ntf();

  battle_ready_ntf(const battle_ready_ntf& from);

  inline battle_ready_ntf& operator=(const battle_ready_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_ready_ntf& default_instance();

  void Swap(battle_ready_ntf* other);

  // implements Message ----------------------------------------------

  battle_ready_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_ready_ntf& from);
  void MergeFrom(const battle_ready_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_ready_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_ready_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  ::google::protobuf::uint64 role_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_ready_ntf* default_instance_;
};
// -------------------------------------------------------------------

class battle_change_hero_req : public ::google::protobuf::Message {
 public:
  battle_change_hero_req();
  virtual ~battle_change_hero_req();

  battle_change_hero_req(const battle_change_hero_req& from);

  inline battle_change_hero_req& operator=(const battle_change_hero_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_change_hero_req& default_instance();

  void Swap(battle_change_hero_req* other);

  // implements Message ----------------------------------------------

  battle_change_hero_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_change_hero_req& from);
  void MergeFrom(const battle_change_hero_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_change_hero_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional int32 battle_type = 3;
  inline bool has_battle_type() const;
  inline void clear_battle_type();
  static const int kBattleTypeFieldNumber = 3;
  inline ::google::protobuf::int32 battle_type() const;
  inline void set_battle_type(::google::protobuf::int32 value);

  // optional int32 pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional uint64 hero_id = 5;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 5;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_change_hero_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_battle_type();
  inline void clear_has_battle_type();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;
  ::google::protobuf::int32 battle_type_;
  ::google::protobuf::uint64 hero_id_;
  ::google::protobuf::int32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_change_hero_req* default_instance_;
};
// -------------------------------------------------------------------

class battle_change_hero_ack : public ::google::protobuf::Message {
 public:
  battle_change_hero_ack();
  virtual ~battle_change_hero_ack();

  battle_change_hero_ack(const battle_change_hero_ack& from);

  inline battle_change_hero_ack& operator=(const battle_change_hero_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_change_hero_ack& default_instance();

  void Swap(battle_change_hero_ack* other);

  // implements Message ----------------------------------------------

  battle_change_hero_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_change_hero_ack& from);
  void MergeFrom(const battle_change_hero_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_change_hero_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional int32 battle_type = 3;
  inline bool has_battle_type() const;
  inline void clear_battle_type();
  static const int kBattleTypeFieldNumber = 3;
  inline ::google::protobuf::int32 battle_type() const;
  inline void set_battle_type(::google::protobuf::int32 value);

  // optional uint64 hero_id = 4;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 4;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // optional int32 ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_change_hero_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_battle_type();
  inline void clear_has_battle_type();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;
  ::google::protobuf::int32 battle_type_;
  ::google::protobuf::uint64 hero_id_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_change_hero_ack* default_instance_;
};
// -------------------------------------------------------------------

class battle_change_hero_ntf : public ::google::protobuf::Message {
 public:
  battle_change_hero_ntf();
  virtual ~battle_change_hero_ntf();

  battle_change_hero_ntf(const battle_change_hero_ntf& from);

  inline battle_change_hero_ntf& operator=(const battle_change_hero_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_change_hero_ntf& default_instance();

  void Swap(battle_change_hero_ntf* other);

  // implements Message ----------------------------------------------

  battle_change_hero_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_change_hero_ntf& from);
  void MergeFrom(const battle_change_hero_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_change_hero_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional int32 battle_type = 3;
  inline bool has_battle_type() const;
  inline void clear_battle_type();
  static const int kBattleTypeFieldNumber = 3;
  inline ::google::protobuf::int32 battle_type() const;
  inline void set_battle_type(::google::protobuf::int32 value);

  // optional uint64 role_id = 4;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 old_hero_id = 5;
  inline bool has_old_hero_id() const;
  inline void clear_old_hero_id();
  static const int kOldHeroIdFieldNumber = 5;
  inline ::google::protobuf::uint64 old_hero_id() const;
  inline void set_old_hero_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.battle_hero_info new_hero_info = 6;
  inline bool has_new_hero_info() const;
  inline void clear_new_hero_info();
  static const int kNewHeroInfoFieldNumber = 6;
  inline const ::SProtoSpace::battle_hero_info& new_hero_info() const;
  inline ::SProtoSpace::battle_hero_info* mutable_new_hero_info();
  inline ::SProtoSpace::battle_hero_info* release_new_hero_info();
  inline void set_allocated_new_hero_info(::SProtoSpace::battle_hero_info* new_hero_info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_change_hero_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_battle_type();
  inline void clear_has_battle_type();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_old_hero_id();
  inline void clear_has_old_hero_id();
  inline void set_has_new_hero_info();
  inline void clear_has_new_hero_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;
  ::google::protobuf::int32 battle_type_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 old_hero_id_;
  ::SProtoSpace::battle_hero_info* new_hero_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_change_hero_ntf* default_instance_;
};
// -------------------------------------------------------------------

class battle_shot_operate_req : public ::google::protobuf::Message {
 public:
  battle_shot_operate_req();
  virtual ~battle_shot_operate_req();

  battle_shot_operate_req(const battle_shot_operate_req& from);

  inline battle_shot_operate_req& operator=(const battle_shot_operate_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_shot_operate_req& default_instance();

  void Swap(battle_shot_operate_req* other);

  // implements Message ----------------------------------------------

  battle_shot_operate_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_shot_operate_req& from);
  void MergeFrom(const battle_shot_operate_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_operate_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional int32 battle_type = 3;
  inline bool has_battle_type() const;
  inline void clear_battle_type();
  static const int kBattleTypeFieldNumber = 3;
  inline ::google::protobuf::int32 battle_type() const;
  inline void set_battle_type(::google::protobuf::int32 value);

  // optional .SProtoSpace.round_op_param op_param = 4;
  inline bool has_op_param() const;
  inline void clear_op_param();
  static const int kOpParamFieldNumber = 4;
  inline const ::SProtoSpace::round_op_param& op_param() const;
  inline ::SProtoSpace::round_op_param* mutable_op_param();
  inline ::SProtoSpace::round_op_param* release_op_param();
  inline void set_allocated_op_param(::SProtoSpace::round_op_param* op_param);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_shot_operate_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_battle_type();
  inline void clear_has_battle_type();
  inline void set_has_op_param();
  inline void clear_has_op_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;
  ::google::protobuf::int32 battle_type_;
  ::SProtoSpace::round_op_param* op_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_shot_operate_req* default_instance_;
};
// -------------------------------------------------------------------

class battle_shot_operate_ack : public ::google::protobuf::Message {
 public:
  battle_shot_operate_ack();
  virtual ~battle_shot_operate_ack();

  battle_shot_operate_ack(const battle_shot_operate_ack& from);

  inline battle_shot_operate_ack& operator=(const battle_shot_operate_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_shot_operate_ack& default_instance();

  void Swap(battle_shot_operate_ack* other);

  // implements Message ----------------------------------------------

  battle_shot_operate_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_shot_operate_ack& from);
  void MergeFrom(const battle_shot_operate_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_operate_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional int32 battle_type = 3;
  inline bool has_battle_type() const;
  inline void clear_battle_type();
  static const int kBattleTypeFieldNumber = 3;
  inline ::google::protobuf::int32 battle_type() const;
  inline void set_battle_type(::google::protobuf::int32 value);

  // optional .SProtoSpace.round_op_param op_param = 4;
  inline bool has_op_param() const;
  inline void clear_op_param();
  static const int kOpParamFieldNumber = 4;
  inline const ::SProtoSpace::round_op_param& op_param() const;
  inline ::SProtoSpace::round_op_param* mutable_op_param();
  inline ::SProtoSpace::round_op_param* release_op_param();
  inline void set_allocated_op_param(::SProtoSpace::round_op_param* op_param);

  // optional int32 ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_shot_operate_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_battle_type();
  inline void clear_has_battle_type();
  inline void set_has_op_param();
  inline void clear_has_op_param();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;
  ::google::protobuf::int32 battle_type_;
  ::SProtoSpace::round_op_param* op_param_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_shot_operate_ack* default_instance_;
};
// -------------------------------------------------------------------

class battle_turn_begin_ntf : public ::google::protobuf::Message {
 public:
  battle_turn_begin_ntf();
  virtual ~battle_turn_begin_ntf();

  battle_turn_begin_ntf(const battle_turn_begin_ntf& from);

  inline battle_turn_begin_ntf& operator=(const battle_turn_begin_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_turn_begin_ntf& default_instance();

  void Swap(battle_turn_begin_ntf* other);

  // implements Message ----------------------------------------------

  battle_turn_begin_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_turn_begin_ntf& from);
  void MergeFrom(const battle_turn_begin_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_turn_begin_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional uint32 turn_index = 3;
  inline bool has_turn_index() const;
  inline void clear_turn_index();
  static const int kTurnIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 turn_index() const;
  inline void set_turn_index(::google::protobuf::uint32 value);

  // optional .SProtoSpace.opt_seqs seqs = 4;
  inline bool has_seqs() const;
  inline void clear_seqs();
  static const int kSeqsFieldNumber = 4;
  inline const ::SProtoSpace::opt_seqs& seqs() const;
  inline ::SProtoSpace::opt_seqs* mutable_seqs();
  inline ::SProtoSpace::opt_seqs* release_seqs();
  inline void set_allocated_seqs(::SProtoSpace::opt_seqs* seqs);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_turn_begin_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_turn_index();
  inline void clear_has_turn_index();
  inline void set_has_seqs();
  inline void clear_has_seqs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;
  ::google::protobuf::uint32 turn_index_;
  ::SProtoSpace::opt_seqs* seqs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_turn_begin_ntf* default_instance_;
};
// -------------------------------------------------------------------

class battle_turn_end_ntf : public ::google::protobuf::Message {
 public:
  battle_turn_end_ntf();
  virtual ~battle_turn_end_ntf();

  battle_turn_end_ntf(const battle_turn_end_ntf& from);

  inline battle_turn_end_ntf& operator=(const battle_turn_end_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_turn_end_ntf& default_instance();

  void Swap(battle_turn_end_ntf* other);

  // implements Message ----------------------------------------------

  battle_turn_end_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_turn_end_ntf& from);
  void MergeFrom(const battle_turn_end_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_turn_end_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional uint32 turn_index = 3;
  inline bool has_turn_index() const;
  inline void clear_turn_index();
  static const int kTurnIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 turn_index() const;
  inline void set_turn_index(::google::protobuf::uint32 value);

  // optional .SProtoSpace.opt_seqs seqs = 4;
  inline bool has_seqs() const;
  inline void clear_seqs();
  static const int kSeqsFieldNumber = 4;
  inline const ::SProtoSpace::opt_seqs& seqs() const;
  inline ::SProtoSpace::opt_seqs* mutable_seqs();
  inline ::SProtoSpace::opt_seqs* release_seqs();
  inline void set_allocated_seqs(::SProtoSpace::opt_seqs* seqs);

  // optional int32 winner_camp = 5;
  inline bool has_winner_camp() const;
  inline void clear_winner_camp();
  static const int kWinnerCampFieldNumber = 5;
  inline ::google::protobuf::int32 winner_camp() const;
  inline void set_winner_camp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_turn_end_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_turn_index();
  inline void clear_has_turn_index();
  inline void set_has_seqs();
  inline void clear_has_seqs();
  inline void set_has_winner_camp();
  inline void clear_has_winner_camp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;
  ::google::protobuf::uint32 turn_index_;
  ::SProtoSpace::opt_seqs* seqs_;
  ::google::protobuf::int32 winner_camp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_turn_end_ntf* default_instance_;
};
// -------------------------------------------------------------------

class battle_round_begin_ntf : public ::google::protobuf::Message {
 public:
  battle_round_begin_ntf();
  virtual ~battle_round_begin_ntf();

  battle_round_begin_ntf(const battle_round_begin_ntf& from);

  inline battle_round_begin_ntf& operator=(const battle_round_begin_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_round_begin_ntf& default_instance();

  void Swap(battle_round_begin_ntf* other);

  // implements Message ----------------------------------------------

  battle_round_begin_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_round_begin_ntf& from);
  void MergeFrom(const battle_round_begin_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_round_begin_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional uint32 round_index = 3;
  inline bool has_round_index() const;
  inline void clear_round_index();
  static const int kRoundIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 round_index() const;
  inline void set_round_index(::google::protobuf::uint32 value);

  // optional .SProtoSpace.opt_seqs seqs = 4;
  inline bool has_seqs() const;
  inline void clear_seqs();
  static const int kSeqsFieldNumber = 4;
  inline const ::SProtoSpace::opt_seqs& seqs() const;
  inline ::SProtoSpace::opt_seqs* mutable_seqs();
  inline ::SProtoSpace::opt_seqs* release_seqs();
  inline void set_allocated_seqs(::SProtoSpace::opt_seqs* seqs);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_round_begin_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_round_index();
  inline void clear_has_round_index();
  inline void set_has_seqs();
  inline void clear_has_seqs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;
  ::google::protobuf::uint32 round_index_;
  ::SProtoSpace::opt_seqs* seqs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_round_begin_ntf* default_instance_;
};
// -------------------------------------------------------------------

class battle_round_end_ntf : public ::google::protobuf::Message {
 public:
  battle_round_end_ntf();
  virtual ~battle_round_end_ntf();

  battle_round_end_ntf(const battle_round_end_ntf& from);

  inline battle_round_end_ntf& operator=(const battle_round_end_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_round_end_ntf& default_instance();

  void Swap(battle_round_end_ntf* other);

  // implements Message ----------------------------------------------

  battle_round_end_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_round_end_ntf& from);
  void MergeFrom(const battle_round_end_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_round_end_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional uint32 round_index = 3;
  inline bool has_round_index() const;
  inline void clear_round_index();
  static const int kRoundIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 round_index() const;
  inline void set_round_index(::google::protobuf::uint32 value);

  // optional .SProtoSpace.opt_seqs seqs = 4;
  inline bool has_seqs() const;
  inline void clear_seqs();
  static const int kSeqsFieldNumber = 4;
  inline const ::SProtoSpace::opt_seqs& seqs() const;
  inline ::SProtoSpace::opt_seqs* mutable_seqs();
  inline ::SProtoSpace::opt_seqs* release_seqs();
  inline void set_allocated_seqs(::SProtoSpace::opt_seqs* seqs);

  // optional int32 winner_camp = 5;
  inline bool has_winner_camp() const;
  inline void clear_winner_camp();
  static const int kWinnerCampFieldNumber = 5;
  inline ::google::protobuf::int32 winner_camp() const;
  inline void set_winner_camp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_round_end_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_round_index();
  inline void clear_has_round_index();
  inline void set_has_seqs();
  inline void clear_has_seqs();
  inline void set_has_winner_camp();
  inline void clear_has_winner_camp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;
  ::google::protobuf::uint32 round_index_;
  ::SProtoSpace::opt_seqs* seqs_;
  ::google::protobuf::int32 winner_camp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_round_end_ntf* default_instance_;
};
// -------------------------------------------------------------------

class battle_shot_begin_ntf : public ::google::protobuf::Message {
 public:
  battle_shot_begin_ntf();
  virtual ~battle_shot_begin_ntf();

  battle_shot_begin_ntf(const battle_shot_begin_ntf& from);

  inline battle_shot_begin_ntf& operator=(const battle_shot_begin_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_shot_begin_ntf& default_instance();

  void Swap(battle_shot_begin_ntf* other);

  // implements Message ----------------------------------------------

  battle_shot_begin_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_shot_begin_ntf& from);
  void MergeFrom(const battle_shot_begin_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_begin_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional uint64 obj_id = 3;
  inline bool has_obj_id() const;
  inline void clear_obj_id();
  static const int kObjIdFieldNumber = 3;
  inline ::google::protobuf::uint64 obj_id() const;
  inline void set_obj_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.opt_seqs seqs = 4;
  inline bool has_seqs() const;
  inline void clear_seqs();
  static const int kSeqsFieldNumber = 4;
  inline const ::SProtoSpace::opt_seqs& seqs() const;
  inline ::SProtoSpace::opt_seqs* mutable_seqs();
  inline ::SProtoSpace::opt_seqs* release_seqs();
  inline void set_allocated_seqs(::SProtoSpace::opt_seqs* seqs);

  // optional int32 shot_index = 5;
  inline bool has_shot_index() const;
  inline void clear_shot_index();
  static const int kShotIndexFieldNumber = 5;
  inline ::google::protobuf::int32 shot_index() const;
  inline void set_shot_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_shot_begin_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_obj_id();
  inline void clear_has_obj_id();
  inline void set_has_seqs();
  inline void clear_has_seqs();
  inline void set_has_shot_index();
  inline void clear_has_shot_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  ::google::protobuf::uint64 obj_id_;
  int protoid_;
  ::google::protobuf::int32 shot_index_;
  ::SProtoSpace::opt_seqs* seqs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_shot_begin_ntf* default_instance_;
};
// -------------------------------------------------------------------

class battle_shot_end_ntf : public ::google::protobuf::Message {
 public:
  battle_shot_end_ntf();
  virtual ~battle_shot_end_ntf();

  battle_shot_end_ntf(const battle_shot_end_ntf& from);

  inline battle_shot_end_ntf& operator=(const battle_shot_end_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_shot_end_ntf& default_instance();

  void Swap(battle_shot_end_ntf* other);

  // implements Message ----------------------------------------------

  battle_shot_end_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_shot_end_ntf& from);
  void MergeFrom(const battle_shot_end_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_end_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional int32 shot_index = 3;
  inline bool has_shot_index() const;
  inline void clear_shot_index();
  static const int kShotIndexFieldNumber = 3;
  inline ::google::protobuf::int32 shot_index() const;
  inline void set_shot_index(::google::protobuf::int32 value);

  // repeated .SProtoSpace.opt_seqs seqs = 5;
  inline int seqs_size() const;
  inline void clear_seqs();
  static const int kSeqsFieldNumber = 5;
  inline const ::SProtoSpace::opt_seqs& seqs(int index) const;
  inline ::SProtoSpace::opt_seqs* mutable_seqs(int index);
  inline ::SProtoSpace::opt_seqs* add_seqs();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::opt_seqs >&
      seqs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::opt_seqs >*
      mutable_seqs();

  // optional .SProtoSpace.seq_sp sp_info = 6;
  inline bool has_sp_info() const;
  inline void clear_sp_info();
  static const int kSpInfoFieldNumber = 6;
  inline const ::SProtoSpace::seq_sp& sp_info() const;
  inline ::SProtoSpace::seq_sp* mutable_sp_info();
  inline ::SProtoSpace::seq_sp* release_sp_info();
  inline void set_allocated_sp_info(::SProtoSpace::seq_sp* sp_info);

  // optional int32 winner_camp = 7;
  inline bool has_winner_camp() const;
  inline void clear_winner_camp();
  static const int kWinnerCampFieldNumber = 7;
  inline ::google::protobuf::int32 winner_camp() const;
  inline void set_winner_camp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_shot_end_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_shot_index();
  inline void clear_has_shot_index();
  inline void set_has_sp_info();
  inline void clear_has_sp_info();
  inline void set_has_winner_camp();
  inline void clear_has_winner_camp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;
  ::google::protobuf::int32 shot_index_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::opt_seqs > seqs_;
  ::SProtoSpace::seq_sp* sp_info_;
  ::google::protobuf::int32 winner_camp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_shot_end_ntf* default_instance_;
};
// -------------------------------------------------------------------

class battle_info_ntf : public ::google::protobuf::Message {
 public:
  battle_info_ntf();
  virtual ~battle_info_ntf();

  battle_info_ntf(const battle_info_ntf& from);

  inline battle_info_ntf& operator=(const battle_info_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_info_ntf& default_instance();

  void Swap(battle_info_ntf* other);

  // implements Message ----------------------------------------------

  battle_info_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_info_ntf& from);
  void MergeFrom(const battle_info_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_info_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional .SProtoSpace.client_battle_data data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::SProtoSpace::client_battle_data& data() const;
  inline ::SProtoSpace::client_battle_data* mutable_data();
  inline ::SProtoSpace::client_battle_data* release_data();
  inline void set_allocated_data(::SProtoSpace::client_battle_data* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_info_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  ::SProtoSpace::client_battle_data* data_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_info_ntf* default_instance_;
};
// -------------------------------------------------------------------

class battle_begin_ntf : public ::google::protobuf::Message {
 public:
  battle_begin_ntf();
  virtual ~battle_begin_ntf();

  battle_begin_ntf(const battle_begin_ntf& from);

  inline battle_begin_ntf& operator=(const battle_begin_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_begin_ntf& default_instance();

  void Swap(battle_begin_ntf* other);

  // implements Message ----------------------------------------------

  battle_begin_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_begin_ntf& from);
  void MergeFrom(const battle_begin_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_begin_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional uint32 battle_type = 3;
  inline bool has_battle_type() const;
  inline void clear_battle_type();
  static const int kBattleTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 battle_type() const;
  inline void set_battle_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_begin_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_battle_type();
  inline void clear_has_battle_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;
  ::google::protobuf::uint32 battle_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_begin_ntf* default_instance_;
};
// -------------------------------------------------------------------

class battle_end_ntf : public ::google::protobuf::Message {
 public:
  battle_end_ntf();
  virtual ~battle_end_ntf();

  battle_end_ntf(const battle_end_ntf& from);

  inline battle_end_ntf& operator=(const battle_end_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_end_ntf& default_instance();

  void Swap(battle_end_ntf* other);

  // implements Message ----------------------------------------------

  battle_end_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_end_ntf& from);
  void MergeFrom(const battle_end_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_end_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional uint32 battle_type = 3;
  inline bool has_battle_type() const;
  inline void clear_battle_type();
  static const int kBattleTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 battle_type() const;
  inline void set_battle_type(::google::protobuf::uint32 value);

  // optional int32 winner_camp = 4;
  inline bool has_winner_camp() const;
  inline void clear_winner_camp();
  static const int kWinnerCampFieldNumber = 4;
  inline ::google::protobuf::int32 winner_camp() const;
  inline void set_winner_camp(::google::protobuf::int32 value);

  // repeated .SProtoSpace.round_data data = 5;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::SProtoSpace::round_data& data(int index) const;
  inline ::SProtoSpace::round_data* mutable_data(int index);
  inline ::SProtoSpace::round_data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::round_data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::round_data >*
      mutable_data();

  // optional int32 turn_index = 6;
  inline bool has_turn_index() const;
  inline void clear_turn_index();
  static const int kTurnIndexFieldNumber = 6;
  inline ::google::protobuf::int32 turn_index() const;
  inline void set_turn_index(::google::protobuf::int32 value);

  // optional int32 round_index = 7;
  inline bool has_round_index() const;
  inline void clear_round_index();
  static const int kRoundIndexFieldNumber = 7;
  inline ::google::protobuf::int32 round_index() const;
  inline void set_round_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_end_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_battle_type();
  inline void clear_has_battle_type();
  inline void set_has_winner_camp();
  inline void clear_has_winner_camp();
  inline void set_has_turn_index();
  inline void clear_has_turn_index();
  inline void set_has_round_index();
  inline void clear_has_round_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;
  ::google::protobuf::uint32 battle_type_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::round_data > data_;
  ::google::protobuf::int32 winner_camp_;
  ::google::protobuf::int32 turn_index_;
  ::google::protobuf::int32 round_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_end_ntf* default_instance_;
};
// -------------------------------------------------------------------

class battle_extra_operator_req : public ::google::protobuf::Message {
 public:
  battle_extra_operator_req();
  virtual ~battle_extra_operator_req();

  battle_extra_operator_req(const battle_extra_operator_req& from);

  inline battle_extra_operator_req& operator=(const battle_extra_operator_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_extra_operator_req& default_instance();

  void Swap(battle_extra_operator_req* other);

  // implements Message ----------------------------------------------

  battle_extra_operator_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_extra_operator_req& from);
  void MergeFrom(const battle_extra_operator_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_extra_operator_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional uint64 obj_uuid = 3;
  inline bool has_obj_uuid() const;
  inline void clear_obj_uuid();
  static const int kObjUuidFieldNumber = 3;
  inline ::google::protobuf::uint64 obj_uuid() const;
  inline void set_obj_uuid(::google::protobuf::uint64 value);

  // optional int32 skill_id = 4;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 4;
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_extra_operator_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_obj_uuid();
  inline void clear_has_obj_uuid();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;
  ::google::protobuf::int32 skill_id_;
  ::google::protobuf::uint64 obj_uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_extra_operator_req* default_instance_;
};
// -------------------------------------------------------------------

class battle_extra_operator_ack : public ::google::protobuf::Message {
 public:
  battle_extra_operator_ack();
  virtual ~battle_extra_operator_ack();

  battle_extra_operator_ack(const battle_extra_operator_ack& from);

  inline battle_extra_operator_ack& operator=(const battle_extra_operator_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_extra_operator_ack& default_instance();

  void Swap(battle_extra_operator_ack* other);

  // implements Message ----------------------------------------------

  battle_extra_operator_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_extra_operator_ack& from);
  void MergeFrom(const battle_extra_operator_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_extra_operator_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 battle_uuid = 3;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 3;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional uint64 obj_uuid = 4;
  inline bool has_obj_uuid() const;
  inline void clear_obj_uuid();
  static const int kObjUuidFieldNumber = 4;
  inline ::google::protobuf::uint64 obj_uuid() const;
  inline void set_obj_uuid(::google::protobuf::uint64 value);

  // optional int32 skill_id = 5;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 5;
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_extra_operator_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_obj_uuid();
  inline void clear_has_obj_uuid();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 battle_uuid_;
  ::google::protobuf::uint64 obj_uuid_;
  ::google::protobuf::int32 skill_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_extra_operator_ack* default_instance_;
};
// -------------------------------------------------------------------

class battle_extra_operator_ntf : public ::google::protobuf::Message {
 public:
  battle_extra_operator_ntf();
  virtual ~battle_extra_operator_ntf();

  battle_extra_operator_ntf(const battle_extra_operator_ntf& from);

  inline battle_extra_operator_ntf& operator=(const battle_extra_operator_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_extra_operator_ntf& default_instance();

  void Swap(battle_extra_operator_ntf* other);

  // implements Message ----------------------------------------------

  battle_extra_operator_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_extra_operator_ntf& from);
  void MergeFrom(const battle_extra_operator_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_extra_operator_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // optional uint64 obj_uuid = 3;
  inline bool has_obj_uuid() const;
  inline void clear_obj_uuid();
  static const int kObjUuidFieldNumber = 3;
  inline ::google::protobuf::uint64 obj_uuid() const;
  inline void set_obj_uuid(::google::protobuf::uint64 value);

  // optional int32 skill_id = 4;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 4;
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_extra_operator_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();
  inline void set_has_obj_uuid();
  inline void clear_has_obj_uuid();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;
  ::google::protobuf::int32 skill_id_;
  ::google::protobuf::uint64 obj_uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_extra_operator_ntf* default_instance_;
};
// -------------------------------------------------------------------

class battle_shot_ready_ntf : public ::google::protobuf::Message {
 public:
  battle_shot_ready_ntf();
  virtual ~battle_shot_ready_ntf();

  battle_shot_ready_ntf(const battle_shot_ready_ntf& from);

  inline battle_shot_ready_ntf& operator=(const battle_shot_ready_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_shot_ready_ntf& default_instance();

  void Swap(battle_shot_ready_ntf* other);

  // implements Message ----------------------------------------------

  battle_shot_ready_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_shot_ready_ntf& from);
  void MergeFrom(const battle_shot_ready_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_ready_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_shot_ready_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_shot_ready_ntf* default_instance_;
};
// -------------------------------------------------------------------

class battle_jump_over_ntf : public ::google::protobuf::Message {
 public:
  battle_jump_over_ntf();
  virtual ~battle_jump_over_ntf();

  battle_jump_over_ntf(const battle_jump_over_ntf& from);

  inline battle_jump_over_ntf& operator=(const battle_jump_over_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_jump_over_ntf& default_instance();

  void Swap(battle_jump_over_ntf* other);

  // implements Message ----------------------------------------------

  battle_jump_over_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_jump_over_ntf& from);
  void MergeFrom(const battle_jump_over_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_jump_over_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 battle_uuid = 2;
  inline bool has_battle_uuid() const;
  inline void clear_battle_uuid();
  static const int kBattleUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 battle_uuid() const;
  inline void set_battle_uuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_jump_over_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_battle_uuid();
  inline void clear_has_battle_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 battle_uuid_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_jump_over_ntf* default_instance_;
};
// -------------------------------------------------------------------

class battle_begin_req : public ::google::protobuf::Message {
 public:
  battle_begin_req();
  virtual ~battle_begin_req();

  battle_begin_req(const battle_begin_req& from);

  inline battle_begin_req& operator=(const battle_begin_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_begin_req& default_instance();

  void Swap(battle_begin_req* other);

  // implements Message ----------------------------------------------

  battle_begin_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_begin_req& from);
  void MergeFrom(const battle_begin_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_begin_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 battle_id = 3;
  inline bool has_battle_id() const;
  inline void clear_battle_id();
  static const int kBattleIdFieldNumber = 3;
  inline ::google::protobuf::int32 battle_id() const;
  inline void set_battle_id(::google::protobuf::int32 value);

  // optional int32 module_id = 4;
  inline bool has_module_id() const;
  inline void clear_module_id();
  static const int kModuleIdFieldNumber = 4;
  inline ::google::protobuf::int32 module_id() const;
  inline void set_module_id(::google::protobuf::int32 value);

  // optional uint64 role_id = 5;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.EHeroFormationType formation_type = 6;
  inline bool has_formation_type() const;
  inline void clear_formation_type();
  static const int kFormationTypeFieldNumber = 6;
  inline ::SProtoSpace::EHeroFormationType formation_type() const;
  inline void set_formation_type(::SProtoSpace::EHeroFormationType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_begin_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_battle_id();
  inline void clear_has_battle_id();
  inline void set_has_module_id();
  inline void clear_has_module_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_formation_type();
  inline void clear_has_formation_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 battle_id_;
  ::google::protobuf::int32 module_id_;
  ::google::protobuf::uint64 role_id_;
  int formation_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_begin_req* default_instance_;
};
// -------------------------------------------------------------------

class battle_begin_ack : public ::google::protobuf::Message {
 public:
  battle_begin_ack();
  virtual ~battle_begin_ack();

  battle_begin_ack(const battle_begin_ack& from);

  inline battle_begin_ack& operator=(const battle_begin_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_begin_ack& default_instance();

  void Swap(battle_begin_ack* other);

  // implements Message ----------------------------------------------

  battle_begin_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_begin_ack& from);
  void MergeFrom(const battle_begin_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_begin_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2 [default = 0];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 battle_id = 4;
  inline bool has_battle_id() const;
  inline void clear_battle_id();
  static const int kBattleIdFieldNumber = 4;
  inline ::google::protobuf::int32 battle_id() const;
  inline void set_battle_id(::google::protobuf::int32 value);

  // optional int32 module_id = 5;
  inline bool has_module_id() const;
  inline void clear_module_id();
  static const int kModuleIdFieldNumber = 5;
  inline ::google::protobuf::int32 module_id() const;
  inline void set_module_id(::google::protobuf::int32 value);

  // optional uint32 seed = 6;
  inline bool has_seed() const;
  inline void clear_seed();
  static const int kSeedFieldNumber = 6;
  inline ::google::protobuf::uint32 seed() const;
  inline void set_seed(::google::protobuf::uint32 value);

  // optional uint64 role_id = 7;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 7;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.EHeroFormationType formation_type = 8;
  inline bool has_formation_type() const;
  inline void clear_formation_type();
  static const int kFormationTypeFieldNumber = 8;
  inline ::SProtoSpace::EHeroFormationType formation_type() const;
  inline void set_formation_type(::SProtoSpace::EHeroFormationType value);

  // optional .SProtoSpace.battle_role_info role_info = 9;
  inline bool has_role_info() const;
  inline void clear_role_info();
  static const int kRoleInfoFieldNumber = 9;
  inline const ::SProtoSpace::battle_role_info& role_info() const;
  inline ::SProtoSpace::battle_role_info* mutable_role_info();
  inline ::SProtoSpace::battle_role_info* release_role_info();
  inline void set_allocated_role_info(::SProtoSpace::battle_role_info* role_info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_begin_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_battle_id();
  inline void clear_has_battle_id();
  inline void set_has_module_id();
  inline void clear_has_module_id();
  inline void set_has_seed();
  inline void clear_has_seed();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_formation_type();
  inline void clear_has_formation_type();
  inline void set_has_role_info();
  inline void clear_has_role_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 battle_id_;
  ::google::protobuf::int32 module_id_;
  ::google::protobuf::uint32 seed_;
  ::google::protobuf::uint64 role_id_;
  ::SProtoSpace::battle_role_info* role_info_;
  int formation_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_begin_ack* default_instance_;
};
// -------------------------------------------------------------------

class battle_end_req : public ::google::protobuf::Message {
 public:
  battle_end_req();
  virtual ~battle_end_req();

  battle_end_req(const battle_end_req& from);

  inline battle_end_req& operator=(const battle_end_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_end_req& default_instance();

  void Swap(battle_end_req* other);

  // implements Message ----------------------------------------------

  battle_end_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_end_req& from);
  void MergeFrom(const battle_end_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_end_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.battle_end_data end_data = 2;
  inline bool has_end_data() const;
  inline void clear_end_data();
  static const int kEndDataFieldNumber = 2;
  inline const ::SProtoSpace::battle_end_data& end_data() const;
  inline ::SProtoSpace::battle_end_data* mutable_end_data();
  inline ::SProtoSpace::battle_end_data* release_end_data();
  inline void set_allocated_end_data(::SProtoSpace::battle_end_data* end_data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_end_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_end_data();
  inline void clear_has_end_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::battle_end_data* end_data_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_end_req* default_instance_;
};
// -------------------------------------------------------------------

class battle_end_ack : public ::google::protobuf::Message {
 public:
  battle_end_ack();
  virtual ~battle_end_ack();

  battle_end_ack(const battle_end_ack& from);

  inline battle_end_ack& operator=(const battle_end_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_end_ack& default_instance();

  void Swap(battle_end_ack* other);

  // implements Message ----------------------------------------------

  battle_end_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_end_ack& from);
  void MergeFrom(const battle_end_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_end_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2 [default = 0];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 battle_id = 4;
  inline bool has_battle_id() const;
  inline void clear_battle_id();
  static const int kBattleIdFieldNumber = 4;
  inline ::google::protobuf::int32 battle_id() const;
  inline void set_battle_id(::google::protobuf::int32 value);

  // optional bool is_win = 5;
  inline bool has_is_win() const;
  inline void clear_is_win();
  static const int kIsWinFieldNumber = 5;
  inline bool is_win() const;
  inline void set_is_win(bool value);

  // optional bool is_cheat = 6;
  inline bool has_is_cheat() const;
  inline void clear_is_cheat();
  static const int kIsCheatFieldNumber = 6;
  inline bool is_cheat() const;
  inline void set_is_cheat(bool value);

  // optional int32 module_id = 7;
  inline bool has_module_id() const;
  inline void clear_module_id();
  static const int kModuleIdFieldNumber = 7;
  inline ::google::protobuf::int32 module_id() const;
  inline void set_module_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.EHeroFormationType formation_type = 8;
  inline bool has_formation_type() const;
  inline void clear_formation_type();
  static const int kFormationTypeFieldNumber = 8;
  inline ::SProtoSpace::EHeroFormationType formation_type() const;
  inline void set_formation_type(::SProtoSpace::EHeroFormationType value);

  // optional .SProtoSpace.battle_reward reward = 9;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 9;
  inline const ::SProtoSpace::battle_reward& reward() const;
  inline ::SProtoSpace::battle_reward* mutable_reward();
  inline ::SProtoSpace::battle_reward* release_reward();
  inline void set_allocated_reward(::SProtoSpace::battle_reward* reward);

  // optional int32 stars = 10;
  inline bool has_stars() const;
  inline void clear_stars();
  static const int kStarsFieldNumber = 10;
  inline ::google::protobuf::int32 stars() const;
  inline void set_stars(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_end_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_battle_id();
  inline void clear_has_battle_id();
  inline void set_has_is_win();
  inline void clear_has_is_win();
  inline void set_has_is_cheat();
  inline void clear_has_is_cheat();
  inline void set_has_module_id();
  inline void clear_has_module_id();
  inline void set_has_formation_type();
  inline void clear_has_formation_type();
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_stars();
  inline void clear_has_stars();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 battle_id_;
  bool is_win_;
  bool is_cheat_;
  ::google::protobuf::int32 module_id_;
  ::SProtoSpace::battle_reward* reward_;
  int formation_type_;
  ::google::protobuf::int32 stars_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_end_ack* default_instance_;
};
// -------------------------------------------------------------------

class battle_replay_req : public ::google::protobuf::Message {
 public:
  battle_replay_req();
  virtual ~battle_replay_req();

  battle_replay_req(const battle_replay_req& from);

  inline battle_replay_req& operator=(const battle_replay_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_replay_req& default_instance();

  void Swap(battle_replay_req* other);

  // implements Message ----------------------------------------------

  battle_replay_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_replay_req& from);
  void MergeFrom(const battle_replay_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_replay_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 replay_id = 2;
  inline bool has_replay_id() const;
  inline void clear_replay_id();
  static const int kReplayIdFieldNumber = 2;
  inline ::google::protobuf::uint64 replay_id() const;
  inline void set_replay_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_replay_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_replay_id();
  inline void clear_has_replay_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 replay_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_replay_req* default_instance_;
};
// -------------------------------------------------------------------

class battle_replay_ack : public ::google::protobuf::Message {
 public:
  battle_replay_ack();
  virtual ~battle_replay_ack();

  battle_replay_ack(const battle_replay_ack& from);

  inline battle_replay_ack& operator=(const battle_replay_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const battle_replay_ack& default_instance();

  void Swap(battle_replay_ack* other);

  // implements Message ----------------------------------------------

  battle_replay_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const battle_replay_ack& from);
  void MergeFrom(const battle_replay_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_replay_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2 [default = 0];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 replay_id = 3;
  inline bool has_replay_id() const;
  inline void clear_replay_id();
  static const int kReplayIdFieldNumber = 3;
  inline ::google::protobuf::uint64 replay_id() const;
  inline void set_replay_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.battle_replay_info data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::SProtoSpace::battle_replay_info& data() const;
  inline ::SProtoSpace::battle_replay_info* mutable_data();
  inline ::SProtoSpace::battle_replay_info* release_data();
  inline void set_allocated_data(::SProtoSpace::battle_replay_info* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.battle_replay_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_replay_id();
  inline void clear_has_replay_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 replay_id_;
  ::SProtoSpace::battle_replay_info* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static battle_replay_ack* default_instance_;
};
// -------------------------------------------------------------------

class test_office_battle_req : public ::google::protobuf::Message {
 public:
  test_office_battle_req();
  virtual ~test_office_battle_req();

  test_office_battle_req(const test_office_battle_req& from);

  inline test_office_battle_req& operator=(const test_office_battle_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const test_office_battle_req& default_instance();

  void Swap(test_office_battle_req* other);

  // implements Message ----------------------------------------------

  test_office_battle_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const test_office_battle_req& from);
  void MergeFrom(const test_office_battle_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = test_office_battle_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint64 index() const;
  inline void set_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.test_office_battle_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 index_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static test_office_battle_req* default_instance_;
};
// -------------------------------------------------------------------

class test_office_battle_ack : public ::google::protobuf::Message {
 public:
  test_office_battle_ack();
  virtual ~test_office_battle_ack();

  test_office_battle_ack(const test_office_battle_ack& from);

  inline test_office_battle_ack& operator=(const test_office_battle_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const test_office_battle_ack& default_instance();

  void Swap(test_office_battle_ack* other);

  // implements Message ----------------------------------------------

  test_office_battle_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const test_office_battle_ack& from);
  void MergeFrom(const test_office_battle_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = test_office_battle_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint64 index() const;
  inline void set_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.test_office_battle_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 index_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static test_office_battle_ack* default_instance_;
};
// -------------------------------------------------------------------

class hero_formation : public ::google::protobuf::Message {
 public:
  hero_formation();
  virtual ~hero_formation();

  hero_formation(const hero_formation& from);

  inline hero_formation& operator=(const hero_formation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_formation& default_instance();

  void Swap(hero_formation* other);

  // implements Message ----------------------------------------------

  hero_formation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_formation& from);
  void MergeFrom(const hero_formation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.EHeroFormationType formation_type = 1;
  inline bool has_formation_type() const;
  inline void clear_formation_type();
  static const int kFormationTypeFieldNumber = 1;
  inline ::SProtoSpace::EHeroFormationType formation_type() const;
  inline void set_formation_type(::SProtoSpace::EHeroFormationType value);

  // repeated uint64 hero_ids = 2;
  inline int hero_ids_size() const;
  inline void clear_hero_ids();
  static const int kHeroIdsFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_ids(int index) const;
  inline void set_hero_ids(int index, ::google::protobuf::uint64 value);
  inline void add_hero_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      hero_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_hero_ids();

  // optional int32 role_position = 3;
  inline bool has_role_position() const;
  inline void clear_role_position();
  static const int kRolePositionFieldNumber = 3;
  inline ::google::protobuf::int32 role_position() const;
  inline void set_role_position(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_formation)
 private:
  inline void set_has_formation_type();
  inline void clear_has_formation_type();
  inline void set_has_role_position();
  inline void clear_has_role_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > hero_ids_;
  int formation_type_;
  ::google::protobuf::int32 role_position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static hero_formation* default_instance_;
};
// -------------------------------------------------------------------

class role_battle_formation_get_ntf : public ::google::protobuf::Message {
 public:
  role_battle_formation_get_ntf();
  virtual ~role_battle_formation_get_ntf();

  role_battle_formation_get_ntf(const role_battle_formation_get_ntf& from);

  inline role_battle_formation_get_ntf& operator=(const role_battle_formation_get_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_battle_formation_get_ntf& default_instance();

  void Swap(role_battle_formation_get_ntf* other);

  // implements Message ----------------------------------------------

  role_battle_formation_get_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_battle_formation_get_ntf& from);
  void MergeFrom(const role_battle_formation_get_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_get_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.hero_formation formations = 2;
  inline int formations_size() const;
  inline void clear_formations();
  static const int kFormationsFieldNumber = 2;
  inline const ::SProtoSpace::hero_formation& formations(int index) const;
  inline ::SProtoSpace::hero_formation* mutable_formations(int index);
  inline ::SProtoSpace::hero_formation* add_formations();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_formation >&
      formations() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_formation >*
      mutable_formations();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_battle_formation_get_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_formation > formations_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static role_battle_formation_get_ntf* default_instance_;
};
// -------------------------------------------------------------------

class role_battle_formation_save_req : public ::google::protobuf::Message {
 public:
  role_battle_formation_save_req();
  virtual ~role_battle_formation_save_req();

  role_battle_formation_save_req(const role_battle_formation_save_req& from);

  inline role_battle_formation_save_req& operator=(const role_battle_formation_save_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_battle_formation_save_req& default_instance();

  void Swap(role_battle_formation_save_req* other);

  // implements Message ----------------------------------------------

  role_battle_formation_save_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_battle_formation_save_req& from);
  void MergeFrom(const role_battle_formation_save_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_save_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.hero_formation formation = 2;
  inline bool has_formation() const;
  inline void clear_formation();
  static const int kFormationFieldNumber = 2;
  inline const ::SProtoSpace::hero_formation& formation() const;
  inline ::SProtoSpace::hero_formation* mutable_formation();
  inline ::SProtoSpace::hero_formation* release_formation();
  inline void set_allocated_formation(::SProtoSpace::hero_formation* formation);

  // repeated .SProtoSpace.hero_formation formations = 3;
  inline int formations_size() const;
  inline void clear_formations();
  static const int kFormationsFieldNumber = 3;
  inline const ::SProtoSpace::hero_formation& formations(int index) const;
  inline ::SProtoSpace::hero_formation* mutable_formations(int index);
  inline ::SProtoSpace::hero_formation* add_formations();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_formation >&
      formations() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_formation >*
      mutable_formations();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_battle_formation_save_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_formation();
  inline void clear_has_formation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::hero_formation* formation_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_formation > formations_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static role_battle_formation_save_req* default_instance_;
};
// -------------------------------------------------------------------

class role_battle_formation_save_ack : public ::google::protobuf::Message {
 public:
  role_battle_formation_save_ack();
  virtual ~role_battle_formation_save_ack();

  role_battle_formation_save_ack(const role_battle_formation_save_ack& from);

  inline role_battle_formation_save_ack& operator=(const role_battle_formation_save_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_battle_formation_save_ack& default_instance();

  void Swap(role_battle_formation_save_ack* other);

  // implements Message ----------------------------------------------

  role_battle_formation_save_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_battle_formation_save_ack& from);
  void MergeFrom(const role_battle_formation_save_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_save_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 rec_code = 2;
  inline bool has_rec_code() const;
  inline void clear_rec_code();
  static const int kRecCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 rec_code() const;
  inline void set_rec_code(::google::protobuf::uint32 value);

  // optional int64 formation_fight_power_buff_add = 3;
  inline bool has_formation_fight_power_buff_add() const;
  inline void clear_formation_fight_power_buff_add();
  static const int kFormationFightPowerBuffAddFieldNumber = 3;
  inline ::google::protobuf::int64 formation_fight_power_buff_add() const;
  inline void set_formation_fight_power_buff_add(::google::protobuf::int64 value);

  // optional int64 formation_fight_power_buff_no = 4;
  inline bool has_formation_fight_power_buff_no() const;
  inline void clear_formation_fight_power_buff_no();
  static const int kFormationFightPowerBuffNoFieldNumber = 4;
  inline ::google::protobuf::int64 formation_fight_power_buff_no() const;
  inline void set_formation_fight_power_buff_no(::google::protobuf::int64 value);

  // optional .SProtoSpace.MsgErrorType ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::SProtoSpace::MsgErrorType ret() const;
  inline void set_ret(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_battle_formation_save_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_rec_code();
  inline void clear_has_rec_code();
  inline void set_has_formation_fight_power_buff_add();
  inline void clear_has_formation_fight_power_buff_add();
  inline void set_has_formation_fight_power_buff_no();
  inline void clear_has_formation_fight_power_buff_no();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 rec_code_;
  ::google::protobuf::int64 formation_fight_power_buff_add_;
  ::google::protobuf::int64 formation_fight_power_buff_no_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static role_battle_formation_save_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_battle_formation_fight_power_req : public ::google::protobuf::Message {
 public:
  role_battle_formation_fight_power_req();
  virtual ~role_battle_formation_fight_power_req();

  role_battle_formation_fight_power_req(const role_battle_formation_fight_power_req& from);

  inline role_battle_formation_fight_power_req& operator=(const role_battle_formation_fight_power_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_battle_formation_fight_power_req& default_instance();

  void Swap(role_battle_formation_fight_power_req* other);

  // implements Message ----------------------------------------------

  role_battle_formation_fight_power_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_battle_formation_fight_power_req& from);
  void MergeFrom(const role_battle_formation_fight_power_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_fight_power_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.EHeroFormationType formation_type = 2;
  inline bool has_formation_type() const;
  inline void clear_formation_type();
  static const int kFormationTypeFieldNumber = 2;
  inline ::SProtoSpace::EHeroFormationType formation_type() const;
  inline void set_formation_type(::SProtoSpace::EHeroFormationType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_battle_formation_fight_power_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_formation_type();
  inline void clear_has_formation_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int formation_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static role_battle_formation_fight_power_req* default_instance_;
};
// -------------------------------------------------------------------

class role_battle_formation_fight_power_ack : public ::google::protobuf::Message {
 public:
  role_battle_formation_fight_power_ack();
  virtual ~role_battle_formation_fight_power_ack();

  role_battle_formation_fight_power_ack(const role_battle_formation_fight_power_ack& from);

  inline role_battle_formation_fight_power_ack& operator=(const role_battle_formation_fight_power_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_battle_formation_fight_power_ack& default_instance();

  void Swap(role_battle_formation_fight_power_ack* other);

  // implements Message ----------------------------------------------

  role_battle_formation_fight_power_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_battle_formation_fight_power_ack& from);
  void MergeFrom(const role_battle_formation_fight_power_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_fight_power_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int64 formation_fight_power_buff_add = 2;
  inline bool has_formation_fight_power_buff_add() const;
  inline void clear_formation_fight_power_buff_add();
  static const int kFormationFightPowerBuffAddFieldNumber = 2;
  inline ::google::protobuf::int64 formation_fight_power_buff_add() const;
  inline void set_formation_fight_power_buff_add(::google::protobuf::int64 value);

  // optional int64 formation_fight_power_buff_no = 3;
  inline bool has_formation_fight_power_buff_no() const;
  inline void clear_formation_fight_power_buff_no();
  static const int kFormationFightPowerBuffNoFieldNumber = 3;
  inline ::google::protobuf::int64 formation_fight_power_buff_no() const;
  inline void set_formation_fight_power_buff_no(::google::protobuf::int64 value);

  // optional sint32 rec_code = 4;
  inline bool has_rec_code() const;
  inline void clear_rec_code();
  static const int kRecCodeFieldNumber = 4;
  inline ::google::protobuf::int32 rec_code() const;
  inline void set_rec_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_battle_formation_fight_power_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_formation_fight_power_buff_add();
  inline void clear_has_formation_fight_power_buff_add();
  inline void set_has_formation_fight_power_buff_no();
  inline void clear_has_formation_fight_power_buff_no();
  inline void set_has_rec_code();
  inline void clear_has_rec_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 formation_fight_power_buff_add_;
  int protoid_;
  ::google::protobuf::int32 rec_code_;
  ::google::protobuf::int64 formation_fight_power_buff_no_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static role_battle_formation_fight_power_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_battle_hero_fight_power_req : public ::google::protobuf::Message {
 public:
  role_battle_hero_fight_power_req();
  virtual ~role_battle_hero_fight_power_req();

  role_battle_hero_fight_power_req(const role_battle_hero_fight_power_req& from);

  inline role_battle_hero_fight_power_req& operator=(const role_battle_hero_fight_power_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_battle_hero_fight_power_req& default_instance();

  void Swap(role_battle_hero_fight_power_req* other);

  // implements Message ----------------------------------------------

  role_battle_hero_fight_power_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_battle_hero_fight_power_req& from);
  void MergeFrom(const role_battle_hero_fight_power_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_hero_fight_power_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_battle_hero_fight_power_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static role_battle_hero_fight_power_req* default_instance_;
};
// -------------------------------------------------------------------

class role_battle_hero_fight_power_ack : public ::google::protobuf::Message {
 public:
  role_battle_hero_fight_power_ack();
  virtual ~role_battle_hero_fight_power_ack();

  role_battle_hero_fight_power_ack(const role_battle_hero_fight_power_ack& from);

  inline role_battle_hero_fight_power_ack& operator=(const role_battle_hero_fight_power_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_battle_hero_fight_power_ack& default_instance();

  void Swap(role_battle_hero_fight_power_ack* other);

  // implements Message ----------------------------------------------

  role_battle_hero_fight_power_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_battle_hero_fight_power_ack& from);
  void MergeFrom(const role_battle_hero_fight_power_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_hero_fight_power_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int64 hero_fight_power = 2;
  inline bool has_hero_fight_power() const;
  inline void clear_hero_fight_power();
  static const int kHeroFightPowerFieldNumber = 2;
  inline ::google::protobuf::int64 hero_fight_power() const;
  inline void set_hero_fight_power(::google::protobuf::int64 value);

  // optional sint32 rec_code = 3;
  inline bool has_rec_code() const;
  inline void clear_rec_code();
  static const int kRecCodeFieldNumber = 3;
  inline ::google::protobuf::int32 rec_code() const;
  inline void set_rec_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_battle_hero_fight_power_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_fight_power();
  inline void clear_has_hero_fight_power();
  inline void set_has_rec_code();
  inline void clear_has_rec_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 hero_fight_power_;
  int protoid_;
  ::google::protobuf::int32 rec_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5fbattle_2eproto();
  friend void protobuf_AssignDesc_cs_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_cs_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static role_battle_hero_fight_power_ack* default_instance_;
};
// ===================================================================


// ===================================================================

// battle_1v1_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_1v1_req_id];
inline bool battle_1v1_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_1v1_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_1v1_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_1v1_req::clear_protoid() {
  protoid_ = 5713;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_1v1_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_1v1_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.EBattleType battle_type = 2;
inline bool battle_1v1_req::has_battle_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_1v1_req::set_has_battle_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_1v1_req::clear_has_battle_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_1v1_req::clear_battle_type() {
  battle_type_ = 1;
  clear_has_battle_type();
}
inline ::SProtoSpace::EBattleType battle_1v1_req::battle_type() const {
  return static_cast< ::SProtoSpace::EBattleType >(battle_type_);
}
inline void battle_1v1_req::set_battle_type(::SProtoSpace::EBattleType value) {
  assert(::SProtoSpace::EBattleType_IsValid(value));
  set_has_battle_type();
  battle_type_ = value;
}

// -------------------------------------------------------------------

// battle_1v1_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_1v1_ack_id];
inline bool battle_1v1_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_1v1_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_1v1_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_1v1_ack::clear_protoid() {
  protoid_ = 5714;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_1v1_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_1v1_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool battle_1v1_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_1v1_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_1v1_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_1v1_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 battle_1v1_ack::ret() const {
  return ret_;
}
inline void battle_1v1_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// battle_ready_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_ready_req_id];
inline bool battle_ready_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_ready_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_ready_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_ready_req::clear_protoid() {
  protoid_ = 5700;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_ready_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_ready_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_ready_req::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_ready_req::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_ready_req::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_ready_req::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_ready_req::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_ready_req::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// -------------------------------------------------------------------

// battle_ready_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_ready_ack_id];
inline bool battle_ready_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_ready_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_ready_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_ready_ack::clear_protoid() {
  protoid_ = 5701;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_ready_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_ready_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_ready_ack::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_ready_ack::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_ready_ack::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_ready_ack::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_ready_ack::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_ready_ack::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional int32 ret = 3;
inline bool battle_ready_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_ready_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_ready_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_ready_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 battle_ready_ack::ret() const {
  return ret_;
}
inline void battle_ready_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// battle_ready_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_ready_ntf_id];
inline bool battle_ready_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_ready_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_ready_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_ready_ntf::clear_protoid() {
  protoid_ = 5702;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_ready_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_ready_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_ready_ntf::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_ready_ntf::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_ready_ntf::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_ready_ntf::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_ready_ntf::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_ready_ntf::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional uint64 role_id = 3;
inline bool battle_ready_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_ready_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_ready_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_ready_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 battle_ready_ntf::role_id() const {
  return role_id_;
}
inline void battle_ready_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// battle_change_hero_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_change_hero_req_id];
inline bool battle_change_hero_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_change_hero_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_change_hero_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_change_hero_req::clear_protoid() {
  protoid_ = 5703;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_change_hero_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_change_hero_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_change_hero_req::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_change_hero_req::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_change_hero_req::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_change_hero_req::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_change_hero_req::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_change_hero_req::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional int32 battle_type = 3;
inline bool battle_change_hero_req::has_battle_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_change_hero_req::set_has_battle_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_change_hero_req::clear_has_battle_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_change_hero_req::clear_battle_type() {
  battle_type_ = 0;
  clear_has_battle_type();
}
inline ::google::protobuf::int32 battle_change_hero_req::battle_type() const {
  return battle_type_;
}
inline void battle_change_hero_req::set_battle_type(::google::protobuf::int32 value) {
  set_has_battle_type();
  battle_type_ = value;
}

// optional int32 pos = 4;
inline bool battle_change_hero_req::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void battle_change_hero_req::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void battle_change_hero_req::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void battle_change_hero_req::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 battle_change_hero_req::pos() const {
  return pos_;
}
inline void battle_change_hero_req::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional uint64 hero_id = 5;
inline bool battle_change_hero_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void battle_change_hero_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void battle_change_hero_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void battle_change_hero_req::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 battle_change_hero_req::hero_id() const {
  return hero_id_;
}
inline void battle_change_hero_req::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// -------------------------------------------------------------------

// battle_change_hero_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_change_hero_ack_id];
inline bool battle_change_hero_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_change_hero_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_change_hero_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_change_hero_ack::clear_protoid() {
  protoid_ = 5704;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_change_hero_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_change_hero_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_change_hero_ack::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_change_hero_ack::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_change_hero_ack::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_change_hero_ack::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_change_hero_ack::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_change_hero_ack::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional int32 battle_type = 3;
inline bool battle_change_hero_ack::has_battle_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_change_hero_ack::set_has_battle_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_change_hero_ack::clear_has_battle_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_change_hero_ack::clear_battle_type() {
  battle_type_ = 0;
  clear_has_battle_type();
}
inline ::google::protobuf::int32 battle_change_hero_ack::battle_type() const {
  return battle_type_;
}
inline void battle_change_hero_ack::set_battle_type(::google::protobuf::int32 value) {
  set_has_battle_type();
  battle_type_ = value;
}

// optional uint64 hero_id = 4;
inline bool battle_change_hero_ack::has_hero_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void battle_change_hero_ack::set_has_hero_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void battle_change_hero_ack::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void battle_change_hero_ack::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 battle_change_hero_ack::hero_id() const {
  return hero_id_;
}
inline void battle_change_hero_ack::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional int32 ret = 5;
inline bool battle_change_hero_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void battle_change_hero_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void battle_change_hero_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void battle_change_hero_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 battle_change_hero_ack::ret() const {
  return ret_;
}
inline void battle_change_hero_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// battle_change_hero_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_change_hero_ntf_id];
inline bool battle_change_hero_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_change_hero_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_change_hero_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_change_hero_ntf::clear_protoid() {
  protoid_ = 5705;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_change_hero_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_change_hero_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_change_hero_ntf::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_change_hero_ntf::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_change_hero_ntf::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_change_hero_ntf::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_change_hero_ntf::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_change_hero_ntf::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional int32 battle_type = 3;
inline bool battle_change_hero_ntf::has_battle_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_change_hero_ntf::set_has_battle_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_change_hero_ntf::clear_has_battle_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_change_hero_ntf::clear_battle_type() {
  battle_type_ = 0;
  clear_has_battle_type();
}
inline ::google::protobuf::int32 battle_change_hero_ntf::battle_type() const {
  return battle_type_;
}
inline void battle_change_hero_ntf::set_battle_type(::google::protobuf::int32 value) {
  set_has_battle_type();
  battle_type_ = value;
}

// optional uint64 role_id = 4;
inline bool battle_change_hero_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void battle_change_hero_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void battle_change_hero_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void battle_change_hero_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 battle_change_hero_ntf::role_id() const {
  return role_id_;
}
inline void battle_change_hero_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 old_hero_id = 5;
inline bool battle_change_hero_ntf::has_old_hero_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void battle_change_hero_ntf::set_has_old_hero_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void battle_change_hero_ntf::clear_has_old_hero_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void battle_change_hero_ntf::clear_old_hero_id() {
  old_hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_old_hero_id();
}
inline ::google::protobuf::uint64 battle_change_hero_ntf::old_hero_id() const {
  return old_hero_id_;
}
inline void battle_change_hero_ntf::set_old_hero_id(::google::protobuf::uint64 value) {
  set_has_old_hero_id();
  old_hero_id_ = value;
}

// optional .SProtoSpace.battle_hero_info new_hero_info = 6;
inline bool battle_change_hero_ntf::has_new_hero_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void battle_change_hero_ntf::set_has_new_hero_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void battle_change_hero_ntf::clear_has_new_hero_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void battle_change_hero_ntf::clear_new_hero_info() {
  if (new_hero_info_ != NULL) new_hero_info_->::SProtoSpace::battle_hero_info::Clear();
  clear_has_new_hero_info();
}
inline const ::SProtoSpace::battle_hero_info& battle_change_hero_ntf::new_hero_info() const {
  return new_hero_info_ != NULL ? *new_hero_info_ : *default_instance_->new_hero_info_;
}
inline ::SProtoSpace::battle_hero_info* battle_change_hero_ntf::mutable_new_hero_info() {
  set_has_new_hero_info();
  if (new_hero_info_ == NULL) new_hero_info_ = new ::SProtoSpace::battle_hero_info;
  return new_hero_info_;
}
inline ::SProtoSpace::battle_hero_info* battle_change_hero_ntf::release_new_hero_info() {
  clear_has_new_hero_info();
  ::SProtoSpace::battle_hero_info* temp = new_hero_info_;
  new_hero_info_ = NULL;
  return temp;
}
inline void battle_change_hero_ntf::set_allocated_new_hero_info(::SProtoSpace::battle_hero_info* new_hero_info) {
  delete new_hero_info_;
  new_hero_info_ = new_hero_info;
  if (new_hero_info) {
    set_has_new_hero_info();
  } else {
    clear_has_new_hero_info();
  }
}

// -------------------------------------------------------------------

// battle_shot_operate_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_operate_req_id];
inline bool battle_shot_operate_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_shot_operate_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_shot_operate_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_shot_operate_req::clear_protoid() {
  protoid_ = 5706;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_shot_operate_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_shot_operate_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_shot_operate_req::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_shot_operate_req::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_shot_operate_req::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_shot_operate_req::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_shot_operate_req::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_shot_operate_req::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional int32 battle_type = 3;
inline bool battle_shot_operate_req::has_battle_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_shot_operate_req::set_has_battle_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_shot_operate_req::clear_has_battle_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_shot_operate_req::clear_battle_type() {
  battle_type_ = 0;
  clear_has_battle_type();
}
inline ::google::protobuf::int32 battle_shot_operate_req::battle_type() const {
  return battle_type_;
}
inline void battle_shot_operate_req::set_battle_type(::google::protobuf::int32 value) {
  set_has_battle_type();
  battle_type_ = value;
}

// optional .SProtoSpace.round_op_param op_param = 4;
inline bool battle_shot_operate_req::has_op_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void battle_shot_operate_req::set_has_op_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void battle_shot_operate_req::clear_has_op_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void battle_shot_operate_req::clear_op_param() {
  if (op_param_ != NULL) op_param_->::SProtoSpace::round_op_param::Clear();
  clear_has_op_param();
}
inline const ::SProtoSpace::round_op_param& battle_shot_operate_req::op_param() const {
  return op_param_ != NULL ? *op_param_ : *default_instance_->op_param_;
}
inline ::SProtoSpace::round_op_param* battle_shot_operate_req::mutable_op_param() {
  set_has_op_param();
  if (op_param_ == NULL) op_param_ = new ::SProtoSpace::round_op_param;
  return op_param_;
}
inline ::SProtoSpace::round_op_param* battle_shot_operate_req::release_op_param() {
  clear_has_op_param();
  ::SProtoSpace::round_op_param* temp = op_param_;
  op_param_ = NULL;
  return temp;
}
inline void battle_shot_operate_req::set_allocated_op_param(::SProtoSpace::round_op_param* op_param) {
  delete op_param_;
  op_param_ = op_param;
  if (op_param) {
    set_has_op_param();
  } else {
    clear_has_op_param();
  }
}

// -------------------------------------------------------------------

// battle_shot_operate_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_operate_ack_id];
inline bool battle_shot_operate_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_shot_operate_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_shot_operate_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_shot_operate_ack::clear_protoid() {
  protoid_ = 5707;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_shot_operate_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_shot_operate_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_shot_operate_ack::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_shot_operate_ack::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_shot_operate_ack::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_shot_operate_ack::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_shot_operate_ack::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_shot_operate_ack::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional int32 battle_type = 3;
inline bool battle_shot_operate_ack::has_battle_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_shot_operate_ack::set_has_battle_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_shot_operate_ack::clear_has_battle_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_shot_operate_ack::clear_battle_type() {
  battle_type_ = 0;
  clear_has_battle_type();
}
inline ::google::protobuf::int32 battle_shot_operate_ack::battle_type() const {
  return battle_type_;
}
inline void battle_shot_operate_ack::set_battle_type(::google::protobuf::int32 value) {
  set_has_battle_type();
  battle_type_ = value;
}

// optional .SProtoSpace.round_op_param op_param = 4;
inline bool battle_shot_operate_ack::has_op_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void battle_shot_operate_ack::set_has_op_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void battle_shot_operate_ack::clear_has_op_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void battle_shot_operate_ack::clear_op_param() {
  if (op_param_ != NULL) op_param_->::SProtoSpace::round_op_param::Clear();
  clear_has_op_param();
}
inline const ::SProtoSpace::round_op_param& battle_shot_operate_ack::op_param() const {
  return op_param_ != NULL ? *op_param_ : *default_instance_->op_param_;
}
inline ::SProtoSpace::round_op_param* battle_shot_operate_ack::mutable_op_param() {
  set_has_op_param();
  if (op_param_ == NULL) op_param_ = new ::SProtoSpace::round_op_param;
  return op_param_;
}
inline ::SProtoSpace::round_op_param* battle_shot_operate_ack::release_op_param() {
  clear_has_op_param();
  ::SProtoSpace::round_op_param* temp = op_param_;
  op_param_ = NULL;
  return temp;
}
inline void battle_shot_operate_ack::set_allocated_op_param(::SProtoSpace::round_op_param* op_param) {
  delete op_param_;
  op_param_ = op_param;
  if (op_param) {
    set_has_op_param();
  } else {
    clear_has_op_param();
  }
}

// optional int32 ret = 5;
inline bool battle_shot_operate_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void battle_shot_operate_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void battle_shot_operate_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void battle_shot_operate_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 battle_shot_operate_ack::ret() const {
  return ret_;
}
inline void battle_shot_operate_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// battle_turn_begin_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_turn_begin_ntf_id];
inline bool battle_turn_begin_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_turn_begin_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_turn_begin_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_turn_begin_ntf::clear_protoid() {
  protoid_ = 5717;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_turn_begin_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_turn_begin_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_turn_begin_ntf::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_turn_begin_ntf::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_turn_begin_ntf::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_turn_begin_ntf::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_turn_begin_ntf::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_turn_begin_ntf::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional uint32 turn_index = 3;
inline bool battle_turn_begin_ntf::has_turn_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_turn_begin_ntf::set_has_turn_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_turn_begin_ntf::clear_has_turn_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_turn_begin_ntf::clear_turn_index() {
  turn_index_ = 0u;
  clear_has_turn_index();
}
inline ::google::protobuf::uint32 battle_turn_begin_ntf::turn_index() const {
  return turn_index_;
}
inline void battle_turn_begin_ntf::set_turn_index(::google::protobuf::uint32 value) {
  set_has_turn_index();
  turn_index_ = value;
}

// optional .SProtoSpace.opt_seqs seqs = 4;
inline bool battle_turn_begin_ntf::has_seqs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void battle_turn_begin_ntf::set_has_seqs() {
  _has_bits_[0] |= 0x00000008u;
}
inline void battle_turn_begin_ntf::clear_has_seqs() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void battle_turn_begin_ntf::clear_seqs() {
  if (seqs_ != NULL) seqs_->::SProtoSpace::opt_seqs::Clear();
  clear_has_seqs();
}
inline const ::SProtoSpace::opt_seqs& battle_turn_begin_ntf::seqs() const {
  return seqs_ != NULL ? *seqs_ : *default_instance_->seqs_;
}
inline ::SProtoSpace::opt_seqs* battle_turn_begin_ntf::mutable_seqs() {
  set_has_seqs();
  if (seqs_ == NULL) seqs_ = new ::SProtoSpace::opt_seqs;
  return seqs_;
}
inline ::SProtoSpace::opt_seqs* battle_turn_begin_ntf::release_seqs() {
  clear_has_seqs();
  ::SProtoSpace::opt_seqs* temp = seqs_;
  seqs_ = NULL;
  return temp;
}
inline void battle_turn_begin_ntf::set_allocated_seqs(::SProtoSpace::opt_seqs* seqs) {
  delete seqs_;
  seqs_ = seqs;
  if (seqs) {
    set_has_seqs();
  } else {
    clear_has_seqs();
  }
}

// -------------------------------------------------------------------

// battle_turn_end_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_turn_end_ntf_id];
inline bool battle_turn_end_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_turn_end_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_turn_end_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_turn_end_ntf::clear_protoid() {
  protoid_ = 5718;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_turn_end_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_turn_end_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_turn_end_ntf::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_turn_end_ntf::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_turn_end_ntf::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_turn_end_ntf::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_turn_end_ntf::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_turn_end_ntf::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional uint32 turn_index = 3;
inline bool battle_turn_end_ntf::has_turn_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_turn_end_ntf::set_has_turn_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_turn_end_ntf::clear_has_turn_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_turn_end_ntf::clear_turn_index() {
  turn_index_ = 0u;
  clear_has_turn_index();
}
inline ::google::protobuf::uint32 battle_turn_end_ntf::turn_index() const {
  return turn_index_;
}
inline void battle_turn_end_ntf::set_turn_index(::google::protobuf::uint32 value) {
  set_has_turn_index();
  turn_index_ = value;
}

// optional .SProtoSpace.opt_seqs seqs = 4;
inline bool battle_turn_end_ntf::has_seqs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void battle_turn_end_ntf::set_has_seqs() {
  _has_bits_[0] |= 0x00000008u;
}
inline void battle_turn_end_ntf::clear_has_seqs() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void battle_turn_end_ntf::clear_seqs() {
  if (seqs_ != NULL) seqs_->::SProtoSpace::opt_seqs::Clear();
  clear_has_seqs();
}
inline const ::SProtoSpace::opt_seqs& battle_turn_end_ntf::seqs() const {
  return seqs_ != NULL ? *seqs_ : *default_instance_->seqs_;
}
inline ::SProtoSpace::opt_seqs* battle_turn_end_ntf::mutable_seqs() {
  set_has_seqs();
  if (seqs_ == NULL) seqs_ = new ::SProtoSpace::opt_seqs;
  return seqs_;
}
inline ::SProtoSpace::opt_seqs* battle_turn_end_ntf::release_seqs() {
  clear_has_seqs();
  ::SProtoSpace::opt_seqs* temp = seqs_;
  seqs_ = NULL;
  return temp;
}
inline void battle_turn_end_ntf::set_allocated_seqs(::SProtoSpace::opt_seqs* seqs) {
  delete seqs_;
  seqs_ = seqs;
  if (seqs) {
    set_has_seqs();
  } else {
    clear_has_seqs();
  }
}

// optional int32 winner_camp = 5;
inline bool battle_turn_end_ntf::has_winner_camp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void battle_turn_end_ntf::set_has_winner_camp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void battle_turn_end_ntf::clear_has_winner_camp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void battle_turn_end_ntf::clear_winner_camp() {
  winner_camp_ = 0;
  clear_has_winner_camp();
}
inline ::google::protobuf::int32 battle_turn_end_ntf::winner_camp() const {
  return winner_camp_;
}
inline void battle_turn_end_ntf::set_winner_camp(::google::protobuf::int32 value) {
  set_has_winner_camp();
  winner_camp_ = value;
}

// -------------------------------------------------------------------

// battle_round_begin_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_round_begin_ntf_id];
inline bool battle_round_begin_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_round_begin_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_round_begin_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_round_begin_ntf::clear_protoid() {
  protoid_ = 5715;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_round_begin_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_round_begin_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_round_begin_ntf::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_round_begin_ntf::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_round_begin_ntf::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_round_begin_ntf::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_round_begin_ntf::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_round_begin_ntf::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional uint32 round_index = 3;
inline bool battle_round_begin_ntf::has_round_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_round_begin_ntf::set_has_round_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_round_begin_ntf::clear_has_round_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_round_begin_ntf::clear_round_index() {
  round_index_ = 0u;
  clear_has_round_index();
}
inline ::google::protobuf::uint32 battle_round_begin_ntf::round_index() const {
  return round_index_;
}
inline void battle_round_begin_ntf::set_round_index(::google::protobuf::uint32 value) {
  set_has_round_index();
  round_index_ = value;
}

// optional .SProtoSpace.opt_seqs seqs = 4;
inline bool battle_round_begin_ntf::has_seqs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void battle_round_begin_ntf::set_has_seqs() {
  _has_bits_[0] |= 0x00000008u;
}
inline void battle_round_begin_ntf::clear_has_seqs() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void battle_round_begin_ntf::clear_seqs() {
  if (seqs_ != NULL) seqs_->::SProtoSpace::opt_seqs::Clear();
  clear_has_seqs();
}
inline const ::SProtoSpace::opt_seqs& battle_round_begin_ntf::seqs() const {
  return seqs_ != NULL ? *seqs_ : *default_instance_->seqs_;
}
inline ::SProtoSpace::opt_seqs* battle_round_begin_ntf::mutable_seqs() {
  set_has_seqs();
  if (seqs_ == NULL) seqs_ = new ::SProtoSpace::opt_seqs;
  return seqs_;
}
inline ::SProtoSpace::opt_seqs* battle_round_begin_ntf::release_seqs() {
  clear_has_seqs();
  ::SProtoSpace::opt_seqs* temp = seqs_;
  seqs_ = NULL;
  return temp;
}
inline void battle_round_begin_ntf::set_allocated_seqs(::SProtoSpace::opt_seqs* seqs) {
  delete seqs_;
  seqs_ = seqs;
  if (seqs) {
    set_has_seqs();
  } else {
    clear_has_seqs();
  }
}

// -------------------------------------------------------------------

// battle_round_end_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_round_end_ntf_id];
inline bool battle_round_end_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_round_end_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_round_end_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_round_end_ntf::clear_protoid() {
  protoid_ = 5716;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_round_end_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_round_end_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_round_end_ntf::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_round_end_ntf::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_round_end_ntf::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_round_end_ntf::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_round_end_ntf::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_round_end_ntf::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional uint32 round_index = 3;
inline bool battle_round_end_ntf::has_round_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_round_end_ntf::set_has_round_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_round_end_ntf::clear_has_round_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_round_end_ntf::clear_round_index() {
  round_index_ = 0u;
  clear_has_round_index();
}
inline ::google::protobuf::uint32 battle_round_end_ntf::round_index() const {
  return round_index_;
}
inline void battle_round_end_ntf::set_round_index(::google::protobuf::uint32 value) {
  set_has_round_index();
  round_index_ = value;
}

// optional .SProtoSpace.opt_seqs seqs = 4;
inline bool battle_round_end_ntf::has_seqs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void battle_round_end_ntf::set_has_seqs() {
  _has_bits_[0] |= 0x00000008u;
}
inline void battle_round_end_ntf::clear_has_seqs() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void battle_round_end_ntf::clear_seqs() {
  if (seqs_ != NULL) seqs_->::SProtoSpace::opt_seqs::Clear();
  clear_has_seqs();
}
inline const ::SProtoSpace::opt_seqs& battle_round_end_ntf::seqs() const {
  return seqs_ != NULL ? *seqs_ : *default_instance_->seqs_;
}
inline ::SProtoSpace::opt_seqs* battle_round_end_ntf::mutable_seqs() {
  set_has_seqs();
  if (seqs_ == NULL) seqs_ = new ::SProtoSpace::opt_seqs;
  return seqs_;
}
inline ::SProtoSpace::opt_seqs* battle_round_end_ntf::release_seqs() {
  clear_has_seqs();
  ::SProtoSpace::opt_seqs* temp = seqs_;
  seqs_ = NULL;
  return temp;
}
inline void battle_round_end_ntf::set_allocated_seqs(::SProtoSpace::opt_seqs* seqs) {
  delete seqs_;
  seqs_ = seqs;
  if (seqs) {
    set_has_seqs();
  } else {
    clear_has_seqs();
  }
}

// optional int32 winner_camp = 5;
inline bool battle_round_end_ntf::has_winner_camp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void battle_round_end_ntf::set_has_winner_camp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void battle_round_end_ntf::clear_has_winner_camp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void battle_round_end_ntf::clear_winner_camp() {
  winner_camp_ = 0;
  clear_has_winner_camp();
}
inline ::google::protobuf::int32 battle_round_end_ntf::winner_camp() const {
  return winner_camp_;
}
inline void battle_round_end_ntf::set_winner_camp(::google::protobuf::int32 value) {
  set_has_winner_camp();
  winner_camp_ = value;
}

// -------------------------------------------------------------------

// battle_shot_begin_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_begin_ntf_id];
inline bool battle_shot_begin_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_shot_begin_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_shot_begin_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_shot_begin_ntf::clear_protoid() {
  protoid_ = 5708;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_shot_begin_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_shot_begin_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_shot_begin_ntf::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_shot_begin_ntf::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_shot_begin_ntf::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_shot_begin_ntf::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_shot_begin_ntf::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_shot_begin_ntf::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional uint64 obj_id = 3;
inline bool battle_shot_begin_ntf::has_obj_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_shot_begin_ntf::set_has_obj_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_shot_begin_ntf::clear_has_obj_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_shot_begin_ntf::clear_obj_id() {
  obj_id_ = GOOGLE_ULONGLONG(0);
  clear_has_obj_id();
}
inline ::google::protobuf::uint64 battle_shot_begin_ntf::obj_id() const {
  return obj_id_;
}
inline void battle_shot_begin_ntf::set_obj_id(::google::protobuf::uint64 value) {
  set_has_obj_id();
  obj_id_ = value;
}

// optional .SProtoSpace.opt_seqs seqs = 4;
inline bool battle_shot_begin_ntf::has_seqs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void battle_shot_begin_ntf::set_has_seqs() {
  _has_bits_[0] |= 0x00000008u;
}
inline void battle_shot_begin_ntf::clear_has_seqs() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void battle_shot_begin_ntf::clear_seqs() {
  if (seqs_ != NULL) seqs_->::SProtoSpace::opt_seqs::Clear();
  clear_has_seqs();
}
inline const ::SProtoSpace::opt_seqs& battle_shot_begin_ntf::seqs() const {
  return seqs_ != NULL ? *seqs_ : *default_instance_->seqs_;
}
inline ::SProtoSpace::opt_seqs* battle_shot_begin_ntf::mutable_seqs() {
  set_has_seqs();
  if (seqs_ == NULL) seqs_ = new ::SProtoSpace::opt_seqs;
  return seqs_;
}
inline ::SProtoSpace::opt_seqs* battle_shot_begin_ntf::release_seqs() {
  clear_has_seqs();
  ::SProtoSpace::opt_seqs* temp = seqs_;
  seqs_ = NULL;
  return temp;
}
inline void battle_shot_begin_ntf::set_allocated_seqs(::SProtoSpace::opt_seqs* seqs) {
  delete seqs_;
  seqs_ = seqs;
  if (seqs) {
    set_has_seqs();
  } else {
    clear_has_seqs();
  }
}

// optional int32 shot_index = 5;
inline bool battle_shot_begin_ntf::has_shot_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void battle_shot_begin_ntf::set_has_shot_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void battle_shot_begin_ntf::clear_has_shot_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void battle_shot_begin_ntf::clear_shot_index() {
  shot_index_ = 0;
  clear_has_shot_index();
}
inline ::google::protobuf::int32 battle_shot_begin_ntf::shot_index() const {
  return shot_index_;
}
inline void battle_shot_begin_ntf::set_shot_index(::google::protobuf::int32 value) {
  set_has_shot_index();
  shot_index_ = value;
}

// -------------------------------------------------------------------

// battle_shot_end_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_end_ntf_id];
inline bool battle_shot_end_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_shot_end_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_shot_end_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_shot_end_ntf::clear_protoid() {
  protoid_ = 5709;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_shot_end_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_shot_end_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_shot_end_ntf::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_shot_end_ntf::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_shot_end_ntf::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_shot_end_ntf::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_shot_end_ntf::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_shot_end_ntf::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional int32 shot_index = 3;
inline bool battle_shot_end_ntf::has_shot_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_shot_end_ntf::set_has_shot_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_shot_end_ntf::clear_has_shot_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_shot_end_ntf::clear_shot_index() {
  shot_index_ = 0;
  clear_has_shot_index();
}
inline ::google::protobuf::int32 battle_shot_end_ntf::shot_index() const {
  return shot_index_;
}
inline void battle_shot_end_ntf::set_shot_index(::google::protobuf::int32 value) {
  set_has_shot_index();
  shot_index_ = value;
}

// repeated .SProtoSpace.opt_seqs seqs = 5;
inline int battle_shot_end_ntf::seqs_size() const {
  return seqs_.size();
}
inline void battle_shot_end_ntf::clear_seqs() {
  seqs_.Clear();
}
inline const ::SProtoSpace::opt_seqs& battle_shot_end_ntf::seqs(int index) const {
  return seqs_.Get(index);
}
inline ::SProtoSpace::opt_seqs* battle_shot_end_ntf::mutable_seqs(int index) {
  return seqs_.Mutable(index);
}
inline ::SProtoSpace::opt_seqs* battle_shot_end_ntf::add_seqs() {
  return seqs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::opt_seqs >&
battle_shot_end_ntf::seqs() const {
  return seqs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::opt_seqs >*
battle_shot_end_ntf::mutable_seqs() {
  return &seqs_;
}

// optional .SProtoSpace.seq_sp sp_info = 6;
inline bool battle_shot_end_ntf::has_sp_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void battle_shot_end_ntf::set_has_sp_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void battle_shot_end_ntf::clear_has_sp_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void battle_shot_end_ntf::clear_sp_info() {
  if (sp_info_ != NULL) sp_info_->::SProtoSpace::seq_sp::Clear();
  clear_has_sp_info();
}
inline const ::SProtoSpace::seq_sp& battle_shot_end_ntf::sp_info() const {
  return sp_info_ != NULL ? *sp_info_ : *default_instance_->sp_info_;
}
inline ::SProtoSpace::seq_sp* battle_shot_end_ntf::mutable_sp_info() {
  set_has_sp_info();
  if (sp_info_ == NULL) sp_info_ = new ::SProtoSpace::seq_sp;
  return sp_info_;
}
inline ::SProtoSpace::seq_sp* battle_shot_end_ntf::release_sp_info() {
  clear_has_sp_info();
  ::SProtoSpace::seq_sp* temp = sp_info_;
  sp_info_ = NULL;
  return temp;
}
inline void battle_shot_end_ntf::set_allocated_sp_info(::SProtoSpace::seq_sp* sp_info) {
  delete sp_info_;
  sp_info_ = sp_info;
  if (sp_info) {
    set_has_sp_info();
  } else {
    clear_has_sp_info();
  }
}

// optional int32 winner_camp = 7;
inline bool battle_shot_end_ntf::has_winner_camp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void battle_shot_end_ntf::set_has_winner_camp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void battle_shot_end_ntf::clear_has_winner_camp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void battle_shot_end_ntf::clear_winner_camp() {
  winner_camp_ = 0;
  clear_has_winner_camp();
}
inline ::google::protobuf::int32 battle_shot_end_ntf::winner_camp() const {
  return winner_camp_;
}
inline void battle_shot_end_ntf::set_winner_camp(::google::protobuf::int32 value) {
  set_has_winner_camp();
  winner_camp_ = value;
}

// -------------------------------------------------------------------

// battle_info_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_info_ntf_id];
inline bool battle_info_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_info_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_info_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_info_ntf::clear_protoid() {
  protoid_ = 5710;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_info_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_info_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_info_ntf::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_info_ntf::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_info_ntf::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_info_ntf::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_info_ntf::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_info_ntf::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional .SProtoSpace.client_battle_data data = 3;
inline bool battle_info_ntf::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_info_ntf::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_info_ntf::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_info_ntf::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::client_battle_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::client_battle_data& battle_info_ntf::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::client_battle_data* battle_info_ntf::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::client_battle_data;
  return data_;
}
inline ::SProtoSpace::client_battle_data* battle_info_ntf::release_data() {
  clear_has_data();
  ::SProtoSpace::client_battle_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void battle_info_ntf::set_allocated_data(::SProtoSpace::client_battle_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// battle_begin_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_begin_ntf_id];
inline bool battle_begin_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_begin_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_begin_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_begin_ntf::clear_protoid() {
  protoid_ = 5711;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_begin_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_begin_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_begin_ntf::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_begin_ntf::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_begin_ntf::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_begin_ntf::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_begin_ntf::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_begin_ntf::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional uint32 battle_type = 3;
inline bool battle_begin_ntf::has_battle_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_begin_ntf::set_has_battle_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_begin_ntf::clear_has_battle_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_begin_ntf::clear_battle_type() {
  battle_type_ = 0u;
  clear_has_battle_type();
}
inline ::google::protobuf::uint32 battle_begin_ntf::battle_type() const {
  return battle_type_;
}
inline void battle_begin_ntf::set_battle_type(::google::protobuf::uint32 value) {
  set_has_battle_type();
  battle_type_ = value;
}

// -------------------------------------------------------------------

// battle_end_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_end_ntf_id];
inline bool battle_end_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_end_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_end_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_end_ntf::clear_protoid() {
  protoid_ = 5712;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_end_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_end_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_end_ntf::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_end_ntf::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_end_ntf::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_end_ntf::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_end_ntf::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_end_ntf::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional uint32 battle_type = 3;
inline bool battle_end_ntf::has_battle_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_end_ntf::set_has_battle_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_end_ntf::clear_has_battle_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_end_ntf::clear_battle_type() {
  battle_type_ = 0u;
  clear_has_battle_type();
}
inline ::google::protobuf::uint32 battle_end_ntf::battle_type() const {
  return battle_type_;
}
inline void battle_end_ntf::set_battle_type(::google::protobuf::uint32 value) {
  set_has_battle_type();
  battle_type_ = value;
}

// optional int32 winner_camp = 4;
inline bool battle_end_ntf::has_winner_camp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void battle_end_ntf::set_has_winner_camp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void battle_end_ntf::clear_has_winner_camp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void battle_end_ntf::clear_winner_camp() {
  winner_camp_ = 0;
  clear_has_winner_camp();
}
inline ::google::protobuf::int32 battle_end_ntf::winner_camp() const {
  return winner_camp_;
}
inline void battle_end_ntf::set_winner_camp(::google::protobuf::int32 value) {
  set_has_winner_camp();
  winner_camp_ = value;
}

// repeated .SProtoSpace.round_data data = 5;
inline int battle_end_ntf::data_size() const {
  return data_.size();
}
inline void battle_end_ntf::clear_data() {
  data_.Clear();
}
inline const ::SProtoSpace::round_data& battle_end_ntf::data(int index) const {
  return data_.Get(index);
}
inline ::SProtoSpace::round_data* battle_end_ntf::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SProtoSpace::round_data* battle_end_ntf::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::round_data >&
battle_end_ntf::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::round_data >*
battle_end_ntf::mutable_data() {
  return &data_;
}

// optional int32 turn_index = 6;
inline bool battle_end_ntf::has_turn_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void battle_end_ntf::set_has_turn_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void battle_end_ntf::clear_has_turn_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void battle_end_ntf::clear_turn_index() {
  turn_index_ = 0;
  clear_has_turn_index();
}
inline ::google::protobuf::int32 battle_end_ntf::turn_index() const {
  return turn_index_;
}
inline void battle_end_ntf::set_turn_index(::google::protobuf::int32 value) {
  set_has_turn_index();
  turn_index_ = value;
}

// optional int32 round_index = 7;
inline bool battle_end_ntf::has_round_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void battle_end_ntf::set_has_round_index() {
  _has_bits_[0] |= 0x00000040u;
}
inline void battle_end_ntf::clear_has_round_index() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void battle_end_ntf::clear_round_index() {
  round_index_ = 0;
  clear_has_round_index();
}
inline ::google::protobuf::int32 battle_end_ntf::round_index() const {
  return round_index_;
}
inline void battle_end_ntf::set_round_index(::google::protobuf::int32 value) {
  set_has_round_index();
  round_index_ = value;
}

// -------------------------------------------------------------------

// battle_extra_operator_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_extra_operator_req_id];
inline bool battle_extra_operator_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_extra_operator_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_extra_operator_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_extra_operator_req::clear_protoid() {
  protoid_ = 5719;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_extra_operator_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_extra_operator_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_extra_operator_req::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_extra_operator_req::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_extra_operator_req::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_extra_operator_req::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_extra_operator_req::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_extra_operator_req::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional uint64 obj_uuid = 3;
inline bool battle_extra_operator_req::has_obj_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_extra_operator_req::set_has_obj_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_extra_operator_req::clear_has_obj_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_extra_operator_req::clear_obj_uuid() {
  obj_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_obj_uuid();
}
inline ::google::protobuf::uint64 battle_extra_operator_req::obj_uuid() const {
  return obj_uuid_;
}
inline void battle_extra_operator_req::set_obj_uuid(::google::protobuf::uint64 value) {
  set_has_obj_uuid();
  obj_uuid_ = value;
}

// optional int32 skill_id = 4;
inline bool battle_extra_operator_req::has_skill_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void battle_extra_operator_req::set_has_skill_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void battle_extra_operator_req::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void battle_extra_operator_req::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 battle_extra_operator_req::skill_id() const {
  return skill_id_;
}
inline void battle_extra_operator_req::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// -------------------------------------------------------------------

// battle_extra_operator_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_extra_operator_ack_id];
inline bool battle_extra_operator_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_extra_operator_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_extra_operator_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_extra_operator_ack::clear_protoid() {
  protoid_ = 5720;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_extra_operator_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_extra_operator_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool battle_extra_operator_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_extra_operator_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_extra_operator_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_extra_operator_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 battle_extra_operator_ack::ret() const {
  return ret_;
}
inline void battle_extra_operator_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 battle_uuid = 3;
inline bool battle_extra_operator_ack::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_extra_operator_ack::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_extra_operator_ack::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_extra_operator_ack::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_extra_operator_ack::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_extra_operator_ack::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional uint64 obj_uuid = 4;
inline bool battle_extra_operator_ack::has_obj_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void battle_extra_operator_ack::set_has_obj_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void battle_extra_operator_ack::clear_has_obj_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void battle_extra_operator_ack::clear_obj_uuid() {
  obj_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_obj_uuid();
}
inline ::google::protobuf::uint64 battle_extra_operator_ack::obj_uuid() const {
  return obj_uuid_;
}
inline void battle_extra_operator_ack::set_obj_uuid(::google::protobuf::uint64 value) {
  set_has_obj_uuid();
  obj_uuid_ = value;
}

// optional int32 skill_id = 5;
inline bool battle_extra_operator_ack::has_skill_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void battle_extra_operator_ack::set_has_skill_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void battle_extra_operator_ack::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void battle_extra_operator_ack::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 battle_extra_operator_ack::skill_id() const {
  return skill_id_;
}
inline void battle_extra_operator_ack::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// -------------------------------------------------------------------

// battle_extra_operator_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_extra_operator_ntf_id];
inline bool battle_extra_operator_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_extra_operator_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_extra_operator_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_extra_operator_ntf::clear_protoid() {
  protoid_ = 5721;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_extra_operator_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_extra_operator_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_extra_operator_ntf::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_extra_operator_ntf::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_extra_operator_ntf::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_extra_operator_ntf::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_extra_operator_ntf::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_extra_operator_ntf::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// optional uint64 obj_uuid = 3;
inline bool battle_extra_operator_ntf::has_obj_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_extra_operator_ntf::set_has_obj_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_extra_operator_ntf::clear_has_obj_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_extra_operator_ntf::clear_obj_uuid() {
  obj_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_obj_uuid();
}
inline ::google::protobuf::uint64 battle_extra_operator_ntf::obj_uuid() const {
  return obj_uuid_;
}
inline void battle_extra_operator_ntf::set_obj_uuid(::google::protobuf::uint64 value) {
  set_has_obj_uuid();
  obj_uuid_ = value;
}

// optional int32 skill_id = 4;
inline bool battle_extra_operator_ntf::has_skill_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void battle_extra_operator_ntf::set_has_skill_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void battle_extra_operator_ntf::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void battle_extra_operator_ntf::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 battle_extra_operator_ntf::skill_id() const {
  return skill_id_;
}
inline void battle_extra_operator_ntf::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// -------------------------------------------------------------------

// battle_shot_ready_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_ready_ntf_id];
inline bool battle_shot_ready_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_shot_ready_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_shot_ready_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_shot_ready_ntf::clear_protoid() {
  protoid_ = 5722;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_shot_ready_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_shot_ready_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_shot_ready_ntf::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_shot_ready_ntf::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_shot_ready_ntf::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_shot_ready_ntf::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_shot_ready_ntf::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_shot_ready_ntf::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// -------------------------------------------------------------------

// battle_jump_over_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_jump_over_ntf_id];
inline bool battle_jump_over_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_jump_over_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_jump_over_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_jump_over_ntf::clear_protoid() {
  protoid_ = 5723;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_jump_over_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_jump_over_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 battle_uuid = 2;
inline bool battle_jump_over_ntf::has_battle_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_jump_over_ntf::set_has_battle_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_jump_over_ntf::clear_has_battle_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_jump_over_ntf::clear_battle_uuid() {
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_uuid();
}
inline ::google::protobuf::uint64 battle_jump_over_ntf::battle_uuid() const {
  return battle_uuid_;
}
inline void battle_jump_over_ntf::set_battle_uuid(::google::protobuf::uint64 value) {
  set_has_battle_uuid();
  battle_uuid_ = value;
}

// -------------------------------------------------------------------

// battle_begin_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_begin_req_id];
inline bool battle_begin_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_begin_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_begin_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_begin_req::clear_protoid() {
  protoid_ = 5750;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_begin_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_begin_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 type = 2;
inline bool battle_begin_req::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_begin_req::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_begin_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_begin_req::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 battle_begin_req::type() const {
  return type_;
}
inline void battle_begin_req::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 battle_id = 3;
inline bool battle_begin_req::has_battle_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_begin_req::set_has_battle_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_begin_req::clear_has_battle_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_begin_req::clear_battle_id() {
  battle_id_ = 0;
  clear_has_battle_id();
}
inline ::google::protobuf::int32 battle_begin_req::battle_id() const {
  return battle_id_;
}
inline void battle_begin_req::set_battle_id(::google::protobuf::int32 value) {
  set_has_battle_id();
  battle_id_ = value;
}

// optional int32 module_id = 4;
inline bool battle_begin_req::has_module_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void battle_begin_req::set_has_module_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void battle_begin_req::clear_has_module_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void battle_begin_req::clear_module_id() {
  module_id_ = 0;
  clear_has_module_id();
}
inline ::google::protobuf::int32 battle_begin_req::module_id() const {
  return module_id_;
}
inline void battle_begin_req::set_module_id(::google::protobuf::int32 value) {
  set_has_module_id();
  module_id_ = value;
}

// optional uint64 role_id = 5;
inline bool battle_begin_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void battle_begin_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void battle_begin_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void battle_begin_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 battle_begin_req::role_id() const {
  return role_id_;
}
inline void battle_begin_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .SProtoSpace.EHeroFormationType formation_type = 6;
inline bool battle_begin_req::has_formation_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void battle_begin_req::set_has_formation_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void battle_begin_req::clear_has_formation_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void battle_begin_req::clear_formation_type() {
  formation_type_ = 1;
  clear_has_formation_type();
}
inline ::SProtoSpace::EHeroFormationType battle_begin_req::formation_type() const {
  return static_cast< ::SProtoSpace::EHeroFormationType >(formation_type_);
}
inline void battle_begin_req::set_formation_type(::SProtoSpace::EHeroFormationType value) {
  assert(::SProtoSpace::EHeroFormationType_IsValid(value));
  set_has_formation_type();
  formation_type_ = value;
}

// -------------------------------------------------------------------

// battle_begin_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_begin_ack_id];
inline bool battle_begin_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_begin_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_begin_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_begin_ack::clear_protoid() {
  protoid_ = 5751;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_begin_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_begin_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2 [default = 0];
inline bool battle_begin_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_begin_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_begin_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_begin_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 battle_begin_ack::ret() const {
  return ret_;
}
inline void battle_begin_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 type = 3;
inline bool battle_begin_ack::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_begin_ack::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_begin_ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_begin_ack::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 battle_begin_ack::type() const {
  return type_;
}
inline void battle_begin_ack::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 battle_id = 4;
inline bool battle_begin_ack::has_battle_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void battle_begin_ack::set_has_battle_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void battle_begin_ack::clear_has_battle_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void battle_begin_ack::clear_battle_id() {
  battle_id_ = 0;
  clear_has_battle_id();
}
inline ::google::protobuf::int32 battle_begin_ack::battle_id() const {
  return battle_id_;
}
inline void battle_begin_ack::set_battle_id(::google::protobuf::int32 value) {
  set_has_battle_id();
  battle_id_ = value;
}

// optional int32 module_id = 5;
inline bool battle_begin_ack::has_module_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void battle_begin_ack::set_has_module_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void battle_begin_ack::clear_has_module_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void battle_begin_ack::clear_module_id() {
  module_id_ = 0;
  clear_has_module_id();
}
inline ::google::protobuf::int32 battle_begin_ack::module_id() const {
  return module_id_;
}
inline void battle_begin_ack::set_module_id(::google::protobuf::int32 value) {
  set_has_module_id();
  module_id_ = value;
}

// optional uint32 seed = 6;
inline bool battle_begin_ack::has_seed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void battle_begin_ack::set_has_seed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void battle_begin_ack::clear_has_seed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void battle_begin_ack::clear_seed() {
  seed_ = 0u;
  clear_has_seed();
}
inline ::google::protobuf::uint32 battle_begin_ack::seed() const {
  return seed_;
}
inline void battle_begin_ack::set_seed(::google::protobuf::uint32 value) {
  set_has_seed();
  seed_ = value;
}

// optional uint64 role_id = 7;
inline bool battle_begin_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void battle_begin_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void battle_begin_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void battle_begin_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 battle_begin_ack::role_id() const {
  return role_id_;
}
inline void battle_begin_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .SProtoSpace.EHeroFormationType formation_type = 8;
inline bool battle_begin_ack::has_formation_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void battle_begin_ack::set_has_formation_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void battle_begin_ack::clear_has_formation_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void battle_begin_ack::clear_formation_type() {
  formation_type_ = 1;
  clear_has_formation_type();
}
inline ::SProtoSpace::EHeroFormationType battle_begin_ack::formation_type() const {
  return static_cast< ::SProtoSpace::EHeroFormationType >(formation_type_);
}
inline void battle_begin_ack::set_formation_type(::SProtoSpace::EHeroFormationType value) {
  assert(::SProtoSpace::EHeroFormationType_IsValid(value));
  set_has_formation_type();
  formation_type_ = value;
}

// optional .SProtoSpace.battle_role_info role_info = 9;
inline bool battle_begin_ack::has_role_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void battle_begin_ack::set_has_role_info() {
  _has_bits_[0] |= 0x00000100u;
}
inline void battle_begin_ack::clear_has_role_info() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void battle_begin_ack::clear_role_info() {
  if (role_info_ != NULL) role_info_->::SProtoSpace::battle_role_info::Clear();
  clear_has_role_info();
}
inline const ::SProtoSpace::battle_role_info& battle_begin_ack::role_info() const {
  return role_info_ != NULL ? *role_info_ : *default_instance_->role_info_;
}
inline ::SProtoSpace::battle_role_info* battle_begin_ack::mutable_role_info() {
  set_has_role_info();
  if (role_info_ == NULL) role_info_ = new ::SProtoSpace::battle_role_info;
  return role_info_;
}
inline ::SProtoSpace::battle_role_info* battle_begin_ack::release_role_info() {
  clear_has_role_info();
  ::SProtoSpace::battle_role_info* temp = role_info_;
  role_info_ = NULL;
  return temp;
}
inline void battle_begin_ack::set_allocated_role_info(::SProtoSpace::battle_role_info* role_info) {
  delete role_info_;
  role_info_ = role_info;
  if (role_info) {
    set_has_role_info();
  } else {
    clear_has_role_info();
  }
}

// -------------------------------------------------------------------

// battle_end_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_end_req_id];
inline bool battle_end_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_end_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_end_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_end_req::clear_protoid() {
  protoid_ = 5752;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_end_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_end_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.battle_end_data end_data = 2;
inline bool battle_end_req::has_end_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_end_req::set_has_end_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_end_req::clear_has_end_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_end_req::clear_end_data() {
  if (end_data_ != NULL) end_data_->::SProtoSpace::battle_end_data::Clear();
  clear_has_end_data();
}
inline const ::SProtoSpace::battle_end_data& battle_end_req::end_data() const {
  return end_data_ != NULL ? *end_data_ : *default_instance_->end_data_;
}
inline ::SProtoSpace::battle_end_data* battle_end_req::mutable_end_data() {
  set_has_end_data();
  if (end_data_ == NULL) end_data_ = new ::SProtoSpace::battle_end_data;
  return end_data_;
}
inline ::SProtoSpace::battle_end_data* battle_end_req::release_end_data() {
  clear_has_end_data();
  ::SProtoSpace::battle_end_data* temp = end_data_;
  end_data_ = NULL;
  return temp;
}
inline void battle_end_req::set_allocated_end_data(::SProtoSpace::battle_end_data* end_data) {
  delete end_data_;
  end_data_ = end_data;
  if (end_data) {
    set_has_end_data();
  } else {
    clear_has_end_data();
  }
}

// -------------------------------------------------------------------

// battle_end_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_end_ack_id];
inline bool battle_end_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_end_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_end_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_end_ack::clear_protoid() {
  protoid_ = 5753;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_end_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_end_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2 [default = 0];
inline bool battle_end_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_end_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_end_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_end_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 battle_end_ack::ret() const {
  return ret_;
}
inline void battle_end_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 type = 3;
inline bool battle_end_ack::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_end_ack::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_end_ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_end_ack::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 battle_end_ack::type() const {
  return type_;
}
inline void battle_end_ack::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 battle_id = 4;
inline bool battle_end_ack::has_battle_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void battle_end_ack::set_has_battle_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void battle_end_ack::clear_has_battle_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void battle_end_ack::clear_battle_id() {
  battle_id_ = 0;
  clear_has_battle_id();
}
inline ::google::protobuf::int32 battle_end_ack::battle_id() const {
  return battle_id_;
}
inline void battle_end_ack::set_battle_id(::google::protobuf::int32 value) {
  set_has_battle_id();
  battle_id_ = value;
}

// optional bool is_win = 5;
inline bool battle_end_ack::has_is_win() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void battle_end_ack::set_has_is_win() {
  _has_bits_[0] |= 0x00000010u;
}
inline void battle_end_ack::clear_has_is_win() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void battle_end_ack::clear_is_win() {
  is_win_ = false;
  clear_has_is_win();
}
inline bool battle_end_ack::is_win() const {
  return is_win_;
}
inline void battle_end_ack::set_is_win(bool value) {
  set_has_is_win();
  is_win_ = value;
}

// optional bool is_cheat = 6;
inline bool battle_end_ack::has_is_cheat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void battle_end_ack::set_has_is_cheat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void battle_end_ack::clear_has_is_cheat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void battle_end_ack::clear_is_cheat() {
  is_cheat_ = false;
  clear_has_is_cheat();
}
inline bool battle_end_ack::is_cheat() const {
  return is_cheat_;
}
inline void battle_end_ack::set_is_cheat(bool value) {
  set_has_is_cheat();
  is_cheat_ = value;
}

// optional int32 module_id = 7;
inline bool battle_end_ack::has_module_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void battle_end_ack::set_has_module_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void battle_end_ack::clear_has_module_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void battle_end_ack::clear_module_id() {
  module_id_ = 0;
  clear_has_module_id();
}
inline ::google::protobuf::int32 battle_end_ack::module_id() const {
  return module_id_;
}
inline void battle_end_ack::set_module_id(::google::protobuf::int32 value) {
  set_has_module_id();
  module_id_ = value;
}

// optional .SProtoSpace.EHeroFormationType formation_type = 8;
inline bool battle_end_ack::has_formation_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void battle_end_ack::set_has_formation_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void battle_end_ack::clear_has_formation_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void battle_end_ack::clear_formation_type() {
  formation_type_ = 1;
  clear_has_formation_type();
}
inline ::SProtoSpace::EHeroFormationType battle_end_ack::formation_type() const {
  return static_cast< ::SProtoSpace::EHeroFormationType >(formation_type_);
}
inline void battle_end_ack::set_formation_type(::SProtoSpace::EHeroFormationType value) {
  assert(::SProtoSpace::EHeroFormationType_IsValid(value));
  set_has_formation_type();
  formation_type_ = value;
}

// optional .SProtoSpace.battle_reward reward = 9;
inline bool battle_end_ack::has_reward() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void battle_end_ack::set_has_reward() {
  _has_bits_[0] |= 0x00000100u;
}
inline void battle_end_ack::clear_has_reward() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void battle_end_ack::clear_reward() {
  if (reward_ != NULL) reward_->::SProtoSpace::battle_reward::Clear();
  clear_has_reward();
}
inline const ::SProtoSpace::battle_reward& battle_end_ack::reward() const {
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::SProtoSpace::battle_reward* battle_end_ack::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::SProtoSpace::battle_reward;
  return reward_;
}
inline ::SProtoSpace::battle_reward* battle_end_ack::release_reward() {
  clear_has_reward();
  ::SProtoSpace::battle_reward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void battle_end_ack::set_allocated_reward(::SProtoSpace::battle_reward* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
}

// optional int32 stars = 10;
inline bool battle_end_ack::has_stars() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void battle_end_ack::set_has_stars() {
  _has_bits_[0] |= 0x00000200u;
}
inline void battle_end_ack::clear_has_stars() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void battle_end_ack::clear_stars() {
  stars_ = 0;
  clear_has_stars();
}
inline ::google::protobuf::int32 battle_end_ack::stars() const {
  return stars_;
}
inline void battle_end_ack::set_stars(::google::protobuf::int32 value) {
  set_has_stars();
  stars_ = value;
}

// -------------------------------------------------------------------

// battle_replay_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_replay_req_id];
inline bool battle_replay_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_replay_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_replay_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_replay_req::clear_protoid() {
  protoid_ = 5756;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_replay_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_replay_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 replay_id = 2;
inline bool battle_replay_req::has_replay_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_replay_req::set_has_replay_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_replay_req::clear_has_replay_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_replay_req::clear_replay_id() {
  replay_id_ = GOOGLE_ULONGLONG(0);
  clear_has_replay_id();
}
inline ::google::protobuf::uint64 battle_replay_req::replay_id() const {
  return replay_id_;
}
inline void battle_replay_req::set_replay_id(::google::protobuf::uint64 value) {
  set_has_replay_id();
  replay_id_ = value;
}

// -------------------------------------------------------------------

// battle_replay_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_replay_ack_id];
inline bool battle_replay_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void battle_replay_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void battle_replay_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void battle_replay_ack::clear_protoid() {
  protoid_ = 5757;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID battle_replay_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void battle_replay_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2 [default = 0];
inline bool battle_replay_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void battle_replay_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void battle_replay_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void battle_replay_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 battle_replay_ack::ret() const {
  return ret_;
}
inline void battle_replay_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 replay_id = 3;
inline bool battle_replay_ack::has_replay_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void battle_replay_ack::set_has_replay_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void battle_replay_ack::clear_has_replay_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void battle_replay_ack::clear_replay_id() {
  replay_id_ = GOOGLE_ULONGLONG(0);
  clear_has_replay_id();
}
inline ::google::protobuf::uint64 battle_replay_ack::replay_id() const {
  return replay_id_;
}
inline void battle_replay_ack::set_replay_id(::google::protobuf::uint64 value) {
  set_has_replay_id();
  replay_id_ = value;
}

// optional .SProtoSpace.battle_replay_info data = 4;
inline bool battle_replay_ack::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void battle_replay_ack::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void battle_replay_ack::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void battle_replay_ack::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::battle_replay_info::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::battle_replay_info& battle_replay_ack::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::battle_replay_info* battle_replay_ack::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::battle_replay_info;
  return data_;
}
inline ::SProtoSpace::battle_replay_info* battle_replay_ack::release_data() {
  clear_has_data();
  ::SProtoSpace::battle_replay_info* temp = data_;
  data_ = NULL;
  return temp;
}
inline void battle_replay_ack::set_allocated_data(::SProtoSpace::battle_replay_info* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// test_office_battle_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = test_office_battle_req_id];
inline bool test_office_battle_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void test_office_battle_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void test_office_battle_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void test_office_battle_req::clear_protoid() {
  protoid_ = 5754;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID test_office_battle_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void test_office_battle_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 index = 2;
inline bool test_office_battle_req::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void test_office_battle_req::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void test_office_battle_req::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void test_office_battle_req::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
inline ::google::protobuf::uint64 test_office_battle_req::index() const {
  return index_;
}
inline void test_office_battle_req::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// test_office_battle_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = test_office_battle_ack_id];
inline bool test_office_battle_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void test_office_battle_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void test_office_battle_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void test_office_battle_ack::clear_protoid() {
  protoid_ = 5755;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID test_office_battle_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void test_office_battle_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 index = 2;
inline bool test_office_battle_ack::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void test_office_battle_ack::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void test_office_battle_ack::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void test_office_battle_ack::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
inline ::google::protobuf::uint64 test_office_battle_ack::index() const {
  return index_;
}
inline void test_office_battle_ack::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// hero_formation

// optional .SProtoSpace.EHeroFormationType formation_type = 1;
inline bool hero_formation::has_formation_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_formation::set_has_formation_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_formation::clear_has_formation_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_formation::clear_formation_type() {
  formation_type_ = 1;
  clear_has_formation_type();
}
inline ::SProtoSpace::EHeroFormationType hero_formation::formation_type() const {
  return static_cast< ::SProtoSpace::EHeroFormationType >(formation_type_);
}
inline void hero_formation::set_formation_type(::SProtoSpace::EHeroFormationType value) {
  assert(::SProtoSpace::EHeroFormationType_IsValid(value));
  set_has_formation_type();
  formation_type_ = value;
}

// repeated uint64 hero_ids = 2;
inline int hero_formation::hero_ids_size() const {
  return hero_ids_.size();
}
inline void hero_formation::clear_hero_ids() {
  hero_ids_.Clear();
}
inline ::google::protobuf::uint64 hero_formation::hero_ids(int index) const {
  return hero_ids_.Get(index);
}
inline void hero_formation::set_hero_ids(int index, ::google::protobuf::uint64 value) {
  hero_ids_.Set(index, value);
}
inline void hero_formation::add_hero_ids(::google::protobuf::uint64 value) {
  hero_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
hero_formation::hero_ids() const {
  return hero_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
hero_formation::mutable_hero_ids() {
  return &hero_ids_;
}

// optional int32 role_position = 3;
inline bool hero_formation::has_role_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_formation::set_has_role_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_formation::clear_has_role_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_formation::clear_role_position() {
  role_position_ = 0;
  clear_has_role_position();
}
inline ::google::protobuf::int32 hero_formation::role_position() const {
  return role_position_;
}
inline void hero_formation::set_role_position(::google::protobuf::int32 value) {
  set_has_role_position();
  role_position_ = value;
}

// -------------------------------------------------------------------

// role_battle_formation_get_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_get_ntf_id];
inline bool role_battle_formation_get_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_battle_formation_get_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_battle_formation_get_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_battle_formation_get_ntf::clear_protoid() {
  protoid_ = 6200;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_battle_formation_get_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_battle_formation_get_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.hero_formation formations = 2;
inline int role_battle_formation_get_ntf::formations_size() const {
  return formations_.size();
}
inline void role_battle_formation_get_ntf::clear_formations() {
  formations_.Clear();
}
inline const ::SProtoSpace::hero_formation& role_battle_formation_get_ntf::formations(int index) const {
  return formations_.Get(index);
}
inline ::SProtoSpace::hero_formation* role_battle_formation_get_ntf::mutable_formations(int index) {
  return formations_.Mutable(index);
}
inline ::SProtoSpace::hero_formation* role_battle_formation_get_ntf::add_formations() {
  return formations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_formation >&
role_battle_formation_get_ntf::formations() const {
  return formations_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_formation >*
role_battle_formation_get_ntf::mutable_formations() {
  return &formations_;
}

// -------------------------------------------------------------------

// role_battle_formation_save_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_save_req_id];
inline bool role_battle_formation_save_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_battle_formation_save_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_battle_formation_save_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_battle_formation_save_req::clear_protoid() {
  protoid_ = 6202;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_battle_formation_save_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_battle_formation_save_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.hero_formation formation = 2;
inline bool role_battle_formation_save_req::has_formation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_battle_formation_save_req::set_has_formation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_battle_formation_save_req::clear_has_formation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_battle_formation_save_req::clear_formation() {
  if (formation_ != NULL) formation_->::SProtoSpace::hero_formation::Clear();
  clear_has_formation();
}
inline const ::SProtoSpace::hero_formation& role_battle_formation_save_req::formation() const {
  return formation_ != NULL ? *formation_ : *default_instance_->formation_;
}
inline ::SProtoSpace::hero_formation* role_battle_formation_save_req::mutable_formation() {
  set_has_formation();
  if (formation_ == NULL) formation_ = new ::SProtoSpace::hero_formation;
  return formation_;
}
inline ::SProtoSpace::hero_formation* role_battle_formation_save_req::release_formation() {
  clear_has_formation();
  ::SProtoSpace::hero_formation* temp = formation_;
  formation_ = NULL;
  return temp;
}
inline void role_battle_formation_save_req::set_allocated_formation(::SProtoSpace::hero_formation* formation) {
  delete formation_;
  formation_ = formation;
  if (formation) {
    set_has_formation();
  } else {
    clear_has_formation();
  }
}

// repeated .SProtoSpace.hero_formation formations = 3;
inline int role_battle_formation_save_req::formations_size() const {
  return formations_.size();
}
inline void role_battle_formation_save_req::clear_formations() {
  formations_.Clear();
}
inline const ::SProtoSpace::hero_formation& role_battle_formation_save_req::formations(int index) const {
  return formations_.Get(index);
}
inline ::SProtoSpace::hero_formation* role_battle_formation_save_req::mutable_formations(int index) {
  return formations_.Mutable(index);
}
inline ::SProtoSpace::hero_formation* role_battle_formation_save_req::add_formations() {
  return formations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_formation >&
role_battle_formation_save_req::formations() const {
  return formations_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_formation >*
role_battle_formation_save_req::mutable_formations() {
  return &formations_;
}

// -------------------------------------------------------------------

// role_battle_formation_save_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_save_ack_id];
inline bool role_battle_formation_save_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_battle_formation_save_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_battle_formation_save_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_battle_formation_save_ack::clear_protoid() {
  protoid_ = 6203;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_battle_formation_save_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_battle_formation_save_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 rec_code = 2;
inline bool role_battle_formation_save_ack::has_rec_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_battle_formation_save_ack::set_has_rec_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_battle_formation_save_ack::clear_has_rec_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_battle_formation_save_ack::clear_rec_code() {
  rec_code_ = 0u;
  clear_has_rec_code();
}
inline ::google::protobuf::uint32 role_battle_formation_save_ack::rec_code() const {
  return rec_code_;
}
inline void role_battle_formation_save_ack::set_rec_code(::google::protobuf::uint32 value) {
  set_has_rec_code();
  rec_code_ = value;
}

// optional int64 formation_fight_power_buff_add = 3;
inline bool role_battle_formation_save_ack::has_formation_fight_power_buff_add() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_battle_formation_save_ack::set_has_formation_fight_power_buff_add() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_battle_formation_save_ack::clear_has_formation_fight_power_buff_add() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_battle_formation_save_ack::clear_formation_fight_power_buff_add() {
  formation_fight_power_buff_add_ = GOOGLE_LONGLONG(0);
  clear_has_formation_fight_power_buff_add();
}
inline ::google::protobuf::int64 role_battle_formation_save_ack::formation_fight_power_buff_add() const {
  return formation_fight_power_buff_add_;
}
inline void role_battle_formation_save_ack::set_formation_fight_power_buff_add(::google::protobuf::int64 value) {
  set_has_formation_fight_power_buff_add();
  formation_fight_power_buff_add_ = value;
}

// optional int64 formation_fight_power_buff_no = 4;
inline bool role_battle_formation_save_ack::has_formation_fight_power_buff_no() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_battle_formation_save_ack::set_has_formation_fight_power_buff_no() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_battle_formation_save_ack::clear_has_formation_fight_power_buff_no() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_battle_formation_save_ack::clear_formation_fight_power_buff_no() {
  formation_fight_power_buff_no_ = GOOGLE_LONGLONG(0);
  clear_has_formation_fight_power_buff_no();
}
inline ::google::protobuf::int64 role_battle_formation_save_ack::formation_fight_power_buff_no() const {
  return formation_fight_power_buff_no_;
}
inline void role_battle_formation_save_ack::set_formation_fight_power_buff_no(::google::protobuf::int64 value) {
  set_has_formation_fight_power_buff_no();
  formation_fight_power_buff_no_ = value;
}

// optional .SProtoSpace.MsgErrorType ret = 5;
inline bool role_battle_formation_save_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_battle_formation_save_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_battle_formation_save_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_battle_formation_save_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::SProtoSpace::MsgErrorType role_battle_formation_save_ack::ret() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(ret_);
}
inline void role_battle_formation_save_ack::set_ret(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// role_battle_formation_fight_power_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_fight_power_req_id];
inline bool role_battle_formation_fight_power_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_battle_formation_fight_power_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_battle_formation_fight_power_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_battle_formation_fight_power_req::clear_protoid() {
  protoid_ = 5427;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_battle_formation_fight_power_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_battle_formation_fight_power_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.EHeroFormationType formation_type = 2;
inline bool role_battle_formation_fight_power_req::has_formation_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_battle_formation_fight_power_req::set_has_formation_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_battle_formation_fight_power_req::clear_has_formation_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_battle_formation_fight_power_req::clear_formation_type() {
  formation_type_ = 1;
  clear_has_formation_type();
}
inline ::SProtoSpace::EHeroFormationType role_battle_formation_fight_power_req::formation_type() const {
  return static_cast< ::SProtoSpace::EHeroFormationType >(formation_type_);
}
inline void role_battle_formation_fight_power_req::set_formation_type(::SProtoSpace::EHeroFormationType value) {
  assert(::SProtoSpace::EHeroFormationType_IsValid(value));
  set_has_formation_type();
  formation_type_ = value;
}

// -------------------------------------------------------------------

// role_battle_formation_fight_power_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_fight_power_ack_id];
inline bool role_battle_formation_fight_power_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_battle_formation_fight_power_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_battle_formation_fight_power_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_battle_formation_fight_power_ack::clear_protoid() {
  protoid_ = 5428;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_battle_formation_fight_power_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_battle_formation_fight_power_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int64 formation_fight_power_buff_add = 2;
inline bool role_battle_formation_fight_power_ack::has_formation_fight_power_buff_add() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_battle_formation_fight_power_ack::set_has_formation_fight_power_buff_add() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_battle_formation_fight_power_ack::clear_has_formation_fight_power_buff_add() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_battle_formation_fight_power_ack::clear_formation_fight_power_buff_add() {
  formation_fight_power_buff_add_ = GOOGLE_LONGLONG(0);
  clear_has_formation_fight_power_buff_add();
}
inline ::google::protobuf::int64 role_battle_formation_fight_power_ack::formation_fight_power_buff_add() const {
  return formation_fight_power_buff_add_;
}
inline void role_battle_formation_fight_power_ack::set_formation_fight_power_buff_add(::google::protobuf::int64 value) {
  set_has_formation_fight_power_buff_add();
  formation_fight_power_buff_add_ = value;
}

// optional int64 formation_fight_power_buff_no = 3;
inline bool role_battle_formation_fight_power_ack::has_formation_fight_power_buff_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_battle_formation_fight_power_ack::set_has_formation_fight_power_buff_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_battle_formation_fight_power_ack::clear_has_formation_fight_power_buff_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_battle_formation_fight_power_ack::clear_formation_fight_power_buff_no() {
  formation_fight_power_buff_no_ = GOOGLE_LONGLONG(0);
  clear_has_formation_fight_power_buff_no();
}
inline ::google::protobuf::int64 role_battle_formation_fight_power_ack::formation_fight_power_buff_no() const {
  return formation_fight_power_buff_no_;
}
inline void role_battle_formation_fight_power_ack::set_formation_fight_power_buff_no(::google::protobuf::int64 value) {
  set_has_formation_fight_power_buff_no();
  formation_fight_power_buff_no_ = value;
}

// optional sint32 rec_code = 4;
inline bool role_battle_formation_fight_power_ack::has_rec_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_battle_formation_fight_power_ack::set_has_rec_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_battle_formation_fight_power_ack::clear_has_rec_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_battle_formation_fight_power_ack::clear_rec_code() {
  rec_code_ = 0;
  clear_has_rec_code();
}
inline ::google::protobuf::int32 role_battle_formation_fight_power_ack::rec_code() const {
  return rec_code_;
}
inline void role_battle_formation_fight_power_ack::set_rec_code(::google::protobuf::int32 value) {
  set_has_rec_code();
  rec_code_ = value;
}

// -------------------------------------------------------------------

// role_battle_hero_fight_power_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_hero_fight_power_req_id];
inline bool role_battle_hero_fight_power_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_battle_hero_fight_power_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_battle_hero_fight_power_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_battle_hero_fight_power_req::clear_protoid() {
  protoid_ = 5429;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_battle_hero_fight_power_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_battle_hero_fight_power_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 hero_id = 2;
inline bool role_battle_hero_fight_power_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_battle_hero_fight_power_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_battle_hero_fight_power_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_battle_hero_fight_power_req::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 role_battle_hero_fight_power_req::hero_id() const {
  return hero_id_;
}
inline void role_battle_hero_fight_power_req::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// -------------------------------------------------------------------

// role_battle_hero_fight_power_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_hero_fight_power_ack_id];
inline bool role_battle_hero_fight_power_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_battle_hero_fight_power_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_battle_hero_fight_power_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_battle_hero_fight_power_ack::clear_protoid() {
  protoid_ = 5430;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_battle_hero_fight_power_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_battle_hero_fight_power_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int64 hero_fight_power = 2;
inline bool role_battle_hero_fight_power_ack::has_hero_fight_power() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_battle_hero_fight_power_ack::set_has_hero_fight_power() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_battle_hero_fight_power_ack::clear_has_hero_fight_power() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_battle_hero_fight_power_ack::clear_hero_fight_power() {
  hero_fight_power_ = GOOGLE_LONGLONG(0);
  clear_has_hero_fight_power();
}
inline ::google::protobuf::int64 role_battle_hero_fight_power_ack::hero_fight_power() const {
  return hero_fight_power_;
}
inline void role_battle_hero_fight_power_ack::set_hero_fight_power(::google::protobuf::int64 value) {
  set_has_hero_fight_power();
  hero_fight_power_ = value;
}

// optional sint32 rec_code = 3;
inline bool role_battle_hero_fight_power_ack::has_rec_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_battle_hero_fight_power_ack::set_has_rec_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_battle_hero_fight_power_ack::clear_has_rec_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_battle_hero_fight_power_ack::clear_rec_code() {
  rec_code_ = 0;
  clear_has_rec_code();
}
inline ::google::protobuf::int32 role_battle_hero_fight_power_ack::rec_code() const {
  return rec_code_;
}
inline void role_battle_hero_fight_power_ack::set_rec_code(::google::protobuf::int32 value) {
  set_has_rec_code();
  rec_code_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_5fbattle_2eproto__INCLUDED
