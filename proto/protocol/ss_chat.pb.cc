// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ss_chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* chat_world_public_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_world_public_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_world_change_channel_public_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_world_change_channel_public_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_world_change_channel_public_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_world_change_channel_public_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_world_random_channel_public_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_world_random_channel_public_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_world_random_channel_public_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_world_random_channel_public_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_private_public_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_private_public_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_team_public_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_team_public_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_family_public_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_family_public_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_broadcast_public_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_broadcast_public_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_world_channel_ntf_one_role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_world_channel_ntf_one_role_reflection_ = NULL;
const ::google::protobuf::Descriptor* chat_world_channel_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chat_world_channel_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* barrage_get_ss_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  barrage_get_ss_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* barrage_get_ss_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  barrage_get_ss_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* barrage_send_ss_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  barrage_send_ss_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* barrage_send_ss_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  barrage_send_ss_ack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ss_5fchat_2eproto() {
  protobuf_AddDesc_ss_5fchat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ss_chat.proto");
  GOOGLE_CHECK(file != NULL);
  chat_world_public_ntf_descriptor_ = file->message_type(0);
  static const int chat_world_public_ntf_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_public_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_public_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_public_ntf, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_public_ntf, role_avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_public_ntf, world_channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_public_ntf, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_public_ntf, gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_public_ntf, avatar_box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_public_ntf, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_public_ntf, roles_in_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_public_ntf, officer_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_public_ntf, world_chat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_public_ntf, event_data_),
  };
  chat_world_public_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_world_public_ntf_descriptor_,
      chat_world_public_ntf::default_instance_,
      chat_world_public_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_public_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_public_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_world_public_ntf));
  chat_world_change_channel_public_req_descriptor_ = file->message_type(1);
  static const int chat_world_change_channel_public_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_change_channel_public_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_change_channel_public_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_change_channel_public_req, old_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_change_channel_public_req, new_channel_),
  };
  chat_world_change_channel_public_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_world_change_channel_public_req_descriptor_,
      chat_world_change_channel_public_req::default_instance_,
      chat_world_change_channel_public_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_change_channel_public_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_change_channel_public_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_world_change_channel_public_req));
  chat_world_change_channel_public_ack_descriptor_ = file->message_type(2);
  static const int chat_world_change_channel_public_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_change_channel_public_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_change_channel_public_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_change_channel_public_ack, old_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_change_channel_public_ack, new_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_change_channel_public_ack, rec_code_),
  };
  chat_world_change_channel_public_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_world_change_channel_public_ack_descriptor_,
      chat_world_change_channel_public_ack::default_instance_,
      chat_world_change_channel_public_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_change_channel_public_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_change_channel_public_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_world_change_channel_public_ack));
  chat_world_random_channel_public_req_descriptor_ = file->message_type(3);
  static const int chat_world_random_channel_public_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_random_channel_public_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_random_channel_public_req, role_id_),
  };
  chat_world_random_channel_public_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_world_random_channel_public_req_descriptor_,
      chat_world_random_channel_public_req::default_instance_,
      chat_world_random_channel_public_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_random_channel_public_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_random_channel_public_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_world_random_channel_public_req));
  chat_world_random_channel_public_ack_descriptor_ = file->message_type(4);
  static const int chat_world_random_channel_public_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_random_channel_public_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_random_channel_public_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_random_channel_public_ack, new_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_random_channel_public_ack, rec_code_),
  };
  chat_world_random_channel_public_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_world_random_channel_public_ack_descriptor_,
      chat_world_random_channel_public_ack::default_instance_,
      chat_world_random_channel_public_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_random_channel_public_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_random_channel_public_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_world_random_channel_public_ack));
  chat_private_public_ntf_descriptor_ = file->message_type(5);
  static const int chat_private_public_ntf_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_public_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_public_ntf, to_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_public_ntf, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_public_ntf, role_avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_public_ntf, from_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_public_ntf, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_public_ntf, gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_public_ntf, avatar_box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_public_ntf, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_public_ntf, officer_grade_),
  };
  chat_private_public_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_private_public_ntf_descriptor_,
      chat_private_public_ntf::default_instance_,
      chat_private_public_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_public_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_private_public_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_private_public_ntf));
  chat_team_public_ntf_descriptor_ = file->message_type(6);
  static const int chat_team_public_ntf_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_public_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_public_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_public_ntf, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_public_ntf, role_avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_public_ntf, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_public_ntf, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_public_ntf, gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_public_ntf, avatar_box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_public_ntf, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_public_ntf, roles_in_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_public_ntf, officer_grade_),
  };
  chat_team_public_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_team_public_ntf_descriptor_,
      chat_team_public_ntf::default_instance_,
      chat_team_public_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_public_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_team_public_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_team_public_ntf));
  chat_family_public_ntf_descriptor_ = file->message_type(7);
  static const int chat_family_public_ntf_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_public_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_public_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_public_ntf, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_public_ntf, role_avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_public_ntf, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_public_ntf, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_public_ntf, gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_public_ntf, avatar_box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_public_ntf, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_public_ntf, roles_in_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_public_ntf, officer_grade_),
  };
  chat_family_public_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_family_public_ntf_descriptor_,
      chat_family_public_ntf::default_instance_,
      chat_family_public_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_public_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_family_public_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_family_public_ntf));
  chat_broadcast_public_ntf_descriptor_ = file->message_type(8);
  static const int chat_broadcast_public_ntf_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_public_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_public_ntf, to_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_public_ntf, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_public_ntf, role_avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_public_ntf, from_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_public_ntf, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_public_ntf, gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_public_ntf, avatar_box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_public_ntf, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_public_ntf, officer_grade_),
  };
  chat_broadcast_public_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_broadcast_public_ntf_descriptor_,
      chat_broadcast_public_ntf::default_instance_,
      chat_broadcast_public_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_public_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_broadcast_public_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_broadcast_public_ntf));
  chat_world_channel_ntf_one_role_descriptor_ = file->message_type(9);
  static const int chat_world_channel_ntf_one_role_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_ntf_one_role, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_ntf_one_role, channel_id_),
  };
  chat_world_channel_ntf_one_role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_world_channel_ntf_one_role_descriptor_,
      chat_world_channel_ntf_one_role::default_instance_,
      chat_world_channel_ntf_one_role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_ntf_one_role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_ntf_one_role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_world_channel_ntf_one_role));
  chat_world_channel_ntf_descriptor_ = file->message_type(10);
  static const int chat_world_channel_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_ntf, roles_),
  };
  chat_world_channel_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chat_world_channel_ntf_descriptor_,
      chat_world_channel_ntf::default_instance_,
      chat_world_channel_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_world_channel_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chat_world_channel_ntf));
  barrage_get_ss_req_descriptor_ = file->message_type(11);
  static const int barrage_get_ss_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_ss_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_ss_req, storage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_ss_req, desinty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_ss_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_ss_req, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_ss_req, end_),
  };
  barrage_get_ss_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      barrage_get_ss_req_descriptor_,
      barrage_get_ss_req::default_instance_,
      barrage_get_ss_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_ss_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_ss_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(barrage_get_ss_req));
  barrage_get_ss_ack_descriptor_ = file->message_type(12);
  static const int barrage_get_ss_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_ss_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_ss_ack, desinty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_ss_ack, barrage_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_ss_ack, role_id_),
  };
  barrage_get_ss_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      barrage_get_ss_ack_descriptor_,
      barrage_get_ss_ack::default_instance_,
      barrage_get_ss_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_ss_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_get_ss_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(barrage_get_ss_ack));
  barrage_send_ss_req_descriptor_ = file->message_type(13);
  static const int barrage_send_ss_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_ss_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_ss_req, storage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_ss_req, barrage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_ss_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_ss_req, role_info_),
  };
  barrage_send_ss_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      barrage_send_ss_req_descriptor_,
      barrage_send_ss_req::default_instance_,
      barrage_send_ss_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_ss_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_ss_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(barrage_send_ss_req));
  barrage_send_ss_ack_descriptor_ = file->message_type(14);
  static const int barrage_send_ss_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_ss_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_ss_ack, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_ss_ack, role_id_),
  };
  barrage_send_ss_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      barrage_send_ss_ack_descriptor_,
      barrage_send_ss_ack::default_instance_,
      barrage_send_ss_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_ss_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barrage_send_ss_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(barrage_send_ss_ack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ss_5fchat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_world_public_ntf_descriptor_, &chat_world_public_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_world_change_channel_public_req_descriptor_, &chat_world_change_channel_public_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_world_change_channel_public_ack_descriptor_, &chat_world_change_channel_public_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_world_random_channel_public_req_descriptor_, &chat_world_random_channel_public_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_world_random_channel_public_ack_descriptor_, &chat_world_random_channel_public_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_private_public_ntf_descriptor_, &chat_private_public_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_team_public_ntf_descriptor_, &chat_team_public_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_family_public_ntf_descriptor_, &chat_family_public_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_broadcast_public_ntf_descriptor_, &chat_broadcast_public_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_world_channel_ntf_one_role_descriptor_, &chat_world_channel_ntf_one_role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chat_world_channel_ntf_descriptor_, &chat_world_channel_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    barrage_get_ss_req_descriptor_, &barrage_get_ss_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    barrage_get_ss_ack_descriptor_, &barrage_get_ss_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    barrage_send_ss_req_descriptor_, &barrage_send_ss_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    barrage_send_ss_ack_descriptor_, &barrage_send_ss_ack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ss_5fchat_2eproto() {
  delete chat_world_public_ntf::default_instance_;
  delete chat_world_public_ntf_reflection_;
  delete chat_world_change_channel_public_req::default_instance_;
  delete chat_world_change_channel_public_req_reflection_;
  delete chat_world_change_channel_public_ack::default_instance_;
  delete chat_world_change_channel_public_ack_reflection_;
  delete chat_world_random_channel_public_req::default_instance_;
  delete chat_world_random_channel_public_req_reflection_;
  delete chat_world_random_channel_public_ack::default_instance_;
  delete chat_world_random_channel_public_ack_reflection_;
  delete chat_private_public_ntf::default_instance_;
  delete chat_private_public_ntf_reflection_;
  delete chat_team_public_ntf::default_instance_;
  delete chat_team_public_ntf_reflection_;
  delete chat_family_public_ntf::default_instance_;
  delete chat_family_public_ntf_reflection_;
  delete chat_broadcast_public_ntf::default_instance_;
  delete chat_broadcast_public_ntf_reflection_;
  delete chat_world_channel_ntf_one_role::default_instance_;
  delete chat_world_channel_ntf_one_role_reflection_;
  delete chat_world_channel_ntf::default_instance_;
  delete chat_world_channel_ntf_reflection_;
  delete barrage_get_ss_req::default_instance_;
  delete barrage_get_ss_req_reflection_;
  delete barrage_get_ss_ack::default_instance_;
  delete barrage_get_ss_ack_reflection_;
  delete barrage_send_ss_req::default_instance_;
  delete barrage_send_ss_req_reflection_;
  delete barrage_send_ss_ack::default_instance_;
  delete barrage_send_ss_ack_reflection_;
}

void protobuf_AddDesc_ss_5fchat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SProtoSpace::protobuf_AddDesc_ss_5fprotoid_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5fsocialtype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cs_5ferrorcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rss_chat.proto\022\013SProtoSpace\032\020ss_protoid"
    ".proto\032\023cm_socialtype.proto\032\022cs_errorcod"
    "e.proto\"\367\002\n\025chat_world_public_ntf\022B\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\030cha"
    "t_world_public_ntf_id\022\017\n\007role_id\030\002 \001(\004\022\021"
    "\n\trole_name\030\003 \001(\t\022\027\n\017role_avatar_url\030\004 \001"
    "(\t\022\030\n\020world_channel_id\030\005 \001(\r\022\017\n\007content\030"
    "\006 \001(\t\022\021\n\tgender_id\030\007 \001(\005\022\025\n\ravatar_box_i"
    "d\030\010 \001(\r\022\r\n\005level\030\t \001(\005\022\030\n\020roles_in_chann"
    "el\030\n \003(\004\022\025\n\rofficer_grade\030\013 \001(\005\0224\n\017world"
    "_chat_type\030\014 \001(\0162\033.SProtoSpace.eWorldCha"
    "tType\022\022\n\nevent_data\030\r \001(\004\"\264\001\n$chat_world"
    "_change_channel_public_req\022Q\n\007protoid\030\001 "
    "\001(\0162\027.SProtoSpace.ESSProtoID:\'chat_world"
    "_change_channel_public_req_id\022\017\n\007role_id"
    "\030\002 \001(\004\022\023\n\013old_channel\030\003 \001(\r\022\023\n\013new_chann"
    "el\030\004 \001(\r\"\306\001\n$chat_world_change_channel_p"
    "ublic_ack\022Q\n\007protoid\030\001 \001(\0162\027.SProtoSpace"
    ".ESSProtoID:\'chat_world_change_channel_p"
    "ublic_ack_id\022\017\n\007role_id\030\002 \001(\004\022\023\n\013old_cha"
    "nnel\030\003 \001(\r\022\023\n\013new_channel\030\004 \001(\r\022\020\n\010rec_c"
    "ode\030\005 \001(\005\"\212\001\n$chat_world_random_channel_"
    "public_req\022Q\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ESSProtoID:\'chat_world_random_channel_"
    "public_req_id\022\017\n\007role_id\030\002 \001(\004\"\261\001\n$chat_"
    "world_random_channel_public_ack\022Q\n\007proto"
    "id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\'chat_"
    "world_random_channel_public_ack_id\022\017\n\007ro"
    "le_id\030\002 \001(\004\022\023\n\013new_channel\030\003 \001(\r\022\020\n\010rec_"
    "code\030\004 \001(\005\"\226\002\n\027chat_private_public_ntf\022D"
    "\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID"
    ":\032chat_private_public_ntf_id\022\022\n\nto_role_"
    "id\030\002 \001(\004\022\021\n\trole_name\030\003 \001(\t\022\027\n\017role_avat"
    "ar_url\030\004 \001(\t\022\024\n\014from_role_id\030\005 \001(\004\022\017\n\007co"
    "ntent\030\006 \001(\t\022\021\n\tgender_id\030\007 \001(\005\022\025\n\ravatar"
    "_box_id\030\010 \001(\r\022\r\n\005level\030\t \001(\005\022\025\n\rofficer_"
    "grade\030\n \001(\005\"\237\002\n\024chat_team_public_ntf\022A\n\007"
    "protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\027"
    "chat_team_public_ntf_id\022\017\n\007role_id\030\002 \001(\004"
    "\022\021\n\trole_name\030\003 \001(\t\022\027\n\017role_avatar_url\030\004"
    " \001(\t\022\017\n\007team_id\030\005 \001(\r\022\017\n\007content\030\006 \001(\t\022\021"
    "\n\tgender_id\030\007 \001(\005\022\025\n\ravatar_box_id\030\010 \001(\r"
    "\022\r\n\005level\030\t \001(\005\022\025\n\rroles_in_team\030\n \003(\004\022\025"
    "\n\rofficer_grade\030\013 \001(\005\"\247\002\n\026chat_family_pu"
    "blic_ntf\022C\n\007protoid\030\001 \001(\0162\027.SProtoSpace."
    "ESSProtoID:\031chat_family_public_ntf_id\022\017\n"
    "\007role_id\030\002 \001(\004\022\021\n\trole_name\030\003 \001(\t\022\027\n\017rol"
    "e_avatar_url\030\004 \001(\t\022\021\n\tfamily_id\030\005 \001(\r\022\017\n"
    "\007content\030\006 \001(\t\022\021\n\tgender_id\030\007 \001(\005\022\025\n\rava"
    "tar_box_id\030\010 \001(\r\022\r\n\005level\030\t \001(\005\022\027\n\017roles"
    "_in_family\030\n \003(\004\022\025\n\rofficer_grade\030\013 \001(\005\""
    "\232\002\n\031chat_broadcast_public_ntf\022F\n\007protoid"
    "\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\034chat_br"
    "oadcast_public_ntf_id\022\022\n\nto_role_id\030\002 \001("
    "\004\022\021\n\trole_name\030\003 \001(\t\022\027\n\017role_avatar_url\030"
    "\004 \001(\t\022\024\n\014from_role_id\030\005 \001(\004\022\017\n\007content\030\006"
    " \001(\t\022\021\n\tgender_id\030\007 \001(\005\022\025\n\ravatar_box_id"
    "\030\010 \001(\r\022\r\n\005level\030\t \001(\005\022\025\n\rofficer_grade\030\n"
    " \001(\005\"F\n\037chat_world_channel_ntf_one_role\022"
    "\017\n\007role_id\030\001 \001(\004\022\022\n\nchannel_id\030\002 \001(\r\"\232\001\n"
    "\026chat_world_channel_ntf\022C\n\007protoid\030\001 \001(\016"
    "2\027.SProtoSpace.ESSProtoID:\031chat_world_ch"
    "annel_ntf_id\022;\n\005roles\030\002 \003(\0132,.SProtoSpac"
    "e.chat_world_channel_ntf_one_role\"\247\001\n\022ba"
    "rrage_get_ss_req\022\?\n\007protoid\030\001 \001(\0162\027.SPro"
    "toSpace.ESSProtoID:\025barrage_get_ss_req_i"
    "d\022\022\n\nstorage_id\030\002 \003(\005\022\017\n\007desinty\030\003 \001(\005\022\017"
    "\n\007role_id\030\004 \001(\004\022\r\n\005start\030\005 \001(\005\022\013\n\003end\030\006 "
    "\001(\005\"\245\001\n\022barrage_get_ss_ack\022\?\n\007protoid\030\001 "
    "\001(\0162\027.SProtoSpace.ESSProtoID:\025barrage_ge"
    "t_ss_ack_id\022\017\n\007desinty\030\002 \001(\005\022,\n\tbarrage_"
    "s\030\003 \001(\0132\031.SProtoSpace.barrage_pack\022\017\n\007ro"
    "le_id\030\004 \001(\004\"\335\001\n\023barrage_send_ss_req\022@\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\026b"
    "arrage_send_ss_req_id\022\022\n\nstorage_id\030\002 \003("
    "\005\022,\n\007barrage\030\003 \001(\0132\033.SProtoSpace.barrage"
    "_single\022\017\n\007role_id\030\004 \001(\004\0221\n\trole_info\030\005 "
    "\001(\0132\036.SProtoSpace.barrage_role_info\"\222\001\n\023"
    "barrage_send_ss_ack\022@\n\007protoid\030\001 \001(\0162\027.S"
    "ProtoSpace.ESSProtoID:\026barrage_send_ss_a"
    "ck_id\022(\n\005error\030\002 \003(\0162\031.SProtoSpace.MsgEr"
    "rorType\022\017\n\007role_id\030\003 \001(\004", 3264);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ss_chat.proto", &protobuf_RegisterTypes);
  chat_world_public_ntf::default_instance_ = new chat_world_public_ntf();
  chat_world_change_channel_public_req::default_instance_ = new chat_world_change_channel_public_req();
  chat_world_change_channel_public_ack::default_instance_ = new chat_world_change_channel_public_ack();
  chat_world_random_channel_public_req::default_instance_ = new chat_world_random_channel_public_req();
  chat_world_random_channel_public_ack::default_instance_ = new chat_world_random_channel_public_ack();
  chat_private_public_ntf::default_instance_ = new chat_private_public_ntf();
  chat_team_public_ntf::default_instance_ = new chat_team_public_ntf();
  chat_family_public_ntf::default_instance_ = new chat_family_public_ntf();
  chat_broadcast_public_ntf::default_instance_ = new chat_broadcast_public_ntf();
  chat_world_channel_ntf_one_role::default_instance_ = new chat_world_channel_ntf_one_role();
  chat_world_channel_ntf::default_instance_ = new chat_world_channel_ntf();
  barrage_get_ss_req::default_instance_ = new barrage_get_ss_req();
  barrage_get_ss_ack::default_instance_ = new barrage_get_ss_ack();
  barrage_send_ss_req::default_instance_ = new barrage_send_ss_req();
  barrage_send_ss_ack::default_instance_ = new barrage_send_ss_ack();
  chat_world_public_ntf::default_instance_->InitAsDefaultInstance();
  chat_world_change_channel_public_req::default_instance_->InitAsDefaultInstance();
  chat_world_change_channel_public_ack::default_instance_->InitAsDefaultInstance();
  chat_world_random_channel_public_req::default_instance_->InitAsDefaultInstance();
  chat_world_random_channel_public_ack::default_instance_->InitAsDefaultInstance();
  chat_private_public_ntf::default_instance_->InitAsDefaultInstance();
  chat_team_public_ntf::default_instance_->InitAsDefaultInstance();
  chat_family_public_ntf::default_instance_->InitAsDefaultInstance();
  chat_broadcast_public_ntf::default_instance_->InitAsDefaultInstance();
  chat_world_channel_ntf_one_role::default_instance_->InitAsDefaultInstance();
  chat_world_channel_ntf::default_instance_->InitAsDefaultInstance();
  barrage_get_ss_req::default_instance_->InitAsDefaultInstance();
  barrage_get_ss_ack::default_instance_->InitAsDefaultInstance();
  barrage_send_ss_req::default_instance_->InitAsDefaultInstance();
  barrage_send_ss_ack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ss_5fchat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ss_5fchat_2eproto {
  StaticDescriptorInitializer_ss_5fchat_2eproto() {
    protobuf_AddDesc_ss_5fchat_2eproto();
  }
} static_descriptor_initializer_ss_5fchat_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int chat_world_public_ntf::kProtoidFieldNumber;
const int chat_world_public_ntf::kRoleIdFieldNumber;
const int chat_world_public_ntf::kRoleNameFieldNumber;
const int chat_world_public_ntf::kRoleAvatarUrlFieldNumber;
const int chat_world_public_ntf::kWorldChannelIdFieldNumber;
const int chat_world_public_ntf::kContentFieldNumber;
const int chat_world_public_ntf::kGenderIdFieldNumber;
const int chat_world_public_ntf::kAvatarBoxIdFieldNumber;
const int chat_world_public_ntf::kLevelFieldNumber;
const int chat_world_public_ntf::kRolesInChannelFieldNumber;
const int chat_world_public_ntf::kOfficerGradeFieldNumber;
const int chat_world_public_ntf::kWorldChatTypeFieldNumber;
const int chat_world_public_ntf::kEventDataFieldNumber;
#endif  // !_MSC_VER

chat_world_public_ntf::chat_world_public_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_world_public_ntf::InitAsDefaultInstance() {
}

chat_world_public_ntf::chat_world_public_ntf(const chat_world_public_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_world_public_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 900;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  world_channel_id_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_id_ = 0;
  avatar_box_id_ = 0u;
  level_ = 0;
  officer_grade_ = 0;
  world_chat_type_ = 0;
  event_data_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_world_public_ntf::~chat_world_public_ntf() {
  SharedDtor();
}

void chat_world_public_ntf::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void chat_world_public_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_world_public_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_world_public_ntf_descriptor_;
}

const chat_world_public_ntf& chat_world_public_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fchat_2eproto();
  return *default_instance_;
}

chat_world_public_ntf* chat_world_public_ntf::default_instance_ = NULL;

chat_world_public_ntf* chat_world_public_ntf::New() const {
  return new chat_world_public_ntf;
}

void chat_world_public_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 900;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_role_avatar_url()) {
      if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        role_avatar_url_->clear();
      }
    }
    world_channel_id_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    gender_id_ = 0;
    avatar_box_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    officer_grade_ = 0;
    world_chat_type_ = 0;
    event_data_ = GOOGLE_ULONGLONG(0);
  }
  roles_in_channel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_world_public_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_public_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_avatar_url;
        break;
      }

      // optional string role_avatar_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_avatar_url().data(), this->role_avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_world_channel_id;
        break;
      }

      // optional uint32 world_channel_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &world_channel_id_)));
          set_has_world_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gender_id;
        break;
      }

      // optional int32 gender_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_id_)));
          set_has_gender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_avatar_box_id;
        break;
      }

      // optional uint32 avatar_box_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_box_id_)));
          set_has_avatar_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_roles_in_channel;
        break;
      }

      // repeated uint64 roles_in_channel = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roles_in_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 80, input, this->mutable_roles_in_channel())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_roles_in_channel())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_roles_in_channel;
        if (input->ExpectTag(88)) goto parse_officer_grade;
        break;
      }

      // optional int32 officer_grade = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officer_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officer_grade_)));
          set_has_officer_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_world_chat_type;
        break;
      }

      // optional .SProtoSpace.eWorldChatType world_chat_type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_chat_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eWorldChatType_IsValid(value)) {
            set_world_chat_type(static_cast< ::SProtoSpace::eWorldChatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_event_data;
        break;
      }

      // optional uint64 event_data = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_data_)));
          set_has_event_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_world_public_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_public_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_avatar_url(), output);
  }

  // optional uint32 world_channel_id = 5;
  if (has_world_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->world_channel_id(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gender_id(), output);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avatar_box_id(), output);
  }

  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // repeated uint64 roles_in_channel = 10;
  for (int i = 0; i < this->roles_in_channel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      10, this->roles_in_channel(i), output);
  }

  // optional int32 officer_grade = 11;
  if (has_officer_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->officer_grade(), output);
  }

  // optional .SProtoSpace.eWorldChatType world_chat_type = 12;
  if (has_world_chat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->world_chat_type(), output);
  }

  // optional uint64 event_data = 13;
  if (has_event_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->event_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_world_public_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_public_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_avatar_url(), target);
  }

  // optional uint32 world_channel_id = 5;
  if (has_world_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->world_channel_id(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gender_id(), target);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avatar_box_id(), target);
  }

  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // repeated uint64 roles_in_channel = 10;
  for (int i = 0; i < this->roles_in_channel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(10, this->roles_in_channel(i), target);
  }

  // optional int32 officer_grade = 11;
  if (has_officer_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->officer_grade(), target);
  }

  // optional .SProtoSpace.eWorldChatType world_chat_type = 12;
  if (has_world_chat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->world_chat_type(), target);
  }

  // optional uint64 event_data = 13;
  if (has_event_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->event_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_world_public_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_public_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string role_avatar_url = 4;
    if (has_role_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_avatar_url());
    }

    // optional uint32 world_channel_id = 5;
    if (has_world_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->world_channel_id());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 gender_id = 7;
    if (has_gender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender_id());
    }

    // optional uint32 avatar_box_id = 8;
    if (has_avatar_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_box_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 officer_grade = 11;
    if (has_officer_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officer_grade());
    }

    // optional .SProtoSpace.eWorldChatType world_chat_type = 12;
    if (has_world_chat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->world_chat_type());
    }

    // optional uint64 event_data = 13;
    if (has_event_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_data());
    }

  }
  // repeated uint64 roles_in_channel = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->roles_in_channel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->roles_in_channel(i));
    }
    total_size += 1 * this->roles_in_channel_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_world_public_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_world_public_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_world_public_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_world_public_ntf::MergeFrom(const chat_world_public_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_in_channel_.MergeFrom(from.roles_in_channel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_avatar_url()) {
      set_role_avatar_url(from.role_avatar_url());
    }
    if (from.has_world_channel_id()) {
      set_world_channel_id(from.world_channel_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gender_id()) {
      set_gender_id(from.gender_id());
    }
    if (from.has_avatar_box_id()) {
      set_avatar_box_id(from.avatar_box_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_officer_grade()) {
      set_officer_grade(from.officer_grade());
    }
    if (from.has_world_chat_type()) {
      set_world_chat_type(from.world_chat_type());
    }
    if (from.has_event_data()) {
      set_event_data(from.event_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_world_public_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_world_public_ntf::CopyFrom(const chat_world_public_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_world_public_ntf::IsInitialized() const {

  return true;
}

void chat_world_public_ntf::Swap(chat_world_public_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_avatar_url_, other->role_avatar_url_);
    std::swap(world_channel_id_, other->world_channel_id_);
    std::swap(content_, other->content_);
    std::swap(gender_id_, other->gender_id_);
    std::swap(avatar_box_id_, other->avatar_box_id_);
    std::swap(level_, other->level_);
    roles_in_channel_.Swap(&other->roles_in_channel_);
    std::swap(officer_grade_, other->officer_grade_);
    std::swap(world_chat_type_, other->world_chat_type_);
    std::swap(event_data_, other->event_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_world_public_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_world_public_ntf_descriptor_;
  metadata.reflection = chat_world_public_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_world_change_channel_public_req::kProtoidFieldNumber;
const int chat_world_change_channel_public_req::kRoleIdFieldNumber;
const int chat_world_change_channel_public_req::kOldChannelFieldNumber;
const int chat_world_change_channel_public_req::kNewChannelFieldNumber;
#endif  // !_MSC_VER

chat_world_change_channel_public_req::chat_world_change_channel_public_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_world_change_channel_public_req::InitAsDefaultInstance() {
}

chat_world_change_channel_public_req::chat_world_change_channel_public_req(const chat_world_change_channel_public_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_world_change_channel_public_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 906;
  role_id_ = GOOGLE_ULONGLONG(0);
  old_channel_ = 0u;
  new_channel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_world_change_channel_public_req::~chat_world_change_channel_public_req() {
  SharedDtor();
}

void chat_world_change_channel_public_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_world_change_channel_public_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_world_change_channel_public_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_world_change_channel_public_req_descriptor_;
}

const chat_world_change_channel_public_req& chat_world_change_channel_public_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fchat_2eproto();
  return *default_instance_;
}

chat_world_change_channel_public_req* chat_world_change_channel_public_req::default_instance_ = NULL;

chat_world_change_channel_public_req* chat_world_change_channel_public_req::New() const {
  return new chat_world_change_channel_public_req;
}

void chat_world_change_channel_public_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 906;
    role_id_ = GOOGLE_ULONGLONG(0);
    old_channel_ = 0u;
    new_channel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_world_change_channel_public_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_change_channel_public_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_old_channel;
        break;
      }

      // optional uint32 old_channel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_channel_)));
          set_has_old_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_new_channel;
        break;
      }

      // optional uint32 new_channel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_channel_)));
          set_has_new_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_world_change_channel_public_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_change_channel_public_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint32 old_channel = 3;
  if (has_old_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->old_channel(), output);
  }

  // optional uint32 new_channel = 4;
  if (has_new_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->new_channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_world_change_channel_public_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_change_channel_public_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint32 old_channel = 3;
  if (has_old_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->old_channel(), target);
  }

  // optional uint32 new_channel = 4;
  if (has_new_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->new_channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_world_change_channel_public_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_change_channel_public_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 old_channel = 3;
    if (has_old_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_channel());
    }

    // optional uint32 new_channel = 4;
    if (has_new_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_world_change_channel_public_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_world_change_channel_public_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_world_change_channel_public_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_world_change_channel_public_req::MergeFrom(const chat_world_change_channel_public_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_old_channel()) {
      set_old_channel(from.old_channel());
    }
    if (from.has_new_channel()) {
      set_new_channel(from.new_channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_world_change_channel_public_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_world_change_channel_public_req::CopyFrom(const chat_world_change_channel_public_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_world_change_channel_public_req::IsInitialized() const {

  return true;
}

void chat_world_change_channel_public_req::Swap(chat_world_change_channel_public_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(old_channel_, other->old_channel_);
    std::swap(new_channel_, other->new_channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_world_change_channel_public_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_world_change_channel_public_req_descriptor_;
  metadata.reflection = chat_world_change_channel_public_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_world_change_channel_public_ack::kProtoidFieldNumber;
const int chat_world_change_channel_public_ack::kRoleIdFieldNumber;
const int chat_world_change_channel_public_ack::kOldChannelFieldNumber;
const int chat_world_change_channel_public_ack::kNewChannelFieldNumber;
const int chat_world_change_channel_public_ack::kRecCodeFieldNumber;
#endif  // !_MSC_VER

chat_world_change_channel_public_ack::chat_world_change_channel_public_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_world_change_channel_public_ack::InitAsDefaultInstance() {
}

chat_world_change_channel_public_ack::chat_world_change_channel_public_ack(const chat_world_change_channel_public_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_world_change_channel_public_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 907;
  role_id_ = GOOGLE_ULONGLONG(0);
  old_channel_ = 0u;
  new_channel_ = 0u;
  rec_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_world_change_channel_public_ack::~chat_world_change_channel_public_ack() {
  SharedDtor();
}

void chat_world_change_channel_public_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_world_change_channel_public_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_world_change_channel_public_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_world_change_channel_public_ack_descriptor_;
}

const chat_world_change_channel_public_ack& chat_world_change_channel_public_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fchat_2eproto();
  return *default_instance_;
}

chat_world_change_channel_public_ack* chat_world_change_channel_public_ack::default_instance_ = NULL;

chat_world_change_channel_public_ack* chat_world_change_channel_public_ack::New() const {
  return new chat_world_change_channel_public_ack;
}

void chat_world_change_channel_public_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 907;
    role_id_ = GOOGLE_ULONGLONG(0);
    old_channel_ = 0u;
    new_channel_ = 0u;
    rec_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_world_change_channel_public_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_change_channel_public_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_old_channel;
        break;
      }

      // optional uint32 old_channel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_channel_)));
          set_has_old_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_new_channel;
        break;
      }

      // optional uint32 new_channel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_channel_)));
          set_has_new_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rec_code;
        break;
      }

      // optional int32 rec_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rec_code_)));
          set_has_rec_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_world_change_channel_public_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_change_channel_public_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint32 old_channel = 3;
  if (has_old_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->old_channel(), output);
  }

  // optional uint32 new_channel = 4;
  if (has_new_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->new_channel(), output);
  }

  // optional int32 rec_code = 5;
  if (has_rec_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rec_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_world_change_channel_public_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_change_channel_public_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint32 old_channel = 3;
  if (has_old_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->old_channel(), target);
  }

  // optional uint32 new_channel = 4;
  if (has_new_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->new_channel(), target);
  }

  // optional int32 rec_code = 5;
  if (has_rec_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rec_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_world_change_channel_public_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_change_channel_public_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 old_channel = 3;
    if (has_old_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_channel());
    }

    // optional uint32 new_channel = 4;
    if (has_new_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_channel());
    }

    // optional int32 rec_code = 5;
    if (has_rec_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rec_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_world_change_channel_public_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_world_change_channel_public_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_world_change_channel_public_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_world_change_channel_public_ack::MergeFrom(const chat_world_change_channel_public_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_old_channel()) {
      set_old_channel(from.old_channel());
    }
    if (from.has_new_channel()) {
      set_new_channel(from.new_channel());
    }
    if (from.has_rec_code()) {
      set_rec_code(from.rec_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_world_change_channel_public_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_world_change_channel_public_ack::CopyFrom(const chat_world_change_channel_public_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_world_change_channel_public_ack::IsInitialized() const {

  return true;
}

void chat_world_change_channel_public_ack::Swap(chat_world_change_channel_public_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(old_channel_, other->old_channel_);
    std::swap(new_channel_, other->new_channel_);
    std::swap(rec_code_, other->rec_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_world_change_channel_public_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_world_change_channel_public_ack_descriptor_;
  metadata.reflection = chat_world_change_channel_public_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_world_random_channel_public_req::kProtoidFieldNumber;
const int chat_world_random_channel_public_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

chat_world_random_channel_public_req::chat_world_random_channel_public_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_world_random_channel_public_req::InitAsDefaultInstance() {
}

chat_world_random_channel_public_req::chat_world_random_channel_public_req(const chat_world_random_channel_public_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_world_random_channel_public_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 908;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_world_random_channel_public_req::~chat_world_random_channel_public_req() {
  SharedDtor();
}

void chat_world_random_channel_public_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_world_random_channel_public_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_world_random_channel_public_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_world_random_channel_public_req_descriptor_;
}

const chat_world_random_channel_public_req& chat_world_random_channel_public_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fchat_2eproto();
  return *default_instance_;
}

chat_world_random_channel_public_req* chat_world_random_channel_public_req::default_instance_ = NULL;

chat_world_random_channel_public_req* chat_world_random_channel_public_req::New() const {
  return new chat_world_random_channel_public_req;
}

void chat_world_random_channel_public_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 908;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_world_random_channel_public_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_random_channel_public_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_world_random_channel_public_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_random_channel_public_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_world_random_channel_public_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_random_channel_public_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_world_random_channel_public_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_random_channel_public_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_world_random_channel_public_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_world_random_channel_public_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_world_random_channel_public_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_world_random_channel_public_req::MergeFrom(const chat_world_random_channel_public_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_world_random_channel_public_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_world_random_channel_public_req::CopyFrom(const chat_world_random_channel_public_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_world_random_channel_public_req::IsInitialized() const {

  return true;
}

void chat_world_random_channel_public_req::Swap(chat_world_random_channel_public_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_world_random_channel_public_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_world_random_channel_public_req_descriptor_;
  metadata.reflection = chat_world_random_channel_public_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_world_random_channel_public_ack::kProtoidFieldNumber;
const int chat_world_random_channel_public_ack::kRoleIdFieldNumber;
const int chat_world_random_channel_public_ack::kNewChannelFieldNumber;
const int chat_world_random_channel_public_ack::kRecCodeFieldNumber;
#endif  // !_MSC_VER

chat_world_random_channel_public_ack::chat_world_random_channel_public_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_world_random_channel_public_ack::InitAsDefaultInstance() {
}

chat_world_random_channel_public_ack::chat_world_random_channel_public_ack(const chat_world_random_channel_public_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_world_random_channel_public_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 909;
  role_id_ = GOOGLE_ULONGLONG(0);
  new_channel_ = 0u;
  rec_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_world_random_channel_public_ack::~chat_world_random_channel_public_ack() {
  SharedDtor();
}

void chat_world_random_channel_public_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_world_random_channel_public_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_world_random_channel_public_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_world_random_channel_public_ack_descriptor_;
}

const chat_world_random_channel_public_ack& chat_world_random_channel_public_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fchat_2eproto();
  return *default_instance_;
}

chat_world_random_channel_public_ack* chat_world_random_channel_public_ack::default_instance_ = NULL;

chat_world_random_channel_public_ack* chat_world_random_channel_public_ack::New() const {
  return new chat_world_random_channel_public_ack;
}

void chat_world_random_channel_public_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 909;
    role_id_ = GOOGLE_ULONGLONG(0);
    new_channel_ = 0u;
    rec_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_world_random_channel_public_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_random_channel_public_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_channel;
        break;
      }

      // optional uint32 new_channel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_channel_)));
          set_has_new_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rec_code;
        break;
      }

      // optional int32 rec_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rec_code_)));
          set_has_rec_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_world_random_channel_public_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_random_channel_public_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint32 new_channel = 3;
  if (has_new_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->new_channel(), output);
  }

  // optional int32 rec_code = 4;
  if (has_rec_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rec_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_world_random_channel_public_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_random_channel_public_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint32 new_channel = 3;
  if (has_new_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->new_channel(), target);
  }

  // optional int32 rec_code = 4;
  if (has_rec_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rec_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_world_random_channel_public_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_random_channel_public_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 new_channel = 3;
    if (has_new_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_channel());
    }

    // optional int32 rec_code = 4;
    if (has_rec_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rec_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_world_random_channel_public_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_world_random_channel_public_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_world_random_channel_public_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_world_random_channel_public_ack::MergeFrom(const chat_world_random_channel_public_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_new_channel()) {
      set_new_channel(from.new_channel());
    }
    if (from.has_rec_code()) {
      set_rec_code(from.rec_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_world_random_channel_public_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_world_random_channel_public_ack::CopyFrom(const chat_world_random_channel_public_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_world_random_channel_public_ack::IsInitialized() const {

  return true;
}

void chat_world_random_channel_public_ack::Swap(chat_world_random_channel_public_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(new_channel_, other->new_channel_);
    std::swap(rec_code_, other->rec_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_world_random_channel_public_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_world_random_channel_public_ack_descriptor_;
  metadata.reflection = chat_world_random_channel_public_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_private_public_ntf::kProtoidFieldNumber;
const int chat_private_public_ntf::kToRoleIdFieldNumber;
const int chat_private_public_ntf::kRoleNameFieldNumber;
const int chat_private_public_ntf::kRoleAvatarUrlFieldNumber;
const int chat_private_public_ntf::kFromRoleIdFieldNumber;
const int chat_private_public_ntf::kContentFieldNumber;
const int chat_private_public_ntf::kGenderIdFieldNumber;
const int chat_private_public_ntf::kAvatarBoxIdFieldNumber;
const int chat_private_public_ntf::kLevelFieldNumber;
const int chat_private_public_ntf::kOfficerGradeFieldNumber;
#endif  // !_MSC_VER

chat_private_public_ntf::chat_private_public_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_private_public_ntf::InitAsDefaultInstance() {
}

chat_private_public_ntf::chat_private_public_ntf(const chat_private_public_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_private_public_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 901;
  to_role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_role_id_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_id_ = 0;
  avatar_box_id_ = 0u;
  level_ = 0;
  officer_grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_private_public_ntf::~chat_private_public_ntf() {
  SharedDtor();
}

void chat_private_public_ntf::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void chat_private_public_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_private_public_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_private_public_ntf_descriptor_;
}

const chat_private_public_ntf& chat_private_public_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fchat_2eproto();
  return *default_instance_;
}

chat_private_public_ntf* chat_private_public_ntf::default_instance_ = NULL;

chat_private_public_ntf* chat_private_public_ntf::New() const {
  return new chat_private_public_ntf;
}

void chat_private_public_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 901;
    to_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_role_avatar_url()) {
      if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        role_avatar_url_->clear();
      }
    }
    from_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    gender_id_ = 0;
    avatar_box_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    officer_grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_private_public_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_private_public_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to_role_id;
        break;
      }

      // optional uint64 to_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_role_id_)));
          set_has_to_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_avatar_url;
        break;
      }

      // optional string role_avatar_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_avatar_url().data(), this->role_avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_from_role_id;
        break;
      }

      // optional uint64 from_role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_role_id_)));
          set_has_from_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gender_id;
        break;
      }

      // optional int32 gender_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_id_)));
          set_has_gender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_avatar_box_id;
        break;
      }

      // optional uint32 avatar_box_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_box_id_)));
          set_has_avatar_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_officer_grade;
        break;
      }

      // optional int32 officer_grade = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officer_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officer_grade_)));
          set_has_officer_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_private_public_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_private_public_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 to_role_id = 2;
  if (has_to_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to_role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_avatar_url(), output);
  }

  // optional uint64 from_role_id = 5;
  if (has_from_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->from_role_id(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gender_id(), output);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avatar_box_id(), output);
  }

  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional int32 officer_grade = 10;
  if (has_officer_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->officer_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_private_public_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_private_public_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 to_role_id = 2;
  if (has_to_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->to_role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_avatar_url(), target);
  }

  // optional uint64 from_role_id = 5;
  if (has_from_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->from_role_id(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gender_id(), target);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avatar_box_id(), target);
  }

  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional int32 officer_grade = 10;
  if (has_officer_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->officer_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_private_public_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_private_public_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 to_role_id = 2;
    if (has_to_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string role_avatar_url = 4;
    if (has_role_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_avatar_url());
    }

    // optional uint64 from_role_id = 5;
    if (has_from_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_role_id());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 gender_id = 7;
    if (has_gender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender_id());
    }

    // optional uint32 avatar_box_id = 8;
    if (has_avatar_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_box_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 officer_grade = 10;
    if (has_officer_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officer_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_private_public_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_private_public_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_private_public_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_private_public_ntf::MergeFrom(const chat_private_public_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_to_role_id()) {
      set_to_role_id(from.to_role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_avatar_url()) {
      set_role_avatar_url(from.role_avatar_url());
    }
    if (from.has_from_role_id()) {
      set_from_role_id(from.from_role_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gender_id()) {
      set_gender_id(from.gender_id());
    }
    if (from.has_avatar_box_id()) {
      set_avatar_box_id(from.avatar_box_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_officer_grade()) {
      set_officer_grade(from.officer_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_private_public_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_private_public_ntf::CopyFrom(const chat_private_public_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_private_public_ntf::IsInitialized() const {

  return true;
}

void chat_private_public_ntf::Swap(chat_private_public_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(to_role_id_, other->to_role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_avatar_url_, other->role_avatar_url_);
    std::swap(from_role_id_, other->from_role_id_);
    std::swap(content_, other->content_);
    std::swap(gender_id_, other->gender_id_);
    std::swap(avatar_box_id_, other->avatar_box_id_);
    std::swap(level_, other->level_);
    std::swap(officer_grade_, other->officer_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_private_public_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_private_public_ntf_descriptor_;
  metadata.reflection = chat_private_public_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_team_public_ntf::kProtoidFieldNumber;
const int chat_team_public_ntf::kRoleIdFieldNumber;
const int chat_team_public_ntf::kRoleNameFieldNumber;
const int chat_team_public_ntf::kRoleAvatarUrlFieldNumber;
const int chat_team_public_ntf::kTeamIdFieldNumber;
const int chat_team_public_ntf::kContentFieldNumber;
const int chat_team_public_ntf::kGenderIdFieldNumber;
const int chat_team_public_ntf::kAvatarBoxIdFieldNumber;
const int chat_team_public_ntf::kLevelFieldNumber;
const int chat_team_public_ntf::kRolesInTeamFieldNumber;
const int chat_team_public_ntf::kOfficerGradeFieldNumber;
#endif  // !_MSC_VER

chat_team_public_ntf::chat_team_public_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_team_public_ntf::InitAsDefaultInstance() {
}

chat_team_public_ntf::chat_team_public_ntf(const chat_team_public_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_team_public_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 902;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_id_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_id_ = 0;
  avatar_box_id_ = 0u;
  level_ = 0;
  officer_grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_team_public_ntf::~chat_team_public_ntf() {
  SharedDtor();
}

void chat_team_public_ntf::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void chat_team_public_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_team_public_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_team_public_ntf_descriptor_;
}

const chat_team_public_ntf& chat_team_public_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fchat_2eproto();
  return *default_instance_;
}

chat_team_public_ntf* chat_team_public_ntf::default_instance_ = NULL;

chat_team_public_ntf* chat_team_public_ntf::New() const {
  return new chat_team_public_ntf;
}

void chat_team_public_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 902;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_role_avatar_url()) {
      if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        role_avatar_url_->clear();
      }
    }
    team_id_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    gender_id_ = 0;
    avatar_box_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    officer_grade_ = 0;
  }
  roles_in_team_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_team_public_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_team_public_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_avatar_url;
        break;
      }

      // optional string role_avatar_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_avatar_url().data(), this->role_avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gender_id;
        break;
      }

      // optional int32 gender_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_id_)));
          set_has_gender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_avatar_box_id;
        break;
      }

      // optional uint32 avatar_box_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_box_id_)));
          set_has_avatar_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_roles_in_team;
        break;
      }

      // repeated uint64 roles_in_team = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roles_in_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 80, input, this->mutable_roles_in_team())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_roles_in_team())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_roles_in_team;
        if (input->ExpectTag(88)) goto parse_officer_grade;
        break;
      }

      // optional int32 officer_grade = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officer_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officer_grade_)));
          set_has_officer_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_team_public_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_team_public_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_avatar_url(), output);
  }

  // optional uint32 team_id = 5;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_id(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gender_id(), output);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avatar_box_id(), output);
  }

  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // repeated uint64 roles_in_team = 10;
  for (int i = 0; i < this->roles_in_team_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      10, this->roles_in_team(i), output);
  }

  // optional int32 officer_grade = 11;
  if (has_officer_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->officer_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_team_public_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_team_public_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_avatar_url(), target);
  }

  // optional uint32 team_id = 5;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_id(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gender_id(), target);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avatar_box_id(), target);
  }

  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // repeated uint64 roles_in_team = 10;
  for (int i = 0; i < this->roles_in_team_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(10, this->roles_in_team(i), target);
  }

  // optional int32 officer_grade = 11;
  if (has_officer_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->officer_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_team_public_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_team_public_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string role_avatar_url = 4;
    if (has_role_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_avatar_url());
    }

    // optional uint32 team_id = 5;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 gender_id = 7;
    if (has_gender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender_id());
    }

    // optional uint32 avatar_box_id = 8;
    if (has_avatar_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_box_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 officer_grade = 11;
    if (has_officer_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officer_grade());
    }

  }
  // repeated uint64 roles_in_team = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->roles_in_team_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->roles_in_team(i));
    }
    total_size += 1 * this->roles_in_team_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_team_public_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_team_public_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_team_public_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_team_public_ntf::MergeFrom(const chat_team_public_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_in_team_.MergeFrom(from.roles_in_team_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_avatar_url()) {
      set_role_avatar_url(from.role_avatar_url());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gender_id()) {
      set_gender_id(from.gender_id());
    }
    if (from.has_avatar_box_id()) {
      set_avatar_box_id(from.avatar_box_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_officer_grade()) {
      set_officer_grade(from.officer_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_team_public_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_team_public_ntf::CopyFrom(const chat_team_public_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_team_public_ntf::IsInitialized() const {

  return true;
}

void chat_team_public_ntf::Swap(chat_team_public_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_avatar_url_, other->role_avatar_url_);
    std::swap(team_id_, other->team_id_);
    std::swap(content_, other->content_);
    std::swap(gender_id_, other->gender_id_);
    std::swap(avatar_box_id_, other->avatar_box_id_);
    std::swap(level_, other->level_);
    roles_in_team_.Swap(&other->roles_in_team_);
    std::swap(officer_grade_, other->officer_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_team_public_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_team_public_ntf_descriptor_;
  metadata.reflection = chat_team_public_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_family_public_ntf::kProtoidFieldNumber;
const int chat_family_public_ntf::kRoleIdFieldNumber;
const int chat_family_public_ntf::kRoleNameFieldNumber;
const int chat_family_public_ntf::kRoleAvatarUrlFieldNumber;
const int chat_family_public_ntf::kFamilyIdFieldNumber;
const int chat_family_public_ntf::kContentFieldNumber;
const int chat_family_public_ntf::kGenderIdFieldNumber;
const int chat_family_public_ntf::kAvatarBoxIdFieldNumber;
const int chat_family_public_ntf::kLevelFieldNumber;
const int chat_family_public_ntf::kRolesInFamilyFieldNumber;
const int chat_family_public_ntf::kOfficerGradeFieldNumber;
#endif  // !_MSC_VER

chat_family_public_ntf::chat_family_public_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_family_public_ntf::InitAsDefaultInstance() {
}

chat_family_public_ntf::chat_family_public_ntf(const chat_family_public_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_family_public_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 903;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  family_id_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_id_ = 0;
  avatar_box_id_ = 0u;
  level_ = 0;
  officer_grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_family_public_ntf::~chat_family_public_ntf() {
  SharedDtor();
}

void chat_family_public_ntf::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void chat_family_public_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_family_public_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_family_public_ntf_descriptor_;
}

const chat_family_public_ntf& chat_family_public_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fchat_2eproto();
  return *default_instance_;
}

chat_family_public_ntf* chat_family_public_ntf::default_instance_ = NULL;

chat_family_public_ntf* chat_family_public_ntf::New() const {
  return new chat_family_public_ntf;
}

void chat_family_public_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 903;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_role_avatar_url()) {
      if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        role_avatar_url_->clear();
      }
    }
    family_id_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    gender_id_ = 0;
    avatar_box_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    officer_grade_ = 0;
  }
  roles_in_family_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_family_public_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_family_public_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_avatar_url;
        break;
      }

      // optional string role_avatar_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_avatar_url().data(), this->role_avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_family_id;
        break;
      }

      // optional uint32 family_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gender_id;
        break;
      }

      // optional int32 gender_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_id_)));
          set_has_gender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_avatar_box_id;
        break;
      }

      // optional uint32 avatar_box_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_box_id_)));
          set_has_avatar_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_roles_in_family;
        break;
      }

      // repeated uint64 roles_in_family = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roles_in_family:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 80, input, this->mutable_roles_in_family())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_roles_in_family())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_roles_in_family;
        if (input->ExpectTag(88)) goto parse_officer_grade;
        break;
      }

      // optional int32 officer_grade = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officer_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officer_grade_)));
          set_has_officer_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_family_public_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_family_public_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_avatar_url(), output);
  }

  // optional uint32 family_id = 5;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->family_id(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gender_id(), output);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avatar_box_id(), output);
  }

  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // repeated uint64 roles_in_family = 10;
  for (int i = 0; i < this->roles_in_family_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      10, this->roles_in_family(i), output);
  }

  // optional int32 officer_grade = 11;
  if (has_officer_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->officer_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_family_public_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_family_public_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_avatar_url(), target);
  }

  // optional uint32 family_id = 5;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->family_id(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gender_id(), target);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avatar_box_id(), target);
  }

  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // repeated uint64 roles_in_family = 10;
  for (int i = 0; i < this->roles_in_family_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(10, this->roles_in_family(i), target);
  }

  // optional int32 officer_grade = 11;
  if (has_officer_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->officer_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_family_public_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_family_public_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string role_avatar_url = 4;
    if (has_role_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_avatar_url());
    }

    // optional uint32 family_id = 5;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 gender_id = 7;
    if (has_gender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender_id());
    }

    // optional uint32 avatar_box_id = 8;
    if (has_avatar_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_box_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 officer_grade = 11;
    if (has_officer_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officer_grade());
    }

  }
  // repeated uint64 roles_in_family = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->roles_in_family_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->roles_in_family(i));
    }
    total_size += 1 * this->roles_in_family_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_family_public_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_family_public_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_family_public_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_family_public_ntf::MergeFrom(const chat_family_public_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_in_family_.MergeFrom(from.roles_in_family_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_avatar_url()) {
      set_role_avatar_url(from.role_avatar_url());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gender_id()) {
      set_gender_id(from.gender_id());
    }
    if (from.has_avatar_box_id()) {
      set_avatar_box_id(from.avatar_box_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_officer_grade()) {
      set_officer_grade(from.officer_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_family_public_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_family_public_ntf::CopyFrom(const chat_family_public_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_family_public_ntf::IsInitialized() const {

  return true;
}

void chat_family_public_ntf::Swap(chat_family_public_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_avatar_url_, other->role_avatar_url_);
    std::swap(family_id_, other->family_id_);
    std::swap(content_, other->content_);
    std::swap(gender_id_, other->gender_id_);
    std::swap(avatar_box_id_, other->avatar_box_id_);
    std::swap(level_, other->level_);
    roles_in_family_.Swap(&other->roles_in_family_);
    std::swap(officer_grade_, other->officer_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_family_public_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_family_public_ntf_descriptor_;
  metadata.reflection = chat_family_public_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_broadcast_public_ntf::kProtoidFieldNumber;
const int chat_broadcast_public_ntf::kToRoleIdFieldNumber;
const int chat_broadcast_public_ntf::kRoleNameFieldNumber;
const int chat_broadcast_public_ntf::kRoleAvatarUrlFieldNumber;
const int chat_broadcast_public_ntf::kFromRoleIdFieldNumber;
const int chat_broadcast_public_ntf::kContentFieldNumber;
const int chat_broadcast_public_ntf::kGenderIdFieldNumber;
const int chat_broadcast_public_ntf::kAvatarBoxIdFieldNumber;
const int chat_broadcast_public_ntf::kLevelFieldNumber;
const int chat_broadcast_public_ntf::kOfficerGradeFieldNumber;
#endif  // !_MSC_VER

chat_broadcast_public_ntf::chat_broadcast_public_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_broadcast_public_ntf::InitAsDefaultInstance() {
}

chat_broadcast_public_ntf::chat_broadcast_public_ntf(const chat_broadcast_public_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_broadcast_public_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 905;
  to_role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_role_id_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_id_ = 0;
  avatar_box_id_ = 0u;
  level_ = 0;
  officer_grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_broadcast_public_ntf::~chat_broadcast_public_ntf() {
  SharedDtor();
}

void chat_broadcast_public_ntf::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete role_avatar_url_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void chat_broadcast_public_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_broadcast_public_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_broadcast_public_ntf_descriptor_;
}

const chat_broadcast_public_ntf& chat_broadcast_public_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fchat_2eproto();
  return *default_instance_;
}

chat_broadcast_public_ntf* chat_broadcast_public_ntf::default_instance_ = NULL;

chat_broadcast_public_ntf* chat_broadcast_public_ntf::New() const {
  return new chat_broadcast_public_ntf;
}

void chat_broadcast_public_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 905;
    to_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_role_avatar_url()) {
      if (role_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        role_avatar_url_->clear();
      }
    }
    from_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    gender_id_ = 0;
    avatar_box_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    officer_grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_broadcast_public_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_broadcast_public_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to_role_id;
        break;
      }

      // optional uint64 to_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_role_id_)));
          set_has_to_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_avatar_url;
        break;
      }

      // optional string role_avatar_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_avatar_url().data(), this->role_avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_from_role_id;
        break;
      }

      // optional uint64 from_role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_role_id_)));
          set_has_from_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gender_id;
        break;
      }

      // optional int32 gender_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_id_)));
          set_has_gender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_avatar_box_id;
        break;
      }

      // optional uint32 avatar_box_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_box_id_)));
          set_has_avatar_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_officer_grade;
        break;
      }

      // optional int32 officer_grade = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officer_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officer_grade_)));
          set_has_officer_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_broadcast_public_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_broadcast_public_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 to_role_id = 2;
  if (has_to_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to_role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_avatar_url(), output);
  }

  // optional uint64 from_role_id = 5;
  if (has_from_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->from_role_id(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gender_id(), output);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avatar_box_id(), output);
  }

  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional int32 officer_grade = 10;
  if (has_officer_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->officer_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_broadcast_public_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_broadcast_public_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 to_role_id = 2;
  if (has_to_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->to_role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional string role_avatar_url = 4;
  if (has_role_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_avatar_url().data(), this->role_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_avatar_url(), target);
  }

  // optional uint64 from_role_id = 5;
  if (has_from_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->from_role_id(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional int32 gender_id = 7;
  if (has_gender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gender_id(), target);
  }

  // optional uint32 avatar_box_id = 8;
  if (has_avatar_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avatar_box_id(), target);
  }

  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional int32 officer_grade = 10;
  if (has_officer_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->officer_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_broadcast_public_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_broadcast_public_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 to_role_id = 2;
    if (has_to_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string role_avatar_url = 4;
    if (has_role_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_avatar_url());
    }

    // optional uint64 from_role_id = 5;
    if (has_from_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_role_id());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 gender_id = 7;
    if (has_gender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender_id());
    }

    // optional uint32 avatar_box_id = 8;
    if (has_avatar_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar_box_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 officer_grade = 10;
    if (has_officer_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officer_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_broadcast_public_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_broadcast_public_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_broadcast_public_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_broadcast_public_ntf::MergeFrom(const chat_broadcast_public_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_to_role_id()) {
      set_to_role_id(from.to_role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_avatar_url()) {
      set_role_avatar_url(from.role_avatar_url());
    }
    if (from.has_from_role_id()) {
      set_from_role_id(from.from_role_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gender_id()) {
      set_gender_id(from.gender_id());
    }
    if (from.has_avatar_box_id()) {
      set_avatar_box_id(from.avatar_box_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_officer_grade()) {
      set_officer_grade(from.officer_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_broadcast_public_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_broadcast_public_ntf::CopyFrom(const chat_broadcast_public_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_broadcast_public_ntf::IsInitialized() const {

  return true;
}

void chat_broadcast_public_ntf::Swap(chat_broadcast_public_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(to_role_id_, other->to_role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_avatar_url_, other->role_avatar_url_);
    std::swap(from_role_id_, other->from_role_id_);
    std::swap(content_, other->content_);
    std::swap(gender_id_, other->gender_id_);
    std::swap(avatar_box_id_, other->avatar_box_id_);
    std::swap(level_, other->level_);
    std::swap(officer_grade_, other->officer_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_broadcast_public_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_broadcast_public_ntf_descriptor_;
  metadata.reflection = chat_broadcast_public_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_world_channel_ntf_one_role::kRoleIdFieldNumber;
const int chat_world_channel_ntf_one_role::kChannelIdFieldNumber;
#endif  // !_MSC_VER

chat_world_channel_ntf_one_role::chat_world_channel_ntf_one_role()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_world_channel_ntf_one_role::InitAsDefaultInstance() {
}

chat_world_channel_ntf_one_role::chat_world_channel_ntf_one_role(const chat_world_channel_ntf_one_role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_world_channel_ntf_one_role::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  channel_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_world_channel_ntf_one_role::~chat_world_channel_ntf_one_role() {
  SharedDtor();
}

void chat_world_channel_ntf_one_role::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_world_channel_ntf_one_role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_world_channel_ntf_one_role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_world_channel_ntf_one_role_descriptor_;
}

const chat_world_channel_ntf_one_role& chat_world_channel_ntf_one_role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fchat_2eproto();
  return *default_instance_;
}

chat_world_channel_ntf_one_role* chat_world_channel_ntf_one_role::default_instance_ = NULL;

chat_world_channel_ntf_one_role* chat_world_channel_ntf_one_role::New() const {
  return new chat_world_channel_ntf_one_role;
}

void chat_world_channel_ntf_one_role::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    channel_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_world_channel_ntf_one_role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_world_channel_ntf_one_role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_world_channel_ntf_one_role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_world_channel_ntf_one_role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_world_channel_ntf_one_role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_world_channel_ntf_one_role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_world_channel_ntf_one_role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_world_channel_ntf_one_role::MergeFrom(const chat_world_channel_ntf_one_role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_world_channel_ntf_one_role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_world_channel_ntf_one_role::CopyFrom(const chat_world_channel_ntf_one_role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_world_channel_ntf_one_role::IsInitialized() const {

  return true;
}

void chat_world_channel_ntf_one_role::Swap(chat_world_channel_ntf_one_role* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_world_channel_ntf_one_role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_world_channel_ntf_one_role_descriptor_;
  metadata.reflection = chat_world_channel_ntf_one_role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chat_world_channel_ntf::kProtoidFieldNumber;
const int chat_world_channel_ntf::kRolesFieldNumber;
#endif  // !_MSC_VER

chat_world_channel_ntf::chat_world_channel_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chat_world_channel_ntf::InitAsDefaultInstance() {
}

chat_world_channel_ntf::chat_world_channel_ntf(const chat_world_channel_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chat_world_channel_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 910;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chat_world_channel_ntf::~chat_world_channel_ntf() {
  SharedDtor();
}

void chat_world_channel_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chat_world_channel_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_world_channel_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chat_world_channel_ntf_descriptor_;
}

const chat_world_channel_ntf& chat_world_channel_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fchat_2eproto();
  return *default_instance_;
}

chat_world_channel_ntf* chat_world_channel_ntf::default_instance_ = NULL;

chat_world_channel_ntf* chat_world_channel_ntf::New() const {
  return new chat_world_channel_ntf;
}

void chat_world_channel_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 910;
  }
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chat_world_channel_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_channel_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        break;
      }

      // repeated .SProtoSpace.chat_world_channel_ntf_one_role roles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chat_world_channel_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_channel_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.chat_world_channel_ntf_one_role roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chat_world_channel_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_channel_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.chat_world_channel_ntf_one_role roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chat_world_channel_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = chat_world_channel_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.chat_world_channel_ntf_one_role roles = 2;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_world_channel_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chat_world_channel_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chat_world_channel_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chat_world_channel_ntf::MergeFrom(const chat_world_channel_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chat_world_channel_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_world_channel_ntf::CopyFrom(const chat_world_channel_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_world_channel_ntf::IsInitialized() const {

  return true;
}

void chat_world_channel_ntf::Swap(chat_world_channel_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    roles_.Swap(&other->roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chat_world_channel_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chat_world_channel_ntf_descriptor_;
  metadata.reflection = chat_world_channel_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int barrage_get_ss_req::kProtoidFieldNumber;
const int barrage_get_ss_req::kStorageIdFieldNumber;
const int barrage_get_ss_req::kDesintyFieldNumber;
const int barrage_get_ss_req::kRoleIdFieldNumber;
const int barrage_get_ss_req::kStartFieldNumber;
const int barrage_get_ss_req::kEndFieldNumber;
#endif  // !_MSC_VER

barrage_get_ss_req::barrage_get_ss_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void barrage_get_ss_req::InitAsDefaultInstance() {
}

barrage_get_ss_req::barrage_get_ss_req(const barrage_get_ss_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void barrage_get_ss_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1820;
  desinty_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  start_ = 0;
  end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

barrage_get_ss_req::~barrage_get_ss_req() {
  SharedDtor();
}

void barrage_get_ss_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void barrage_get_ss_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* barrage_get_ss_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return barrage_get_ss_req_descriptor_;
}

const barrage_get_ss_req& barrage_get_ss_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fchat_2eproto();
  return *default_instance_;
}

barrage_get_ss_req* barrage_get_ss_req::default_instance_ = NULL;

barrage_get_ss_req* barrage_get_ss_req::New() const {
  return new barrage_get_ss_req;
}

void barrage_get_ss_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1820;
    desinty_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    start_ = 0;
    end_ = 0;
  }
  storage_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool barrage_get_ss_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_get_ss_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_storage_id;
        break;
      }

      // repeated int32 storage_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_storage_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_storage_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_storage_id;
        if (input->ExpectTag(24)) goto parse_desinty;
        break;
      }

      // optional int32 desinty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desinty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desinty_)));
          set_has_desinty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_start;
        break;
      }

      // optional int32 start = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_end;
        break;
      }

      // optional int32 end = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void barrage_get_ss_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_get_ss_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated int32 storage_id = 2;
  for (int i = 0; i < this->storage_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->storage_id(i), output);
  }

  // optional int32 desinty = 3;
  if (has_desinty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->desinty(), output);
  }

  // optional uint64 role_id = 4;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->role_id(), output);
  }

  // optional int32 start = 5;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->start(), output);
  }

  // optional int32 end = 6;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* barrage_get_ss_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_get_ss_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated int32 storage_id = 2;
  for (int i = 0; i < this->storage_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->storage_id(i), target);
  }

  // optional int32 desinty = 3;
  if (has_desinty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->desinty(), target);
  }

  // optional uint64 role_id = 4;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->role_id(), target);
  }

  // optional int32 start = 5;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->start(), target);
  }

  // optional int32 end = 6;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int barrage_get_ss_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_get_ss_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 desinty = 3;
    if (has_desinty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desinty());
    }

    // optional uint64 role_id = 4;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 start = 5;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start());
    }

    // optional int32 end = 6;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end());
    }

  }
  // repeated int32 storage_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->storage_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->storage_id(i));
    }
    total_size += 1 * this->storage_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void barrage_get_ss_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const barrage_get_ss_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const barrage_get_ss_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void barrage_get_ss_req::MergeFrom(const barrage_get_ss_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  storage_id_.MergeFrom(from.storage_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_desinty()) {
      set_desinty(from.desinty());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void barrage_get_ss_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void barrage_get_ss_req::CopyFrom(const barrage_get_ss_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool barrage_get_ss_req::IsInitialized() const {

  return true;
}

void barrage_get_ss_req::Swap(barrage_get_ss_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    storage_id_.Swap(&other->storage_id_);
    std::swap(desinty_, other->desinty_);
    std::swap(role_id_, other->role_id_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata barrage_get_ss_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = barrage_get_ss_req_descriptor_;
  metadata.reflection = barrage_get_ss_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int barrage_get_ss_ack::kProtoidFieldNumber;
const int barrage_get_ss_ack::kDesintyFieldNumber;
const int barrage_get_ss_ack::kBarrageSFieldNumber;
const int barrage_get_ss_ack::kRoleIdFieldNumber;
#endif  // !_MSC_VER

barrage_get_ss_ack::barrage_get_ss_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void barrage_get_ss_ack::InitAsDefaultInstance() {
  barrage_s_ = const_cast< ::SProtoSpace::barrage_pack*>(&::SProtoSpace::barrage_pack::default_instance());
}

barrage_get_ss_ack::barrage_get_ss_ack(const barrage_get_ss_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void barrage_get_ss_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1821;
  desinty_ = 0;
  barrage_s_ = NULL;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

barrage_get_ss_ack::~barrage_get_ss_ack() {
  SharedDtor();
}

void barrage_get_ss_ack::SharedDtor() {
  if (this != default_instance_) {
    delete barrage_s_;
  }
}

void barrage_get_ss_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* barrage_get_ss_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return barrage_get_ss_ack_descriptor_;
}

const barrage_get_ss_ack& barrage_get_ss_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fchat_2eproto();
  return *default_instance_;
}

barrage_get_ss_ack* barrage_get_ss_ack::default_instance_ = NULL;

barrage_get_ss_ack* barrage_get_ss_ack::New() const {
  return new barrage_get_ss_ack;
}

void barrage_get_ss_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1821;
    desinty_ = 0;
    if (has_barrage_s()) {
      if (barrage_s_ != NULL) barrage_s_->::SProtoSpace::barrage_pack::Clear();
    }
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool barrage_get_ss_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_get_ss_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_desinty;
        break;
      }

      // optional int32 desinty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desinty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desinty_)));
          set_has_desinty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_barrage_s;
        break;
      }

      // optional .SProtoSpace.barrage_pack barrage_s = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_barrage_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_barrage_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void barrage_get_ss_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_get_ss_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 desinty = 2;
  if (has_desinty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->desinty(), output);
  }

  // optional .SProtoSpace.barrage_pack barrage_s = 3;
  if (has_barrage_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->barrage_s(), output);
  }

  // optional uint64 role_id = 4;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* barrage_get_ss_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_get_ss_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 desinty = 2;
  if (has_desinty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->desinty(), target);
  }

  // optional .SProtoSpace.barrage_pack barrage_s = 3;
  if (has_barrage_s()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->barrage_s(), target);
  }

  // optional uint64 role_id = 4;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int barrage_get_ss_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_get_ss_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 desinty = 2;
    if (has_desinty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desinty());
    }

    // optional .SProtoSpace.barrage_pack barrage_s = 3;
    if (has_barrage_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->barrage_s());
    }

    // optional uint64 role_id = 4;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void barrage_get_ss_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const barrage_get_ss_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const barrage_get_ss_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void barrage_get_ss_ack::MergeFrom(const barrage_get_ss_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_desinty()) {
      set_desinty(from.desinty());
    }
    if (from.has_barrage_s()) {
      mutable_barrage_s()->::SProtoSpace::barrage_pack::MergeFrom(from.barrage_s());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void barrage_get_ss_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void barrage_get_ss_ack::CopyFrom(const barrage_get_ss_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool barrage_get_ss_ack::IsInitialized() const {

  return true;
}

void barrage_get_ss_ack::Swap(barrage_get_ss_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(desinty_, other->desinty_);
    std::swap(barrage_s_, other->barrage_s_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata barrage_get_ss_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = barrage_get_ss_ack_descriptor_;
  metadata.reflection = barrage_get_ss_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int barrage_send_ss_req::kProtoidFieldNumber;
const int barrage_send_ss_req::kStorageIdFieldNumber;
const int barrage_send_ss_req::kBarrageFieldNumber;
const int barrage_send_ss_req::kRoleIdFieldNumber;
const int barrage_send_ss_req::kRoleInfoFieldNumber;
#endif  // !_MSC_VER

barrage_send_ss_req::barrage_send_ss_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void barrage_send_ss_req::InitAsDefaultInstance() {
  barrage_ = const_cast< ::SProtoSpace::barrage_single*>(&::SProtoSpace::barrage_single::default_instance());
  role_info_ = const_cast< ::SProtoSpace::barrage_role_info*>(&::SProtoSpace::barrage_role_info::default_instance());
}

barrage_send_ss_req::barrage_send_ss_req(const barrage_send_ss_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void barrage_send_ss_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1822;
  barrage_ = NULL;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

barrage_send_ss_req::~barrage_send_ss_req() {
  SharedDtor();
}

void barrage_send_ss_req::SharedDtor() {
  if (this != default_instance_) {
    delete barrage_;
    delete role_info_;
  }
}

void barrage_send_ss_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* barrage_send_ss_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return barrage_send_ss_req_descriptor_;
}

const barrage_send_ss_req& barrage_send_ss_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fchat_2eproto();
  return *default_instance_;
}

barrage_send_ss_req* barrage_send_ss_req::default_instance_ = NULL;

barrage_send_ss_req* barrage_send_ss_req::New() const {
  return new barrage_send_ss_req;
}

void barrage_send_ss_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1822;
    if (has_barrage()) {
      if (barrage_ != NULL) barrage_->::SProtoSpace::barrage_single::Clear();
    }
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_info()) {
      if (role_info_ != NULL) role_info_->::SProtoSpace::barrage_role_info::Clear();
    }
  }
  storage_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool barrage_send_ss_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_send_ss_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_storage_id;
        break;
      }

      // repeated int32 storage_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_storage_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_storage_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_storage_id;
        if (input->ExpectTag(26)) goto parse_barrage;
        break;
      }

      // optional .SProtoSpace.barrage_single barrage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_barrage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_barrage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_role_info;
        break;
      }

      // optional .SProtoSpace.barrage_role_info role_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void barrage_send_ss_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_send_ss_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated int32 storage_id = 2;
  for (int i = 0; i < this->storage_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->storage_id(i), output);
  }

  // optional .SProtoSpace.barrage_single barrage = 3;
  if (has_barrage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->barrage(), output);
  }

  // optional uint64 role_id = 4;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->role_id(), output);
  }

  // optional .SProtoSpace.barrage_role_info role_info = 5;
  if (has_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->role_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* barrage_send_ss_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_send_ss_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated int32 storage_id = 2;
  for (int i = 0; i < this->storage_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->storage_id(i), target);
  }

  // optional .SProtoSpace.barrage_single barrage = 3;
  if (has_barrage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->barrage(), target);
  }

  // optional uint64 role_id = 4;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->role_id(), target);
  }

  // optional .SProtoSpace.barrage_role_info role_info = 5;
  if (has_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->role_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int barrage_send_ss_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_send_ss_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.barrage_single barrage = 3;
    if (has_barrage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->barrage());
    }

    // optional uint64 role_id = 4;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.barrage_role_info role_info = 5;
    if (has_role_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_info());
    }

  }
  // repeated int32 storage_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->storage_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->storage_id(i));
    }
    total_size += 1 * this->storage_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void barrage_send_ss_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const barrage_send_ss_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const barrage_send_ss_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void barrage_send_ss_req::MergeFrom(const barrage_send_ss_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  storage_id_.MergeFrom(from.storage_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_barrage()) {
      mutable_barrage()->::SProtoSpace::barrage_single::MergeFrom(from.barrage());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_info()) {
      mutable_role_info()->::SProtoSpace::barrage_role_info::MergeFrom(from.role_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void barrage_send_ss_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void barrage_send_ss_req::CopyFrom(const barrage_send_ss_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool barrage_send_ss_req::IsInitialized() const {

  return true;
}

void barrage_send_ss_req::Swap(barrage_send_ss_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    storage_id_.Swap(&other->storage_id_);
    std::swap(barrage_, other->barrage_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_info_, other->role_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata barrage_send_ss_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = barrage_send_ss_req_descriptor_;
  metadata.reflection = barrage_send_ss_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int barrage_send_ss_ack::kProtoidFieldNumber;
const int barrage_send_ss_ack::kErrorFieldNumber;
const int barrage_send_ss_ack::kRoleIdFieldNumber;
#endif  // !_MSC_VER

barrage_send_ss_ack::barrage_send_ss_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void barrage_send_ss_ack::InitAsDefaultInstance() {
}

barrage_send_ss_ack::barrage_send_ss_ack(const barrage_send_ss_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void barrage_send_ss_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1823;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

barrage_send_ss_ack::~barrage_send_ss_ack() {
  SharedDtor();
}

void barrage_send_ss_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void barrage_send_ss_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* barrage_send_ss_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return barrage_send_ss_ack_descriptor_;
}

const barrage_send_ss_ack& barrage_send_ss_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fchat_2eproto();
  return *default_instance_;
}

barrage_send_ss_ack* barrage_send_ss_ack::default_instance_ = NULL;

barrage_send_ss_ack* barrage_send_ss_ack::New() const {
  return new barrage_send_ss_ack;
}

void barrage_send_ss_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1823;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  error_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool barrage_send_ss_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_send_ss_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // repeated .SProtoSpace.MsgErrorType error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            add_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::SProtoSpace::MsgErrorType_IsValid,
                 this->mutable_error())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error;
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void barrage_send_ss_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_send_ss_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.MsgErrorType error = 2;
  for (int i = 0; i < this->error_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error(i), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* barrage_send_ss_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_send_ss_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.MsgErrorType error = 2;
  for (int i = 0; i < this->error_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error(i), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int barrage_send_ss_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = barrage_send_ss_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  // repeated .SProtoSpace.MsgErrorType error = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->error_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->error(i));
    }
    total_size += 1 * this->error_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void barrage_send_ss_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const barrage_send_ss_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const barrage_send_ss_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void barrage_send_ss_ack::MergeFrom(const barrage_send_ss_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  error_.MergeFrom(from.error_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void barrage_send_ss_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void barrage_send_ss_ack::CopyFrom(const barrage_send_ss_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool barrage_send_ss_ack::IsInitialized() const {

  return true;
}

void barrage_send_ss_ack::Swap(barrage_send_ss_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    error_.Swap(&other->error_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata barrage_send_ss_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = barrage_send_ss_ack_descriptor_;
  metadata.reflection = barrage_send_ss_ack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
