// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_game.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ss_game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* role_enter_game_server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_enter_game_server_reflection_ = NULL;
const ::google::protobuf::Descriptor* gt_enter_game_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gt_enter_game_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_create_scene_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_create_scene_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_create_scene_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_create_scene_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_kick_role_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_kick_role_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_kick_role_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_kick_role_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_broadcast_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_broadcast_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_change_name_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_change_name_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gt_change_name_ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gt_change_name_ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_jump_to_cross_game_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_jump_to_cross_game_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gt_kick_role_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gt_kick_role_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_player_num_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_player_num_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* gate_forward_search_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gate_forward_search_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* log_gather_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  log_gather_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* log_gather_player_register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  log_gather_player_register_reflection_ = NULL;
const ::google::protobuf::Descriptor* log_gather_player_login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  log_gather_player_login_reflection_ = NULL;
const ::google::protobuf::Descriptor* log_gather_player_logout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  log_gather_player_logout_reflection_ = NULL;
const ::google::protobuf::Descriptor* log_gather_money_flow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  log_gather_money_flow_reflection_ = NULL;
const ::google::protobuf::Descriptor* log_gather_item_flow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  log_gather_item_flow_reflection_ = NULL;
const ::google::protobuf::Descriptor* log_gather_item_money_flow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  log_gather_item_money_flow_reflection_ = NULL;
const ::google::protobuf::Descriptor* log_gather_player_exp_flow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  log_gather_player_exp_flow_reflection_ = NULL;
const ::google::protobuf::Descriptor* log_gather_sns_flow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  log_gather_sns_flow_reflection_ = NULL;
const ::google::protobuf::Descriptor* log_gather_round_flow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  log_gather_round_flow_reflection_ = NULL;
const ::google::protobuf::Descriptor* log_gather_role_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  log_gather_role_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* log_gather_task_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  log_gather_task_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* log_gather_honor_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  log_gather_honor_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* log_gather_level_up_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  log_gather_level_up_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* log_gather_buy_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  log_gather_buy_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* allocate_chat_room_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  allocate_chat_room_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* allocate_chat_room_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  allocate_chat_room_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_get_role_position_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_get_role_position_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_get_role_position_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_get_role_position_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* red_pt_ss_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  red_pt_ss_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_other_role_fashion_ss_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_other_role_fashion_ss_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_other_role_fashion_ss_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_other_role_fashion_ss_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_chat_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_chat_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_chat_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_chat_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_event_track_ss_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_event_track_ss_ntf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ELogEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EConomicAnalysisType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAddItemReasonLv1_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ss_5fgame_2eproto() {
  protobuf_AddDesc_ss_5fgame_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ss_game.proto");
  GOOGLE_CHECK(file != NULL);
  role_enter_game_server_descriptor_ = file->message_type(0);
  static const int role_enter_game_server_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_enter_game_server, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_enter_game_server, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_enter_game_server, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_enter_game_server, db_svr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_enter_game_server, is_reconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_enter_game_server, is_switch_scene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_enter_game_server, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_enter_game_server, scene_type_),
  };
  role_enter_game_server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_enter_game_server_descriptor_,
      role_enter_game_server::default_instance_,
      role_enter_game_server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_enter_game_server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_enter_game_server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_enter_game_server));
  gt_enter_game_ack_descriptor_ = file->message_type(1);
  static const int gt_enter_game_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_enter_game_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_enter_game_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_enter_game_ack, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_enter_game_ack, ret_),
  };
  gt_enter_game_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gt_enter_game_ack_descriptor_,
      gt_enter_game_ack::default_instance_,
      gt_enter_game_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_enter_game_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_enter_game_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gt_enter_game_ack));
  gs_create_scene_req_descriptor_ = file->message_type(2);
  static const int gs_create_scene_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_scene_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_scene_req, create_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_scene_req, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_scene_req, scene_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_scene_req, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_scene_req, last_time_),
  };
  gs_create_scene_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_create_scene_req_descriptor_,
      gs_create_scene_req::default_instance_,
      gs_create_scene_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_scene_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_scene_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_create_scene_req));
  gs_create_scene_ack_descriptor_ = file->message_type(3);
  static const int gs_create_scene_ack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_scene_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_scene_ack, create_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_scene_ack, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_scene_ack, scene_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_scene_ack, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_scene_ack, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_scene_ack, ret_),
  };
  gs_create_scene_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_create_scene_ack_descriptor_,
      gs_create_scene_ack::default_instance_,
      gs_create_scene_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_scene_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_scene_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_create_scene_ack));
  gs_kick_role_req_descriptor_ = file->message_type(4);
  static const int gs_kick_role_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_kick_role_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_kick_role_req, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_kick_role_req, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_kick_role_req, scene_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_kick_role_req, game_id_),
  };
  gs_kick_role_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_kick_role_req_descriptor_,
      gs_kick_role_req::default_instance_,
      gs_kick_role_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_kick_role_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_kick_role_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_kick_role_req));
  gs_kick_role_ack_descriptor_ = file->message_type(5);
  static const int gs_kick_role_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_kick_role_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_kick_role_ack, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_kick_role_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_kick_role_ack, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_kick_role_ack, scene_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_kick_role_ack, game_id_),
  };
  gs_kick_role_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_kick_role_ack_descriptor_,
      gs_kick_role_ack::default_instance_,
      gs_kick_role_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_kick_role_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_kick_role_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_kick_role_ack));
  gs_broadcast_req_descriptor_ = file->message_type(6);
  static const int gs_broadcast_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_broadcast_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_broadcast_req, proto_),
  };
  gs_broadcast_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_broadcast_req_descriptor_,
      gs_broadcast_req::default_instance_,
      gs_broadcast_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_broadcast_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_broadcast_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_broadcast_req));
  gs_change_name_req_descriptor_ = file->message_type(7);
  static const int gs_change_name_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_change_name_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_change_name_req, new_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_change_name_req, old_name_),
  };
  gs_change_name_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_change_name_req_descriptor_,
      gs_change_name_req::default_instance_,
      gs_change_name_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_change_name_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_change_name_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_change_name_req));
  gt_change_name_ret_descriptor_ = file->message_type(8);
  static const int gt_change_name_ret_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_change_name_ret, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_change_name_ret, new_name_),
  };
  gt_change_name_ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gt_change_name_ret_descriptor_,
      gt_change_name_ret::default_instance_,
      gt_change_name_ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_change_name_ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_change_name_ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gt_change_name_ret));
  gs_jump_to_cross_game_req_descriptor_ = file->message_type(9);
  static const int gs_jump_to_cross_game_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_jump_to_cross_game_req, protoid_),
  };
  gs_jump_to_cross_game_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_jump_to_cross_game_req_descriptor_,
      gs_jump_to_cross_game_req::default_instance_,
      gs_jump_to_cross_game_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_jump_to_cross_game_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_jump_to_cross_game_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_jump_to_cross_game_req));
  gt_kick_role_ntf_descriptor_ = file->message_type(10);
  static const int gt_kick_role_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_kick_role_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_kick_role_ntf, player_id_),
  };
  gt_kick_role_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gt_kick_role_ntf_descriptor_,
      gt_kick_role_ntf::default_instance_,
      gt_kick_role_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_kick_role_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gt_kick_role_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gt_kick_role_ntf));
  gs_player_num_ntf_descriptor_ = file->message_type(11);
  static const int gs_player_num_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_player_num_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_player_num_ntf, player_num_),
  };
  gs_player_num_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_player_num_ntf_descriptor_,
      gs_player_num_ntf::default_instance_,
      gs_player_num_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_player_num_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_player_num_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_player_num_ntf));
  gate_forward_search_req_descriptor_ = file->message_type(12);
  static const int gate_forward_search_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_forward_search_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_forward_search_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_forward_search_req, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_forward_search_req, uuid_),
  };
  gate_forward_search_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gate_forward_search_req_descriptor_,
      gate_forward_search_req::default_instance_,
      gate_forward_search_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_forward_search_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate_forward_search_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gate_forward_search_req));
  log_gather_info_descriptor_ = file->message_type(13);
  static const int log_gather_info_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_info, role_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_info, task_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_info, honor_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_info, level_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_info, buy_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_info, player_register_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_info, player_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_info, player_logout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_info, money_flow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_info, item_flow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_info, item_money_flow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_info, player_exp_flow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_info, sns_flow_),
  };
  log_gather_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      log_gather_info_descriptor_,
      log_gather_info::default_instance_,
      log_gather_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(log_gather_info));
  log_gather_player_register_descriptor_ = file->message_type(14);
  static const int log_gather_player_register_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, gamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, dteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, vgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, izoneareaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, vopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, clientversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, systemsoftware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, systemhardware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, telecomoper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, screenwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, screenhight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, regchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, cpuhardware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, glrender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, glversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, type_),
  };
  log_gather_player_register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      log_gather_player_register_descriptor_,
      log_gather_player_register::default_instance_,
      log_gather_player_register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(log_gather_player_register));
  log_gather_player_login_descriptor_ = file->message_type(15);
  static const int log_gather_player_login_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, gamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, dteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, gameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, playerfriendsnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, clientversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, systemsoftware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, systemhardware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, telecomoper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, screenwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, screenhight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, loginchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, cpuhardware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, glrender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, glversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, type_),
  };
  log_gather_player_login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      log_gather_player_login_descriptor_,
      log_gather_player_login::default_instance_,
      log_gather_player_login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(log_gather_player_login));
  log_gather_player_logout_descriptor_ = file->message_type(16);
  static const int log_gather_player_logout_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, gamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, dteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, gameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, playerfriendsnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, clientversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, systemsoftware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, systemhardware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, telecomoper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, screenwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, screenhight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, loginchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, cpuhardware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, glrender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, glversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, type_),
  };
  log_gather_player_logout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      log_gather_player_logout_descriptor_,
      log_gather_player_logout::default_instance_,
      log_gather_player_logout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_logout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(log_gather_player_logout));
  log_gather_money_flow_descriptor_ = file->message_type(17);
  static const int log_gather_money_flow_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_money_flow, gamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_money_flow, dteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_money_flow, vgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_money_flow, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_money_flow, izoneareaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_money_flow, vopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_money_flow, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_money_flow, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_money_flow, aftermoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_money_flow, imoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_money_flow, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_money_flow, subreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_money_flow, addorreduce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_money_flow, imoneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_money_flow, type_),
  };
  log_gather_money_flow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      log_gather_money_flow_descriptor_,
      log_gather_money_flow::default_instance_,
      log_gather_money_flow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_money_flow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_money_flow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(log_gather_money_flow));
  log_gather_item_flow_descriptor_ = file->message_type(18);
  static const int log_gather_item_flow_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_flow, gamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_flow, dteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_flow, vgameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_flow, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_flow, izoneareaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_flow, vopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_flow, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_flow, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_flow, igoodstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_flow, igoodsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_flow, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_flow, aftercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_flow, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_flow, subreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_flow, imoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_flow, imoneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_flow, addorreduce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_flow, type_),
  };
  log_gather_item_flow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      log_gather_item_flow_descriptor_,
      log_gather_item_flow::default_instance_,
      log_gather_item_flow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_flow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_flow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(log_gather_item_flow));
  log_gather_item_money_flow_descriptor_ = file->message_type(19);
  static const int log_gather_item_money_flow_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_money_flow, gamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_money_flow, dteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_money_flow, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_money_flow, gameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_money_flow, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_money_flow, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_money_flow, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_money_flow, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_money_flow, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_money_flow, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_money_flow, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_money_flow, moneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_money_flow, type_),
  };
  log_gather_item_money_flow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      log_gather_item_money_flow_descriptor_,
      log_gather_item_money_flow::default_instance_,
      log_gather_item_money_flow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_money_flow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_item_money_flow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(log_gather_item_money_flow));
  log_gather_player_exp_flow_descriptor_ = file->message_type(20);
  static const int log_gather_player_exp_flow_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_exp_flow, gamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_exp_flow, dteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_exp_flow, gameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_exp_flow, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_exp_flow, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_exp_flow, expchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_exp_flow, beforelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_exp_flow, afterlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_exp_flow, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_exp_flow, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_exp_flow, subreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_exp_flow, type_),
  };
  log_gather_player_exp_flow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      log_gather_player_exp_flow_descriptor_,
      log_gather_player_exp_flow::default_instance_,
      log_gather_player_exp_flow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_exp_flow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_player_exp_flow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(log_gather_player_exp_flow));
  log_gather_sns_flow_descriptor_ = file->message_type(21);
  static const int log_gather_sns_flow_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_sns_flow, gamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_sns_flow, dteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_sns_flow, gameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_sns_flow, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_sns_flow, actoropenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_sns_flow, recnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_sns_flow, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_sns_flow, snstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_sns_flow, snssubtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_sns_flow, type_),
  };
  log_gather_sns_flow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      log_gather_sns_flow_descriptor_,
      log_gather_sns_flow::default_instance_,
      log_gather_sns_flow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_sns_flow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_sns_flow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(log_gather_sns_flow));
  log_gather_round_flow_descriptor_ = file->message_type(22);
  static const int log_gather_round_flow_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_round_flow, gamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_round_flow, dteventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_round_flow, gameappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_round_flow, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_round_flow, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_round_flow, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_round_flow, battletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_round_flow, roundscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_round_flow, roundtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_round_flow, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_round_flow, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_round_flow, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_round_flow, type_),
  };
  log_gather_round_flow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      log_gather_round_flow_descriptor_,
      log_gather_round_flow::default_instance_,
      log_gather_round_flow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_round_flow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_round_flow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(log_gather_round_flow));
  log_gather_role_info_descriptor_ = file->message_type(23);
  static const int log_gather_role_info_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_role_info, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_role_info, event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_role_info, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_role_info, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_role_info, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_role_info, zone_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_role_info, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_role_info, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_role_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_role_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_role_info, fight_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_role_info, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_role_info, pay_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_role_info, coin_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_role_info, coin_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_role_info, vip_level_),
  };
  log_gather_role_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      log_gather_role_info_descriptor_,
      log_gather_role_info::default_instance_,
      log_gather_role_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_role_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_role_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(log_gather_role_info));
  log_gather_task_info_descriptor_ = file->message_type(24);
  static const int log_gather_task_info_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_task_info, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_task_info, event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_task_info, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_task_info, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_task_info, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_task_info, zone_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_task_info, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_task_info, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_task_info, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_task_info, task_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_task_info, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_task_info, task_detail_),
  };
  log_gather_task_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      log_gather_task_info_descriptor_,
      log_gather_task_info::default_instance_,
      log_gather_task_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_task_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_task_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(log_gather_task_info));
  log_gather_honor_info_descriptor_ = file->message_type(25);
  static const int log_gather_honor_info_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_honor_info, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_honor_info, event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_honor_info, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_honor_info, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_honor_info, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_honor_info, zone_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_honor_info, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_honor_info, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_honor_info, honor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_honor_info, honor_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_honor_info, honor_detail_),
  };
  log_gather_honor_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      log_gather_honor_info_descriptor_,
      log_gather_honor_info::default_instance_,
      log_gather_honor_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_honor_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_honor_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(log_gather_honor_info));
  log_gather_level_up_info_descriptor_ = file->message_type(26);
  static const int log_gather_level_up_info_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_level_up_info, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_level_up_info, event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_level_up_info, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_level_up_info, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_level_up_info, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_level_up_info, zone_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_level_up_info, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_level_up_info, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_level_up_info, new_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_level_up_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_level_up_info, old_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_level_up_info, detail_desc_),
  };
  log_gather_level_up_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      log_gather_level_up_info_descriptor_,
      log_gather_level_up_info::default_instance_,
      log_gather_level_up_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_level_up_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_level_up_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(log_gather_level_up_info));
  log_gather_buy_info_descriptor_ = file->message_type(27);
  static const int log_gather_buy_info_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_buy_info, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_buy_info, event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_buy_info, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_buy_info, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_buy_info, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_buy_info, zone_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_buy_info, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_buy_info, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_buy_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_buy_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_buy_info, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_buy_info, item_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_buy_info, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_buy_info, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_buy_info, left_coin_),
  };
  log_gather_buy_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      log_gather_buy_info_descriptor_,
      log_gather_buy_info::default_instance_,
      log_gather_buy_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_buy_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_gather_buy_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(log_gather_buy_info));
  allocate_chat_room_req_descriptor_ = file->message_type(28);
  static const int allocate_chat_room_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allocate_chat_room_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allocate_chat_room_req, room_ids_),
  };
  allocate_chat_room_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      allocate_chat_room_req_descriptor_,
      allocate_chat_room_req::default_instance_,
      allocate_chat_room_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allocate_chat_room_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allocate_chat_room_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(allocate_chat_room_req));
  allocate_chat_room_ack_descriptor_ = file->message_type(29);
  static const int allocate_chat_room_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allocate_chat_room_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allocate_chat_room_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allocate_chat_room_ack, room_ids_),
  };
  allocate_chat_room_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      allocate_chat_room_ack_descriptor_,
      allocate_chat_room_ack::default_instance_,
      allocate_chat_room_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allocate_chat_room_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allocate_chat_room_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(allocate_chat_room_ack));
  gs_get_role_position_req_descriptor_ = file->message_type(30);
  static const int gs_get_role_position_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_position_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_position_req, dest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_position_req, sour_id_),
  };
  gs_get_role_position_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_get_role_position_req_descriptor_,
      gs_get_role_position_req::default_instance_,
      gs_get_role_position_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_position_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_position_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_get_role_position_req));
  gs_get_role_position_ack_descriptor_ = file->message_type(31);
  static const int gs_get_role_position_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_position_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_position_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_position_ack, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_position_ack, dest_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_position_ack, sour_id_),
  };
  gs_get_role_position_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_get_role_position_ack_descriptor_,
      gs_get_role_position_ack::default_instance_,
      gs_get_role_position_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_position_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_get_role_position_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_get_role_position_ack));
  red_pt_ss_ntf_descriptor_ = file->message_type(32);
  static const int red_pt_ss_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_ss_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_ss_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_ss_ntf, infos_),
  };
  red_pt_ss_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      red_pt_ss_ntf_descriptor_,
      red_pt_ss_ntf::default_instance_,
      red_pt_ss_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_ss_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_ss_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(red_pt_ss_ntf));
  get_other_role_fashion_ss_req_descriptor_ = file->message_type(33);
  static const int get_other_role_fashion_ss_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_other_role_fashion_ss_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_other_role_fashion_ss_req, role_id_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_other_role_fashion_ss_req, role_name_s_),
  };
  get_other_role_fashion_ss_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_other_role_fashion_ss_req_descriptor_,
      get_other_role_fashion_ss_req::default_instance_,
      get_other_role_fashion_ss_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_other_role_fashion_ss_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_other_role_fashion_ss_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_other_role_fashion_ss_req));
  get_other_role_fashion_ss_ack_descriptor_ = file->message_type(34);
  static const int get_other_role_fashion_ss_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_other_role_fashion_ss_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_other_role_fashion_ss_ack, fashions_p_wearing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_other_role_fashion_ss_ack, error_code_),
  };
  get_other_role_fashion_ss_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_other_role_fashion_ss_ack_descriptor_,
      get_other_role_fashion_ss_ack::default_instance_,
      get_other_role_fashion_ss_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_other_role_fashion_ss_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_other_role_fashion_ss_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_other_role_fashion_ss_ack));
  gs_chat_req_descriptor_ = file->message_type(35);
  static const int gs_chat_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_chat_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_chat_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_chat_req, module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_chat_req, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_chat_req, role_id_),
  };
  gs_chat_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_chat_req_descriptor_,
      gs_chat_req::default_instance_,
      gs_chat_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_chat_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_chat_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_chat_req));
  gs_chat_ack_descriptor_ = file->message_type(36);
  static const int gs_chat_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_chat_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_chat_ack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_chat_ack, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_chat_ack, sour_data_),
  };
  gs_chat_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_chat_ack_descriptor_,
      gs_chat_ack::default_instance_,
      gs_chat_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_chat_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_chat_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_chat_ack));
  user_event_track_ss_ntf_descriptor_ = file->message_type(37);
  static const int user_event_track_ss_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_event_track_ss_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_event_track_ss_ntf, log_s_),
  };
  user_event_track_ss_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_event_track_ss_ntf_descriptor_,
      user_event_track_ss_ntf::default_instance_,
      user_event_track_ss_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_event_track_ss_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_event_track_ss_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_event_track_ss_ntf));
  ELogEventType_descriptor_ = file->enum_type(0);
  EConomicAnalysisType_descriptor_ = file->enum_type(1);
  EAddItemReasonLv1_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ss_5fgame_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_enter_game_server_descriptor_, &role_enter_game_server::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gt_enter_game_ack_descriptor_, &gt_enter_game_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_create_scene_req_descriptor_, &gs_create_scene_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_create_scene_ack_descriptor_, &gs_create_scene_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_kick_role_req_descriptor_, &gs_kick_role_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_kick_role_ack_descriptor_, &gs_kick_role_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_broadcast_req_descriptor_, &gs_broadcast_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_change_name_req_descriptor_, &gs_change_name_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gt_change_name_ret_descriptor_, &gt_change_name_ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_jump_to_cross_game_req_descriptor_, &gs_jump_to_cross_game_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gt_kick_role_ntf_descriptor_, &gt_kick_role_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_player_num_ntf_descriptor_, &gs_player_num_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gate_forward_search_req_descriptor_, &gate_forward_search_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    log_gather_info_descriptor_, &log_gather_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    log_gather_player_register_descriptor_, &log_gather_player_register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    log_gather_player_login_descriptor_, &log_gather_player_login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    log_gather_player_logout_descriptor_, &log_gather_player_logout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    log_gather_money_flow_descriptor_, &log_gather_money_flow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    log_gather_item_flow_descriptor_, &log_gather_item_flow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    log_gather_item_money_flow_descriptor_, &log_gather_item_money_flow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    log_gather_player_exp_flow_descriptor_, &log_gather_player_exp_flow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    log_gather_sns_flow_descriptor_, &log_gather_sns_flow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    log_gather_round_flow_descriptor_, &log_gather_round_flow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    log_gather_role_info_descriptor_, &log_gather_role_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    log_gather_task_info_descriptor_, &log_gather_task_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    log_gather_honor_info_descriptor_, &log_gather_honor_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    log_gather_level_up_info_descriptor_, &log_gather_level_up_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    log_gather_buy_info_descriptor_, &log_gather_buy_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    allocate_chat_room_req_descriptor_, &allocate_chat_room_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    allocate_chat_room_ack_descriptor_, &allocate_chat_room_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_get_role_position_req_descriptor_, &gs_get_role_position_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_get_role_position_ack_descriptor_, &gs_get_role_position_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    red_pt_ss_ntf_descriptor_, &red_pt_ss_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_other_role_fashion_ss_req_descriptor_, &get_other_role_fashion_ss_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_other_role_fashion_ss_ack_descriptor_, &get_other_role_fashion_ss_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_chat_req_descriptor_, &gs_chat_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_chat_ack_descriptor_, &gs_chat_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_event_track_ss_ntf_descriptor_, &user_event_track_ss_ntf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ss_5fgame_2eproto() {
  delete role_enter_game_server::default_instance_;
  delete role_enter_game_server_reflection_;
  delete gt_enter_game_ack::default_instance_;
  delete gt_enter_game_ack_reflection_;
  delete gs_create_scene_req::default_instance_;
  delete gs_create_scene_req_reflection_;
  delete gs_create_scene_ack::default_instance_;
  delete gs_create_scene_ack_reflection_;
  delete gs_kick_role_req::default_instance_;
  delete gs_kick_role_req_reflection_;
  delete gs_kick_role_ack::default_instance_;
  delete gs_kick_role_ack_reflection_;
  delete gs_broadcast_req::default_instance_;
  delete gs_broadcast_req_reflection_;
  delete gs_change_name_req::default_instance_;
  delete gs_change_name_req_reflection_;
  delete gt_change_name_ret::default_instance_;
  delete gt_change_name_ret_reflection_;
  delete gs_jump_to_cross_game_req::default_instance_;
  delete gs_jump_to_cross_game_req_reflection_;
  delete gt_kick_role_ntf::default_instance_;
  delete gt_kick_role_ntf_reflection_;
  delete gs_player_num_ntf::default_instance_;
  delete gs_player_num_ntf_reflection_;
  delete gate_forward_search_req::default_instance_;
  delete gate_forward_search_req_reflection_;
  delete log_gather_info::default_instance_;
  delete log_gather_info_reflection_;
  delete log_gather_player_register::default_instance_;
  delete log_gather_player_register_reflection_;
  delete log_gather_player_login::default_instance_;
  delete log_gather_player_login_reflection_;
  delete log_gather_player_logout::default_instance_;
  delete log_gather_player_logout_reflection_;
  delete log_gather_money_flow::default_instance_;
  delete log_gather_money_flow_reflection_;
  delete log_gather_item_flow::default_instance_;
  delete log_gather_item_flow_reflection_;
  delete log_gather_item_money_flow::default_instance_;
  delete log_gather_item_money_flow_reflection_;
  delete log_gather_player_exp_flow::default_instance_;
  delete log_gather_player_exp_flow_reflection_;
  delete log_gather_sns_flow::default_instance_;
  delete log_gather_sns_flow_reflection_;
  delete log_gather_round_flow::default_instance_;
  delete log_gather_round_flow_reflection_;
  delete log_gather_role_info::default_instance_;
  delete log_gather_role_info_reflection_;
  delete log_gather_task_info::default_instance_;
  delete log_gather_task_info_reflection_;
  delete log_gather_honor_info::default_instance_;
  delete log_gather_honor_info_reflection_;
  delete log_gather_level_up_info::default_instance_;
  delete log_gather_level_up_info_reflection_;
  delete log_gather_buy_info::default_instance_;
  delete log_gather_buy_info_reflection_;
  delete allocate_chat_room_req::default_instance_;
  delete allocate_chat_room_req_reflection_;
  delete allocate_chat_room_ack::default_instance_;
  delete allocate_chat_room_ack_reflection_;
  delete gs_get_role_position_req::default_instance_;
  delete gs_get_role_position_req_reflection_;
  delete gs_get_role_position_ack::default_instance_;
  delete gs_get_role_position_ack_reflection_;
  delete red_pt_ss_ntf::default_instance_;
  delete red_pt_ss_ntf_reflection_;
  delete get_other_role_fashion_ss_req::default_instance_;
  delete get_other_role_fashion_ss_req_reflection_;
  delete get_other_role_fashion_ss_ack::default_instance_;
  delete get_other_role_fashion_ss_ack_reflection_;
  delete gs_chat_req::default_instance_;
  delete gs_chat_req_reflection_;
  delete gs_chat_ack::default_instance_;
  delete gs_chat_ack_reflection_;
  delete user_event_track_ss_ntf::default_instance_;
  delete user_event_track_ss_ntf_reflection_;
}

void protobuf_AddDesc_ss_5fgame_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SProtoSpace::protobuf_AddDesc_ss_5fprotoid_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5fsocialtype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5froletype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cs_5ferrorcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rss_game.proto\022\013SProtoSpace\032\020ss_protoid"
    ".proto\032\023cm_socialtype.proto\032\021cm_roletype"
    ".proto\032\022cs_errorcode.proto\"\364\001\n\026role_ente"
    "r_game_server\022C\n\007protoid\030\001 \001(\0162\027.SProtoS"
    "pace.ESSProtoID:\031role_enter_game_server_"
    "id\022\017\n\007role_id\030\002 \001(\004\022\017\n\007area_id\030\003 \001(\r\022\021\n\t"
    "db_svr_id\030\004 \001(\004\022\024\n\014is_reconnect\030\005 \001(\010\022\036\n"
    "\017is_switch_scene\030\006 \001(\010:\005false\022\023\n\010scene_i"
    "d\030\007 \001(\r:\0010\022\025\n\nscene_type\030\010 \001(\r:\0010\"\204\001\n\021gt"
    "_enter_game_ack\022>\n\007protoid\030\001 \001(\0162\027.SProt"
    "oSpace.ESSProtoID:\024gt_enter_game_ack_id\022"
    "\017\n\007role_id\030\002 \001(\004\022\021\n\trole_name\030\003 \001(\t\022\013\n\003r"
    "et\030\004 \001(\005\"\264\001\n\023gs_create_scene_req\022@\n\007prot"
    "oid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\026gs_c"
    "reate_scene_req_id\022\023\n\013create_type\030\002 \001(\r\022"
    "\020\n\010scene_id\030\003 \001(\r\022\022\n\nscene_type\030\004 \001(\r\022\r\n"
    "\005param\030\005 \001(\r\022\021\n\tlast_time\030\006 \001(\r\"\301\001\n\023gs_c"
    "reate_scene_ack\022@\n\007protoid\030\001 \001(\0162\027.SProt"
    "oSpace.ESSProtoID:\026gs_create_scene_ack_i"
    "d\022\023\n\013create_type\030\002 \001(\r\022\020\n\010scene_id\030\003 \001(\r"
    "\022\022\n\nscene_type\030\004 \001(\r\022\r\n\005param\030\005 \001(\r\022\021\n\tl"
    "ast_time\030\006 \001(\r\022\013\n\003ret\030\007 \001(\r\"\230\001\n\020gs_kick_"
    "role_req\022=\n\007protoid\030\001 \001(\0162\027.SProtoSpace."
    "ESSProtoID:\023gs_kick_role_req_id\022\016\n\006reaso"
    "n\030\002 \001(\r\022\020\n\010scene_id\030\003 \001(\r\022\022\n\nscene_type\030"
    "\004 \001(\r\022\017\n\007game_id\030\005 \001(\004\"\245\001\n\020gs_kick_role_"
    "ack\022=\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSPr"
    "otoID:\023gs_kick_role_ack_id\022\016\n\006reason\030\002 \001"
    "(\r\022\013\n\003ret\030\003 \001(\r\022\020\n\010scene_id\030\004 \001(\r\022\022\n\nsce"
    "ne_type\030\005 \001(\r\022\017\n\007game_id\030\006 \001(\004\"`\n\020gs_bro"
    "adcast_req\022=\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ESSProtoID:\023gs_broadcast_req_id\022\r\n\005pro"
    "to\030\002 \001(\014\"y\n\022gs_change_name_req\022\?\n\007protoi"
    "d\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\025gs_cha"
    "nge_name_req_id\022\020\n\010new_name\030\002 \001(\t\022\020\n\010old"
    "_name\030\003 \001(\t\"g\n\022gt_change_name_ret\022\?\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\025gt_"
    "change_name_ret_id\022\020\n\010new_name\030\002 \001(\t\"c\n\031"
    "gs_jump_to_cross_game_req\022F\n\007protoid\030\001 \001"
    "(\0162\027.SProtoSpace.ESSProtoID:\034gs_jump_to_"
    "cross_game_req_id\"d\n\020gt_kick_role_ntf\022=\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:"
    "\023gt_kick_role_ntf_id\022\021\n\tplayer_id\030\002 \001(\004\""
    "g\n\021gs_player_num_ntf\022>\n\007protoid\030\001 \001(\0162\027."
    "SProtoSpace.ESSProtoID:\024gs_player_num_nt"
    "f_id\022\022\n\nplayer_num\030\002 \001(\r\"\215\001\n\027gate_forwar"
    "d_search_req\022E\n\010proto_id\030\001 \001(\0162\027.SProtoS"
    "pace.ESSProtoID:\032gate_forward_search_req"
    "_id\022\014\n\004type\030\002 \001(\r\022\017\n\007content\030\003 \001(\t\022\014\n\004uu"
    "id\030\004 \001(\004\"\206\006\n\017log_gather_info\0224\n\trole_inf"
    "o\030\001 \001(\0132!.SProtoSpace.log_gather_role_in"
    "fo\0224\n\ttask_info\030\002 \001(\0132!.SProtoSpace.log_"
    "gather_task_info\0226\n\nhonor_info\030\003 \001(\0132\".S"
    "ProtoSpace.log_gather_honor_info\0229\n\nleve"
    "l_info\030\004 \001(\0132%.SProtoSpace.log_gather_le"
    "vel_up_info\0222\n\010buy_info\030\005 \001(\0132 .SProtoSp"
    "ace.log_gather_buy_info\022@\n\017player_regist"
    "er\030\006 \003(\0132\'.SProtoSpace.log_gather_player"
    "_register\022:\n\014player_login\030\007 \003(\0132$.SProto"
    "Space.log_gather_player_login\022<\n\rplayer_"
    "logout\030\010 \003(\0132%.SProtoSpace.log_gather_pl"
    "ayer_logout\0226\n\nmoney_flow\030\t \003(\0132\".SProto"
    "Space.log_gather_money_flow\0224\n\titem_flow"
    "\030\n \003(\0132!.SProtoSpace.log_gather_item_flo"
    "w\022@\n\017item_money_flow\030\013 \003(\0132\'.SProtoSpace"
    ".log_gather_item_money_flow\022@\n\017player_ex"
    "p_flow\030\014 \003(\0132\'.SProtoSpace.log_gather_pl"
    "ayer_exp_flow\0222\n\010sns_flow\030\r \003(\0132 .SProto"
    "Space.log_gather_sns_flow\"\374\003\n\032log_gather"
    "_player_register\022\021\n\tGameSvrId\030\001 \001(\t\022\023\n\013d"
    "tEventTime\030\002 \001(\t\022\022\n\nvGameAppID\030\003 \001(\t\022\016\n\006"
    "PlatID\030\004 \001(\005\022\023\n\013iZoneAreaID\030\005 \001(\005\022\017\n\007vop"
    "enid\030\006 \001(\t\022\025\n\rClientVersion\030\007 \001(\t\022\026\n\016Sys"
    "temSoftware\030\010 \001(\t\022\026\n\016SystemHardware\030\t \001("
    "\t\022\023\n\013TelecomOper\030\n \001(\t\022\017\n\007Network\030\013 \001(\t\022"
    "\023\n\013ScreenWidth\030\014 \001(\005\022\023\n\013ScreenHight\030\r \001("
    "\005\022\017\n\007Density\030\016 \001(\002\022\022\n\nRegChannel\030\017 \001(\005\022\023"
    "\n\013CpuHardware\030\020 \001(\t\022\016\n\006Memory\030\021 \001(\005\022\020\n\010G"
    "LRender\030\022 \001(\t\022\021\n\tGLVersion\030\023 \001(\t\022\020\n\010Devi"
    "ceId\030\024 \001(\t\022T\n\004Type\030d \001(\0162!.SProtoSpace.E"
    "ConomicAnalysisType:#EConomicAnalysisTyp"
    "e_PlayerRegister\"\212\004\n\027log_gather_player_l"
    "ogin\022\021\n\tGameSvrId\030\001 \001(\t\022\023\n\013dtEventTime\030\002"
    " \001(\t\022\021\n\tGameAppID\030\003 \001(\t\022\016\n\006OpenID\030\004 \001(\t\022"
    "\r\n\005Level\030\005 \001(\005\022\030\n\020PlayerFriendsNum\030\006 \001(\005"
    "\022\016\n\006PlatID\030\007 \001(\005\022\025\n\rClientVersion\030\010 \001(\t\022"
    "\026\n\016SystemSoftware\030\t \001(\t\022\026\n\016SystemHardwar"
    "e\030\n \001(\t\022\023\n\013TelecomOper\030\013 \001(\t\022\017\n\007Network\030"
    "\014 \001(\t\022\023\n\013ScreenWidth\030\r \001(\005\022\023\n\013ScreenHigh"
    "t\030\016 \001(\005\022\017\n\007Density\030\017 \001(\002\022\024\n\014LoginChannel"
    "\030\020 \001(\005\022\023\n\013CpuHardware\030\021 \001(\t\022\016\n\006Memory\030\022 "
    "\001(\005\022\020\n\010GLRender\030\023 \001(\t\022\021\n\tGLVersion\030\024 \001(\t"
    "\022\020\n\010DeviceId\030\025 \001(\t\022Q\n\004Type\030d \001(\0162!.SProt"
    "oSpace.EConomicAnalysisType: EConomicAna"
    "lysisType_PlayerLogin\"\240\004\n\030log_gather_pla"
    "yer_logout\022\021\n\tGameSvrId\030\001 \001(\t\022\023\n\013dtEvent"
    "Time\030\002 \001(\t\022\021\n\tGameAppID\030\003 \001(\t\022\016\n\006OpenID\030"
    "\004 \001(\t\022\022\n\nOnlineTime\030\005 \001(\005\022\r\n\005Level\030\006 \001(\005"
    "\022\030\n\020PlayerFriendsNum\030\007 \001(\005\022\016\n\006PlatID\030\010 \001"
    "(\005\022\025\n\rClientVersion\030\t \001(\t\022\026\n\016SystemSoftw"
    "are\030\n \001(\t\022\026\n\016SystemHardware\030\013 \001(\t\022\023\n\013Tel"
    "ecomOper\030\014 \001(\t\022\017\n\007Network\030\r \001(\t\022\023\n\013Scree"
    "nWidth\030\016 \001(\005\022\023\n\013ScreenHight\030\017 \001(\005\022\017\n\007Den"
    "sity\030\020 \001(\002\022\024\n\014LoginChannel\030\021 \001(\005\022\023\n\013CpuH"
    "ardware\030\022 \001(\t\022\016\n\006Memory\030\023 \001(\005\022\020\n\010GLRende"
    "r\030\024 \001(\t\022\021\n\tGLVersion\030\025 \001(\t\022\020\n\010DeviceId\030\026"
    " \001(\t\022R\n\004Type\030d \001(\0162!.SProtoSpace.EConomi"
    "cAnalysisType:!EConomicAnalysisType_Play"
    "erLogout\"\353\002\n\025log_gather_money_flow\022\021\n\tGa"
    "meSvrId\030\001 \001(\t\022\023\n\013dtEventTime\030\002 \001(\t\022\022\n\nvG"
    "ameAppID\030\003 \001(\t\022\016\n\006PlatID\030\004 \001(\005\022\023\n\013iZoneA"
    "reaID\030\005 \001(\005\022\017\n\007vopenid\030\006 \001(\t\022\020\n\010Sequence"
    "\030\010 \001(\005\022\r\n\005Level\030\t \001(\005\022\022\n\nAfterMOney\030\n \001("
    "\005\022\016\n\006iMoney\030\013 \001(\005\022\016\n\006Reason\030\014 \001(\005\022\021\n\tSub"
    "Reason\030\r \001(\005\022\023\n\013AddOrReduce\030\016 \001(\005\022\022\n\niMo"
    "neyType\030\017 \001(\005\022O\n\004Type\030d \001(\0162!.SProtoSpac"
    "e.EConomicAnalysisType:\036EConomicAnalysis"
    "Type_MoneyFlow\"\236\003\n\024log_gather_item_flow\022"
    "\021\n\tGameSvrId\030\001 \001(\t\022\023\n\013dtEventTime\030\002 \001(\t\022"
    "\022\n\nvGameAppID\030\003 \001(\t\022\016\n\006PlatID\030\004 \001(\005\022\023\n\013i"
    "ZoneAreaID\030\005 \001(\005\022\017\n\007vopenid\030\006 \001(\t\022\r\n\005Lev"
    "el\030\007 \001(\005\022\020\n\010Sequence\030\010 \001(\005\022\022\n\niGoodsType"
    "\030\t \001(\005\022\020\n\010iGoodsId\030\n \001(\005\022\r\n\005Count\030\013 \001(\005\022"
    "\022\n\nAfterCount\030\014 \001(\005\022\016\n\006Reason\030\r \001(\005\022\021\n\tS"
    "ubReason\030\016 \001(\005\022\016\n\006iMoney\030\017 \001(\005\022\022\n\niMoney"
    "Type\030\020 \001(\005\022\023\n\013AddOrReduce\030\021 \001(\005\022N\n\004Type\030"
    "d \001(\0162!.SProtoSpace.EConomicAnalysisType"
    ":\035EConomicAnalysisType_ItemFlow\"\300\002\n\032log_"
    "gather_item_money_flow\022\021\n\tGameSvrId\030\001 \001("
    "\t\022\023\n\013dtEventTime\030\002 \001(\t\022\020\n\010Sequence\030\003 \001(\005"
    "\022\021\n\tGameAppID\030\004 \001(\t\022\016\n\006OpenID\030\005 \001(\t\022\016\n\006P"
    "latID\030\006 \001(\005\022\020\n\010ItemType\030\007 \001(\005\022\016\n\006ItemId\030"
    "\010 \001(\005\022\r\n\005Count\030\t \001(\005\022\r\n\005Money\030\n \001(\005\022\r\n\005L"
    "evel\030\013 \001(\005\022\021\n\tMoneyType\030\014 \001(\005\022S\n\004Type\030d "
    "\001(\0162!.SProtoSpace.EConomicAnalysisType:\""
    "EConomicAnalysisType_ItemMoneyFlow\"\271\002\n\032l"
    "og_gather_player_exp_flow\022\021\n\tGameSvrId\030\001"
    " \001(\t\022\023\n\013dtEventTime\030\002 \001(\t\022\021\n\tGameAppID\030\003"
    " \001(\t\022\016\n\006OpenID\030\004 \001(\t\022\016\n\006PlatID\030\005 \001(\005\022\021\n\t"
    "ExpChange\030\006 \001(\005\022\023\n\013BeforeLevel\030\007 \001(\005\022\022\n\n"
    "AfterLevel\030\010 \001(\005\022\014\n\004Time\030\t \001(\005\022\016\n\006Reason"
    "\030\n \001(\005\022\021\n\tSubReason\030\013 \001(\005\022S\n\004Type\030d \001(\0162"
    "!.SProtoSpace.EConomicAnalysisType:\"ECon"
    "omicAnalysisType_PlayerExpFlow\"\210\002\n\023log_g"
    "ather_sns_flow\022\021\n\tGameSvrId\030\001 \001(\t\022\023\n\013dtE"
    "ventTime\030\002 \001(\t\022\021\n\tGameAppID\030\003 \001(\t\022\016\n\006Pla"
    "tID\030\004 \001(\005\022\023\n\013ActorOpenID\030\005 \001(\t\022\016\n\006RecNum"
    "\030\006 \001(\005\022\r\n\005Count\030\007 \001(\005\022\017\n\007SNSType\030\010 \001(\005\022\022"
    "\n\nSNSSubType\030\t \001(\005\022M\n\004Type\030d \001(\0162!.SProt"
    "oSpace.EConomicAnalysisType:\034EConomicAna"
    "lysisType_SnsFlow\"\274\002\n\025log_gather_round_f"
    "low\022\021\n\tGameSvrId\030\001 \001(\t\022\023\n\013dtEventTime\030\002 "
    "\001(\t\022\021\n\tGameAppID\030\003 \001(\t\022\016\n\006OpenID\030\004 \001(\t\022\016"
    "\n\006PlatID\030\005 \001(\005\022\020\n\010BattleID\030\006 \001(\005\022\022\n\nBatt"
    "leType\030\007 \001(\005\022\022\n\nRoundScore\030\010 \001(\005\022\021\n\tRoun"
    "dTime\030\t \001(\005\022\016\n\006Result\030\n \001(\005\022\014\n\004Rank\030\013 \001("
    "\005\022\014\n\004Gold\030\014 \001(\005\022O\n\004Type\030d \001(\0162!.SProtoSp"
    "ace.EConomicAnalysisType:\036EConomicAnalys"
    "isType_RoundFlow\"\256\002\n\024log_gather_role_inf"
    "o\022\023\n\010event_id\030\001 \001(\r:\0011\022\022\n\nevent_time\030\002 \001"
    "(\004\022\r\n\005appid\030\003 \001(\t\022\016\n\006openid\030\004 \001(\t\022\017\n\007zon"
    "e_id\030\005 \001(\r\022\021\n\tzone_name\030\006 \001(\t\022\020\n\010platfor"
    "m\030\007 \001(\r\022\014\n\004imei\030\010 \001(\t\022\r\n\005level\030\t \001(\r\022\014\n\004"
    "name\030\n \001(\t\022\023\n\013fight_value\030\013 \001(\004\022\022\n\nprofe"
    "ssion\030\014 \001(\t\022\021\n\tpay_total\030\r \001(\r\022\016\n\006coin_1"
    "\030\016 \001(\r\022\016\n\006coin_2\030\017 \001(\r\022\021\n\tvip_level\030\020 \001("
    "\r\"\353\001\n\024log_gather_task_info\022\023\n\010event_id\030\001"
    " \001(\r:\0012\022\022\n\nevent_time\030\002 \001(\004\022\r\n\005appid\030\003 \001"
    "(\t\022\016\n\006openid\030\004 \001(\t\022\017\n\007zone_id\030\005 \001(\r\022\021\n\tz"
    "one_name\030\006 \001(\t\022\020\n\010platform\030\007 \001(\r\022\014\n\004imei"
    "\030\010 \001(\t\022\017\n\007task_id\030\t \001(\r\022\021\n\ttask_name\030\n \001"
    "(\t\022\016\n\006status\030\013 \001(\r\022\023\n\013task_detail\030\014 \001(\t\""
    "\337\001\n\025log_gather_honor_info\022\023\n\010event_id\030\001 "
    "\001(\r:\0013\022\022\n\nevent_time\030\002 \001(\004\022\r\n\005appid\030\003 \001("
    "\t\022\016\n\006openid\030\004 \001(\t\022\017\n\007zone_id\030\005 \001(\r\022\021\n\tzo"
    "ne_name\030\006 \001(\t\022\020\n\010platform\030\007 \001(\r\022\014\n\004imei\030"
    "\010 \001(\t\022\020\n\010honor_id\030\t \001(\r\022\022\n\nhonor_name\030\n "
    "\001(\t\022\024\n\014honor_detail\030\013 \001(\r\"\357\001\n\030log_gather"
    "_level_up_info\022\023\n\010event_id\030\001 \001(\r:\0014\022\022\n\ne"
    "vent_time\030\002 \001(\004\022\r\n\005appid\030\003 \001(\t\022\016\n\006openid"
    "\030\004 \001(\t\022\017\n\007zone_id\030\005 \001(\r\022\021\n\tzone_name\030\006 \001"
    "(\t\022\020\n\010platform\030\007 \001(\r\022\014\n\004imei\030\010 \001(\t\022\021\n\tne"
    "w_level\030\t \001(\r\022\014\n\004name\030\n \001(\t\022\021\n\told_level"
    "\030\013 \001(\r\022\023\n\013detail_desc\030\014 \001(\t\"\227\002\n\023log_gath"
    "er_buy_info\022\023\n\010event_id\030\001 \001(\r:\0015\022\022\n\neven"
    "t_time\030\002 \001(\004\022\r\n\005appid\030\003 \001(\t\022\016\n\006openid\030\004 "
    "\001(\t\022\017\n\007zone_id\030\005 \001(\r\022\021\n\tzone_name\030\006 \001(\t\022"
    "\020\n\010platform\030\007 \001(\r\022\014\n\004imei\030\010 \001(\t\022\r\n\005level"
    "\030\t \001(\r\022\014\n\004name\030\n \001(\t\022\017\n\007item_id\030\013 \001(\r\022\021\n"
    "\titem_name\030\014 \001(\t\022\022\n\nitem_count\030\r \001(\r\022\014\n\004"
    "cost\030\016 \001(\r\022\021\n\tleft_coin\030\017 \001(\r\"p\n\026allocat"
    "e_chat_room_req\022D\n\010proto_id\030\001 \001(\0162\027.SPro"
    "toSpace.ESSProtoID:\031allocate_chat_room_r"
    "eq_id\022\020\n\010room_ids\030\002 \003(\005\"}\n\026allocate_chat"
    "_room_ack\022D\n\010proto_id\030\001 \001(\0162\027.SProtoSpac"
    "e.ESSProtoID:\031allocate_chat_room_ack_id\022"
    "\013\n\003ret\030\002 \001(\005\022\020\n\010room_ids\030\003 \003(\005\"\204\001\n\030gs_ge"
    "t_role_position_req\022F\n\010proto_id\030\001 \001(\0162\027."
    "SProtoSpace.ESSProtoID:\033gs_get_role_posi"
    "tion_req_id\022\017\n\007dest_id\030\002 \001(\004\022\017\n\007sour_id\030"
    "\003 \001(\004\"\277\001\n\030gs_get_role_position_ack\022F\n\010pr"
    "oto_id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\033g"
    "s_get_role_position_ack_id\022\013\n\003ret\030\002 \001(\r\022"
    "\017\n\007room_id\030\003 \001(\005\022,\n\010dest_pos\030\004 \001(\0132\032.SPr"
    "otoSpace.role_position\022\017\n\007sour_id\030\005 \001(\004\""
    "\206\001\n\rred_pt_ss_ntf\022:\n\007protoid\030\001 \001(\0162\027.SPr"
    "otoSpace.ESSProtoID:\020red_pt_ss_ntf_id\022\017\n"
    "\007role_id\030\002 \001(\004\022(\n\005infos\030\003 \001(\0132\031.SProtoSp"
    "ace.red_pt_infos\"\223\001\n\035get_other_role_fash"
    "ion_ss_req\022J\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ESSProtoID: get_other_role_fashion_ss_"
    "req_id\022\021\n\trole_id_s\030\002 \003(\004\022\023\n\013role_name_s"
    "\030\003 \003(\t\"\322\001\n\035get_other_role_fashion_ss_ack"
    "\022J\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProto"
    "ID: get_other_role_fashion_ss_ack_id\0226\n\022"
    "fashions_p_wearing\030\002 \001(\0132\032.SProtoSpace.f"
    "ashions_pack\022-\n\nerror_code\030\003 \001(\0162\031.SProt"
    "oSpace.MsgErrorType\"\242\001\n\013gs_chat_req\0228\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\016g"
    "s_chat_req_id\022$\n\004type\030\002 \001(\0162\026.SProtoSpac"
    "e.CHAT_TYPE\022\021\n\tmodule_id\030\003 \001(\004\022\017\n\007conten"
    "t\030\004 \001(\t\022\017\n\007role_id\030\005 \001(\004\"\265\001\n\013gs_chat_ack"
    "\0228\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProto"
    "ID:\016gs_chat_ack_id\022$\n\004type\030\002 \001(\0162\026.SProt"
    "oSpace.CHAT_TYPE\022\017\n\007content\030\003 \001(\t\0225\n\tsou"
    "r_data\030\004 \001(\0132\".SProtoSpace.public_role_b"
    "ase_info\"n\n\027user_event_track_ss_ntf\022D\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\032u"
    "ser_event_track_ss_ntf_id\022\r\n\005log_s\030\002 \003(\t"
    "*p\n\rELogEventType\022\021\n\rLogEvtTP_Base\020\000\022\021\n\r"
    "LogEvtTP_Task\020\001\022\022\n\016LogEvtTP_Honor\020\002\022\022\n\016L"
    "ogEvtTP_Level\020\003\022\021\n\rLogEvtTP_Shop\020\004*\210\003\n\024E"
    "ConomicAnalysisType\022\035\n\031EConomicAnalysisT"
    "ype_None\020\000\022\'\n#EConomicAnalysisType_Playe"
    "rRegister\020\001\022$\n EConomicAnalysisType_Play"
    "erLogin\020\002\022%\n!EConomicAnalysisType_Player"
    "Logout\020\003\022\"\n\036EConomicAnalysisType_MoneyFl"
    "ow\020\004\022!\n\035EConomicAnalysisType_ItemFlow\020\005\022"
    "&\n\"EConomicAnalysisType_ItemMoneyFlow\020\006\022"
    "&\n\"EConomicAnalysisType_PlayerExpFlow\020\007\022"
    " \n\034EConomicAnalysisType_SnsFlow\020\010\022\"\n\036ECo"
    "nomicAnalysisType_RoundFlow\020\t*\376\016\n\021EAddIt"
    "emReasonLv1\022\032\n\026EAddItemReasonLv1_None\020\000\022"
    "\'\n#EAddItemReasonLv1_AchievementFinish\020\013"
    "\022*\n&EAddItemReasonLv1_AchievementGetRewa"
    "rd\020\014\022,\n(EAddItemReasonLv1_AchievementGet"
    "PtReward\020\r\022,\n(EAddItemReasonLv1_DrawCard"
    "FreeGoldSingle\020\025\022.\n*EAddItemReasonLv1_Dr"
    "awCardChargeGoldSingle\020\026\0223\n/EAddItemReas"
    "onLv1_DrawCardChargeGoldConsecutive\020\027\022,\n"
    "(EAddItemReasonLv1_DrawCardFreeJadeSingl"
    "e\020\030\022.\n*EAddItemReasonLv1_DrawCardChargeJ"
    "adeSingle\020\031\0223\n/EAddItemReasonLv1_DrawCar"
    "dChargeJadeConsecutive\020\032\022$\n EAddItemReas"
    "onLv1_BuyGiftPackage\020\037\022\035\n\031EAddItemReason"
    "Lv1_BuyJade\020 \022$\n EAddItemReasonLv1_RoleF"
    "ashionBuy\020)\022%\n!EAddItemReasonLv1_RoleFas"
    "hionWear\020*\022\034\n\030EAddItemReasonLv1_SignIn\0203"
    "\022 \n\034EAddItemReasonLv1_SignMakeUp\0204\022(\n$EA"
    "ddItemReasonLv1_MainLineTaskFinish\020=\022+\n\'"
    "EAddItemReasonLv1_MainLineTaskGetReward\020"
    ">\022(\n$EAddItemReasonLv1_SideLineTaskFinis"
    "h\020\?\022+\n\'EAddItemReasonLv1_SideLineTaskGet"
    "Reward\020@\022\'\n#EAddItemReasonLv1_QiJuZhuFin"
    "ishTask\020G\022*\n&EAddItemReasonLv1_QiJuZhuGe"
    "tTaskReward\020H\022.\n*EAddItemReasonLv1_QiJuZ"
    "huGetActiviryReward\020I\022\035\n\031EAddItemReasonL"
    "v1_BuyItem\020Q\022!\n\035EAddItemReasonLv1_SnsSen"
    "dGift\020[\022 \n\034EAddItemReasonLv1_SnsThumbUp\020"
    "\\\022!\n\035EAddItemReasonLv1_SnsSendMail\020]\022$\n "
    "EAddItemReasonLv1_StageFirstPass\020e\022!\n\035EA"
    "ddItemReasonLv1_StageRePass\020f\022\"\n\036EAddIte"
    "mReasonLv1_StageMopping\020g\022#\n\037EAddItemRea"
    "sonLv1_StageFailPass\020h\022*\n&EAddItemReason"
    "Lv1_StageGet3StarsReward\020i\022%\n!EAddItemRe"
    "asonLv1_EventTaskFinish\020o\022(\n$EAddItemRea"
    "sonLv1_EventTaskGetReward\020p\022!\n\035EAddItemR"
    "easonLv1_OfficeApply\020y\022 \n\034EAddItemReason"
    "Lv1_OfficePass\020z\022 \n\034EAddItemReasonLv1_Of"
    "ficeFail\020{\022$\n\037EAddItemReasonLv1_TowerGet"
    "Chest\020\203\001\022(\n#EAddItemReasonLv1_TowerPassQ"
    "uestion\020\204\001\022,\n\'EAddItemReasonLv1_TowerCha"
    "llengeSucceed\020\205\001\022)\n$EAddItemReasonLv1_To"
    "werChallengeFail\020\206\001\022#\n\036EAddItemReasonLv1"
    "_Chat3DHangUp\020\215\001\022!\n\034EAddItemReasonLv1_He"
    "roAddExp\020\241\001\022!\n\034EAddItemReasonLv1_HeroSta"
    "rUp\020\242\001\022$\n\037EAddItemReasonLv1_HeroQualityU"
    "p\020\243\001\022%\n EAddItemReasonLv1_HeroTalismanUp"
    "\020\244\001\022\037\n\032EAddItemReasonLv1_RoyalWin\020\253\001\022 \n\033"
    "EAddItemReasonLv1_RoyalLose\020\254\001", 11590);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ss_game.proto", &protobuf_RegisterTypes);
  role_enter_game_server::default_instance_ = new role_enter_game_server();
  gt_enter_game_ack::default_instance_ = new gt_enter_game_ack();
  gs_create_scene_req::default_instance_ = new gs_create_scene_req();
  gs_create_scene_ack::default_instance_ = new gs_create_scene_ack();
  gs_kick_role_req::default_instance_ = new gs_kick_role_req();
  gs_kick_role_ack::default_instance_ = new gs_kick_role_ack();
  gs_broadcast_req::default_instance_ = new gs_broadcast_req();
  gs_change_name_req::default_instance_ = new gs_change_name_req();
  gt_change_name_ret::default_instance_ = new gt_change_name_ret();
  gs_jump_to_cross_game_req::default_instance_ = new gs_jump_to_cross_game_req();
  gt_kick_role_ntf::default_instance_ = new gt_kick_role_ntf();
  gs_player_num_ntf::default_instance_ = new gs_player_num_ntf();
  gate_forward_search_req::default_instance_ = new gate_forward_search_req();
  log_gather_info::default_instance_ = new log_gather_info();
  log_gather_player_register::default_instance_ = new log_gather_player_register();
  log_gather_player_login::default_instance_ = new log_gather_player_login();
  log_gather_player_logout::default_instance_ = new log_gather_player_logout();
  log_gather_money_flow::default_instance_ = new log_gather_money_flow();
  log_gather_item_flow::default_instance_ = new log_gather_item_flow();
  log_gather_item_money_flow::default_instance_ = new log_gather_item_money_flow();
  log_gather_player_exp_flow::default_instance_ = new log_gather_player_exp_flow();
  log_gather_sns_flow::default_instance_ = new log_gather_sns_flow();
  log_gather_round_flow::default_instance_ = new log_gather_round_flow();
  log_gather_role_info::default_instance_ = new log_gather_role_info();
  log_gather_task_info::default_instance_ = new log_gather_task_info();
  log_gather_honor_info::default_instance_ = new log_gather_honor_info();
  log_gather_level_up_info::default_instance_ = new log_gather_level_up_info();
  log_gather_buy_info::default_instance_ = new log_gather_buy_info();
  allocate_chat_room_req::default_instance_ = new allocate_chat_room_req();
  allocate_chat_room_ack::default_instance_ = new allocate_chat_room_ack();
  gs_get_role_position_req::default_instance_ = new gs_get_role_position_req();
  gs_get_role_position_ack::default_instance_ = new gs_get_role_position_ack();
  red_pt_ss_ntf::default_instance_ = new red_pt_ss_ntf();
  get_other_role_fashion_ss_req::default_instance_ = new get_other_role_fashion_ss_req();
  get_other_role_fashion_ss_ack::default_instance_ = new get_other_role_fashion_ss_ack();
  gs_chat_req::default_instance_ = new gs_chat_req();
  gs_chat_ack::default_instance_ = new gs_chat_ack();
  user_event_track_ss_ntf::default_instance_ = new user_event_track_ss_ntf();
  role_enter_game_server::default_instance_->InitAsDefaultInstance();
  gt_enter_game_ack::default_instance_->InitAsDefaultInstance();
  gs_create_scene_req::default_instance_->InitAsDefaultInstance();
  gs_create_scene_ack::default_instance_->InitAsDefaultInstance();
  gs_kick_role_req::default_instance_->InitAsDefaultInstance();
  gs_kick_role_ack::default_instance_->InitAsDefaultInstance();
  gs_broadcast_req::default_instance_->InitAsDefaultInstance();
  gs_change_name_req::default_instance_->InitAsDefaultInstance();
  gt_change_name_ret::default_instance_->InitAsDefaultInstance();
  gs_jump_to_cross_game_req::default_instance_->InitAsDefaultInstance();
  gt_kick_role_ntf::default_instance_->InitAsDefaultInstance();
  gs_player_num_ntf::default_instance_->InitAsDefaultInstance();
  gate_forward_search_req::default_instance_->InitAsDefaultInstance();
  log_gather_info::default_instance_->InitAsDefaultInstance();
  log_gather_player_register::default_instance_->InitAsDefaultInstance();
  log_gather_player_login::default_instance_->InitAsDefaultInstance();
  log_gather_player_logout::default_instance_->InitAsDefaultInstance();
  log_gather_money_flow::default_instance_->InitAsDefaultInstance();
  log_gather_item_flow::default_instance_->InitAsDefaultInstance();
  log_gather_item_money_flow::default_instance_->InitAsDefaultInstance();
  log_gather_player_exp_flow::default_instance_->InitAsDefaultInstance();
  log_gather_sns_flow::default_instance_->InitAsDefaultInstance();
  log_gather_round_flow::default_instance_->InitAsDefaultInstance();
  log_gather_role_info::default_instance_->InitAsDefaultInstance();
  log_gather_task_info::default_instance_->InitAsDefaultInstance();
  log_gather_honor_info::default_instance_->InitAsDefaultInstance();
  log_gather_level_up_info::default_instance_->InitAsDefaultInstance();
  log_gather_buy_info::default_instance_->InitAsDefaultInstance();
  allocate_chat_room_req::default_instance_->InitAsDefaultInstance();
  allocate_chat_room_ack::default_instance_->InitAsDefaultInstance();
  gs_get_role_position_req::default_instance_->InitAsDefaultInstance();
  gs_get_role_position_ack::default_instance_->InitAsDefaultInstance();
  red_pt_ss_ntf::default_instance_->InitAsDefaultInstance();
  get_other_role_fashion_ss_req::default_instance_->InitAsDefaultInstance();
  get_other_role_fashion_ss_ack::default_instance_->InitAsDefaultInstance();
  gs_chat_req::default_instance_->InitAsDefaultInstance();
  gs_chat_ack::default_instance_->InitAsDefaultInstance();
  user_event_track_ss_ntf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ss_5fgame_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ss_5fgame_2eproto {
  StaticDescriptorInitializer_ss_5fgame_2eproto() {
    protobuf_AddDesc_ss_5fgame_2eproto();
  }
} static_descriptor_initializer_ss_5fgame_2eproto_;
const ::google::protobuf::EnumDescriptor* ELogEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ELogEventType_descriptor_;
}
bool ELogEventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EConomicAnalysisType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EConomicAnalysisType_descriptor_;
}
bool EConomicAnalysisType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAddItemReasonLv1_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAddItemReasonLv1_descriptor_;
}
bool EAddItemReasonLv1_IsValid(int value) {
  switch(value) {
    case 0:
    case 11:
    case 12:
    case 13:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 31:
    case 32:
    case 41:
    case 42:
    case 51:
    case 52:
    case 61:
    case 62:
    case 63:
    case 64:
    case 71:
    case 72:
    case 73:
    case 81:
    case 91:
    case 92:
    case 93:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 111:
    case 112:
    case 121:
    case 122:
    case 123:
    case 131:
    case 132:
    case 133:
    case 134:
    case 141:
    case 161:
    case 162:
    case 163:
    case 164:
    case 171:
    case 172:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int role_enter_game_server::kProtoidFieldNumber;
const int role_enter_game_server::kRoleIdFieldNumber;
const int role_enter_game_server::kAreaIdFieldNumber;
const int role_enter_game_server::kDbSvrIdFieldNumber;
const int role_enter_game_server::kIsReconnectFieldNumber;
const int role_enter_game_server::kIsSwitchSceneFieldNumber;
const int role_enter_game_server::kSceneIdFieldNumber;
const int role_enter_game_server::kSceneTypeFieldNumber;
#endif  // !_MSC_VER

role_enter_game_server::role_enter_game_server()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_enter_game_server::InitAsDefaultInstance() {
}

role_enter_game_server::role_enter_game_server(const role_enter_game_server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_enter_game_server::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 700;
  role_id_ = GOOGLE_ULONGLONG(0);
  area_id_ = 0u;
  db_svr_id_ = GOOGLE_ULONGLONG(0);
  is_reconnect_ = false;
  is_switch_scene_ = false;
  scene_id_ = 0u;
  scene_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_enter_game_server::~role_enter_game_server() {
  SharedDtor();
}

void role_enter_game_server::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_enter_game_server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_enter_game_server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_enter_game_server_descriptor_;
}

const role_enter_game_server& role_enter_game_server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

role_enter_game_server* role_enter_game_server::default_instance_ = NULL;

role_enter_game_server* role_enter_game_server::New() const {
  return new role_enter_game_server;
}

void role_enter_game_server::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 700;
    role_id_ = GOOGLE_ULONGLONG(0);
    area_id_ = 0u;
    db_svr_id_ = GOOGLE_ULONGLONG(0);
    is_reconnect_ = false;
    is_switch_scene_ = false;
    scene_id_ = 0u;
    scene_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_enter_game_server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = role_enter_game_server_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_db_svr_id;
        break;
      }

      // optional uint64 db_svr_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_db_svr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_svr_id_)));
          set_has_db_svr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_reconnect;
        break;
      }

      // optional bool is_reconnect = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_reconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reconnect_)));
          set_has_is_reconnect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_switch_scene;
        break;
      }

      // optional bool is_switch_scene = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_switch_scene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_switch_scene_)));
          set_has_is_switch_scene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_scene_type;
        break;
      }

      // optional uint32 scene_type = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_type_)));
          set_has_scene_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_enter_game_server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = role_enter_game_server_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area_id(), output);
  }

  // optional uint64 db_svr_id = 4;
  if (has_db_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->db_svr_id(), output);
  }

  // optional bool is_reconnect = 5;
  if (has_is_reconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_reconnect(), output);
  }

  // optional bool is_switch_scene = 6 [default = false];
  if (has_is_switch_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_switch_scene(), output);
  }

  // optional uint32 scene_id = 7 [default = 0];
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->scene_id(), output);
  }

  // optional uint32 scene_type = 8 [default = 0];
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->scene_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_enter_game_server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = role_enter_game_server_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area_id(), target);
  }

  // optional uint64 db_svr_id = 4;
  if (has_db_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->db_svr_id(), target);
  }

  // optional bool is_reconnect = 5;
  if (has_is_reconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_reconnect(), target);
  }

  // optional bool is_switch_scene = 6 [default = false];
  if (has_is_switch_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_switch_scene(), target);
  }

  // optional uint32 scene_id = 7 [default = 0];
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->scene_id(), target);
  }

  // optional uint32 scene_type = 8 [default = 0];
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->scene_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_enter_game_server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = role_enter_game_server_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 area_id = 3;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional uint64 db_svr_id = 4;
    if (has_db_svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->db_svr_id());
    }

    // optional bool is_reconnect = 5;
    if (has_is_reconnect()) {
      total_size += 1 + 1;
    }

    // optional bool is_switch_scene = 6 [default = false];
    if (has_is_switch_scene()) {
      total_size += 1 + 1;
    }

    // optional uint32 scene_id = 7 [default = 0];
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional uint32 scene_type = 8 [default = 0];
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_enter_game_server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_enter_game_server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_enter_game_server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_enter_game_server::MergeFrom(const role_enter_game_server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_db_svr_id()) {
      set_db_svr_id(from.db_svr_id());
    }
    if (from.has_is_reconnect()) {
      set_is_reconnect(from.is_reconnect());
    }
    if (from.has_is_switch_scene()) {
      set_is_switch_scene(from.is_switch_scene());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_enter_game_server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_enter_game_server::CopyFrom(const role_enter_game_server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_enter_game_server::IsInitialized() const {

  return true;
}

void role_enter_game_server::Swap(role_enter_game_server* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(area_id_, other->area_id_);
    std::swap(db_svr_id_, other->db_svr_id_);
    std::swap(is_reconnect_, other->is_reconnect_);
    std::swap(is_switch_scene_, other->is_switch_scene_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_enter_game_server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_enter_game_server_descriptor_;
  metadata.reflection = role_enter_game_server_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gt_enter_game_ack::kProtoidFieldNumber;
const int gt_enter_game_ack::kRoleIdFieldNumber;
const int gt_enter_game_ack::kRoleNameFieldNumber;
const int gt_enter_game_ack::kRetFieldNumber;
#endif  // !_MSC_VER

gt_enter_game_ack::gt_enter_game_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gt_enter_game_ack::InitAsDefaultInstance() {
}

gt_enter_game_ack::gt_enter_game_ack(const gt_enter_game_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gt_enter_game_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 709;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gt_enter_game_ack::~gt_enter_game_ack() {
  SharedDtor();
}

void gt_enter_game_ack::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void gt_enter_game_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gt_enter_game_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gt_enter_game_ack_descriptor_;
}

const gt_enter_game_ack& gt_enter_game_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

gt_enter_game_ack* gt_enter_game_ack::default_instance_ = NULL;

gt_enter_game_ack* gt_enter_game_ack::New() const {
  return new gt_enter_game_ack;
}

void gt_enter_game_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 709;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gt_enter_game_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_enter_game_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional int32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gt_enter_game_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_enter_game_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gt_enter_game_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_enter_game_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gt_enter_game_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_enter_game_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional int32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gt_enter_game_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gt_enter_game_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gt_enter_game_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gt_enter_game_ack::MergeFrom(const gt_enter_game_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gt_enter_game_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gt_enter_game_ack::CopyFrom(const gt_enter_game_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gt_enter_game_ack::IsInitialized() const {

  return true;
}

void gt_enter_game_ack::Swap(gt_enter_game_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gt_enter_game_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gt_enter_game_ack_descriptor_;
  metadata.reflection = gt_enter_game_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_create_scene_req::kProtoidFieldNumber;
const int gs_create_scene_req::kCreateTypeFieldNumber;
const int gs_create_scene_req::kSceneIdFieldNumber;
const int gs_create_scene_req::kSceneTypeFieldNumber;
const int gs_create_scene_req::kParamFieldNumber;
const int gs_create_scene_req::kLastTimeFieldNumber;
#endif  // !_MSC_VER

gs_create_scene_req::gs_create_scene_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_create_scene_req::InitAsDefaultInstance() {
}

gs_create_scene_req::gs_create_scene_req(const gs_create_scene_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_create_scene_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1650;
  create_type_ = 0u;
  scene_id_ = 0u;
  scene_type_ = 0u;
  param_ = 0u;
  last_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_create_scene_req::~gs_create_scene_req() {
  SharedDtor();
}

void gs_create_scene_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_create_scene_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_create_scene_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_create_scene_req_descriptor_;
}

const gs_create_scene_req& gs_create_scene_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

gs_create_scene_req* gs_create_scene_req::default_instance_ = NULL;

gs_create_scene_req* gs_create_scene_req::New() const {
  return new gs_create_scene_req;
}

void gs_create_scene_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1650;
    create_type_ = 0u;
    scene_id_ = 0u;
    scene_type_ = 0u;
    param_ = 0u;
    last_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_create_scene_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_scene_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_create_type;
        break;
      }

      // optional uint32 create_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_type_)));
          set_has_create_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_type;
        break;
      }

      // optional uint32 scene_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_type_)));
          set_has_scene_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_param;
        break;
      }

      // optional uint32 param = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_time;
        break;
      }

      // optional uint32 last_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_create_scene_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_scene_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 create_type = 2;
  if (has_create_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->create_type(), output);
  }

  // optional uint32 scene_id = 3;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene_id(), output);
  }

  // optional uint32 scene_type = 4;
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene_type(), output);
  }

  // optional uint32 param = 5;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->param(), output);
  }

  // optional uint32 last_time = 6;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->last_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_create_scene_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_scene_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 create_type = 2;
  if (has_create_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->create_type(), target);
  }

  // optional uint32 scene_id = 3;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene_id(), target);
  }

  // optional uint32 scene_type = 4;
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene_type(), target);
  }

  // optional uint32 param = 5;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->param(), target);
  }

  // optional uint32 last_time = 6;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->last_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_create_scene_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_scene_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 create_type = 2;
    if (has_create_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_type());
    }

    // optional uint32 scene_id = 3;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional uint32 scene_type = 4;
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_type());
    }

    // optional uint32 param = 5;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }

    // optional uint32 last_time = 6;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_create_scene_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_create_scene_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_create_scene_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_create_scene_req::MergeFrom(const gs_create_scene_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_create_type()) {
      set_create_type(from.create_type());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_create_scene_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_create_scene_req::CopyFrom(const gs_create_scene_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_create_scene_req::IsInitialized() const {

  return true;
}

void gs_create_scene_req::Swap(gs_create_scene_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(create_type_, other->create_type_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(param_, other->param_);
    std::swap(last_time_, other->last_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_create_scene_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_create_scene_req_descriptor_;
  metadata.reflection = gs_create_scene_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_create_scene_ack::kProtoidFieldNumber;
const int gs_create_scene_ack::kCreateTypeFieldNumber;
const int gs_create_scene_ack::kSceneIdFieldNumber;
const int gs_create_scene_ack::kSceneTypeFieldNumber;
const int gs_create_scene_ack::kParamFieldNumber;
const int gs_create_scene_ack::kLastTimeFieldNumber;
const int gs_create_scene_ack::kRetFieldNumber;
#endif  // !_MSC_VER

gs_create_scene_ack::gs_create_scene_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_create_scene_ack::InitAsDefaultInstance() {
}

gs_create_scene_ack::gs_create_scene_ack(const gs_create_scene_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_create_scene_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1651;
  create_type_ = 0u;
  scene_id_ = 0u;
  scene_type_ = 0u;
  param_ = 0u;
  last_time_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_create_scene_ack::~gs_create_scene_ack() {
  SharedDtor();
}

void gs_create_scene_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_create_scene_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_create_scene_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_create_scene_ack_descriptor_;
}

const gs_create_scene_ack& gs_create_scene_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

gs_create_scene_ack* gs_create_scene_ack::default_instance_ = NULL;

gs_create_scene_ack* gs_create_scene_ack::New() const {
  return new gs_create_scene_ack;
}

void gs_create_scene_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1651;
    create_type_ = 0u;
    scene_id_ = 0u;
    scene_type_ = 0u;
    param_ = 0u;
    last_time_ = 0u;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_create_scene_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_scene_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_create_type;
        break;
      }

      // optional uint32 create_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_type_)));
          set_has_create_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_type;
        break;
      }

      // optional uint32 scene_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_type_)));
          set_has_scene_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_param;
        break;
      }

      // optional uint32 param = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_time;
        break;
      }

      // optional uint32 last_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_create_scene_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_scene_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 create_type = 2;
  if (has_create_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->create_type(), output);
  }

  // optional uint32 scene_id = 3;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene_id(), output);
  }

  // optional uint32 scene_type = 4;
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene_type(), output);
  }

  // optional uint32 param = 5;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->param(), output);
  }

  // optional uint32 last_time = 6;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->last_time(), output);
  }

  // optional uint32 ret = 7;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_create_scene_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_scene_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 create_type = 2;
  if (has_create_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->create_type(), target);
  }

  // optional uint32 scene_id = 3;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene_id(), target);
  }

  // optional uint32 scene_type = 4;
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene_type(), target);
  }

  // optional uint32 param = 5;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->param(), target);
  }

  // optional uint32 last_time = 6;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->last_time(), target);
  }

  // optional uint32 ret = 7;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_create_scene_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_scene_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 create_type = 2;
    if (has_create_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_type());
    }

    // optional uint32 scene_id = 3;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional uint32 scene_type = 4;
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_type());
    }

    // optional uint32 param = 5;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }

    // optional uint32 last_time = 6;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time());
    }

    // optional uint32 ret = 7;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_create_scene_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_create_scene_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_create_scene_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_create_scene_ack::MergeFrom(const gs_create_scene_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_create_type()) {
      set_create_type(from.create_type());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_create_scene_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_create_scene_ack::CopyFrom(const gs_create_scene_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_create_scene_ack::IsInitialized() const {

  return true;
}

void gs_create_scene_ack::Swap(gs_create_scene_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(create_type_, other->create_type_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(param_, other->param_);
    std::swap(last_time_, other->last_time_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_create_scene_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_create_scene_ack_descriptor_;
  metadata.reflection = gs_create_scene_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_kick_role_req::kProtoidFieldNumber;
const int gs_kick_role_req::kReasonFieldNumber;
const int gs_kick_role_req::kSceneIdFieldNumber;
const int gs_kick_role_req::kSceneTypeFieldNumber;
const int gs_kick_role_req::kGameIdFieldNumber;
#endif  // !_MSC_VER

gs_kick_role_req::gs_kick_role_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_kick_role_req::InitAsDefaultInstance() {
}

gs_kick_role_req::gs_kick_role_req(const gs_kick_role_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_kick_role_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1652;
  reason_ = 0u;
  scene_id_ = 0u;
  scene_type_ = 0u;
  game_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_kick_role_req::~gs_kick_role_req() {
  SharedDtor();
}

void gs_kick_role_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_kick_role_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_kick_role_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_kick_role_req_descriptor_;
}

const gs_kick_role_req& gs_kick_role_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

gs_kick_role_req* gs_kick_role_req::default_instance_ = NULL;

gs_kick_role_req* gs_kick_role_req::New() const {
  return new gs_kick_role_req;
}

void gs_kick_role_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1652;
    reason_ = 0u;
    scene_id_ = 0u;
    scene_type_ = 0u;
    game_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_kick_role_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_kick_role_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_type;
        break;
      }

      // optional uint32 scene_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_type_)));
          set_has_scene_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_game_id;
        break;
      }

      // optional uint64 game_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_kick_role_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_kick_role_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }

  // optional uint32 scene_id = 3;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene_id(), output);
  }

  // optional uint32 scene_type = 4;
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene_type(), output);
  }

  // optional uint64 game_id = 5;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_kick_role_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_kick_role_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reason(), target);
  }

  // optional uint32 scene_id = 3;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene_id(), target);
  }

  // optional uint32 scene_type = 4;
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene_type(), target);
  }

  // optional uint64 game_id = 5;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_kick_role_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_kick_role_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

    // optional uint32 scene_id = 3;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional uint32 scene_type = 4;
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_type());
    }

    // optional uint64 game_id = 5;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_kick_role_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_kick_role_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_kick_role_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_kick_role_req::MergeFrom(const gs_kick_role_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_kick_role_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_kick_role_req::CopyFrom(const gs_kick_role_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_kick_role_req::IsInitialized() const {

  return true;
}

void gs_kick_role_req::Swap(gs_kick_role_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(reason_, other->reason_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_kick_role_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_kick_role_req_descriptor_;
  metadata.reflection = gs_kick_role_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_kick_role_ack::kProtoidFieldNumber;
const int gs_kick_role_ack::kReasonFieldNumber;
const int gs_kick_role_ack::kRetFieldNumber;
const int gs_kick_role_ack::kSceneIdFieldNumber;
const int gs_kick_role_ack::kSceneTypeFieldNumber;
const int gs_kick_role_ack::kGameIdFieldNumber;
#endif  // !_MSC_VER

gs_kick_role_ack::gs_kick_role_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_kick_role_ack::InitAsDefaultInstance() {
}

gs_kick_role_ack::gs_kick_role_ack(const gs_kick_role_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_kick_role_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1653;
  reason_ = 0u;
  ret_ = 0u;
  scene_id_ = 0u;
  scene_type_ = 0u;
  game_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_kick_role_ack::~gs_kick_role_ack() {
  SharedDtor();
}

void gs_kick_role_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_kick_role_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_kick_role_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_kick_role_ack_descriptor_;
}

const gs_kick_role_ack& gs_kick_role_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

gs_kick_role_ack* gs_kick_role_ack::default_instance_ = NULL;

gs_kick_role_ack* gs_kick_role_ack::New() const {
  return new gs_kick_role_ack;
}

void gs_kick_role_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1653;
    reason_ = 0u;
    ret_ = 0u;
    scene_id_ = 0u;
    scene_type_ = 0u;
    game_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_kick_role_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_kick_role_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scene_type;
        break;
      }

      // optional uint32 scene_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_type_)));
          set_has_scene_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_game_id;
        break;
      }

      // optional uint64 game_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_kick_role_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_kick_role_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  // optional uint32 scene_id = 4;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene_id(), output);
  }

  // optional uint32 scene_type = 5;
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->scene_type(), output);
  }

  // optional uint64 game_id = 6;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_kick_role_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_kick_role_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reason(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  // optional uint32 scene_id = 4;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene_id(), target);
  }

  // optional uint32 scene_type = 5;
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->scene_type(), target);
  }

  // optional uint64 game_id = 6;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_kick_role_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_kick_role_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 scene_id = 4;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional uint32 scene_type = 5;
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_type());
    }

    // optional uint64 game_id = 6;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_kick_role_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_kick_role_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_kick_role_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_kick_role_ack::MergeFrom(const gs_kick_role_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_kick_role_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_kick_role_ack::CopyFrom(const gs_kick_role_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_kick_role_ack::IsInitialized() const {

  return true;
}

void gs_kick_role_ack::Swap(gs_kick_role_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(reason_, other->reason_);
    std::swap(ret_, other->ret_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_kick_role_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_kick_role_ack_descriptor_;
  metadata.reflection = gs_kick_role_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_broadcast_req::kProtoidFieldNumber;
const int gs_broadcast_req::kProtoFieldNumber;
#endif  // !_MSC_VER

gs_broadcast_req::gs_broadcast_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_broadcast_req::InitAsDefaultInstance() {
}

gs_broadcast_req::gs_broadcast_req(const gs_broadcast_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_broadcast_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 701;
  proto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_broadcast_req::~gs_broadcast_req() {
  SharedDtor();
}

void gs_broadcast_req::SharedDtor() {
  if (proto_ != &::google::protobuf::internal::kEmptyString) {
    delete proto_;
  }
  if (this != default_instance_) {
  }
}

void gs_broadcast_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_broadcast_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_broadcast_req_descriptor_;
}

const gs_broadcast_req& gs_broadcast_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

gs_broadcast_req* gs_broadcast_req::default_instance_ = NULL;

gs_broadcast_req* gs_broadcast_req::New() const {
  return new gs_broadcast_req;
}

void gs_broadcast_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 701;
    if (has_proto()) {
      if (proto_ != &::google::protobuf::internal::kEmptyString) {
        proto_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_broadcast_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_broadcast_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_proto;
        break;
      }

      // optional bytes proto = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_broadcast_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_broadcast_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional bytes proto = 2;
  if (has_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->proto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_broadcast_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_broadcast_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional bytes proto = 2;
  if (has_proto()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->proto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_broadcast_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_broadcast_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional bytes proto = 2;
    if (has_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->proto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_broadcast_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_broadcast_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_broadcast_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_broadcast_req::MergeFrom(const gs_broadcast_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_proto()) {
      set_proto(from.proto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_broadcast_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_broadcast_req::CopyFrom(const gs_broadcast_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_broadcast_req::IsInitialized() const {

  return true;
}

void gs_broadcast_req::Swap(gs_broadcast_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(proto_, other->proto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_broadcast_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_broadcast_req_descriptor_;
  metadata.reflection = gs_broadcast_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_change_name_req::kProtoidFieldNumber;
const int gs_change_name_req::kNewNameFieldNumber;
const int gs_change_name_req::kOldNameFieldNumber;
#endif  // !_MSC_VER

gs_change_name_req::gs_change_name_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_change_name_req::InitAsDefaultInstance() {
}

gs_change_name_req::gs_change_name_req(const gs_change_name_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_change_name_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 702;
  new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_change_name_req::~gs_change_name_req() {
  SharedDtor();
}

void gs_change_name_req::SharedDtor() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (old_name_ != &::google::protobuf::internal::kEmptyString) {
    delete old_name_;
  }
  if (this != default_instance_) {
  }
}

void gs_change_name_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_change_name_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_change_name_req_descriptor_;
}

const gs_change_name_req& gs_change_name_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

gs_change_name_req* gs_change_name_req::default_instance_ = NULL;

gs_change_name_req* gs_change_name_req::New() const {
  return new gs_change_name_req;
}

void gs_change_name_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 702;
    if (has_new_name()) {
      if (new_name_ != &::google::protobuf::internal::kEmptyString) {
        new_name_->clear();
      }
    }
    if (has_old_name()) {
      if (old_name_ != &::google::protobuf::internal::kEmptyString) {
        old_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_change_name_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_change_name_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_name;
        break;
      }

      // optional string new_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_name().data(), this->new_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_name;
        break;
      }

      // optional string old_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_name().data(), this->old_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_change_name_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_change_name_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string new_name = 2;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->new_name(), output);
  }

  // optional string old_name = 3;
  if (has_old_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_name().data(), this->old_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->old_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_change_name_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_change_name_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string new_name = 2;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->new_name(), target);
  }

  // optional string old_name = 3;
  if (has_old_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_name().data(), this->old_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->old_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_change_name_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_change_name_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string new_name = 2;
    if (has_new_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_name());
    }

    // optional string old_name = 3;
    if (has_old_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_change_name_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_change_name_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_change_name_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_change_name_req::MergeFrom(const gs_change_name_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_new_name()) {
      set_new_name(from.new_name());
    }
    if (from.has_old_name()) {
      set_old_name(from.old_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_change_name_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_change_name_req::CopyFrom(const gs_change_name_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_change_name_req::IsInitialized() const {

  return true;
}

void gs_change_name_req::Swap(gs_change_name_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(new_name_, other->new_name_);
    std::swap(old_name_, other->old_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_change_name_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_change_name_req_descriptor_;
  metadata.reflection = gs_change_name_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gt_change_name_ret::kProtoidFieldNumber;
const int gt_change_name_ret::kNewNameFieldNumber;
#endif  // !_MSC_VER

gt_change_name_ret::gt_change_name_ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gt_change_name_ret::InitAsDefaultInstance() {
}

gt_change_name_ret::gt_change_name_ret(const gt_change_name_ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gt_change_name_ret::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 703;
  new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gt_change_name_ret::~gt_change_name_ret() {
  SharedDtor();
}

void gt_change_name_ret::SharedDtor() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (this != default_instance_) {
  }
}

void gt_change_name_ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gt_change_name_ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gt_change_name_ret_descriptor_;
}

const gt_change_name_ret& gt_change_name_ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

gt_change_name_ret* gt_change_name_ret::default_instance_ = NULL;

gt_change_name_ret* gt_change_name_ret::New() const {
  return new gt_change_name_ret;
}

void gt_change_name_ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 703;
    if (has_new_name()) {
      if (new_name_ != &::google::protobuf::internal::kEmptyString) {
        new_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gt_change_name_ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_change_name_ret_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_name;
        break;
      }

      // optional string new_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_name().data(), this->new_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gt_change_name_ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_change_name_ret_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string new_name = 2;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->new_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gt_change_name_ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_change_name_ret_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string new_name = 2;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->new_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gt_change_name_ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_change_name_ret_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string new_name = 2;
    if (has_new_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gt_change_name_ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gt_change_name_ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gt_change_name_ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gt_change_name_ret::MergeFrom(const gt_change_name_ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_new_name()) {
      set_new_name(from.new_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gt_change_name_ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gt_change_name_ret::CopyFrom(const gt_change_name_ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gt_change_name_ret::IsInitialized() const {

  return true;
}

void gt_change_name_ret::Swap(gt_change_name_ret* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(new_name_, other->new_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gt_change_name_ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gt_change_name_ret_descriptor_;
  metadata.reflection = gt_change_name_ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_jump_to_cross_game_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

gs_jump_to_cross_game_req::gs_jump_to_cross_game_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_jump_to_cross_game_req::InitAsDefaultInstance() {
}

gs_jump_to_cross_game_req::gs_jump_to_cross_game_req(const gs_jump_to_cross_game_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_jump_to_cross_game_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 704;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_jump_to_cross_game_req::~gs_jump_to_cross_game_req() {
  SharedDtor();
}

void gs_jump_to_cross_game_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_jump_to_cross_game_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_jump_to_cross_game_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_jump_to_cross_game_req_descriptor_;
}

const gs_jump_to_cross_game_req& gs_jump_to_cross_game_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

gs_jump_to_cross_game_req* gs_jump_to_cross_game_req::default_instance_ = NULL;

gs_jump_to_cross_game_req* gs_jump_to_cross_game_req::New() const {
  return new gs_jump_to_cross_game_req;
}

void gs_jump_to_cross_game_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 704;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_jump_to_cross_game_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_jump_to_cross_game_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_jump_to_cross_game_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_jump_to_cross_game_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_jump_to_cross_game_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_jump_to_cross_game_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_jump_to_cross_game_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_jump_to_cross_game_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_jump_to_cross_game_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_jump_to_cross_game_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_jump_to_cross_game_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_jump_to_cross_game_req::MergeFrom(const gs_jump_to_cross_game_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_jump_to_cross_game_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_jump_to_cross_game_req::CopyFrom(const gs_jump_to_cross_game_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_jump_to_cross_game_req::IsInitialized() const {

  return true;
}

void gs_jump_to_cross_game_req::Swap(gs_jump_to_cross_game_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_jump_to_cross_game_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_jump_to_cross_game_req_descriptor_;
  metadata.reflection = gs_jump_to_cross_game_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gt_kick_role_ntf::kProtoidFieldNumber;
const int gt_kick_role_ntf::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

gt_kick_role_ntf::gt_kick_role_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gt_kick_role_ntf::InitAsDefaultInstance() {
}

gt_kick_role_ntf::gt_kick_role_ntf(const gt_kick_role_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gt_kick_role_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 705;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gt_kick_role_ntf::~gt_kick_role_ntf() {
  SharedDtor();
}

void gt_kick_role_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gt_kick_role_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gt_kick_role_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gt_kick_role_ntf_descriptor_;
}

const gt_kick_role_ntf& gt_kick_role_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

gt_kick_role_ntf* gt_kick_role_ntf::default_instance_ = NULL;

gt_kick_role_ntf* gt_kick_role_ntf::New() const {
  return new gt_kick_role_ntf;
}

void gt_kick_role_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 705;
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gt_kick_role_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_kick_role_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gt_kick_role_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_kick_role_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gt_kick_role_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_kick_role_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gt_kick_role_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gt_kick_role_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gt_kick_role_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gt_kick_role_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gt_kick_role_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gt_kick_role_ntf::MergeFrom(const gt_kick_role_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gt_kick_role_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gt_kick_role_ntf::CopyFrom(const gt_kick_role_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gt_kick_role_ntf::IsInitialized() const {

  return true;
}

void gt_kick_role_ntf::Swap(gt_kick_role_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gt_kick_role_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gt_kick_role_ntf_descriptor_;
  metadata.reflection = gt_kick_role_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_player_num_ntf::kProtoidFieldNumber;
const int gs_player_num_ntf::kPlayerNumFieldNumber;
#endif  // !_MSC_VER

gs_player_num_ntf::gs_player_num_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_player_num_ntf::InitAsDefaultInstance() {
}

gs_player_num_ntf::gs_player_num_ntf(const gs_player_num_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_player_num_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 706;
  player_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_player_num_ntf::~gs_player_num_ntf() {
  SharedDtor();
}

void gs_player_num_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_player_num_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_player_num_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_player_num_ntf_descriptor_;
}

const gs_player_num_ntf& gs_player_num_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

gs_player_num_ntf* gs_player_num_ntf::default_instance_ = NULL;

gs_player_num_ntf* gs_player_num_ntf::New() const {
  return new gs_player_num_ntf;
}

void gs_player_num_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 706;
    player_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_player_num_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_player_num_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_num;
        break;
      }

      // optional uint32 player_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_num_)));
          set_has_player_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_player_num_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_player_num_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 player_num = 2;
  if (has_player_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_player_num_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_player_num_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 player_num = 2;
  if (has_player_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_player_num_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_player_num_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 player_num = 2;
    if (has_player_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_player_num_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_player_num_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_player_num_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_player_num_ntf::MergeFrom(const gs_player_num_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_player_num()) {
      set_player_num(from.player_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_player_num_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_player_num_ntf::CopyFrom(const gs_player_num_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_player_num_ntf::IsInitialized() const {

  return true;
}

void gs_player_num_ntf::Swap(gs_player_num_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(player_num_, other->player_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_player_num_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_player_num_ntf_descriptor_;
  metadata.reflection = gs_player_num_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gate_forward_search_req::kProtoIdFieldNumber;
const int gate_forward_search_req::kTypeFieldNumber;
const int gate_forward_search_req::kContentFieldNumber;
const int gate_forward_search_req::kUuidFieldNumber;
#endif  // !_MSC_VER

gate_forward_search_req::gate_forward_search_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gate_forward_search_req::InitAsDefaultInstance() {
}

gate_forward_search_req::gate_forward_search_req(const gate_forward_search_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gate_forward_search_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 707;
  type_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gate_forward_search_req::~gate_forward_search_req() {
  SharedDtor();
}

void gate_forward_search_req::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void gate_forward_search_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gate_forward_search_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gate_forward_search_req_descriptor_;
}

const gate_forward_search_req& gate_forward_search_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

gate_forward_search_req* gate_forward_search_req::default_instance_ = NULL;

gate_forward_search_req* gate_forward_search_req::New() const {
  return new gate_forward_search_req;
}

void gate_forward_search_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 707;
    type_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gate_forward_search_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = gate_forward_search_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gate_forward_search_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = gate_forward_search_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  // optional uint64 uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gate_forward_search_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = gate_forward_search_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional uint64 uuid = 4;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gate_forward_search_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = gate_forward_search_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint64 uuid = 4;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gate_forward_search_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gate_forward_search_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gate_forward_search_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gate_forward_search_req::MergeFrom(const gate_forward_search_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gate_forward_search_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gate_forward_search_req::CopyFrom(const gate_forward_search_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gate_forward_search_req::IsInitialized() const {

  return true;
}

void gate_forward_search_req::Swap(gate_forward_search_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gate_forward_search_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gate_forward_search_req_descriptor_;
  metadata.reflection = gate_forward_search_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int log_gather_info::kRoleInfoFieldNumber;
const int log_gather_info::kTaskInfoFieldNumber;
const int log_gather_info::kHonorInfoFieldNumber;
const int log_gather_info::kLevelInfoFieldNumber;
const int log_gather_info::kBuyInfoFieldNumber;
const int log_gather_info::kPlayerRegisterFieldNumber;
const int log_gather_info::kPlayerLoginFieldNumber;
const int log_gather_info::kPlayerLogoutFieldNumber;
const int log_gather_info::kMoneyFlowFieldNumber;
const int log_gather_info::kItemFlowFieldNumber;
const int log_gather_info::kItemMoneyFlowFieldNumber;
const int log_gather_info::kPlayerExpFlowFieldNumber;
const int log_gather_info::kSnsFlowFieldNumber;
#endif  // !_MSC_VER

log_gather_info::log_gather_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void log_gather_info::InitAsDefaultInstance() {
  role_info_ = const_cast< ::SProtoSpace::log_gather_role_info*>(&::SProtoSpace::log_gather_role_info::default_instance());
  task_info_ = const_cast< ::SProtoSpace::log_gather_task_info*>(&::SProtoSpace::log_gather_task_info::default_instance());
  honor_info_ = const_cast< ::SProtoSpace::log_gather_honor_info*>(&::SProtoSpace::log_gather_honor_info::default_instance());
  level_info_ = const_cast< ::SProtoSpace::log_gather_level_up_info*>(&::SProtoSpace::log_gather_level_up_info::default_instance());
  buy_info_ = const_cast< ::SProtoSpace::log_gather_buy_info*>(&::SProtoSpace::log_gather_buy_info::default_instance());
}

log_gather_info::log_gather_info(const log_gather_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void log_gather_info::SharedCtor() {
  _cached_size_ = 0;
  role_info_ = NULL;
  task_info_ = NULL;
  honor_info_ = NULL;
  level_info_ = NULL;
  buy_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

log_gather_info::~log_gather_info() {
  SharedDtor();
}

void log_gather_info::SharedDtor() {
  if (this != default_instance_) {
    delete role_info_;
    delete task_info_;
    delete honor_info_;
    delete level_info_;
    delete buy_info_;
  }
}

void log_gather_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* log_gather_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return log_gather_info_descriptor_;
}

const log_gather_info& log_gather_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

log_gather_info* log_gather_info::default_instance_ = NULL;

log_gather_info* log_gather_info::New() const {
  return new log_gather_info;
}

void log_gather_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role_info()) {
      if (role_info_ != NULL) role_info_->::SProtoSpace::log_gather_role_info::Clear();
    }
    if (has_task_info()) {
      if (task_info_ != NULL) task_info_->::SProtoSpace::log_gather_task_info::Clear();
    }
    if (has_honor_info()) {
      if (honor_info_ != NULL) honor_info_->::SProtoSpace::log_gather_honor_info::Clear();
    }
    if (has_level_info()) {
      if (level_info_ != NULL) level_info_->::SProtoSpace::log_gather_level_up_info::Clear();
    }
    if (has_buy_info()) {
      if (buy_info_ != NULL) buy_info_->::SProtoSpace::log_gather_buy_info::Clear();
    }
  }
  player_register_.Clear();
  player_login_.Clear();
  player_logout_.Clear();
  money_flow_.Clear();
  item_flow_.Clear();
  item_money_flow_.Clear();
  player_exp_flow_.Clear();
  sns_flow_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool log_gather_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.log_gather_role_info role_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_info;
        break;
      }

      // optional .SProtoSpace.log_gather_task_info task_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_honor_info;
        break;
      }

      // optional .SProtoSpace.log_gather_honor_info honor_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_honor_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_honor_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_level_info;
        break;
      }

      // optional .SProtoSpace.log_gather_level_up_info level_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_level_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_buy_info;
        break;
      }

      // optional .SProtoSpace.log_gather_buy_info buy_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buy_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_player_register;
        break;
      }

      // repeated .SProtoSpace.log_gather_player_register player_register = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_register:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_register()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_player_register;
        if (input->ExpectTag(58)) goto parse_player_login;
        break;
      }

      // repeated .SProtoSpace.log_gather_player_login player_login = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_player_login;
        if (input->ExpectTag(66)) goto parse_player_logout;
        break;
      }

      // repeated .SProtoSpace.log_gather_player_logout player_logout = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_logout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_logout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_player_logout;
        if (input->ExpectTag(74)) goto parse_money_flow;
        break;
      }

      // repeated .SProtoSpace.log_gather_money_flow money_flow = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money_flow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_money_flow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_money_flow;
        if (input->ExpectTag(82)) goto parse_item_flow;
        break;
      }

      // repeated .SProtoSpace.log_gather_item_flow item_flow = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_flow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_flow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_item_flow;
        if (input->ExpectTag(90)) goto parse_item_money_flow;
        break;
      }

      // repeated .SProtoSpace.log_gather_item_money_flow item_money_flow = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_money_flow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_money_flow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_item_money_flow;
        if (input->ExpectTag(98)) goto parse_player_exp_flow;
        break;
      }

      // repeated .SProtoSpace.log_gather_player_exp_flow player_exp_flow = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_exp_flow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_exp_flow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_player_exp_flow;
        if (input->ExpectTag(106)) goto parse_sns_flow;
        break;
      }

      // repeated .SProtoSpace.log_gather_sns_flow sns_flow = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sns_flow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sns_flow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_sns_flow;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void log_gather_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.log_gather_role_info role_info = 1;
  if (has_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role_info(), output);
  }

  // optional .SProtoSpace.log_gather_task_info task_info = 2;
  if (has_task_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->task_info(), output);
  }

  // optional .SProtoSpace.log_gather_honor_info honor_info = 3;
  if (has_honor_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->honor_info(), output);
  }

  // optional .SProtoSpace.log_gather_level_up_info level_info = 4;
  if (has_level_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->level_info(), output);
  }

  // optional .SProtoSpace.log_gather_buy_info buy_info = 5;
  if (has_buy_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->buy_info(), output);
  }

  // repeated .SProtoSpace.log_gather_player_register player_register = 6;
  for (int i = 0; i < this->player_register_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->player_register(i), output);
  }

  // repeated .SProtoSpace.log_gather_player_login player_login = 7;
  for (int i = 0; i < this->player_login_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->player_login(i), output);
  }

  // repeated .SProtoSpace.log_gather_player_logout player_logout = 8;
  for (int i = 0; i < this->player_logout_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->player_logout(i), output);
  }

  // repeated .SProtoSpace.log_gather_money_flow money_flow = 9;
  for (int i = 0; i < this->money_flow_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->money_flow(i), output);
  }

  // repeated .SProtoSpace.log_gather_item_flow item_flow = 10;
  for (int i = 0; i < this->item_flow_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->item_flow(i), output);
  }

  // repeated .SProtoSpace.log_gather_item_money_flow item_money_flow = 11;
  for (int i = 0; i < this->item_money_flow_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->item_money_flow(i), output);
  }

  // repeated .SProtoSpace.log_gather_player_exp_flow player_exp_flow = 12;
  for (int i = 0; i < this->player_exp_flow_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->player_exp_flow(i), output);
  }

  // repeated .SProtoSpace.log_gather_sns_flow sns_flow = 13;
  for (int i = 0; i < this->sns_flow_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->sns_flow(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* log_gather_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.log_gather_role_info role_info = 1;
  if (has_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role_info(), target);
  }

  // optional .SProtoSpace.log_gather_task_info task_info = 2;
  if (has_task_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->task_info(), target);
  }

  // optional .SProtoSpace.log_gather_honor_info honor_info = 3;
  if (has_honor_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->honor_info(), target);
  }

  // optional .SProtoSpace.log_gather_level_up_info level_info = 4;
  if (has_level_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->level_info(), target);
  }

  // optional .SProtoSpace.log_gather_buy_info buy_info = 5;
  if (has_buy_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->buy_info(), target);
  }

  // repeated .SProtoSpace.log_gather_player_register player_register = 6;
  for (int i = 0; i < this->player_register_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->player_register(i), target);
  }

  // repeated .SProtoSpace.log_gather_player_login player_login = 7;
  for (int i = 0; i < this->player_login_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->player_login(i), target);
  }

  // repeated .SProtoSpace.log_gather_player_logout player_logout = 8;
  for (int i = 0; i < this->player_logout_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->player_logout(i), target);
  }

  // repeated .SProtoSpace.log_gather_money_flow money_flow = 9;
  for (int i = 0; i < this->money_flow_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->money_flow(i), target);
  }

  // repeated .SProtoSpace.log_gather_item_flow item_flow = 10;
  for (int i = 0; i < this->item_flow_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->item_flow(i), target);
  }

  // repeated .SProtoSpace.log_gather_item_money_flow item_money_flow = 11;
  for (int i = 0; i < this->item_money_flow_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->item_money_flow(i), target);
  }

  // repeated .SProtoSpace.log_gather_player_exp_flow player_exp_flow = 12;
  for (int i = 0; i < this->player_exp_flow_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->player_exp_flow(i), target);
  }

  // repeated .SProtoSpace.log_gather_sns_flow sns_flow = 13;
  for (int i = 0; i < this->sns_flow_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->sns_flow(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int log_gather_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.log_gather_role_info role_info = 1;
    if (has_role_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_info());
    }

    // optional .SProtoSpace.log_gather_task_info task_info = 2;
    if (has_task_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_info());
    }

    // optional .SProtoSpace.log_gather_honor_info honor_info = 3;
    if (has_honor_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->honor_info());
    }

    // optional .SProtoSpace.log_gather_level_up_info level_info = 4;
    if (has_level_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->level_info());
    }

    // optional .SProtoSpace.log_gather_buy_info buy_info = 5;
    if (has_buy_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buy_info());
    }

  }
  // repeated .SProtoSpace.log_gather_player_register player_register = 6;
  total_size += 1 * this->player_register_size();
  for (int i = 0; i < this->player_register_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_register(i));
  }

  // repeated .SProtoSpace.log_gather_player_login player_login = 7;
  total_size += 1 * this->player_login_size();
  for (int i = 0; i < this->player_login_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_login(i));
  }

  // repeated .SProtoSpace.log_gather_player_logout player_logout = 8;
  total_size += 1 * this->player_logout_size();
  for (int i = 0; i < this->player_logout_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_logout(i));
  }

  // repeated .SProtoSpace.log_gather_money_flow money_flow = 9;
  total_size += 1 * this->money_flow_size();
  for (int i = 0; i < this->money_flow_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->money_flow(i));
  }

  // repeated .SProtoSpace.log_gather_item_flow item_flow = 10;
  total_size += 1 * this->item_flow_size();
  for (int i = 0; i < this->item_flow_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_flow(i));
  }

  // repeated .SProtoSpace.log_gather_item_money_flow item_money_flow = 11;
  total_size += 1 * this->item_money_flow_size();
  for (int i = 0; i < this->item_money_flow_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_money_flow(i));
  }

  // repeated .SProtoSpace.log_gather_player_exp_flow player_exp_flow = 12;
  total_size += 1 * this->player_exp_flow_size();
  for (int i = 0; i < this->player_exp_flow_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_exp_flow(i));
  }

  // repeated .SProtoSpace.log_gather_sns_flow sns_flow = 13;
  total_size += 1 * this->sns_flow_size();
  for (int i = 0; i < this->sns_flow_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sns_flow(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void log_gather_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const log_gather_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const log_gather_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void log_gather_info::MergeFrom(const log_gather_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_register_.MergeFrom(from.player_register_);
  player_login_.MergeFrom(from.player_login_);
  player_logout_.MergeFrom(from.player_logout_);
  money_flow_.MergeFrom(from.money_flow_);
  item_flow_.MergeFrom(from.item_flow_);
  item_money_flow_.MergeFrom(from.item_money_flow_);
  player_exp_flow_.MergeFrom(from.player_exp_flow_);
  sns_flow_.MergeFrom(from.sns_flow_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_info()) {
      mutable_role_info()->::SProtoSpace::log_gather_role_info::MergeFrom(from.role_info());
    }
    if (from.has_task_info()) {
      mutable_task_info()->::SProtoSpace::log_gather_task_info::MergeFrom(from.task_info());
    }
    if (from.has_honor_info()) {
      mutable_honor_info()->::SProtoSpace::log_gather_honor_info::MergeFrom(from.honor_info());
    }
    if (from.has_level_info()) {
      mutable_level_info()->::SProtoSpace::log_gather_level_up_info::MergeFrom(from.level_info());
    }
    if (from.has_buy_info()) {
      mutable_buy_info()->::SProtoSpace::log_gather_buy_info::MergeFrom(from.buy_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void log_gather_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log_gather_info::CopyFrom(const log_gather_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log_gather_info::IsInitialized() const {

  return true;
}

void log_gather_info::Swap(log_gather_info* other) {
  if (other != this) {
    std::swap(role_info_, other->role_info_);
    std::swap(task_info_, other->task_info_);
    std::swap(honor_info_, other->honor_info_);
    std::swap(level_info_, other->level_info_);
    std::swap(buy_info_, other->buy_info_);
    player_register_.Swap(&other->player_register_);
    player_login_.Swap(&other->player_login_);
    player_logout_.Swap(&other->player_logout_);
    money_flow_.Swap(&other->money_flow_);
    item_flow_.Swap(&other->item_flow_);
    item_money_flow_.Swap(&other->item_money_flow_);
    player_exp_flow_.Swap(&other->player_exp_flow_);
    sns_flow_.Swap(&other->sns_flow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata log_gather_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = log_gather_info_descriptor_;
  metadata.reflection = log_gather_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int log_gather_player_register::kGameSvrIdFieldNumber;
const int log_gather_player_register::kDtEventTimeFieldNumber;
const int log_gather_player_register::kVGameAppIDFieldNumber;
const int log_gather_player_register::kPlatIDFieldNumber;
const int log_gather_player_register::kIZoneAreaIDFieldNumber;
const int log_gather_player_register::kVopenidFieldNumber;
const int log_gather_player_register::kClientVersionFieldNumber;
const int log_gather_player_register::kSystemSoftwareFieldNumber;
const int log_gather_player_register::kSystemHardwareFieldNumber;
const int log_gather_player_register::kTelecomOperFieldNumber;
const int log_gather_player_register::kNetworkFieldNumber;
const int log_gather_player_register::kScreenWidthFieldNumber;
const int log_gather_player_register::kScreenHightFieldNumber;
const int log_gather_player_register::kDensityFieldNumber;
const int log_gather_player_register::kRegChannelFieldNumber;
const int log_gather_player_register::kCpuHardwareFieldNumber;
const int log_gather_player_register::kMemoryFieldNumber;
const int log_gather_player_register::kGLRenderFieldNumber;
const int log_gather_player_register::kGLVersionFieldNumber;
const int log_gather_player_register::kDeviceIdFieldNumber;
const int log_gather_player_register::kTypeFieldNumber;
#endif  // !_MSC_VER

log_gather_player_register::log_gather_player_register()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void log_gather_player_register::InitAsDefaultInstance() {
}

log_gather_player_register::log_gather_player_register(const log_gather_player_register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void log_gather_player_register::SharedCtor() {
  _cached_size_ = 0;
  gamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platid_ = 0;
  izoneareaid_ = 0;
  vopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  systemsoftware_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  systemhardware_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  telecomoper_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  screenwidth_ = 0;
  screenhight_ = 0;
  density_ = 0;
  regchannel_ = 0;
  cpuhardware_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  memory_ = 0;
  glrender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  glversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

log_gather_player_register::~log_gather_player_register() {
  SharedDtor();
}

void log_gather_player_register::SharedDtor() {
  if (gamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete gamesvrid_;
  }
  if (dteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete dteventtime_;
  }
  if (vgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete vgameappid_;
  }
  if (vopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete vopenid_;
  }
  if (clientversion_ != &::google::protobuf::internal::kEmptyString) {
    delete clientversion_;
  }
  if (systemsoftware_ != &::google::protobuf::internal::kEmptyString) {
    delete systemsoftware_;
  }
  if (systemhardware_ != &::google::protobuf::internal::kEmptyString) {
    delete systemhardware_;
  }
  if (telecomoper_ != &::google::protobuf::internal::kEmptyString) {
    delete telecomoper_;
  }
  if (network_ != &::google::protobuf::internal::kEmptyString) {
    delete network_;
  }
  if (cpuhardware_ != &::google::protobuf::internal::kEmptyString) {
    delete cpuhardware_;
  }
  if (glrender_ != &::google::protobuf::internal::kEmptyString) {
    delete glrender_;
  }
  if (glversion_ != &::google::protobuf::internal::kEmptyString) {
    delete glversion_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (this != default_instance_) {
  }
}

void log_gather_player_register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* log_gather_player_register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return log_gather_player_register_descriptor_;
}

const log_gather_player_register& log_gather_player_register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

log_gather_player_register* log_gather_player_register::default_instance_ = NULL;

log_gather_player_register* log_gather_player_register::New() const {
  return new log_gather_player_register;
}

void log_gather_player_register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gamesvrid()) {
      if (gamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        gamesvrid_->clear();
      }
    }
    if (has_dteventtime()) {
      if (dteventtime_ != &::google::protobuf::internal::kEmptyString) {
        dteventtime_->clear();
      }
    }
    if (has_vgameappid()) {
      if (vgameappid_ != &::google::protobuf::internal::kEmptyString) {
        vgameappid_->clear();
      }
    }
    platid_ = 0;
    izoneareaid_ = 0;
    if (has_vopenid()) {
      if (vopenid_ != &::google::protobuf::internal::kEmptyString) {
        vopenid_->clear();
      }
    }
    if (has_clientversion()) {
      if (clientversion_ != &::google::protobuf::internal::kEmptyString) {
        clientversion_->clear();
      }
    }
    if (has_systemsoftware()) {
      if (systemsoftware_ != &::google::protobuf::internal::kEmptyString) {
        systemsoftware_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_systemhardware()) {
      if (systemhardware_ != &::google::protobuf::internal::kEmptyString) {
        systemhardware_->clear();
      }
    }
    if (has_telecomoper()) {
      if (telecomoper_ != &::google::protobuf::internal::kEmptyString) {
        telecomoper_->clear();
      }
    }
    if (has_network()) {
      if (network_ != &::google::protobuf::internal::kEmptyString) {
        network_->clear();
      }
    }
    screenwidth_ = 0;
    screenhight_ = 0;
    density_ = 0;
    regchannel_ = 0;
    if (has_cpuhardware()) {
      if (cpuhardware_ != &::google::protobuf::internal::kEmptyString) {
        cpuhardware_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    memory_ = 0;
    if (has_glrender()) {
      if (glrender_ != &::google::protobuf::internal::kEmptyString) {
        glrender_->clear();
      }
    }
    if (has_glversion()) {
      if (glversion_ != &::google::protobuf::internal::kEmptyString) {
        glversion_->clear();
      }
    }
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool log_gather_player_register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gamesvrid().data(), this->gamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dtEventTime;
        break;
      }

      // optional string dtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dteventtime().data(), this->dteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vGameAppID;
        break;
      }

      // optional string vGameAppID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vGameAppID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vgameappid().data(), this->vgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_PlatID;
        break;
      }

      // optional int32 PlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platid_)));
          set_has_platid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iZoneAreaID;
        break;
      }

      // optional int32 iZoneAreaID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iZoneAreaID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &izoneareaid_)));
          set_has_izoneareaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_vopenid;
        break;
      }

      // optional string vopenid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vopenid().data(), this->vopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ClientVersion;
        break;
      }

      // optional string ClientVersion = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClientVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientversion().data(), this->clientversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_SystemSoftware;
        break;
      }

      // optional string SystemSoftware = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SystemSoftware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_systemsoftware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->systemsoftware().data(), this->systemsoftware().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_SystemHardware;
        break;
      }

      // optional string SystemHardware = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SystemHardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_systemhardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->systemhardware().data(), this->systemhardware().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_TelecomOper;
        break;
      }

      // optional string TelecomOper = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TelecomOper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_telecomoper()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->telecomoper().data(), this->telecomoper().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Network;
        break;
      }

      // optional string Network = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network().data(), this->network().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ScreenWidth;
        break;
      }

      // optional int32 ScreenWidth = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScreenWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screenwidth_)));
          set_has_screenwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_ScreenHight;
        break;
      }

      // optional int32 ScreenHight = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScreenHight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screenhight_)));
          set_has_screenhight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_Density;
        break;
      }

      // optional float Density = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Density:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &density_)));
          set_has_density();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_RegChannel;
        break;
      }

      // optional int32 RegChannel = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RegChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &regchannel_)));
          set_has_regchannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_CpuHardware;
        break;
      }

      // optional string CpuHardware = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CpuHardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpuhardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cpuhardware().data(), this->cpuhardware().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_Memory;
        break;
      }

      // optional int32 Memory = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memory_)));
          set_has_memory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_GLRender;
        break;
      }

      // optional string GLRender = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GLRender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_glrender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->glrender().data(), this->glrender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_GLVersion;
        break;
      }

      // optional string GLVersion = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GLVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_glversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->glversion().data(), this->glversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_DeviceId;
        break;
      }

      // optional string DeviceId = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeviceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_Type;
        break;
      }

      // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_PlayerRegister];
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EConomicAnalysisType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EConomicAnalysisType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(100, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void log_gather_player_register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GameSvrId = 1;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamesvrid().data(), this->gamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gamesvrid(), output);
  }

  // optional string dtEventTime = 2;
  if (has_dteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dteventtime().data(), this->dteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dteventtime(), output);
  }

  // optional string vGameAppID = 3;
  if (has_vgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vgameappid().data(), this->vgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->vgameappid(), output);
  }

  // optional int32 PlatID = 4;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->platid(), output);
  }

  // optional int32 iZoneAreaID = 5;
  if (has_izoneareaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->izoneareaid(), output);
  }

  // optional string vopenid = 6;
  if (has_vopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vopenid().data(), this->vopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->vopenid(), output);
  }

  // optional string ClientVersion = 7;
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientversion().data(), this->clientversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->clientversion(), output);
  }

  // optional string SystemSoftware = 8;
  if (has_systemsoftware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->systemsoftware().data(), this->systemsoftware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->systemsoftware(), output);
  }

  // optional string SystemHardware = 9;
  if (has_systemhardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->systemhardware().data(), this->systemhardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->systemhardware(), output);
  }

  // optional string TelecomOper = 10;
  if (has_telecomoper()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->telecomoper().data(), this->telecomoper().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->telecomoper(), output);
  }

  // optional string Network = 11;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->network(), output);
  }

  // optional int32 ScreenWidth = 12;
  if (has_screenwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->screenwidth(), output);
  }

  // optional int32 ScreenHight = 13;
  if (has_screenhight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->screenhight(), output);
  }

  // optional float Density = 14;
  if (has_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->density(), output);
  }

  // optional int32 RegChannel = 15;
  if (has_regchannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->regchannel(), output);
  }

  // optional string CpuHardware = 16;
  if (has_cpuhardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cpuhardware().data(), this->cpuhardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->cpuhardware(), output);
  }

  // optional int32 Memory = 17;
  if (has_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->memory(), output);
  }

  // optional string GLRender = 18;
  if (has_glrender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->glrender().data(), this->glrender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->glrender(), output);
  }

  // optional string GLVersion = 19;
  if (has_glversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->glversion().data(), this->glversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->glversion(), output);
  }

  // optional string DeviceId = 20;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->deviceid(), output);
  }

  // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_PlayerRegister];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      100, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* log_gather_player_register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GameSvrId = 1;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamesvrid().data(), this->gamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesvrid(), target);
  }

  // optional string dtEventTime = 2;
  if (has_dteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dteventtime().data(), this->dteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dteventtime(), target);
  }

  // optional string vGameAppID = 3;
  if (has_vgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vgameappid().data(), this->vgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vgameappid(), target);
  }

  // optional int32 PlatID = 4;
  if (has_platid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->platid(), target);
  }

  // optional int32 iZoneAreaID = 5;
  if (has_izoneareaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->izoneareaid(), target);
  }

  // optional string vopenid = 6;
  if (has_vopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vopenid().data(), this->vopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->vopenid(), target);
  }

  // optional string ClientVersion = 7;
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientversion().data(), this->clientversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->clientversion(), target);
  }

  // optional string SystemSoftware = 8;
  if (has_systemsoftware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->systemsoftware().data(), this->systemsoftware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->systemsoftware(), target);
  }

  // optional string SystemHardware = 9;
  if (has_systemhardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->systemhardware().data(), this->systemhardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->systemhardware(), target);
  }

  // optional string TelecomOper = 10;
  if (has_telecomoper()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->telecomoper().data(), this->telecomoper().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->telecomoper(), target);
  }

  // optional string Network = 11;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->network(), target);
  }

  // optional int32 ScreenWidth = 12;
  if (has_screenwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->screenwidth(), target);
  }

  // optional int32 ScreenHight = 13;
  if (has_screenhight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->screenhight(), target);
  }

  // optional float Density = 14;
  if (has_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->density(), target);
  }

  // optional int32 RegChannel = 15;
  if (has_regchannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->regchannel(), target);
  }

  // optional string CpuHardware = 16;
  if (has_cpuhardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cpuhardware().data(), this->cpuhardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->cpuhardware(), target);
  }

  // optional int32 Memory = 17;
  if (has_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->memory(), target);
  }

  // optional string GLRender = 18;
  if (has_glrender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->glrender().data(), this->glrender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->glrender(), target);
  }

  // optional string GLVersion = 19;
  if (has_glversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->glversion().data(), this->glversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->glversion(), target);
  }

  // optional string DeviceId = 20;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->deviceid(), target);
  }

  // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_PlayerRegister];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      100, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int log_gather_player_register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GameSvrId = 1;
    if (has_gamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamesvrid());
    }

    // optional string dtEventTime = 2;
    if (has_dteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dteventtime());
    }

    // optional string vGameAppID = 3;
    if (has_vgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vgameappid());
    }

    // optional int32 PlatID = 4;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platid());
    }

    // optional int32 iZoneAreaID = 5;
    if (has_izoneareaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->izoneareaid());
    }

    // optional string vopenid = 6;
    if (has_vopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vopenid());
    }

    // optional string ClientVersion = 7;
    if (has_clientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientversion());
    }

    // optional string SystemSoftware = 8;
    if (has_systemsoftware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->systemsoftware());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string SystemHardware = 9;
    if (has_systemhardware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->systemhardware());
    }

    // optional string TelecomOper = 10;
    if (has_telecomoper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->telecomoper());
    }

    // optional string Network = 11;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network());
    }

    // optional int32 ScreenWidth = 12;
    if (has_screenwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screenwidth());
    }

    // optional int32 ScreenHight = 13;
    if (has_screenhight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screenhight());
    }

    // optional float Density = 14;
    if (has_density()) {
      total_size += 1 + 4;
    }

    // optional int32 RegChannel = 15;
    if (has_regchannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->regchannel());
    }

    // optional string CpuHardware = 16;
    if (has_cpuhardware()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cpuhardware());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 Memory = 17;
    if (has_memory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memory());
    }

    // optional string GLRender = 18;
    if (has_glrender()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->glrender());
    }

    // optional string GLVersion = 19;
    if (has_glversion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->glversion());
    }

    // optional string DeviceId = 20;
    if (has_deviceid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_PlayerRegister];
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void log_gather_player_register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const log_gather_player_register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const log_gather_player_register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void log_gather_player_register::MergeFrom(const log_gather_player_register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesvrid()) {
      set_gamesvrid(from.gamesvrid());
    }
    if (from.has_dteventtime()) {
      set_dteventtime(from.dteventtime());
    }
    if (from.has_vgameappid()) {
      set_vgameappid(from.vgameappid());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
    if (from.has_izoneareaid()) {
      set_izoneareaid(from.izoneareaid());
    }
    if (from.has_vopenid()) {
      set_vopenid(from.vopenid());
    }
    if (from.has_clientversion()) {
      set_clientversion(from.clientversion());
    }
    if (from.has_systemsoftware()) {
      set_systemsoftware(from.systemsoftware());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_systemhardware()) {
      set_systemhardware(from.systemhardware());
    }
    if (from.has_telecomoper()) {
      set_telecomoper(from.telecomoper());
    }
    if (from.has_network()) {
      set_network(from.network());
    }
    if (from.has_screenwidth()) {
      set_screenwidth(from.screenwidth());
    }
    if (from.has_screenhight()) {
      set_screenhight(from.screenhight());
    }
    if (from.has_density()) {
      set_density(from.density());
    }
    if (from.has_regchannel()) {
      set_regchannel(from.regchannel());
    }
    if (from.has_cpuhardware()) {
      set_cpuhardware(from.cpuhardware());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_memory()) {
      set_memory(from.memory());
    }
    if (from.has_glrender()) {
      set_glrender(from.glrender());
    }
    if (from.has_glversion()) {
      set_glversion(from.glversion());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void log_gather_player_register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log_gather_player_register::CopyFrom(const log_gather_player_register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log_gather_player_register::IsInitialized() const {

  return true;
}

void log_gather_player_register::Swap(log_gather_player_register* other) {
  if (other != this) {
    std::swap(gamesvrid_, other->gamesvrid_);
    std::swap(dteventtime_, other->dteventtime_);
    std::swap(vgameappid_, other->vgameappid_);
    std::swap(platid_, other->platid_);
    std::swap(izoneareaid_, other->izoneareaid_);
    std::swap(vopenid_, other->vopenid_);
    std::swap(clientversion_, other->clientversion_);
    std::swap(systemsoftware_, other->systemsoftware_);
    std::swap(systemhardware_, other->systemhardware_);
    std::swap(telecomoper_, other->telecomoper_);
    std::swap(network_, other->network_);
    std::swap(screenwidth_, other->screenwidth_);
    std::swap(screenhight_, other->screenhight_);
    std::swap(density_, other->density_);
    std::swap(regchannel_, other->regchannel_);
    std::swap(cpuhardware_, other->cpuhardware_);
    std::swap(memory_, other->memory_);
    std::swap(glrender_, other->glrender_);
    std::swap(glversion_, other->glversion_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata log_gather_player_register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = log_gather_player_register_descriptor_;
  metadata.reflection = log_gather_player_register_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int log_gather_player_login::kGameSvrIdFieldNumber;
const int log_gather_player_login::kDtEventTimeFieldNumber;
const int log_gather_player_login::kGameAppIDFieldNumber;
const int log_gather_player_login::kOpenIDFieldNumber;
const int log_gather_player_login::kLevelFieldNumber;
const int log_gather_player_login::kPlayerFriendsNumFieldNumber;
const int log_gather_player_login::kPlatIDFieldNumber;
const int log_gather_player_login::kClientVersionFieldNumber;
const int log_gather_player_login::kSystemSoftwareFieldNumber;
const int log_gather_player_login::kSystemHardwareFieldNumber;
const int log_gather_player_login::kTelecomOperFieldNumber;
const int log_gather_player_login::kNetworkFieldNumber;
const int log_gather_player_login::kScreenWidthFieldNumber;
const int log_gather_player_login::kScreenHightFieldNumber;
const int log_gather_player_login::kDensityFieldNumber;
const int log_gather_player_login::kLoginChannelFieldNumber;
const int log_gather_player_login::kCpuHardwareFieldNumber;
const int log_gather_player_login::kMemoryFieldNumber;
const int log_gather_player_login::kGLRenderFieldNumber;
const int log_gather_player_login::kGLVersionFieldNumber;
const int log_gather_player_login::kDeviceIdFieldNumber;
const int log_gather_player_login::kTypeFieldNumber;
#endif  // !_MSC_VER

log_gather_player_login::log_gather_player_login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void log_gather_player_login::InitAsDefaultInstance() {
}

log_gather_player_login::log_gather_player_login(const log_gather_player_login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void log_gather_player_login::SharedCtor() {
  _cached_size_ = 0;
  gamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  playerfriendsnum_ = 0;
  platid_ = 0;
  clientversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  systemsoftware_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  systemhardware_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  telecomoper_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  screenwidth_ = 0;
  screenhight_ = 0;
  density_ = 0;
  loginchannel_ = 0;
  cpuhardware_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  memory_ = 0;
  glrender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  glversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

log_gather_player_login::~log_gather_player_login() {
  SharedDtor();
}

void log_gather_player_login::SharedDtor() {
  if (gamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete gamesvrid_;
  }
  if (dteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete dteventtime_;
  }
  if (gameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameappid_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (clientversion_ != &::google::protobuf::internal::kEmptyString) {
    delete clientversion_;
  }
  if (systemsoftware_ != &::google::protobuf::internal::kEmptyString) {
    delete systemsoftware_;
  }
  if (systemhardware_ != &::google::protobuf::internal::kEmptyString) {
    delete systemhardware_;
  }
  if (telecomoper_ != &::google::protobuf::internal::kEmptyString) {
    delete telecomoper_;
  }
  if (network_ != &::google::protobuf::internal::kEmptyString) {
    delete network_;
  }
  if (cpuhardware_ != &::google::protobuf::internal::kEmptyString) {
    delete cpuhardware_;
  }
  if (glrender_ != &::google::protobuf::internal::kEmptyString) {
    delete glrender_;
  }
  if (glversion_ != &::google::protobuf::internal::kEmptyString) {
    delete glversion_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (this != default_instance_) {
  }
}

void log_gather_player_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* log_gather_player_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return log_gather_player_login_descriptor_;
}

const log_gather_player_login& log_gather_player_login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

log_gather_player_login* log_gather_player_login::default_instance_ = NULL;

log_gather_player_login* log_gather_player_login::New() const {
  return new log_gather_player_login;
}

void log_gather_player_login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gamesvrid()) {
      if (gamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        gamesvrid_->clear();
      }
    }
    if (has_dteventtime()) {
      if (dteventtime_ != &::google::protobuf::internal::kEmptyString) {
        dteventtime_->clear();
      }
    }
    if (has_gameappid()) {
      if (gameappid_ != &::google::protobuf::internal::kEmptyString) {
        gameappid_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    level_ = 0;
    playerfriendsnum_ = 0;
    platid_ = 0;
    if (has_clientversion()) {
      if (clientversion_ != &::google::protobuf::internal::kEmptyString) {
        clientversion_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_systemsoftware()) {
      if (systemsoftware_ != &::google::protobuf::internal::kEmptyString) {
        systemsoftware_->clear();
      }
    }
    if (has_systemhardware()) {
      if (systemhardware_ != &::google::protobuf::internal::kEmptyString) {
        systemhardware_->clear();
      }
    }
    if (has_telecomoper()) {
      if (telecomoper_ != &::google::protobuf::internal::kEmptyString) {
        telecomoper_->clear();
      }
    }
    if (has_network()) {
      if (network_ != &::google::protobuf::internal::kEmptyString) {
        network_->clear();
      }
    }
    screenwidth_ = 0;
    screenhight_ = 0;
    density_ = 0;
    loginchannel_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_cpuhardware()) {
      if (cpuhardware_ != &::google::protobuf::internal::kEmptyString) {
        cpuhardware_->clear();
      }
    }
    memory_ = 0;
    if (has_glrender()) {
      if (glrender_ != &::google::protobuf::internal::kEmptyString) {
        glrender_->clear();
      }
    }
    if (has_glversion()) {
      if (glversion_ != &::google::protobuf::internal::kEmptyString) {
        glversion_->clear();
      }
    }
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    type_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool log_gather_player_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gamesvrid().data(), this->gamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dtEventTime;
        break;
      }

      // optional string dtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dteventtime().data(), this->dteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_GameAppID;
        break;
      }

      // optional string GameAppID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GameAppID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameappid().data(), this->gameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_OpenID;
        break;
      }

      // optional string OpenID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OpenID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Level;
        break;
      }

      // optional int32 Level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_PlayerFriendsNum;
        break;
      }

      // optional int32 PlayerFriendsNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerFriendsNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerfriendsnum_)));
          set_has_playerfriendsnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_PlatID;
        break;
      }

      // optional int32 PlatID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platid_)));
          set_has_platid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ClientVersion;
        break;
      }

      // optional string ClientVersion = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClientVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientversion().data(), this->clientversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_SystemSoftware;
        break;
      }

      // optional string SystemSoftware = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SystemSoftware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_systemsoftware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->systemsoftware().data(), this->systemsoftware().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_SystemHardware;
        break;
      }

      // optional string SystemHardware = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SystemHardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_systemhardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->systemhardware().data(), this->systemhardware().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_TelecomOper;
        break;
      }

      // optional string TelecomOper = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TelecomOper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_telecomoper()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->telecomoper().data(), this->telecomoper().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_Network;
        break;
      }

      // optional string Network = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network().data(), this->network().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_ScreenWidth;
        break;
      }

      // optional int32 ScreenWidth = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScreenWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screenwidth_)));
          set_has_screenwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ScreenHight;
        break;
      }

      // optional int32 ScreenHight = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScreenHight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screenhight_)));
          set_has_screenhight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_Density;
        break;
      }

      // optional float Density = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Density:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &density_)));
          set_has_density();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_LoginChannel;
        break;
      }

      // optional int32 LoginChannel = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LoginChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginchannel_)));
          set_has_loginchannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_CpuHardware;
        break;
      }

      // optional string CpuHardware = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CpuHardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpuhardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cpuhardware().data(), this->cpuhardware().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_Memory;
        break;
      }

      // optional int32 Memory = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memory_)));
          set_has_memory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_GLRender;
        break;
      }

      // optional string GLRender = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GLRender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_glrender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->glrender().data(), this->glrender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_GLVersion;
        break;
      }

      // optional string GLVersion = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GLVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_glversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->glversion().data(), this->glversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_DeviceId;
        break;
      }

      // optional string DeviceId = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeviceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_Type;
        break;
      }

      // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_PlayerLogin];
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EConomicAnalysisType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EConomicAnalysisType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(100, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void log_gather_player_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GameSvrId = 1;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamesvrid().data(), this->gamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gamesvrid(), output);
  }

  // optional string dtEventTime = 2;
  if (has_dteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dteventtime().data(), this->dteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dteventtime(), output);
  }

  // optional string GameAppID = 3;
  if (has_gameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameappid().data(), this->gameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gameappid(), output);
  }

  // optional string OpenID = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->openid(), output);
  }

  // optional int32 Level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional int32 PlayerFriendsNum = 6;
  if (has_playerfriendsnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->playerfriendsnum(), output);
  }

  // optional int32 PlatID = 7;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->platid(), output);
  }

  // optional string ClientVersion = 8;
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientversion().data(), this->clientversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->clientversion(), output);
  }

  // optional string SystemSoftware = 9;
  if (has_systemsoftware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->systemsoftware().data(), this->systemsoftware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->systemsoftware(), output);
  }

  // optional string SystemHardware = 10;
  if (has_systemhardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->systemhardware().data(), this->systemhardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->systemhardware(), output);
  }

  // optional string TelecomOper = 11;
  if (has_telecomoper()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->telecomoper().data(), this->telecomoper().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->telecomoper(), output);
  }

  // optional string Network = 12;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->network(), output);
  }

  // optional int32 ScreenWidth = 13;
  if (has_screenwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->screenwidth(), output);
  }

  // optional int32 ScreenHight = 14;
  if (has_screenhight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->screenhight(), output);
  }

  // optional float Density = 15;
  if (has_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->density(), output);
  }

  // optional int32 LoginChannel = 16;
  if (has_loginchannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->loginchannel(), output);
  }

  // optional string CpuHardware = 17;
  if (has_cpuhardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cpuhardware().data(), this->cpuhardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->cpuhardware(), output);
  }

  // optional int32 Memory = 18;
  if (has_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->memory(), output);
  }

  // optional string GLRender = 19;
  if (has_glrender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->glrender().data(), this->glrender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->glrender(), output);
  }

  // optional string GLVersion = 20;
  if (has_glversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->glversion().data(), this->glversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->glversion(), output);
  }

  // optional string DeviceId = 21;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->deviceid(), output);
  }

  // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_PlayerLogin];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      100, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* log_gather_player_login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GameSvrId = 1;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamesvrid().data(), this->gamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesvrid(), target);
  }

  // optional string dtEventTime = 2;
  if (has_dteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dteventtime().data(), this->dteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dteventtime(), target);
  }

  // optional string GameAppID = 3;
  if (has_gameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameappid().data(), this->gameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gameappid(), target);
  }

  // optional string OpenID = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->openid(), target);
  }

  // optional int32 Level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional int32 PlayerFriendsNum = 6;
  if (has_playerfriendsnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->playerfriendsnum(), target);
  }

  // optional int32 PlatID = 7;
  if (has_platid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->platid(), target);
  }

  // optional string ClientVersion = 8;
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientversion().data(), this->clientversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->clientversion(), target);
  }

  // optional string SystemSoftware = 9;
  if (has_systemsoftware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->systemsoftware().data(), this->systemsoftware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->systemsoftware(), target);
  }

  // optional string SystemHardware = 10;
  if (has_systemhardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->systemhardware().data(), this->systemhardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->systemhardware(), target);
  }

  // optional string TelecomOper = 11;
  if (has_telecomoper()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->telecomoper().data(), this->telecomoper().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->telecomoper(), target);
  }

  // optional string Network = 12;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->network(), target);
  }

  // optional int32 ScreenWidth = 13;
  if (has_screenwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->screenwidth(), target);
  }

  // optional int32 ScreenHight = 14;
  if (has_screenhight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->screenhight(), target);
  }

  // optional float Density = 15;
  if (has_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->density(), target);
  }

  // optional int32 LoginChannel = 16;
  if (has_loginchannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->loginchannel(), target);
  }

  // optional string CpuHardware = 17;
  if (has_cpuhardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cpuhardware().data(), this->cpuhardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->cpuhardware(), target);
  }

  // optional int32 Memory = 18;
  if (has_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->memory(), target);
  }

  // optional string GLRender = 19;
  if (has_glrender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->glrender().data(), this->glrender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->glrender(), target);
  }

  // optional string GLVersion = 20;
  if (has_glversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->glversion().data(), this->glversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->glversion(), target);
  }

  // optional string DeviceId = 21;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->deviceid(), target);
  }

  // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_PlayerLogin];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      100, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int log_gather_player_login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GameSvrId = 1;
    if (has_gamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamesvrid());
    }

    // optional string dtEventTime = 2;
    if (has_dteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dteventtime());
    }

    // optional string GameAppID = 3;
    if (has_gameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameappid());
    }

    // optional string OpenID = 4;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional int32 Level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 PlayerFriendsNum = 6;
    if (has_playerfriendsnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerfriendsnum());
    }

    // optional int32 PlatID = 7;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platid());
    }

    // optional string ClientVersion = 8;
    if (has_clientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientversion());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string SystemSoftware = 9;
    if (has_systemsoftware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->systemsoftware());
    }

    // optional string SystemHardware = 10;
    if (has_systemhardware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->systemhardware());
    }

    // optional string TelecomOper = 11;
    if (has_telecomoper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->telecomoper());
    }

    // optional string Network = 12;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network());
    }

    // optional int32 ScreenWidth = 13;
    if (has_screenwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screenwidth());
    }

    // optional int32 ScreenHight = 14;
    if (has_screenhight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screenhight());
    }

    // optional float Density = 15;
    if (has_density()) {
      total_size += 1 + 4;
    }

    // optional int32 LoginChannel = 16;
    if (has_loginchannel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginchannel());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string CpuHardware = 17;
    if (has_cpuhardware()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cpuhardware());
    }

    // optional int32 Memory = 18;
    if (has_memory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memory());
    }

    // optional string GLRender = 19;
    if (has_glrender()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->glrender());
    }

    // optional string GLVersion = 20;
    if (has_glversion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->glversion());
    }

    // optional string DeviceId = 21;
    if (has_deviceid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_PlayerLogin];
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void log_gather_player_login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const log_gather_player_login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const log_gather_player_login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void log_gather_player_login::MergeFrom(const log_gather_player_login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesvrid()) {
      set_gamesvrid(from.gamesvrid());
    }
    if (from.has_dteventtime()) {
      set_dteventtime(from.dteventtime());
    }
    if (from.has_gameappid()) {
      set_gameappid(from.gameappid());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_playerfriendsnum()) {
      set_playerfriendsnum(from.playerfriendsnum());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
    if (from.has_clientversion()) {
      set_clientversion(from.clientversion());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_systemsoftware()) {
      set_systemsoftware(from.systemsoftware());
    }
    if (from.has_systemhardware()) {
      set_systemhardware(from.systemhardware());
    }
    if (from.has_telecomoper()) {
      set_telecomoper(from.telecomoper());
    }
    if (from.has_network()) {
      set_network(from.network());
    }
    if (from.has_screenwidth()) {
      set_screenwidth(from.screenwidth());
    }
    if (from.has_screenhight()) {
      set_screenhight(from.screenhight());
    }
    if (from.has_density()) {
      set_density(from.density());
    }
    if (from.has_loginchannel()) {
      set_loginchannel(from.loginchannel());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cpuhardware()) {
      set_cpuhardware(from.cpuhardware());
    }
    if (from.has_memory()) {
      set_memory(from.memory());
    }
    if (from.has_glrender()) {
      set_glrender(from.glrender());
    }
    if (from.has_glversion()) {
      set_glversion(from.glversion());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void log_gather_player_login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log_gather_player_login::CopyFrom(const log_gather_player_login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log_gather_player_login::IsInitialized() const {

  return true;
}

void log_gather_player_login::Swap(log_gather_player_login* other) {
  if (other != this) {
    std::swap(gamesvrid_, other->gamesvrid_);
    std::swap(dteventtime_, other->dteventtime_);
    std::swap(gameappid_, other->gameappid_);
    std::swap(openid_, other->openid_);
    std::swap(level_, other->level_);
    std::swap(playerfriendsnum_, other->playerfriendsnum_);
    std::swap(platid_, other->platid_);
    std::swap(clientversion_, other->clientversion_);
    std::swap(systemsoftware_, other->systemsoftware_);
    std::swap(systemhardware_, other->systemhardware_);
    std::swap(telecomoper_, other->telecomoper_);
    std::swap(network_, other->network_);
    std::swap(screenwidth_, other->screenwidth_);
    std::swap(screenhight_, other->screenhight_);
    std::swap(density_, other->density_);
    std::swap(loginchannel_, other->loginchannel_);
    std::swap(cpuhardware_, other->cpuhardware_);
    std::swap(memory_, other->memory_);
    std::swap(glrender_, other->glrender_);
    std::swap(glversion_, other->glversion_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata log_gather_player_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = log_gather_player_login_descriptor_;
  metadata.reflection = log_gather_player_login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int log_gather_player_logout::kGameSvrIdFieldNumber;
const int log_gather_player_logout::kDtEventTimeFieldNumber;
const int log_gather_player_logout::kGameAppIDFieldNumber;
const int log_gather_player_logout::kOpenIDFieldNumber;
const int log_gather_player_logout::kOnlineTimeFieldNumber;
const int log_gather_player_logout::kLevelFieldNumber;
const int log_gather_player_logout::kPlayerFriendsNumFieldNumber;
const int log_gather_player_logout::kPlatIDFieldNumber;
const int log_gather_player_logout::kClientVersionFieldNumber;
const int log_gather_player_logout::kSystemSoftwareFieldNumber;
const int log_gather_player_logout::kSystemHardwareFieldNumber;
const int log_gather_player_logout::kTelecomOperFieldNumber;
const int log_gather_player_logout::kNetworkFieldNumber;
const int log_gather_player_logout::kScreenWidthFieldNumber;
const int log_gather_player_logout::kScreenHightFieldNumber;
const int log_gather_player_logout::kDensityFieldNumber;
const int log_gather_player_logout::kLoginChannelFieldNumber;
const int log_gather_player_logout::kCpuHardwareFieldNumber;
const int log_gather_player_logout::kMemoryFieldNumber;
const int log_gather_player_logout::kGLRenderFieldNumber;
const int log_gather_player_logout::kGLVersionFieldNumber;
const int log_gather_player_logout::kDeviceIdFieldNumber;
const int log_gather_player_logout::kTypeFieldNumber;
#endif  // !_MSC_VER

log_gather_player_logout::log_gather_player_logout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void log_gather_player_logout::InitAsDefaultInstance() {
}

log_gather_player_logout::log_gather_player_logout(const log_gather_player_logout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void log_gather_player_logout::SharedCtor() {
  _cached_size_ = 0;
  gamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onlinetime_ = 0;
  level_ = 0;
  playerfriendsnum_ = 0;
  platid_ = 0;
  clientversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  systemsoftware_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  systemhardware_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  telecomoper_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  screenwidth_ = 0;
  screenhight_ = 0;
  density_ = 0;
  loginchannel_ = 0;
  cpuhardware_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  memory_ = 0;
  glrender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  glversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

log_gather_player_logout::~log_gather_player_logout() {
  SharedDtor();
}

void log_gather_player_logout::SharedDtor() {
  if (gamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete gamesvrid_;
  }
  if (dteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete dteventtime_;
  }
  if (gameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameappid_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (clientversion_ != &::google::protobuf::internal::kEmptyString) {
    delete clientversion_;
  }
  if (systemsoftware_ != &::google::protobuf::internal::kEmptyString) {
    delete systemsoftware_;
  }
  if (systemhardware_ != &::google::protobuf::internal::kEmptyString) {
    delete systemhardware_;
  }
  if (telecomoper_ != &::google::protobuf::internal::kEmptyString) {
    delete telecomoper_;
  }
  if (network_ != &::google::protobuf::internal::kEmptyString) {
    delete network_;
  }
  if (cpuhardware_ != &::google::protobuf::internal::kEmptyString) {
    delete cpuhardware_;
  }
  if (glrender_ != &::google::protobuf::internal::kEmptyString) {
    delete glrender_;
  }
  if (glversion_ != &::google::protobuf::internal::kEmptyString) {
    delete glversion_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (this != default_instance_) {
  }
}

void log_gather_player_logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* log_gather_player_logout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return log_gather_player_logout_descriptor_;
}

const log_gather_player_logout& log_gather_player_logout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

log_gather_player_logout* log_gather_player_logout::default_instance_ = NULL;

log_gather_player_logout* log_gather_player_logout::New() const {
  return new log_gather_player_logout;
}

void log_gather_player_logout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gamesvrid()) {
      if (gamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        gamesvrid_->clear();
      }
    }
    if (has_dteventtime()) {
      if (dteventtime_ != &::google::protobuf::internal::kEmptyString) {
        dteventtime_->clear();
      }
    }
    if (has_gameappid()) {
      if (gameappid_ != &::google::protobuf::internal::kEmptyString) {
        gameappid_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    onlinetime_ = 0;
    level_ = 0;
    playerfriendsnum_ = 0;
    platid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_clientversion()) {
      if (clientversion_ != &::google::protobuf::internal::kEmptyString) {
        clientversion_->clear();
      }
    }
    if (has_systemsoftware()) {
      if (systemsoftware_ != &::google::protobuf::internal::kEmptyString) {
        systemsoftware_->clear();
      }
    }
    if (has_systemhardware()) {
      if (systemhardware_ != &::google::protobuf::internal::kEmptyString) {
        systemhardware_->clear();
      }
    }
    if (has_telecomoper()) {
      if (telecomoper_ != &::google::protobuf::internal::kEmptyString) {
        telecomoper_->clear();
      }
    }
    if (has_network()) {
      if (network_ != &::google::protobuf::internal::kEmptyString) {
        network_->clear();
      }
    }
    screenwidth_ = 0;
    screenhight_ = 0;
    density_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    loginchannel_ = 0;
    if (has_cpuhardware()) {
      if (cpuhardware_ != &::google::protobuf::internal::kEmptyString) {
        cpuhardware_->clear();
      }
    }
    memory_ = 0;
    if (has_glrender()) {
      if (glrender_ != &::google::protobuf::internal::kEmptyString) {
        glrender_->clear();
      }
    }
    if (has_glversion()) {
      if (glversion_ != &::google::protobuf::internal::kEmptyString) {
        glversion_->clear();
      }
    }
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    type_ = 3;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool log_gather_player_logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gamesvrid().data(), this->gamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dtEventTime;
        break;
      }

      // optional string dtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dteventtime().data(), this->dteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_GameAppID;
        break;
      }

      // optional string GameAppID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GameAppID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameappid().data(), this->gameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_OpenID;
        break;
      }

      // optional string OpenID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OpenID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_OnlineTime;
        break;
      }

      // optional int32 OnlineTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OnlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Level;
        break;
      }

      // optional int32 Level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_PlayerFriendsNum;
        break;
      }

      // optional int32 PlayerFriendsNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerFriendsNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerfriendsnum_)));
          set_has_playerfriendsnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_PlatID;
        break;
      }

      // optional int32 PlatID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platid_)));
          set_has_platid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ClientVersion;
        break;
      }

      // optional string ClientVersion = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClientVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientversion().data(), this->clientversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_SystemSoftware;
        break;
      }

      // optional string SystemSoftware = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SystemSoftware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_systemsoftware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->systemsoftware().data(), this->systemsoftware().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_SystemHardware;
        break;
      }

      // optional string SystemHardware = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SystemHardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_systemhardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->systemhardware().data(), this->systemhardware().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_TelecomOper;
        break;
      }

      // optional string TelecomOper = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TelecomOper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_telecomoper()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->telecomoper().data(), this->telecomoper().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_Network;
        break;
      }

      // optional string Network = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network().data(), this->network().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ScreenWidth;
        break;
      }

      // optional int32 ScreenWidth = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScreenWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screenwidth_)));
          set_has_screenwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ScreenHight;
        break;
      }

      // optional int32 ScreenHight = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScreenHight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screenhight_)));
          set_has_screenhight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_Density;
        break;
      }

      // optional float Density = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Density:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &density_)));
          set_has_density();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_LoginChannel;
        break;
      }

      // optional int32 LoginChannel = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LoginChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginchannel_)));
          set_has_loginchannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_CpuHardware;
        break;
      }

      // optional string CpuHardware = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CpuHardware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpuhardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cpuhardware().data(), this->cpuhardware().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_Memory;
        break;
      }

      // optional int32 Memory = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memory_)));
          set_has_memory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_GLRender;
        break;
      }

      // optional string GLRender = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GLRender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_glrender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->glrender().data(), this->glrender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_GLVersion;
        break;
      }

      // optional string GLVersion = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GLVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_glversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->glversion().data(), this->glversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_DeviceId;
        break;
      }

      // optional string DeviceId = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeviceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_Type;
        break;
      }

      // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_PlayerLogout];
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EConomicAnalysisType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EConomicAnalysisType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(100, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void log_gather_player_logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GameSvrId = 1;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamesvrid().data(), this->gamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gamesvrid(), output);
  }

  // optional string dtEventTime = 2;
  if (has_dteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dteventtime().data(), this->dteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dteventtime(), output);
  }

  // optional string GameAppID = 3;
  if (has_gameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameappid().data(), this->gameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gameappid(), output);
  }

  // optional string OpenID = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->openid(), output);
  }

  // optional int32 OnlineTime = 5;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->onlinetime(), output);
  }

  // optional int32 Level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional int32 PlayerFriendsNum = 7;
  if (has_playerfriendsnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->playerfriendsnum(), output);
  }

  // optional int32 PlatID = 8;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->platid(), output);
  }

  // optional string ClientVersion = 9;
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientversion().data(), this->clientversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->clientversion(), output);
  }

  // optional string SystemSoftware = 10;
  if (has_systemsoftware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->systemsoftware().data(), this->systemsoftware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->systemsoftware(), output);
  }

  // optional string SystemHardware = 11;
  if (has_systemhardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->systemhardware().data(), this->systemhardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->systemhardware(), output);
  }

  // optional string TelecomOper = 12;
  if (has_telecomoper()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->telecomoper().data(), this->telecomoper().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->telecomoper(), output);
  }

  // optional string Network = 13;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->network(), output);
  }

  // optional int32 ScreenWidth = 14;
  if (has_screenwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->screenwidth(), output);
  }

  // optional int32 ScreenHight = 15;
  if (has_screenhight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->screenhight(), output);
  }

  // optional float Density = 16;
  if (has_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->density(), output);
  }

  // optional int32 LoginChannel = 17;
  if (has_loginchannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->loginchannel(), output);
  }

  // optional string CpuHardware = 18;
  if (has_cpuhardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cpuhardware().data(), this->cpuhardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->cpuhardware(), output);
  }

  // optional int32 Memory = 19;
  if (has_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->memory(), output);
  }

  // optional string GLRender = 20;
  if (has_glrender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->glrender().data(), this->glrender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->glrender(), output);
  }

  // optional string GLVersion = 21;
  if (has_glversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->glversion().data(), this->glversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->glversion(), output);
  }

  // optional string DeviceId = 22;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->deviceid(), output);
  }

  // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_PlayerLogout];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      100, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* log_gather_player_logout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GameSvrId = 1;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamesvrid().data(), this->gamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesvrid(), target);
  }

  // optional string dtEventTime = 2;
  if (has_dteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dteventtime().data(), this->dteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dteventtime(), target);
  }

  // optional string GameAppID = 3;
  if (has_gameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameappid().data(), this->gameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gameappid(), target);
  }

  // optional string OpenID = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->openid(), target);
  }

  // optional int32 OnlineTime = 5;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->onlinetime(), target);
  }

  // optional int32 Level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional int32 PlayerFriendsNum = 7;
  if (has_playerfriendsnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->playerfriendsnum(), target);
  }

  // optional int32 PlatID = 8;
  if (has_platid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->platid(), target);
  }

  // optional string ClientVersion = 9;
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientversion().data(), this->clientversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->clientversion(), target);
  }

  // optional string SystemSoftware = 10;
  if (has_systemsoftware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->systemsoftware().data(), this->systemsoftware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->systemsoftware(), target);
  }

  // optional string SystemHardware = 11;
  if (has_systemhardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->systemhardware().data(), this->systemhardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->systemhardware(), target);
  }

  // optional string TelecomOper = 12;
  if (has_telecomoper()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->telecomoper().data(), this->telecomoper().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->telecomoper(), target);
  }

  // optional string Network = 13;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->network(), target);
  }

  // optional int32 ScreenWidth = 14;
  if (has_screenwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->screenwidth(), target);
  }

  // optional int32 ScreenHight = 15;
  if (has_screenhight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->screenhight(), target);
  }

  // optional float Density = 16;
  if (has_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->density(), target);
  }

  // optional int32 LoginChannel = 17;
  if (has_loginchannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->loginchannel(), target);
  }

  // optional string CpuHardware = 18;
  if (has_cpuhardware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cpuhardware().data(), this->cpuhardware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->cpuhardware(), target);
  }

  // optional int32 Memory = 19;
  if (has_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->memory(), target);
  }

  // optional string GLRender = 20;
  if (has_glrender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->glrender().data(), this->glrender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->glrender(), target);
  }

  // optional string GLVersion = 21;
  if (has_glversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->glversion().data(), this->glversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->glversion(), target);
  }

  // optional string DeviceId = 22;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->deviceid(), target);
  }

  // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_PlayerLogout];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      100, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int log_gather_player_logout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GameSvrId = 1;
    if (has_gamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamesvrid());
    }

    // optional string dtEventTime = 2;
    if (has_dteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dteventtime());
    }

    // optional string GameAppID = 3;
    if (has_gameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameappid());
    }

    // optional string OpenID = 4;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional int32 OnlineTime = 5;
    if (has_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinetime());
    }

    // optional int32 Level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 PlayerFriendsNum = 7;
    if (has_playerfriendsnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerfriendsnum());
    }

    // optional int32 PlatID = 8;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ClientVersion = 9;
    if (has_clientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientversion());
    }

    // optional string SystemSoftware = 10;
    if (has_systemsoftware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->systemsoftware());
    }

    // optional string SystemHardware = 11;
    if (has_systemhardware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->systemhardware());
    }

    // optional string TelecomOper = 12;
    if (has_telecomoper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->telecomoper());
    }

    // optional string Network = 13;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network());
    }

    // optional int32 ScreenWidth = 14;
    if (has_screenwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screenwidth());
    }

    // optional int32 ScreenHight = 15;
    if (has_screenhight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screenhight());
    }

    // optional float Density = 16;
    if (has_density()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 LoginChannel = 17;
    if (has_loginchannel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginchannel());
    }

    // optional string CpuHardware = 18;
    if (has_cpuhardware()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cpuhardware());
    }

    // optional int32 Memory = 19;
    if (has_memory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memory());
    }

    // optional string GLRender = 20;
    if (has_glrender()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->glrender());
    }

    // optional string GLVersion = 21;
    if (has_glversion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->glversion());
    }

    // optional string DeviceId = 22;
    if (has_deviceid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_PlayerLogout];
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void log_gather_player_logout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const log_gather_player_logout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const log_gather_player_logout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void log_gather_player_logout::MergeFrom(const log_gather_player_logout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesvrid()) {
      set_gamesvrid(from.gamesvrid());
    }
    if (from.has_dteventtime()) {
      set_dteventtime(from.dteventtime());
    }
    if (from.has_gameappid()) {
      set_gameappid(from.gameappid());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_playerfriendsnum()) {
      set_playerfriendsnum(from.playerfriendsnum());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_clientversion()) {
      set_clientversion(from.clientversion());
    }
    if (from.has_systemsoftware()) {
      set_systemsoftware(from.systemsoftware());
    }
    if (from.has_systemhardware()) {
      set_systemhardware(from.systemhardware());
    }
    if (from.has_telecomoper()) {
      set_telecomoper(from.telecomoper());
    }
    if (from.has_network()) {
      set_network(from.network());
    }
    if (from.has_screenwidth()) {
      set_screenwidth(from.screenwidth());
    }
    if (from.has_screenhight()) {
      set_screenhight(from.screenhight());
    }
    if (from.has_density()) {
      set_density(from.density());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_loginchannel()) {
      set_loginchannel(from.loginchannel());
    }
    if (from.has_cpuhardware()) {
      set_cpuhardware(from.cpuhardware());
    }
    if (from.has_memory()) {
      set_memory(from.memory());
    }
    if (from.has_glrender()) {
      set_glrender(from.glrender());
    }
    if (from.has_glversion()) {
      set_glversion(from.glversion());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void log_gather_player_logout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log_gather_player_logout::CopyFrom(const log_gather_player_logout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log_gather_player_logout::IsInitialized() const {

  return true;
}

void log_gather_player_logout::Swap(log_gather_player_logout* other) {
  if (other != this) {
    std::swap(gamesvrid_, other->gamesvrid_);
    std::swap(dteventtime_, other->dteventtime_);
    std::swap(gameappid_, other->gameappid_);
    std::swap(openid_, other->openid_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(level_, other->level_);
    std::swap(playerfriendsnum_, other->playerfriendsnum_);
    std::swap(platid_, other->platid_);
    std::swap(clientversion_, other->clientversion_);
    std::swap(systemsoftware_, other->systemsoftware_);
    std::swap(systemhardware_, other->systemhardware_);
    std::swap(telecomoper_, other->telecomoper_);
    std::swap(network_, other->network_);
    std::swap(screenwidth_, other->screenwidth_);
    std::swap(screenhight_, other->screenhight_);
    std::swap(density_, other->density_);
    std::swap(loginchannel_, other->loginchannel_);
    std::swap(cpuhardware_, other->cpuhardware_);
    std::swap(memory_, other->memory_);
    std::swap(glrender_, other->glrender_);
    std::swap(glversion_, other->glversion_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata log_gather_player_logout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = log_gather_player_logout_descriptor_;
  metadata.reflection = log_gather_player_logout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int log_gather_money_flow::kGameSvrIdFieldNumber;
const int log_gather_money_flow::kDtEventTimeFieldNumber;
const int log_gather_money_flow::kVGameAppIDFieldNumber;
const int log_gather_money_flow::kPlatIDFieldNumber;
const int log_gather_money_flow::kIZoneAreaIDFieldNumber;
const int log_gather_money_flow::kVopenidFieldNumber;
const int log_gather_money_flow::kSequenceFieldNumber;
const int log_gather_money_flow::kLevelFieldNumber;
const int log_gather_money_flow::kAfterMOneyFieldNumber;
const int log_gather_money_flow::kIMoneyFieldNumber;
const int log_gather_money_flow::kReasonFieldNumber;
const int log_gather_money_flow::kSubReasonFieldNumber;
const int log_gather_money_flow::kAddOrReduceFieldNumber;
const int log_gather_money_flow::kIMoneyTypeFieldNumber;
const int log_gather_money_flow::kTypeFieldNumber;
#endif  // !_MSC_VER

log_gather_money_flow::log_gather_money_flow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void log_gather_money_flow::InitAsDefaultInstance() {
}

log_gather_money_flow::log_gather_money_flow(const log_gather_money_flow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void log_gather_money_flow::SharedCtor() {
  _cached_size_ = 0;
  gamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platid_ = 0;
  izoneareaid_ = 0;
  vopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sequence_ = 0;
  level_ = 0;
  aftermoney_ = 0;
  imoney_ = 0;
  reason_ = 0;
  subreason_ = 0;
  addorreduce_ = 0;
  imoneytype_ = 0;
  type_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

log_gather_money_flow::~log_gather_money_flow() {
  SharedDtor();
}

void log_gather_money_flow::SharedDtor() {
  if (gamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete gamesvrid_;
  }
  if (dteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete dteventtime_;
  }
  if (vgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete vgameappid_;
  }
  if (vopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete vopenid_;
  }
  if (this != default_instance_) {
  }
}

void log_gather_money_flow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* log_gather_money_flow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return log_gather_money_flow_descriptor_;
}

const log_gather_money_flow& log_gather_money_flow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

log_gather_money_flow* log_gather_money_flow::default_instance_ = NULL;

log_gather_money_flow* log_gather_money_flow::New() const {
  return new log_gather_money_flow;
}

void log_gather_money_flow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gamesvrid()) {
      if (gamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        gamesvrid_->clear();
      }
    }
    if (has_dteventtime()) {
      if (dteventtime_ != &::google::protobuf::internal::kEmptyString) {
        dteventtime_->clear();
      }
    }
    if (has_vgameappid()) {
      if (vgameappid_ != &::google::protobuf::internal::kEmptyString) {
        vgameappid_->clear();
      }
    }
    platid_ = 0;
    izoneareaid_ = 0;
    if (has_vopenid()) {
      if (vopenid_ != &::google::protobuf::internal::kEmptyString) {
        vopenid_->clear();
      }
    }
    sequence_ = 0;
    level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    aftermoney_ = 0;
    imoney_ = 0;
    reason_ = 0;
    subreason_ = 0;
    addorreduce_ = 0;
    imoneytype_ = 0;
    type_ = 4;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool log_gather_money_flow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gamesvrid().data(), this->gamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dtEventTime;
        break;
      }

      // optional string dtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dteventtime().data(), this->dteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vGameAppID;
        break;
      }

      // optional string vGameAppID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vGameAppID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vgameappid().data(), this->vgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_PlatID;
        break;
      }

      // optional int32 PlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platid_)));
          set_has_platid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iZoneAreaID;
        break;
      }

      // optional int32 iZoneAreaID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iZoneAreaID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &izoneareaid_)));
          set_has_izoneareaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_vopenid;
        break;
      }

      // optional string vopenid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vopenid().data(), this->vopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Sequence;
        break;
      }

      // optional int32 Sequence = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Level;
        break;
      }

      // optional int32 Level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_AfterMOney;
        break;
      }

      // optional int32 AfterMOney = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AfterMOney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aftermoney_)));
          set_has_aftermoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_iMoney;
        break;
      }

      // optional int32 iMoney = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imoney_)));
          set_has_imoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_Reason;
        break;
      }

      // optional int32 Reason = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_SubReason;
        break;
      }

      // optional int32 SubReason = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SubReason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subreason_)));
          set_has_subreason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_AddOrReduce;
        break;
      }

      // optional int32 AddOrReduce = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AddOrReduce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addorreduce_)));
          set_has_addorreduce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_iMoneyType;
        break;
      }

      // optional int32 iMoneyType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iMoneyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imoneytype_)));
          set_has_imoneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_Type;
        break;
      }

      // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_MoneyFlow];
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EConomicAnalysisType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EConomicAnalysisType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(100, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void log_gather_money_flow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GameSvrId = 1;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamesvrid().data(), this->gamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gamesvrid(), output);
  }

  // optional string dtEventTime = 2;
  if (has_dteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dteventtime().data(), this->dteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dteventtime(), output);
  }

  // optional string vGameAppID = 3;
  if (has_vgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vgameappid().data(), this->vgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->vgameappid(), output);
  }

  // optional int32 PlatID = 4;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->platid(), output);
  }

  // optional int32 iZoneAreaID = 5;
  if (has_izoneareaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->izoneareaid(), output);
  }

  // optional string vopenid = 6;
  if (has_vopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vopenid().data(), this->vopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->vopenid(), output);
  }

  // optional int32 Sequence = 8;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sequence(), output);
  }

  // optional int32 Level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional int32 AfterMOney = 10;
  if (has_aftermoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->aftermoney(), output);
  }

  // optional int32 iMoney = 11;
  if (has_imoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->imoney(), output);
  }

  // optional int32 Reason = 12;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->reason(), output);
  }

  // optional int32 SubReason = 13;
  if (has_subreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->subreason(), output);
  }

  // optional int32 AddOrReduce = 14;
  if (has_addorreduce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->addorreduce(), output);
  }

  // optional int32 iMoneyType = 15;
  if (has_imoneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->imoneytype(), output);
  }

  // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_MoneyFlow];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      100, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* log_gather_money_flow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GameSvrId = 1;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamesvrid().data(), this->gamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesvrid(), target);
  }

  // optional string dtEventTime = 2;
  if (has_dteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dteventtime().data(), this->dteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dteventtime(), target);
  }

  // optional string vGameAppID = 3;
  if (has_vgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vgameappid().data(), this->vgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vgameappid(), target);
  }

  // optional int32 PlatID = 4;
  if (has_platid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->platid(), target);
  }

  // optional int32 iZoneAreaID = 5;
  if (has_izoneareaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->izoneareaid(), target);
  }

  // optional string vopenid = 6;
  if (has_vopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vopenid().data(), this->vopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->vopenid(), target);
  }

  // optional int32 Sequence = 8;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sequence(), target);
  }

  // optional int32 Level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional int32 AfterMOney = 10;
  if (has_aftermoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->aftermoney(), target);
  }

  // optional int32 iMoney = 11;
  if (has_imoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->imoney(), target);
  }

  // optional int32 Reason = 12;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->reason(), target);
  }

  // optional int32 SubReason = 13;
  if (has_subreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->subreason(), target);
  }

  // optional int32 AddOrReduce = 14;
  if (has_addorreduce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->addorreduce(), target);
  }

  // optional int32 iMoneyType = 15;
  if (has_imoneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->imoneytype(), target);
  }

  // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_MoneyFlow];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      100, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int log_gather_money_flow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GameSvrId = 1;
    if (has_gamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamesvrid());
    }

    // optional string dtEventTime = 2;
    if (has_dteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dteventtime());
    }

    // optional string vGameAppID = 3;
    if (has_vgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vgameappid());
    }

    // optional int32 PlatID = 4;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platid());
    }

    // optional int32 iZoneAreaID = 5;
    if (has_izoneareaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->izoneareaid());
    }

    // optional string vopenid = 6;
    if (has_vopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vopenid());
    }

    // optional int32 Sequence = 8;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence());
    }

    // optional int32 Level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 AfterMOney = 10;
    if (has_aftermoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aftermoney());
    }

    // optional int32 iMoney = 11;
    if (has_imoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imoney());
    }

    // optional int32 Reason = 12;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

    // optional int32 SubReason = 13;
    if (has_subreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subreason());
    }

    // optional int32 AddOrReduce = 14;
    if (has_addorreduce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addorreduce());
    }

    // optional int32 iMoneyType = 15;
    if (has_imoneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imoneytype());
    }

    // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_MoneyFlow];
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void log_gather_money_flow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const log_gather_money_flow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const log_gather_money_flow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void log_gather_money_flow::MergeFrom(const log_gather_money_flow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesvrid()) {
      set_gamesvrid(from.gamesvrid());
    }
    if (from.has_dteventtime()) {
      set_dteventtime(from.dteventtime());
    }
    if (from.has_vgameappid()) {
      set_vgameappid(from.vgameappid());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
    if (from.has_izoneareaid()) {
      set_izoneareaid(from.izoneareaid());
    }
    if (from.has_vopenid()) {
      set_vopenid(from.vopenid());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_aftermoney()) {
      set_aftermoney(from.aftermoney());
    }
    if (from.has_imoney()) {
      set_imoney(from.imoney());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_subreason()) {
      set_subreason(from.subreason());
    }
    if (from.has_addorreduce()) {
      set_addorreduce(from.addorreduce());
    }
    if (from.has_imoneytype()) {
      set_imoneytype(from.imoneytype());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void log_gather_money_flow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log_gather_money_flow::CopyFrom(const log_gather_money_flow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log_gather_money_flow::IsInitialized() const {

  return true;
}

void log_gather_money_flow::Swap(log_gather_money_flow* other) {
  if (other != this) {
    std::swap(gamesvrid_, other->gamesvrid_);
    std::swap(dteventtime_, other->dteventtime_);
    std::swap(vgameappid_, other->vgameappid_);
    std::swap(platid_, other->platid_);
    std::swap(izoneareaid_, other->izoneareaid_);
    std::swap(vopenid_, other->vopenid_);
    std::swap(sequence_, other->sequence_);
    std::swap(level_, other->level_);
    std::swap(aftermoney_, other->aftermoney_);
    std::swap(imoney_, other->imoney_);
    std::swap(reason_, other->reason_);
    std::swap(subreason_, other->subreason_);
    std::swap(addorreduce_, other->addorreduce_);
    std::swap(imoneytype_, other->imoneytype_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata log_gather_money_flow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = log_gather_money_flow_descriptor_;
  metadata.reflection = log_gather_money_flow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int log_gather_item_flow::kGameSvrIdFieldNumber;
const int log_gather_item_flow::kDtEventTimeFieldNumber;
const int log_gather_item_flow::kVGameAppIDFieldNumber;
const int log_gather_item_flow::kPlatIDFieldNumber;
const int log_gather_item_flow::kIZoneAreaIDFieldNumber;
const int log_gather_item_flow::kVopenidFieldNumber;
const int log_gather_item_flow::kLevelFieldNumber;
const int log_gather_item_flow::kSequenceFieldNumber;
const int log_gather_item_flow::kIGoodsTypeFieldNumber;
const int log_gather_item_flow::kIGoodsIdFieldNumber;
const int log_gather_item_flow::kCountFieldNumber;
const int log_gather_item_flow::kAfterCountFieldNumber;
const int log_gather_item_flow::kReasonFieldNumber;
const int log_gather_item_flow::kSubReasonFieldNumber;
const int log_gather_item_flow::kIMoneyFieldNumber;
const int log_gather_item_flow::kIMoneyTypeFieldNumber;
const int log_gather_item_flow::kAddOrReduceFieldNumber;
const int log_gather_item_flow::kTypeFieldNumber;
#endif  // !_MSC_VER

log_gather_item_flow::log_gather_item_flow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void log_gather_item_flow::InitAsDefaultInstance() {
}

log_gather_item_flow::log_gather_item_flow(const log_gather_item_flow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void log_gather_item_flow::SharedCtor() {
  _cached_size_ = 0;
  gamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vgameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platid_ = 0;
  izoneareaid_ = 0;
  vopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  sequence_ = 0;
  igoodstype_ = 0;
  igoodsid_ = 0;
  count_ = 0;
  aftercount_ = 0;
  reason_ = 0;
  subreason_ = 0;
  imoney_ = 0;
  imoneytype_ = 0;
  addorreduce_ = 0;
  type_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

log_gather_item_flow::~log_gather_item_flow() {
  SharedDtor();
}

void log_gather_item_flow::SharedDtor() {
  if (gamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete gamesvrid_;
  }
  if (dteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete dteventtime_;
  }
  if (vgameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete vgameappid_;
  }
  if (vopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete vopenid_;
  }
  if (this != default_instance_) {
  }
}

void log_gather_item_flow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* log_gather_item_flow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return log_gather_item_flow_descriptor_;
}

const log_gather_item_flow& log_gather_item_flow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

log_gather_item_flow* log_gather_item_flow::default_instance_ = NULL;

log_gather_item_flow* log_gather_item_flow::New() const {
  return new log_gather_item_flow;
}

void log_gather_item_flow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gamesvrid()) {
      if (gamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        gamesvrid_->clear();
      }
    }
    if (has_dteventtime()) {
      if (dteventtime_ != &::google::protobuf::internal::kEmptyString) {
        dteventtime_->clear();
      }
    }
    if (has_vgameappid()) {
      if (vgameappid_ != &::google::protobuf::internal::kEmptyString) {
        vgameappid_->clear();
      }
    }
    platid_ = 0;
    izoneareaid_ = 0;
    if (has_vopenid()) {
      if (vopenid_ != &::google::protobuf::internal::kEmptyString) {
        vopenid_->clear();
      }
    }
    level_ = 0;
    sequence_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    igoodstype_ = 0;
    igoodsid_ = 0;
    count_ = 0;
    aftercount_ = 0;
    reason_ = 0;
    subreason_ = 0;
    imoney_ = 0;
    imoneytype_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    addorreduce_ = 0;
    type_ = 5;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool log_gather_item_flow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gamesvrid().data(), this->gamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dtEventTime;
        break;
      }

      // optional string dtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dteventtime().data(), this->dteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vGameAppID;
        break;
      }

      // optional string vGameAppID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vGameAppID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vgameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vgameappid().data(), this->vgameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_PlatID;
        break;
      }

      // optional int32 PlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platid_)));
          set_has_platid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iZoneAreaID;
        break;
      }

      // optional int32 iZoneAreaID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iZoneAreaID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &izoneareaid_)));
          set_has_izoneareaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_vopenid;
        break;
      }

      // optional string vopenid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vopenid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vopenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vopenid().data(), this->vopenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Level;
        break;
      }

      // optional int32 Level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Sequence;
        break;
      }

      // optional int32 Sequence = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_iGoodsType;
        break;
      }

      // optional int32 iGoodsType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iGoodsType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &igoodstype_)));
          set_has_igoodstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_iGoodsId;
        break;
      }

      // optional int32 iGoodsId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iGoodsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &igoodsid_)));
          set_has_igoodsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_Count;
        break;
      }

      // optional int32 Count = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_AfterCount;
        break;
      }

      // optional int32 AfterCount = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AfterCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aftercount_)));
          set_has_aftercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_Reason;
        break;
      }

      // optional int32 Reason = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_SubReason;
        break;
      }

      // optional int32 SubReason = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SubReason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subreason_)));
          set_has_subreason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_iMoney;
        break;
      }

      // optional int32 iMoney = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imoney_)));
          set_has_imoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_iMoneyType;
        break;
      }

      // optional int32 iMoneyType = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iMoneyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imoneytype_)));
          set_has_imoneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_AddOrReduce;
        break;
      }

      // optional int32 AddOrReduce = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AddOrReduce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addorreduce_)));
          set_has_addorreduce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_Type;
        break;
      }

      // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_ItemFlow];
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EConomicAnalysisType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EConomicAnalysisType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(100, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void log_gather_item_flow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GameSvrId = 1;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamesvrid().data(), this->gamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gamesvrid(), output);
  }

  // optional string dtEventTime = 2;
  if (has_dteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dteventtime().data(), this->dteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dteventtime(), output);
  }

  // optional string vGameAppID = 3;
  if (has_vgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vgameappid().data(), this->vgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->vgameappid(), output);
  }

  // optional int32 PlatID = 4;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->platid(), output);
  }

  // optional int32 iZoneAreaID = 5;
  if (has_izoneareaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->izoneareaid(), output);
  }

  // optional string vopenid = 6;
  if (has_vopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vopenid().data(), this->vopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->vopenid(), output);
  }

  // optional int32 Level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // optional int32 Sequence = 8;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sequence(), output);
  }

  // optional int32 iGoodsType = 9;
  if (has_igoodstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->igoodstype(), output);
  }

  // optional int32 iGoodsId = 10;
  if (has_igoodsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->igoodsid(), output);
  }

  // optional int32 Count = 11;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->count(), output);
  }

  // optional int32 AfterCount = 12;
  if (has_aftercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->aftercount(), output);
  }

  // optional int32 Reason = 13;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->reason(), output);
  }

  // optional int32 SubReason = 14;
  if (has_subreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->subreason(), output);
  }

  // optional int32 iMoney = 15;
  if (has_imoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->imoney(), output);
  }

  // optional int32 iMoneyType = 16;
  if (has_imoneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->imoneytype(), output);
  }

  // optional int32 AddOrReduce = 17;
  if (has_addorreduce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->addorreduce(), output);
  }

  // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_ItemFlow];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      100, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* log_gather_item_flow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GameSvrId = 1;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamesvrid().data(), this->gamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesvrid(), target);
  }

  // optional string dtEventTime = 2;
  if (has_dteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dteventtime().data(), this->dteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dteventtime(), target);
  }

  // optional string vGameAppID = 3;
  if (has_vgameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vgameappid().data(), this->vgameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vgameappid(), target);
  }

  // optional int32 PlatID = 4;
  if (has_platid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->platid(), target);
  }

  // optional int32 iZoneAreaID = 5;
  if (has_izoneareaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->izoneareaid(), target);
  }

  // optional string vopenid = 6;
  if (has_vopenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vopenid().data(), this->vopenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->vopenid(), target);
  }

  // optional int32 Level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // optional int32 Sequence = 8;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sequence(), target);
  }

  // optional int32 iGoodsType = 9;
  if (has_igoodstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->igoodstype(), target);
  }

  // optional int32 iGoodsId = 10;
  if (has_igoodsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->igoodsid(), target);
  }

  // optional int32 Count = 11;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->count(), target);
  }

  // optional int32 AfterCount = 12;
  if (has_aftercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->aftercount(), target);
  }

  // optional int32 Reason = 13;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->reason(), target);
  }

  // optional int32 SubReason = 14;
  if (has_subreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->subreason(), target);
  }

  // optional int32 iMoney = 15;
  if (has_imoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->imoney(), target);
  }

  // optional int32 iMoneyType = 16;
  if (has_imoneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->imoneytype(), target);
  }

  // optional int32 AddOrReduce = 17;
  if (has_addorreduce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->addorreduce(), target);
  }

  // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_ItemFlow];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      100, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int log_gather_item_flow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GameSvrId = 1;
    if (has_gamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamesvrid());
    }

    // optional string dtEventTime = 2;
    if (has_dteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dteventtime());
    }

    // optional string vGameAppID = 3;
    if (has_vgameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vgameappid());
    }

    // optional int32 PlatID = 4;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platid());
    }

    // optional int32 iZoneAreaID = 5;
    if (has_izoneareaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->izoneareaid());
    }

    // optional string vopenid = 6;
    if (has_vopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vopenid());
    }

    // optional int32 Level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 Sequence = 8;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 iGoodsType = 9;
    if (has_igoodstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->igoodstype());
    }

    // optional int32 iGoodsId = 10;
    if (has_igoodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->igoodsid());
    }

    // optional int32 Count = 11;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 AfterCount = 12;
    if (has_aftercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aftercount());
    }

    // optional int32 Reason = 13;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

    // optional int32 SubReason = 14;
    if (has_subreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subreason());
    }

    // optional int32 iMoney = 15;
    if (has_imoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imoney());
    }

    // optional int32 iMoneyType = 16;
    if (has_imoneytype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imoneytype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 AddOrReduce = 17;
    if (has_addorreduce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addorreduce());
    }

    // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_ItemFlow];
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void log_gather_item_flow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const log_gather_item_flow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const log_gather_item_flow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void log_gather_item_flow::MergeFrom(const log_gather_item_flow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesvrid()) {
      set_gamesvrid(from.gamesvrid());
    }
    if (from.has_dteventtime()) {
      set_dteventtime(from.dteventtime());
    }
    if (from.has_vgameappid()) {
      set_vgameappid(from.vgameappid());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
    if (from.has_izoneareaid()) {
      set_izoneareaid(from.izoneareaid());
    }
    if (from.has_vopenid()) {
      set_vopenid(from.vopenid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_igoodstype()) {
      set_igoodstype(from.igoodstype());
    }
    if (from.has_igoodsid()) {
      set_igoodsid(from.igoodsid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_aftercount()) {
      set_aftercount(from.aftercount());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_subreason()) {
      set_subreason(from.subreason());
    }
    if (from.has_imoney()) {
      set_imoney(from.imoney());
    }
    if (from.has_imoneytype()) {
      set_imoneytype(from.imoneytype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_addorreduce()) {
      set_addorreduce(from.addorreduce());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void log_gather_item_flow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log_gather_item_flow::CopyFrom(const log_gather_item_flow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log_gather_item_flow::IsInitialized() const {

  return true;
}

void log_gather_item_flow::Swap(log_gather_item_flow* other) {
  if (other != this) {
    std::swap(gamesvrid_, other->gamesvrid_);
    std::swap(dteventtime_, other->dteventtime_);
    std::swap(vgameappid_, other->vgameappid_);
    std::swap(platid_, other->platid_);
    std::swap(izoneareaid_, other->izoneareaid_);
    std::swap(vopenid_, other->vopenid_);
    std::swap(level_, other->level_);
    std::swap(sequence_, other->sequence_);
    std::swap(igoodstype_, other->igoodstype_);
    std::swap(igoodsid_, other->igoodsid_);
    std::swap(count_, other->count_);
    std::swap(aftercount_, other->aftercount_);
    std::swap(reason_, other->reason_);
    std::swap(subreason_, other->subreason_);
    std::swap(imoney_, other->imoney_);
    std::swap(imoneytype_, other->imoneytype_);
    std::swap(addorreduce_, other->addorreduce_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata log_gather_item_flow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = log_gather_item_flow_descriptor_;
  metadata.reflection = log_gather_item_flow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int log_gather_item_money_flow::kGameSvrIdFieldNumber;
const int log_gather_item_money_flow::kDtEventTimeFieldNumber;
const int log_gather_item_money_flow::kSequenceFieldNumber;
const int log_gather_item_money_flow::kGameAppIDFieldNumber;
const int log_gather_item_money_flow::kOpenIDFieldNumber;
const int log_gather_item_money_flow::kPlatIDFieldNumber;
const int log_gather_item_money_flow::kItemTypeFieldNumber;
const int log_gather_item_money_flow::kItemIdFieldNumber;
const int log_gather_item_money_flow::kCountFieldNumber;
const int log_gather_item_money_flow::kMoneyFieldNumber;
const int log_gather_item_money_flow::kLevelFieldNumber;
const int log_gather_item_money_flow::kMoneyTypeFieldNumber;
const int log_gather_item_money_flow::kTypeFieldNumber;
#endif  // !_MSC_VER

log_gather_item_money_flow::log_gather_item_money_flow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void log_gather_item_money_flow::InitAsDefaultInstance() {
}

log_gather_item_money_flow::log_gather_item_money_flow(const log_gather_item_money_flow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void log_gather_item_money_flow::SharedCtor() {
  _cached_size_ = 0;
  gamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sequence_ = 0;
  gameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platid_ = 0;
  itemtype_ = 0;
  itemid_ = 0;
  count_ = 0;
  money_ = 0;
  level_ = 0;
  moneytype_ = 0;
  type_ = 6;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

log_gather_item_money_flow::~log_gather_item_money_flow() {
  SharedDtor();
}

void log_gather_item_money_flow::SharedDtor() {
  if (gamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete gamesvrid_;
  }
  if (dteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete dteventtime_;
  }
  if (gameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameappid_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (this != default_instance_) {
  }
}

void log_gather_item_money_flow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* log_gather_item_money_flow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return log_gather_item_money_flow_descriptor_;
}

const log_gather_item_money_flow& log_gather_item_money_flow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

log_gather_item_money_flow* log_gather_item_money_flow::default_instance_ = NULL;

log_gather_item_money_flow* log_gather_item_money_flow::New() const {
  return new log_gather_item_money_flow;
}

void log_gather_item_money_flow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gamesvrid()) {
      if (gamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        gamesvrid_->clear();
      }
    }
    if (has_dteventtime()) {
      if (dteventtime_ != &::google::protobuf::internal::kEmptyString) {
        dteventtime_->clear();
      }
    }
    sequence_ = 0;
    if (has_gameappid()) {
      if (gameappid_ != &::google::protobuf::internal::kEmptyString) {
        gameappid_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    platid_ = 0;
    itemtype_ = 0;
    itemid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    count_ = 0;
    money_ = 0;
    level_ = 0;
    moneytype_ = 0;
    type_ = 6;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool log_gather_item_money_flow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gamesvrid().data(), this->gamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dtEventTime;
        break;
      }

      // optional string dtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dteventtime().data(), this->dteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Sequence;
        break;
      }

      // optional int32 Sequence = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_GameAppID;
        break;
      }

      // optional string GameAppID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GameAppID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameappid().data(), this->gameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_OpenID;
        break;
      }

      // optional string OpenID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OpenID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_PlatID;
        break;
      }

      // optional int32 PlatID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platid_)));
          set_has_platid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ItemType;
        break;
      }

      // optional int32 ItemType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ItemId;
        break;
      }

      // optional int32 ItemId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Count;
        break;
      }

      // optional int32 Count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Money;
        break;
      }

      // optional int32 Money = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_Level;
        break;
      }

      // optional int32 Level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_MoneyType;
        break;
      }

      // optional int32 MoneyType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MoneyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_Type;
        break;
      }

      // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_ItemMoneyFlow];
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EConomicAnalysisType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EConomicAnalysisType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(100, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void log_gather_item_money_flow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GameSvrId = 1;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamesvrid().data(), this->gamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gamesvrid(), output);
  }

  // optional string dtEventTime = 2;
  if (has_dteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dteventtime().data(), this->dteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dteventtime(), output);
  }

  // optional int32 Sequence = 3;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sequence(), output);
  }

  // optional string GameAppID = 4;
  if (has_gameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameappid().data(), this->gameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gameappid(), output);
  }

  // optional string OpenID = 5;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->openid(), output);
  }

  // optional int32 PlatID = 6;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->platid(), output);
  }

  // optional int32 ItemType = 7;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->itemtype(), output);
  }

  // optional int32 ItemId = 8;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->itemid(), output);
  }

  // optional int32 Count = 9;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->count(), output);
  }

  // optional int32 Money = 10;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->money(), output);
  }

  // optional int32 Level = 11;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->level(), output);
  }

  // optional int32 MoneyType = 12;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->moneytype(), output);
  }

  // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_ItemMoneyFlow];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      100, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* log_gather_item_money_flow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GameSvrId = 1;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamesvrid().data(), this->gamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesvrid(), target);
  }

  // optional string dtEventTime = 2;
  if (has_dteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dteventtime().data(), this->dteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dteventtime(), target);
  }

  // optional int32 Sequence = 3;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sequence(), target);
  }

  // optional string GameAppID = 4;
  if (has_gameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameappid().data(), this->gameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gameappid(), target);
  }

  // optional string OpenID = 5;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->openid(), target);
  }

  // optional int32 PlatID = 6;
  if (has_platid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->platid(), target);
  }

  // optional int32 ItemType = 7;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->itemtype(), target);
  }

  // optional int32 ItemId = 8;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->itemid(), target);
  }

  // optional int32 Count = 9;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->count(), target);
  }

  // optional int32 Money = 10;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->money(), target);
  }

  // optional int32 Level = 11;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->level(), target);
  }

  // optional int32 MoneyType = 12;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->moneytype(), target);
  }

  // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_ItemMoneyFlow];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      100, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int log_gather_item_money_flow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GameSvrId = 1;
    if (has_gamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamesvrid());
    }

    // optional string dtEventTime = 2;
    if (has_dteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dteventtime());
    }

    // optional int32 Sequence = 3;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence());
    }

    // optional string GameAppID = 4;
    if (has_gameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameappid());
    }

    // optional string OpenID = 5;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional int32 PlatID = 6;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platid());
    }

    // optional int32 ItemType = 7;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }

    // optional int32 ItemId = 8;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 Count = 9;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 Money = 10;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 Level = 11;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 MoneyType = 12;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moneytype());
    }

    // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_ItemMoneyFlow];
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void log_gather_item_money_flow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const log_gather_item_money_flow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const log_gather_item_money_flow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void log_gather_item_money_flow::MergeFrom(const log_gather_item_money_flow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesvrid()) {
      set_gamesvrid(from.gamesvrid());
    }
    if (from.has_dteventtime()) {
      set_dteventtime(from.dteventtime());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_gameappid()) {
      set_gameappid(from.gameappid());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void log_gather_item_money_flow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log_gather_item_money_flow::CopyFrom(const log_gather_item_money_flow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log_gather_item_money_flow::IsInitialized() const {

  return true;
}

void log_gather_item_money_flow::Swap(log_gather_item_money_flow* other) {
  if (other != this) {
    std::swap(gamesvrid_, other->gamesvrid_);
    std::swap(dteventtime_, other->dteventtime_);
    std::swap(sequence_, other->sequence_);
    std::swap(gameappid_, other->gameappid_);
    std::swap(openid_, other->openid_);
    std::swap(platid_, other->platid_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(money_, other->money_);
    std::swap(level_, other->level_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata log_gather_item_money_flow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = log_gather_item_money_flow_descriptor_;
  metadata.reflection = log_gather_item_money_flow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int log_gather_player_exp_flow::kGameSvrIdFieldNumber;
const int log_gather_player_exp_flow::kDtEventTimeFieldNumber;
const int log_gather_player_exp_flow::kGameAppIDFieldNumber;
const int log_gather_player_exp_flow::kOpenIDFieldNumber;
const int log_gather_player_exp_flow::kPlatIDFieldNumber;
const int log_gather_player_exp_flow::kExpChangeFieldNumber;
const int log_gather_player_exp_flow::kBeforeLevelFieldNumber;
const int log_gather_player_exp_flow::kAfterLevelFieldNumber;
const int log_gather_player_exp_flow::kTimeFieldNumber;
const int log_gather_player_exp_flow::kReasonFieldNumber;
const int log_gather_player_exp_flow::kSubReasonFieldNumber;
const int log_gather_player_exp_flow::kTypeFieldNumber;
#endif  // !_MSC_VER

log_gather_player_exp_flow::log_gather_player_exp_flow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void log_gather_player_exp_flow::InitAsDefaultInstance() {
}

log_gather_player_exp_flow::log_gather_player_exp_flow(const log_gather_player_exp_flow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void log_gather_player_exp_flow::SharedCtor() {
  _cached_size_ = 0;
  gamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platid_ = 0;
  expchange_ = 0;
  beforelevel_ = 0;
  afterlevel_ = 0;
  time_ = 0;
  reason_ = 0;
  subreason_ = 0;
  type_ = 7;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

log_gather_player_exp_flow::~log_gather_player_exp_flow() {
  SharedDtor();
}

void log_gather_player_exp_flow::SharedDtor() {
  if (gamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete gamesvrid_;
  }
  if (dteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete dteventtime_;
  }
  if (gameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameappid_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (this != default_instance_) {
  }
}

void log_gather_player_exp_flow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* log_gather_player_exp_flow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return log_gather_player_exp_flow_descriptor_;
}

const log_gather_player_exp_flow& log_gather_player_exp_flow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

log_gather_player_exp_flow* log_gather_player_exp_flow::default_instance_ = NULL;

log_gather_player_exp_flow* log_gather_player_exp_flow::New() const {
  return new log_gather_player_exp_flow;
}

void log_gather_player_exp_flow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gamesvrid()) {
      if (gamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        gamesvrid_->clear();
      }
    }
    if (has_dteventtime()) {
      if (dteventtime_ != &::google::protobuf::internal::kEmptyString) {
        dteventtime_->clear();
      }
    }
    if (has_gameappid()) {
      if (gameappid_ != &::google::protobuf::internal::kEmptyString) {
        gameappid_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    platid_ = 0;
    expchange_ = 0;
    beforelevel_ = 0;
    afterlevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    time_ = 0;
    reason_ = 0;
    subreason_ = 0;
    type_ = 7;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool log_gather_player_exp_flow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gamesvrid().data(), this->gamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dtEventTime;
        break;
      }

      // optional string dtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dteventtime().data(), this->dteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_GameAppID;
        break;
      }

      // optional string GameAppID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GameAppID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameappid().data(), this->gameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_OpenID;
        break;
      }

      // optional string OpenID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OpenID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_PlatID;
        break;
      }

      // optional int32 PlatID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platid_)));
          set_has_platid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ExpChange;
        break;
      }

      // optional int32 ExpChange = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExpChange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expchange_)));
          set_has_expchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_BeforeLevel;
        break;
      }

      // optional int32 BeforeLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BeforeLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beforelevel_)));
          set_has_beforelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_AfterLevel;
        break;
      }

      // optional int32 AfterLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AfterLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &afterlevel_)));
          set_has_afterlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Time;
        break;
      }

      // optional int32 Time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Reason;
        break;
      }

      // optional int32 Reason = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_SubReason;
        break;
      }

      // optional int32 SubReason = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SubReason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subreason_)));
          set_has_subreason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_Type;
        break;
      }

      // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_PlayerExpFlow];
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EConomicAnalysisType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EConomicAnalysisType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(100, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void log_gather_player_exp_flow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GameSvrId = 1;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamesvrid().data(), this->gamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gamesvrid(), output);
  }

  // optional string dtEventTime = 2;
  if (has_dteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dteventtime().data(), this->dteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dteventtime(), output);
  }

  // optional string GameAppID = 3;
  if (has_gameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameappid().data(), this->gameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gameappid(), output);
  }

  // optional string OpenID = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->openid(), output);
  }

  // optional int32 PlatID = 5;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->platid(), output);
  }

  // optional int32 ExpChange = 6;
  if (has_expchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->expchange(), output);
  }

  // optional int32 BeforeLevel = 7;
  if (has_beforelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->beforelevel(), output);
  }

  // optional int32 AfterLevel = 8;
  if (has_afterlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->afterlevel(), output);
  }

  // optional int32 Time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->time(), output);
  }

  // optional int32 Reason = 10;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->reason(), output);
  }

  // optional int32 SubReason = 11;
  if (has_subreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->subreason(), output);
  }

  // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_PlayerExpFlow];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      100, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* log_gather_player_exp_flow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GameSvrId = 1;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamesvrid().data(), this->gamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesvrid(), target);
  }

  // optional string dtEventTime = 2;
  if (has_dteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dteventtime().data(), this->dteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dteventtime(), target);
  }

  // optional string GameAppID = 3;
  if (has_gameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameappid().data(), this->gameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gameappid(), target);
  }

  // optional string OpenID = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->openid(), target);
  }

  // optional int32 PlatID = 5;
  if (has_platid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->platid(), target);
  }

  // optional int32 ExpChange = 6;
  if (has_expchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->expchange(), target);
  }

  // optional int32 BeforeLevel = 7;
  if (has_beforelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->beforelevel(), target);
  }

  // optional int32 AfterLevel = 8;
  if (has_afterlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->afterlevel(), target);
  }

  // optional int32 Time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->time(), target);
  }

  // optional int32 Reason = 10;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->reason(), target);
  }

  // optional int32 SubReason = 11;
  if (has_subreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->subreason(), target);
  }

  // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_PlayerExpFlow];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      100, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int log_gather_player_exp_flow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GameSvrId = 1;
    if (has_gamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamesvrid());
    }

    // optional string dtEventTime = 2;
    if (has_dteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dteventtime());
    }

    // optional string GameAppID = 3;
    if (has_gameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameappid());
    }

    // optional string OpenID = 4;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional int32 PlatID = 5;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platid());
    }

    // optional int32 ExpChange = 6;
    if (has_expchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expchange());
    }

    // optional int32 BeforeLevel = 7;
    if (has_beforelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beforelevel());
    }

    // optional int32 AfterLevel = 8;
    if (has_afterlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->afterlevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 Time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 Reason = 10;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

    // optional int32 SubReason = 11;
    if (has_subreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subreason());
    }

    // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_PlayerExpFlow];
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void log_gather_player_exp_flow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const log_gather_player_exp_flow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const log_gather_player_exp_flow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void log_gather_player_exp_flow::MergeFrom(const log_gather_player_exp_flow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesvrid()) {
      set_gamesvrid(from.gamesvrid());
    }
    if (from.has_dteventtime()) {
      set_dteventtime(from.dteventtime());
    }
    if (from.has_gameappid()) {
      set_gameappid(from.gameappid());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
    if (from.has_expchange()) {
      set_expchange(from.expchange());
    }
    if (from.has_beforelevel()) {
      set_beforelevel(from.beforelevel());
    }
    if (from.has_afterlevel()) {
      set_afterlevel(from.afterlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_subreason()) {
      set_subreason(from.subreason());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void log_gather_player_exp_flow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log_gather_player_exp_flow::CopyFrom(const log_gather_player_exp_flow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log_gather_player_exp_flow::IsInitialized() const {

  return true;
}

void log_gather_player_exp_flow::Swap(log_gather_player_exp_flow* other) {
  if (other != this) {
    std::swap(gamesvrid_, other->gamesvrid_);
    std::swap(dteventtime_, other->dteventtime_);
    std::swap(gameappid_, other->gameappid_);
    std::swap(openid_, other->openid_);
    std::swap(platid_, other->platid_);
    std::swap(expchange_, other->expchange_);
    std::swap(beforelevel_, other->beforelevel_);
    std::swap(afterlevel_, other->afterlevel_);
    std::swap(time_, other->time_);
    std::swap(reason_, other->reason_);
    std::swap(subreason_, other->subreason_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata log_gather_player_exp_flow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = log_gather_player_exp_flow_descriptor_;
  metadata.reflection = log_gather_player_exp_flow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int log_gather_sns_flow::kGameSvrIdFieldNumber;
const int log_gather_sns_flow::kDtEventTimeFieldNumber;
const int log_gather_sns_flow::kGameAppIDFieldNumber;
const int log_gather_sns_flow::kPlatIDFieldNumber;
const int log_gather_sns_flow::kActorOpenIDFieldNumber;
const int log_gather_sns_flow::kRecNumFieldNumber;
const int log_gather_sns_flow::kCountFieldNumber;
const int log_gather_sns_flow::kSNSTypeFieldNumber;
const int log_gather_sns_flow::kSNSSubTypeFieldNumber;
const int log_gather_sns_flow::kTypeFieldNumber;
#endif  // !_MSC_VER

log_gather_sns_flow::log_gather_sns_flow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void log_gather_sns_flow::InitAsDefaultInstance() {
}

log_gather_sns_flow::log_gather_sns_flow(const log_gather_sns_flow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void log_gather_sns_flow::SharedCtor() {
  _cached_size_ = 0;
  gamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platid_ = 0;
  actoropenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recnum_ = 0;
  count_ = 0;
  snstype_ = 0;
  snssubtype_ = 0;
  type_ = 8;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

log_gather_sns_flow::~log_gather_sns_flow() {
  SharedDtor();
}

void log_gather_sns_flow::SharedDtor() {
  if (gamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete gamesvrid_;
  }
  if (dteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete dteventtime_;
  }
  if (gameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameappid_;
  }
  if (actoropenid_ != &::google::protobuf::internal::kEmptyString) {
    delete actoropenid_;
  }
  if (this != default_instance_) {
  }
}

void log_gather_sns_flow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* log_gather_sns_flow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return log_gather_sns_flow_descriptor_;
}

const log_gather_sns_flow& log_gather_sns_flow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

log_gather_sns_flow* log_gather_sns_flow::default_instance_ = NULL;

log_gather_sns_flow* log_gather_sns_flow::New() const {
  return new log_gather_sns_flow;
}

void log_gather_sns_flow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gamesvrid()) {
      if (gamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        gamesvrid_->clear();
      }
    }
    if (has_dteventtime()) {
      if (dteventtime_ != &::google::protobuf::internal::kEmptyString) {
        dteventtime_->clear();
      }
    }
    if (has_gameappid()) {
      if (gameappid_ != &::google::protobuf::internal::kEmptyString) {
        gameappid_->clear();
      }
    }
    platid_ = 0;
    if (has_actoropenid()) {
      if (actoropenid_ != &::google::protobuf::internal::kEmptyString) {
        actoropenid_->clear();
      }
    }
    recnum_ = 0;
    count_ = 0;
    snstype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    snssubtype_ = 0;
    type_ = 8;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool log_gather_sns_flow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gamesvrid().data(), this->gamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dtEventTime;
        break;
      }

      // optional string dtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dteventtime().data(), this->dteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_GameAppID;
        break;
      }

      // optional string GameAppID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GameAppID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameappid().data(), this->gameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_PlatID;
        break;
      }

      // optional int32 PlatID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platid_)));
          set_has_platid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ActorOpenID;
        break;
      }

      // optional string ActorOpenID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActorOpenID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actoropenid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->actoropenid().data(), this->actoropenid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RecNum;
        break;
      }

      // optional int32 RecNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RecNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recnum_)));
          set_has_recnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Count;
        break;
      }

      // optional int32 Count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_SNSType;
        break;
      }

      // optional int32 SNSType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SNSType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snstype_)));
          set_has_snstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_SNSSubType;
        break;
      }

      // optional int32 SNSSubType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SNSSubType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snssubtype_)));
          set_has_snssubtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_Type;
        break;
      }

      // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_SnsFlow];
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EConomicAnalysisType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EConomicAnalysisType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(100, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void log_gather_sns_flow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GameSvrId = 1;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamesvrid().data(), this->gamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gamesvrid(), output);
  }

  // optional string dtEventTime = 2;
  if (has_dteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dteventtime().data(), this->dteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dteventtime(), output);
  }

  // optional string GameAppID = 3;
  if (has_gameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameappid().data(), this->gameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gameappid(), output);
  }

  // optional int32 PlatID = 4;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->platid(), output);
  }

  // optional string ActorOpenID = 5;
  if (has_actoropenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->actoropenid().data(), this->actoropenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->actoropenid(), output);
  }

  // optional int32 RecNum = 6;
  if (has_recnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->recnum(), output);
  }

  // optional int32 Count = 7;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->count(), output);
  }

  // optional int32 SNSType = 8;
  if (has_snstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->snstype(), output);
  }

  // optional int32 SNSSubType = 9;
  if (has_snssubtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->snssubtype(), output);
  }

  // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_SnsFlow];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      100, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* log_gather_sns_flow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GameSvrId = 1;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamesvrid().data(), this->gamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesvrid(), target);
  }

  // optional string dtEventTime = 2;
  if (has_dteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dteventtime().data(), this->dteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dteventtime(), target);
  }

  // optional string GameAppID = 3;
  if (has_gameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameappid().data(), this->gameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gameappid(), target);
  }

  // optional int32 PlatID = 4;
  if (has_platid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->platid(), target);
  }

  // optional string ActorOpenID = 5;
  if (has_actoropenid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->actoropenid().data(), this->actoropenid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->actoropenid(), target);
  }

  // optional int32 RecNum = 6;
  if (has_recnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->recnum(), target);
  }

  // optional int32 Count = 7;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->count(), target);
  }

  // optional int32 SNSType = 8;
  if (has_snstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->snstype(), target);
  }

  // optional int32 SNSSubType = 9;
  if (has_snssubtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->snssubtype(), target);
  }

  // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_SnsFlow];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      100, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int log_gather_sns_flow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GameSvrId = 1;
    if (has_gamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamesvrid());
    }

    // optional string dtEventTime = 2;
    if (has_dteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dteventtime());
    }

    // optional string GameAppID = 3;
    if (has_gameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameappid());
    }

    // optional int32 PlatID = 4;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platid());
    }

    // optional string ActorOpenID = 5;
    if (has_actoropenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->actoropenid());
    }

    // optional int32 RecNum = 6;
    if (has_recnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recnum());
    }

    // optional int32 Count = 7;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 SNSType = 8;
    if (has_snstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snstype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 SNSSubType = 9;
    if (has_snssubtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snssubtype());
    }

    // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_SnsFlow];
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void log_gather_sns_flow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const log_gather_sns_flow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const log_gather_sns_flow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void log_gather_sns_flow::MergeFrom(const log_gather_sns_flow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesvrid()) {
      set_gamesvrid(from.gamesvrid());
    }
    if (from.has_dteventtime()) {
      set_dteventtime(from.dteventtime());
    }
    if (from.has_gameappid()) {
      set_gameappid(from.gameappid());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
    if (from.has_actoropenid()) {
      set_actoropenid(from.actoropenid());
    }
    if (from.has_recnum()) {
      set_recnum(from.recnum());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_snstype()) {
      set_snstype(from.snstype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_snssubtype()) {
      set_snssubtype(from.snssubtype());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void log_gather_sns_flow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log_gather_sns_flow::CopyFrom(const log_gather_sns_flow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log_gather_sns_flow::IsInitialized() const {

  return true;
}

void log_gather_sns_flow::Swap(log_gather_sns_flow* other) {
  if (other != this) {
    std::swap(gamesvrid_, other->gamesvrid_);
    std::swap(dteventtime_, other->dteventtime_);
    std::swap(gameappid_, other->gameappid_);
    std::swap(platid_, other->platid_);
    std::swap(actoropenid_, other->actoropenid_);
    std::swap(recnum_, other->recnum_);
    std::swap(count_, other->count_);
    std::swap(snstype_, other->snstype_);
    std::swap(snssubtype_, other->snssubtype_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata log_gather_sns_flow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = log_gather_sns_flow_descriptor_;
  metadata.reflection = log_gather_sns_flow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int log_gather_round_flow::kGameSvrIdFieldNumber;
const int log_gather_round_flow::kDtEventTimeFieldNumber;
const int log_gather_round_flow::kGameAppIDFieldNumber;
const int log_gather_round_flow::kOpenIDFieldNumber;
const int log_gather_round_flow::kPlatIDFieldNumber;
const int log_gather_round_flow::kBattleIDFieldNumber;
const int log_gather_round_flow::kBattleTypeFieldNumber;
const int log_gather_round_flow::kRoundScoreFieldNumber;
const int log_gather_round_flow::kRoundTimeFieldNumber;
const int log_gather_round_flow::kResultFieldNumber;
const int log_gather_round_flow::kRankFieldNumber;
const int log_gather_round_flow::kGoldFieldNumber;
const int log_gather_round_flow::kTypeFieldNumber;
#endif  // !_MSC_VER

log_gather_round_flow::log_gather_round_flow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void log_gather_round_flow::InitAsDefaultInstance() {
}

log_gather_round_flow::log_gather_round_flow(const log_gather_round_flow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void log_gather_round_flow::SharedCtor() {
  _cached_size_ = 0;
  gamesvrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dteventtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platid_ = 0;
  battleid_ = 0;
  battletype_ = 0;
  roundscore_ = 0;
  roundtime_ = 0;
  result_ = 0;
  rank_ = 0;
  gold_ = 0;
  type_ = 9;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

log_gather_round_flow::~log_gather_round_flow() {
  SharedDtor();
}

void log_gather_round_flow::SharedDtor() {
  if (gamesvrid_ != &::google::protobuf::internal::kEmptyString) {
    delete gamesvrid_;
  }
  if (dteventtime_ != &::google::protobuf::internal::kEmptyString) {
    delete dteventtime_;
  }
  if (gameappid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameappid_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (this != default_instance_) {
  }
}

void log_gather_round_flow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* log_gather_round_flow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return log_gather_round_flow_descriptor_;
}

const log_gather_round_flow& log_gather_round_flow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

log_gather_round_flow* log_gather_round_flow::default_instance_ = NULL;

log_gather_round_flow* log_gather_round_flow::New() const {
  return new log_gather_round_flow;
}

void log_gather_round_flow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gamesvrid()) {
      if (gamesvrid_ != &::google::protobuf::internal::kEmptyString) {
        gamesvrid_->clear();
      }
    }
    if (has_dteventtime()) {
      if (dteventtime_ != &::google::protobuf::internal::kEmptyString) {
        dteventtime_->clear();
      }
    }
    if (has_gameappid()) {
      if (gameappid_ != &::google::protobuf::internal::kEmptyString) {
        gameappid_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    platid_ = 0;
    battleid_ = 0;
    battletype_ = 0;
    roundscore_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    roundtime_ = 0;
    result_ = 0;
    rank_ = 0;
    gold_ = 0;
    type_ = 9;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool log_gather_round_flow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GameSvrId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesvrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gamesvrid().data(), this->gamesvrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dtEventTime;
        break;
      }

      // optional string dtEventTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dtEventTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dteventtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dteventtime().data(), this->dteventtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_GameAppID;
        break;
      }

      // optional string GameAppID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GameAppID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameappid().data(), this->gameappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_OpenID;
        break;
      }

      // optional string OpenID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OpenID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_PlatID;
        break;
      }

      // optional int32 PlatID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platid_)));
          set_has_platid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_BattleID;
        break;
      }

      // optional int32 BattleID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BattleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_BattleType;
        break;
      }

      // optional int32 BattleType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BattleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battletype_)));
          set_has_battletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_RoundScore;
        break;
      }

      // optional int32 RoundScore = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoundScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roundscore_)));
          set_has_roundscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_RoundTime;
        break;
      }

      // optional int32 RoundTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoundTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roundtime_)));
          set_has_roundtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Result;
        break;
      }

      // optional int32 Result = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_Rank;
        break;
      }

      // optional int32 Rank = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_Gold;
        break;
      }

      // optional int32 Gold = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_Type;
        break;
      }

      // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_RoundFlow];
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EConomicAnalysisType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EConomicAnalysisType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(100, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void log_gather_round_flow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GameSvrId = 1;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamesvrid().data(), this->gamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gamesvrid(), output);
  }

  // optional string dtEventTime = 2;
  if (has_dteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dteventtime().data(), this->dteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dteventtime(), output);
  }

  // optional string GameAppID = 3;
  if (has_gameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameappid().data(), this->gameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gameappid(), output);
  }

  // optional string OpenID = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->openid(), output);
  }

  // optional int32 PlatID = 5;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->platid(), output);
  }

  // optional int32 BattleID = 6;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->battleid(), output);
  }

  // optional int32 BattleType = 7;
  if (has_battletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->battletype(), output);
  }

  // optional int32 RoundScore = 8;
  if (has_roundscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->roundscore(), output);
  }

  // optional int32 RoundTime = 9;
  if (has_roundtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->roundtime(), output);
  }

  // optional int32 Result = 10;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->result(), output);
  }

  // optional int32 Rank = 11;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->rank(), output);
  }

  // optional int32 Gold = 12;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gold(), output);
  }

  // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_RoundFlow];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      100, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* log_gather_round_flow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GameSvrId = 1;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamesvrid().data(), this->gamesvrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesvrid(), target);
  }

  // optional string dtEventTime = 2;
  if (has_dteventtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dteventtime().data(), this->dteventtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dteventtime(), target);
  }

  // optional string GameAppID = 3;
  if (has_gameappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameappid().data(), this->gameappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gameappid(), target);
  }

  // optional string OpenID = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->openid(), target);
  }

  // optional int32 PlatID = 5;
  if (has_platid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->platid(), target);
  }

  // optional int32 BattleID = 6;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->battleid(), target);
  }

  // optional int32 BattleType = 7;
  if (has_battletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->battletype(), target);
  }

  // optional int32 RoundScore = 8;
  if (has_roundscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->roundscore(), target);
  }

  // optional int32 RoundTime = 9;
  if (has_roundtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->roundtime(), target);
  }

  // optional int32 Result = 10;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->result(), target);
  }

  // optional int32 Rank = 11;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->rank(), target);
  }

  // optional int32 Gold = 12;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gold(), target);
  }

  // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_RoundFlow];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      100, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int log_gather_round_flow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GameSvrId = 1;
    if (has_gamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamesvrid());
    }

    // optional string dtEventTime = 2;
    if (has_dteventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dteventtime());
    }

    // optional string GameAppID = 3;
    if (has_gameappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameappid());
    }

    // optional string OpenID = 4;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional int32 PlatID = 5;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platid());
    }

    // optional int32 BattleID = 6;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleid());
    }

    // optional int32 BattleType = 7;
    if (has_battletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battletype());
    }

    // optional int32 RoundScore = 8;
    if (has_roundscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roundscore());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 RoundTime = 9;
    if (has_roundtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roundtime());
    }

    // optional int32 Result = 10;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 Rank = 11;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 Gold = 12;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional .SProtoSpace.EConomicAnalysisType Type = 100 [default = EConomicAnalysisType_RoundFlow];
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void log_gather_round_flow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const log_gather_round_flow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const log_gather_round_flow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void log_gather_round_flow::MergeFrom(const log_gather_round_flow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesvrid()) {
      set_gamesvrid(from.gamesvrid());
    }
    if (from.has_dteventtime()) {
      set_dteventtime(from.dteventtime());
    }
    if (from.has_gameappid()) {
      set_gameappid(from.gameappid());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_battletype()) {
      set_battletype(from.battletype());
    }
    if (from.has_roundscore()) {
      set_roundscore(from.roundscore());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_roundtime()) {
      set_roundtime(from.roundtime());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void log_gather_round_flow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log_gather_round_flow::CopyFrom(const log_gather_round_flow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log_gather_round_flow::IsInitialized() const {

  return true;
}

void log_gather_round_flow::Swap(log_gather_round_flow* other) {
  if (other != this) {
    std::swap(gamesvrid_, other->gamesvrid_);
    std::swap(dteventtime_, other->dteventtime_);
    std::swap(gameappid_, other->gameappid_);
    std::swap(openid_, other->openid_);
    std::swap(platid_, other->platid_);
    std::swap(battleid_, other->battleid_);
    std::swap(battletype_, other->battletype_);
    std::swap(roundscore_, other->roundscore_);
    std::swap(roundtime_, other->roundtime_);
    std::swap(result_, other->result_);
    std::swap(rank_, other->rank_);
    std::swap(gold_, other->gold_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata log_gather_round_flow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = log_gather_round_flow_descriptor_;
  metadata.reflection = log_gather_round_flow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int log_gather_role_info::kEventIdFieldNumber;
const int log_gather_role_info::kEventTimeFieldNumber;
const int log_gather_role_info::kAppidFieldNumber;
const int log_gather_role_info::kOpenidFieldNumber;
const int log_gather_role_info::kZoneIdFieldNumber;
const int log_gather_role_info::kZoneNameFieldNumber;
const int log_gather_role_info::kPlatformFieldNumber;
const int log_gather_role_info::kImeiFieldNumber;
const int log_gather_role_info::kLevelFieldNumber;
const int log_gather_role_info::kNameFieldNumber;
const int log_gather_role_info::kFightValueFieldNumber;
const int log_gather_role_info::kProfessionFieldNumber;
const int log_gather_role_info::kPayTotalFieldNumber;
const int log_gather_role_info::kCoin1FieldNumber;
const int log_gather_role_info::kCoin2FieldNumber;
const int log_gather_role_info::kVipLevelFieldNumber;
#endif  // !_MSC_VER

log_gather_role_info::log_gather_role_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void log_gather_role_info::InitAsDefaultInstance() {
}

log_gather_role_info::log_gather_role_info(const log_gather_role_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void log_gather_role_info::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 1u;
  event_time_ = GOOGLE_ULONGLONG(0);
  appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zone_id_ = 0u;
  zone_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = 0u;
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fight_value_ = GOOGLE_ULONGLONG(0);
  profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pay_total_ = 0u;
  coin_1_ = 0u;
  coin_2_ = 0u;
  vip_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

log_gather_role_info::~log_gather_role_info() {
  SharedDtor();
}

void log_gather_role_info::SharedDtor() {
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (zone_name_ != &::google::protobuf::internal::kEmptyString) {
    delete zone_name_;
  }
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (profession_ != &::google::protobuf::internal::kEmptyString) {
    delete profession_;
  }
  if (this != default_instance_) {
  }
}

void log_gather_role_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* log_gather_role_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return log_gather_role_info_descriptor_;
}

const log_gather_role_info& log_gather_role_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

log_gather_role_info* log_gather_role_info::default_instance_ = NULL;

log_gather_role_info* log_gather_role_info::New() const {
  return new log_gather_role_info;
}

void log_gather_role_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 1u;
    event_time_ = GOOGLE_ULONGLONG(0);
    if (has_appid()) {
      if (appid_ != &::google::protobuf::internal::kEmptyString) {
        appid_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    zone_id_ = 0u;
    if (has_zone_name()) {
      if (zone_name_ != &::google::protobuf::internal::kEmptyString) {
        zone_name_->clear();
      }
    }
    platform_ = 0u;
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::kEmptyString) {
        imei_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    fight_value_ = GOOGLE_ULONGLONG(0);
    if (has_profession()) {
      if (profession_ != &::google::protobuf::internal::kEmptyString) {
        profession_->clear();
      }
    }
    pay_total_ = 0u;
    coin_1_ = 0u;
    coin_2_ = 0u;
    vip_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool log_gather_role_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_time;
        break;
      }

      // optional uint64 event_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_time_)));
          set_has_event_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appid;
        break;
      }

      // optional string appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_openid;
        break;
      }

      // optional string openid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zone_id;
        break;
      }

      // optional uint32 zone_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_zone_name;
        break;
      }

      // optional string zone_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zone_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zone_name().data(), this->zone_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_platform;
        break;
      }

      // optional uint32 platform = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_imei;
        break;
      }

      // optional string imei = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional uint32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_name;
        break;
      }

      // optional string name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fight_value;
        break;
      }

      // optional uint64 fight_value = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_value_)));
          set_has_fight_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_profession;
        break;
      }

      // optional string profession = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profession:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profession()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->profession().data(), this->profession().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_pay_total;
        break;
      }

      // optional uint32 pay_total = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pay_total_)));
          set_has_pay_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_coin_1;
        break;
      }

      // optional uint32 coin_1 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_1_)));
          set_has_coin_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_coin_2;
        break;
      }

      // optional uint32 coin_2 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_2_)));
          set_has_coin_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void log_gather_role_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 event_id = 1 [default = 1];
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint64 event_time = 2;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->event_time(), output);
  }

  // optional string appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->appid(), output);
  }

  // optional string openid = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->openid(), output);
  }

  // optional uint32 zone_id = 5;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zone_id(), output);
  }

  // optional string zone_name = 6;
  if (has_zone_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone_name().data(), this->zone_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->zone_name(), output);
  }

  // optional uint32 platform = 7;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->platform(), output);
  }

  // optional string imei = 8;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->imei(), output);
  }

  // optional uint32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->level(), output);
  }

  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->name(), output);
  }

  // optional uint64 fight_value = 11;
  if (has_fight_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->fight_value(), output);
  }

  // optional string profession = 12;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profession().data(), this->profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->profession(), output);
  }

  // optional uint32 pay_total = 13;
  if (has_pay_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->pay_total(), output);
  }

  // optional uint32 coin_1 = 14;
  if (has_coin_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->coin_1(), output);
  }

  // optional uint32 coin_2 = 15;
  if (has_coin_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->coin_2(), output);
  }

  // optional uint32 vip_level = 16;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->vip_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* log_gather_role_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 event_id = 1 [default = 1];
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint64 event_time = 2;
  if (has_event_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->event_time(), target);
  }

  // optional string appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->appid(), target);
  }

  // optional string openid = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->openid(), target);
  }

  // optional uint32 zone_id = 5;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zone_id(), target);
  }

  // optional string zone_name = 6;
  if (has_zone_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone_name().data(), this->zone_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->zone_name(), target);
  }

  // optional uint32 platform = 7;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->platform(), target);
  }

  // optional string imei = 8;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->imei(), target);
  }

  // optional uint32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->level(), target);
  }

  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional uint64 fight_value = 11;
  if (has_fight_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->fight_value(), target);
  }

  // optional string profession = 12;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profession().data(), this->profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->profession(), target);
  }

  // optional uint32 pay_total = 13;
  if (has_pay_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->pay_total(), target);
  }

  // optional uint32 coin_1 = 14;
  if (has_coin_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->coin_1(), target);
  }

  // optional uint32 coin_2 = 15;
  if (has_coin_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->coin_2(), target);
  }

  // optional uint32 vip_level = 16;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->vip_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int log_gather_role_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1 [default = 1];
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint64 event_time = 2;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_time());
    }

    // optional string appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

    // optional string openid = 4;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional uint32 zone_id = 5;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }

    // optional string zone_name = 6;
    if (has_zone_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zone_name());
    }

    // optional uint32 platform = 7;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform());
    }

    // optional string imei = 8;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 fight_value = 11;
    if (has_fight_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight_value());
    }

    // optional string profession = 12;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->profession());
    }

    // optional uint32 pay_total = 13;
    if (has_pay_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pay_total());
    }

    // optional uint32 coin_1 = 14;
    if (has_coin_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin_1());
    }

    // optional uint32 coin_2 = 15;
    if (has_coin_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin_2());
    }

    // optional uint32 vip_level = 16;
    if (has_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void log_gather_role_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const log_gather_role_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const log_gather_role_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void log_gather_role_info::MergeFrom(const log_gather_role_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_zone_name()) {
      set_zone_name(from.zone_name());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_imei()) {
      set_imei(from.imei());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fight_value()) {
      set_fight_value(from.fight_value());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_pay_total()) {
      set_pay_total(from.pay_total());
    }
    if (from.has_coin_1()) {
      set_coin_1(from.coin_1());
    }
    if (from.has_coin_2()) {
      set_coin_2(from.coin_2());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void log_gather_role_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log_gather_role_info::CopyFrom(const log_gather_role_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log_gather_role_info::IsInitialized() const {

  return true;
}

void log_gather_role_info::Swap(log_gather_role_info* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(event_time_, other->event_time_);
    std::swap(appid_, other->appid_);
    std::swap(openid_, other->openid_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(zone_name_, other->zone_name_);
    std::swap(platform_, other->platform_);
    std::swap(imei_, other->imei_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(fight_value_, other->fight_value_);
    std::swap(profession_, other->profession_);
    std::swap(pay_total_, other->pay_total_);
    std::swap(coin_1_, other->coin_1_);
    std::swap(coin_2_, other->coin_2_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata log_gather_role_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = log_gather_role_info_descriptor_;
  metadata.reflection = log_gather_role_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int log_gather_task_info::kEventIdFieldNumber;
const int log_gather_task_info::kEventTimeFieldNumber;
const int log_gather_task_info::kAppidFieldNumber;
const int log_gather_task_info::kOpenidFieldNumber;
const int log_gather_task_info::kZoneIdFieldNumber;
const int log_gather_task_info::kZoneNameFieldNumber;
const int log_gather_task_info::kPlatformFieldNumber;
const int log_gather_task_info::kImeiFieldNumber;
const int log_gather_task_info::kTaskIdFieldNumber;
const int log_gather_task_info::kTaskNameFieldNumber;
const int log_gather_task_info::kStatusFieldNumber;
const int log_gather_task_info::kTaskDetailFieldNumber;
#endif  // !_MSC_VER

log_gather_task_info::log_gather_task_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void log_gather_task_info::InitAsDefaultInstance() {
}

log_gather_task_info::log_gather_task_info(const log_gather_task_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void log_gather_task_info::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 2u;
  event_time_ = GOOGLE_ULONGLONG(0);
  appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zone_id_ = 0u;
  zone_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = 0u;
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  task_id_ = 0u;
  task_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0u;
  task_detail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

log_gather_task_info::~log_gather_task_info() {
  SharedDtor();
}

void log_gather_task_info::SharedDtor() {
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (zone_name_ != &::google::protobuf::internal::kEmptyString) {
    delete zone_name_;
  }
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (task_name_ != &::google::protobuf::internal::kEmptyString) {
    delete task_name_;
  }
  if (task_detail_ != &::google::protobuf::internal::kEmptyString) {
    delete task_detail_;
  }
  if (this != default_instance_) {
  }
}

void log_gather_task_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* log_gather_task_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return log_gather_task_info_descriptor_;
}

const log_gather_task_info& log_gather_task_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

log_gather_task_info* log_gather_task_info::default_instance_ = NULL;

log_gather_task_info* log_gather_task_info::New() const {
  return new log_gather_task_info;
}

void log_gather_task_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 2u;
    event_time_ = GOOGLE_ULONGLONG(0);
    if (has_appid()) {
      if (appid_ != &::google::protobuf::internal::kEmptyString) {
        appid_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    zone_id_ = 0u;
    if (has_zone_name()) {
      if (zone_name_ != &::google::protobuf::internal::kEmptyString) {
        zone_name_->clear();
      }
    }
    platform_ = 0u;
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::kEmptyString) {
        imei_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    task_id_ = 0u;
    if (has_task_name()) {
      if (task_name_ != &::google::protobuf::internal::kEmptyString) {
        task_name_->clear();
      }
    }
    status_ = 0u;
    if (has_task_detail()) {
      if (task_detail_ != &::google::protobuf::internal::kEmptyString) {
        task_detail_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool log_gather_task_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_time;
        break;
      }

      // optional uint64 event_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_time_)));
          set_has_event_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appid;
        break;
      }

      // optional string appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_openid;
        break;
      }

      // optional string openid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zone_id;
        break;
      }

      // optional uint32 zone_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_zone_name;
        break;
      }

      // optional string zone_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zone_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zone_name().data(), this->zone_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_platform;
        break;
      }

      // optional uint32 platform = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_imei;
        break;
      }

      // optional string imei = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_task_id;
        break;
      }

      // optional uint32 task_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_task_name;
        break;
      }

      // optional string task_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_name().data(), this->task_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_status;
        break;
      }

      // optional uint32 status = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_task_detail;
        break;
      }

      // optional string task_detail = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_detail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_detail().data(), this->task_detail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void log_gather_task_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 event_id = 1 [default = 2];
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint64 event_time = 2;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->event_time(), output);
  }

  // optional string appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->appid(), output);
  }

  // optional string openid = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->openid(), output);
  }

  // optional uint32 zone_id = 5;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zone_id(), output);
  }

  // optional string zone_name = 6;
  if (has_zone_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone_name().data(), this->zone_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->zone_name(), output);
  }

  // optional uint32 platform = 7;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->platform(), output);
  }

  // optional string imei = 8;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->imei(), output);
  }

  // optional uint32 task_id = 9;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->task_id(), output);
  }

  // optional string task_name = 10;
  if (has_task_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_name().data(), this->task_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->task_name(), output);
  }

  // optional uint32 status = 11;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->status(), output);
  }

  // optional string task_detail = 12;
  if (has_task_detail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_detail().data(), this->task_detail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->task_detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* log_gather_task_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 event_id = 1 [default = 2];
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint64 event_time = 2;
  if (has_event_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->event_time(), target);
  }

  // optional string appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->appid(), target);
  }

  // optional string openid = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->openid(), target);
  }

  // optional uint32 zone_id = 5;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zone_id(), target);
  }

  // optional string zone_name = 6;
  if (has_zone_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone_name().data(), this->zone_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->zone_name(), target);
  }

  // optional uint32 platform = 7;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->platform(), target);
  }

  // optional string imei = 8;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->imei(), target);
  }

  // optional uint32 task_id = 9;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->task_id(), target);
  }

  // optional string task_name = 10;
  if (has_task_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_name().data(), this->task_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->task_name(), target);
  }

  // optional uint32 status = 11;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->status(), target);
  }

  // optional string task_detail = 12;
  if (has_task_detail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_detail().data(), this->task_detail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->task_detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int log_gather_task_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1 [default = 2];
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint64 event_time = 2;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_time());
    }

    // optional string appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

    // optional string openid = 4;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional uint32 zone_id = 5;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }

    // optional string zone_name = 6;
    if (has_zone_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zone_name());
    }

    // optional uint32 platform = 7;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform());
    }

    // optional string imei = 8;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 task_id = 9;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // optional string task_name = 10;
    if (has_task_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_name());
    }

    // optional uint32 status = 11;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional string task_detail = 12;
    if (has_task_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void log_gather_task_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const log_gather_task_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const log_gather_task_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void log_gather_task_info::MergeFrom(const log_gather_task_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_zone_name()) {
      set_zone_name(from.zone_name());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_imei()) {
      set_imei(from.imei());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_task_name()) {
      set_task_name(from.task_name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_task_detail()) {
      set_task_detail(from.task_detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void log_gather_task_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log_gather_task_info::CopyFrom(const log_gather_task_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log_gather_task_info::IsInitialized() const {

  return true;
}

void log_gather_task_info::Swap(log_gather_task_info* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(event_time_, other->event_time_);
    std::swap(appid_, other->appid_);
    std::swap(openid_, other->openid_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(zone_name_, other->zone_name_);
    std::swap(platform_, other->platform_);
    std::swap(imei_, other->imei_);
    std::swap(task_id_, other->task_id_);
    std::swap(task_name_, other->task_name_);
    std::swap(status_, other->status_);
    std::swap(task_detail_, other->task_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata log_gather_task_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = log_gather_task_info_descriptor_;
  metadata.reflection = log_gather_task_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int log_gather_honor_info::kEventIdFieldNumber;
const int log_gather_honor_info::kEventTimeFieldNumber;
const int log_gather_honor_info::kAppidFieldNumber;
const int log_gather_honor_info::kOpenidFieldNumber;
const int log_gather_honor_info::kZoneIdFieldNumber;
const int log_gather_honor_info::kZoneNameFieldNumber;
const int log_gather_honor_info::kPlatformFieldNumber;
const int log_gather_honor_info::kImeiFieldNumber;
const int log_gather_honor_info::kHonorIdFieldNumber;
const int log_gather_honor_info::kHonorNameFieldNumber;
const int log_gather_honor_info::kHonorDetailFieldNumber;
#endif  // !_MSC_VER

log_gather_honor_info::log_gather_honor_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void log_gather_honor_info::InitAsDefaultInstance() {
}

log_gather_honor_info::log_gather_honor_info(const log_gather_honor_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void log_gather_honor_info::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 3u;
  event_time_ = GOOGLE_ULONGLONG(0);
  appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zone_id_ = 0u;
  zone_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = 0u;
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  honor_id_ = 0u;
  honor_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  honor_detail_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

log_gather_honor_info::~log_gather_honor_info() {
  SharedDtor();
}

void log_gather_honor_info::SharedDtor() {
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (zone_name_ != &::google::protobuf::internal::kEmptyString) {
    delete zone_name_;
  }
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (honor_name_ != &::google::protobuf::internal::kEmptyString) {
    delete honor_name_;
  }
  if (this != default_instance_) {
  }
}

void log_gather_honor_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* log_gather_honor_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return log_gather_honor_info_descriptor_;
}

const log_gather_honor_info& log_gather_honor_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

log_gather_honor_info* log_gather_honor_info::default_instance_ = NULL;

log_gather_honor_info* log_gather_honor_info::New() const {
  return new log_gather_honor_info;
}

void log_gather_honor_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 3u;
    event_time_ = GOOGLE_ULONGLONG(0);
    if (has_appid()) {
      if (appid_ != &::google::protobuf::internal::kEmptyString) {
        appid_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    zone_id_ = 0u;
    if (has_zone_name()) {
      if (zone_name_ != &::google::protobuf::internal::kEmptyString) {
        zone_name_->clear();
      }
    }
    platform_ = 0u;
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::kEmptyString) {
        imei_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    honor_id_ = 0u;
    if (has_honor_name()) {
      if (honor_name_ != &::google::protobuf::internal::kEmptyString) {
        honor_name_->clear();
      }
    }
    honor_detail_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool log_gather_honor_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1 [default = 3];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_time;
        break;
      }

      // optional uint64 event_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_time_)));
          set_has_event_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appid;
        break;
      }

      // optional string appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_openid;
        break;
      }

      // optional string openid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zone_id;
        break;
      }

      // optional uint32 zone_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_zone_name;
        break;
      }

      // optional string zone_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zone_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zone_name().data(), this->zone_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_platform;
        break;
      }

      // optional uint32 platform = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_imei;
        break;
      }

      // optional string imei = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_honor_id;
        break;
      }

      // optional uint32 honor_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honor_id_)));
          set_has_honor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_honor_name;
        break;
      }

      // optional string honor_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_honor_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_honor_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->honor_name().data(), this->honor_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_honor_detail;
        break;
      }

      // optional uint32 honor_detail = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor_detail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honor_detail_)));
          set_has_honor_detail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void log_gather_honor_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 event_id = 1 [default = 3];
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint64 event_time = 2;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->event_time(), output);
  }

  // optional string appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->appid(), output);
  }

  // optional string openid = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->openid(), output);
  }

  // optional uint32 zone_id = 5;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zone_id(), output);
  }

  // optional string zone_name = 6;
  if (has_zone_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone_name().data(), this->zone_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->zone_name(), output);
  }

  // optional uint32 platform = 7;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->platform(), output);
  }

  // optional string imei = 8;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->imei(), output);
  }

  // optional uint32 honor_id = 9;
  if (has_honor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->honor_id(), output);
  }

  // optional string honor_name = 10;
  if (has_honor_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->honor_name().data(), this->honor_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->honor_name(), output);
  }

  // optional uint32 honor_detail = 11;
  if (has_honor_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->honor_detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* log_gather_honor_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 event_id = 1 [default = 3];
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint64 event_time = 2;
  if (has_event_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->event_time(), target);
  }

  // optional string appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->appid(), target);
  }

  // optional string openid = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->openid(), target);
  }

  // optional uint32 zone_id = 5;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zone_id(), target);
  }

  // optional string zone_name = 6;
  if (has_zone_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone_name().data(), this->zone_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->zone_name(), target);
  }

  // optional uint32 platform = 7;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->platform(), target);
  }

  // optional string imei = 8;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->imei(), target);
  }

  // optional uint32 honor_id = 9;
  if (has_honor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->honor_id(), target);
  }

  // optional string honor_name = 10;
  if (has_honor_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->honor_name().data(), this->honor_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->honor_name(), target);
  }

  // optional uint32 honor_detail = 11;
  if (has_honor_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->honor_detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int log_gather_honor_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1 [default = 3];
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint64 event_time = 2;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_time());
    }

    // optional string appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

    // optional string openid = 4;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional uint32 zone_id = 5;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }

    // optional string zone_name = 6;
    if (has_zone_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zone_name());
    }

    // optional uint32 platform = 7;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform());
    }

    // optional string imei = 8;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 honor_id = 9;
    if (has_honor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->honor_id());
    }

    // optional string honor_name = 10;
    if (has_honor_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->honor_name());
    }

    // optional uint32 honor_detail = 11;
    if (has_honor_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->honor_detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void log_gather_honor_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const log_gather_honor_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const log_gather_honor_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void log_gather_honor_info::MergeFrom(const log_gather_honor_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_zone_name()) {
      set_zone_name(from.zone_name());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_imei()) {
      set_imei(from.imei());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_honor_id()) {
      set_honor_id(from.honor_id());
    }
    if (from.has_honor_name()) {
      set_honor_name(from.honor_name());
    }
    if (from.has_honor_detail()) {
      set_honor_detail(from.honor_detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void log_gather_honor_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log_gather_honor_info::CopyFrom(const log_gather_honor_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log_gather_honor_info::IsInitialized() const {

  return true;
}

void log_gather_honor_info::Swap(log_gather_honor_info* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(event_time_, other->event_time_);
    std::swap(appid_, other->appid_);
    std::swap(openid_, other->openid_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(zone_name_, other->zone_name_);
    std::swap(platform_, other->platform_);
    std::swap(imei_, other->imei_);
    std::swap(honor_id_, other->honor_id_);
    std::swap(honor_name_, other->honor_name_);
    std::swap(honor_detail_, other->honor_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata log_gather_honor_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = log_gather_honor_info_descriptor_;
  metadata.reflection = log_gather_honor_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int log_gather_level_up_info::kEventIdFieldNumber;
const int log_gather_level_up_info::kEventTimeFieldNumber;
const int log_gather_level_up_info::kAppidFieldNumber;
const int log_gather_level_up_info::kOpenidFieldNumber;
const int log_gather_level_up_info::kZoneIdFieldNumber;
const int log_gather_level_up_info::kZoneNameFieldNumber;
const int log_gather_level_up_info::kPlatformFieldNumber;
const int log_gather_level_up_info::kImeiFieldNumber;
const int log_gather_level_up_info::kNewLevelFieldNumber;
const int log_gather_level_up_info::kNameFieldNumber;
const int log_gather_level_up_info::kOldLevelFieldNumber;
const int log_gather_level_up_info::kDetailDescFieldNumber;
#endif  // !_MSC_VER

log_gather_level_up_info::log_gather_level_up_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void log_gather_level_up_info::InitAsDefaultInstance() {
}

log_gather_level_up_info::log_gather_level_up_info(const log_gather_level_up_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void log_gather_level_up_info::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 4u;
  event_time_ = GOOGLE_ULONGLONG(0);
  appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zone_id_ = 0u;
  zone_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = 0u;
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_level_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_level_ = 0u;
  detail_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

log_gather_level_up_info::~log_gather_level_up_info() {
  SharedDtor();
}

void log_gather_level_up_info::SharedDtor() {
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (zone_name_ != &::google::protobuf::internal::kEmptyString) {
    delete zone_name_;
  }
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (detail_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete detail_desc_;
  }
  if (this != default_instance_) {
  }
}

void log_gather_level_up_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* log_gather_level_up_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return log_gather_level_up_info_descriptor_;
}

const log_gather_level_up_info& log_gather_level_up_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

log_gather_level_up_info* log_gather_level_up_info::default_instance_ = NULL;

log_gather_level_up_info* log_gather_level_up_info::New() const {
  return new log_gather_level_up_info;
}

void log_gather_level_up_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 4u;
    event_time_ = GOOGLE_ULONGLONG(0);
    if (has_appid()) {
      if (appid_ != &::google::protobuf::internal::kEmptyString) {
        appid_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    zone_id_ = 0u;
    if (has_zone_name()) {
      if (zone_name_ != &::google::protobuf::internal::kEmptyString) {
        zone_name_->clear();
      }
    }
    platform_ = 0u;
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::kEmptyString) {
        imei_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    new_level_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    old_level_ = 0u;
    if (has_detail_desc()) {
      if (detail_desc_ != &::google::protobuf::internal::kEmptyString) {
        detail_desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool log_gather_level_up_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1 [default = 4];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_time;
        break;
      }

      // optional uint64 event_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_time_)));
          set_has_event_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appid;
        break;
      }

      // optional string appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_openid;
        break;
      }

      // optional string openid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zone_id;
        break;
      }

      // optional uint32 zone_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_zone_name;
        break;
      }

      // optional string zone_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zone_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zone_name().data(), this->zone_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_platform;
        break;
      }

      // optional uint32 platform = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_imei;
        break;
      }

      // optional string imei = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_new_level;
        break;
      }

      // optional uint32 new_level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_level_)));
          set_has_new_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_name;
        break;
      }

      // optional string name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_old_level;
        break;
      }

      // optional uint32 old_level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_level_)));
          set_has_old_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_detail_desc;
        break;
      }

      // optional string detail_desc = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detail_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->detail_desc().data(), this->detail_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void log_gather_level_up_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 event_id = 1 [default = 4];
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint64 event_time = 2;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->event_time(), output);
  }

  // optional string appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->appid(), output);
  }

  // optional string openid = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->openid(), output);
  }

  // optional uint32 zone_id = 5;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zone_id(), output);
  }

  // optional string zone_name = 6;
  if (has_zone_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone_name().data(), this->zone_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->zone_name(), output);
  }

  // optional uint32 platform = 7;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->platform(), output);
  }

  // optional string imei = 8;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->imei(), output);
  }

  // optional uint32 new_level = 9;
  if (has_new_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->new_level(), output);
  }

  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->name(), output);
  }

  // optional uint32 old_level = 11;
  if (has_old_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->old_level(), output);
  }

  // optional string detail_desc = 12;
  if (has_detail_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detail_desc().data(), this->detail_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->detail_desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* log_gather_level_up_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 event_id = 1 [default = 4];
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint64 event_time = 2;
  if (has_event_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->event_time(), target);
  }

  // optional string appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->appid(), target);
  }

  // optional string openid = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->openid(), target);
  }

  // optional uint32 zone_id = 5;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zone_id(), target);
  }

  // optional string zone_name = 6;
  if (has_zone_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone_name().data(), this->zone_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->zone_name(), target);
  }

  // optional uint32 platform = 7;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->platform(), target);
  }

  // optional string imei = 8;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->imei(), target);
  }

  // optional uint32 new_level = 9;
  if (has_new_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->new_level(), target);
  }

  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional uint32 old_level = 11;
  if (has_old_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->old_level(), target);
  }

  // optional string detail_desc = 12;
  if (has_detail_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detail_desc().data(), this->detail_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->detail_desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int log_gather_level_up_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1 [default = 4];
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint64 event_time = 2;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_time());
    }

    // optional string appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

    // optional string openid = 4;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional uint32 zone_id = 5;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }

    // optional string zone_name = 6;
    if (has_zone_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zone_name());
    }

    // optional uint32 platform = 7;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform());
    }

    // optional string imei = 8;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 new_level = 9;
    if (has_new_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_level());
    }

    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 old_level = 11;
    if (has_old_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_level());
    }

    // optional string detail_desc = 12;
    if (has_detail_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detail_desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void log_gather_level_up_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const log_gather_level_up_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const log_gather_level_up_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void log_gather_level_up_info::MergeFrom(const log_gather_level_up_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_zone_name()) {
      set_zone_name(from.zone_name());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_imei()) {
      set_imei(from.imei());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_new_level()) {
      set_new_level(from.new_level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_old_level()) {
      set_old_level(from.old_level());
    }
    if (from.has_detail_desc()) {
      set_detail_desc(from.detail_desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void log_gather_level_up_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log_gather_level_up_info::CopyFrom(const log_gather_level_up_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log_gather_level_up_info::IsInitialized() const {

  return true;
}

void log_gather_level_up_info::Swap(log_gather_level_up_info* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(event_time_, other->event_time_);
    std::swap(appid_, other->appid_);
    std::swap(openid_, other->openid_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(zone_name_, other->zone_name_);
    std::swap(platform_, other->platform_);
    std::swap(imei_, other->imei_);
    std::swap(new_level_, other->new_level_);
    std::swap(name_, other->name_);
    std::swap(old_level_, other->old_level_);
    std::swap(detail_desc_, other->detail_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata log_gather_level_up_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = log_gather_level_up_info_descriptor_;
  metadata.reflection = log_gather_level_up_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int log_gather_buy_info::kEventIdFieldNumber;
const int log_gather_buy_info::kEventTimeFieldNumber;
const int log_gather_buy_info::kAppidFieldNumber;
const int log_gather_buy_info::kOpenidFieldNumber;
const int log_gather_buy_info::kZoneIdFieldNumber;
const int log_gather_buy_info::kZoneNameFieldNumber;
const int log_gather_buy_info::kPlatformFieldNumber;
const int log_gather_buy_info::kImeiFieldNumber;
const int log_gather_buy_info::kLevelFieldNumber;
const int log_gather_buy_info::kNameFieldNumber;
const int log_gather_buy_info::kItemIdFieldNumber;
const int log_gather_buy_info::kItemNameFieldNumber;
const int log_gather_buy_info::kItemCountFieldNumber;
const int log_gather_buy_info::kCostFieldNumber;
const int log_gather_buy_info::kLeftCoinFieldNumber;
#endif  // !_MSC_VER

log_gather_buy_info::log_gather_buy_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void log_gather_buy_info::InitAsDefaultInstance() {
}

log_gather_buy_info::log_gather_buy_info(const log_gather_buy_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void log_gather_buy_info::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 5u;
  event_time_ = GOOGLE_ULONGLONG(0);
  appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zone_id_ = 0u;
  zone_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = 0u;
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_id_ = 0u;
  item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_count_ = 0u;
  cost_ = 0u;
  left_coin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

log_gather_buy_info::~log_gather_buy_info() {
  SharedDtor();
}

void log_gather_buy_info::SharedDtor() {
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (zone_name_ != &::google::protobuf::internal::kEmptyString) {
    delete zone_name_;
  }
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (item_name_ != &::google::protobuf::internal::kEmptyString) {
    delete item_name_;
  }
  if (this != default_instance_) {
  }
}

void log_gather_buy_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* log_gather_buy_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return log_gather_buy_info_descriptor_;
}

const log_gather_buy_info& log_gather_buy_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

log_gather_buy_info* log_gather_buy_info::default_instance_ = NULL;

log_gather_buy_info* log_gather_buy_info::New() const {
  return new log_gather_buy_info;
}

void log_gather_buy_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 5u;
    event_time_ = GOOGLE_ULONGLONG(0);
    if (has_appid()) {
      if (appid_ != &::google::protobuf::internal::kEmptyString) {
        appid_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    zone_id_ = 0u;
    if (has_zone_name()) {
      if (zone_name_ != &::google::protobuf::internal::kEmptyString) {
        zone_name_->clear();
      }
    }
    platform_ = 0u;
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::kEmptyString) {
        imei_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    item_id_ = 0u;
    if (has_item_name()) {
      if (item_name_ != &::google::protobuf::internal::kEmptyString) {
        item_name_->clear();
      }
    }
    item_count_ = 0u;
    cost_ = 0u;
    left_coin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool log_gather_buy_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1 [default = 5];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_time;
        break;
      }

      // optional uint64 event_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_time_)));
          set_has_event_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appid;
        break;
      }

      // optional string appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_openid;
        break;
      }

      // optional string openid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zone_id;
        break;
      }

      // optional uint32 zone_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_zone_name;
        break;
      }

      // optional string zone_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zone_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zone_name().data(), this->zone_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_platform;
        break;
      }

      // optional uint32 platform = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_imei;
        break;
      }

      // optional string imei = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional uint32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_name;
        break;
      }

      // optional string name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_item_name;
        break;
      }

      // optional string item_name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item_name().data(), this->item_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_item_count;
        break;
      }

      // optional uint32 item_count = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_cost;
        break;
      }

      // optional uint32 cost = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_left_coin;
        break;
      }

      // optional uint32 left_coin = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_coin_)));
          set_has_left_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void log_gather_buy_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 event_id = 1 [default = 5];
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint64 event_time = 2;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->event_time(), output);
  }

  // optional string appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->appid(), output);
  }

  // optional string openid = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->openid(), output);
  }

  // optional uint32 zone_id = 5;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zone_id(), output);
  }

  // optional string zone_name = 6;
  if (has_zone_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone_name().data(), this->zone_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->zone_name(), output);
  }

  // optional uint32 platform = 7;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->platform(), output);
  }

  // optional string imei = 8;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->imei(), output);
  }

  // optional uint32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->level(), output);
  }

  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->name(), output);
  }

  // optional uint32 item_id = 11;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->item_id(), output);
  }

  // optional string item_name = 12;
  if (has_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->item_name(), output);
  }

  // optional uint32 item_count = 13;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->item_count(), output);
  }

  // optional uint32 cost = 14;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->cost(), output);
  }

  // optional uint32 left_coin = 15;
  if (has_left_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->left_coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* log_gather_buy_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 event_id = 1 [default = 5];
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint64 event_time = 2;
  if (has_event_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->event_time(), target);
  }

  // optional string appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->appid(), target);
  }

  // optional string openid = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->openid(), target);
  }

  // optional uint32 zone_id = 5;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zone_id(), target);
  }

  // optional string zone_name = 6;
  if (has_zone_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone_name().data(), this->zone_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->zone_name(), target);
  }

  // optional uint32 platform = 7;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->platform(), target);
  }

  // optional string imei = 8;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->imei(), target);
  }

  // optional uint32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->level(), target);
  }

  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional uint32 item_id = 11;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->item_id(), target);
  }

  // optional string item_name = 12;
  if (has_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->item_name(), target);
  }

  // optional uint32 item_count = 13;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->item_count(), target);
  }

  // optional uint32 cost = 14;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->cost(), target);
  }

  // optional uint32 left_coin = 15;
  if (has_left_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->left_coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int log_gather_buy_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1 [default = 5];
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint64 event_time = 2;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_time());
    }

    // optional string appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

    // optional string openid = 4;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional uint32 zone_id = 5;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_id());
    }

    // optional string zone_name = 6;
    if (has_zone_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zone_name());
    }

    // optional uint32 platform = 7;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform());
    }

    // optional string imei = 8;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 item_id = 11;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional string item_name = 12;
    if (has_item_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_name());
    }

    // optional uint32 item_count = 13;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

    // optional uint32 cost = 14;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

    // optional uint32 left_coin = 15;
    if (has_left_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_coin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void log_gather_buy_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const log_gather_buy_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const log_gather_buy_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void log_gather_buy_info::MergeFrom(const log_gather_buy_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_zone_name()) {
      set_zone_name(from.zone_name());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_imei()) {
      set_imei(from.imei());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_name()) {
      set_item_name(from.item_name());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_left_coin()) {
      set_left_coin(from.left_coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void log_gather_buy_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log_gather_buy_info::CopyFrom(const log_gather_buy_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log_gather_buy_info::IsInitialized() const {

  return true;
}

void log_gather_buy_info::Swap(log_gather_buy_info* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(event_time_, other->event_time_);
    std::swap(appid_, other->appid_);
    std::swap(openid_, other->openid_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(zone_name_, other->zone_name_);
    std::swap(platform_, other->platform_);
    std::swap(imei_, other->imei_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_name_, other->item_name_);
    std::swap(item_count_, other->item_count_);
    std::swap(cost_, other->cost_);
    std::swap(left_coin_, other->left_coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata log_gather_buy_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = log_gather_buy_info_descriptor_;
  metadata.reflection = log_gather_buy_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int allocate_chat_room_req::kProtoIdFieldNumber;
const int allocate_chat_room_req::kRoomIdsFieldNumber;
#endif  // !_MSC_VER

allocate_chat_room_req::allocate_chat_room_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void allocate_chat_room_req::InitAsDefaultInstance() {
}

allocate_chat_room_req::allocate_chat_room_req(const allocate_chat_room_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void allocate_chat_room_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1700;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

allocate_chat_room_req::~allocate_chat_room_req() {
  SharedDtor();
}

void allocate_chat_room_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void allocate_chat_room_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* allocate_chat_room_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return allocate_chat_room_req_descriptor_;
}

const allocate_chat_room_req& allocate_chat_room_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

allocate_chat_room_req* allocate_chat_room_req::default_instance_ = NULL;

allocate_chat_room_req* allocate_chat_room_req::New() const {
  return new allocate_chat_room_req;
}

void allocate_chat_room_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1700;
  }
  room_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool allocate_chat_room_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = allocate_chat_room_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_ids;
        break;
      }

      // repeated int32 room_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_room_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_room_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void allocate_chat_room_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = allocate_chat_room_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // repeated int32 room_ids = 2;
  for (int i = 0; i < this->room_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->room_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* allocate_chat_room_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = allocate_chat_room_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // repeated int32 room_ids = 2;
  for (int i = 0; i < this->room_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->room_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int allocate_chat_room_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = allocate_chat_room_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  // repeated int32 room_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->room_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->room_ids(i));
    }
    total_size += 1 * this->room_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void allocate_chat_room_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const allocate_chat_room_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const allocate_chat_room_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void allocate_chat_room_req::MergeFrom(const allocate_chat_room_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_ids_.MergeFrom(from.room_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void allocate_chat_room_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void allocate_chat_room_req::CopyFrom(const allocate_chat_room_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool allocate_chat_room_req::IsInitialized() const {

  return true;
}

void allocate_chat_room_req::Swap(allocate_chat_room_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    room_ids_.Swap(&other->room_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata allocate_chat_room_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = allocate_chat_room_req_descriptor_;
  metadata.reflection = allocate_chat_room_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int allocate_chat_room_ack::kProtoIdFieldNumber;
const int allocate_chat_room_ack::kRetFieldNumber;
const int allocate_chat_room_ack::kRoomIdsFieldNumber;
#endif  // !_MSC_VER

allocate_chat_room_ack::allocate_chat_room_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void allocate_chat_room_ack::InitAsDefaultInstance() {
}

allocate_chat_room_ack::allocate_chat_room_ack(const allocate_chat_room_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void allocate_chat_room_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1701;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

allocate_chat_room_ack::~allocate_chat_room_ack() {
  SharedDtor();
}

void allocate_chat_room_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void allocate_chat_room_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* allocate_chat_room_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return allocate_chat_room_ack_descriptor_;
}

const allocate_chat_room_ack& allocate_chat_room_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

allocate_chat_room_ack* allocate_chat_room_ack::default_instance_ = NULL;

allocate_chat_room_ack* allocate_chat_room_ack::New() const {
  return new allocate_chat_room_ack;
}

void allocate_chat_room_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1701;
    ret_ = 0;
  }
  room_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool allocate_chat_room_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = allocate_chat_room_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_ids;
        break;
      }

      // repeated int32 room_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_room_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_room_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void allocate_chat_room_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = allocate_chat_room_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // repeated int32 room_ids = 3;
  for (int i = 0; i < this->room_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->room_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* allocate_chat_room_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = allocate_chat_room_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // repeated int32 room_ids = 3;
  for (int i = 0; i < this->room_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->room_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int allocate_chat_room_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = allocate_chat_room_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated int32 room_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->room_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->room_ids(i));
    }
    total_size += 1 * this->room_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void allocate_chat_room_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const allocate_chat_room_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const allocate_chat_room_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void allocate_chat_room_ack::MergeFrom(const allocate_chat_room_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_ids_.MergeFrom(from.room_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void allocate_chat_room_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void allocate_chat_room_ack::CopyFrom(const allocate_chat_room_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool allocate_chat_room_ack::IsInitialized() const {

  return true;
}

void allocate_chat_room_ack::Swap(allocate_chat_room_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    room_ids_.Swap(&other->room_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata allocate_chat_room_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = allocate_chat_room_ack_descriptor_;
  metadata.reflection = allocate_chat_room_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_get_role_position_req::kProtoIdFieldNumber;
const int gs_get_role_position_req::kDestIdFieldNumber;
const int gs_get_role_position_req::kSourIdFieldNumber;
#endif  // !_MSC_VER

gs_get_role_position_req::gs_get_role_position_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_get_role_position_req::InitAsDefaultInstance() {
}

gs_get_role_position_req::gs_get_role_position_req(const gs_get_role_position_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_get_role_position_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1708;
  dest_id_ = GOOGLE_ULONGLONG(0);
  sour_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_get_role_position_req::~gs_get_role_position_req() {
  SharedDtor();
}

void gs_get_role_position_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_get_role_position_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_get_role_position_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_get_role_position_req_descriptor_;
}

const gs_get_role_position_req& gs_get_role_position_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

gs_get_role_position_req* gs_get_role_position_req::default_instance_ = NULL;

gs_get_role_position_req* gs_get_role_position_req::New() const {
  return new gs_get_role_position_req;
}

void gs_get_role_position_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1708;
    dest_id_ = GOOGLE_ULONGLONG(0);
    sour_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_get_role_position_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = gs_get_role_position_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dest_id;
        break;
      }

      // optional uint64 dest_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_id_)));
          set_has_dest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sour_id;
        break;
      }

      // optional uint64 sour_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sour_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sour_id_)));
          set_has_sour_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_get_role_position_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = gs_get_role_position_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 dest_id = 2;
  if (has_dest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dest_id(), output);
  }

  // optional uint64 sour_id = 3;
  if (has_sour_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sour_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_get_role_position_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = gs_get_role_position_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 dest_id = 2;
  if (has_dest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dest_id(), target);
  }

  // optional uint64 sour_id = 3;
  if (has_sour_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sour_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_get_role_position_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = gs_get_role_position_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 dest_id = 2;
    if (has_dest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_id());
    }

    // optional uint64 sour_id = 3;
    if (has_sour_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sour_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_get_role_position_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_get_role_position_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_get_role_position_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_get_role_position_req::MergeFrom(const gs_get_role_position_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_dest_id()) {
      set_dest_id(from.dest_id());
    }
    if (from.has_sour_id()) {
      set_sour_id(from.sour_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_get_role_position_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_get_role_position_req::CopyFrom(const gs_get_role_position_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_get_role_position_req::IsInitialized() const {

  return true;
}

void gs_get_role_position_req::Swap(gs_get_role_position_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(dest_id_, other->dest_id_);
    std::swap(sour_id_, other->sour_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_get_role_position_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_get_role_position_req_descriptor_;
  metadata.reflection = gs_get_role_position_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_get_role_position_ack::kProtoIdFieldNumber;
const int gs_get_role_position_ack::kRetFieldNumber;
const int gs_get_role_position_ack::kRoomIdFieldNumber;
const int gs_get_role_position_ack::kDestPosFieldNumber;
const int gs_get_role_position_ack::kSourIdFieldNumber;
#endif  // !_MSC_VER

gs_get_role_position_ack::gs_get_role_position_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_get_role_position_ack::InitAsDefaultInstance() {
  dest_pos_ = const_cast< ::SProtoSpace::role_position*>(&::SProtoSpace::role_position::default_instance());
}

gs_get_role_position_ack::gs_get_role_position_ack(const gs_get_role_position_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_get_role_position_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1709;
  ret_ = 0u;
  room_id_ = 0;
  dest_pos_ = NULL;
  sour_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_get_role_position_ack::~gs_get_role_position_ack() {
  SharedDtor();
}

void gs_get_role_position_ack::SharedDtor() {
  if (this != default_instance_) {
    delete dest_pos_;
  }
}

void gs_get_role_position_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_get_role_position_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_get_role_position_ack_descriptor_;
}

const gs_get_role_position_ack& gs_get_role_position_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

gs_get_role_position_ack* gs_get_role_position_ack::default_instance_ = NULL;

gs_get_role_position_ack* gs_get_role_position_ack::New() const {
  return new gs_get_role_position_ack;
}

void gs_get_role_position_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1709;
    ret_ = 0u;
    room_id_ = 0;
    if (has_dest_pos()) {
      if (dest_pos_ != NULL) dest_pos_->::SProtoSpace::role_position::Clear();
    }
    sour_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_get_role_position_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = gs_get_role_position_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dest_pos;
        break;
      }

      // optional .SProtoSpace.role_position dest_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sour_id;
        break;
      }

      // optional uint64 sour_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sour_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sour_id_)));
          set_has_sour_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_get_role_position_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = gs_get_role_position_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  // optional .SProtoSpace.role_position dest_pos = 4;
  if (has_dest_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dest_pos(), output);
  }

  // optional uint64 sour_id = 5;
  if (has_sour_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sour_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_get_role_position_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = gs_get_role_position_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  // optional .SProtoSpace.role_position dest_pos = 4;
  if (has_dest_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dest_pos(), target);
  }

  // optional uint64 sour_id = 5;
  if (has_sour_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->sour_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_get_role_position_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = gs_get_role_position_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional .SProtoSpace.role_position dest_pos = 4;
    if (has_dest_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest_pos());
    }

    // optional uint64 sour_id = 5;
    if (has_sour_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sour_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_get_role_position_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_get_role_position_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_get_role_position_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_get_role_position_ack::MergeFrom(const gs_get_role_position_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_dest_pos()) {
      mutable_dest_pos()->::SProtoSpace::role_position::MergeFrom(from.dest_pos());
    }
    if (from.has_sour_id()) {
      set_sour_id(from.sour_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_get_role_position_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_get_role_position_ack::CopyFrom(const gs_get_role_position_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_get_role_position_ack::IsInitialized() const {

  return true;
}

void gs_get_role_position_ack::Swap(gs_get_role_position_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(room_id_, other->room_id_);
    std::swap(dest_pos_, other->dest_pos_);
    std::swap(sour_id_, other->sour_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_get_role_position_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_get_role_position_ack_descriptor_;
  metadata.reflection = gs_get_role_position_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int red_pt_ss_ntf::kProtoidFieldNumber;
const int red_pt_ss_ntf::kRoleIdFieldNumber;
const int red_pt_ss_ntf::kInfosFieldNumber;
#endif  // !_MSC_VER

red_pt_ss_ntf::red_pt_ss_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void red_pt_ss_ntf::InitAsDefaultInstance() {
  infos_ = const_cast< ::SProtoSpace::red_pt_infos*>(&::SProtoSpace::red_pt_infos::default_instance());
}

red_pt_ss_ntf::red_pt_ss_ntf(const red_pt_ss_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void red_pt_ss_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1801;
  role_id_ = GOOGLE_ULONGLONG(0);
  infos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

red_pt_ss_ntf::~red_pt_ss_ntf() {
  SharedDtor();
}

void red_pt_ss_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete infos_;
  }
}

void red_pt_ss_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* red_pt_ss_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return red_pt_ss_ntf_descriptor_;
}

const red_pt_ss_ntf& red_pt_ss_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

red_pt_ss_ntf* red_pt_ss_ntf::default_instance_ = NULL;

red_pt_ss_ntf* red_pt_ss_ntf::New() const {
  return new red_pt_ss_ntf;
}

void red_pt_ss_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1801;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_infos()) {
      if (infos_ != NULL) infos_->::SProtoSpace::red_pt_infos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool red_pt_ss_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = red_pt_ss_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        break;
      }

      // optional .SProtoSpace.red_pt_infos infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void red_pt_ss_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = red_pt_ss_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional .SProtoSpace.red_pt_infos infos = 3;
  if (has_infos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* red_pt_ss_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = red_pt_ss_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional .SProtoSpace.red_pt_infos infos = 3;
  if (has_infos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int red_pt_ss_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = red_pt_ss_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.red_pt_infos infos = 3;
    if (has_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void red_pt_ss_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const red_pt_ss_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const red_pt_ss_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void red_pt_ss_ntf::MergeFrom(const red_pt_ss_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_infos()) {
      mutable_infos()->::SProtoSpace::red_pt_infos::MergeFrom(from.infos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void red_pt_ss_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void red_pt_ss_ntf::CopyFrom(const red_pt_ss_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool red_pt_ss_ntf::IsInitialized() const {

  return true;
}

void red_pt_ss_ntf::Swap(red_pt_ss_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(infos_, other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata red_pt_ss_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = red_pt_ss_ntf_descriptor_;
  metadata.reflection = red_pt_ss_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_other_role_fashion_ss_req::kProtoidFieldNumber;
const int get_other_role_fashion_ss_req::kRoleIdSFieldNumber;
const int get_other_role_fashion_ss_req::kRoleNameSFieldNumber;
#endif  // !_MSC_VER

get_other_role_fashion_ss_req::get_other_role_fashion_ss_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_other_role_fashion_ss_req::InitAsDefaultInstance() {
}

get_other_role_fashion_ss_req::get_other_role_fashion_ss_req(const get_other_role_fashion_ss_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_other_role_fashion_ss_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1810;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_other_role_fashion_ss_req::~get_other_role_fashion_ss_req() {
  SharedDtor();
}

void get_other_role_fashion_ss_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_other_role_fashion_ss_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_other_role_fashion_ss_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_other_role_fashion_ss_req_descriptor_;
}

const get_other_role_fashion_ss_req& get_other_role_fashion_ss_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

get_other_role_fashion_ss_req* get_other_role_fashion_ss_req::default_instance_ = NULL;

get_other_role_fashion_ss_req* get_other_role_fashion_ss_req::New() const {
  return new get_other_role_fashion_ss_req;
}

void get_other_role_fashion_ss_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1810;
  }
  role_id_s_.Clear();
  role_name_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_other_role_fashion_ss_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = get_other_role_fashion_ss_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id_s;
        break;
      }

      // repeated uint64 role_id_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_role_id_s())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_role_id_s())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id_s;
        if (input->ExpectTag(26)) goto parse_role_name_s;
        break;
      }

      // repeated string role_name_s = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_role_name_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name_s(this->role_name_s_size() - 1).data(),
            this->role_name_s(this->role_name_s_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name_s;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_other_role_fashion_ss_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = get_other_role_fashion_ss_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 role_id_s = 2;
  for (int i = 0; i < this->role_id_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->role_id_s(i), output);
  }

  // repeated string role_name_s = 3;
  for (int i = 0; i < this->role_name_s_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->role_name_s(i).data(), this->role_name_s(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name_s(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_other_role_fashion_ss_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = get_other_role_fashion_ss_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 role_id_s = 2;
  for (int i = 0; i < this->role_id_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->role_id_s(i), target);
  }

  // repeated string role_name_s = 3;
  for (int i = 0; i < this->role_name_s_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name_s(i).data(), this->role_name_s(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->role_name_s(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_other_role_fashion_ss_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = get_other_role_fashion_ss_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated uint64 role_id_s = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_id_s_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->role_id_s(i));
    }
    total_size += 1 * this->role_id_s_size() + data_size;
  }

  // repeated string role_name_s = 3;
  total_size += 1 * this->role_name_s_size();
  for (int i = 0; i < this->role_name_s_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->role_name_s(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_other_role_fashion_ss_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_other_role_fashion_ss_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_other_role_fashion_ss_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_other_role_fashion_ss_req::MergeFrom(const get_other_role_fashion_ss_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_id_s_.MergeFrom(from.role_id_s_);
  role_name_s_.MergeFrom(from.role_name_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_other_role_fashion_ss_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_other_role_fashion_ss_req::CopyFrom(const get_other_role_fashion_ss_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_other_role_fashion_ss_req::IsInitialized() const {

  return true;
}

void get_other_role_fashion_ss_req::Swap(get_other_role_fashion_ss_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    role_id_s_.Swap(&other->role_id_s_);
    role_name_s_.Swap(&other->role_name_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_other_role_fashion_ss_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_other_role_fashion_ss_req_descriptor_;
  metadata.reflection = get_other_role_fashion_ss_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_other_role_fashion_ss_ack::kProtoidFieldNumber;
const int get_other_role_fashion_ss_ack::kFashionsPWearingFieldNumber;
const int get_other_role_fashion_ss_ack::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

get_other_role_fashion_ss_ack::get_other_role_fashion_ss_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_other_role_fashion_ss_ack::InitAsDefaultInstance() {
  fashions_p_wearing_ = const_cast< ::SProtoSpace::fashions_pack*>(&::SProtoSpace::fashions_pack::default_instance());
}

get_other_role_fashion_ss_ack::get_other_role_fashion_ss_ack(const get_other_role_fashion_ss_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_other_role_fashion_ss_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1811;
  fashions_p_wearing_ = NULL;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_other_role_fashion_ss_ack::~get_other_role_fashion_ss_ack() {
  SharedDtor();
}

void get_other_role_fashion_ss_ack::SharedDtor() {
  if (this != default_instance_) {
    delete fashions_p_wearing_;
  }
}

void get_other_role_fashion_ss_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_other_role_fashion_ss_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_other_role_fashion_ss_ack_descriptor_;
}

const get_other_role_fashion_ss_ack& get_other_role_fashion_ss_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

get_other_role_fashion_ss_ack* get_other_role_fashion_ss_ack::default_instance_ = NULL;

get_other_role_fashion_ss_ack* get_other_role_fashion_ss_ack::New() const {
  return new get_other_role_fashion_ss_ack;
}

void get_other_role_fashion_ss_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1811;
    if (has_fashions_p_wearing()) {
      if (fashions_p_wearing_ != NULL) fashions_p_wearing_->::SProtoSpace::fashions_pack::Clear();
    }
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_other_role_fashion_ss_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = get_other_role_fashion_ss_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fashions_p_wearing;
        break;
      }

      // optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashions_p_wearing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fashions_p_wearing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error_code;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error_code(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_other_role_fashion_ss_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = get_other_role_fashion_ss_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
  if (has_fashions_p_wearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fashions_p_wearing(), output);
  }

  // optional .SProtoSpace.MsgErrorType error_code = 3;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_other_role_fashion_ss_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = get_other_role_fashion_ss_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
  if (has_fashions_p_wearing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fashions_p_wearing(), target);
  }

  // optional .SProtoSpace.MsgErrorType error_code = 3;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_other_role_fashion_ss_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = get_other_role_fashion_ss_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
    if (has_fashions_p_wearing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fashions_p_wearing());
    }

    // optional .SProtoSpace.MsgErrorType error_code = 3;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_other_role_fashion_ss_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_other_role_fashion_ss_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_other_role_fashion_ss_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_other_role_fashion_ss_ack::MergeFrom(const get_other_role_fashion_ss_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_fashions_p_wearing()) {
      mutable_fashions_p_wearing()->::SProtoSpace::fashions_pack::MergeFrom(from.fashions_p_wearing());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_other_role_fashion_ss_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_other_role_fashion_ss_ack::CopyFrom(const get_other_role_fashion_ss_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_other_role_fashion_ss_ack::IsInitialized() const {

  return true;
}

void get_other_role_fashion_ss_ack::Swap(get_other_role_fashion_ss_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(fashions_p_wearing_, other->fashions_p_wearing_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_other_role_fashion_ss_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_other_role_fashion_ss_ack_descriptor_;
  metadata.reflection = get_other_role_fashion_ss_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_chat_req::kProtoidFieldNumber;
const int gs_chat_req::kTypeFieldNumber;
const int gs_chat_req::kModuleIdFieldNumber;
const int gs_chat_req::kContentFieldNumber;
const int gs_chat_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

gs_chat_req::gs_chat_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_chat_req::InitAsDefaultInstance() {
}

gs_chat_req::gs_chat_req(const gs_chat_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_chat_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1710;
  type_ = 1;
  module_id_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_chat_req::~gs_chat_req() {
  SharedDtor();
}

void gs_chat_req::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void gs_chat_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_chat_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_chat_req_descriptor_;
}

const gs_chat_req& gs_chat_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

gs_chat_req* gs_chat_req::default_instance_ = NULL;

gs_chat_req* gs_chat_req::New() const {
  return new gs_chat_req;
}

void gs_chat_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1710;
    type_ = 1;
    module_id_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_chat_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_chat_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.CHAT_TYPE type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::CHAT_TYPE_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::CHAT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_module_id;
        break;
      }

      // optional uint64 module_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_chat_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_chat_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.CHAT_TYPE type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint64 module_id = 3;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->module_id(), output);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }

  // optional uint64 role_id = 5;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_chat_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_chat_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.CHAT_TYPE type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint64 module_id = 3;
  if (has_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->module_id(), target);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // optional uint64 role_id = 5;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_chat_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_chat_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.CHAT_TYPE type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 module_id = 3;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->module_id());
    }

    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint64 role_id = 5;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_chat_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_chat_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_chat_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_chat_req::MergeFrom(const gs_chat_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_chat_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_chat_req::CopyFrom(const gs_chat_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_chat_req::IsInitialized() const {

  return true;
}

void gs_chat_req::Swap(gs_chat_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(type_, other->type_);
    std::swap(module_id_, other->module_id_);
    std::swap(content_, other->content_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_chat_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_chat_req_descriptor_;
  metadata.reflection = gs_chat_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_chat_ack::kProtoidFieldNumber;
const int gs_chat_ack::kTypeFieldNumber;
const int gs_chat_ack::kContentFieldNumber;
const int gs_chat_ack::kSourDataFieldNumber;
#endif  // !_MSC_VER

gs_chat_ack::gs_chat_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_chat_ack::InitAsDefaultInstance() {
  sour_data_ = const_cast< ::SProtoSpace::public_role_base_info*>(&::SProtoSpace::public_role_base_info::default_instance());
}

gs_chat_ack::gs_chat_ack(const gs_chat_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_chat_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1711;
  type_ = 1;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sour_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_chat_ack::~gs_chat_ack() {
  SharedDtor();
}

void gs_chat_ack::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete sour_data_;
  }
}

void gs_chat_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_chat_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_chat_ack_descriptor_;
}

const gs_chat_ack& gs_chat_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

gs_chat_ack* gs_chat_ack::default_instance_ = NULL;

gs_chat_ack* gs_chat_ack::New() const {
  return new gs_chat_ack;
}

void gs_chat_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1711;
    type_ = 1;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_sour_data()) {
      if (sour_data_ != NULL) sour_data_->::SProtoSpace::public_role_base_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_chat_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_chat_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.CHAT_TYPE type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::CHAT_TYPE_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::CHAT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sour_data;
        break;
      }

      // optional .SProtoSpace.public_role_base_info sour_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sour_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sour_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_chat_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_chat_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.CHAT_TYPE type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  // optional .SProtoSpace.public_role_base_info sour_data = 4;
  if (has_sour_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sour_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_chat_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_chat_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.CHAT_TYPE type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional .SProtoSpace.public_role_base_info sour_data = 4;
  if (has_sour_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sour_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_chat_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_chat_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.CHAT_TYPE type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .SProtoSpace.public_role_base_info sour_data = 4;
    if (has_sour_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sour_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_chat_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_chat_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_chat_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_chat_ack::MergeFrom(const gs_chat_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_sour_data()) {
      mutable_sour_data()->::SProtoSpace::public_role_base_info::MergeFrom(from.sour_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_chat_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_chat_ack::CopyFrom(const gs_chat_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_chat_ack::IsInitialized() const {

  return true;
}

void gs_chat_ack::Swap(gs_chat_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(sour_data_, other->sour_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_chat_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_chat_ack_descriptor_;
  metadata.reflection = gs_chat_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_event_track_ss_ntf::kProtoidFieldNumber;
const int user_event_track_ss_ntf::kLogSFieldNumber;
#endif  // !_MSC_VER

user_event_track_ss_ntf::user_event_track_ss_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_event_track_ss_ntf::InitAsDefaultInstance() {
}

user_event_track_ss_ntf::user_event_track_ss_ntf(const user_event_track_ss_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_event_track_ss_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1830;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_event_track_ss_ntf::~user_event_track_ss_ntf() {
  SharedDtor();
}

void user_event_track_ss_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_event_track_ss_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_event_track_ss_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_event_track_ss_ntf_descriptor_;
}

const user_event_track_ss_ntf& user_event_track_ss_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fgame_2eproto();
  return *default_instance_;
}

user_event_track_ss_ntf* user_event_track_ss_ntf::default_instance_ = NULL;

user_event_track_ss_ntf* user_event_track_ss_ntf::New() const {
  return new user_event_track_ss_ntf;
}

void user_event_track_ss_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1830;
  }
  log_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_event_track_ss_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = user_event_track_ss_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_log_s;
        break;
      }

      // repeated string log_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_log_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_s(this->log_s_size() - 1).data(),
            this->log_s(this->log_s_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_log_s;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_event_track_ss_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = user_event_track_ss_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated string log_s = 2;
  for (int i = 0; i < this->log_s_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->log_s(i).data(), this->log_s(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->log_s(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_event_track_ss_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = user_event_track_ss_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated string log_s = 2;
  for (int i = 0; i < this->log_s_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_s(i).data(), this->log_s(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->log_s(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_event_track_ss_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = user_event_track_ss_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated string log_s = 2;
  total_size += 1 * this->log_s_size();
  for (int i = 0; i < this->log_s_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->log_s(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_event_track_ss_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_event_track_ss_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_event_track_ss_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_event_track_ss_ntf::MergeFrom(const user_event_track_ss_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_s_.MergeFrom(from.log_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_event_track_ss_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_event_track_ss_ntf::CopyFrom(const user_event_track_ss_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_event_track_ss_ntf::IsInitialized() const {

  return true;
}

void user_event_track_ss_ntf::Swap(user_event_track_ss_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    log_s_.Swap(&other->log_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_event_track_ss_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_event_track_ss_ntf_descriptor_;
  metadata.reflection = user_event_track_ss_ntf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
