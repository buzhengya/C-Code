// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_public.proto

#ifndef PROTOBUF_ss_5fpublic_2eproto__INCLUDED
#define PROTOBUF_ss_5fpublic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ss_protoid.pb.h"
#include "cm_roletype.pb.h"
#include "cm_battletype.pb.h"
#include "cm_socialtype.pb.h"
#include "cs_social.pb.h"
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ss_5fpublic_2eproto();
void protobuf_AssignDesc_ss_5fpublic_2eproto();
void protobuf_ShutdownFile_ss_5fpublic_2eproto();

class pub_harem_compete_qingan_req;
class pub_harem_compete_slap_req;
class pub_role_info;
class pub_role_info_cache;
class officer_result_data;
class officer_reduce_data;
class rank_db_item;
class rank_db_data;
class rank_redis_data;
class rank_refresh_data;
class pub_role_login;
class pub_role_login_batch;
class pub_role_logout;
class pub_role_info_sync;
class ps_create_team_req;
class ps_create_team_ack;
class ps_update_team_ntf;
class ps_enter_team_req;
class ps_enter_team_ack;
class ps_exit_team_req;
class ps_exit_team_ack;
class ps_ready_team_req;
class ps_ready_team_ack;
class ps_update_team_req;
class ps_update_team_ack;
class ps_get_teams_req;
class ps_get_teams_ack;
class ps_invite_enter_team_req;
class ps_invite_enter_team_ntf;
class ps_get_offical_rank_req;
class ps_get_offical_rank_ack;
class ps_global_offical_rank_req;
class ps_global_offical_rank_ack;
class ps_get_offical_rank_info_req;
class ps_get_offical_rank_info_ack;
class ps_add_robot_to_offical_arena_req;
class ps_add_robot_to_offical_arena_ack;
class ps_challenge_offical_rank_req;
class ps_challenge_offical_rank_ack;
class ps_update_challenge_result_req;
class ps_update_challenge_result_ack;
class offical_examine_battle_req;
class offical_examine_battle_ack;
class ps_offical_apply_battle_result_req;
class ps_offical_apply_battle_result_ack;
class ps_test_offical_battle_result_req;
class ps_test_start_offical_battle_req;
class ps_test_offical_sign_up_req;
class pub_friend_opt_forward_req;
class pub_friend_opt_forward_ack;
class pub_harem_compete_friends_req;
class pub_harem_compete_friends_ack;
class pub_search_role_req;
class pub_search_role_ack;
class pub_officer_apply_req;
class pub_officer_apply_ack;
class update_heros_formation_ntf;
class pub_officer_result_ntf;
class pub_offical_reduce_ntf;
class pub_load_offical_data_req;
class pub_load_offical_data_ack;
class pub_get_officer_applicants_req;
class pub_get_officer_applicants_ack;
class pub_update_offical_lv_req;
class pub_cancel_offical_apply_req;
class pub_cancel_offical_apply_ack;
class pub_get_offical_challenge_roles_req;
class pub_get_offical_challenge_roles_ack;
class game_pub_send_flower_req;
class pub_game_send_flower_ack;
class game_pub_flower_to_receive_nty;
class pub_game_flower_to_receive_nty;
class pub_forward_add_req;
class pub_forward_add_ack;
class message_packing_info;
class game_pub_msg_packing_ntf;
class pub_game_msg_packing_ntf;
class pub_get_role_req;
class pub_get_role_ack;
class pub_game_friends_ntf;
class pub_complete_role_req;
class pub_complete_role_ack;
class pub_friend_refresh_req;
class pub_friend_refresh_ack;
class game_pub_get_all_event_msg_ntf;
class pub_game_get_all_event_msg_ntf;
class game_pub_get_id_event_msg_ntf;
class pub_game_get_id_event_msg_ntf;
class game_pub_delete_event_msg_ntf;
class game_pub_delete_type_msgs_ntf;
class game_pub_read_event_msg_ntf;
class game_pub_insert_event_msg_ntf;
class pub_game_insert_event_msg_ntf;
class game_pub_get_rank_data_req;
class game_pub_get_rank_data_ack;
class update_rank_data_ntf;
class pub_battle_replay_save_req;
class pub_battle_replay_req;
class pub_battle_replay_ack;
class pub_query_scene_req;
class pub_query_scene_ack;
class pub_destory_scene_ntf;
class pub_scene_role_change_ntf;
class pub_update_3d_scene_info_ntf;
class pub_switch_game_id_ntf;
class pub_officer_daily_salary_req;
class pub_officer_daily_salary_ack;
class pub_offical_battle_report_req;
class pub_offical_battle_report_ack;
class pub_get_offical_formation_req;
class pub_get_offical_formation_ack;
class pub_gm_upgrade_office_req;
class offical_robot_gen_req;
class offical_robot_gen_ack;
class get_minimum_chat_room_req;
class get_minimum_chat_room_ack;
class pub_get_chat_room_list_req;
class pub_get_chat_room_list_ack;
class pub_create_3dchat_room_req;
class pub_create_3dchat_room_ack;
class pub_top_3dchat_room_req;
class pub_top_3dchat_room_ack;
class pub_cancel_top_3dchat_room_req;
class pub_cancel_top_3dchat_room_ack;
class pub_change_name_3dchat_room_req;
class pub_change_name_3dchat_room_ack;
class pub_get_role_gs_id_req;
class pub_get_role_gs_id_ack;
class pub_get_offical_members_req;
class pub_get_offical_members_ack;
class pub_gm_start_match_req;
class pub_gm_start_match_ack;
class pub_gm_send_office_mail_req;
class pub_get_offical_data_req;
class pub_get_offical_data_ack;

enum EGetRoleDoType {
  GET_ROLE_TP_ADD_BLACKLIST = 1,
  GET_ROLE_TP_ADD_FRIEND = 2,
  GET_ROLE_TP_APPLY_PROCESS_OK = 3
};
bool EGetRoleDoType_IsValid(int value);
const EGetRoleDoType EGetRoleDoType_MIN = GET_ROLE_TP_ADD_BLACKLIST;
const EGetRoleDoType EGetRoleDoType_MAX = GET_ROLE_TP_APPLY_PROCESS_OK;
const int EGetRoleDoType_ARRAYSIZE = EGetRoleDoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGetRoleDoType_descriptor();
inline const ::std::string& EGetRoleDoType_Name(EGetRoleDoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGetRoleDoType_descriptor(), value);
}
inline bool EGetRoleDoType_Parse(
    const ::std::string& name, EGetRoleDoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGetRoleDoType>(
    EGetRoleDoType_descriptor(), name, value);
}
// ===================================================================

class pub_harem_compete_qingan_req : public ::google::protobuf::Message {
 public:
  pub_harem_compete_qingan_req();
  virtual ~pub_harem_compete_qingan_req();

  pub_harem_compete_qingan_req(const pub_harem_compete_qingan_req& from);

  inline pub_harem_compete_qingan_req& operator=(const pub_harem_compete_qingan_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_harem_compete_qingan_req& default_instance();

  void Swap(pub_harem_compete_qingan_req* other);

  // implements Message ----------------------------------------------

  pub_harem_compete_qingan_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_harem_compete_qingan_req& from);
  void MergeFrom(const pub_harem_compete_qingan_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_qingan_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional string self_name = 3;
  inline bool has_self_name() const;
  inline void clear_self_name();
  static const int kSelfNameFieldNumber = 3;
  inline const ::std::string& self_name() const;
  inline void set_self_name(const ::std::string& value);
  inline void set_self_name(const char* value);
  inline void set_self_name(const char* value, size_t size);
  inline ::std::string* mutable_self_name();
  inline ::std::string* release_self_name();
  inline void set_allocated_self_name(::std::string* self_name);

  // optional uint64 target_id = 4;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 4;
  inline ::google::protobuf::uint64 target_id() const;
  inline void set_target_id(::google::protobuf::uint64 value);

  // optional string role_name = 5;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 5;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional uint32 role_type = 6;
  inline bool has_role_type() const;
  inline void clear_role_type();
  static const int kRoleTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 role_type() const;
  inline void set_role_type(::google::protobuf::uint32 value);

  // optional uint64 event_uuid = 7;
  inline bool has_event_uuid() const;
  inline void clear_event_uuid();
  static const int kEventUuidFieldNumber = 7;
  inline ::google::protobuf::uint64 event_uuid() const;
  inline void set_event_uuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_harem_compete_qingan_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_self_name();
  inline void clear_has_self_name();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_type();
  inline void clear_has_role_type();
  inline void set_has_event_uuid();
  inline void clear_has_event_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::std::string* self_name_;
  int proto_id_;
  ::google::protobuf::uint32 role_type_;
  ::google::protobuf::uint64 target_id_;
  ::std::string* role_name_;
  ::google::protobuf::uint64 event_uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_harem_compete_qingan_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_harem_compete_slap_req : public ::google::protobuf::Message {
 public:
  pub_harem_compete_slap_req();
  virtual ~pub_harem_compete_slap_req();

  pub_harem_compete_slap_req(const pub_harem_compete_slap_req& from);

  inline pub_harem_compete_slap_req& operator=(const pub_harem_compete_slap_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_harem_compete_slap_req& default_instance();

  void Swap(pub_harem_compete_slap_req* other);

  // implements Message ----------------------------------------------

  pub_harem_compete_slap_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_harem_compete_slap_req& from);
  void MergeFrom(const pub_harem_compete_slap_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_slap_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 self_id = 2;
  inline bool has_self_id() const;
  inline void clear_self_id();
  static const int kSelfIdFieldNumber = 2;
  inline ::google::protobuf::uint64 self_id() const;
  inline void set_self_id(::google::protobuf::uint64 value);

  // optional string self_name = 3;
  inline bool has_self_name() const;
  inline void clear_self_name();
  static const int kSelfNameFieldNumber = 3;
  inline const ::std::string& self_name() const;
  inline void set_self_name(const ::std::string& value);
  inline void set_self_name(const char* value);
  inline void set_self_name(const char* value, size_t size);
  inline ::std::string* mutable_self_name();
  inline ::std::string* release_self_name();
  inline void set_allocated_self_name(::std::string* self_name);

  // optional uint64 target_id = 4;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 4;
  inline ::google::protobuf::uint64 target_id() const;
  inline void set_target_id(::google::protobuf::uint64 value);

  // optional string target_name = 5;
  inline bool has_target_name() const;
  inline void clear_target_name();
  static const int kTargetNameFieldNumber = 5;
  inline const ::std::string& target_name() const;
  inline void set_target_name(const ::std::string& value);
  inline void set_target_name(const char* value);
  inline void set_target_name(const char* value, size_t size);
  inline ::std::string* mutable_target_name();
  inline ::std::string* release_target_name();
  inline void set_allocated_target_name(::std::string* target_name);

  // optional uint32 role_type = 6;
  inline bool has_role_type() const;
  inline void clear_role_type();
  static const int kRoleTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 role_type() const;
  inline void set_role_type(::google::protobuf::uint32 value);

  // optional uint64 take_time = 7;
  inline bool has_take_time() const;
  inline void clear_take_time();
  static const int kTakeTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 take_time() const;
  inline void set_take_time(::google::protobuf::uint64 value);

  // optional uint32 slap_count = 8;
  inline bool has_slap_count() const;
  inline void clear_slap_count();
  static const int kSlapCountFieldNumber = 8;
  inline ::google::protobuf::uint32 slap_count() const;
  inline void set_slap_count(::google::protobuf::uint32 value);

  // optional .SProtoSpace.ESLAPPROGRESS progress = 9;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 9;
  inline ::SProtoSpace::ESLAPPROGRESS progress() const;
  inline void set_progress(::SProtoSpace::ESLAPPROGRESS value);

  // repeated .SProtoSpace.slap_emoji_info info = 10;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 10;
  inline const ::SProtoSpace::slap_emoji_info& info(int index) const;
  inline ::SProtoSpace::slap_emoji_info* mutable_info(int index);
  inline ::SProtoSpace::slap_emoji_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::slap_emoji_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::slap_emoji_info >*
      mutable_info();

  // optional uint64 event_uuid = 11;
  inline bool has_event_uuid() const;
  inline void clear_event_uuid();
  static const int kEventUuidFieldNumber = 11;
  inline ::google::protobuf::uint64 event_uuid() const;
  inline void set_event_uuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_harem_compete_slap_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_self_id();
  inline void clear_has_self_id();
  inline void set_has_self_name();
  inline void clear_has_self_name();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_target_name();
  inline void clear_has_target_name();
  inline void set_has_role_type();
  inline void clear_has_role_type();
  inline void set_has_take_time();
  inline void clear_has_take_time();
  inline void set_has_slap_count();
  inline void clear_has_slap_count();
  inline void set_has_progress();
  inline void clear_has_progress();
  inline void set_has_event_uuid();
  inline void clear_has_event_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 self_id_;
  ::std::string* self_name_;
  int proto_id_;
  ::google::protobuf::uint32 role_type_;
  ::google::protobuf::uint64 target_id_;
  ::std::string* target_name_;
  ::google::protobuf::uint64 take_time_;
  ::google::protobuf::uint32 slap_count_;
  int progress_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::slap_emoji_info > info_;
  ::google::protobuf::uint64 event_uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_harem_compete_slap_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_role_info : public ::google::protobuf::Message {
 public:
  pub_role_info();
  virtual ~pub_role_info();

  pub_role_info(const pub_role_info& from);

  inline pub_role_info& operator=(const pub_role_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_role_info& default_instance();

  void Swap(pub_role_info* other);

  // implements Message ----------------------------------------------

  pub_role_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_role_info& from);
  void MergeFrom(const pub_role_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 lv = 3;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional uint64 login_time = 4;
  inline bool has_login_time() const;
  inline void clear_login_time();
  static const int kLoginTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 login_time() const;
  inline void set_login_time(::google::protobuf::uint64 value);

  // optional uint64 logout_time = 5;
  inline bool has_logout_time() const;
  inline void clear_logout_time();
  static const int kLogoutTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 logout_time() const;
  inline void set_logout_time(::google::protobuf::uint64 value);

  // optional string position = 6;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 6;
  inline const ::std::string& position() const;
  inline void set_position(const ::std::string& value);
  inline void set_position(const char* value);
  inline void set_position(const char* value, size_t size);
  inline ::std::string* mutable_position();
  inline ::std::string* release_position();
  inline void set_allocated_position(::std::string* position);

  // optional uint32 sex = 7;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 7;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 grade = 8;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 8;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional bool online = 9;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 9;
  inline bool online() const;
  inline void set_online(bool value);

  // optional string avatar = 10;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 10;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const char* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // optional uint64 battle_session_id = 13;
  inline bool has_battle_session_id() const;
  inline void clear_battle_session_id();
  static const int kBattleSessionIdFieldNumber = 13;
  inline ::google::protobuf::uint64 battle_session_id() const;
  inline void set_battle_session_id(::google::protobuf::uint64 value);

  // optional uint32 fight_power = 14;
  inline bool has_fight_power() const;
  inline void clear_fight_power();
  static const int kFightPowerFieldNumber = 14;
  inline ::google::protobuf::uint32 fight_power() const;
  inline void set_fight_power(::google::protobuf::uint32 value);

  // optional uint32 paixi_id = 15;
  inline bool has_paixi_id() const;
  inline void clear_paixi_id();
  static const int kPaixiIdFieldNumber = 15;
  inline ::google::protobuf::uint32 paixi_id() const;
  inline void set_paixi_id(::google::protobuf::uint32 value);

  // optional int32 border = 16;
  inline bool has_border() const;
  inline void clear_border();
  static const int kBorderFieldNumber = 16;
  inline ::google::protobuf::int32 border() const;
  inline void set_border(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_role_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_login_time();
  inline void clear_has_login_time();
  inline void set_has_logout_time();
  inline void clear_has_logout_time();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_battle_session_id();
  inline void clear_has_battle_session_id();
  inline void set_has_fight_power();
  inline void clear_has_fight_power();
  inline void set_has_paixi_id();
  inline void clear_has_paixi_id();
  inline void set_has_border();
  inline void clear_has_border();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* name_;
  ::google::protobuf::uint64 login_time_;
  ::google::protobuf::uint64 logout_time_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 sex_;
  ::std::string* position_;
  ::google::protobuf::uint32 grade_;
  bool online_;
  ::std::string* avatar_;
  ::google::protobuf::uint64 battle_session_id_;
  ::google::protobuf::uint32 fight_power_;
  ::google::protobuf::uint32 paixi_id_;
  ::google::protobuf::int32 border_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_role_info* default_instance_;
};
// -------------------------------------------------------------------

class pub_role_info_cache : public ::google::protobuf::Message {
 public:
  pub_role_info_cache();
  virtual ~pub_role_info_cache();

  pub_role_info_cache(const pub_role_info_cache& from);

  inline pub_role_info_cache& operator=(const pub_role_info_cache& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_role_info_cache& default_instance();

  void Swap(pub_role_info_cache* other);

  // implements Message ----------------------------------------------

  pub_role_info_cache* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_role_info_cache& from);
  void MergeFrom(const pub_role_info_cache& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SProtoSpace.pub_role_info role_info_list = 1;
  inline int role_info_list_size() const;
  inline void clear_role_info_list();
  static const int kRoleInfoListFieldNumber = 1;
  inline const ::SProtoSpace::pub_role_info& role_info_list(int index) const;
  inline ::SProtoSpace::pub_role_info* mutable_role_info_list(int index);
  inline ::SProtoSpace::pub_role_info* add_role_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pub_role_info >&
      role_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pub_role_info >*
      mutable_role_info_list();

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_role_info_cache)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pub_role_info > role_info_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_role_info_cache* default_instance_;
};
// -------------------------------------------------------------------

class officer_result_data : public ::google::protobuf::Message {
 public:
  officer_result_data();
  virtual ~officer_result_data();

  officer_result_data(const officer_result_data& from);

  inline officer_result_data& operator=(const officer_result_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const officer_result_data& default_instance();

  void Swap(officer_result_data* other);

  // implements Message ----------------------------------------------

  officer_result_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const officer_result_data& from);
  void MergeFrom(const officer_result_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.EGrade lv = 2;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 2;
  inline ::SProtoSpace::EGrade lv() const;
  inline void set_lv(::SProtoSpace::EGrade value);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.officer_result_data)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int lv_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static officer_result_data* default_instance_;
};
// -------------------------------------------------------------------

class officer_reduce_data : public ::google::protobuf::Message {
 public:
  officer_reduce_data();
  virtual ~officer_reduce_data();

  officer_reduce_data(const officer_reduce_data& from);

  inline officer_reduce_data& operator=(const officer_reduce_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const officer_reduce_data& default_instance();

  void Swap(officer_reduce_data* other);

  // implements Message ----------------------------------------------

  officer_reduce_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const officer_reduce_data& from);
  void MergeFrom(const officer_reduce_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional int32 old_grade = 2;
  inline bool has_old_grade() const;
  inline void clear_old_grade();
  static const int kOldGradeFieldNumber = 2;
  inline ::google::protobuf::int32 old_grade() const;
  inline void set_old_grade(::google::protobuf::int32 value);

  // optional int32 new_grade = 3;
  inline bool has_new_grade() const;
  inline void clear_new_grade();
  static const int kNewGradeFieldNumber = 3;
  inline ::google::protobuf::int32 new_grade() const;
  inline void set_new_grade(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.officer_reduce_data)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_old_grade();
  inline void clear_has_old_grade();
  inline void set_has_new_grade();
  inline void clear_has_new_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::int32 old_grade_;
  ::google::protobuf::int32 new_grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static officer_reduce_data* default_instance_;
};
// -------------------------------------------------------------------

class rank_db_item : public ::google::protobuf::Message {
 public:
  rank_db_item();
  virtual ~rank_db_item();

  rank_db_item(const rank_db_item& from);

  inline rank_db_item& operator=(const rank_db_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rank_db_item& default_instance();

  void Swap(rank_db_item* other);

  // implements Message ----------------------------------------------

  rank_db_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rank_db_item& from);
  void MergeFrom(const rank_db_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // repeated uint32 values = 2;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline ::google::protobuf::uint32 values(int index) const;
  inline void set_values(int index, ::google::protobuf::uint32 value);
  inline void add_values(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      values() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_values();

  // optional uint32 order = 3;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 3;
  inline ::google::protobuf::uint32 order() const;
  inline void set_order(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.rank_db_item)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_order();
  inline void clear_has_order();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > values_;
  ::google::protobuf::uint32 order_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static rank_db_item* default_instance_;
};
// -------------------------------------------------------------------

class rank_db_data : public ::google::protobuf::Message {
 public:
  rank_db_data();
  virtual ~rank_db_data();

  rank_db_data(const rank_db_data& from);

  inline rank_db_data& operator=(const rank_db_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rank_db_data& default_instance();

  void Swap(rank_db_data* other);

  // implements Message ----------------------------------------------

  rank_db_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rank_db_data& from);
  void MergeFrom(const rank_db_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.RANK_TYPE type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::SProtoSpace::RANK_TYPE type() const;
  inline void set_type(::SProtoSpace::RANK_TYPE value);

  // optional uint32 rank_order = 2;
  inline bool has_rank_order() const;
  inline void clear_rank_order();
  static const int kRankOrderFieldNumber = 2;
  inline ::google::protobuf::uint32 rank_order() const;
  inline void set_rank_order(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.rank_db_item items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::SProtoSpace::rank_db_item& items(int index) const;
  inline ::SProtoSpace::rank_db_item* mutable_items(int index);
  inline ::SProtoSpace::rank_db_item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::rank_db_item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::rank_db_item >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:SProtoSpace.rank_db_data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_rank_order();
  inline void clear_has_rank_order();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 rank_order_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::rank_db_item > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static rank_db_data* default_instance_;
};
// -------------------------------------------------------------------

class rank_redis_data : public ::google::protobuf::Message {
 public:
  rank_redis_data();
  virtual ~rank_redis_data();

  rank_redis_data(const rank_redis_data& from);

  inline rank_redis_data& operator=(const rank_redis_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rank_redis_data& default_instance();

  void Swap(rank_redis_data* other);

  // implements Message ----------------------------------------------

  rank_redis_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rank_redis_data& from);
  void MergeFrom(const rank_redis_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.rank_redis_data)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static rank_redis_data* default_instance_;
};
// -------------------------------------------------------------------

class rank_refresh_data : public ::google::protobuf::Message {
 public:
  rank_refresh_data();
  virtual ~rank_refresh_data();

  rank_refresh_data(const rank_refresh_data& from);

  inline rank_refresh_data& operator=(const rank_refresh_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rank_refresh_data& default_instance();

  void Swap(rank_refresh_data* other);

  // implements Message ----------------------------------------------

  rank_refresh_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rank_refresh_data& from);
  void MergeFrom(const rank_refresh_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 min_value = 1;
  inline bool has_min_value() const;
  inline void clear_min_value();
  static const int kMinValueFieldNumber = 1;
  inline ::google::protobuf::uint64 min_value() const;
  inline void set_min_value(::google::protobuf::uint64 value);

  // optional int32 cur_size = 2;
  inline bool has_cur_size() const;
  inline void clear_cur_size();
  static const int kCurSizeFieldNumber = 2;
  inline ::google::protobuf::int32 cur_size() const;
  inline void set_cur_size(::google::protobuf::int32 value);

  // repeated .SProtoSpace.rank_redis_data members = 3;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 3;
  inline const ::SProtoSpace::rank_redis_data& members(int index) const;
  inline ::SProtoSpace::rank_redis_data* mutable_members(int index);
  inline ::SProtoSpace::rank_redis_data* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::rank_redis_data >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::rank_redis_data >*
      mutable_members();

  // @@protoc_insertion_point(class_scope:SProtoSpace.rank_refresh_data)
 private:
  inline void set_has_min_value();
  inline void clear_has_min_value();
  inline void set_has_cur_size();
  inline void clear_has_cur_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 min_value_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::rank_redis_data > members_;
  ::google::protobuf::int32 cur_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static rank_refresh_data* default_instance_;
};
// -------------------------------------------------------------------

class pub_role_login : public ::google::protobuf::Message {
 public:
  pub_role_login();
  virtual ~pub_role_login();

  pub_role_login(const pub_role_login& from);

  inline pub_role_login& operator=(const pub_role_login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_role_login& default_instance();

  void Swap(pub_role_login* other);

  // implements Message ----------------------------------------------

  pub_role_login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_role_login& from);
  void MergeFrom(const pub_role_login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_login_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.pub_role_info info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::SProtoSpace::pub_role_info& info() const;
  inline ::SProtoSpace::pub_role_info* mutable_info();
  inline ::SProtoSpace::pub_role_info* release_info();
  inline void set_allocated_info(::SProtoSpace::pub_role_info* info);

  // optional uint64 game_session_id = 4;
  inline bool has_game_session_id() const;
  inline void clear_game_session_id();
  static const int kGameSessionIdFieldNumber = 4;
  inline ::google::protobuf::uint64 game_session_id() const;
  inline void set_game_session_id(::google::protobuf::uint64 value);

  // optional uint64 gate_session_id = 5;
  inline bool has_gate_session_id() const;
  inline void clear_gate_session_id();
  static const int kGateSessionIdFieldNumber = 5;
  inline ::google::protobuf::uint64 gate_session_id() const;
  inline void set_gate_session_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_role_login)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_game_session_id();
  inline void clear_has_game_session_id();
  inline void set_has_gate_session_id();
  inline void clear_has_gate_session_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::SProtoSpace::pub_role_info* info_;
  ::google::protobuf::uint64 game_session_id_;
  ::google::protobuf::uint64 gate_session_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_role_login* default_instance_;
};
// -------------------------------------------------------------------

class pub_role_login_batch : public ::google::protobuf::Message {
 public:
  pub_role_login_batch();
  virtual ~pub_role_login_batch();

  pub_role_login_batch(const pub_role_login_batch& from);

  inline pub_role_login_batch& operator=(const pub_role_login_batch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_role_login_batch& default_instance();

  void Swap(pub_role_login_batch* other);

  // implements Message ----------------------------------------------

  pub_role_login_batch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_role_login_batch& from);
  void MergeFrom(const pub_role_login_batch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_login_batch_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // repeated .SProtoSpace.pub_role_login role_logins = 2;
  inline int role_logins_size() const;
  inline void clear_role_logins();
  static const int kRoleLoginsFieldNumber = 2;
  inline const ::SProtoSpace::pub_role_login& role_logins(int index) const;
  inline ::SProtoSpace::pub_role_login* mutable_role_logins(int index);
  inline ::SProtoSpace::pub_role_login* add_role_logins();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pub_role_login >&
      role_logins() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pub_role_login >*
      mutable_role_logins();

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_role_login_batch)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pub_role_login > role_logins_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_role_login_batch* default_instance_;
};
// -------------------------------------------------------------------

class pub_role_logout : public ::google::protobuf::Message {
 public:
  pub_role_logout();
  virtual ~pub_role_logout();

  pub_role_logout(const pub_role_logout& from);

  inline pub_role_logout& operator=(const pub_role_logout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_role_logout& default_instance();

  void Swap(pub_role_logout* other);

  // implements Message ----------------------------------------------

  pub_role_logout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_role_logout& from);
  void MergeFrom(const pub_role_logout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_logout_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_role_logout)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_role_logout* default_instance_;
};
// -------------------------------------------------------------------

class pub_role_info_sync : public ::google::protobuf::Message {
 public:
  pub_role_info_sync();
  virtual ~pub_role_info_sync();

  pub_role_info_sync(const pub_role_info_sync& from);

  inline pub_role_info_sync& operator=(const pub_role_info_sync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_role_info_sync& default_instance();

  void Swap(pub_role_info_sync* other);

  // implements Message ----------------------------------------------

  pub_role_info_sync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_role_info_sync& from);
  void MergeFrom(const pub_role_info_sync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_info_sync_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.pub_role_info info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::SProtoSpace::pub_role_info& info() const;
  inline ::SProtoSpace::pub_role_info* mutable_info();
  inline ::SProtoSpace::pub_role_info* release_info();
  inline void set_allocated_info(::SProtoSpace::pub_role_info* info);

  // optional uint64 game_session_id = 4;
  inline bool has_game_session_id() const;
  inline void clear_game_session_id();
  static const int kGameSessionIdFieldNumber = 4;
  inline ::google::protobuf::uint64 game_session_id() const;
  inline void set_game_session_id(::google::protobuf::uint64 value);

  // optional uint64 gate_session_id = 5;
  inline bool has_gate_session_id() const;
  inline void clear_gate_session_id();
  static const int kGateSessionIdFieldNumber = 5;
  inline ::google::protobuf::uint64 gate_session_id() const;
  inline void set_gate_session_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_role_info_sync)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_game_session_id();
  inline void clear_has_game_session_id();
  inline void set_has_gate_session_id();
  inline void clear_has_gate_session_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::SProtoSpace::pub_role_info* info_;
  ::google::protobuf::uint64 game_session_id_;
  ::google::protobuf::uint64 gate_session_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_role_info_sync* default_instance_;
};
// -------------------------------------------------------------------

class ps_create_team_req : public ::google::protobuf::Message {
 public:
  ps_create_team_req();
  virtual ~ps_create_team_req();

  ps_create_team_req(const ps_create_team_req& from);

  inline ps_create_team_req& operator=(const ps_create_team_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_create_team_req& default_instance();

  void Swap(ps_create_team_req* other);

  // implements Message ----------------------------------------------

  ps_create_team_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_create_team_req& from);
  void MergeFrom(const ps_create_team_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_create_team_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.eTeamType team_type = 2;
  inline bool has_team_type() const;
  inline void clear_team_type();
  static const int kTeamTypeFieldNumber = 2;
  inline ::SProtoSpace::eTeamType team_type() const;
  inline void set_team_type(::SProtoSpace::eTeamType value);

  // optional .SProtoSpace.eTeamSize team_size = 3;
  inline bool has_team_size() const;
  inline void clear_team_size();
  static const int kTeamSizeFieldNumber = 3;
  inline ::SProtoSpace::eTeamSize team_size() const;
  inline void set_team_size(::SProtoSpace::eTeamSize value);

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  inline bool has_team_perm() const;
  inline void clear_team_perm();
  static const int kTeamPermFieldNumber = 4;
  inline ::SProtoSpace::eTeamPermission team_perm() const;
  inline void set_team_perm(::SProtoSpace::eTeamPermission value);

  // optional string team_name = 5;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 5;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  inline void set_allocated_team_name(::std::string* team_name);

  // optional uint64 gs_id = 6;
  inline bool has_gs_id() const;
  inline void clear_gs_id();
  static const int kGsIdFieldNumber = 6;
  inline ::google::protobuf::uint64 gs_id() const;
  inline void set_gs_id(::google::protobuf::uint64 value);

  // optional uint64 role_id = 7;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 7;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional int32 lv = 8;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 8;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional string role_name = 9;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 9;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // repeated .SProtoSpace.battle_hero_info heros = 10;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 10;
  inline const ::SProtoSpace::battle_hero_info& heros(int index) const;
  inline ::SProtoSpace::battle_hero_info* mutable_heros(int index);
  inline ::SProtoSpace::battle_hero_info* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info >*
      mutable_heros();

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_create_team_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_team_type();
  inline void clear_has_team_type();
  inline void set_has_team_size();
  inline void clear_has_team_size();
  inline void set_has_team_perm();
  inline void clear_has_team_perm();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_gs_id();
  inline void clear_has_gs_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_role_name();
  inline void clear_has_role_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int team_type_;
  int team_size_;
  int team_perm_;
  ::std::string* team_name_;
  ::google::protobuf::uint64 gs_id_;
  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info > heros_;
  ::google::protobuf::int32 lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_create_team_req* default_instance_;
};
// -------------------------------------------------------------------

class ps_create_team_ack : public ::google::protobuf::Message {
 public:
  ps_create_team_ack();
  virtual ~ps_create_team_ack();

  ps_create_team_ack(const ps_create_team_ack& from);

  inline ps_create_team_ack& operator=(const ps_create_team_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_create_team_ack& default_instance();

  void Swap(ps_create_team_ack* other);

  // implements Message ----------------------------------------------

  ps_create_team_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_create_team_ack& from);
  void MergeFrom(const ps_create_team_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_create_team_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.eTeamType team_type = 2;
  inline bool has_team_type() const;
  inline void clear_team_type();
  static const int kTeamTypeFieldNumber = 2;
  inline ::SProtoSpace::eTeamType team_type() const;
  inline void set_team_type(::SProtoSpace::eTeamType value);

  // optional .SProtoSpace.eTeamSize team_size = 3;
  inline bool has_team_size() const;
  inline void clear_team_size();
  static const int kTeamSizeFieldNumber = 3;
  inline ::SProtoSpace::eTeamSize team_size() const;
  inline void set_team_size(::SProtoSpace::eTeamSize value);

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  inline bool has_team_perm() const;
  inline void clear_team_perm();
  static const int kTeamPermFieldNumber = 4;
  inline ::SProtoSpace::eTeamPermission team_perm() const;
  inline void set_team_perm(::SProtoSpace::eTeamPermission value);

  // optional string team_name = 5;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 5;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  inline void set_allocated_team_name(::std::string* team_name);

  // optional uint64 role_id = 6;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 6;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional int32 ret = 7;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 7;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_create_team_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_team_type();
  inline void clear_has_team_type();
  inline void set_has_team_size();
  inline void clear_has_team_size();
  inline void set_has_team_perm();
  inline void clear_has_team_perm();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int team_type_;
  int team_size_;
  int team_perm_;
  ::std::string* team_name_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_create_team_ack* default_instance_;
};
// -------------------------------------------------------------------

class ps_update_team_ntf : public ::google::protobuf::Message {
 public:
  ps_update_team_ntf();
  virtual ~ps_update_team_ntf();

  ps_update_team_ntf(const ps_update_team_ntf& from);

  inline ps_update_team_ntf& operator=(const ps_update_team_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_update_team_ntf& default_instance();

  void Swap(ps_update_team_ntf* other);

  // implements Message ----------------------------------------------

  ps_update_team_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_update_team_ntf& from);
  void MergeFrom(const ps_update_team_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_update_team_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.team_data team = 3;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 3;
  inline const ::SProtoSpace::team_data& team() const;
  inline ::SProtoSpace::team_data* mutable_team();
  inline ::SProtoSpace::team_data* release_team();
  inline void set_allocated_team(::SProtoSpace::team_data* team);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_update_team_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_team();
  inline void clear_has_team();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::SProtoSpace::team_data* team_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_update_team_ntf* default_instance_;
};
// -------------------------------------------------------------------

class ps_enter_team_req : public ::google::protobuf::Message {
 public:
  ps_enter_team_req();
  virtual ~ps_enter_team_req();

  ps_enter_team_req(const ps_enter_team_req& from);

  inline ps_enter_team_req& operator=(const ps_enter_team_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_enter_team_req& default_instance();

  void Swap(ps_enter_team_req* other);

  // implements Message ----------------------------------------------

  ps_enter_team_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_enter_team_req& from);
  void MergeFrom(const ps_enter_team_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_enter_team_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 gs_id = 4;
  inline bool has_gs_id() const;
  inline void clear_gs_id();
  static const int kGsIdFieldNumber = 4;
  inline ::google::protobuf::uint64 gs_id() const;
  inline void set_gs_id(::google::protobuf::uint64 value);

  // optional int32 lv = 5;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 5;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional string role_name = 6;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 6;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // repeated .SProtoSpace.battle_hero_info heros = 7;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 7;
  inline const ::SProtoSpace::battle_hero_info& heros(int index) const;
  inline ::SProtoSpace::battle_hero_info* mutable_heros(int index);
  inline ::SProtoSpace::battle_hero_info* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info >*
      mutable_heros();

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_enter_team_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_gs_id();
  inline void clear_has_gs_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_role_name();
  inline void clear_has_role_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 team_id_;
  ::google::protobuf::uint64 role_id_;
  int protoid_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::uint64 gs_id_;
  ::std::string* role_name_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info > heros_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_enter_team_req* default_instance_;
};
// -------------------------------------------------------------------

class ps_enter_team_ack : public ::google::protobuf::Message {
 public:
  ps_enter_team_ack();
  virtual ~ps_enter_team_ack();

  ps_enter_team_ack(const ps_enter_team_ack& from);

  inline ps_enter_team_ack& operator=(const ps_enter_team_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_enter_team_ack& default_instance();

  void Swap(ps_enter_team_ack* other);

  // implements Message ----------------------------------------------

  ps_enter_team_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_enter_team_ack& from);
  void MergeFrom(const ps_enter_team_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_enter_team_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional int32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_enter_team_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 team_id_;
  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_enter_team_ack* default_instance_;
};
// -------------------------------------------------------------------

class ps_exit_team_req : public ::google::protobuf::Message {
 public:
  ps_exit_team_req();
  virtual ~ps_exit_team_req();

  ps_exit_team_req(const ps_exit_team_req& from);

  inline ps_exit_team_req& operator=(const ps_exit_team_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_exit_team_req& default_instance();

  void Swap(ps_exit_team_req* other);

  // implements Message ----------------------------------------------

  ps_exit_team_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_exit_team_req& from);
  void MergeFrom(const ps_exit_team_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_exit_team_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_exit_team_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 team_id_;
  ::google::protobuf::uint64 role_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_exit_team_req* default_instance_;
};
// -------------------------------------------------------------------

class ps_exit_team_ack : public ::google::protobuf::Message {
 public:
  ps_exit_team_ack();
  virtual ~ps_exit_team_ack();

  ps_exit_team_ack(const ps_exit_team_ack& from);

  inline ps_exit_team_ack& operator=(const ps_exit_team_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_exit_team_ack& default_instance();

  void Swap(ps_exit_team_ack* other);

  // implements Message ----------------------------------------------

  ps_exit_team_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_exit_team_ack& from);
  void MergeFrom(const ps_exit_team_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_exit_team_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional int32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_exit_team_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 team_id_;
  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_exit_team_ack* default_instance_;
};
// -------------------------------------------------------------------

class ps_ready_team_req : public ::google::protobuf::Message {
 public:
  ps_ready_team_req();
  virtual ~ps_ready_team_req();

  ps_ready_team_req(const ps_ready_team_req& from);

  inline ps_ready_team_req& operator=(const ps_ready_team_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_ready_team_req& default_instance();

  void Swap(ps_ready_team_req* other);

  // implements Message ----------------------------------------------

  ps_ready_team_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_ready_team_req& from);
  void MergeFrom(const ps_ready_team_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_ready_team_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_ready_team_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 team_id_;
  ::google::protobuf::uint64 role_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_ready_team_req* default_instance_;
};
// -------------------------------------------------------------------

class ps_ready_team_ack : public ::google::protobuf::Message {
 public:
  ps_ready_team_ack();
  virtual ~ps_ready_team_ack();

  ps_ready_team_ack(const ps_ready_team_ack& from);

  inline ps_ready_team_ack& operator=(const ps_ready_team_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_ready_team_ack& default_instance();

  void Swap(ps_ready_team_ack* other);

  // implements Message ----------------------------------------------

  ps_ready_team_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_ready_team_ack& from);
  void MergeFrom(const ps_ready_team_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_ready_team_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional int32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_ready_team_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 team_id_;
  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_ready_team_ack* default_instance_;
};
// -------------------------------------------------------------------

class ps_update_team_req : public ::google::protobuf::Message {
 public:
  ps_update_team_req();
  virtual ~ps_update_team_req();

  ps_update_team_req(const ps_update_team_req& from);

  inline ps_update_team_req& operator=(const ps_update_team_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_update_team_req& default_instance();

  void Swap(ps_update_team_req* other);

  // implements Message ----------------------------------------------

  ps_update_team_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_update_team_req& from);
  void MergeFrom(const ps_update_team_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_update_team_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 slot_id = 4;
  inline bool has_slot_id() const;
  inline void clear_slot_id();
  static const int kSlotIdFieldNumber = 4;
  inline ::google::protobuf::uint32 slot_id() const;
  inline void set_slot_id(::google::protobuf::uint32 value);

  // optional .SProtoSpace.battle_hero_info heros = 5;
  inline bool has_heros() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 5;
  inline const ::SProtoSpace::battle_hero_info& heros() const;
  inline ::SProtoSpace::battle_hero_info* mutable_heros();
  inline ::SProtoSpace::battle_hero_info* release_heros();
  inline void set_allocated_heros(::SProtoSpace::battle_hero_info* heros);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_update_team_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_slot_id();
  inline void clear_has_slot_id();
  inline void set_has_heros();
  inline void clear_has_heros();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 team_id_;
  int protoid_;
  ::google::protobuf::uint32 slot_id_;
  ::google::protobuf::uint64 role_id_;
  ::SProtoSpace::battle_hero_info* heros_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_update_team_req* default_instance_;
};
// -------------------------------------------------------------------

class ps_update_team_ack : public ::google::protobuf::Message {
 public:
  ps_update_team_ack();
  virtual ~ps_update_team_ack();

  ps_update_team_ack(const ps_update_team_ack& from);

  inline ps_update_team_ack& operator=(const ps_update_team_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_update_team_ack& default_instance();

  void Swap(ps_update_team_ack* other);

  // implements Message ----------------------------------------------

  ps_update_team_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_update_team_ack& from);
  void MergeFrom(const ps_update_team_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_update_team_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 slot_id = 4;
  inline bool has_slot_id() const;
  inline void clear_slot_id();
  static const int kSlotIdFieldNumber = 4;
  inline ::google::protobuf::uint32 slot_id() const;
  inline void set_slot_id(::google::protobuf::uint32 value);

  // optional uint64 hero_id = 5;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 5;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // optional int32 ret = 6;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 6;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_update_team_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_slot_id();
  inline void clear_has_slot_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 team_id_;
  int protoid_;
  ::google::protobuf::uint32 slot_id_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 hero_id_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_update_team_ack* default_instance_;
};
// -------------------------------------------------------------------

class ps_get_teams_req : public ::google::protobuf::Message {
 public:
  ps_get_teams_req();
  virtual ~ps_get_teams_req();

  ps_get_teams_req(const ps_get_teams_req& from);

  inline ps_get_teams_req& operator=(const ps_get_teams_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_get_teams_req& default_instance();

  void Swap(ps_get_teams_req* other);

  // implements Message ----------------------------------------------

  ps_get_teams_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_get_teams_req& from);
  void MergeFrom(const ps_get_teams_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_get_teams_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.eTeamType team_type = 2;
  inline bool has_team_type() const;
  inline void clear_team_type();
  static const int kTeamTypeFieldNumber = 2;
  inline ::SProtoSpace::eTeamType team_type() const;
  inline void set_team_type(::SProtoSpace::eTeamType value);

  // optional .SProtoSpace.eTeamSize team_size = 3;
  inline bool has_team_size() const;
  inline void clear_team_size();
  static const int kTeamSizeFieldNumber = 3;
  inline ::SProtoSpace::eTeamSize team_size() const;
  inline void set_team_size(::SProtoSpace::eTeamSize value);

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  inline bool has_team_perm() const;
  inline void clear_team_perm();
  static const int kTeamPermFieldNumber = 4;
  inline ::SProtoSpace::eTeamPermission team_perm() const;
  inline void set_team_perm(::SProtoSpace::eTeamPermission value);

  // repeated int32 parms = 5;
  inline int parms_size() const;
  inline void clear_parms();
  static const int kParmsFieldNumber = 5;
  inline ::google::protobuf::int32 parms(int index) const;
  inline void set_parms(int index, ::google::protobuf::int32 value);
  inline void add_parms(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      parms() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_parms();

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_get_teams_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_team_type();
  inline void clear_has_team_type();
  inline void set_has_team_size();
  inline void clear_has_team_size();
  inline void set_has_team_perm();
  inline void clear_has_team_perm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int team_type_;
  int team_size_;
  int team_perm_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > parms_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_get_teams_req* default_instance_;
};
// -------------------------------------------------------------------

class ps_get_teams_ack : public ::google::protobuf::Message {
 public:
  ps_get_teams_ack();
  virtual ~ps_get_teams_ack();

  ps_get_teams_ack(const ps_get_teams_ack& from);

  inline ps_get_teams_ack& operator=(const ps_get_teams_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_get_teams_ack& default_instance();

  void Swap(ps_get_teams_ack* other);

  // implements Message ----------------------------------------------

  ps_get_teams_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_get_teams_ack& from);
  void MergeFrom(const ps_get_teams_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_get_teams_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated .SProtoSpace.team_brief teams = 4;
  inline int teams_size() const;
  inline void clear_teams();
  static const int kTeamsFieldNumber = 4;
  inline const ::SProtoSpace::team_brief& teams(int index) const;
  inline ::SProtoSpace::team_brief* mutable_teams(int index);
  inline ::SProtoSpace::team_brief* add_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::team_brief >&
      teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::team_brief >*
      mutable_teams();

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_get_teams_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::team_brief > teams_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_get_teams_ack* default_instance_;
};
// -------------------------------------------------------------------

class ps_invite_enter_team_req : public ::google::protobuf::Message {
 public:
  ps_invite_enter_team_req();
  virtual ~ps_invite_enter_team_req();

  ps_invite_enter_team_req(const ps_invite_enter_team_req& from);

  inline ps_invite_enter_team_req& operator=(const ps_invite_enter_team_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_invite_enter_team_req& default_instance();

  void Swap(ps_invite_enter_team_req* other);

  // implements Message ----------------------------------------------

  ps_invite_enter_team_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_invite_enter_team_req& from);
  void MergeFrom(const ps_invite_enter_team_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_invite_enter_team_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 sour_role_id = 2;
  inline bool has_sour_role_id() const;
  inline void clear_sour_role_id();
  static const int kSourRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 sour_role_id() const;
  inline void set_sour_role_id(::google::protobuf::uint64 value);

  // optional string sour_role_name = 3;
  inline bool has_sour_role_name() const;
  inline void clear_sour_role_name();
  static const int kSourRoleNameFieldNumber = 3;
  inline const ::std::string& sour_role_name() const;
  inline void set_sour_role_name(const ::std::string& value);
  inline void set_sour_role_name(const char* value);
  inline void set_sour_role_name(const char* value, size_t size);
  inline ::std::string* mutable_sour_role_name();
  inline ::std::string* release_sour_role_name();
  inline void set_allocated_sour_role_name(::std::string* sour_role_name);

  // optional uint64 team_id = 4;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 4;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // repeated uint64 roleids = 5;
  inline int roleids_size() const;
  inline void clear_roleids();
  static const int kRoleidsFieldNumber = 5;
  inline ::google::protobuf::uint64 roleids(int index) const;
  inline void set_roleids(int index, ::google::protobuf::uint64 value);
  inline void add_roleids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      roleids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_roleids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_invite_enter_team_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_sour_role_id();
  inline void clear_has_sour_role_id();
  inline void set_has_sour_role_name();
  inline void clear_has_sour_role_name();
  inline void set_has_team_id();
  inline void clear_has_team_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 sour_role_id_;
  ::std::string* sour_role_name_;
  ::google::protobuf::uint64 team_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > roleids_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_invite_enter_team_req* default_instance_;
};
// -------------------------------------------------------------------

class ps_invite_enter_team_ntf : public ::google::protobuf::Message {
 public:
  ps_invite_enter_team_ntf();
  virtual ~ps_invite_enter_team_ntf();

  ps_invite_enter_team_ntf(const ps_invite_enter_team_ntf& from);

  inline ps_invite_enter_team_ntf& operator=(const ps_invite_enter_team_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_invite_enter_team_ntf& default_instance();

  void Swap(ps_invite_enter_team_ntf* other);

  // implements Message ----------------------------------------------

  ps_invite_enter_team_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_invite_enter_team_ntf& from);
  void MergeFrom(const ps_invite_enter_team_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_invite_enter_team_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 dest_role_id = 2;
  inline bool has_dest_role_id() const;
  inline void clear_dest_role_id();
  static const int kDestRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 dest_role_id() const;
  inline void set_dest_role_id(::google::protobuf::uint64 value);

  // optional uint64 team_id = 3;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 3;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // optional string team_name = 4;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 4;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  inline void set_allocated_team_name(::std::string* team_name);

  // optional uint32 team_type = 5;
  inline bool has_team_type() const;
  inline void clear_team_type();
  static const int kTeamTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 team_type() const;
  inline void set_team_type(::google::protobuf::uint32 value);

  // optional uint64 sour_role_id = 6;
  inline bool has_sour_role_id() const;
  inline void clear_sour_role_id();
  static const int kSourRoleIdFieldNumber = 6;
  inline ::google::protobuf::uint64 sour_role_id() const;
  inline void set_sour_role_id(::google::protobuf::uint64 value);

  // optional string sour_role_name = 7;
  inline bool has_sour_role_name() const;
  inline void clear_sour_role_name();
  static const int kSourRoleNameFieldNumber = 7;
  inline const ::std::string& sour_role_name() const;
  inline void set_sour_role_name(const ::std::string& value);
  inline void set_sour_role_name(const char* value);
  inline void set_sour_role_name(const char* value, size_t size);
  inline ::std::string* mutable_sour_role_name();
  inline ::std::string* release_sour_role_name();
  inline void set_allocated_sour_role_name(::std::string* sour_role_name);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_invite_enter_team_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_dest_role_id();
  inline void clear_has_dest_role_id();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_team_type();
  inline void clear_has_team_type();
  inline void set_has_sour_role_id();
  inline void clear_has_sour_role_id();
  inline void set_has_sour_role_name();
  inline void clear_has_sour_role_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 dest_role_id_;
  ::google::protobuf::uint64 team_id_;
  int protoid_;
  ::google::protobuf::uint32 team_type_;
  ::std::string* team_name_;
  ::google::protobuf::uint64 sour_role_id_;
  ::std::string* sour_role_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_invite_enter_team_ntf* default_instance_;
};
// -------------------------------------------------------------------

class ps_get_offical_rank_req : public ::google::protobuf::Message {
 public:
  ps_get_offical_rank_req();
  virtual ~ps_get_offical_rank_req();

  ps_get_offical_rank_req(const ps_get_offical_rank_req& from);

  inline ps_get_offical_rank_req& operator=(const ps_get_offical_rank_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_get_offical_rank_req& default_instance();

  void Swap(ps_get_offical_rank_req* other);

  // implements Message ----------------------------------------------

  ps_get_offical_rank_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_get_offical_rank_req& from);
  void MergeFrom(const ps_get_offical_rank_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.EGrade office_lv = 2;
  inline bool has_office_lv() const;
  inline void clear_office_lv();
  static const int kOfficeLvFieldNumber = 2;
  inline ::SProtoSpace::EGrade office_lv() const;
  inline void set_office_lv(::SProtoSpace::EGrade value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 start = 4;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 4;
  inline ::google::protobuf::uint32 start() const;
  inline void set_start(::google::protobuf::uint32 value);

  // optional uint32 end = 5;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 5;
  inline ::google::protobuf::uint32 end() const;
  inline void set_end(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_get_offical_rank_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_office_lv();
  inline void clear_has_office_lv();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  int office_lv_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint32 start_;
  ::google::protobuf::uint32 end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_get_offical_rank_req* default_instance_;
};
// -------------------------------------------------------------------

class ps_get_offical_rank_ack : public ::google::protobuf::Message {
 public:
  ps_get_offical_rank_ack();
  virtual ~ps_get_offical_rank_ack();

  ps_get_offical_rank_ack(const ps_get_offical_rank_ack& from);

  inline ps_get_offical_rank_ack& operator=(const ps_get_offical_rank_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_get_offical_rank_ack& default_instance();

  void Swap(ps_get_offical_rank_ack* other);

  // implements Message ----------------------------------------------

  ps_get_offical_rank_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_get_offical_rank_ack& from);
  void MergeFrom(const ps_get_offical_rank_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.offical_item_data rank_items = 4;
  inline int rank_items_size() const;
  inline void clear_rank_items();
  static const int kRankItemsFieldNumber = 4;
  inline const ::SProtoSpace::offical_item_data& rank_items(int index) const;
  inline ::SProtoSpace::offical_item_data* mutable_rank_items(int index);
  inline ::SProtoSpace::offical_item_data* add_rank_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >&
      rank_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >*
      mutable_rank_items();

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_get_offical_rank_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data > rank_items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_get_offical_rank_ack* default_instance_;
};
// -------------------------------------------------------------------

class ps_global_offical_rank_req : public ::google::protobuf::Message {
 public:
  ps_global_offical_rank_req();
  virtual ~ps_global_offical_rank_req();

  ps_global_offical_rank_req(const ps_global_offical_rank_req& from);

  inline ps_global_offical_rank_req& operator=(const ps_global_offical_rank_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_global_offical_rank_req& default_instance();

  void Swap(ps_global_offical_rank_req* other);

  // implements Message ----------------------------------------------

  ps_global_offical_rank_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_global_offical_rank_req& from);
  void MergeFrom(const ps_global_offical_rank_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_global_offical_rank_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint32 start = 2;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 2;
  inline ::google::protobuf::uint32 start() const;
  inline void set_start(::google::protobuf::uint32 value);

  // optional uint32 end = 3;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 3;
  inline ::google::protobuf::uint32 end() const;
  inline void set_end(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_global_offical_rank_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 start_;
  ::google::protobuf::uint32 end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_global_offical_rank_req* default_instance_;
};
// -------------------------------------------------------------------

class ps_global_offical_rank_ack : public ::google::protobuf::Message {
 public:
  ps_global_offical_rank_ack();
  virtual ~ps_global_offical_rank_ack();

  ps_global_offical_rank_ack(const ps_global_offical_rank_ack& from);

  inline ps_global_offical_rank_ack& operator=(const ps_global_offical_rank_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_global_offical_rank_ack& default_instance();

  void Swap(ps_global_offical_rank_ack* other);

  // implements Message ----------------------------------------------

  ps_global_offical_rank_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_global_offical_rank_ack& from);
  void MergeFrom(const ps_global_offical_rank_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_global_offical_rank_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.offical_member_data members = 3;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 3;
  inline const ::SProtoSpace::offical_member_data& members(int index) const;
  inline ::SProtoSpace::offical_member_data* mutable_members(int index);
  inline ::SProtoSpace::offical_member_data* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data >*
      mutable_members();

  // optional .SProtoSpace.offical_member_data my_data = 4;
  inline bool has_my_data() const;
  inline void clear_my_data();
  static const int kMyDataFieldNumber = 4;
  inline const ::SProtoSpace::offical_member_data& my_data() const;
  inline ::SProtoSpace::offical_member_data* mutable_my_data();
  inline ::SProtoSpace::offical_member_data* release_my_data();
  inline void set_allocated_my_data(::SProtoSpace::offical_member_data* my_data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_global_offical_rank_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_my_data();
  inline void clear_has_my_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data > members_;
  ::SProtoSpace::offical_member_data* my_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_global_offical_rank_ack* default_instance_;
};
// -------------------------------------------------------------------

class ps_get_offical_rank_info_req : public ::google::protobuf::Message {
 public:
  ps_get_offical_rank_info_req();
  virtual ~ps_get_offical_rank_info_req();

  ps_get_offical_rank_info_req(const ps_get_offical_rank_info_req& from);

  inline ps_get_offical_rank_info_req& operator=(const ps_get_offical_rank_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_get_offical_rank_info_req& default_instance();

  void Swap(ps_get_offical_rank_info_req* other);

  // implements Message ----------------------------------------------

  ps_get_offical_rank_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_get_offical_rank_info_req& from);
  void MergeFrom(const ps_get_offical_rank_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_info_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.EGrade office_lv = 2;
  inline bool has_office_lv() const;
  inline void clear_office_lv();
  static const int kOfficeLvFieldNumber = 2;
  inline ::SProtoSpace::EGrade office_lv() const;
  inline void set_office_lv(::SProtoSpace::EGrade value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional int32 start = 4;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 4;
  inline ::google::protobuf::int32 start() const;
  inline void set_start(::google::protobuf::int32 value);

  // optional int32 len = 5;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 5;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);

  // optional bool show = 6;
  inline bool has_show() const;
  inline void clear_show();
  static const int kShowFieldNumber = 6;
  inline bool show() const;
  inline void set_show(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_get_offical_rank_info_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_office_lv();
  inline void clear_has_office_lv();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_len();
  inline void clear_has_len();
  inline void set_has_show();
  inline void clear_has_show();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  int office_lv_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int32 len_;
  bool show_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_get_offical_rank_info_req* default_instance_;
};
// -------------------------------------------------------------------

class ps_get_offical_rank_info_ack : public ::google::protobuf::Message {
 public:
  ps_get_offical_rank_info_ack();
  virtual ~ps_get_offical_rank_info_ack();

  ps_get_offical_rank_info_ack(const ps_get_offical_rank_info_ack& from);

  inline ps_get_offical_rank_info_ack& operator=(const ps_get_offical_rank_info_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_get_offical_rank_info_ack& default_instance();

  void Swap(ps_get_offical_rank_info_ack* other);

  // implements Message ----------------------------------------------

  ps_get_offical_rank_info_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_get_offical_rank_info_ack& from);
  void MergeFrom(const ps_get_offical_rank_info_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_info_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional int32 offical_challenge_num = 4;
  inline bool has_offical_challenge_num() const;
  inline void clear_offical_challenge_num();
  static const int kOfficalChallengeNumFieldNumber = 4;
  inline ::google::protobuf::int32 offical_challenge_num() const;
  inline void set_offical_challenge_num(::google::protobuf::int32 value);

  // optional int32 offical_challenge_max = 5;
  inline bool has_offical_challenge_max() const;
  inline void clear_offical_challenge_max();
  static const int kOfficalChallengeMaxFieldNumber = 5;
  inline ::google::protobuf::int32 offical_challenge_max() const;
  inline void set_offical_challenge_max(::google::protobuf::int32 value);

  // optional .SProtoSpace.offical_item_data my_item = 6;
  inline bool has_my_item() const;
  inline void clear_my_item();
  static const int kMyItemFieldNumber = 6;
  inline const ::SProtoSpace::offical_item_data& my_item() const;
  inline ::SProtoSpace::offical_item_data* mutable_my_item();
  inline ::SProtoSpace::offical_item_data* release_my_item();
  inline void set_allocated_my_item(::SProtoSpace::offical_item_data* my_item);

  // repeated .SProtoSpace.offical_item_data rank_items = 7;
  inline int rank_items_size() const;
  inline void clear_rank_items();
  static const int kRankItemsFieldNumber = 7;
  inline const ::SProtoSpace::offical_item_data& rank_items(int index) const;
  inline ::SProtoSpace::offical_item_data* mutable_rank_items(int index);
  inline ::SProtoSpace::offical_item_data* add_rank_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >&
      rank_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >*
      mutable_rank_items();

  // repeated .SProtoSpace.role_show_role_equipped equips = 8;
  inline int equips_size() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 8;
  inline const ::SProtoSpace::role_show_role_equipped& equips(int index) const;
  inline ::SProtoSpace::role_show_role_equipped* mutable_equips(int index);
  inline ::SProtoSpace::role_show_role_equipped* add_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_show_role_equipped >&
      equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_show_role_equipped >*
      mutable_equips();

  // optional int32 count = 9;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 9;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_get_offical_rank_info_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_offical_challenge_num();
  inline void clear_has_offical_challenge_num();
  inline void set_has_offical_challenge_max();
  inline void clear_has_offical_challenge_max();
  inline void set_has_my_item();
  inline void clear_has_my_item();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::int32 offical_challenge_num_;
  ::google::protobuf::int32 offical_challenge_max_;
  ::SProtoSpace::offical_item_data* my_item_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data > rank_items_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_show_role_equipped > equips_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_get_offical_rank_info_ack* default_instance_;
};
// -------------------------------------------------------------------

class ps_add_robot_to_offical_arena_req : public ::google::protobuf::Message {
 public:
  ps_add_robot_to_offical_arena_req();
  virtual ~ps_add_robot_to_offical_arena_req();

  ps_add_robot_to_offical_arena_req(const ps_add_robot_to_offical_arena_req& from);

  inline ps_add_robot_to_offical_arena_req& operator=(const ps_add_robot_to_offical_arena_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_add_robot_to_offical_arena_req& default_instance();

  void Swap(ps_add_robot_to_offical_arena_req* other);

  // implements Message ----------------------------------------------

  ps_add_robot_to_offical_arena_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_add_robot_to_offical_arena_req& from);
  void MergeFrom(const ps_add_robot_to_offical_arena_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_add_robot_to_offical_arena_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.arena_item_data item_data = 2;
  inline bool has_item_data() const;
  inline void clear_item_data();
  static const int kItemDataFieldNumber = 2;
  inline const ::SProtoSpace::arena_item_data& item_data() const;
  inline ::SProtoSpace::arena_item_data* mutable_item_data();
  inline ::SProtoSpace::arena_item_data* release_item_data();
  inline void set_allocated_item_data(::SProtoSpace::arena_item_data* item_data);

  // optional .SProtoSpace.EGrade office_lv = 3;
  inline bool has_office_lv() const;
  inline void clear_office_lv();
  static const int kOfficeLvFieldNumber = 3;
  inline ::SProtoSpace::EGrade office_lv() const;
  inline void set_office_lv(::SProtoSpace::EGrade value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_add_robot_to_offical_arena_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_item_data();
  inline void clear_has_item_data();
  inline void set_has_office_lv();
  inline void clear_has_office_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::arena_item_data* item_data_;
  int proto_id_;
  int office_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_add_robot_to_offical_arena_req* default_instance_;
};
// -------------------------------------------------------------------

class ps_add_robot_to_offical_arena_ack : public ::google::protobuf::Message {
 public:
  ps_add_robot_to_offical_arena_ack();
  virtual ~ps_add_robot_to_offical_arena_ack();

  ps_add_robot_to_offical_arena_ack(const ps_add_robot_to_offical_arena_ack& from);

  inline ps_add_robot_to_offical_arena_ack& operator=(const ps_add_robot_to_offical_arena_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_add_robot_to_offical_arena_ack& default_instance();

  void Swap(ps_add_robot_to_offical_arena_ack* other);

  // implements Message ----------------------------------------------

  ps_add_robot_to_offical_arena_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_add_robot_to_offical_arena_ack& from);
  void MergeFrom(const ps_add_robot_to_offical_arena_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_add_robot_to_offical_arena_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_add_robot_to_offical_arena_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int proto_id_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_add_robot_to_offical_arena_ack* default_instance_;
};
// -------------------------------------------------------------------

class ps_challenge_offical_rank_req : public ::google::protobuf::Message {
 public:
  ps_challenge_offical_rank_req();
  virtual ~ps_challenge_offical_rank_req();

  ps_challenge_offical_rank_req(const ps_challenge_offical_rank_req& from);

  inline ps_challenge_offical_rank_req& operator=(const ps_challenge_offical_rank_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_challenge_offical_rank_req& default_instance();

  void Swap(ps_challenge_offical_rank_req* other);

  // implements Message ----------------------------------------------

  ps_challenge_offical_rank_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_challenge_offical_rank_req& from);
  void MergeFrom(const ps_challenge_offical_rank_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_challenge_offical_rank_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 sour_role_id = 2;
  inline bool has_sour_role_id() const;
  inline void clear_sour_role_id();
  static const int kSourRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 sour_role_id() const;
  inline void set_sour_role_id(::google::protobuf::uint64 value);

  // optional uint64 dest_role_id = 3;
  inline bool has_dest_role_id() const;
  inline void clear_dest_role_id();
  static const int kDestRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 dest_role_id() const;
  inline void set_dest_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.EGrade office_lv = 4;
  inline bool has_office_lv() const;
  inline void clear_office_lv();
  static const int kOfficeLvFieldNumber = 4;
  inline ::SProtoSpace::EGrade office_lv() const;
  inline void set_office_lv(::SProtoSpace::EGrade value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_challenge_offical_rank_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_sour_role_id();
  inline void clear_has_sour_role_id();
  inline void set_has_dest_role_id();
  inline void clear_has_dest_role_id();
  inline void set_has_office_lv();
  inline void clear_has_office_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 sour_role_id_;
  int proto_id_;
  int office_lv_;
  ::google::protobuf::uint64 dest_role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_challenge_offical_rank_req* default_instance_;
};
// -------------------------------------------------------------------

class ps_challenge_offical_rank_ack : public ::google::protobuf::Message {
 public:
  ps_challenge_offical_rank_ack();
  virtual ~ps_challenge_offical_rank_ack();

  ps_challenge_offical_rank_ack(const ps_challenge_offical_rank_ack& from);

  inline ps_challenge_offical_rank_ack& operator=(const ps_challenge_offical_rank_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_challenge_offical_rank_ack& default_instance();

  void Swap(ps_challenge_offical_rank_ack* other);

  // implements Message ----------------------------------------------

  ps_challenge_offical_rank_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_challenge_offical_rank_ack& from);
  void MergeFrom(const ps_challenge_offical_rank_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_challenge_offical_rank_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.EGrade office_lv = 2;
  inline bool has_office_lv() const;
  inline void clear_office_lv();
  static const int kOfficeLvFieldNumber = 2;
  inline ::SProtoSpace::EGrade office_lv() const;
  inline void set_office_lv(::SProtoSpace::EGrade value);

  // optional uint64 sour_role_id = 3;
  inline bool has_sour_role_id() const;
  inline void clear_sour_role_id();
  static const int kSourRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 sour_role_id() const;
  inline void set_sour_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.arena_item_data sour_data = 4;
  inline bool has_sour_data() const;
  inline void clear_sour_data();
  static const int kSourDataFieldNumber = 4;
  inline const ::SProtoSpace::arena_item_data& sour_data() const;
  inline ::SProtoSpace::arena_item_data* mutable_sour_data();
  inline ::SProtoSpace::arena_item_data* release_sour_data();
  inline void set_allocated_sour_data(::SProtoSpace::arena_item_data* sour_data);

  // optional uint64 dest_role_id = 5;
  inline bool has_dest_role_id() const;
  inline void clear_dest_role_id();
  static const int kDestRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint64 dest_role_id() const;
  inline void set_dest_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.arena_item_data dest_data = 6;
  inline bool has_dest_data() const;
  inline void clear_dest_data();
  static const int kDestDataFieldNumber = 6;
  inline const ::SProtoSpace::arena_item_data& dest_data() const;
  inline ::SProtoSpace::arena_item_data* mutable_dest_data();
  inline ::SProtoSpace::arena_item_data* release_dest_data();
  inline void set_allocated_dest_data(::SProtoSpace::arena_item_data* dest_data);

  // optional uint32 ret = 7;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 7;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_challenge_offical_rank_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_office_lv();
  inline void clear_has_office_lv();
  inline void set_has_sour_role_id();
  inline void clear_has_sour_role_id();
  inline void set_has_sour_data();
  inline void clear_has_sour_data();
  inline void set_has_dest_role_id();
  inline void clear_has_dest_role_id();
  inline void set_has_dest_data();
  inline void clear_has_dest_data();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  int office_lv_;
  ::google::protobuf::uint64 sour_role_id_;
  ::SProtoSpace::arena_item_data* sour_data_;
  ::google::protobuf::uint64 dest_role_id_;
  ::SProtoSpace::arena_item_data* dest_data_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_challenge_offical_rank_ack* default_instance_;
};
// -------------------------------------------------------------------

class ps_update_challenge_result_req : public ::google::protobuf::Message {
 public:
  ps_update_challenge_result_req();
  virtual ~ps_update_challenge_result_req();

  ps_update_challenge_result_req(const ps_update_challenge_result_req& from);

  inline ps_update_challenge_result_req& operator=(const ps_update_challenge_result_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_update_challenge_result_req& default_instance();

  void Swap(ps_update_challenge_result_req* other);

  // implements Message ----------------------------------------------

  ps_update_challenge_result_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_update_challenge_result_req& from);
  void MergeFrom(const ps_update_challenge_result_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_update_challenge_result_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.EGrade office_lv = 2;
  inline bool has_office_lv() const;
  inline void clear_office_lv();
  static const int kOfficeLvFieldNumber = 2;
  inline ::SProtoSpace::EGrade office_lv() const;
  inline void set_office_lv(::SProtoSpace::EGrade value);

  // optional uint64 sour_role_id = 3;
  inline bool has_sour_role_id() const;
  inline void clear_sour_role_id();
  static const int kSourRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 sour_role_id() const;
  inline void set_sour_role_id(::google::protobuf::uint64 value);

  // optional uint64 dest_role_id = 4;
  inline bool has_dest_role_id() const;
  inline void clear_dest_role_id();
  static const int kDestRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 dest_role_id() const;
  inline void set_dest_role_id(::google::protobuf::uint64 value);

  // optional bool win = 5;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 5;
  inline bool win() const;
  inline void set_win(bool value);

  // optional uint64 battle_id = 6;
  inline bool has_battle_id() const;
  inline void clear_battle_id();
  static const int kBattleIdFieldNumber = 6;
  inline ::google::protobuf::uint64 battle_id() const;
  inline void set_battle_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_update_challenge_result_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_office_lv();
  inline void clear_has_office_lv();
  inline void set_has_sour_role_id();
  inline void clear_has_sour_role_id();
  inline void set_has_dest_role_id();
  inline void clear_has_dest_role_id();
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_battle_id();
  inline void clear_has_battle_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  int office_lv_;
  ::google::protobuf::uint64 sour_role_id_;
  ::google::protobuf::uint64 dest_role_id_;
  ::google::protobuf::uint64 battle_id_;
  bool win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_update_challenge_result_req* default_instance_;
};
// -------------------------------------------------------------------

class ps_update_challenge_result_ack : public ::google::protobuf::Message {
 public:
  ps_update_challenge_result_ack();
  virtual ~ps_update_challenge_result_ack();

  ps_update_challenge_result_ack(const ps_update_challenge_result_ack& from);

  inline ps_update_challenge_result_ack& operator=(const ps_update_challenge_result_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_update_challenge_result_ack& default_instance();

  void Swap(ps_update_challenge_result_ack* other);

  // implements Message ----------------------------------------------

  ps_update_challenge_result_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_update_challenge_result_ack& from);
  void MergeFrom(const ps_update_challenge_result_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_update_challenge_result_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional .SProtoSpace.EGrade office_lv = 3;
  inline bool has_office_lv() const;
  inline void clear_office_lv();
  static const int kOfficeLvFieldNumber = 3;
  inline ::SProtoSpace::EGrade office_lv() const;
  inline void set_office_lv(::SProtoSpace::EGrade value);

  // optional uint64 dest_role_id = 4;
  inline bool has_dest_role_id() const;
  inline void clear_dest_role_id();
  static const int kDestRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 dest_role_id() const;
  inline void set_dest_role_id(::google::protobuf::uint64 value);

  // optional int32 dest_older_rankingid = 5;
  inline bool has_dest_older_rankingid() const;
  inline void clear_dest_older_rankingid();
  static const int kDestOlderRankingidFieldNumber = 5;
  inline ::google::protobuf::int32 dest_older_rankingid() const;
  inline void set_dest_older_rankingid(::google::protobuf::int32 value);

  // optional int32 dest_new_rankingid = 6;
  inline bool has_dest_new_rankingid() const;
  inline void clear_dest_new_rankingid();
  static const int kDestNewRankingidFieldNumber = 6;
  inline ::google::protobuf::int32 dest_new_rankingid() const;
  inline void set_dest_new_rankingid(::google::protobuf::int32 value);

  // optional uint64 sour_role_id = 7;
  inline bool has_sour_role_id() const;
  inline void clear_sour_role_id();
  static const int kSourRoleIdFieldNumber = 7;
  inline ::google::protobuf::uint64 sour_role_id() const;
  inline void set_sour_role_id(::google::protobuf::uint64 value);

  // optional int32 sour_older_rankingid = 8;
  inline bool has_sour_older_rankingid() const;
  inline void clear_sour_older_rankingid();
  static const int kSourOlderRankingidFieldNumber = 8;
  inline ::google::protobuf::int32 sour_older_rankingid() const;
  inline void set_sour_older_rankingid(::google::protobuf::int32 value);

  // optional int32 sour_new_rankingid = 9;
  inline bool has_sour_new_rankingid() const;
  inline void clear_sour_new_rankingid();
  static const int kSourNewRankingidFieldNumber = 9;
  inline ::google::protobuf::int32 sour_new_rankingid() const;
  inline void set_sour_new_rankingid(::google::protobuf::int32 value);

  // optional uint64 battle_id = 10;
  inline bool has_battle_id() const;
  inline void clear_battle_id();
  static const int kBattleIdFieldNumber = 10;
  inline ::google::protobuf::uint64 battle_id() const;
  inline void set_battle_id(::google::protobuf::uint64 value);

  // optional bool win = 11;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 11;
  inline bool win() const;
  inline void set_win(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_update_challenge_result_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_office_lv();
  inline void clear_has_office_lv();
  inline void set_has_dest_role_id();
  inline void clear_has_dest_role_id();
  inline void set_has_dest_older_rankingid();
  inline void clear_has_dest_older_rankingid();
  inline void set_has_dest_new_rankingid();
  inline void clear_has_dest_new_rankingid();
  inline void set_has_sour_role_id();
  inline void clear_has_sour_role_id();
  inline void set_has_sour_older_rankingid();
  inline void clear_has_sour_older_rankingid();
  inline void set_has_sour_new_rankingid();
  inline void clear_has_sour_new_rankingid();
  inline void set_has_battle_id();
  inline void clear_has_battle_id();
  inline void set_has_win();
  inline void clear_has_win();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint64 dest_role_id_;
  int office_lv_;
  ::google::protobuf::int32 dest_older_rankingid_;
  ::google::protobuf::uint64 sour_role_id_;
  ::google::protobuf::int32 dest_new_rankingid_;
  ::google::protobuf::int32 sour_older_rankingid_;
  ::google::protobuf::uint64 battle_id_;
  ::google::protobuf::int32 sour_new_rankingid_;
  bool win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_update_challenge_result_ack* default_instance_;
};
// -------------------------------------------------------------------

class offical_examine_battle_req : public ::google::protobuf::Message {
 public:
  offical_examine_battle_req();
  virtual ~offical_examine_battle_req();

  offical_examine_battle_req(const offical_examine_battle_req& from);

  inline offical_examine_battle_req& operator=(const offical_examine_battle_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_examine_battle_req& default_instance();

  void Swap(offical_examine_battle_req* other);

  // implements Message ----------------------------------------------

  offical_examine_battle_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offical_examine_battle_req& from);
  void MergeFrom(const offical_examine_battle_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_examine_battle_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.EGrade office_lv = 2;
  inline bool has_office_lv() const;
  inline void clear_office_lv();
  static const int kOfficeLvFieldNumber = 2;
  inline ::SProtoSpace::EGrade office_lv() const;
  inline void set_office_lv(::SProtoSpace::EGrade value);

  // optional .SProtoSpace.battle_role_info sour_data = 3;
  inline bool has_sour_data() const;
  inline void clear_sour_data();
  static const int kSourDataFieldNumber = 3;
  inline const ::SProtoSpace::battle_role_info& sour_data() const;
  inline ::SProtoSpace::battle_role_info* mutable_sour_data();
  inline ::SProtoSpace::battle_role_info* release_sour_data();
  inline void set_allocated_sour_data(::SProtoSpace::battle_role_info* sour_data);

  // optional .SProtoSpace.battle_role_info dest_data = 4;
  inline bool has_dest_data() const;
  inline void clear_dest_data();
  static const int kDestDataFieldNumber = 4;
  inline const ::SProtoSpace::battle_role_info& dest_data() const;
  inline ::SProtoSpace::battle_role_info* mutable_dest_data();
  inline ::SProtoSpace::battle_role_info* release_dest_data();
  inline void set_allocated_dest_data(::SProtoSpace::battle_role_info* dest_data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.offical_examine_battle_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_office_lv();
  inline void clear_has_office_lv();
  inline void set_has_sour_data();
  inline void clear_has_sour_data();
  inline void set_has_dest_data();
  inline void clear_has_dest_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  int office_lv_;
  ::SProtoSpace::battle_role_info* sour_data_;
  ::SProtoSpace::battle_role_info* dest_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static offical_examine_battle_req* default_instance_;
};
// -------------------------------------------------------------------

class offical_examine_battle_ack : public ::google::protobuf::Message {
 public:
  offical_examine_battle_ack();
  virtual ~offical_examine_battle_ack();

  offical_examine_battle_ack(const offical_examine_battle_ack& from);

  inline offical_examine_battle_ack& operator=(const offical_examine_battle_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_examine_battle_ack& default_instance();

  void Swap(offical_examine_battle_ack* other);

  // implements Message ----------------------------------------------

  offical_examine_battle_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offical_examine_battle_ack& from);
  void MergeFrom(const offical_examine_battle_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_examine_battle_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.EGrade office_lv = 2;
  inline bool has_office_lv() const;
  inline void clear_office_lv();
  static const int kOfficeLvFieldNumber = 2;
  inline ::SProtoSpace::EGrade office_lv() const;
  inline void set_office_lv(::SProtoSpace::EGrade value);

  // optional uint64 sour_id = 3;
  inline bool has_sour_id() const;
  inline void clear_sour_id();
  static const int kSourIdFieldNumber = 3;
  inline ::google::protobuf::uint64 sour_id() const;
  inline void set_sour_id(::google::protobuf::uint64 value);

  // optional uint64 dest_id = 4;
  inline bool has_dest_id() const;
  inline void clear_dest_id();
  static const int kDestIdFieldNumber = 4;
  inline ::google::protobuf::uint64 dest_id() const;
  inline void set_dest_id(::google::protobuf::uint64 value);

  // optional int32 sour_score = 5;
  inline bool has_sour_score() const;
  inline void clear_sour_score();
  static const int kSourScoreFieldNumber = 5;
  inline ::google::protobuf::int32 sour_score() const;
  inline void set_sour_score(::google::protobuf::int32 value);

  // optional int32 dest_score = 6;
  inline bool has_dest_score() const;
  inline void clear_dest_score();
  static const int kDestScoreFieldNumber = 6;
  inline ::google::protobuf::int32 dest_score() const;
  inline void set_dest_score(::google::protobuf::int32 value);

  // optional bool win = 7;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 7;
  inline bool win() const;
  inline void set_win(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.offical_examine_battle_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_office_lv();
  inline void clear_has_office_lv();
  inline void set_has_sour_id();
  inline void clear_has_sour_id();
  inline void set_has_dest_id();
  inline void clear_has_dest_id();
  inline void set_has_sour_score();
  inline void clear_has_sour_score();
  inline void set_has_dest_score();
  inline void clear_has_dest_score();
  inline void set_has_win();
  inline void clear_has_win();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  int office_lv_;
  ::google::protobuf::uint64 sour_id_;
  ::google::protobuf::uint64 dest_id_;
  ::google::protobuf::int32 sour_score_;
  ::google::protobuf::int32 dest_score_;
  bool win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static offical_examine_battle_ack* default_instance_;
};
// -------------------------------------------------------------------

class ps_offical_apply_battle_result_req : public ::google::protobuf::Message {
 public:
  ps_offical_apply_battle_result_req();
  virtual ~ps_offical_apply_battle_result_req();

  ps_offical_apply_battle_result_req(const ps_offical_apply_battle_result_req& from);

  inline ps_offical_apply_battle_result_req& operator=(const ps_offical_apply_battle_result_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_offical_apply_battle_result_req& default_instance();

  void Swap(ps_offical_apply_battle_result_req* other);

  // implements Message ----------------------------------------------

  ps_offical_apply_battle_result_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_offical_apply_battle_result_req& from);
  void MergeFrom(const ps_offical_apply_battle_result_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_offical_apply_battle_result_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.EGrade office_lv = 2;
  inline bool has_office_lv() const;
  inline void clear_office_lv();
  static const int kOfficeLvFieldNumber = 2;
  inline ::SProtoSpace::EGrade office_lv() const;
  inline void set_office_lv(::SProtoSpace::EGrade value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_offical_apply_battle_result_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_office_lv();
  inline void clear_has_office_lv();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  int office_lv_;
  ::google::protobuf::uint64 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_offical_apply_battle_result_req* default_instance_;
};
// -------------------------------------------------------------------

class ps_offical_apply_battle_result_ack : public ::google::protobuf::Message {
 public:
  ps_offical_apply_battle_result_ack();
  virtual ~ps_offical_apply_battle_result_ack();

  ps_offical_apply_battle_result_ack(const ps_offical_apply_battle_result_ack& from);

  inline ps_offical_apply_battle_result_ack& operator=(const ps_offical_apply_battle_result_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_offical_apply_battle_result_ack& default_instance();

  void Swap(ps_offical_apply_battle_result_ack* other);

  // implements Message ----------------------------------------------

  ps_offical_apply_battle_result_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_offical_apply_battle_result_ack& from);
  void MergeFrom(const ps_offical_apply_battle_result_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_offical_apply_battle_result_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.EGrade office_lv = 2;
  inline bool has_office_lv() const;
  inline void clear_office_lv();
  static const int kOfficeLvFieldNumber = 2;
  inline ::SProtoSpace::EGrade office_lv() const;
  inline void set_office_lv(::SProtoSpace::EGrade value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional int32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional int32 my_place_id = 5;
  inline bool has_my_place_id() const;
  inline void clear_my_place_id();
  static const int kMyPlaceIdFieldNumber = 5;
  inline ::google::protobuf::int32 my_place_id() const;
  inline void set_my_place_id(::google::protobuf::int32 value);

  // repeated .SProtoSpace.offical_apply_battle_data data = 6;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::SProtoSpace::offical_apply_battle_data& data(int index) const;
  inline ::SProtoSpace::offical_apply_battle_data* mutable_data(int index);
  inline ::SProtoSpace::offical_apply_battle_data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_battle_data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_battle_data >*
      mutable_data();

  // repeated .SProtoSpace.offical_apply_my_battle_data mydata = 7;
  inline int mydata_size() const;
  inline void clear_mydata();
  static const int kMydataFieldNumber = 7;
  inline const ::SProtoSpace::offical_apply_my_battle_data& mydata(int index) const;
  inline ::SProtoSpace::offical_apply_my_battle_data* mutable_mydata(int index);
  inline ::SProtoSpace::offical_apply_my_battle_data* add_mydata();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_my_battle_data >&
      mydata() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_my_battle_data >*
      mutable_mydata();

  // optional uint32 ret = 8;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 8;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_offical_apply_battle_result_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_office_lv();
  inline void clear_has_office_lv();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_my_place_id();
  inline void clear_has_my_place_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  int office_lv_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 my_place_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_battle_data > data_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_my_battle_data > mydata_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_offical_apply_battle_result_ack* default_instance_;
};
// -------------------------------------------------------------------

class ps_test_offical_battle_result_req : public ::google::protobuf::Message {
 public:
  ps_test_offical_battle_result_req();
  virtual ~ps_test_offical_battle_result_req();

  ps_test_offical_battle_result_req(const ps_test_offical_battle_result_req& from);

  inline ps_test_offical_battle_result_req& operator=(const ps_test_offical_battle_result_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_test_offical_battle_result_req& default_instance();

  void Swap(ps_test_offical_battle_result_req* other);

  // implements Message ----------------------------------------------

  ps_test_offical_battle_result_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_test_offical_battle_result_req& from);
  void MergeFrom(const ps_test_offical_battle_result_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_test_offical_battle_result_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_test_offical_battle_result_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_test_offical_battle_result_req* default_instance_;
};
// -------------------------------------------------------------------

class ps_test_start_offical_battle_req : public ::google::protobuf::Message {
 public:
  ps_test_start_offical_battle_req();
  virtual ~ps_test_start_offical_battle_req();

  ps_test_start_offical_battle_req(const ps_test_start_offical_battle_req& from);

  inline ps_test_start_offical_battle_req& operator=(const ps_test_start_offical_battle_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_test_start_offical_battle_req& default_instance();

  void Swap(ps_test_start_offical_battle_req* other);

  // implements Message ----------------------------------------------

  ps_test_start_offical_battle_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_test_start_offical_battle_req& from);
  void MergeFrom(const ps_test_start_offical_battle_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_test_start_offical_battle_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_test_start_offical_battle_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_test_start_offical_battle_req* default_instance_;
};
// -------------------------------------------------------------------

class ps_test_offical_sign_up_req : public ::google::protobuf::Message {
 public:
  ps_test_offical_sign_up_req();
  virtual ~ps_test_offical_sign_up_req();

  ps_test_offical_sign_up_req(const ps_test_offical_sign_up_req& from);

  inline ps_test_offical_sign_up_req& operator=(const ps_test_offical_sign_up_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ps_test_offical_sign_up_req& default_instance();

  void Swap(ps_test_offical_sign_up_req* other);

  // implements Message ----------------------------------------------

  ps_test_offical_sign_up_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ps_test_offical_sign_up_req& from);
  void MergeFrom(const ps_test_offical_sign_up_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_test_offical_sign_up_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ps_test_offical_sign_up_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static ps_test_offical_sign_up_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_friend_opt_forward_req : public ::google::protobuf::Message {
 public:
  pub_friend_opt_forward_req();
  virtual ~pub_friend_opt_forward_req();

  pub_friend_opt_forward_req(const pub_friend_opt_forward_req& from);

  inline pub_friend_opt_forward_req& operator=(const pub_friend_opt_forward_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_friend_opt_forward_req& default_instance();

  void Swap(pub_friend_opt_forward_req* other);

  // implements Message ----------------------------------------------

  pub_friend_opt_forward_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_friend_opt_forward_req& from);
  void MergeFrom(const pub_friend_opt_forward_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_opt_forward_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.game_friend_opt_ntf onf = 2;
  inline bool has_onf() const;
  inline void clear_onf();
  static const int kOnfFieldNumber = 2;
  inline const ::SProtoSpace::game_friend_opt_ntf& onf() const;
  inline ::SProtoSpace::game_friend_opt_ntf* mutable_onf();
  inline ::SProtoSpace::game_friend_opt_ntf* release_onf();
  inline void set_allocated_onf(::SProtoSpace::game_friend_opt_ntf* onf);

  // optional uint64 apply_id = 3;
  inline bool has_apply_id() const;
  inline void clear_apply_id();
  static const int kApplyIdFieldNumber = 3;
  inline ::google::protobuf::uint64 apply_id() const;
  inline void set_apply_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_friend_opt_forward_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_onf();
  inline void clear_has_onf();
  inline void set_has_apply_id();
  inline void clear_has_apply_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::game_friend_opt_ntf* onf_;
  ::google::protobuf::uint64 apply_id_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_friend_opt_forward_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_friend_opt_forward_ack : public ::google::protobuf::Message {
 public:
  pub_friend_opt_forward_ack();
  virtual ~pub_friend_opt_forward_ack();

  pub_friend_opt_forward_ack(const pub_friend_opt_forward_ack& from);

  inline pub_friend_opt_forward_ack& operator=(const pub_friend_opt_forward_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_friend_opt_forward_ack& default_instance();

  void Swap(pub_friend_opt_forward_ack* other);

  // implements Message ----------------------------------------------

  pub_friend_opt_forward_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_friend_opt_forward_ack& from);
  void MergeFrom(const pub_friend_opt_forward_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_opt_forward_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.game_friend_opt_ntf onf = 2;
  inline bool has_onf() const;
  inline void clear_onf();
  static const int kOnfFieldNumber = 2;
  inline const ::SProtoSpace::game_friend_opt_ntf& onf() const;
  inline ::SProtoSpace::game_friend_opt_ntf* mutable_onf();
  inline ::SProtoSpace::game_friend_opt_ntf* release_onf();
  inline void set_allocated_onf(::SProtoSpace::game_friend_opt_ntf* onf);

  // optional uint64 apply_id = 3;
  inline bool has_apply_id() const;
  inline void clear_apply_id();
  static const int kApplyIdFieldNumber = 3;
  inline ::google::protobuf::uint64 apply_id() const;
  inline void set_apply_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_friend_opt_forward_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_onf();
  inline void clear_has_onf();
  inline void set_has_apply_id();
  inline void clear_has_apply_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::game_friend_opt_ntf* onf_;
  ::google::protobuf::uint64 apply_id_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_friend_opt_forward_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_harem_compete_friends_req : public ::google::protobuf::Message {
 public:
  pub_harem_compete_friends_req();
  virtual ~pub_harem_compete_friends_req();

  pub_harem_compete_friends_req(const pub_harem_compete_friends_req& from);

  inline pub_harem_compete_friends_req& operator=(const pub_harem_compete_friends_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_harem_compete_friends_req& default_instance();

  void Swap(pub_harem_compete_friends_req* other);

  // implements Message ----------------------------------------------

  pub_harem_compete_friends_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_harem_compete_friends_req& from);
  void MergeFrom(const pub_harem_compete_friends_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_friends_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint32 gd_type = 2;
  inline bool has_gd_type() const;
  inline void clear_gd_type();
  static const int kGdTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 gd_type() const;
  inline void set_gd_type(::google::protobuf::uint32 value);

  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint64 uuid = 5;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 5;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 grade = 6;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 6;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_harem_compete_friends_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_gd_type();
  inline void clear_has_gd_type();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 gd_type_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_harem_compete_friends_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_harem_compete_friends_ack : public ::google::protobuf::Message {
 public:
  pub_harem_compete_friends_ack();
  virtual ~pub_harem_compete_friends_ack();

  pub_harem_compete_friends_ack(const pub_harem_compete_friends_ack& from);

  inline pub_harem_compete_friends_ack& operator=(const pub_harem_compete_friends_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_harem_compete_friends_ack& default_instance();

  void Swap(pub_harem_compete_friends_ack* other);

  // implements Message ----------------------------------------------

  pub_harem_compete_friends_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_harem_compete_friends_ack& from);
  void MergeFrom(const pub_harem_compete_friends_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_friends_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // repeated .SProtoSpace.friend_base_info friends = 3;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 3;
  inline const ::SProtoSpace::friend_base_info& friends(int index) const;
  inline ::SProtoSpace::friend_base_info* mutable_friends(int index);
  inline ::SProtoSpace::friend_base_info* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >*
      mutable_friends();

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_harem_compete_friends_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info > friends_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_harem_compete_friends_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_search_role_req : public ::google::protobuf::Message {
 public:
  pub_search_role_req();
  virtual ~pub_search_role_req();

  pub_search_role_req(const pub_search_role_req& from);

  inline pub_search_role_req& operator=(const pub_search_role_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_search_role_req& default_instance();

  void Swap(pub_search_role_req* other);

  // implements Message ----------------------------------------------

  pub_search_role_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_search_role_req& from);
  void MergeFrom(const pub_search_role_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_search_role_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional uint64 uuid = 4;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 4;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_search_role_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 type_;
  ::std::string* content_;
  ::google::protobuf::uint64 uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_search_role_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_search_role_ack : public ::google::protobuf::Message {
 public:
  pub_search_role_ack();
  virtual ~pub_search_role_ack();

  pub_search_role_ack(const pub_search_role_ack& from);

  inline pub_search_role_ack& operator=(const pub_search_role_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_search_role_ack& default_instance();

  void Swap(pub_search_role_ack* other);

  // implements Message ----------------------------------------------

  pub_search_role_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_search_role_ack& from);
  void MergeFrom(const pub_search_role_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_search_role_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional .SProtoSpace.friend_base_info role = 3;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 3;
  inline const ::SProtoSpace::friend_base_info& role() const;
  inline ::SProtoSpace::friend_base_info* mutable_role();
  inline ::SProtoSpace::friend_base_info* release_role();
  inline void set_allocated_role(::SProtoSpace::friend_base_info* role);

  // optional uint32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_search_role_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::SProtoSpace::friend_base_info* role_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_search_role_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_officer_apply_req : public ::google::protobuf::Message {
 public:
  pub_officer_apply_req();
  virtual ~pub_officer_apply_req();

  pub_officer_apply_req(const pub_officer_apply_req& from);

  inline pub_officer_apply_req& operator=(const pub_officer_apply_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_officer_apply_req& default_instance();

  void Swap(pub_officer_apply_req* other);

  // implements Message ----------------------------------------------

  pub_officer_apply_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_officer_apply_req& from);
  void MergeFrom(const pub_officer_apply_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_officer_apply_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 grade = 3;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 3;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional uint32 cur_grade = 4;
  inline bool has_cur_grade() const;
  inline void clear_cur_grade();
  static const int kCurGradeFieldNumber = 4;
  inline ::google::protobuf::uint32 cur_grade() const;
  inline void set_cur_grade(::google::protobuf::uint32 value);

  // optional uint32 max_grade = 5;
  inline bool has_max_grade() const;
  inline void clear_max_grade();
  static const int kMaxGradeFieldNumber = 5;
  inline ::google::protobuf::uint32 max_grade() const;
  inline void set_max_grade(::google::protobuf::uint32 value);

  // optional uint32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 lv = 7;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 7;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional string name = 8;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 8;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 apply_time = 9;
  inline bool has_apply_time() const;
  inline void clear_apply_time();
  static const int kApplyTimeFieldNumber = 9;
  inline ::google::protobuf::uint64 apply_time() const;
  inline void set_apply_time(::google::protobuf::uint64 value);

  // optional .SProtoSpace.battle_role_info battle_data = 10;
  inline bool has_battle_data() const;
  inline void clear_battle_data();
  static const int kBattleDataFieldNumber = 10;
  inline const ::SProtoSpace::battle_role_info& battle_data() const;
  inline ::SProtoSpace::battle_role_info* mutable_battle_data();
  inline ::SProtoSpace::battle_role_info* release_battle_data();
  inline void set_allocated_battle_data(::SProtoSpace::battle_role_info* battle_data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_officer_apply_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_cur_grade();
  inline void clear_has_cur_grade();
  inline void set_has_max_grade();
  inline void clear_has_max_grade();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_apply_time();
  inline void clear_has_apply_time();
  inline void set_has_battle_data();
  inline void clear_has_battle_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  int proto_id_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::uint32 cur_grade_;
  ::google::protobuf::uint32 max_grade_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 lv_;
  ::std::string* name_;
  ::google::protobuf::uint64 apply_time_;
  ::SProtoSpace::battle_role_info* battle_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_officer_apply_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_officer_apply_ack : public ::google::protobuf::Message {
 public:
  pub_officer_apply_ack();
  virtual ~pub_officer_apply_ack();

  pub_officer_apply_ack(const pub_officer_apply_ack& from);

  inline pub_officer_apply_ack& operator=(const pub_officer_apply_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_officer_apply_ack& default_instance();

  void Swap(pub_officer_apply_ack* other);

  // implements Message ----------------------------------------------

  pub_officer_apply_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_officer_apply_ack& from);
  void MergeFrom(const pub_officer_apply_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_officer_apply_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 grade = 3;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 3;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional uint32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_officer_apply_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  int proto_id_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_officer_apply_ack* default_instance_;
};
// -------------------------------------------------------------------

class update_heros_formation_ntf : public ::google::protobuf::Message {
 public:
  update_heros_formation_ntf();
  virtual ~update_heros_formation_ntf();

  update_heros_formation_ntf(const update_heros_formation_ntf& from);

  inline update_heros_formation_ntf& operator=(const update_heros_formation_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_heros_formation_ntf& default_instance();

  void Swap(update_heros_formation_ntf* other);

  // implements Message ----------------------------------------------

  update_heros_formation_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_heros_formation_ntf& from);
  void MergeFrom(const update_heros_formation_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = update_heros_formation_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional int32 apply_grade = 3;
  inline bool has_apply_grade() const;
  inline void clear_apply_grade();
  static const int kApplyGradeFieldNumber = 3;
  inline ::google::protobuf::int32 apply_grade() const;
  inline void set_apply_grade(::google::protobuf::int32 value);

  // repeated .SProtoSpace.battle_hero_info hero_infos = 4;
  inline int hero_infos_size() const;
  inline void clear_hero_infos();
  static const int kHeroInfosFieldNumber = 4;
  inline const ::SProtoSpace::battle_hero_info& hero_infos(int index) const;
  inline ::SProtoSpace::battle_hero_info* mutable_hero_infos(int index);
  inline ::SProtoSpace::battle_hero_info* add_hero_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info >&
      hero_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info >*
      mutable_hero_infos();

  // @@protoc_insertion_point(class_scope:SProtoSpace.update_heros_formation_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_apply_grade();
  inline void clear_has_apply_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int proto_id_;
  ::google::protobuf::int32 apply_grade_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info > hero_infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static update_heros_formation_ntf* default_instance_;
};
// -------------------------------------------------------------------

class pub_officer_result_ntf : public ::google::protobuf::Message {
 public:
  pub_officer_result_ntf();
  virtual ~pub_officer_result_ntf();

  pub_officer_result_ntf(const pub_officer_result_ntf& from);

  inline pub_officer_result_ntf& operator=(const pub_officer_result_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_officer_result_ntf& default_instance();

  void Swap(pub_officer_result_ntf* other);

  // implements Message ----------------------------------------------

  pub_officer_result_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_officer_result_ntf& from);
  void MergeFrom(const pub_officer_result_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_officer_result_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // repeated .SProtoSpace.officer_result_data results = 2;
  inline int results_size() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 2;
  inline const ::SProtoSpace::officer_result_data& results(int index) const;
  inline ::SProtoSpace::officer_result_data* mutable_results(int index);
  inline ::SProtoSpace::officer_result_data* add_results();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::officer_result_data >&
      results() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::officer_result_data >*
      mutable_results();

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_officer_result_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::officer_result_data > results_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_officer_result_ntf* default_instance_;
};
// -------------------------------------------------------------------

class pub_offical_reduce_ntf : public ::google::protobuf::Message {
 public:
  pub_offical_reduce_ntf();
  virtual ~pub_offical_reduce_ntf();

  pub_offical_reduce_ntf(const pub_offical_reduce_ntf& from);

  inline pub_offical_reduce_ntf& operator=(const pub_offical_reduce_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_offical_reduce_ntf& default_instance();

  void Swap(pub_offical_reduce_ntf* other);

  // implements Message ----------------------------------------------

  pub_offical_reduce_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_offical_reduce_ntf& from);
  void MergeFrom(const pub_offical_reduce_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_offical_reduce_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // repeated .SProtoSpace.officer_reduce_data data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::SProtoSpace::officer_reduce_data& data(int index) const;
  inline ::SProtoSpace::officer_reduce_data* mutable_data(int index);
  inline ::SProtoSpace::officer_reduce_data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::officer_reduce_data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::officer_reduce_data >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_offical_reduce_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::officer_reduce_data > data_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_offical_reduce_ntf* default_instance_;
};
// -------------------------------------------------------------------

class pub_load_offical_data_req : public ::google::protobuf::Message {
 public:
  pub_load_offical_data_req();
  virtual ~pub_load_offical_data_req();

  pub_load_offical_data_req(const pub_load_offical_data_req& from);

  inline pub_load_offical_data_req& operator=(const pub_load_offical_data_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_load_offical_data_req& default_instance();

  void Swap(pub_load_offical_data_req* other);

  // implements Message ----------------------------------------------

  pub_load_offical_data_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_load_offical_data_req& from);
  void MergeFrom(const pub_load_offical_data_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_load_offical_data_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_load_offical_data_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_load_offical_data_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_load_offical_data_ack : public ::google::protobuf::Message {
 public:
  pub_load_offical_data_ack();
  virtual ~pub_load_offical_data_ack();

  pub_load_offical_data_ack(const pub_load_offical_data_ack& from);

  inline pub_load_offical_data_ack& operator=(const pub_load_offical_data_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_load_offical_data_ack& default_instance();

  void Swap(pub_load_offical_data_ack* other);

  // implements Message ----------------------------------------------

  pub_load_offical_data_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_load_offical_data_ack& from);
  void MergeFrom(const pub_load_offical_data_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_load_offical_data_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 cur_grade = 3;
  inline bool has_cur_grade() const;
  inline void clear_cur_grade();
  static const int kCurGradeFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_grade() const;
  inline void set_cur_grade(::google::protobuf::uint32 value);

  // optional uint32 max_grade = 4;
  inline bool has_max_grade() const;
  inline void clear_max_grade();
  static const int kMaxGradeFieldNumber = 4;
  inline ::google::protobuf::uint32 max_grade() const;
  inline void set_max_grade(::google::protobuf::uint32 value);

  // optional uint32 apply_grade = 5;
  inline bool has_apply_grade() const;
  inline void clear_apply_grade();
  static const int kApplyGradeFieldNumber = 5;
  inline ::google::protobuf::uint32 apply_grade() const;
  inline void set_apply_grade(::google::protobuf::uint32 value);

  // optional uint32 apply_time = 6;
  inline bool has_apply_time() const;
  inline void clear_apply_time();
  static const int kApplyTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 apply_time() const;
  inline void set_apply_time(::google::protobuf::uint32 value);

  // optional uint32 last_grade = 7;
  inline bool has_last_grade() const;
  inline void clear_last_grade();
  static const int kLastGradeFieldNumber = 7;
  inline ::google::protobuf::uint32 last_grade() const;
  inline void set_last_grade(::google::protobuf::uint32 value);

  // optional bool exist = 8;
  inline bool has_exist() const;
  inline void clear_exist();
  static const int kExistFieldNumber = 8;
  inline bool exist() const;
  inline void set_exist(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_load_offical_data_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_cur_grade();
  inline void clear_has_cur_grade();
  inline void set_has_max_grade();
  inline void clear_has_max_grade();
  inline void set_has_apply_grade();
  inline void clear_has_apply_grade();
  inline void set_has_apply_time();
  inline void clear_has_apply_time();
  inline void set_has_last_grade();
  inline void clear_has_last_grade();
  inline void set_has_exist();
  inline void clear_has_exist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int proto_id_;
  ::google::protobuf::uint32 cur_grade_;
  ::google::protobuf::uint32 max_grade_;
  ::google::protobuf::uint32 apply_grade_;
  ::google::protobuf::uint32 apply_time_;
  ::google::protobuf::uint32 last_grade_;
  bool exist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_load_offical_data_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_get_officer_applicants_req : public ::google::protobuf::Message {
 public:
  pub_get_officer_applicants_req();
  virtual ~pub_get_officer_applicants_req();

  pub_get_officer_applicants_req(const pub_get_officer_applicants_req& from);

  inline pub_get_officer_applicants_req& operator=(const pub_get_officer_applicants_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_get_officer_applicants_req& default_instance();

  void Swap(pub_get_officer_applicants_req* other);

  // implements Message ----------------------------------------------

  pub_get_officer_applicants_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_get_officer_applicants_req& from);
  void MergeFrom(const pub_get_officer_applicants_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_officer_applicants_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_get_officer_applicants_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::uint64 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_get_officer_applicants_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_get_officer_applicants_ack : public ::google::protobuf::Message {
 public:
  pub_get_officer_applicants_ack();
  virtual ~pub_get_officer_applicants_ack();

  pub_get_officer_applicants_ack(const pub_get_officer_applicants_ack& from);

  inline pub_get_officer_applicants_ack& operator=(const pub_get_officer_applicants_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_get_officer_applicants_ack& default_instance();

  void Swap(pub_get_officer_applicants_ack* other);

  // implements Message ----------------------------------------------

  pub_get_officer_applicants_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_get_officer_applicants_ack& from);
  void MergeFrom(const pub_get_officer_applicants_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_officer_applicants_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 grade = 4;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 4;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional uint32 apply_num = 5;
  inline bool has_apply_num() const;
  inline void clear_apply_num();
  static const int kApplyNumFieldNumber = 5;
  inline ::google::protobuf::uint32 apply_num() const;
  inline void set_apply_num(::google::protobuf::uint32 value);

  // optional uint32 posts_num = 6;
  inline bool has_posts_num() const;
  inline void clear_posts_num();
  static const int kPostsNumFieldNumber = 6;
  inline ::google::protobuf::uint32 posts_num() const;
  inline void set_posts_num(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.offical_apply_data applys = 7;
  inline int applys_size() const;
  inline void clear_applys();
  static const int kApplysFieldNumber = 7;
  inline const ::SProtoSpace::offical_apply_data& applys(int index) const;
  inline ::SProtoSpace::offical_apply_data* mutable_applys(int index);
  inline ::SProtoSpace::offical_apply_data* add_applys();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_data >&
      applys() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_data >*
      mutable_applys();

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_get_officer_applicants_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_apply_num();
  inline void clear_has_apply_num();
  inline void set_has_posts_num();
  inline void clear_has_posts_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::uint32 apply_num_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_data > applys_;
  ::google::protobuf::uint32 posts_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_get_officer_applicants_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_update_offical_lv_req : public ::google::protobuf::Message {
 public:
  pub_update_offical_lv_req();
  virtual ~pub_update_offical_lv_req();

  pub_update_offical_lv_req(const pub_update_offical_lv_req& from);

  inline pub_update_offical_lv_req& operator=(const pub_update_offical_lv_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_update_offical_lv_req& default_instance();

  void Swap(pub_update_offical_lv_req* other);

  // implements Message ----------------------------------------------

  pub_update_offical_lv_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_update_offical_lv_req& from);
  void MergeFrom(const pub_update_offical_lv_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_update_offical_lv_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_update_offical_lv_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::uint64 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_update_offical_lv_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_cancel_offical_apply_req : public ::google::protobuf::Message {
 public:
  pub_cancel_offical_apply_req();
  virtual ~pub_cancel_offical_apply_req();

  pub_cancel_offical_apply_req(const pub_cancel_offical_apply_req& from);

  inline pub_cancel_offical_apply_req& operator=(const pub_cancel_offical_apply_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_cancel_offical_apply_req& default_instance();

  void Swap(pub_cancel_offical_apply_req* other);

  // implements Message ----------------------------------------------

  pub_cancel_offical_apply_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_cancel_offical_apply_req& from);
  void MergeFrom(const pub_cancel_offical_apply_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_cancel_offical_apply_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_cancel_offical_apply_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::uint64 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_cancel_offical_apply_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_cancel_offical_apply_ack : public ::google::protobuf::Message {
 public:
  pub_cancel_offical_apply_ack();
  virtual ~pub_cancel_offical_apply_ack();

  pub_cancel_offical_apply_ack(const pub_cancel_offical_apply_ack& from);

  inline pub_cancel_offical_apply_ack& operator=(const pub_cancel_offical_apply_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_cancel_offical_apply_ack& default_instance();

  void Swap(pub_cancel_offical_apply_ack* other);

  // implements Message ----------------------------------------------

  pub_cancel_offical_apply_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_cancel_offical_apply_ack& from);
  void MergeFrom(const pub_cancel_offical_apply_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_cancel_offical_apply_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_cancel_offical_apply_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_cancel_offical_apply_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_get_offical_challenge_roles_req : public ::google::protobuf::Message {
 public:
  pub_get_offical_challenge_roles_req();
  virtual ~pub_get_offical_challenge_roles_req();

  pub_get_offical_challenge_roles_req(const pub_get_offical_challenge_roles_req& from);

  inline pub_get_offical_challenge_roles_req& operator=(const pub_get_offical_challenge_roles_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_get_offical_challenge_roles_req& default_instance();

  void Swap(pub_get_offical_challenge_roles_req* other);

  // implements Message ----------------------------------------------

  pub_get_offical_challenge_roles_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_get_offical_challenge_roles_req& from);
  void MergeFrom(const pub_get_offical_challenge_roles_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_offical_challenge_roles_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_get_offical_challenge_roles_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::uint64 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_get_offical_challenge_roles_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_get_offical_challenge_roles_ack : public ::google::protobuf::Message {
 public:
  pub_get_offical_challenge_roles_ack();
  virtual ~pub_get_offical_challenge_roles_ack();

  pub_get_offical_challenge_roles_ack(const pub_get_offical_challenge_roles_ack& from);

  inline pub_get_offical_challenge_roles_ack& operator=(const pub_get_offical_challenge_roles_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_get_offical_challenge_roles_ack& default_instance();

  void Swap(pub_get_offical_challenge_roles_ack* other);

  // implements Message ----------------------------------------------

  pub_get_offical_challenge_roles_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_get_offical_challenge_roles_ack& from);
  void MergeFrom(const pub_get_offical_challenge_roles_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_offical_challenge_roles_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint32 grade = 3;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 3;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional uint64 role_id = 4;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // repeated .SProtoSpace.offical_item_data items = 5;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 5;
  inline const ::SProtoSpace::offical_item_data& items(int index) const;
  inline ::SProtoSpace::offical_item_data* mutable_items(int index);
  inline ::SProtoSpace::offical_item_data* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_get_offical_challenge_roles_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data > items_;
  ::google::protobuf::uint32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_get_offical_challenge_roles_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_pub_send_flower_req : public ::google::protobuf::Message {
 public:
  game_pub_send_flower_req();
  virtual ~game_pub_send_flower_req();

  game_pub_send_flower_req(const game_pub_send_flower_req& from);

  inline game_pub_send_flower_req& operator=(const game_pub_send_flower_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_pub_send_flower_req& default_instance();

  void Swap(game_pub_send_flower_req* other);

  // implements Message ----------------------------------------------

  game_pub_send_flower_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_pub_send_flower_req& from);
  void MergeFrom(const game_pub_send_flower_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_pub_send_flower_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 send_role_id = 2;
  inline bool has_send_role_id() const;
  inline void clear_send_role_id();
  static const int kSendRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 send_role_id() const;
  inline void set_send_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.flower_send_info send_info = 3;
  inline bool has_send_info() const;
  inline void clear_send_info();
  static const int kSendInfoFieldNumber = 3;
  inline const ::SProtoSpace::flower_send_info& send_info() const;
  inline ::SProtoSpace::flower_send_info* mutable_send_info();
  inline ::SProtoSpace::flower_send_info* release_send_info();
  inline void set_allocated_send_info(::SProtoSpace::flower_send_info* send_info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_pub_send_flower_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_send_role_id();
  inline void clear_has_send_role_id();
  inline void set_has_send_info();
  inline void clear_has_send_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 send_role_id_;
  ::SProtoSpace::flower_send_info* send_info_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static game_pub_send_flower_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_game_send_flower_ack : public ::google::protobuf::Message {
 public:
  pub_game_send_flower_ack();
  virtual ~pub_game_send_flower_ack();

  pub_game_send_flower_ack(const pub_game_send_flower_ack& from);

  inline pub_game_send_flower_ack& operator=(const pub_game_send_flower_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_game_send_flower_ack& default_instance();

  void Swap(pub_game_send_flower_ack* other);

  // implements Message ----------------------------------------------

  pub_game_send_flower_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_game_send_flower_ack& from);
  void MergeFrom(const pub_game_send_flower_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_game_send_flower_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 send_role_id = 2;
  inline bool has_send_role_id() const;
  inline void clear_send_role_id();
  static const int kSendRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 send_role_id() const;
  inline void set_send_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.flower_send_info send_info = 3;
  inline bool has_send_info() const;
  inline void clear_send_info();
  static const int kSendInfoFieldNumber = 3;
  inline const ::SProtoSpace::flower_send_info& send_info() const;
  inline ::SProtoSpace::flower_send_info* mutable_send_info();
  inline ::SProtoSpace::flower_send_info* release_send_info();
  inline void set_allocated_send_info(::SProtoSpace::flower_send_info* send_info);

  // optional .SProtoSpace.public_role_base_info to_role_info = 4;
  inline bool has_to_role_info() const;
  inline void clear_to_role_info();
  static const int kToRoleInfoFieldNumber = 4;
  inline const ::SProtoSpace::public_role_base_info& to_role_info() const;
  inline ::SProtoSpace::public_role_base_info* mutable_to_role_info();
  inline ::SProtoSpace::public_role_base_info* release_to_role_info();
  inline void set_allocated_to_role_info(::SProtoSpace::public_role_base_info* to_role_info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_game_send_flower_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_send_role_id();
  inline void clear_has_send_role_id();
  inline void set_has_send_info();
  inline void clear_has_send_info();
  inline void set_has_to_role_info();
  inline void clear_has_to_role_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 send_role_id_;
  ::SProtoSpace::flower_send_info* send_info_;
  ::SProtoSpace::public_role_base_info* to_role_info_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_game_send_flower_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_pub_flower_to_receive_nty : public ::google::protobuf::Message {
 public:
  game_pub_flower_to_receive_nty();
  virtual ~game_pub_flower_to_receive_nty();

  game_pub_flower_to_receive_nty(const game_pub_flower_to_receive_nty& from);

  inline game_pub_flower_to_receive_nty& operator=(const game_pub_flower_to_receive_nty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_pub_flower_to_receive_nty& default_instance();

  void Swap(game_pub_flower_to_receive_nty* other);

  // implements Message ----------------------------------------------

  game_pub_flower_to_receive_nty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_pub_flower_to_receive_nty& from);
  void MergeFrom(const game_pub_flower_to_receive_nty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_pub_flower_to_receive_nty_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 to_role_id = 2;
  inline bool has_to_role_id() const;
  inline void clear_to_role_id();
  static const int kToRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 to_role_id() const;
  inline void set_to_role_id(::google::protobuf::uint64 value);

  // optional uint64 from_role_id = 3;
  inline bool has_from_role_id() const;
  inline void clear_from_role_id();
  static const int kFromRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 from_role_id() const;
  inline void set_from_role_id(::google::protobuf::uint64 value);

  // optional uint32 add_popularity_num = 4;
  inline bool has_add_popularity_num() const;
  inline void clear_add_popularity_num();
  static const int kAddPopularityNumFieldNumber = 4;
  inline ::google::protobuf::uint32 add_popularity_num() const;
  inline void set_add_popularity_num(::google::protobuf::uint32 value);

  // optional .SProtoSpace.flower_send_info send_info = 5;
  inline bool has_send_info() const;
  inline void clear_send_info();
  static const int kSendInfoFieldNumber = 5;
  inline const ::SProtoSpace::flower_send_info& send_info() const;
  inline ::SProtoSpace::flower_send_info* mutable_send_info();
  inline ::SProtoSpace::flower_send_info* release_send_info();
  inline void set_allocated_send_info(::SProtoSpace::flower_send_info* send_info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_pub_flower_to_receive_nty)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_to_role_id();
  inline void clear_has_to_role_id();
  inline void set_has_from_role_id();
  inline void clear_has_from_role_id();
  inline void set_has_add_popularity_num();
  inline void clear_has_add_popularity_num();
  inline void set_has_send_info();
  inline void clear_has_send_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 to_role_id_;
  int protoid_;
  ::google::protobuf::uint32 add_popularity_num_;
  ::google::protobuf::uint64 from_role_id_;
  ::SProtoSpace::flower_send_info* send_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static game_pub_flower_to_receive_nty* default_instance_;
};
// -------------------------------------------------------------------

class pub_game_flower_to_receive_nty : public ::google::protobuf::Message {
 public:
  pub_game_flower_to_receive_nty();
  virtual ~pub_game_flower_to_receive_nty();

  pub_game_flower_to_receive_nty(const pub_game_flower_to_receive_nty& from);

  inline pub_game_flower_to_receive_nty& operator=(const pub_game_flower_to_receive_nty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_game_flower_to_receive_nty& default_instance();

  void Swap(pub_game_flower_to_receive_nty* other);

  // implements Message ----------------------------------------------

  pub_game_flower_to_receive_nty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_game_flower_to_receive_nty& from);
  void MergeFrom(const pub_game_flower_to_receive_nty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_game_flower_to_receive_nty_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 to_role_id = 2;
  inline bool has_to_role_id() const;
  inline void clear_to_role_id();
  static const int kToRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 to_role_id() const;
  inline void set_to_role_id(::google::protobuf::uint64 value);

  // optional uint64 from_role_id = 3;
  inline bool has_from_role_id() const;
  inline void clear_from_role_id();
  static const int kFromRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 from_role_id() const;
  inline void set_from_role_id(::google::protobuf::uint64 value);

  // optional uint32 add_popularity_num = 4;
  inline bool has_add_popularity_num() const;
  inline void clear_add_popularity_num();
  static const int kAddPopularityNumFieldNumber = 4;
  inline ::google::protobuf::uint32 add_popularity_num() const;
  inline void set_add_popularity_num(::google::protobuf::uint32 value);

  // optional .SProtoSpace.flower_send_info send_info = 5;
  inline bool has_send_info() const;
  inline void clear_send_info();
  static const int kSendInfoFieldNumber = 5;
  inline const ::SProtoSpace::flower_send_info& send_info() const;
  inline ::SProtoSpace::flower_send_info* mutable_send_info();
  inline ::SProtoSpace::flower_send_info* release_send_info();
  inline void set_allocated_send_info(::SProtoSpace::flower_send_info* send_info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_game_flower_to_receive_nty)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_to_role_id();
  inline void clear_has_to_role_id();
  inline void set_has_from_role_id();
  inline void clear_has_from_role_id();
  inline void set_has_add_popularity_num();
  inline void clear_has_add_popularity_num();
  inline void set_has_send_info();
  inline void clear_has_send_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 to_role_id_;
  int protoid_;
  ::google::protobuf::uint32 add_popularity_num_;
  ::google::protobuf::uint64 from_role_id_;
  ::SProtoSpace::flower_send_info* send_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_game_flower_to_receive_nty* default_instance_;
};
// -------------------------------------------------------------------

class pub_forward_add_req : public ::google::protobuf::Message {
 public:
  pub_forward_add_req();
  virtual ~pub_forward_add_req();

  pub_forward_add_req(const pub_forward_add_req& from);

  inline pub_forward_add_req& operator=(const pub_forward_add_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_forward_add_req& default_instance();

  void Swap(pub_forward_add_req* other);

  // implements Message ----------------------------------------------

  pub_forward_add_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_forward_add_req& from);
  void MergeFrom(const pub_forward_add_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_forward_add_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  inline ::google::protobuf::uint64 target_id() const;
  inline void set_target_id(::google::protobuf::uint64 value);

  // optional uint32 area_id = 3;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 3;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // optional .SProtoSpace.friend_apply_info apply_info = 4;
  inline bool has_apply_info() const;
  inline void clear_apply_info();
  static const int kApplyInfoFieldNumber = 4;
  inline const ::SProtoSpace::friend_apply_info& apply_info() const;
  inline ::SProtoSpace::friend_apply_info* mutable_apply_info();
  inline ::SProtoSpace::friend_apply_info* release_apply_info();
  inline void set_allocated_apply_info(::SProtoSpace::friend_apply_info* apply_info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_forward_add_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_apply_info();
  inline void clear_has_apply_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 target_id_;
  int proto_id_;
  ::google::protobuf::uint32 area_id_;
  ::SProtoSpace::friend_apply_info* apply_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_forward_add_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_forward_add_ack : public ::google::protobuf::Message {
 public:
  pub_forward_add_ack();
  virtual ~pub_forward_add_ack();

  pub_forward_add_ack(const pub_forward_add_ack& from);

  inline pub_forward_add_ack& operator=(const pub_forward_add_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_forward_add_ack& default_instance();

  void Swap(pub_forward_add_ack* other);

  // implements Message ----------------------------------------------

  pub_forward_add_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_forward_add_ack& from);
  void MergeFrom(const pub_forward_add_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_forward_add_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  inline ::google::protobuf::uint64 target_id() const;
  inline void set_target_id(::google::protobuf::uint64 value);

  // optional uint32 area_id = 3;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 3;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // optional .SProtoSpace.friend_apply_info apply_info = 4;
  inline bool has_apply_info() const;
  inline void clear_apply_info();
  static const int kApplyInfoFieldNumber = 4;
  inline const ::SProtoSpace::friend_apply_info& apply_info() const;
  inline ::SProtoSpace::friend_apply_info* mutable_apply_info();
  inline ::SProtoSpace::friend_apply_info* release_apply_info();
  inline void set_allocated_apply_info(::SProtoSpace::friend_apply_info* apply_info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_forward_add_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_apply_info();
  inline void clear_has_apply_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 target_id_;
  int proto_id_;
  ::google::protobuf::uint32 area_id_;
  ::SProtoSpace::friend_apply_info* apply_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_forward_add_ack* default_instance_;
};
// -------------------------------------------------------------------

class message_packing_info : public ::google::protobuf::Message {
 public:
  message_packing_info();
  virtual ~message_packing_info();

  message_packing_info(const message_packing_info& from);

  inline message_packing_info& operator=(const message_packing_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const message_packing_info& default_instance();

  void Swap(message_packing_info* other);

  // implements Message ----------------------------------------------

  message_packing_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const message_packing_info& from);
  void MergeFrom(const message_packing_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1;
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional bytes proto_bytes = 3;
  inline bool has_proto_bytes() const;
  inline void clear_proto_bytes();
  static const int kProtoBytesFieldNumber = 3;
  inline const ::std::string& proto_bytes() const;
  inline void set_proto_bytes(const ::std::string& value);
  inline void set_proto_bytes(const char* value);
  inline void set_proto_bytes(const void* value, size_t size);
  inline ::std::string* mutable_proto_bytes();
  inline ::std::string* release_proto_bytes();
  inline void set_allocated_proto_bytes(::std::string* proto_bytes);

  // optional uint32 proto_len = 4;
  inline bool has_proto_len() const;
  inline void clear_proto_len();
  static const int kProtoLenFieldNumber = 4;
  inline ::google::protobuf::uint32 proto_len() const;
  inline void set_proto_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.message_packing_info)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_proto_bytes();
  inline void clear_has_proto_bytes();
  inline void set_has_proto_len();
  inline void clear_has_proto_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* proto_bytes_;
  int protoid_;
  ::google::protobuf::uint32 proto_len_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static message_packing_info* default_instance_;
};
// -------------------------------------------------------------------

class game_pub_msg_packing_ntf : public ::google::protobuf::Message {
 public:
  game_pub_msg_packing_ntf();
  virtual ~game_pub_msg_packing_ntf();

  game_pub_msg_packing_ntf(const game_pub_msg_packing_ntf& from);

  inline game_pub_msg_packing_ntf& operator=(const game_pub_msg_packing_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_pub_msg_packing_ntf& default_instance();

  void Swap(game_pub_msg_packing_ntf* other);

  // implements Message ----------------------------------------------

  game_pub_msg_packing_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_pub_msg_packing_ntf& from);
  void MergeFrom(const game_pub_msg_packing_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_pub_msg_packing_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 target_game_id = 2;
  inline bool has_target_game_id() const;
  inline void clear_target_game_id();
  static const int kTargetGameIdFieldNumber = 2;
  inline ::google::protobuf::uint64 target_game_id() const;
  inline void set_target_game_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.message_packing_info packing = 3;
  inline bool has_packing() const;
  inline void clear_packing();
  static const int kPackingFieldNumber = 3;
  inline const ::SProtoSpace::message_packing_info& packing() const;
  inline ::SProtoSpace::message_packing_info* mutable_packing();
  inline ::SProtoSpace::message_packing_info* release_packing();
  inline void set_allocated_packing(::SProtoSpace::message_packing_info* packing);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_pub_msg_packing_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_target_game_id();
  inline void clear_has_target_game_id();
  inline void set_has_packing();
  inline void clear_has_packing();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 target_game_id_;
  ::SProtoSpace::message_packing_info* packing_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static game_pub_msg_packing_ntf* default_instance_;
};
// -------------------------------------------------------------------

class pub_game_msg_packing_ntf : public ::google::protobuf::Message {
 public:
  pub_game_msg_packing_ntf();
  virtual ~pub_game_msg_packing_ntf();

  pub_game_msg_packing_ntf(const pub_game_msg_packing_ntf& from);

  inline pub_game_msg_packing_ntf& operator=(const pub_game_msg_packing_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_game_msg_packing_ntf& default_instance();

  void Swap(pub_game_msg_packing_ntf* other);

  // implements Message ----------------------------------------------

  pub_game_msg_packing_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_game_msg_packing_ntf& from);
  void MergeFrom(const pub_game_msg_packing_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_game_msg_packing_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 target_game_id = 2;
  inline bool has_target_game_id() const;
  inline void clear_target_game_id();
  static const int kTargetGameIdFieldNumber = 2;
  inline ::google::protobuf::uint64 target_game_id() const;
  inline void set_target_game_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.message_packing_info packing = 3;
  inline bool has_packing() const;
  inline void clear_packing();
  static const int kPackingFieldNumber = 3;
  inline const ::SProtoSpace::message_packing_info& packing() const;
  inline ::SProtoSpace::message_packing_info* mutable_packing();
  inline ::SProtoSpace::message_packing_info* release_packing();
  inline void set_allocated_packing(::SProtoSpace::message_packing_info* packing);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_game_msg_packing_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_target_game_id();
  inline void clear_has_target_game_id();
  inline void set_has_packing();
  inline void clear_has_packing();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 target_game_id_;
  ::SProtoSpace::message_packing_info* packing_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_game_msg_packing_ntf* default_instance_;
};
// -------------------------------------------------------------------

class pub_get_role_req : public ::google::protobuf::Message {
 public:
  pub_get_role_req();
  virtual ~pub_get_role_req();

  pub_get_role_req(const pub_get_role_req& from);

  inline pub_get_role_req& operator=(const pub_get_role_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_get_role_req& default_instance();

  void Swap(pub_get_role_req* other);

  // implements Message ----------------------------------------------

  pub_get_role_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_get_role_req& from);
  void MergeFrom(const pub_get_role_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.EGetRoleDoType mode = 2;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 2;
  inline ::SProtoSpace::EGetRoleDoType mode() const;
  inline void set_mode(::SProtoSpace::EGetRoleDoType value);

  // optional uint64 uuid = 3;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 3;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint64 target_id = 4;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 4;
  inline ::google::protobuf::uint64 target_id() const;
  inline void set_target_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_get_role_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_target_id();
  inline void clear_has_target_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  int mode_;
  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint64 target_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_get_role_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_get_role_ack : public ::google::protobuf::Message {
 public:
  pub_get_role_ack();
  virtual ~pub_get_role_ack();

  pub_get_role_ack(const pub_get_role_ack& from);

  inline pub_get_role_ack& operator=(const pub_get_role_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_get_role_ack& default_instance();

  void Swap(pub_get_role_ack* other);

  // implements Message ----------------------------------------------

  pub_get_role_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_get_role_ack& from);
  void MergeFrom(const pub_get_role_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.EGetRoleDoType mode = 2;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 2;
  inline ::SProtoSpace::EGetRoleDoType mode() const;
  inline void set_mode(::SProtoSpace::EGetRoleDoType value);

  // optional uint64 uuid = 3;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 3;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional .SProtoSpace.friend_base_info info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::SProtoSpace::friend_base_info& info() const;
  inline ::SProtoSpace::friend_base_info* mutable_info();
  inline ::SProtoSpace::friend_base_info* release_info();
  inline void set_allocated_info(::SProtoSpace::friend_base_info* info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_get_role_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  int mode_;
  ::google::protobuf::uint64 uuid_;
  ::SProtoSpace::friend_base_info* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_get_role_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_game_friends_ntf : public ::google::protobuf::Message {
 public:
  pub_game_friends_ntf();
  virtual ~pub_game_friends_ntf();

  pub_game_friends_ntf(const pub_game_friends_ntf& from);

  inline pub_game_friends_ntf& operator=(const pub_game_friends_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_game_friends_ntf& default_instance();

  void Swap(pub_game_friends_ntf* other);

  // implements Message ----------------------------------------------

  pub_game_friends_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_game_friends_ntf& from);
  void MergeFrom(const pub_game_friends_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_friends_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional .SProtoSpace.game_friends_ntf ntf = 3;
  inline bool has_ntf() const;
  inline void clear_ntf();
  static const int kNtfFieldNumber = 3;
  inline const ::SProtoSpace::game_friends_ntf& ntf() const;
  inline ::SProtoSpace::game_friends_ntf* mutable_ntf();
  inline ::SProtoSpace::game_friends_ntf* release_ntf();
  inline void set_allocated_ntf(::SProtoSpace::game_friends_ntf* ntf);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_game_friends_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_ntf();
  inline void clear_has_ntf();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::SProtoSpace::game_friends_ntf* ntf_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_game_friends_ntf* default_instance_;
};
// -------------------------------------------------------------------

class pub_complete_role_req : public ::google::protobuf::Message {
 public:
  pub_complete_role_req();
  virtual ~pub_complete_role_req();

  pub_complete_role_req(const pub_complete_role_req& from);

  inline pub_complete_role_req& operator=(const pub_complete_role_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_complete_role_req& default_instance();

  void Swap(pub_complete_role_req* other);

  // implements Message ----------------------------------------------

  pub_complete_role_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_complete_role_req& from);
  void MergeFrom(const pub_complete_role_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_complete_role_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional .SProtoSpace.game_onekey_apply_info_ack ack_info = 3;
  inline bool has_ack_info() const;
  inline void clear_ack_info();
  static const int kAckInfoFieldNumber = 3;
  inline const ::SProtoSpace::game_onekey_apply_info_ack& ack_info() const;
  inline ::SProtoSpace::game_onekey_apply_info_ack* mutable_ack_info();
  inline ::SProtoSpace::game_onekey_apply_info_ack* release_ack_info();
  inline void set_allocated_ack_info(::SProtoSpace::game_onekey_apply_info_ack* ack_info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_complete_role_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_ack_info();
  inline void clear_has_ack_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::SProtoSpace::game_onekey_apply_info_ack* ack_info_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_complete_role_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_complete_role_ack : public ::google::protobuf::Message {
 public:
  pub_complete_role_ack();
  virtual ~pub_complete_role_ack();

  pub_complete_role_ack(const pub_complete_role_ack& from);

  inline pub_complete_role_ack& operator=(const pub_complete_role_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_complete_role_ack& default_instance();

  void Swap(pub_complete_role_ack* other);

  // implements Message ----------------------------------------------

  pub_complete_role_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_complete_role_ack& from);
  void MergeFrom(const pub_complete_role_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_complete_role_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional .SProtoSpace.game_onekey_apply_info_ack ack_info = 3;
  inline bool has_ack_info() const;
  inline void clear_ack_info();
  static const int kAckInfoFieldNumber = 3;
  inline const ::SProtoSpace::game_onekey_apply_info_ack& ack_info() const;
  inline ::SProtoSpace::game_onekey_apply_info_ack* mutable_ack_info();
  inline ::SProtoSpace::game_onekey_apply_info_ack* release_ack_info();
  inline void set_allocated_ack_info(::SProtoSpace::game_onekey_apply_info_ack* ack_info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_complete_role_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_ack_info();
  inline void clear_has_ack_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::SProtoSpace::game_onekey_apply_info_ack* ack_info_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_complete_role_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_friend_refresh_req : public ::google::protobuf::Message {
 public:
  pub_friend_refresh_req();
  virtual ~pub_friend_refresh_req();

  pub_friend_refresh_req(const pub_friend_refresh_req& from);

  inline pub_friend_refresh_req& operator=(const pub_friend_refresh_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_friend_refresh_req& default_instance();

  void Swap(pub_friend_refresh_req* other);

  // implements Message ----------------------------------------------

  pub_friend_refresh_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_friend_refresh_req& from);
  void MergeFrom(const pub_friend_refresh_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_refresh_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // repeated uint64 role_ids = 3;
  inline int role_ids_size() const;
  inline void clear_role_ids();
  static const int kRoleIdsFieldNumber = 3;
  inline ::google::protobuf::uint64 role_ids(int index) const;
  inline void set_role_ids(int index, ::google::protobuf::uint64 value);
  inline void add_role_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      role_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_role_ids();

  // optional uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 do_type = 5;
  inline bool has_do_type() const;
  inline void clear_do_type();
  static const int kDoTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 do_type() const;
  inline void set_do_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_friend_refresh_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_do_type();
  inline void clear_has_do_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  int proto_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > role_ids_;
  ::google::protobuf::uint32 do_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_friend_refresh_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_friend_refresh_ack : public ::google::protobuf::Message {
 public:
  pub_friend_refresh_ack();
  virtual ~pub_friend_refresh_ack();

  pub_friend_refresh_ack(const pub_friend_refresh_ack& from);

  inline pub_friend_refresh_ack& operator=(const pub_friend_refresh_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_friend_refresh_ack& default_instance();

  void Swap(pub_friend_refresh_ack* other);

  // implements Message ----------------------------------------------

  pub_friend_refresh_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_friend_refresh_ack& from);
  void MergeFrom(const pub_friend_refresh_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_refresh_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // repeated .SProtoSpace.friend_base_info infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::SProtoSpace::friend_base_info& infos(int index) const;
  inline ::SProtoSpace::friend_base_info* mutable_infos(int index);
  inline ::SProtoSpace::friend_base_info* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >*
      mutable_infos();

  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 uuid = 4;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 4;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 do_type = 5;
  inline bool has_do_type() const;
  inline void clear_do_type();
  static const int kDoTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 do_type() const;
  inline void set_do_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_friend_refresh_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_do_type();
  inline void clear_has_do_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info > infos_;
  int proto_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::uint32 do_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_friend_refresh_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_pub_get_all_event_msg_ntf : public ::google::protobuf::Message {
 public:
  game_pub_get_all_event_msg_ntf();
  virtual ~game_pub_get_all_event_msg_ntf();

  game_pub_get_all_event_msg_ntf(const game_pub_get_all_event_msg_ntf& from);

  inline game_pub_get_all_event_msg_ntf& operator=(const game_pub_get_all_event_msg_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_pub_get_all_event_msg_ntf& default_instance();

  void Swap(game_pub_get_all_event_msg_ntf* other);

  // implements Message ----------------------------------------------

  game_pub_get_all_event_msg_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_pub_get_all_event_msg_ntf& from);
  void MergeFrom(const game_pub_get_all_event_msg_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_all_event_msg_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_pub_get_all_event_msg_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static game_pub_get_all_event_msg_ntf* default_instance_;
};
// -------------------------------------------------------------------

class pub_game_get_all_event_msg_ntf : public ::google::protobuf::Message {
 public:
  pub_game_get_all_event_msg_ntf();
  virtual ~pub_game_get_all_event_msg_ntf();

  pub_game_get_all_event_msg_ntf(const pub_game_get_all_event_msg_ntf& from);

  inline pub_game_get_all_event_msg_ntf& operator=(const pub_game_get_all_event_msg_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_game_get_all_event_msg_ntf& default_instance();

  void Swap(pub_game_get_all_event_msg_ntf* other);

  // implements Message ----------------------------------------------

  pub_game_get_all_event_msg_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_game_get_all_event_msg_ntf& from);
  void MergeFrom(const pub_game_get_all_event_msg_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_get_all_event_msg_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // repeated .SProtoSpace.db_event_msg_info event_msgs = 3;
  inline int event_msgs_size() const;
  inline void clear_event_msgs();
  static const int kEventMsgsFieldNumber = 3;
  inline const ::SProtoSpace::db_event_msg_info& event_msgs(int index) const;
  inline ::SProtoSpace::db_event_msg_info* mutable_event_msgs(int index);
  inline ::SProtoSpace::db_event_msg_info* add_event_msgs();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_event_msg_info >&
      event_msgs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_event_msg_info >*
      mutable_event_msgs();

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_game_get_all_event_msg_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_event_msg_info > event_msgs_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_game_get_all_event_msg_ntf* default_instance_;
};
// -------------------------------------------------------------------

class game_pub_get_id_event_msg_ntf : public ::google::protobuf::Message {
 public:
  game_pub_get_id_event_msg_ntf();
  virtual ~game_pub_get_id_event_msg_ntf();

  game_pub_get_id_event_msg_ntf(const game_pub_get_id_event_msg_ntf& from);

  inline game_pub_get_id_event_msg_ntf& operator=(const game_pub_get_id_event_msg_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_pub_get_id_event_msg_ntf& default_instance();

  void Swap(game_pub_get_id_event_msg_ntf* other);

  // implements Message ----------------------------------------------

  game_pub_get_id_event_msg_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_pub_get_id_event_msg_ntf& from);
  void MergeFrom(const game_pub_get_id_event_msg_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_id_event_msg_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 event_id = 3;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 3;
  inline ::google::protobuf::uint64 event_id() const;
  inline void set_event_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_pub_get_id_event_msg_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_event_id();
  inline void clear_has_event_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 event_id_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static game_pub_get_id_event_msg_ntf* default_instance_;
};
// -------------------------------------------------------------------

class pub_game_get_id_event_msg_ntf : public ::google::protobuf::Message {
 public:
  pub_game_get_id_event_msg_ntf();
  virtual ~pub_game_get_id_event_msg_ntf();

  pub_game_get_id_event_msg_ntf(const pub_game_get_id_event_msg_ntf& from);

  inline pub_game_get_id_event_msg_ntf& operator=(const pub_game_get_id_event_msg_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_game_get_id_event_msg_ntf& default_instance();

  void Swap(pub_game_get_id_event_msg_ntf* other);

  // implements Message ----------------------------------------------

  pub_game_get_id_event_msg_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_game_get_id_event_msg_ntf& from);
  void MergeFrom(const pub_game_get_id_event_msg_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_get_id_event_msg_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.db_event_msg_info event_msgs = 3;
  inline bool has_event_msgs() const;
  inline void clear_event_msgs();
  static const int kEventMsgsFieldNumber = 3;
  inline const ::SProtoSpace::db_event_msg_info& event_msgs() const;
  inline ::SProtoSpace::db_event_msg_info* mutable_event_msgs();
  inline ::SProtoSpace::db_event_msg_info* release_event_msgs();
  inline void set_allocated_event_msgs(::SProtoSpace::db_event_msg_info* event_msgs);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_game_get_id_event_msg_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_event_msgs();
  inline void clear_has_event_msgs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::SProtoSpace::db_event_msg_info* event_msgs_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_game_get_id_event_msg_ntf* default_instance_;
};
// -------------------------------------------------------------------

class game_pub_delete_event_msg_ntf : public ::google::protobuf::Message {
 public:
  game_pub_delete_event_msg_ntf();
  virtual ~game_pub_delete_event_msg_ntf();

  game_pub_delete_event_msg_ntf(const game_pub_delete_event_msg_ntf& from);

  inline game_pub_delete_event_msg_ntf& operator=(const game_pub_delete_event_msg_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_pub_delete_event_msg_ntf& default_instance();

  void Swap(game_pub_delete_event_msg_ntf* other);

  // implements Message ----------------------------------------------

  game_pub_delete_event_msg_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_pub_delete_event_msg_ntf& from);
  void MergeFrom(const game_pub_delete_event_msg_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_delete_event_msg_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 delete_id = 4;
  inline bool has_delete_id() const;
  inline void clear_delete_id();
  static const int kDeleteIdFieldNumber = 4;
  inline ::google::protobuf::uint64 delete_id() const;
  inline void set_delete_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_pub_delete_event_msg_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_delete_id();
  inline void clear_has_delete_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 delete_id_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static game_pub_delete_event_msg_ntf* default_instance_;
};
// -------------------------------------------------------------------

class game_pub_delete_type_msgs_ntf : public ::google::protobuf::Message {
 public:
  game_pub_delete_type_msgs_ntf();
  virtual ~game_pub_delete_type_msgs_ntf();

  game_pub_delete_type_msgs_ntf(const game_pub_delete_type_msgs_ntf& from);

  inline game_pub_delete_type_msgs_ntf& operator=(const game_pub_delete_type_msgs_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_pub_delete_type_msgs_ntf& default_instance();

  void Swap(game_pub_delete_type_msgs_ntf* other);

  // implements Message ----------------------------------------------

  game_pub_delete_type_msgs_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_pub_delete_type_msgs_ntf& from);
  void MergeFrom(const game_pub_delete_type_msgs_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_delete_type_msgs_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 event_type = 3;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 event_type() const;
  inline void set_event_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_pub_delete_type_msgs_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_event_type();
  inline void clear_has_event_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int proto_id_;
  ::google::protobuf::uint32 event_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static game_pub_delete_type_msgs_ntf* default_instance_;
};
// -------------------------------------------------------------------

class game_pub_read_event_msg_ntf : public ::google::protobuf::Message {
 public:
  game_pub_read_event_msg_ntf();
  virtual ~game_pub_read_event_msg_ntf();

  game_pub_read_event_msg_ntf(const game_pub_read_event_msg_ntf& from);

  inline game_pub_read_event_msg_ntf& operator=(const game_pub_read_event_msg_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_pub_read_event_msg_ntf& default_instance();

  void Swap(game_pub_read_event_msg_ntf* other);

  // implements Message ----------------------------------------------

  game_pub_read_event_msg_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_pub_read_event_msg_ntf& from);
  void MergeFrom(const game_pub_read_event_msg_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_read_event_msg_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 event_type = 3;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 event_type() const;
  inline void set_event_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_pub_read_event_msg_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_event_type();
  inline void clear_has_event_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int proto_id_;
  ::google::protobuf::uint32 event_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static game_pub_read_event_msg_ntf* default_instance_;
};
// -------------------------------------------------------------------

class game_pub_insert_event_msg_ntf : public ::google::protobuf::Message {
 public:
  game_pub_insert_event_msg_ntf();
  virtual ~game_pub_insert_event_msg_ntf();

  game_pub_insert_event_msg_ntf(const game_pub_insert_event_msg_ntf& from);

  inline game_pub_insert_event_msg_ntf& operator=(const game_pub_insert_event_msg_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_pub_insert_event_msg_ntf& default_instance();

  void Swap(game_pub_insert_event_msg_ntf* other);

  // implements Message ----------------------------------------------

  game_pub_insert_event_msg_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_pub_insert_event_msg_ntf& from);
  void MergeFrom(const game_pub_insert_event_msg_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_insert_event_msg_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.db_event_msg_info event_msg = 3;
  inline bool has_event_msg() const;
  inline void clear_event_msg();
  static const int kEventMsgFieldNumber = 3;
  inline const ::SProtoSpace::db_event_msg_info& event_msg() const;
  inline ::SProtoSpace::db_event_msg_info* mutable_event_msg();
  inline ::SProtoSpace::db_event_msg_info* release_event_msg();
  inline void set_allocated_event_msg(::SProtoSpace::db_event_msg_info* event_msg);

  // optional bool is_nty_client = 4;
  inline bool has_is_nty_client() const;
  inline void clear_is_nty_client();
  static const int kIsNtyClientFieldNumber = 4;
  inline bool is_nty_client() const;
  inline void set_is_nty_client(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_pub_insert_event_msg_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_event_msg();
  inline void clear_has_event_msg();
  inline void set_has_is_nty_client();
  inline void clear_has_is_nty_client();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int proto_id_;
  bool is_nty_client_;
  ::SProtoSpace::db_event_msg_info* event_msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static game_pub_insert_event_msg_ntf* default_instance_;
};
// -------------------------------------------------------------------

class pub_game_insert_event_msg_ntf : public ::google::protobuf::Message {
 public:
  pub_game_insert_event_msg_ntf();
  virtual ~pub_game_insert_event_msg_ntf();

  pub_game_insert_event_msg_ntf(const pub_game_insert_event_msg_ntf& from);

  inline pub_game_insert_event_msg_ntf& operator=(const pub_game_insert_event_msg_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_game_insert_event_msg_ntf& default_instance();

  void Swap(pub_game_insert_event_msg_ntf* other);

  // implements Message ----------------------------------------------

  pub_game_insert_event_msg_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_game_insert_event_msg_ntf& from);
  void MergeFrom(const pub_game_insert_event_msg_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_insert_event_msg_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.db_event_msg_info event_msg = 3;
  inline bool has_event_msg() const;
  inline void clear_event_msg();
  static const int kEventMsgFieldNumber = 3;
  inline const ::SProtoSpace::db_event_msg_info& event_msg() const;
  inline ::SProtoSpace::db_event_msg_info* mutable_event_msg();
  inline ::SProtoSpace::db_event_msg_info* release_event_msg();
  inline void set_allocated_event_msg(::SProtoSpace::db_event_msg_info* event_msg);

  // optional bool is_nty_client = 4;
  inline bool has_is_nty_client() const;
  inline void clear_is_nty_client();
  static const int kIsNtyClientFieldNumber = 4;
  inline bool is_nty_client() const;
  inline void set_is_nty_client(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_game_insert_event_msg_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_event_msg();
  inline void clear_has_event_msg();
  inline void set_has_is_nty_client();
  inline void clear_has_is_nty_client();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int proto_id_;
  bool is_nty_client_;
  ::SProtoSpace::db_event_msg_info* event_msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_game_insert_event_msg_ntf* default_instance_;
};
// -------------------------------------------------------------------

class game_pub_get_rank_data_req : public ::google::protobuf::Message {
 public:
  game_pub_get_rank_data_req();
  virtual ~game_pub_get_rank_data_req();

  game_pub_get_rank_data_req(const game_pub_get_rank_data_req& from);

  inline game_pub_get_rank_data_req& operator=(const game_pub_get_rank_data_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_pub_get_rank_data_req& default_instance();

  void Swap(game_pub_get_rank_data_req* other);

  // implements Message ----------------------------------------------

  game_pub_get_rank_data_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_pub_get_rank_data_req& from);
  void MergeFrom(const game_pub_get_rank_data_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_rank_data_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.RANK_TYPE type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::SProtoSpace::RANK_TYPE type() const;
  inline void set_type(::SProtoSpace::RANK_TYPE value);

  // optional int32 start_index = 4;
  inline bool has_start_index() const;
  inline void clear_start_index();
  static const int kStartIndexFieldNumber = 4;
  inline ::google::protobuf::int32 start_index() const;
  inline void set_start_index(::google::protobuf::int32 value);

  // optional int32 end_index = 5;
  inline bool has_end_index() const;
  inline void clear_end_index();
  static const int kEndIndexFieldNumber = 5;
  inline ::google::protobuf::int32 end_index() const;
  inline void set_end_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_pub_get_rank_data_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_start_index();
  inline void clear_has_start_index();
  inline void set_has_end_index();
  inline void clear_has_end_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int proto_id_;
  int type_;
  ::google::protobuf::int32 start_index_;
  ::google::protobuf::int32 end_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static game_pub_get_rank_data_req* default_instance_;
};
// -------------------------------------------------------------------

class game_pub_get_rank_data_ack : public ::google::protobuf::Message {
 public:
  game_pub_get_rank_data_ack();
  virtual ~game_pub_get_rank_data_ack();

  game_pub_get_rank_data_ack(const game_pub_get_rank_data_ack& from);

  inline game_pub_get_rank_data_ack& operator=(const game_pub_get_rank_data_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_pub_get_rank_data_ack& default_instance();

  void Swap(game_pub_get_rank_data_ack* other);

  // implements Message ----------------------------------------------

  game_pub_get_rank_data_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_pub_get_rank_data_ack& from);
  void MergeFrom(const game_pub_get_rank_data_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_rank_data_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.RANK_TYPE type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::SProtoSpace::RANK_TYPE type() const;
  inline void set_type(::SProtoSpace::RANK_TYPE value);

  // optional int32 start_index = 5;
  inline bool has_start_index() const;
  inline void clear_start_index();
  static const int kStartIndexFieldNumber = 5;
  inline ::google::protobuf::int32 start_index() const;
  inline void set_start_index(::google::protobuf::int32 value);

  // optional int32 end_index = 6;
  inline bool has_end_index() const;
  inline void clear_end_index();
  static const int kEndIndexFieldNumber = 6;
  inline ::google::protobuf::int32 end_index() const;
  inline void set_end_index(::google::protobuf::int32 value);

  // optional .SProtoSpace.rank_common_item my_item = 7;
  inline bool has_my_item() const;
  inline void clear_my_item();
  static const int kMyItemFieldNumber = 7;
  inline const ::SProtoSpace::rank_common_item& my_item() const;
  inline ::SProtoSpace::rank_common_item* mutable_my_item();
  inline ::SProtoSpace::rank_common_item* release_my_item();
  inline void set_allocated_my_item(::SProtoSpace::rank_common_item* my_item);

  // repeated .SProtoSpace.rank_common_item items = 8;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 8;
  inline const ::SProtoSpace::rank_common_item& items(int index) const;
  inline ::SProtoSpace::rank_common_item* mutable_items(int index);
  inline ::SProtoSpace::rank_common_item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::rank_common_item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::rank_common_item >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_pub_get_rank_data_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_start_index();
  inline void clear_has_start_index();
  inline void set_has_end_index();
  inline void clear_has_end_index();
  inline void set_has_my_item();
  inline void clear_has_my_item();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 role_id_;
  int type_;
  ::google::protobuf::int32 start_index_;
  ::SProtoSpace::rank_common_item* my_item_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::rank_common_item > items_;
  ::google::protobuf::int32 end_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static game_pub_get_rank_data_ack* default_instance_;
};
// -------------------------------------------------------------------

class update_rank_data_ntf : public ::google::protobuf::Message {
 public:
  update_rank_data_ntf();
  virtual ~update_rank_data_ntf();

  update_rank_data_ntf(const update_rank_data_ntf& from);

  inline update_rank_data_ntf& operator=(const update_rank_data_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_rank_data_ntf& default_instance();

  void Swap(update_rank_data_ntf* other);

  // implements Message ----------------------------------------------

  update_rank_data_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_rank_data_ntf& from);
  void MergeFrom(const update_rank_data_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = update_rank_data_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional .SProtoSpace.RANK_TYPE type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::SProtoSpace::RANK_TYPE type() const;
  inline void set_type(::SProtoSpace::RANK_TYPE value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // repeated uint32 values = 4;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 4;
  inline ::google::protobuf::uint32 values(int index) const;
  inline void set_values(int index, ::google::protobuf::uint32 value);
  inline void add_values(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      values() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:SProtoSpace.update_rank_data_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  int type_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > values_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static update_rank_data_ntf* default_instance_;
};
// -------------------------------------------------------------------

class pub_battle_replay_save_req : public ::google::protobuf::Message {
 public:
  pub_battle_replay_save_req();
  virtual ~pub_battle_replay_save_req();

  pub_battle_replay_save_req(const pub_battle_replay_save_req& from);

  inline pub_battle_replay_save_req& operator=(const pub_battle_replay_save_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_battle_replay_save_req& default_instance();

  void Swap(pub_battle_replay_save_req* other);

  // implements Message ----------------------------------------------

  pub_battle_replay_save_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_battle_replay_save_req& from);
  void MergeFrom(const pub_battle_replay_save_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_battle_replay_save_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 replay_id = 2;
  inline bool has_replay_id() const;
  inline void clear_replay_id();
  static const int kReplayIdFieldNumber = 2;
  inline ::google::protobuf::uint64 replay_id() const;
  inline void set_replay_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.battle_replay_info data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::SProtoSpace::battle_replay_info& data() const;
  inline ::SProtoSpace::battle_replay_info* mutable_data();
  inline ::SProtoSpace::battle_replay_info* release_data();
  inline void set_allocated_data(::SProtoSpace::battle_replay_info* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_battle_replay_save_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_replay_id();
  inline void clear_has_replay_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 replay_id_;
  ::SProtoSpace::battle_replay_info* data_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_battle_replay_save_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_battle_replay_req : public ::google::protobuf::Message {
 public:
  pub_battle_replay_req();
  virtual ~pub_battle_replay_req();

  pub_battle_replay_req(const pub_battle_replay_req& from);

  inline pub_battle_replay_req& operator=(const pub_battle_replay_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_battle_replay_req& default_instance();

  void Swap(pub_battle_replay_req* other);

  // implements Message ----------------------------------------------

  pub_battle_replay_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_battle_replay_req& from);
  void MergeFrom(const pub_battle_replay_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_battle_replay_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 replay_id = 3;
  inline bool has_replay_id() const;
  inline void clear_replay_id();
  static const int kReplayIdFieldNumber = 3;
  inline ::google::protobuf::uint64 replay_id() const;
  inline void set_replay_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_battle_replay_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_replay_id();
  inline void clear_has_replay_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 replay_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_battle_replay_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_battle_replay_ack : public ::google::protobuf::Message {
 public:
  pub_battle_replay_ack();
  virtual ~pub_battle_replay_ack();

  pub_battle_replay_ack(const pub_battle_replay_ack& from);

  inline pub_battle_replay_ack& operator=(const pub_battle_replay_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_battle_replay_ack& default_instance();

  void Swap(pub_battle_replay_ack* other);

  // implements Message ----------------------------------------------

  pub_battle_replay_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_battle_replay_ack& from);
  void MergeFrom(const pub_battle_replay_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_battle_replay_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional int32 ret = 3 [default = 0];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 replay_id = 4;
  inline bool has_replay_id() const;
  inline void clear_replay_id();
  static const int kReplayIdFieldNumber = 4;
  inline ::google::protobuf::uint64 replay_id() const;
  inline void set_replay_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.battle_replay_info data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::SProtoSpace::battle_replay_info& data() const;
  inline ::SProtoSpace::battle_replay_info* mutable_data();
  inline ::SProtoSpace::battle_replay_info* release_data();
  inline void set_allocated_data(::SProtoSpace::battle_replay_info* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_battle_replay_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_replay_id();
  inline void clear_has_replay_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 replay_id_;
  ::SProtoSpace::battle_replay_info* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_battle_replay_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_query_scene_req : public ::google::protobuf::Message {
 public:
  pub_query_scene_req();
  virtual ~pub_query_scene_req();

  pub_query_scene_req(const pub_query_scene_req& from);

  inline pub_query_scene_req& operator=(const pub_query_scene_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_query_scene_req& default_instance();

  void Swap(pub_query_scene_req* other);

  // implements Message ----------------------------------------------

  pub_query_scene_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_query_scene_req& from);
  void MergeFrom(const pub_query_scene_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_query_scene_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint32 query_type = 2;
  inline bool has_query_type() const;
  inline void clear_query_type();
  static const int kQueryTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 query_type() const;
  inline void set_query_type(::google::protobuf::uint32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 scene_id = 4;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 4;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // optional uint32 scene_type = 5;
  inline bool has_scene_type() const;
  inline void clear_scene_type();
  static const int kSceneTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 scene_type() const;
  inline void set_scene_type(::google::protobuf::uint32 value);

  // optional uint32 last_scene_id = 6;
  inline bool has_last_scene_id() const;
  inline void clear_last_scene_id();
  static const int kLastSceneIdFieldNumber = 6;
  inline ::google::protobuf::uint32 last_scene_id() const;
  inline void set_last_scene_id(::google::protobuf::uint32 value);

  // optional uint32 last_scene_type = 7;
  inline bool has_last_scene_type() const;
  inline void clear_last_scene_type();
  static const int kLastSceneTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 last_scene_type() const;
  inline void set_last_scene_type(::google::protobuf::uint32 value);

  // optional string token = 8;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 8;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_query_scene_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_query_type();
  inline void clear_has_query_type();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_type();
  inline void clear_has_scene_type();
  inline void set_has_last_scene_id();
  inline void clear_has_last_scene_id();
  inline void set_has_last_scene_type();
  inline void clear_has_last_scene_type();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 query_type_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint32 scene_id_;
  ::google::protobuf::uint32 scene_type_;
  ::google::protobuf::uint32 last_scene_id_;
  ::google::protobuf::uint32 last_scene_type_;
  ::std::string* token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_query_scene_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_query_scene_ack : public ::google::protobuf::Message {
 public:
  pub_query_scene_ack();
  virtual ~pub_query_scene_ack();

  pub_query_scene_ack(const pub_query_scene_ack& from);

  inline pub_query_scene_ack& operator=(const pub_query_scene_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_query_scene_ack& default_instance();

  void Swap(pub_query_scene_ack* other);

  // implements Message ----------------------------------------------

  pub_query_scene_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_query_scene_ack& from);
  void MergeFrom(const pub_query_scene_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_query_scene_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint32 query_type = 2;
  inline bool has_query_type() const;
  inline void clear_query_type();
  static const int kQueryTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 query_type() const;
  inline void set_query_type(::google::protobuf::uint32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional int32 ret = 4 [default = 0];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint32 scene_id = 5;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 5;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // optional uint32 scene_type = 6;
  inline bool has_scene_type() const;
  inline void clear_scene_type();
  static const int kSceneTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 scene_type() const;
  inline void set_scene_type(::google::protobuf::uint32 value);

  // optional uint64 game_id = 7;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 7;
  inline ::google::protobuf::uint64 game_id() const;
  inline void set_game_id(::google::protobuf::uint64 value);

  // optional string token = 8;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 8;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_query_scene_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_query_type();
  inline void clear_has_query_type();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_type();
  inline void clear_has_scene_type();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 query_type_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint32 scene_id_;
  ::google::protobuf::uint64 game_id_;
  ::std::string* token_;
  ::google::protobuf::uint32 scene_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_query_scene_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_destory_scene_ntf : public ::google::protobuf::Message {
 public:
  pub_destory_scene_ntf();
  virtual ~pub_destory_scene_ntf();

  pub_destory_scene_ntf(const pub_destory_scene_ntf& from);

  inline pub_destory_scene_ntf& operator=(const pub_destory_scene_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_destory_scene_ntf& default_instance();

  void Swap(pub_destory_scene_ntf* other);

  // implements Message ----------------------------------------------

  pub_destory_scene_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_destory_scene_ntf& from);
  void MergeFrom(const pub_destory_scene_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_destory_scene_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint32 scene_id = 2;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // optional uint32 scene_type = 3;
  inline bool has_scene_type() const;
  inline void clear_scene_type();
  static const int kSceneTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 scene_type() const;
  inline void set_scene_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_destory_scene_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_type();
  inline void clear_has_scene_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 scene_id_;
  ::google::protobuf::uint32 scene_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_destory_scene_ntf* default_instance_;
};
// -------------------------------------------------------------------

class pub_scene_role_change_ntf : public ::google::protobuf::Message {
 public:
  pub_scene_role_change_ntf();
  virtual ~pub_scene_role_change_ntf();

  pub_scene_role_change_ntf(const pub_scene_role_change_ntf& from);

  inline pub_scene_role_change_ntf& operator=(const pub_scene_role_change_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_scene_role_change_ntf& default_instance();

  void Swap(pub_scene_role_change_ntf* other);

  // implements Message ----------------------------------------------

  pub_scene_role_change_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_scene_role_change_ntf& from);
  void MergeFrom(const pub_scene_role_change_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_scene_role_change_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint32 scene_id = 2;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // optional uint32 scene_type = 3;
  inline bool has_scene_type() const;
  inline void clear_scene_type();
  static const int kSceneTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 scene_type() const;
  inline void set_scene_type(::google::protobuf::uint32 value);

  // repeated uint64 add_roles = 4;
  inline int add_roles_size() const;
  inline void clear_add_roles();
  static const int kAddRolesFieldNumber = 4;
  inline ::google::protobuf::uint64 add_roles(int index) const;
  inline void set_add_roles(int index, ::google::protobuf::uint64 value);
  inline void add_add_roles(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      add_roles() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_add_roles();

  // repeated uint64 del_roles = 5;
  inline int del_roles_size() const;
  inline void clear_del_roles();
  static const int kDelRolesFieldNumber = 5;
  inline ::google::protobuf::uint64 del_roles(int index) const;
  inline void set_del_roles(int index, ::google::protobuf::uint64 value);
  inline void add_del_roles(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      del_roles() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_del_roles();

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_scene_role_change_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_type();
  inline void clear_has_scene_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 scene_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > add_roles_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > del_roles_;
  ::google::protobuf::uint32 scene_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_scene_role_change_ntf* default_instance_;
};
// -------------------------------------------------------------------

class pub_update_3d_scene_info_ntf : public ::google::protobuf::Message {
 public:
  pub_update_3d_scene_info_ntf();
  virtual ~pub_update_3d_scene_info_ntf();

  pub_update_3d_scene_info_ntf(const pub_update_3d_scene_info_ntf& from);

  inline pub_update_3d_scene_info_ntf& operator=(const pub_update_3d_scene_info_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_update_3d_scene_info_ntf& default_instance();

  void Swap(pub_update_3d_scene_info_ntf* other);

  // implements Message ----------------------------------------------

  pub_update_3d_scene_info_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_update_3d_scene_info_ntf& from);
  void MergeFrom(const pub_update_3d_scene_info_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_update_3d_scene_info_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint32 scene_id = 2;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // optional uint32 scene_type = 3;
  inline bool has_scene_type() const;
  inline void clear_scene_type();
  static const int kSceneTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 scene_type() const;
  inline void set_scene_type(::google::protobuf::uint32 value);

  // optional uint32 conf_id = 4;
  inline bool has_conf_id() const;
  inline void clear_conf_id();
  static const int kConfIdFieldNumber = 4;
  inline ::google::protobuf::uint32 conf_id() const;
  inline void set_conf_id(::google::protobuf::uint32 value);

  // optional string scene_name = 5;
  inline bool has_scene_name() const;
  inline void clear_scene_name();
  static const int kSceneNameFieldNumber = 5;
  inline const ::std::string& scene_name() const;
  inline void set_scene_name(const ::std::string& value);
  inline void set_scene_name(const char* value);
  inline void set_scene_name(const char* value, size_t size);
  inline ::std::string* mutable_scene_name();
  inline ::std::string* release_scene_name();
  inline void set_allocated_scene_name(::std::string* scene_name);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_update_3d_scene_info_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_type();
  inline void clear_has_scene_type();
  inline void set_has_conf_id();
  inline void clear_has_conf_id();
  inline void set_has_scene_name();
  inline void clear_has_scene_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 scene_id_;
  ::google::protobuf::uint32 scene_type_;
  ::google::protobuf::uint32 conf_id_;
  ::std::string* scene_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_update_3d_scene_info_ntf* default_instance_;
};
// -------------------------------------------------------------------

class pub_switch_game_id_ntf : public ::google::protobuf::Message {
 public:
  pub_switch_game_id_ntf();
  virtual ~pub_switch_game_id_ntf();

  pub_switch_game_id_ntf(const pub_switch_game_id_ntf& from);

  inline pub_switch_game_id_ntf& operator=(const pub_switch_game_id_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_switch_game_id_ntf& default_instance();

  void Swap(pub_switch_game_id_ntf* other);

  // implements Message ----------------------------------------------

  pub_switch_game_id_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_switch_game_id_ntf& from);
  void MergeFrom(const pub_switch_game_id_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_switch_game_id_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 gs_id = 2;
  inline bool has_gs_id() const;
  inline void clear_gs_id();
  static const int kGsIdFieldNumber = 2;
  inline ::google::protobuf::uint64 gs_id() const;
  inline void set_gs_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_switch_game_id_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_gs_id();
  inline void clear_has_gs_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 gs_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_switch_game_id_ntf* default_instance_;
};
// -------------------------------------------------------------------

class pub_officer_daily_salary_req : public ::google::protobuf::Message {
 public:
  pub_officer_daily_salary_req();
  virtual ~pub_officer_daily_salary_req();

  pub_officer_daily_salary_req(const pub_officer_daily_salary_req& from);

  inline pub_officer_daily_salary_req& operator=(const pub_officer_daily_salary_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_officer_daily_salary_req& default_instance();

  void Swap(pub_officer_daily_salary_req* other);

  // implements Message ----------------------------------------------

  pub_officer_daily_salary_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_officer_daily_salary_req& from);
  void MergeFrom(const pub_officer_daily_salary_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_officer_daily_salary_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 grade = 3;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 3;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_officer_daily_salary_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int protoid_;
  ::google::protobuf::uint32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_officer_daily_salary_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_officer_daily_salary_ack : public ::google::protobuf::Message {
 public:
  pub_officer_daily_salary_ack();
  virtual ~pub_officer_daily_salary_ack();

  pub_officer_daily_salary_ack(const pub_officer_daily_salary_ack& from);

  inline pub_officer_daily_salary_ack& operator=(const pub_officer_daily_salary_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_officer_daily_salary_ack& default_instance();

  void Swap(pub_officer_daily_salary_ack* other);

  // implements Message ----------------------------------------------

  pub_officer_daily_salary_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_officer_daily_salary_ack& from);
  void MergeFrom(const pub_officer_daily_salary_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_officer_daily_salary_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 grade = 3;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 3;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);

  // optional uint32 ranking_id = 4;
  inline bool has_ranking_id() const;
  inline void clear_ranking_id();
  static const int kRankingIdFieldNumber = 4;
  inline ::google::protobuf::uint32 ranking_id() const;
  inline void set_ranking_id(::google::protobuf::uint32 value);

  // optional int32 ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_officer_daily_salary_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_ranking_id();
  inline void clear_has_ranking_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int protoid_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::uint32 ranking_id_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_officer_daily_salary_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_offical_battle_report_req : public ::google::protobuf::Message {
 public:
  pub_offical_battle_report_req();
  virtual ~pub_offical_battle_report_req();

  pub_offical_battle_report_req(const pub_offical_battle_report_req& from);

  inline pub_offical_battle_report_req& operator=(const pub_offical_battle_report_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_offical_battle_report_req& default_instance();

  void Swap(pub_offical_battle_report_req* other);

  // implements Message ----------------------------------------------

  pub_offical_battle_report_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_offical_battle_report_req& from);
  void MergeFrom(const pub_offical_battle_report_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_offical_battle_report_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_offical_battle_report_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_offical_battle_report_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_offical_battle_report_ack : public ::google::protobuf::Message {
 public:
  pub_offical_battle_report_ack();
  virtual ~pub_offical_battle_report_ack();

  pub_offical_battle_report_ack(const pub_offical_battle_report_ack& from);

  inline pub_offical_battle_report_ack& operator=(const pub_offical_battle_report_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_offical_battle_report_ack& default_instance();

  void Swap(pub_offical_battle_report_ack* other);

  // implements Message ----------------------------------------------

  pub_offical_battle_report_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_offical_battle_report_ack& from);
  void MergeFrom(const pub_offical_battle_report_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_offical_battle_report_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ESSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // repeated .SProtoSpace.offical_battle_report_unit reports = 4;
  inline int reports_size() const;
  inline void clear_reports();
  static const int kReportsFieldNumber = 4;
  inline const ::SProtoSpace::offical_battle_report_unit& reports(int index) const;
  inline ::SProtoSpace::offical_battle_report_unit* mutable_reports(int index);
  inline ::SProtoSpace::offical_battle_report_unit* add_reports();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_battle_report_unit >&
      reports() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_battle_report_unit >*
      mutable_reports();

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_offical_battle_report_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_battle_report_unit > reports_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_offical_battle_report_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_get_offical_formation_req : public ::google::protobuf::Message {
 public:
  pub_get_offical_formation_req();
  virtual ~pub_get_offical_formation_req();

  pub_get_offical_formation_req(const pub_get_offical_formation_req& from);

  inline pub_get_offical_formation_req& operator=(const pub_get_offical_formation_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_get_offical_formation_req& default_instance();

  void Swap(pub_get_offical_formation_req* other);

  // implements Message ----------------------------------------------

  pub_get_offical_formation_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_get_offical_formation_req& from);
  void MergeFrom(const pub_get_offical_formation_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_formation_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 my_role_id = 2;
  inline bool has_my_role_id() const;
  inline void clear_my_role_id();
  static const int kMyRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 my_role_id() const;
  inline void set_my_role_id(::google::protobuf::uint64 value);

  // optional uint64 dest_role_id = 3;
  inline bool has_dest_role_id() const;
  inline void clear_dest_role_id();
  static const int kDestRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 dest_role_id() const;
  inline void set_dest_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.EGrade office_lv = 4;
  inline bool has_office_lv() const;
  inline void clear_office_lv();
  static const int kOfficeLvFieldNumber = 4;
  inline ::SProtoSpace::EGrade office_lv() const;
  inline void set_office_lv(::SProtoSpace::EGrade value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_get_offical_formation_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_my_role_id();
  inline void clear_has_my_role_id();
  inline void set_has_dest_role_id();
  inline void clear_has_dest_role_id();
  inline void set_has_office_lv();
  inline void clear_has_office_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 my_role_id_;
  int proto_id_;
  int office_lv_;
  ::google::protobuf::uint64 dest_role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_get_offical_formation_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_get_offical_formation_ack : public ::google::protobuf::Message {
 public:
  pub_get_offical_formation_ack();
  virtual ~pub_get_offical_formation_ack();

  pub_get_offical_formation_ack(const pub_get_offical_formation_ack& from);

  inline pub_get_offical_formation_ack& operator=(const pub_get_offical_formation_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_get_offical_formation_ack& default_instance();

  void Swap(pub_get_offical_formation_ack* other);

  // implements Message ----------------------------------------------

  pub_get_offical_formation_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_get_offical_formation_ack& from);
  void MergeFrom(const pub_get_offical_formation_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_formation_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint64 my_role_id = 3;
  inline bool has_my_role_id() const;
  inline void clear_my_role_id();
  static const int kMyRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 my_role_id() const;
  inline void set_my_role_id(::google::protobuf::uint64 value);

  // optional uint64 dest_role_id = 4;
  inline bool has_dest_role_id() const;
  inline void clear_dest_role_id();
  static const int kDestRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 dest_role_id() const;
  inline void set_dest_role_id(::google::protobuf::uint64 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional string head = 7;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 7;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  inline void set_allocated_head(::std::string* head);

  // optional int32 bord = 8;
  inline bool has_bord() const;
  inline void clear_bord();
  static const int kBordFieldNumber = 8;
  inline ::google::protobuf::int32 bord() const;
  inline void set_bord(::google::protobuf::int32 value);

  // optional int32 grade = 9;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 9;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // optional int32 lv = 10;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 10;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // repeated .SProtoSpace.hero_base_info heros = 11;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 11;
  inline const ::SProtoSpace::hero_base_info& heros(int index) const;
  inline ::SProtoSpace::hero_base_info* mutable_heros(int index);
  inline ::SProtoSpace::hero_base_info* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info >*
      mutable_heros();

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_get_offical_formation_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_my_role_id();
  inline void clear_has_my_role_id();
  inline void set_has_dest_role_id();
  inline void clear_has_dest_role_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_bord();
  inline void clear_has_bord();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_lv();
  inline void clear_has_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint64 my_role_id_;
  ::google::protobuf::uint64 dest_role_id_;
  ::std::string* name_;
  ::std::string* head_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 bord_;
  ::google::protobuf::int32 grade_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info > heros_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_get_offical_formation_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_gm_upgrade_office_req : public ::google::protobuf::Message {
 public:
  pub_gm_upgrade_office_req();
  virtual ~pub_gm_upgrade_office_req();

  pub_gm_upgrade_office_req(const pub_gm_upgrade_office_req& from);

  inline pub_gm_upgrade_office_req& operator=(const pub_gm_upgrade_office_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_gm_upgrade_office_req& default_instance();

  void Swap(pub_gm_upgrade_office_req* other);

  // implements Message ----------------------------------------------

  pub_gm_upgrade_office_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_gm_upgrade_office_req& from);
  void MergeFrom(const pub_gm_upgrade_office_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_upgrade_office_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional int32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // optional .SProtoSpace.arena_item_data data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::SProtoSpace::arena_item_data& data() const;
  inline ::SProtoSpace::arena_item_data* mutable_data();
  inline ::SProtoSpace::arena_item_data* release_data();
  inline void set_allocated_data(::SProtoSpace::arena_item_data* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_gm_upgrade_office_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 grade_;
  ::SProtoSpace::arena_item_data* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_gm_upgrade_office_req* default_instance_;
};
// -------------------------------------------------------------------

class offical_robot_gen_req : public ::google::protobuf::Message {
 public:
  offical_robot_gen_req();
  virtual ~offical_robot_gen_req();

  offical_robot_gen_req(const offical_robot_gen_req& from);

  inline offical_robot_gen_req& operator=(const offical_robot_gen_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_robot_gen_req& default_instance();

  void Swap(offical_robot_gen_req* other);

  // implements Message ----------------------------------------------

  offical_robot_gen_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offical_robot_gen_req& from);
  void MergeFrom(const offical_robot_gen_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_robot_gen_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.offical_robot_gen_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static offical_robot_gen_req* default_instance_;
};
// -------------------------------------------------------------------

class offical_robot_gen_ack : public ::google::protobuf::Message {
 public:
  offical_robot_gen_ack();
  virtual ~offical_robot_gen_ack();

  offical_robot_gen_ack(const offical_robot_gen_ack& from);

  inline offical_robot_gen_ack& operator=(const offical_robot_gen_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_robot_gen_ack& default_instance();

  void Swap(offical_robot_gen_ack* other);

  // implements Message ----------------------------------------------

  offical_robot_gen_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offical_robot_gen_ack& from);
  void MergeFrom(const offical_robot_gen_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_robot_gen_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.offical_robot_gen_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static offical_robot_gen_ack* default_instance_;
};
// -------------------------------------------------------------------

class get_minimum_chat_room_req : public ::google::protobuf::Message {
 public:
  get_minimum_chat_room_req();
  virtual ~get_minimum_chat_room_req();

  get_minimum_chat_room_req(const get_minimum_chat_room_req& from);

  inline get_minimum_chat_room_req& operator=(const get_minimum_chat_room_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_minimum_chat_room_req& default_instance();

  void Swap(get_minimum_chat_room_req* other);

  // implements Message ----------------------------------------------

  get_minimum_chat_room_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_minimum_chat_room_req& from);
  void MergeFrom(const get_minimum_chat_room_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = get_minimum_chat_room_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_minimum_chat_room_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static get_minimum_chat_room_req* default_instance_;
};
// -------------------------------------------------------------------

class get_minimum_chat_room_ack : public ::google::protobuf::Message {
 public:
  get_minimum_chat_room_ack();
  virtual ~get_minimum_chat_room_ack();

  get_minimum_chat_room_ack(const get_minimum_chat_room_ack& from);

  inline get_minimum_chat_room_ack& operator=(const get_minimum_chat_room_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_minimum_chat_room_ack& default_instance();

  void Swap(get_minimum_chat_room_ack* other);

  // implements Message ----------------------------------------------

  get_minimum_chat_room_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_minimum_chat_room_ack& from);
  void MergeFrom(const get_minimum_chat_room_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = get_minimum_chat_room_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional int32 room_id = 4;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 4;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional uint64 game_id = 5;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 5;
  inline ::google::protobuf::uint64 game_id() const;
  inline void set_game_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_minimum_chat_room_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_game_id();
  inline void clear_has_game_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 game_id_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static get_minimum_chat_room_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_get_chat_room_list_req : public ::google::protobuf::Message {
 public:
  pub_get_chat_room_list_req();
  virtual ~pub_get_chat_room_list_req();

  pub_get_chat_room_list_req(const pub_get_chat_room_list_req& from);

  inline pub_get_chat_room_list_req& operator=(const pub_get_chat_room_list_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_get_chat_room_list_req& default_instance();

  void Swap(pub_get_chat_room_list_req* other);

  // implements Message ----------------------------------------------

  pub_get_chat_room_list_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_get_chat_room_list_req& from);
  void MergeFrom(const pub_get_chat_room_list_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_chat_room_list_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional int32 index_start = 3;
  inline bool has_index_start() const;
  inline void clear_index_start();
  static const int kIndexStartFieldNumber = 3;
  inline ::google::protobuf::int32 index_start() const;
  inline void set_index_start(::google::protobuf::int32 value);

  // optional int32 index_end = 4;
  inline bool has_index_end() const;
  inline void clear_index_end();
  static const int kIndexEndFieldNumber = 4;
  inline ::google::protobuf::int32 index_end() const;
  inline void set_index_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_get_chat_room_list_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_index_start();
  inline void clear_has_index_start();
  inline void set_has_index_end();
  inline void clear_has_index_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int proto_id_;
  ::google::protobuf::int32 index_start_;
  ::google::protobuf::int32 index_end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_get_chat_room_list_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_get_chat_room_list_ack : public ::google::protobuf::Message {
 public:
  pub_get_chat_room_list_ack();
  virtual ~pub_get_chat_room_list_ack();

  pub_get_chat_room_list_ack(const pub_get_chat_room_list_ack& from);

  inline pub_get_chat_room_list_ack& operator=(const pub_get_chat_room_list_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_get_chat_room_list_ack& default_instance();

  void Swap(pub_get_chat_room_list_ack* other);

  // implements Message ----------------------------------------------

  pub_get_chat_room_list_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_get_chat_room_list_ack& from);
  void MergeFrom(const pub_get_chat_room_list_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_chat_room_list_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional int32 index_start = 4;
  inline bool has_index_start() const;
  inline void clear_index_start();
  static const int kIndexStartFieldNumber = 4;
  inline ::google::protobuf::int32 index_start() const;
  inline void set_index_start(::google::protobuf::int32 value);

  // optional int32 index_end = 5;
  inline bool has_index_end() const;
  inline void clear_index_end();
  static const int kIndexEndFieldNumber = 5;
  inline ::google::protobuf::int32 index_end() const;
  inline void set_index_end(::google::protobuf::int32 value);

  // repeated .SProtoSpace.chat_room_state rooms = 6;
  inline int rooms_size() const;
  inline void clear_rooms();
  static const int kRoomsFieldNumber = 6;
  inline const ::SProtoSpace::chat_room_state& rooms(int index) const;
  inline ::SProtoSpace::chat_room_state* mutable_rooms(int index);
  inline ::SProtoSpace::chat_room_state* add_rooms();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chat_room_state >&
      rooms() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chat_room_state >*
      mutable_rooms();

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_get_chat_room_list_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_index_start();
  inline void clear_has_index_start();
  inline void set_has_index_end();
  inline void clear_has_index_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::int32 index_start_;
  ::google::protobuf::int32 index_end_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chat_room_state > rooms_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_get_chat_room_list_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_create_3dchat_room_req : public ::google::protobuf::Message {
 public:
  pub_create_3dchat_room_req();
  virtual ~pub_create_3dchat_room_req();

  pub_create_3dchat_room_req(const pub_create_3dchat_room_req& from);

  inline pub_create_3dchat_room_req& operator=(const pub_create_3dchat_room_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_create_3dchat_room_req& default_instance();

  void Swap(pub_create_3dchat_room_req* other);

  // implements Message ----------------------------------------------

  pub_create_3dchat_room_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_create_3dchat_room_req& from);
  void MergeFrom(const pub_create_3dchat_room_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_create_3dchat_room_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional int32 room_conf_id = 2;
  inline bool has_room_conf_id() const;
  inline void clear_room_conf_id();
  static const int kRoomConfIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_conf_id() const;
  inline void set_room_conf_id(::google::protobuf::int32 value);

  // optional string room_name = 3;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 3;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  inline ::std::string* release_room_name();
  inline void set_allocated_room_name(::std::string* room_name);

  // optional string token = 4;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 4;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional int32 fee = 5;
  inline bool has_fee() const;
  inline void clear_fee();
  static const int kFeeFieldNumber = 5;
  inline ::google::protobuf::int32 fee() const;
  inline void set_fee(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_create_3dchat_room_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_room_conf_id();
  inline void clear_has_room_conf_id();
  inline void set_has_room_name();
  inline void clear_has_room_name();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_fee();
  inline void clear_has_fee();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 room_conf_id_;
  ::std::string* room_name_;
  ::std::string* token_;
  ::google::protobuf::int32 fee_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_create_3dchat_room_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_create_3dchat_room_ack : public ::google::protobuf::Message {
 public:
  pub_create_3dchat_room_ack();
  virtual ~pub_create_3dchat_room_ack();

  pub_create_3dchat_room_ack(const pub_create_3dchat_room_ack& from);

  inline pub_create_3dchat_room_ack& operator=(const pub_create_3dchat_room_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_create_3dchat_room_ack& default_instance();

  void Swap(pub_create_3dchat_room_ack* other);

  // implements Message ----------------------------------------------

  pub_create_3dchat_room_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_create_3dchat_room_ack& from);
  void MergeFrom(const pub_create_3dchat_room_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_create_3dchat_room_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 create_tm = 4;
  inline bool has_create_tm() const;
  inline void clear_create_tm();
  static const int kCreateTmFieldNumber = 4;
  inline ::google::protobuf::int32 create_tm() const;
  inline void set_create_tm(::google::protobuf::int32 value);

  // optional int32 room_conf_id = 5;
  inline bool has_room_conf_id() const;
  inline void clear_room_conf_id();
  static const int kRoomConfIdFieldNumber = 5;
  inline ::google::protobuf::int32 room_conf_id() const;
  inline void set_room_conf_id(::google::protobuf::int32 value);

  // optional string room_name = 6;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 6;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  inline ::std::string* release_room_name();
  inline void set_allocated_room_name(::std::string* room_name);

  // optional string token = 7;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 7;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_create_3dchat_room_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_create_tm();
  inline void clear_has_create_tm();
  inline void set_has_room_conf_id();
  inline void clear_has_room_conf_id();
  inline void set_has_room_name();
  inline void clear_has_room_name();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 create_tm_;
  ::std::string* room_name_;
  ::std::string* token_;
  ::google::protobuf::int32 room_conf_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_create_3dchat_room_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_top_3dchat_room_req : public ::google::protobuf::Message {
 public:
  pub_top_3dchat_room_req();
  virtual ~pub_top_3dchat_room_req();

  pub_top_3dchat_room_req(const pub_top_3dchat_room_req& from);

  inline pub_top_3dchat_room_req& operator=(const pub_top_3dchat_room_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_top_3dchat_room_req& default_instance();

  void Swap(pub_top_3dchat_room_req* other);

  // implements Message ----------------------------------------------

  pub_top_3dchat_room_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_top_3dchat_room_req& from);
  void MergeFrom(const pub_top_3dchat_room_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_top_3dchat_room_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional int32 top_tm = 3;
  inline bool has_top_tm() const;
  inline void clear_top_tm();
  static const int kTopTmFieldNumber = 3;
  inline ::google::protobuf::int32 top_tm() const;
  inline void set_top_tm(::google::protobuf::int32 value);

  // optional int32 dur = 4;
  inline bool has_dur() const;
  inline void clear_dur();
  static const int kDurFieldNumber = 4;
  inline ::google::protobuf::int32 dur() const;
  inline void set_dur(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_top_3dchat_room_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_top_tm();
  inline void clear_has_top_tm();
  inline void set_has_dur();
  inline void clear_has_dur();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 top_tm_;
  ::google::protobuf::int32 dur_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_top_3dchat_room_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_top_3dchat_room_ack : public ::google::protobuf::Message {
 public:
  pub_top_3dchat_room_ack();
  virtual ~pub_top_3dchat_room_ack();

  pub_top_3dchat_room_ack(const pub_top_3dchat_room_ack& from);

  inline pub_top_3dchat_room_ack& operator=(const pub_top_3dchat_room_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_top_3dchat_room_ack& default_instance();

  void Swap(pub_top_3dchat_room_ack* other);

  // implements Message ----------------------------------------------

  pub_top_3dchat_room_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_top_3dchat_room_ack& from);
  void MergeFrom(const pub_top_3dchat_room_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_top_3dchat_room_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional int32 top_tm = 4;
  inline bool has_top_tm() const;
  inline void clear_top_tm();
  static const int kTopTmFieldNumber = 4;
  inline ::google::protobuf::int32 top_tm() const;
  inline void set_top_tm(::google::protobuf::int32 value);

  // optional int32 dur = 5;
  inline bool has_dur() const;
  inline void clear_dur();
  static const int kDurFieldNumber = 5;
  inline ::google::protobuf::int32 dur() const;
  inline void set_dur(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_top_3dchat_room_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_top_tm();
  inline void clear_has_top_tm();
  inline void set_has_dur();
  inline void clear_has_dur();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 top_tm_;
  ::google::protobuf::int32 dur_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_top_3dchat_room_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_cancel_top_3dchat_room_req : public ::google::protobuf::Message {
 public:
  pub_cancel_top_3dchat_room_req();
  virtual ~pub_cancel_top_3dchat_room_req();

  pub_cancel_top_3dchat_room_req(const pub_cancel_top_3dchat_room_req& from);

  inline pub_cancel_top_3dchat_room_req& operator=(const pub_cancel_top_3dchat_room_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_cancel_top_3dchat_room_req& default_instance();

  void Swap(pub_cancel_top_3dchat_room_req* other);

  // implements Message ----------------------------------------------

  pub_cancel_top_3dchat_room_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_cancel_top_3dchat_room_req& from);
  void MergeFrom(const pub_cancel_top_3dchat_room_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_cancel_top_3dchat_room_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_cancel_top_3dchat_room_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_cancel_top_3dchat_room_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_cancel_top_3dchat_room_ack : public ::google::protobuf::Message {
 public:
  pub_cancel_top_3dchat_room_ack();
  virtual ~pub_cancel_top_3dchat_room_ack();

  pub_cancel_top_3dchat_room_ack(const pub_cancel_top_3dchat_room_ack& from);

  inline pub_cancel_top_3dchat_room_ack& operator=(const pub_cancel_top_3dchat_room_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_cancel_top_3dchat_room_ack& default_instance();

  void Swap(pub_cancel_top_3dchat_room_ack* other);

  // implements Message ----------------------------------------------

  pub_cancel_top_3dchat_room_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_cancel_top_3dchat_room_ack& from);
  void MergeFrom(const pub_cancel_top_3dchat_room_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_cancel_top_3dchat_room_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_cancel_top_3dchat_room_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_cancel_top_3dchat_room_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_change_name_3dchat_room_req : public ::google::protobuf::Message {
 public:
  pub_change_name_3dchat_room_req();
  virtual ~pub_change_name_3dchat_room_req();

  pub_change_name_3dchat_room_req(const pub_change_name_3dchat_room_req& from);

  inline pub_change_name_3dchat_room_req& operator=(const pub_change_name_3dchat_room_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_change_name_3dchat_room_req& default_instance();

  void Swap(pub_change_name_3dchat_room_req* other);

  // implements Message ----------------------------------------------

  pub_change_name_3dchat_room_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_change_name_3dchat_room_req& from);
  void MergeFrom(const pub_change_name_3dchat_room_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_change_name_3dchat_room_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional string room_name = 3;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 3;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  inline ::std::string* release_room_name();
  inline void set_allocated_room_name(::std::string* room_name);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_change_name_3dchat_room_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_room_name();
  inline void clear_has_room_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 room_id_;
  ::std::string* room_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_change_name_3dchat_room_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_change_name_3dchat_room_ack : public ::google::protobuf::Message {
 public:
  pub_change_name_3dchat_room_ack();
  virtual ~pub_change_name_3dchat_room_ack();

  pub_change_name_3dchat_room_ack(const pub_change_name_3dchat_room_ack& from);

  inline pub_change_name_3dchat_room_ack& operator=(const pub_change_name_3dchat_room_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_change_name_3dchat_room_ack& default_instance();

  void Swap(pub_change_name_3dchat_room_ack* other);

  // implements Message ----------------------------------------------

  pub_change_name_3dchat_room_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_change_name_3dchat_room_ack& from);
  void MergeFrom(const pub_change_name_3dchat_room_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_change_name_3dchat_room_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional string room_name = 4;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 4;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  inline ::std::string* release_room_name();
  inline void set_allocated_room_name(::std::string* room_name);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_change_name_3dchat_room_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_room_name();
  inline void clear_has_room_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 ret_;
  ::std::string* room_name_;
  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_change_name_3dchat_room_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_get_role_gs_id_req : public ::google::protobuf::Message {
 public:
  pub_get_role_gs_id_req();
  virtual ~pub_get_role_gs_id_req();

  pub_get_role_gs_id_req(const pub_get_role_gs_id_req& from);

  inline pub_get_role_gs_id_req& operator=(const pub_get_role_gs_id_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_get_role_gs_id_req& default_instance();

  void Swap(pub_get_role_gs_id_req* other);

  // implements Message ----------------------------------------------

  pub_get_role_gs_id_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_get_role_gs_id_req& from);
  void MergeFrom(const pub_get_role_gs_id_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_gs_id_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional uint64 sour_role_id = 2;
  inline bool has_sour_role_id() const;
  inline void clear_sour_role_id();
  static const int kSourRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 sour_role_id() const;
  inline void set_sour_role_id(::google::protobuf::uint64 value);

  // optional uint64 dest_role_id = 3;
  inline bool has_dest_role_id() const;
  inline void clear_dest_role_id();
  static const int kDestRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 dest_role_id() const;
  inline void set_dest_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_get_role_gs_id_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_sour_role_id();
  inline void clear_has_sour_role_id();
  inline void set_has_dest_role_id();
  inline void clear_has_dest_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 sour_role_id_;
  ::google::protobuf::uint64 dest_role_id_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_get_role_gs_id_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_get_role_gs_id_ack : public ::google::protobuf::Message {
 public:
  pub_get_role_gs_id_ack();
  virtual ~pub_get_role_gs_id_ack();

  pub_get_role_gs_id_ack(const pub_get_role_gs_id_ack& from);

  inline pub_get_role_gs_id_ack& operator=(const pub_get_role_gs_id_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_get_role_gs_id_ack& default_instance();

  void Swap(pub_get_role_gs_id_ack* other);

  // implements Message ----------------------------------------------

  pub_get_role_gs_id_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_get_role_gs_id_ack& from);
  void MergeFrom(const pub_get_role_gs_id_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_gs_id_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 sour_role_id = 3;
  inline bool has_sour_role_id() const;
  inline void clear_sour_role_id();
  static const int kSourRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 sour_role_id() const;
  inline void set_sour_role_id(::google::protobuf::uint64 value);

  // optional uint64 dest_role_id = 4;
  inline bool has_dest_role_id() const;
  inline void clear_dest_role_id();
  static const int kDestRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 dest_role_id() const;
  inline void set_dest_role_id(::google::protobuf::uint64 value);

  // optional uint64 dest_gs_id = 5;
  inline bool has_dest_gs_id() const;
  inline void clear_dest_gs_id();
  static const int kDestGsIdFieldNumber = 5;
  inline ::google::protobuf::uint64 dest_gs_id() const;
  inline void set_dest_gs_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_get_role_gs_id_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_sour_role_id();
  inline void clear_has_sour_role_id();
  inline void set_has_dest_role_id();
  inline void clear_has_dest_role_id();
  inline void set_has_dest_gs_id();
  inline void clear_has_dest_gs_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 sour_role_id_;
  ::google::protobuf::uint64 dest_role_id_;
  ::google::protobuf::uint64 dest_gs_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_get_role_gs_id_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_get_offical_members_req : public ::google::protobuf::Message {
 public:
  pub_get_offical_members_req();
  virtual ~pub_get_offical_members_req();

  pub_get_offical_members_req(const pub_get_offical_members_req& from);

  inline pub_get_offical_members_req& operator=(const pub_get_offical_members_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_get_offical_members_req& default_instance();

  void Swap(pub_get_offical_members_req* other);

  // implements Message ----------------------------------------------

  pub_get_offical_members_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_get_offical_members_req& from);
  void MergeFrom(const pub_get_offical_members_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_members_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional int32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // optional int32 start_index = 3;
  inline bool has_start_index() const;
  inline void clear_start_index();
  static const int kStartIndexFieldNumber = 3;
  inline ::google::protobuf::int32 start_index() const;
  inline void set_start_index(::google::protobuf::int32 value);

  // optional int32 end_index = 4;
  inline bool has_end_index() const;
  inline void clear_end_index();
  static const int kEndIndexFieldNumber = 4;
  inline ::google::protobuf::int32 end_index() const;
  inline void set_end_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_get_offical_members_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_start_index();
  inline void clear_has_start_index();
  inline void set_has_end_index();
  inline void clear_has_end_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 grade_;
  ::google::protobuf::int32 start_index_;
  ::google::protobuf::int32 end_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_get_offical_members_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_get_offical_members_ack : public ::google::protobuf::Message {
 public:
  pub_get_offical_members_ack();
  virtual ~pub_get_offical_members_ack();

  pub_get_offical_members_ack(const pub_get_offical_members_ack& from);

  inline pub_get_offical_members_ack& operator=(const pub_get_offical_members_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_get_offical_members_ack& default_instance();

  void Swap(pub_get_offical_members_ack* other);

  // implements Message ----------------------------------------------

  pub_get_offical_members_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_get_offical_members_ack& from);
  void MergeFrom(const pub_get_offical_members_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_members_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 grade = 3;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 3;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // repeated .SProtoSpace.offical_member_data members = 4;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 4;
  inline const ::SProtoSpace::offical_member_data& members(int index) const;
  inline ::SProtoSpace::offical_member_data* mutable_members(int index);
  inline ::SProtoSpace::offical_member_data* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data >*
      mutable_members();

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_get_offical_members_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data > members_;
  ::google::protobuf::int32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_get_offical_members_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_gm_start_match_req : public ::google::protobuf::Message {
 public:
  pub_gm_start_match_req();
  virtual ~pub_gm_start_match_req();

  pub_gm_start_match_req(const pub_gm_start_match_req& from);

  inline pub_gm_start_match_req& operator=(const pub_gm_start_match_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_gm_start_match_req& default_instance();

  void Swap(pub_gm_start_match_req* other);

  // implements Message ----------------------------------------------

  pub_gm_start_match_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_gm_start_match_req& from);
  void MergeFrom(const pub_gm_start_match_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_start_match_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional int32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // optional int32 start_time = 3;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::int32 start_time() const;
  inline void set_start_time(::google::protobuf::int32 value);

  // optional int32 end_time = 4;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::int32 end_time() const;
  inline void set_end_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_gm_start_match_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 grade_;
  ::google::protobuf::int32 start_time_;
  ::google::protobuf::int32 end_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_gm_start_match_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_gm_start_match_ack : public ::google::protobuf::Message {
 public:
  pub_gm_start_match_ack();
  virtual ~pub_gm_start_match_ack();

  pub_gm_start_match_ack(const pub_gm_start_match_ack& from);

  inline pub_gm_start_match_ack& operator=(const pub_gm_start_match_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_gm_start_match_ack& default_instance();

  void Swap(pub_gm_start_match_ack* other);

  // implements Message ----------------------------------------------

  pub_gm_start_match_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_gm_start_match_ack& from);
  void MergeFrom(const pub_gm_start_match_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_start_match_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 grade = 3;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 3;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_gm_start_match_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_gm_start_match_ack* default_instance_;
};
// -------------------------------------------------------------------

class pub_gm_send_office_mail_req : public ::google::protobuf::Message {
 public:
  pub_gm_send_office_mail_req();
  virtual ~pub_gm_send_office_mail_req();

  pub_gm_send_office_mail_req(const pub_gm_send_office_mail_req& from);

  inline pub_gm_send_office_mail_req& operator=(const pub_gm_send_office_mail_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_gm_send_office_mail_req& default_instance();

  void Swap(pub_gm_send_office_mail_req* other);

  // implements Message ----------------------------------------------

  pub_gm_send_office_mail_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_gm_send_office_mail_req& from);
  void MergeFrom(const pub_gm_send_office_mail_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_send_office_mail_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional int32 mail_id = 2;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 2;
  inline ::google::protobuf::int32 mail_id() const;
  inline void set_mail_id(::google::protobuf::int32 value);

  // optional int32 grade = 3;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 3;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_gm_send_office_mail_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 mail_id_;
  ::google::protobuf::int32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_gm_send_office_mail_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_get_offical_data_req : public ::google::protobuf::Message {
 public:
  pub_get_offical_data_req();
  virtual ~pub_get_offical_data_req();

  pub_get_offical_data_req(const pub_get_offical_data_req& from);

  inline pub_get_offical_data_req& operator=(const pub_get_offical_data_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_get_offical_data_req& default_instance();

  void Swap(pub_get_offical_data_req* other);

  // implements Message ----------------------------------------------

  pub_get_offical_data_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_get_offical_data_req& from);
  void MergeFrom(const pub_get_offical_data_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_data_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional int32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_get_offical_data_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_get_offical_data_req* default_instance_;
};
// -------------------------------------------------------------------

class pub_get_offical_data_ack : public ::google::protobuf::Message {
 public:
  pub_get_offical_data_ack();
  virtual ~pub_get_offical_data_ack();

  pub_get_offical_data_ack(const pub_get_offical_data_ack& from);

  inline pub_get_offical_data_ack& operator=(const pub_get_offical_data_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pub_get_offical_data_ack& default_instance();

  void Swap(pub_get_offical_data_ack* other);

  // implements Message ----------------------------------------------

  pub_get_offical_data_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pub_get_offical_data_ack& from);
  void MergeFrom(const pub_get_offical_data_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_data_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ESSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ESSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 grade = 3;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 3;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // optional int32 ranking_id = 4;
  inline bool has_ranking_id() const;
  inline void clear_ranking_id();
  static const int kRankingIdFieldNumber = 4;
  inline ::google::protobuf::int32 ranking_id() const;
  inline void set_ranking_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pub_get_offical_data_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_ranking_id();
  inline void clear_has_ranking_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 grade_;
  ::google::protobuf::int32 ranking_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ss_5fpublic_2eproto();
  friend void protobuf_AssignDesc_ss_5fpublic_2eproto();
  friend void protobuf_ShutdownFile_ss_5fpublic_2eproto();

  void InitAsDefaultInstance();
  static pub_get_offical_data_ack* default_instance_;
};
// ===================================================================


// ===================================================================

// pub_harem_compete_qingan_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_qingan_req_id];
inline bool pub_harem_compete_qingan_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_harem_compete_qingan_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_harem_compete_qingan_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_harem_compete_qingan_req::clear_proto_id() {
  proto_id_ = 1503;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_harem_compete_qingan_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_harem_compete_qingan_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool pub_harem_compete_qingan_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_harem_compete_qingan_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_harem_compete_qingan_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_harem_compete_qingan_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 pub_harem_compete_qingan_req::uuid() const {
  return uuid_;
}
inline void pub_harem_compete_qingan_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional string self_name = 3;
inline bool pub_harem_compete_qingan_req::has_self_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_harem_compete_qingan_req::set_has_self_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_harem_compete_qingan_req::clear_has_self_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_harem_compete_qingan_req::clear_self_name() {
  if (self_name_ != &::google::protobuf::internal::kEmptyString) {
    self_name_->clear();
  }
  clear_has_self_name();
}
inline const ::std::string& pub_harem_compete_qingan_req::self_name() const {
  return *self_name_;
}
inline void pub_harem_compete_qingan_req::set_self_name(const ::std::string& value) {
  set_has_self_name();
  if (self_name_ == &::google::protobuf::internal::kEmptyString) {
    self_name_ = new ::std::string;
  }
  self_name_->assign(value);
}
inline void pub_harem_compete_qingan_req::set_self_name(const char* value) {
  set_has_self_name();
  if (self_name_ == &::google::protobuf::internal::kEmptyString) {
    self_name_ = new ::std::string;
  }
  self_name_->assign(value);
}
inline void pub_harem_compete_qingan_req::set_self_name(const char* value, size_t size) {
  set_has_self_name();
  if (self_name_ == &::google::protobuf::internal::kEmptyString) {
    self_name_ = new ::std::string;
  }
  self_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_harem_compete_qingan_req::mutable_self_name() {
  set_has_self_name();
  if (self_name_ == &::google::protobuf::internal::kEmptyString) {
    self_name_ = new ::std::string;
  }
  return self_name_;
}
inline ::std::string* pub_harem_compete_qingan_req::release_self_name() {
  clear_has_self_name();
  if (self_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = self_name_;
    self_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_harem_compete_qingan_req::set_allocated_self_name(::std::string* self_name) {
  if (self_name_ != &::google::protobuf::internal::kEmptyString) {
    delete self_name_;
  }
  if (self_name) {
    set_has_self_name();
    self_name_ = self_name;
  } else {
    clear_has_self_name();
    self_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 target_id = 4;
inline bool pub_harem_compete_qingan_req::has_target_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_harem_compete_qingan_req::set_has_target_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_harem_compete_qingan_req::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_harem_compete_qingan_req::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::uint64 pub_harem_compete_qingan_req::target_id() const {
  return target_id_;
}
inline void pub_harem_compete_qingan_req::set_target_id(::google::protobuf::uint64 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional string role_name = 5;
inline bool pub_harem_compete_qingan_req::has_role_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_harem_compete_qingan_req::set_has_role_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_harem_compete_qingan_req::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_harem_compete_qingan_req::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& pub_harem_compete_qingan_req::role_name() const {
  return *role_name_;
}
inline void pub_harem_compete_qingan_req::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void pub_harem_compete_qingan_req::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void pub_harem_compete_qingan_req::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_harem_compete_qingan_req::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* pub_harem_compete_qingan_req::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_harem_compete_qingan_req::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 role_type = 6;
inline bool pub_harem_compete_qingan_req::has_role_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pub_harem_compete_qingan_req::set_has_role_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pub_harem_compete_qingan_req::clear_has_role_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pub_harem_compete_qingan_req::clear_role_type() {
  role_type_ = 0u;
  clear_has_role_type();
}
inline ::google::protobuf::uint32 pub_harem_compete_qingan_req::role_type() const {
  return role_type_;
}
inline void pub_harem_compete_qingan_req::set_role_type(::google::protobuf::uint32 value) {
  set_has_role_type();
  role_type_ = value;
}

// optional uint64 event_uuid = 7;
inline bool pub_harem_compete_qingan_req::has_event_uuid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pub_harem_compete_qingan_req::set_has_event_uuid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pub_harem_compete_qingan_req::clear_has_event_uuid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pub_harem_compete_qingan_req::clear_event_uuid() {
  event_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_event_uuid();
}
inline ::google::protobuf::uint64 pub_harem_compete_qingan_req::event_uuid() const {
  return event_uuid_;
}
inline void pub_harem_compete_qingan_req::set_event_uuid(::google::protobuf::uint64 value) {
  set_has_event_uuid();
  event_uuid_ = value;
}

// -------------------------------------------------------------------

// pub_harem_compete_slap_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_slap_req_id];
inline bool pub_harem_compete_slap_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_harem_compete_slap_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_harem_compete_slap_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_harem_compete_slap_req::clear_proto_id() {
  proto_id_ = 1504;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_harem_compete_slap_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_harem_compete_slap_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 self_id = 2;
inline bool pub_harem_compete_slap_req::has_self_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_harem_compete_slap_req::set_has_self_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_harem_compete_slap_req::clear_has_self_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_harem_compete_slap_req::clear_self_id() {
  self_id_ = GOOGLE_ULONGLONG(0);
  clear_has_self_id();
}
inline ::google::protobuf::uint64 pub_harem_compete_slap_req::self_id() const {
  return self_id_;
}
inline void pub_harem_compete_slap_req::set_self_id(::google::protobuf::uint64 value) {
  set_has_self_id();
  self_id_ = value;
}

// optional string self_name = 3;
inline bool pub_harem_compete_slap_req::has_self_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_harem_compete_slap_req::set_has_self_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_harem_compete_slap_req::clear_has_self_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_harem_compete_slap_req::clear_self_name() {
  if (self_name_ != &::google::protobuf::internal::kEmptyString) {
    self_name_->clear();
  }
  clear_has_self_name();
}
inline const ::std::string& pub_harem_compete_slap_req::self_name() const {
  return *self_name_;
}
inline void pub_harem_compete_slap_req::set_self_name(const ::std::string& value) {
  set_has_self_name();
  if (self_name_ == &::google::protobuf::internal::kEmptyString) {
    self_name_ = new ::std::string;
  }
  self_name_->assign(value);
}
inline void pub_harem_compete_slap_req::set_self_name(const char* value) {
  set_has_self_name();
  if (self_name_ == &::google::protobuf::internal::kEmptyString) {
    self_name_ = new ::std::string;
  }
  self_name_->assign(value);
}
inline void pub_harem_compete_slap_req::set_self_name(const char* value, size_t size) {
  set_has_self_name();
  if (self_name_ == &::google::protobuf::internal::kEmptyString) {
    self_name_ = new ::std::string;
  }
  self_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_harem_compete_slap_req::mutable_self_name() {
  set_has_self_name();
  if (self_name_ == &::google::protobuf::internal::kEmptyString) {
    self_name_ = new ::std::string;
  }
  return self_name_;
}
inline ::std::string* pub_harem_compete_slap_req::release_self_name() {
  clear_has_self_name();
  if (self_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = self_name_;
    self_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_harem_compete_slap_req::set_allocated_self_name(::std::string* self_name) {
  if (self_name_ != &::google::protobuf::internal::kEmptyString) {
    delete self_name_;
  }
  if (self_name) {
    set_has_self_name();
    self_name_ = self_name;
  } else {
    clear_has_self_name();
    self_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 target_id = 4;
inline bool pub_harem_compete_slap_req::has_target_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_harem_compete_slap_req::set_has_target_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_harem_compete_slap_req::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_harem_compete_slap_req::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::uint64 pub_harem_compete_slap_req::target_id() const {
  return target_id_;
}
inline void pub_harem_compete_slap_req::set_target_id(::google::protobuf::uint64 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional string target_name = 5;
inline bool pub_harem_compete_slap_req::has_target_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_harem_compete_slap_req::set_has_target_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_harem_compete_slap_req::clear_has_target_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_harem_compete_slap_req::clear_target_name() {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    target_name_->clear();
  }
  clear_has_target_name();
}
inline const ::std::string& pub_harem_compete_slap_req::target_name() const {
  return *target_name_;
}
inline void pub_harem_compete_slap_req::set_target_name(const ::std::string& value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void pub_harem_compete_slap_req::set_target_name(const char* value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void pub_harem_compete_slap_req::set_target_name(const char* value, size_t size) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_harem_compete_slap_req::mutable_target_name() {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  return target_name_;
}
inline ::std::string* pub_harem_compete_slap_req::release_target_name() {
  clear_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_name_;
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_harem_compete_slap_req::set_allocated_target_name(::std::string* target_name) {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_name_;
  }
  if (target_name) {
    set_has_target_name();
    target_name_ = target_name;
  } else {
    clear_has_target_name();
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 role_type = 6;
inline bool pub_harem_compete_slap_req::has_role_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pub_harem_compete_slap_req::set_has_role_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pub_harem_compete_slap_req::clear_has_role_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pub_harem_compete_slap_req::clear_role_type() {
  role_type_ = 0u;
  clear_has_role_type();
}
inline ::google::protobuf::uint32 pub_harem_compete_slap_req::role_type() const {
  return role_type_;
}
inline void pub_harem_compete_slap_req::set_role_type(::google::protobuf::uint32 value) {
  set_has_role_type();
  role_type_ = value;
}

// optional uint64 take_time = 7;
inline bool pub_harem_compete_slap_req::has_take_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pub_harem_compete_slap_req::set_has_take_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pub_harem_compete_slap_req::clear_has_take_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pub_harem_compete_slap_req::clear_take_time() {
  take_time_ = GOOGLE_ULONGLONG(0);
  clear_has_take_time();
}
inline ::google::protobuf::uint64 pub_harem_compete_slap_req::take_time() const {
  return take_time_;
}
inline void pub_harem_compete_slap_req::set_take_time(::google::protobuf::uint64 value) {
  set_has_take_time();
  take_time_ = value;
}

// optional uint32 slap_count = 8;
inline bool pub_harem_compete_slap_req::has_slap_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pub_harem_compete_slap_req::set_has_slap_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pub_harem_compete_slap_req::clear_has_slap_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pub_harem_compete_slap_req::clear_slap_count() {
  slap_count_ = 0u;
  clear_has_slap_count();
}
inline ::google::protobuf::uint32 pub_harem_compete_slap_req::slap_count() const {
  return slap_count_;
}
inline void pub_harem_compete_slap_req::set_slap_count(::google::protobuf::uint32 value) {
  set_has_slap_count();
  slap_count_ = value;
}

// optional .SProtoSpace.ESLAPPROGRESS progress = 9;
inline bool pub_harem_compete_slap_req::has_progress() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pub_harem_compete_slap_req::set_has_progress() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pub_harem_compete_slap_req::clear_has_progress() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pub_harem_compete_slap_req::clear_progress() {
  progress_ = 1;
  clear_has_progress();
}
inline ::SProtoSpace::ESLAPPROGRESS pub_harem_compete_slap_req::progress() const {
  return static_cast< ::SProtoSpace::ESLAPPROGRESS >(progress_);
}
inline void pub_harem_compete_slap_req::set_progress(::SProtoSpace::ESLAPPROGRESS value) {
  assert(::SProtoSpace::ESLAPPROGRESS_IsValid(value));
  set_has_progress();
  progress_ = value;
}

// repeated .SProtoSpace.slap_emoji_info info = 10;
inline int pub_harem_compete_slap_req::info_size() const {
  return info_.size();
}
inline void pub_harem_compete_slap_req::clear_info() {
  info_.Clear();
}
inline const ::SProtoSpace::slap_emoji_info& pub_harem_compete_slap_req::info(int index) const {
  return info_.Get(index);
}
inline ::SProtoSpace::slap_emoji_info* pub_harem_compete_slap_req::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::SProtoSpace::slap_emoji_info* pub_harem_compete_slap_req::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::slap_emoji_info >&
pub_harem_compete_slap_req::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::slap_emoji_info >*
pub_harem_compete_slap_req::mutable_info() {
  return &info_;
}

// optional uint64 event_uuid = 11;
inline bool pub_harem_compete_slap_req::has_event_uuid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void pub_harem_compete_slap_req::set_has_event_uuid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void pub_harem_compete_slap_req::clear_has_event_uuid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void pub_harem_compete_slap_req::clear_event_uuid() {
  event_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_event_uuid();
}
inline ::google::protobuf::uint64 pub_harem_compete_slap_req::event_uuid() const {
  return event_uuid_;
}
inline void pub_harem_compete_slap_req::set_event_uuid(::google::protobuf::uint64 value) {
  set_has_event_uuid();
  event_uuid_ = value;
}

// -------------------------------------------------------------------

// pub_role_info

// optional uint64 id = 1;
inline bool pub_role_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_role_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_role_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_role_info::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 pub_role_info::id() const {
  return id_;
}
inline void pub_role_info::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool pub_role_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_role_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_role_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_role_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& pub_role_info::name() const {
  return *name_;
}
inline void pub_role_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void pub_role_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void pub_role_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_role_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* pub_role_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_role_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 lv = 3;
inline bool pub_role_info::has_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_role_info::set_has_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_role_info::clear_has_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_role_info::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 pub_role_info::lv() const {
  return lv_;
}
inline void pub_role_info::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional uint64 login_time = 4;
inline bool pub_role_info::has_login_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_role_info::set_has_login_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_role_info::clear_has_login_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_role_info::clear_login_time() {
  login_time_ = GOOGLE_ULONGLONG(0);
  clear_has_login_time();
}
inline ::google::protobuf::uint64 pub_role_info::login_time() const {
  return login_time_;
}
inline void pub_role_info::set_login_time(::google::protobuf::uint64 value) {
  set_has_login_time();
  login_time_ = value;
}

// optional uint64 logout_time = 5;
inline bool pub_role_info::has_logout_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_role_info::set_has_logout_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_role_info::clear_has_logout_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_role_info::clear_logout_time() {
  logout_time_ = GOOGLE_ULONGLONG(0);
  clear_has_logout_time();
}
inline ::google::protobuf::uint64 pub_role_info::logout_time() const {
  return logout_time_;
}
inline void pub_role_info::set_logout_time(::google::protobuf::uint64 value) {
  set_has_logout_time();
  logout_time_ = value;
}

// optional string position = 6;
inline bool pub_role_info::has_position() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pub_role_info::set_has_position() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pub_role_info::clear_has_position() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pub_role_info::clear_position() {
  if (position_ != &::google::protobuf::internal::kEmptyString) {
    position_->clear();
  }
  clear_has_position();
}
inline const ::std::string& pub_role_info::position() const {
  return *position_;
}
inline void pub_role_info::set_position(const ::std::string& value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::kEmptyString) {
    position_ = new ::std::string;
  }
  position_->assign(value);
}
inline void pub_role_info::set_position(const char* value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::kEmptyString) {
    position_ = new ::std::string;
  }
  position_->assign(value);
}
inline void pub_role_info::set_position(const char* value, size_t size) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::kEmptyString) {
    position_ = new ::std::string;
  }
  position_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_role_info::mutable_position() {
  set_has_position();
  if (position_ == &::google::protobuf::internal::kEmptyString) {
    position_ = new ::std::string;
  }
  return position_;
}
inline ::std::string* pub_role_info::release_position() {
  clear_has_position();
  if (position_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = position_;
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_role_info::set_allocated_position(::std::string* position) {
  if (position_ != &::google::protobuf::internal::kEmptyString) {
    delete position_;
  }
  if (position) {
    set_has_position();
    position_ = position;
  } else {
    clear_has_position();
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 sex = 7;
inline bool pub_role_info::has_sex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pub_role_info::set_has_sex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pub_role_info::clear_has_sex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pub_role_info::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 pub_role_info::sex() const {
  return sex_;
}
inline void pub_role_info::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 grade = 8;
inline bool pub_role_info::has_grade() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pub_role_info::set_has_grade() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pub_role_info::clear_has_grade() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pub_role_info::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 pub_role_info::grade() const {
  return grade_;
}
inline void pub_role_info::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional bool online = 9;
inline bool pub_role_info::has_online() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pub_role_info::set_has_online() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pub_role_info::clear_has_online() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pub_role_info::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool pub_role_info::online() const {
  return online_;
}
inline void pub_role_info::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// optional string avatar = 10;
inline bool pub_role_info::has_avatar() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pub_role_info::set_has_avatar() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pub_role_info::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pub_role_info::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& pub_role_info::avatar() const {
  return *avatar_;
}
inline void pub_role_info::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
}
inline void pub_role_info::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
}
inline void pub_role_info::set_avatar(const char* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_role_info::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  return avatar_;
}
inline ::std::string* pub_role_info::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_role_info::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 battle_session_id = 13;
inline bool pub_role_info::has_battle_session_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void pub_role_info::set_has_battle_session_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void pub_role_info::clear_has_battle_session_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void pub_role_info::clear_battle_session_id() {
  battle_session_id_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_session_id();
}
inline ::google::protobuf::uint64 pub_role_info::battle_session_id() const {
  return battle_session_id_;
}
inline void pub_role_info::set_battle_session_id(::google::protobuf::uint64 value) {
  set_has_battle_session_id();
  battle_session_id_ = value;
}

// optional uint32 fight_power = 14;
inline bool pub_role_info::has_fight_power() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void pub_role_info::set_has_fight_power() {
  _has_bits_[0] |= 0x00000800u;
}
inline void pub_role_info::clear_has_fight_power() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void pub_role_info::clear_fight_power() {
  fight_power_ = 0u;
  clear_has_fight_power();
}
inline ::google::protobuf::uint32 pub_role_info::fight_power() const {
  return fight_power_;
}
inline void pub_role_info::set_fight_power(::google::protobuf::uint32 value) {
  set_has_fight_power();
  fight_power_ = value;
}

// optional uint32 paixi_id = 15;
inline bool pub_role_info::has_paixi_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void pub_role_info::set_has_paixi_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void pub_role_info::clear_has_paixi_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void pub_role_info::clear_paixi_id() {
  paixi_id_ = 0u;
  clear_has_paixi_id();
}
inline ::google::protobuf::uint32 pub_role_info::paixi_id() const {
  return paixi_id_;
}
inline void pub_role_info::set_paixi_id(::google::protobuf::uint32 value) {
  set_has_paixi_id();
  paixi_id_ = value;
}

// optional int32 border = 16;
inline bool pub_role_info::has_border() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void pub_role_info::set_has_border() {
  _has_bits_[0] |= 0x00002000u;
}
inline void pub_role_info::clear_has_border() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void pub_role_info::clear_border() {
  border_ = 0;
  clear_has_border();
}
inline ::google::protobuf::int32 pub_role_info::border() const {
  return border_;
}
inline void pub_role_info::set_border(::google::protobuf::int32 value) {
  set_has_border();
  border_ = value;
}

// -------------------------------------------------------------------

// pub_role_info_cache

// repeated .SProtoSpace.pub_role_info role_info_list = 1;
inline int pub_role_info_cache::role_info_list_size() const {
  return role_info_list_.size();
}
inline void pub_role_info_cache::clear_role_info_list() {
  role_info_list_.Clear();
}
inline const ::SProtoSpace::pub_role_info& pub_role_info_cache::role_info_list(int index) const {
  return role_info_list_.Get(index);
}
inline ::SProtoSpace::pub_role_info* pub_role_info_cache::mutable_role_info_list(int index) {
  return role_info_list_.Mutable(index);
}
inline ::SProtoSpace::pub_role_info* pub_role_info_cache::add_role_info_list() {
  return role_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pub_role_info >&
pub_role_info_cache::role_info_list() const {
  return role_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pub_role_info >*
pub_role_info_cache::mutable_role_info_list() {
  return &role_info_list_;
}

// -------------------------------------------------------------------

// officer_result_data

// optional uint64 role_id = 1;
inline bool officer_result_data::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void officer_result_data::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void officer_result_data::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void officer_result_data::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 officer_result_data::role_id() const {
  return role_id_;
}
inline void officer_result_data::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .SProtoSpace.EGrade lv = 2;
inline bool officer_result_data::has_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void officer_result_data::set_has_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void officer_result_data::clear_has_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void officer_result_data::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::SProtoSpace::EGrade officer_result_data::lv() const {
  return static_cast< ::SProtoSpace::EGrade >(lv_);
}
inline void officer_result_data::set_lv(::SProtoSpace::EGrade value) {
  assert(::SProtoSpace::EGrade_IsValid(value));
  set_has_lv();
  lv_ = value;
}

// optional int32 ret = 3;
inline bool officer_result_data::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void officer_result_data::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void officer_result_data::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void officer_result_data::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 officer_result_data::ret() const {
  return ret_;
}
inline void officer_result_data::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// officer_reduce_data

// optional uint64 role_id = 1;
inline bool officer_reduce_data::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void officer_reduce_data::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void officer_reduce_data::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void officer_reduce_data::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 officer_reduce_data::role_id() const {
  return role_id_;
}
inline void officer_reduce_data::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 old_grade = 2;
inline bool officer_reduce_data::has_old_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void officer_reduce_data::set_has_old_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void officer_reduce_data::clear_has_old_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void officer_reduce_data::clear_old_grade() {
  old_grade_ = 0;
  clear_has_old_grade();
}
inline ::google::protobuf::int32 officer_reduce_data::old_grade() const {
  return old_grade_;
}
inline void officer_reduce_data::set_old_grade(::google::protobuf::int32 value) {
  set_has_old_grade();
  old_grade_ = value;
}

// optional int32 new_grade = 3;
inline bool officer_reduce_data::has_new_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void officer_reduce_data::set_has_new_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void officer_reduce_data::clear_has_new_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void officer_reduce_data::clear_new_grade() {
  new_grade_ = 0;
  clear_has_new_grade();
}
inline ::google::protobuf::int32 officer_reduce_data::new_grade() const {
  return new_grade_;
}
inline void officer_reduce_data::set_new_grade(::google::protobuf::int32 value) {
  set_has_new_grade();
  new_grade_ = value;
}

// -------------------------------------------------------------------

// rank_db_item

// optional uint64 role_id = 1;
inline bool rank_db_item::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rank_db_item::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rank_db_item::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rank_db_item::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 rank_db_item::role_id() const {
  return role_id_;
}
inline void rank_db_item::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// repeated uint32 values = 2;
inline int rank_db_item::values_size() const {
  return values_.size();
}
inline void rank_db_item::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::uint32 rank_db_item::values(int index) const {
  return values_.Get(index);
}
inline void rank_db_item::set_values(int index, ::google::protobuf::uint32 value) {
  values_.Set(index, value);
}
inline void rank_db_item::add_values(::google::protobuf::uint32 value) {
  values_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
rank_db_item::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
rank_db_item::mutable_values() {
  return &values_;
}

// optional uint32 order = 3;
inline bool rank_db_item::has_order() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rank_db_item::set_has_order() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rank_db_item::clear_has_order() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rank_db_item::clear_order() {
  order_ = 0u;
  clear_has_order();
}
inline ::google::protobuf::uint32 rank_db_item::order() const {
  return order_;
}
inline void rank_db_item::set_order(::google::protobuf::uint32 value) {
  set_has_order();
  order_ = value;
}

// -------------------------------------------------------------------

// rank_db_data

// optional .SProtoSpace.RANK_TYPE type = 1;
inline bool rank_db_data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rank_db_data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rank_db_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rank_db_data::clear_type() {
  type_ = 1000;
  clear_has_type();
}
inline ::SProtoSpace::RANK_TYPE rank_db_data::type() const {
  return static_cast< ::SProtoSpace::RANK_TYPE >(type_);
}
inline void rank_db_data::set_type(::SProtoSpace::RANK_TYPE value) {
  assert(::SProtoSpace::RANK_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 rank_order = 2;
inline bool rank_db_data::has_rank_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rank_db_data::set_has_rank_order() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rank_db_data::clear_has_rank_order() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rank_db_data::clear_rank_order() {
  rank_order_ = 0u;
  clear_has_rank_order();
}
inline ::google::protobuf::uint32 rank_db_data::rank_order() const {
  return rank_order_;
}
inline void rank_db_data::set_rank_order(::google::protobuf::uint32 value) {
  set_has_rank_order();
  rank_order_ = value;
}

// repeated .SProtoSpace.rank_db_item items = 3;
inline int rank_db_data::items_size() const {
  return items_.size();
}
inline void rank_db_data::clear_items() {
  items_.Clear();
}
inline const ::SProtoSpace::rank_db_item& rank_db_data::items(int index) const {
  return items_.Get(index);
}
inline ::SProtoSpace::rank_db_item* rank_db_data::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::SProtoSpace::rank_db_item* rank_db_data::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::rank_db_item >&
rank_db_data::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::rank_db_item >*
rank_db_data::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// rank_redis_data

// optional uint64 role_id = 1;
inline bool rank_redis_data::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rank_redis_data::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rank_redis_data::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rank_redis_data::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 rank_redis_data::role_id() const {
  return role_id_;
}
inline void rank_redis_data::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 value = 2;
inline bool rank_redis_data::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rank_redis_data::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rank_redis_data::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rank_redis_data::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 rank_redis_data::value() const {
  return value_;
}
inline void rank_redis_data::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// rank_refresh_data

// optional uint64 min_value = 1;
inline bool rank_refresh_data::has_min_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rank_refresh_data::set_has_min_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rank_refresh_data::clear_has_min_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rank_refresh_data::clear_min_value() {
  min_value_ = GOOGLE_ULONGLONG(0);
  clear_has_min_value();
}
inline ::google::protobuf::uint64 rank_refresh_data::min_value() const {
  return min_value_;
}
inline void rank_refresh_data::set_min_value(::google::protobuf::uint64 value) {
  set_has_min_value();
  min_value_ = value;
}

// optional int32 cur_size = 2;
inline bool rank_refresh_data::has_cur_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rank_refresh_data::set_has_cur_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rank_refresh_data::clear_has_cur_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rank_refresh_data::clear_cur_size() {
  cur_size_ = 0;
  clear_has_cur_size();
}
inline ::google::protobuf::int32 rank_refresh_data::cur_size() const {
  return cur_size_;
}
inline void rank_refresh_data::set_cur_size(::google::protobuf::int32 value) {
  set_has_cur_size();
  cur_size_ = value;
}

// repeated .SProtoSpace.rank_redis_data members = 3;
inline int rank_refresh_data::members_size() const {
  return members_.size();
}
inline void rank_refresh_data::clear_members() {
  members_.Clear();
}
inline const ::SProtoSpace::rank_redis_data& rank_refresh_data::members(int index) const {
  return members_.Get(index);
}
inline ::SProtoSpace::rank_redis_data* rank_refresh_data::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::SProtoSpace::rank_redis_data* rank_refresh_data::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::rank_redis_data >&
rank_refresh_data::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::rank_redis_data >*
rank_refresh_data::mutable_members() {
  return &members_;
}

// -------------------------------------------------------------------

// pub_role_login

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_login_id];
inline bool pub_role_login::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_role_login::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_role_login::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_role_login::clear_protoid() {
  protoid_ = 1501;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_role_login::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_role_login::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool pub_role_login::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_role_login::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_role_login::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_role_login::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_role_login::role_id() const {
  return role_id_;
}
inline void pub_role_login::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .SProtoSpace.pub_role_info info = 3;
inline bool pub_role_login::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_role_login::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_role_login::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_role_login::clear_info() {
  if (info_ != NULL) info_->::SProtoSpace::pub_role_info::Clear();
  clear_has_info();
}
inline const ::SProtoSpace::pub_role_info& pub_role_login::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::SProtoSpace::pub_role_info* pub_role_login::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::SProtoSpace::pub_role_info;
  return info_;
}
inline ::SProtoSpace::pub_role_info* pub_role_login::release_info() {
  clear_has_info();
  ::SProtoSpace::pub_role_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void pub_role_login::set_allocated_info(::SProtoSpace::pub_role_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional uint64 game_session_id = 4;
inline bool pub_role_login::has_game_session_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_role_login::set_has_game_session_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_role_login::clear_has_game_session_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_role_login::clear_game_session_id() {
  game_session_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_session_id();
}
inline ::google::protobuf::uint64 pub_role_login::game_session_id() const {
  return game_session_id_;
}
inline void pub_role_login::set_game_session_id(::google::protobuf::uint64 value) {
  set_has_game_session_id();
  game_session_id_ = value;
}

// optional uint64 gate_session_id = 5;
inline bool pub_role_login::has_gate_session_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_role_login::set_has_gate_session_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_role_login::clear_has_gate_session_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_role_login::clear_gate_session_id() {
  gate_session_id_ = GOOGLE_ULONGLONG(0);
  clear_has_gate_session_id();
}
inline ::google::protobuf::uint64 pub_role_login::gate_session_id() const {
  return gate_session_id_;
}
inline void pub_role_login::set_gate_session_id(::google::protobuf::uint64 value) {
  set_has_gate_session_id();
  gate_session_id_ = value;
}

// -------------------------------------------------------------------

// pub_role_login_batch

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_login_batch_id];
inline bool pub_role_login_batch::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_role_login_batch::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_role_login_batch::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_role_login_batch::clear_protoid() {
  protoid_ = 1500;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_role_login_batch::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_role_login_batch::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.pub_role_login role_logins = 2;
inline int pub_role_login_batch::role_logins_size() const {
  return role_logins_.size();
}
inline void pub_role_login_batch::clear_role_logins() {
  role_logins_.Clear();
}
inline const ::SProtoSpace::pub_role_login& pub_role_login_batch::role_logins(int index) const {
  return role_logins_.Get(index);
}
inline ::SProtoSpace::pub_role_login* pub_role_login_batch::mutable_role_logins(int index) {
  return role_logins_.Mutable(index);
}
inline ::SProtoSpace::pub_role_login* pub_role_login_batch::add_role_logins() {
  return role_logins_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pub_role_login >&
pub_role_login_batch::role_logins() const {
  return role_logins_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pub_role_login >*
pub_role_login_batch::mutable_role_logins() {
  return &role_logins_;
}

// -------------------------------------------------------------------

// pub_role_logout

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_logout_id];
inline bool pub_role_logout::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_role_logout::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_role_logout::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_role_logout::clear_protoid() {
  protoid_ = 1502;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_role_logout::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_role_logout::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool pub_role_logout::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_role_logout::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_role_logout::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_role_logout::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_role_logout::role_id() const {
  return role_id_;
}
inline void pub_role_logout::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool pub_role_logout::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_role_logout::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_role_logout::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_role_logout::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& pub_role_logout::role_name() const {
  return *role_name_;
}
inline void pub_role_logout::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void pub_role_logout::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void pub_role_logout::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_role_logout::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* pub_role_logout::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_role_logout::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// pub_role_info_sync

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_info_sync_id];
inline bool pub_role_info_sync::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_role_info_sync::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_role_info_sync::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_role_info_sync::clear_protoid() {
  protoid_ = 1511;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_role_info_sync::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_role_info_sync::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool pub_role_info_sync::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_role_info_sync::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_role_info_sync::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_role_info_sync::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_role_info_sync::role_id() const {
  return role_id_;
}
inline void pub_role_info_sync::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .SProtoSpace.pub_role_info info = 3;
inline bool pub_role_info_sync::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_role_info_sync::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_role_info_sync::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_role_info_sync::clear_info() {
  if (info_ != NULL) info_->::SProtoSpace::pub_role_info::Clear();
  clear_has_info();
}
inline const ::SProtoSpace::pub_role_info& pub_role_info_sync::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::SProtoSpace::pub_role_info* pub_role_info_sync::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::SProtoSpace::pub_role_info;
  return info_;
}
inline ::SProtoSpace::pub_role_info* pub_role_info_sync::release_info() {
  clear_has_info();
  ::SProtoSpace::pub_role_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void pub_role_info_sync::set_allocated_info(::SProtoSpace::pub_role_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional uint64 game_session_id = 4;
inline bool pub_role_info_sync::has_game_session_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_role_info_sync::set_has_game_session_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_role_info_sync::clear_has_game_session_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_role_info_sync::clear_game_session_id() {
  game_session_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_session_id();
}
inline ::google::protobuf::uint64 pub_role_info_sync::game_session_id() const {
  return game_session_id_;
}
inline void pub_role_info_sync::set_game_session_id(::google::protobuf::uint64 value) {
  set_has_game_session_id();
  game_session_id_ = value;
}

// optional uint64 gate_session_id = 5;
inline bool pub_role_info_sync::has_gate_session_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_role_info_sync::set_has_gate_session_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_role_info_sync::clear_has_gate_session_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_role_info_sync::clear_gate_session_id() {
  gate_session_id_ = GOOGLE_ULONGLONG(0);
  clear_has_gate_session_id();
}
inline ::google::protobuf::uint64 pub_role_info_sync::gate_session_id() const {
  return gate_session_id_;
}
inline void pub_role_info_sync::set_gate_session_id(::google::protobuf::uint64 value) {
  set_has_gate_session_id();
  gate_session_id_ = value;
}

// -------------------------------------------------------------------

// ps_create_team_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_create_team_req_id];
inline bool ps_create_team_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_create_team_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_create_team_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_create_team_req::clear_protoid() {
  protoid_ = 1000;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID ps_create_team_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void ps_create_team_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.eTeamType team_type = 2;
inline bool ps_create_team_req::has_team_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_create_team_req::set_has_team_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_create_team_req::clear_has_team_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_create_team_req::clear_team_type() {
  team_type_ = 1;
  clear_has_team_type();
}
inline ::SProtoSpace::eTeamType ps_create_team_req::team_type() const {
  return static_cast< ::SProtoSpace::eTeamType >(team_type_);
}
inline void ps_create_team_req::set_team_type(::SProtoSpace::eTeamType value) {
  assert(::SProtoSpace::eTeamType_IsValid(value));
  set_has_team_type();
  team_type_ = value;
}

// optional .SProtoSpace.eTeamSize team_size = 3;
inline bool ps_create_team_req::has_team_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_create_team_req::set_has_team_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_create_team_req::clear_has_team_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_create_team_req::clear_team_size() {
  team_size_ = 1;
  clear_has_team_size();
}
inline ::SProtoSpace::eTeamSize ps_create_team_req::team_size() const {
  return static_cast< ::SProtoSpace::eTeamSize >(team_size_);
}
inline void ps_create_team_req::set_team_size(::SProtoSpace::eTeamSize value) {
  assert(::SProtoSpace::eTeamSize_IsValid(value));
  set_has_team_size();
  team_size_ = value;
}

// optional .SProtoSpace.eTeamPermission team_perm = 4;
inline bool ps_create_team_req::has_team_perm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ps_create_team_req::set_has_team_perm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ps_create_team_req::clear_has_team_perm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ps_create_team_req::clear_team_perm() {
  team_perm_ = 1;
  clear_has_team_perm();
}
inline ::SProtoSpace::eTeamPermission ps_create_team_req::team_perm() const {
  return static_cast< ::SProtoSpace::eTeamPermission >(team_perm_);
}
inline void ps_create_team_req::set_team_perm(::SProtoSpace::eTeamPermission value) {
  assert(::SProtoSpace::eTeamPermission_IsValid(value));
  set_has_team_perm();
  team_perm_ = value;
}

// optional string team_name = 5;
inline bool ps_create_team_req::has_team_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ps_create_team_req::set_has_team_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ps_create_team_req::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ps_create_team_req::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& ps_create_team_req::team_name() const {
  return *team_name_;
}
inline void ps_create_team_req::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void ps_create_team_req::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void ps_create_team_req::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ps_create_team_req::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  return team_name_;
}
inline ::std::string* ps_create_team_req::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ps_create_team_req::set_allocated_team_name(::std::string* team_name) {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (team_name) {
    set_has_team_name();
    team_name_ = team_name;
  } else {
    clear_has_team_name();
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 gs_id = 6;
inline bool ps_create_team_req::has_gs_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ps_create_team_req::set_has_gs_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ps_create_team_req::clear_has_gs_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ps_create_team_req::clear_gs_id() {
  gs_id_ = GOOGLE_ULONGLONG(0);
  clear_has_gs_id();
}
inline ::google::protobuf::uint64 ps_create_team_req::gs_id() const {
  return gs_id_;
}
inline void ps_create_team_req::set_gs_id(::google::protobuf::uint64 value) {
  set_has_gs_id();
  gs_id_ = value;
}

// optional uint64 role_id = 7;
inline bool ps_create_team_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ps_create_team_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ps_create_team_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ps_create_team_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ps_create_team_req::role_id() const {
  return role_id_;
}
inline void ps_create_team_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 lv = 8;
inline bool ps_create_team_req::has_lv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ps_create_team_req::set_has_lv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ps_create_team_req::clear_has_lv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ps_create_team_req::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 ps_create_team_req::lv() const {
  return lv_;
}
inline void ps_create_team_req::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional string role_name = 9;
inline bool ps_create_team_req::has_role_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ps_create_team_req::set_has_role_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ps_create_team_req::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ps_create_team_req::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ps_create_team_req::role_name() const {
  return *role_name_;
}
inline void ps_create_team_req::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ps_create_team_req::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ps_create_team_req::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ps_create_team_req::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ps_create_team_req::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ps_create_team_req::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .SProtoSpace.battle_hero_info heros = 10;
inline int ps_create_team_req::heros_size() const {
  return heros_.size();
}
inline void ps_create_team_req::clear_heros() {
  heros_.Clear();
}
inline const ::SProtoSpace::battle_hero_info& ps_create_team_req::heros(int index) const {
  return heros_.Get(index);
}
inline ::SProtoSpace::battle_hero_info* ps_create_team_req::mutable_heros(int index) {
  return heros_.Mutable(index);
}
inline ::SProtoSpace::battle_hero_info* ps_create_team_req::add_heros() {
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info >&
ps_create_team_req::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info >*
ps_create_team_req::mutable_heros() {
  return &heros_;
}

// -------------------------------------------------------------------

// ps_create_team_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_create_team_ack_id];
inline bool ps_create_team_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_create_team_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_create_team_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_create_team_ack::clear_protoid() {
  protoid_ = 1001;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID ps_create_team_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void ps_create_team_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.eTeamType team_type = 2;
inline bool ps_create_team_ack::has_team_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_create_team_ack::set_has_team_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_create_team_ack::clear_has_team_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_create_team_ack::clear_team_type() {
  team_type_ = 1;
  clear_has_team_type();
}
inline ::SProtoSpace::eTeamType ps_create_team_ack::team_type() const {
  return static_cast< ::SProtoSpace::eTeamType >(team_type_);
}
inline void ps_create_team_ack::set_team_type(::SProtoSpace::eTeamType value) {
  assert(::SProtoSpace::eTeamType_IsValid(value));
  set_has_team_type();
  team_type_ = value;
}

// optional .SProtoSpace.eTeamSize team_size = 3;
inline bool ps_create_team_ack::has_team_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_create_team_ack::set_has_team_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_create_team_ack::clear_has_team_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_create_team_ack::clear_team_size() {
  team_size_ = 1;
  clear_has_team_size();
}
inline ::SProtoSpace::eTeamSize ps_create_team_ack::team_size() const {
  return static_cast< ::SProtoSpace::eTeamSize >(team_size_);
}
inline void ps_create_team_ack::set_team_size(::SProtoSpace::eTeamSize value) {
  assert(::SProtoSpace::eTeamSize_IsValid(value));
  set_has_team_size();
  team_size_ = value;
}

// optional .SProtoSpace.eTeamPermission team_perm = 4;
inline bool ps_create_team_ack::has_team_perm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ps_create_team_ack::set_has_team_perm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ps_create_team_ack::clear_has_team_perm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ps_create_team_ack::clear_team_perm() {
  team_perm_ = 1;
  clear_has_team_perm();
}
inline ::SProtoSpace::eTeamPermission ps_create_team_ack::team_perm() const {
  return static_cast< ::SProtoSpace::eTeamPermission >(team_perm_);
}
inline void ps_create_team_ack::set_team_perm(::SProtoSpace::eTeamPermission value) {
  assert(::SProtoSpace::eTeamPermission_IsValid(value));
  set_has_team_perm();
  team_perm_ = value;
}

// optional string team_name = 5;
inline bool ps_create_team_ack::has_team_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ps_create_team_ack::set_has_team_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ps_create_team_ack::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ps_create_team_ack::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& ps_create_team_ack::team_name() const {
  return *team_name_;
}
inline void ps_create_team_ack::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void ps_create_team_ack::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void ps_create_team_ack::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ps_create_team_ack::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  return team_name_;
}
inline ::std::string* ps_create_team_ack::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ps_create_team_ack::set_allocated_team_name(::std::string* team_name) {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (team_name) {
    set_has_team_name();
    team_name_ = team_name;
  } else {
    clear_has_team_name();
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 role_id = 6;
inline bool ps_create_team_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ps_create_team_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ps_create_team_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ps_create_team_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ps_create_team_ack::role_id() const {
  return role_id_;
}
inline void ps_create_team_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 ret = 7;
inline bool ps_create_team_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ps_create_team_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ps_create_team_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ps_create_team_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 ps_create_team_ack::ret() const {
  return ret_;
}
inline void ps_create_team_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// ps_update_team_ntf

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_update_team_ntf_id];
inline bool ps_update_team_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_update_team_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_update_team_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_update_team_ntf::clear_protoid() {
  protoid_ = 1002;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID ps_update_team_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void ps_update_team_ntf::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool ps_update_team_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_update_team_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_update_team_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_update_team_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ps_update_team_ntf::role_id() const {
  return role_id_;
}
inline void ps_update_team_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .SProtoSpace.team_data team = 3;
inline bool ps_update_team_ntf::has_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_update_team_ntf::set_has_team() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_update_team_ntf::clear_has_team() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_update_team_ntf::clear_team() {
  if (team_ != NULL) team_->::SProtoSpace::team_data::Clear();
  clear_has_team();
}
inline const ::SProtoSpace::team_data& ps_update_team_ntf::team() const {
  return team_ != NULL ? *team_ : *default_instance_->team_;
}
inline ::SProtoSpace::team_data* ps_update_team_ntf::mutable_team() {
  set_has_team();
  if (team_ == NULL) team_ = new ::SProtoSpace::team_data;
  return team_;
}
inline ::SProtoSpace::team_data* ps_update_team_ntf::release_team() {
  clear_has_team();
  ::SProtoSpace::team_data* temp = team_;
  team_ = NULL;
  return temp;
}
inline void ps_update_team_ntf::set_allocated_team(::SProtoSpace::team_data* team) {
  delete team_;
  team_ = team;
  if (team) {
    set_has_team();
  } else {
    clear_has_team();
  }
}

// -------------------------------------------------------------------

// ps_enter_team_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_enter_team_req_id];
inline bool ps_enter_team_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_enter_team_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_enter_team_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_enter_team_req::clear_protoid() {
  protoid_ = 1003;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID ps_enter_team_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void ps_enter_team_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 team_id = 2;
inline bool ps_enter_team_req::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_enter_team_req::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_enter_team_req::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_enter_team_req::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 ps_enter_team_req::team_id() const {
  return team_id_;
}
inline void ps_enter_team_req::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional uint64 role_id = 3;
inline bool ps_enter_team_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_enter_team_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_enter_team_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_enter_team_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ps_enter_team_req::role_id() const {
  return role_id_;
}
inline void ps_enter_team_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 gs_id = 4;
inline bool ps_enter_team_req::has_gs_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ps_enter_team_req::set_has_gs_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ps_enter_team_req::clear_has_gs_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ps_enter_team_req::clear_gs_id() {
  gs_id_ = GOOGLE_ULONGLONG(0);
  clear_has_gs_id();
}
inline ::google::protobuf::uint64 ps_enter_team_req::gs_id() const {
  return gs_id_;
}
inline void ps_enter_team_req::set_gs_id(::google::protobuf::uint64 value) {
  set_has_gs_id();
  gs_id_ = value;
}

// optional int32 lv = 5;
inline bool ps_enter_team_req::has_lv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ps_enter_team_req::set_has_lv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ps_enter_team_req::clear_has_lv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ps_enter_team_req::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 ps_enter_team_req::lv() const {
  return lv_;
}
inline void ps_enter_team_req::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional string role_name = 6;
inline bool ps_enter_team_req::has_role_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ps_enter_team_req::set_has_role_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ps_enter_team_req::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ps_enter_team_req::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ps_enter_team_req::role_name() const {
  return *role_name_;
}
inline void ps_enter_team_req::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ps_enter_team_req::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ps_enter_team_req::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ps_enter_team_req::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ps_enter_team_req::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ps_enter_team_req::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .SProtoSpace.battle_hero_info heros = 7;
inline int ps_enter_team_req::heros_size() const {
  return heros_.size();
}
inline void ps_enter_team_req::clear_heros() {
  heros_.Clear();
}
inline const ::SProtoSpace::battle_hero_info& ps_enter_team_req::heros(int index) const {
  return heros_.Get(index);
}
inline ::SProtoSpace::battle_hero_info* ps_enter_team_req::mutable_heros(int index) {
  return heros_.Mutable(index);
}
inline ::SProtoSpace::battle_hero_info* ps_enter_team_req::add_heros() {
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info >&
ps_enter_team_req::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info >*
ps_enter_team_req::mutable_heros() {
  return &heros_;
}

// -------------------------------------------------------------------

// ps_enter_team_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_enter_team_ack_id];
inline bool ps_enter_team_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_enter_team_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_enter_team_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_enter_team_ack::clear_protoid() {
  protoid_ = 1004;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID ps_enter_team_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void ps_enter_team_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 team_id = 2;
inline bool ps_enter_team_ack::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_enter_team_ack::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_enter_team_ack::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_enter_team_ack::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 ps_enter_team_ack::team_id() const {
  return team_id_;
}
inline void ps_enter_team_ack::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional uint64 role_id = 3;
inline bool ps_enter_team_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_enter_team_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_enter_team_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_enter_team_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ps_enter_team_ack::role_id() const {
  return role_id_;
}
inline void ps_enter_team_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 ret = 4;
inline bool ps_enter_team_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ps_enter_team_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ps_enter_team_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ps_enter_team_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 ps_enter_team_ack::ret() const {
  return ret_;
}
inline void ps_enter_team_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// ps_exit_team_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_exit_team_req_id];
inline bool ps_exit_team_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_exit_team_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_exit_team_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_exit_team_req::clear_protoid() {
  protoid_ = 1005;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID ps_exit_team_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void ps_exit_team_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 team_id = 2;
inline bool ps_exit_team_req::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_exit_team_req::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_exit_team_req::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_exit_team_req::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 ps_exit_team_req::team_id() const {
  return team_id_;
}
inline void ps_exit_team_req::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional uint64 role_id = 3;
inline bool ps_exit_team_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_exit_team_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_exit_team_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_exit_team_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ps_exit_team_req::role_id() const {
  return role_id_;
}
inline void ps_exit_team_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// ps_exit_team_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_exit_team_ack_id];
inline bool ps_exit_team_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_exit_team_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_exit_team_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_exit_team_ack::clear_protoid() {
  protoid_ = 1006;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID ps_exit_team_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void ps_exit_team_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 team_id = 2;
inline bool ps_exit_team_ack::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_exit_team_ack::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_exit_team_ack::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_exit_team_ack::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 ps_exit_team_ack::team_id() const {
  return team_id_;
}
inline void ps_exit_team_ack::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional uint64 role_id = 3;
inline bool ps_exit_team_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_exit_team_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_exit_team_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_exit_team_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ps_exit_team_ack::role_id() const {
  return role_id_;
}
inline void ps_exit_team_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 ret = 4;
inline bool ps_exit_team_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ps_exit_team_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ps_exit_team_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ps_exit_team_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 ps_exit_team_ack::ret() const {
  return ret_;
}
inline void ps_exit_team_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// ps_ready_team_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_ready_team_req_id];
inline bool ps_ready_team_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_ready_team_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_ready_team_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_ready_team_req::clear_protoid() {
  protoid_ = 1007;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID ps_ready_team_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void ps_ready_team_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 team_id = 2;
inline bool ps_ready_team_req::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_ready_team_req::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_ready_team_req::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_ready_team_req::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 ps_ready_team_req::team_id() const {
  return team_id_;
}
inline void ps_ready_team_req::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional uint64 role_id = 3;
inline bool ps_ready_team_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_ready_team_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_ready_team_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_ready_team_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ps_ready_team_req::role_id() const {
  return role_id_;
}
inline void ps_ready_team_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// ps_ready_team_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_ready_team_ack_id];
inline bool ps_ready_team_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_ready_team_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_ready_team_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_ready_team_ack::clear_protoid() {
  protoid_ = 1008;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID ps_ready_team_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void ps_ready_team_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 team_id = 2;
inline bool ps_ready_team_ack::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_ready_team_ack::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_ready_team_ack::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_ready_team_ack::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 ps_ready_team_ack::team_id() const {
  return team_id_;
}
inline void ps_ready_team_ack::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional uint64 role_id = 3;
inline bool ps_ready_team_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_ready_team_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_ready_team_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_ready_team_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ps_ready_team_ack::role_id() const {
  return role_id_;
}
inline void ps_ready_team_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 ret = 4;
inline bool ps_ready_team_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ps_ready_team_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ps_ready_team_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ps_ready_team_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 ps_ready_team_ack::ret() const {
  return ret_;
}
inline void ps_ready_team_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// ps_update_team_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_update_team_req_id];
inline bool ps_update_team_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_update_team_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_update_team_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_update_team_req::clear_protoid() {
  protoid_ = 1009;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID ps_update_team_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void ps_update_team_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 team_id = 2;
inline bool ps_update_team_req::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_update_team_req::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_update_team_req::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_update_team_req::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 ps_update_team_req::team_id() const {
  return team_id_;
}
inline void ps_update_team_req::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional uint64 role_id = 3;
inline bool ps_update_team_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_update_team_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_update_team_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_update_team_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ps_update_team_req::role_id() const {
  return role_id_;
}
inline void ps_update_team_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 slot_id = 4;
inline bool ps_update_team_req::has_slot_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ps_update_team_req::set_has_slot_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ps_update_team_req::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ps_update_team_req::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
inline ::google::protobuf::uint32 ps_update_team_req::slot_id() const {
  return slot_id_;
}
inline void ps_update_team_req::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
}

// optional .SProtoSpace.battle_hero_info heros = 5;
inline bool ps_update_team_req::has_heros() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ps_update_team_req::set_has_heros() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ps_update_team_req::clear_has_heros() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ps_update_team_req::clear_heros() {
  if (heros_ != NULL) heros_->::SProtoSpace::battle_hero_info::Clear();
  clear_has_heros();
}
inline const ::SProtoSpace::battle_hero_info& ps_update_team_req::heros() const {
  return heros_ != NULL ? *heros_ : *default_instance_->heros_;
}
inline ::SProtoSpace::battle_hero_info* ps_update_team_req::mutable_heros() {
  set_has_heros();
  if (heros_ == NULL) heros_ = new ::SProtoSpace::battle_hero_info;
  return heros_;
}
inline ::SProtoSpace::battle_hero_info* ps_update_team_req::release_heros() {
  clear_has_heros();
  ::SProtoSpace::battle_hero_info* temp = heros_;
  heros_ = NULL;
  return temp;
}
inline void ps_update_team_req::set_allocated_heros(::SProtoSpace::battle_hero_info* heros) {
  delete heros_;
  heros_ = heros;
  if (heros) {
    set_has_heros();
  } else {
    clear_has_heros();
  }
}

// -------------------------------------------------------------------

// ps_update_team_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_update_team_ack_id];
inline bool ps_update_team_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_update_team_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_update_team_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_update_team_ack::clear_protoid() {
  protoid_ = 1010;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID ps_update_team_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void ps_update_team_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 team_id = 2;
inline bool ps_update_team_ack::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_update_team_ack::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_update_team_ack::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_update_team_ack::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 ps_update_team_ack::team_id() const {
  return team_id_;
}
inline void ps_update_team_ack::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional uint64 role_id = 3;
inline bool ps_update_team_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_update_team_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_update_team_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_update_team_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ps_update_team_ack::role_id() const {
  return role_id_;
}
inline void ps_update_team_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 slot_id = 4;
inline bool ps_update_team_ack::has_slot_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ps_update_team_ack::set_has_slot_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ps_update_team_ack::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ps_update_team_ack::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
inline ::google::protobuf::uint32 ps_update_team_ack::slot_id() const {
  return slot_id_;
}
inline void ps_update_team_ack::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
}

// optional uint64 hero_id = 5;
inline bool ps_update_team_ack::has_hero_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ps_update_team_ack::set_has_hero_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ps_update_team_ack::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ps_update_team_ack::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 ps_update_team_ack::hero_id() const {
  return hero_id_;
}
inline void ps_update_team_ack::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional int32 ret = 6;
inline bool ps_update_team_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ps_update_team_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ps_update_team_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ps_update_team_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 ps_update_team_ack::ret() const {
  return ret_;
}
inline void ps_update_team_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// ps_get_teams_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_get_teams_req_id];
inline bool ps_get_teams_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_get_teams_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_get_teams_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_get_teams_req::clear_protoid() {
  protoid_ = 1011;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID ps_get_teams_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void ps_get_teams_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.eTeamType team_type = 2;
inline bool ps_get_teams_req::has_team_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_get_teams_req::set_has_team_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_get_teams_req::clear_has_team_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_get_teams_req::clear_team_type() {
  team_type_ = 1;
  clear_has_team_type();
}
inline ::SProtoSpace::eTeamType ps_get_teams_req::team_type() const {
  return static_cast< ::SProtoSpace::eTeamType >(team_type_);
}
inline void ps_get_teams_req::set_team_type(::SProtoSpace::eTeamType value) {
  assert(::SProtoSpace::eTeamType_IsValid(value));
  set_has_team_type();
  team_type_ = value;
}

// optional .SProtoSpace.eTeamSize team_size = 3;
inline bool ps_get_teams_req::has_team_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_get_teams_req::set_has_team_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_get_teams_req::clear_has_team_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_get_teams_req::clear_team_size() {
  team_size_ = 1;
  clear_has_team_size();
}
inline ::SProtoSpace::eTeamSize ps_get_teams_req::team_size() const {
  return static_cast< ::SProtoSpace::eTeamSize >(team_size_);
}
inline void ps_get_teams_req::set_team_size(::SProtoSpace::eTeamSize value) {
  assert(::SProtoSpace::eTeamSize_IsValid(value));
  set_has_team_size();
  team_size_ = value;
}

// optional .SProtoSpace.eTeamPermission team_perm = 4;
inline bool ps_get_teams_req::has_team_perm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ps_get_teams_req::set_has_team_perm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ps_get_teams_req::clear_has_team_perm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ps_get_teams_req::clear_team_perm() {
  team_perm_ = 1;
  clear_has_team_perm();
}
inline ::SProtoSpace::eTeamPermission ps_get_teams_req::team_perm() const {
  return static_cast< ::SProtoSpace::eTeamPermission >(team_perm_);
}
inline void ps_get_teams_req::set_team_perm(::SProtoSpace::eTeamPermission value) {
  assert(::SProtoSpace::eTeamPermission_IsValid(value));
  set_has_team_perm();
  team_perm_ = value;
}

// repeated int32 parms = 5;
inline int ps_get_teams_req::parms_size() const {
  return parms_.size();
}
inline void ps_get_teams_req::clear_parms() {
  parms_.Clear();
}
inline ::google::protobuf::int32 ps_get_teams_req::parms(int index) const {
  return parms_.Get(index);
}
inline void ps_get_teams_req::set_parms(int index, ::google::protobuf::int32 value) {
  parms_.Set(index, value);
}
inline void ps_get_teams_req::add_parms(::google::protobuf::int32 value) {
  parms_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ps_get_teams_req::parms() const {
  return parms_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ps_get_teams_req::mutable_parms() {
  return &parms_;
}

// -------------------------------------------------------------------

// ps_get_teams_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_get_teams_ack_id];
inline bool ps_get_teams_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_get_teams_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_get_teams_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_get_teams_ack::clear_protoid() {
  protoid_ = 1012;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID ps_get_teams_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void ps_get_teams_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool ps_get_teams_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_get_teams_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_get_teams_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_get_teams_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ps_get_teams_ack::role_id() const {
  return role_id_;
}
inline void ps_get_teams_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 ret = 3;
inline bool ps_get_teams_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_get_teams_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_get_teams_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_get_teams_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 ps_get_teams_ack::ret() const {
  return ret_;
}
inline void ps_get_teams_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .SProtoSpace.team_brief teams = 4;
inline int ps_get_teams_ack::teams_size() const {
  return teams_.size();
}
inline void ps_get_teams_ack::clear_teams() {
  teams_.Clear();
}
inline const ::SProtoSpace::team_brief& ps_get_teams_ack::teams(int index) const {
  return teams_.Get(index);
}
inline ::SProtoSpace::team_brief* ps_get_teams_ack::mutable_teams(int index) {
  return teams_.Mutable(index);
}
inline ::SProtoSpace::team_brief* ps_get_teams_ack::add_teams() {
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::team_brief >&
ps_get_teams_ack::teams() const {
  return teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::team_brief >*
ps_get_teams_ack::mutable_teams() {
  return &teams_;
}

// -------------------------------------------------------------------

// ps_invite_enter_team_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_invite_enter_team_req_id];
inline bool ps_invite_enter_team_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_invite_enter_team_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_invite_enter_team_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_invite_enter_team_req::clear_protoid() {
  protoid_ = 1013;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID ps_invite_enter_team_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void ps_invite_enter_team_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 sour_role_id = 2;
inline bool ps_invite_enter_team_req::has_sour_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_invite_enter_team_req::set_has_sour_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_invite_enter_team_req::clear_has_sour_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_invite_enter_team_req::clear_sour_role_id() {
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sour_role_id();
}
inline ::google::protobuf::uint64 ps_invite_enter_team_req::sour_role_id() const {
  return sour_role_id_;
}
inline void ps_invite_enter_team_req::set_sour_role_id(::google::protobuf::uint64 value) {
  set_has_sour_role_id();
  sour_role_id_ = value;
}

// optional string sour_role_name = 3;
inline bool ps_invite_enter_team_req::has_sour_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_invite_enter_team_req::set_has_sour_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_invite_enter_team_req::clear_has_sour_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_invite_enter_team_req::clear_sour_role_name() {
  if (sour_role_name_ != &::google::protobuf::internal::kEmptyString) {
    sour_role_name_->clear();
  }
  clear_has_sour_role_name();
}
inline const ::std::string& ps_invite_enter_team_req::sour_role_name() const {
  return *sour_role_name_;
}
inline void ps_invite_enter_team_req::set_sour_role_name(const ::std::string& value) {
  set_has_sour_role_name();
  if (sour_role_name_ == &::google::protobuf::internal::kEmptyString) {
    sour_role_name_ = new ::std::string;
  }
  sour_role_name_->assign(value);
}
inline void ps_invite_enter_team_req::set_sour_role_name(const char* value) {
  set_has_sour_role_name();
  if (sour_role_name_ == &::google::protobuf::internal::kEmptyString) {
    sour_role_name_ = new ::std::string;
  }
  sour_role_name_->assign(value);
}
inline void ps_invite_enter_team_req::set_sour_role_name(const char* value, size_t size) {
  set_has_sour_role_name();
  if (sour_role_name_ == &::google::protobuf::internal::kEmptyString) {
    sour_role_name_ = new ::std::string;
  }
  sour_role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ps_invite_enter_team_req::mutable_sour_role_name() {
  set_has_sour_role_name();
  if (sour_role_name_ == &::google::protobuf::internal::kEmptyString) {
    sour_role_name_ = new ::std::string;
  }
  return sour_role_name_;
}
inline ::std::string* ps_invite_enter_team_req::release_sour_role_name() {
  clear_has_sour_role_name();
  if (sour_role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sour_role_name_;
    sour_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ps_invite_enter_team_req::set_allocated_sour_role_name(::std::string* sour_role_name) {
  if (sour_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sour_role_name_;
  }
  if (sour_role_name) {
    set_has_sour_role_name();
    sour_role_name_ = sour_role_name;
  } else {
    clear_has_sour_role_name();
    sour_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 team_id = 4;
inline bool ps_invite_enter_team_req::has_team_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ps_invite_enter_team_req::set_has_team_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ps_invite_enter_team_req::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ps_invite_enter_team_req::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 ps_invite_enter_team_req::team_id() const {
  return team_id_;
}
inline void ps_invite_enter_team_req::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// repeated uint64 roleids = 5;
inline int ps_invite_enter_team_req::roleids_size() const {
  return roleids_.size();
}
inline void ps_invite_enter_team_req::clear_roleids() {
  roleids_.Clear();
}
inline ::google::protobuf::uint64 ps_invite_enter_team_req::roleids(int index) const {
  return roleids_.Get(index);
}
inline void ps_invite_enter_team_req::set_roleids(int index, ::google::protobuf::uint64 value) {
  roleids_.Set(index, value);
}
inline void ps_invite_enter_team_req::add_roleids(::google::protobuf::uint64 value) {
  roleids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ps_invite_enter_team_req::roleids() const {
  return roleids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ps_invite_enter_team_req::mutable_roleids() {
  return &roleids_;
}

// -------------------------------------------------------------------

// ps_invite_enter_team_ntf

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_invite_enter_team_ntf_id];
inline bool ps_invite_enter_team_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_invite_enter_team_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_invite_enter_team_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_invite_enter_team_ntf::clear_protoid() {
  protoid_ = 1014;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID ps_invite_enter_team_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void ps_invite_enter_team_ntf::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 dest_role_id = 2;
inline bool ps_invite_enter_team_ntf::has_dest_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_invite_enter_team_ntf::set_has_dest_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_invite_enter_team_ntf::clear_has_dest_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_invite_enter_team_ntf::clear_dest_role_id() {
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dest_role_id();
}
inline ::google::protobuf::uint64 ps_invite_enter_team_ntf::dest_role_id() const {
  return dest_role_id_;
}
inline void ps_invite_enter_team_ntf::set_dest_role_id(::google::protobuf::uint64 value) {
  set_has_dest_role_id();
  dest_role_id_ = value;
}

// optional uint64 team_id = 3;
inline bool ps_invite_enter_team_ntf::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_invite_enter_team_ntf::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_invite_enter_team_ntf::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_invite_enter_team_ntf::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 ps_invite_enter_team_ntf::team_id() const {
  return team_id_;
}
inline void ps_invite_enter_team_ntf::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional string team_name = 4;
inline bool ps_invite_enter_team_ntf::has_team_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ps_invite_enter_team_ntf::set_has_team_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ps_invite_enter_team_ntf::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ps_invite_enter_team_ntf::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& ps_invite_enter_team_ntf::team_name() const {
  return *team_name_;
}
inline void ps_invite_enter_team_ntf::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void ps_invite_enter_team_ntf::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void ps_invite_enter_team_ntf::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ps_invite_enter_team_ntf::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  return team_name_;
}
inline ::std::string* ps_invite_enter_team_ntf::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ps_invite_enter_team_ntf::set_allocated_team_name(::std::string* team_name) {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (team_name) {
    set_has_team_name();
    team_name_ = team_name;
  } else {
    clear_has_team_name();
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 team_type = 5;
inline bool ps_invite_enter_team_ntf::has_team_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ps_invite_enter_team_ntf::set_has_team_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ps_invite_enter_team_ntf::clear_has_team_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ps_invite_enter_team_ntf::clear_team_type() {
  team_type_ = 0u;
  clear_has_team_type();
}
inline ::google::protobuf::uint32 ps_invite_enter_team_ntf::team_type() const {
  return team_type_;
}
inline void ps_invite_enter_team_ntf::set_team_type(::google::protobuf::uint32 value) {
  set_has_team_type();
  team_type_ = value;
}

// optional uint64 sour_role_id = 6;
inline bool ps_invite_enter_team_ntf::has_sour_role_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ps_invite_enter_team_ntf::set_has_sour_role_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ps_invite_enter_team_ntf::clear_has_sour_role_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ps_invite_enter_team_ntf::clear_sour_role_id() {
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sour_role_id();
}
inline ::google::protobuf::uint64 ps_invite_enter_team_ntf::sour_role_id() const {
  return sour_role_id_;
}
inline void ps_invite_enter_team_ntf::set_sour_role_id(::google::protobuf::uint64 value) {
  set_has_sour_role_id();
  sour_role_id_ = value;
}

// optional string sour_role_name = 7;
inline bool ps_invite_enter_team_ntf::has_sour_role_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ps_invite_enter_team_ntf::set_has_sour_role_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ps_invite_enter_team_ntf::clear_has_sour_role_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ps_invite_enter_team_ntf::clear_sour_role_name() {
  if (sour_role_name_ != &::google::protobuf::internal::kEmptyString) {
    sour_role_name_->clear();
  }
  clear_has_sour_role_name();
}
inline const ::std::string& ps_invite_enter_team_ntf::sour_role_name() const {
  return *sour_role_name_;
}
inline void ps_invite_enter_team_ntf::set_sour_role_name(const ::std::string& value) {
  set_has_sour_role_name();
  if (sour_role_name_ == &::google::protobuf::internal::kEmptyString) {
    sour_role_name_ = new ::std::string;
  }
  sour_role_name_->assign(value);
}
inline void ps_invite_enter_team_ntf::set_sour_role_name(const char* value) {
  set_has_sour_role_name();
  if (sour_role_name_ == &::google::protobuf::internal::kEmptyString) {
    sour_role_name_ = new ::std::string;
  }
  sour_role_name_->assign(value);
}
inline void ps_invite_enter_team_ntf::set_sour_role_name(const char* value, size_t size) {
  set_has_sour_role_name();
  if (sour_role_name_ == &::google::protobuf::internal::kEmptyString) {
    sour_role_name_ = new ::std::string;
  }
  sour_role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ps_invite_enter_team_ntf::mutable_sour_role_name() {
  set_has_sour_role_name();
  if (sour_role_name_ == &::google::protobuf::internal::kEmptyString) {
    sour_role_name_ = new ::std::string;
  }
  return sour_role_name_;
}
inline ::std::string* ps_invite_enter_team_ntf::release_sour_role_name() {
  clear_has_sour_role_name();
  if (sour_role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sour_role_name_;
    sour_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ps_invite_enter_team_ntf::set_allocated_sour_role_name(::std::string* sour_role_name) {
  if (sour_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sour_role_name_;
  }
  if (sour_role_name) {
    set_has_sour_role_name();
    sour_role_name_ = sour_role_name;
  } else {
    clear_has_sour_role_name();
    sour_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ps_get_offical_rank_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_req_id];
inline bool ps_get_offical_rank_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_get_offical_rank_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_get_offical_rank_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_get_offical_rank_req::clear_proto_id() {
  proto_id_ = 1100;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID ps_get_offical_rank_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void ps_get_offical_rank_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.EGrade office_lv = 2;
inline bool ps_get_offical_rank_req::has_office_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_get_offical_rank_req::set_has_office_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_get_offical_rank_req::clear_has_office_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_get_offical_rank_req::clear_office_lv() {
  office_lv_ = 0;
  clear_has_office_lv();
}
inline ::SProtoSpace::EGrade ps_get_offical_rank_req::office_lv() const {
  return static_cast< ::SProtoSpace::EGrade >(office_lv_);
}
inline void ps_get_offical_rank_req::set_office_lv(::SProtoSpace::EGrade value) {
  assert(::SProtoSpace::EGrade_IsValid(value));
  set_has_office_lv();
  office_lv_ = value;
}

// optional uint64 role_id = 3;
inline bool ps_get_offical_rank_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_get_offical_rank_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_get_offical_rank_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_get_offical_rank_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ps_get_offical_rank_req::role_id() const {
  return role_id_;
}
inline void ps_get_offical_rank_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 start = 4;
inline bool ps_get_offical_rank_req::has_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ps_get_offical_rank_req::set_has_start() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ps_get_offical_rank_req::clear_has_start() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ps_get_offical_rank_req::clear_start() {
  start_ = 0u;
  clear_has_start();
}
inline ::google::protobuf::uint32 ps_get_offical_rank_req::start() const {
  return start_;
}
inline void ps_get_offical_rank_req::set_start(::google::protobuf::uint32 value) {
  set_has_start();
  start_ = value;
}

// optional uint32 end = 5;
inline bool ps_get_offical_rank_req::has_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ps_get_offical_rank_req::set_has_end() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ps_get_offical_rank_req::clear_has_end() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ps_get_offical_rank_req::clear_end() {
  end_ = 0u;
  clear_has_end();
}
inline ::google::protobuf::uint32 ps_get_offical_rank_req::end() const {
  return end_;
}
inline void ps_get_offical_rank_req::set_end(::google::protobuf::uint32 value) {
  set_has_end();
  end_ = value;
}

// -------------------------------------------------------------------

// ps_get_offical_rank_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_ack_id];
inline bool ps_get_offical_rank_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_get_offical_rank_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_get_offical_rank_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_get_offical_rank_ack::clear_proto_id() {
  proto_id_ = 1101;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID ps_get_offical_rank_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void ps_get_offical_rank_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 role_id = 2;
inline bool ps_get_offical_rank_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_get_offical_rank_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_get_offical_rank_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_get_offical_rank_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ps_get_offical_rank_ack::role_id() const {
  return role_id_;
}
inline void ps_get_offical_rank_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 ret = 3;
inline bool ps_get_offical_rank_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_get_offical_rank_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_get_offical_rank_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_get_offical_rank_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 ps_get_offical_rank_ack::ret() const {
  return ret_;
}
inline void ps_get_offical_rank_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .SProtoSpace.offical_item_data rank_items = 4;
inline int ps_get_offical_rank_ack::rank_items_size() const {
  return rank_items_.size();
}
inline void ps_get_offical_rank_ack::clear_rank_items() {
  rank_items_.Clear();
}
inline const ::SProtoSpace::offical_item_data& ps_get_offical_rank_ack::rank_items(int index) const {
  return rank_items_.Get(index);
}
inline ::SProtoSpace::offical_item_data* ps_get_offical_rank_ack::mutable_rank_items(int index) {
  return rank_items_.Mutable(index);
}
inline ::SProtoSpace::offical_item_data* ps_get_offical_rank_ack::add_rank_items() {
  return rank_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >&
ps_get_offical_rank_ack::rank_items() const {
  return rank_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >*
ps_get_offical_rank_ack::mutable_rank_items() {
  return &rank_items_;
}

// -------------------------------------------------------------------

// ps_global_offical_rank_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_global_offical_rank_req_id];
inline bool ps_global_offical_rank_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_global_offical_rank_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_global_offical_rank_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_global_offical_rank_req::clear_proto_id() {
  proto_id_ = 1552;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID ps_global_offical_rank_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void ps_global_offical_rank_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 start = 2;
inline bool ps_global_offical_rank_req::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_global_offical_rank_req::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_global_offical_rank_req::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_global_offical_rank_req::clear_start() {
  start_ = 0u;
  clear_has_start();
}
inline ::google::protobuf::uint32 ps_global_offical_rank_req::start() const {
  return start_;
}
inline void ps_global_offical_rank_req::set_start(::google::protobuf::uint32 value) {
  set_has_start();
  start_ = value;
}

// optional uint32 end = 3;
inline bool ps_global_offical_rank_req::has_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_global_offical_rank_req::set_has_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_global_offical_rank_req::clear_has_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_global_offical_rank_req::clear_end() {
  end_ = 0u;
  clear_has_end();
}
inline ::google::protobuf::uint32 ps_global_offical_rank_req::end() const {
  return end_;
}
inline void ps_global_offical_rank_req::set_end(::google::protobuf::uint32 value) {
  set_has_end();
  end_ = value;
}

// -------------------------------------------------------------------

// ps_global_offical_rank_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_global_offical_rank_ack_id];
inline bool ps_global_offical_rank_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_global_offical_rank_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_global_offical_rank_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_global_offical_rank_ack::clear_proto_id() {
  proto_id_ = 1553;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID ps_global_offical_rank_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void ps_global_offical_rank_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool ps_global_offical_rank_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_global_offical_rank_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_global_offical_rank_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_global_offical_rank_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 ps_global_offical_rank_ack::ret() const {
  return ret_;
}
inline void ps_global_offical_rank_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .SProtoSpace.offical_member_data members = 3;
inline int ps_global_offical_rank_ack::members_size() const {
  return members_.size();
}
inline void ps_global_offical_rank_ack::clear_members() {
  members_.Clear();
}
inline const ::SProtoSpace::offical_member_data& ps_global_offical_rank_ack::members(int index) const {
  return members_.Get(index);
}
inline ::SProtoSpace::offical_member_data* ps_global_offical_rank_ack::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::SProtoSpace::offical_member_data* ps_global_offical_rank_ack::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data >&
ps_global_offical_rank_ack::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data >*
ps_global_offical_rank_ack::mutable_members() {
  return &members_;
}

// optional .SProtoSpace.offical_member_data my_data = 4;
inline bool ps_global_offical_rank_ack::has_my_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ps_global_offical_rank_ack::set_has_my_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ps_global_offical_rank_ack::clear_has_my_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ps_global_offical_rank_ack::clear_my_data() {
  if (my_data_ != NULL) my_data_->::SProtoSpace::offical_member_data::Clear();
  clear_has_my_data();
}
inline const ::SProtoSpace::offical_member_data& ps_global_offical_rank_ack::my_data() const {
  return my_data_ != NULL ? *my_data_ : *default_instance_->my_data_;
}
inline ::SProtoSpace::offical_member_data* ps_global_offical_rank_ack::mutable_my_data() {
  set_has_my_data();
  if (my_data_ == NULL) my_data_ = new ::SProtoSpace::offical_member_data;
  return my_data_;
}
inline ::SProtoSpace::offical_member_data* ps_global_offical_rank_ack::release_my_data() {
  clear_has_my_data();
  ::SProtoSpace::offical_member_data* temp = my_data_;
  my_data_ = NULL;
  return temp;
}
inline void ps_global_offical_rank_ack::set_allocated_my_data(::SProtoSpace::offical_member_data* my_data) {
  delete my_data_;
  my_data_ = my_data;
  if (my_data) {
    set_has_my_data();
  } else {
    clear_has_my_data();
  }
}

// -------------------------------------------------------------------

// ps_get_offical_rank_info_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_info_req_id];
inline bool ps_get_offical_rank_info_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_get_offical_rank_info_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_get_offical_rank_info_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_get_offical_rank_info_req::clear_proto_id() {
  proto_id_ = 1538;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID ps_get_offical_rank_info_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void ps_get_offical_rank_info_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.EGrade office_lv = 2;
inline bool ps_get_offical_rank_info_req::has_office_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_get_offical_rank_info_req::set_has_office_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_get_offical_rank_info_req::clear_has_office_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_get_offical_rank_info_req::clear_office_lv() {
  office_lv_ = 0;
  clear_has_office_lv();
}
inline ::SProtoSpace::EGrade ps_get_offical_rank_info_req::office_lv() const {
  return static_cast< ::SProtoSpace::EGrade >(office_lv_);
}
inline void ps_get_offical_rank_info_req::set_office_lv(::SProtoSpace::EGrade value) {
  assert(::SProtoSpace::EGrade_IsValid(value));
  set_has_office_lv();
  office_lv_ = value;
}

// optional uint64 role_id = 3;
inline bool ps_get_offical_rank_info_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_get_offical_rank_info_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_get_offical_rank_info_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_get_offical_rank_info_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ps_get_offical_rank_info_req::role_id() const {
  return role_id_;
}
inline void ps_get_offical_rank_info_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 start = 4;
inline bool ps_get_offical_rank_info_req::has_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ps_get_offical_rank_info_req::set_has_start() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ps_get_offical_rank_info_req::clear_has_start() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ps_get_offical_rank_info_req::clear_start() {
  start_ = 0;
  clear_has_start();
}
inline ::google::protobuf::int32 ps_get_offical_rank_info_req::start() const {
  return start_;
}
inline void ps_get_offical_rank_info_req::set_start(::google::protobuf::int32 value) {
  set_has_start();
  start_ = value;
}

// optional int32 len = 5;
inline bool ps_get_offical_rank_info_req::has_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ps_get_offical_rank_info_req::set_has_len() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ps_get_offical_rank_info_req::clear_has_len() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ps_get_offical_rank_info_req::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 ps_get_offical_rank_info_req::len() const {
  return len_;
}
inline void ps_get_offical_rank_info_req::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
}

// optional bool show = 6;
inline bool ps_get_offical_rank_info_req::has_show() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ps_get_offical_rank_info_req::set_has_show() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ps_get_offical_rank_info_req::clear_has_show() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ps_get_offical_rank_info_req::clear_show() {
  show_ = false;
  clear_has_show();
}
inline bool ps_get_offical_rank_info_req::show() const {
  return show_;
}
inline void ps_get_offical_rank_info_req::set_show(bool value) {
  set_has_show();
  show_ = value;
}

// -------------------------------------------------------------------

// ps_get_offical_rank_info_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_info_ack_id];
inline bool ps_get_offical_rank_info_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_get_offical_rank_info_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_get_offical_rank_info_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_get_offical_rank_info_ack::clear_proto_id() {
  proto_id_ = 1539;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID ps_get_offical_rank_info_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void ps_get_offical_rank_info_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool ps_get_offical_rank_info_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_get_offical_rank_info_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_get_offical_rank_info_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_get_offical_rank_info_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 ps_get_offical_rank_info_ack::ret() const {
  return ret_;
}
inline void ps_get_offical_rank_info_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 role_id = 3;
inline bool ps_get_offical_rank_info_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_get_offical_rank_info_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_get_offical_rank_info_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_get_offical_rank_info_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ps_get_offical_rank_info_ack::role_id() const {
  return role_id_;
}
inline void ps_get_offical_rank_info_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 offical_challenge_num = 4;
inline bool ps_get_offical_rank_info_ack::has_offical_challenge_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ps_get_offical_rank_info_ack::set_has_offical_challenge_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ps_get_offical_rank_info_ack::clear_has_offical_challenge_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ps_get_offical_rank_info_ack::clear_offical_challenge_num() {
  offical_challenge_num_ = 0;
  clear_has_offical_challenge_num();
}
inline ::google::protobuf::int32 ps_get_offical_rank_info_ack::offical_challenge_num() const {
  return offical_challenge_num_;
}
inline void ps_get_offical_rank_info_ack::set_offical_challenge_num(::google::protobuf::int32 value) {
  set_has_offical_challenge_num();
  offical_challenge_num_ = value;
}

// optional int32 offical_challenge_max = 5;
inline bool ps_get_offical_rank_info_ack::has_offical_challenge_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ps_get_offical_rank_info_ack::set_has_offical_challenge_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ps_get_offical_rank_info_ack::clear_has_offical_challenge_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ps_get_offical_rank_info_ack::clear_offical_challenge_max() {
  offical_challenge_max_ = 0;
  clear_has_offical_challenge_max();
}
inline ::google::protobuf::int32 ps_get_offical_rank_info_ack::offical_challenge_max() const {
  return offical_challenge_max_;
}
inline void ps_get_offical_rank_info_ack::set_offical_challenge_max(::google::protobuf::int32 value) {
  set_has_offical_challenge_max();
  offical_challenge_max_ = value;
}

// optional .SProtoSpace.offical_item_data my_item = 6;
inline bool ps_get_offical_rank_info_ack::has_my_item() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ps_get_offical_rank_info_ack::set_has_my_item() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ps_get_offical_rank_info_ack::clear_has_my_item() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ps_get_offical_rank_info_ack::clear_my_item() {
  if (my_item_ != NULL) my_item_->::SProtoSpace::offical_item_data::Clear();
  clear_has_my_item();
}
inline const ::SProtoSpace::offical_item_data& ps_get_offical_rank_info_ack::my_item() const {
  return my_item_ != NULL ? *my_item_ : *default_instance_->my_item_;
}
inline ::SProtoSpace::offical_item_data* ps_get_offical_rank_info_ack::mutable_my_item() {
  set_has_my_item();
  if (my_item_ == NULL) my_item_ = new ::SProtoSpace::offical_item_data;
  return my_item_;
}
inline ::SProtoSpace::offical_item_data* ps_get_offical_rank_info_ack::release_my_item() {
  clear_has_my_item();
  ::SProtoSpace::offical_item_data* temp = my_item_;
  my_item_ = NULL;
  return temp;
}
inline void ps_get_offical_rank_info_ack::set_allocated_my_item(::SProtoSpace::offical_item_data* my_item) {
  delete my_item_;
  my_item_ = my_item;
  if (my_item) {
    set_has_my_item();
  } else {
    clear_has_my_item();
  }
}

// repeated .SProtoSpace.offical_item_data rank_items = 7;
inline int ps_get_offical_rank_info_ack::rank_items_size() const {
  return rank_items_.size();
}
inline void ps_get_offical_rank_info_ack::clear_rank_items() {
  rank_items_.Clear();
}
inline const ::SProtoSpace::offical_item_data& ps_get_offical_rank_info_ack::rank_items(int index) const {
  return rank_items_.Get(index);
}
inline ::SProtoSpace::offical_item_data* ps_get_offical_rank_info_ack::mutable_rank_items(int index) {
  return rank_items_.Mutable(index);
}
inline ::SProtoSpace::offical_item_data* ps_get_offical_rank_info_ack::add_rank_items() {
  return rank_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >&
ps_get_offical_rank_info_ack::rank_items() const {
  return rank_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >*
ps_get_offical_rank_info_ack::mutable_rank_items() {
  return &rank_items_;
}

// repeated .SProtoSpace.role_show_role_equipped equips = 8;
inline int ps_get_offical_rank_info_ack::equips_size() const {
  return equips_.size();
}
inline void ps_get_offical_rank_info_ack::clear_equips() {
  equips_.Clear();
}
inline const ::SProtoSpace::role_show_role_equipped& ps_get_offical_rank_info_ack::equips(int index) const {
  return equips_.Get(index);
}
inline ::SProtoSpace::role_show_role_equipped* ps_get_offical_rank_info_ack::mutable_equips(int index) {
  return equips_.Mutable(index);
}
inline ::SProtoSpace::role_show_role_equipped* ps_get_offical_rank_info_ack::add_equips() {
  return equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_show_role_equipped >&
ps_get_offical_rank_info_ack::equips() const {
  return equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_show_role_equipped >*
ps_get_offical_rank_info_ack::mutable_equips() {
  return &equips_;
}

// optional int32 count = 9;
inline bool ps_get_offical_rank_info_ack::has_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ps_get_offical_rank_info_ack::set_has_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ps_get_offical_rank_info_ack::clear_has_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ps_get_offical_rank_info_ack::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 ps_get_offical_rank_info_ack::count() const {
  return count_;
}
inline void ps_get_offical_rank_info_ack::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// ps_add_robot_to_offical_arena_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_add_robot_to_offical_arena_req_id];
inline bool ps_add_robot_to_offical_arena_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_add_robot_to_offical_arena_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_add_robot_to_offical_arena_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_add_robot_to_offical_arena_req::clear_proto_id() {
  proto_id_ = 1102;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID ps_add_robot_to_offical_arena_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void ps_add_robot_to_offical_arena_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.arena_item_data item_data = 2;
inline bool ps_add_robot_to_offical_arena_req::has_item_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_add_robot_to_offical_arena_req::set_has_item_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_add_robot_to_offical_arena_req::clear_has_item_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_add_robot_to_offical_arena_req::clear_item_data() {
  if (item_data_ != NULL) item_data_->::SProtoSpace::arena_item_data::Clear();
  clear_has_item_data();
}
inline const ::SProtoSpace::arena_item_data& ps_add_robot_to_offical_arena_req::item_data() const {
  return item_data_ != NULL ? *item_data_ : *default_instance_->item_data_;
}
inline ::SProtoSpace::arena_item_data* ps_add_robot_to_offical_arena_req::mutable_item_data() {
  set_has_item_data();
  if (item_data_ == NULL) item_data_ = new ::SProtoSpace::arena_item_data;
  return item_data_;
}
inline ::SProtoSpace::arena_item_data* ps_add_robot_to_offical_arena_req::release_item_data() {
  clear_has_item_data();
  ::SProtoSpace::arena_item_data* temp = item_data_;
  item_data_ = NULL;
  return temp;
}
inline void ps_add_robot_to_offical_arena_req::set_allocated_item_data(::SProtoSpace::arena_item_data* item_data) {
  delete item_data_;
  item_data_ = item_data;
  if (item_data) {
    set_has_item_data();
  } else {
    clear_has_item_data();
  }
}

// optional .SProtoSpace.EGrade office_lv = 3;
inline bool ps_add_robot_to_offical_arena_req::has_office_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_add_robot_to_offical_arena_req::set_has_office_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_add_robot_to_offical_arena_req::clear_has_office_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_add_robot_to_offical_arena_req::clear_office_lv() {
  office_lv_ = 0;
  clear_has_office_lv();
}
inline ::SProtoSpace::EGrade ps_add_robot_to_offical_arena_req::office_lv() const {
  return static_cast< ::SProtoSpace::EGrade >(office_lv_);
}
inline void ps_add_robot_to_offical_arena_req::set_office_lv(::SProtoSpace::EGrade value) {
  assert(::SProtoSpace::EGrade_IsValid(value));
  set_has_office_lv();
  office_lv_ = value;
}

// -------------------------------------------------------------------

// ps_add_robot_to_offical_arena_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_add_robot_to_offical_arena_ack_id];
inline bool ps_add_robot_to_offical_arena_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_add_robot_to_offical_arena_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_add_robot_to_offical_arena_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_add_robot_to_offical_arena_ack::clear_proto_id() {
  proto_id_ = 1103;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID ps_add_robot_to_offical_arena_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void ps_add_robot_to_offical_arena_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 role_id = 2;
inline bool ps_add_robot_to_offical_arena_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_add_robot_to_offical_arena_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_add_robot_to_offical_arena_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_add_robot_to_offical_arena_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ps_add_robot_to_offical_arena_ack::role_id() const {
  return role_id_;
}
inline void ps_add_robot_to_offical_arena_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 ret = 3;
inline bool ps_add_robot_to_offical_arena_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_add_robot_to_offical_arena_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_add_robot_to_offical_arena_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_add_robot_to_offical_arena_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 ps_add_robot_to_offical_arena_ack::ret() const {
  return ret_;
}
inline void ps_add_robot_to_offical_arena_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// ps_challenge_offical_rank_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_challenge_offical_rank_req_id];
inline bool ps_challenge_offical_rank_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_challenge_offical_rank_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_challenge_offical_rank_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_challenge_offical_rank_req::clear_proto_id() {
  proto_id_ = 1104;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID ps_challenge_offical_rank_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void ps_challenge_offical_rank_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 sour_role_id = 2;
inline bool ps_challenge_offical_rank_req::has_sour_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_challenge_offical_rank_req::set_has_sour_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_challenge_offical_rank_req::clear_has_sour_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_challenge_offical_rank_req::clear_sour_role_id() {
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sour_role_id();
}
inline ::google::protobuf::uint64 ps_challenge_offical_rank_req::sour_role_id() const {
  return sour_role_id_;
}
inline void ps_challenge_offical_rank_req::set_sour_role_id(::google::protobuf::uint64 value) {
  set_has_sour_role_id();
  sour_role_id_ = value;
}

// optional uint64 dest_role_id = 3;
inline bool ps_challenge_offical_rank_req::has_dest_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_challenge_offical_rank_req::set_has_dest_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_challenge_offical_rank_req::clear_has_dest_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_challenge_offical_rank_req::clear_dest_role_id() {
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dest_role_id();
}
inline ::google::protobuf::uint64 ps_challenge_offical_rank_req::dest_role_id() const {
  return dest_role_id_;
}
inline void ps_challenge_offical_rank_req::set_dest_role_id(::google::protobuf::uint64 value) {
  set_has_dest_role_id();
  dest_role_id_ = value;
}

// optional .SProtoSpace.EGrade office_lv = 4;
inline bool ps_challenge_offical_rank_req::has_office_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ps_challenge_offical_rank_req::set_has_office_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ps_challenge_offical_rank_req::clear_has_office_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ps_challenge_offical_rank_req::clear_office_lv() {
  office_lv_ = 0;
  clear_has_office_lv();
}
inline ::SProtoSpace::EGrade ps_challenge_offical_rank_req::office_lv() const {
  return static_cast< ::SProtoSpace::EGrade >(office_lv_);
}
inline void ps_challenge_offical_rank_req::set_office_lv(::SProtoSpace::EGrade value) {
  assert(::SProtoSpace::EGrade_IsValid(value));
  set_has_office_lv();
  office_lv_ = value;
}

// -------------------------------------------------------------------

// ps_challenge_offical_rank_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_challenge_offical_rank_ack_id];
inline bool ps_challenge_offical_rank_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_challenge_offical_rank_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_challenge_offical_rank_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_challenge_offical_rank_ack::clear_proto_id() {
  proto_id_ = 1105;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID ps_challenge_offical_rank_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void ps_challenge_offical_rank_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.EGrade office_lv = 2;
inline bool ps_challenge_offical_rank_ack::has_office_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_challenge_offical_rank_ack::set_has_office_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_challenge_offical_rank_ack::clear_has_office_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_challenge_offical_rank_ack::clear_office_lv() {
  office_lv_ = 0;
  clear_has_office_lv();
}
inline ::SProtoSpace::EGrade ps_challenge_offical_rank_ack::office_lv() const {
  return static_cast< ::SProtoSpace::EGrade >(office_lv_);
}
inline void ps_challenge_offical_rank_ack::set_office_lv(::SProtoSpace::EGrade value) {
  assert(::SProtoSpace::EGrade_IsValid(value));
  set_has_office_lv();
  office_lv_ = value;
}

// optional uint64 sour_role_id = 3;
inline bool ps_challenge_offical_rank_ack::has_sour_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_challenge_offical_rank_ack::set_has_sour_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_challenge_offical_rank_ack::clear_has_sour_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_challenge_offical_rank_ack::clear_sour_role_id() {
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sour_role_id();
}
inline ::google::protobuf::uint64 ps_challenge_offical_rank_ack::sour_role_id() const {
  return sour_role_id_;
}
inline void ps_challenge_offical_rank_ack::set_sour_role_id(::google::protobuf::uint64 value) {
  set_has_sour_role_id();
  sour_role_id_ = value;
}

// optional .SProtoSpace.arena_item_data sour_data = 4;
inline bool ps_challenge_offical_rank_ack::has_sour_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ps_challenge_offical_rank_ack::set_has_sour_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ps_challenge_offical_rank_ack::clear_has_sour_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ps_challenge_offical_rank_ack::clear_sour_data() {
  if (sour_data_ != NULL) sour_data_->::SProtoSpace::arena_item_data::Clear();
  clear_has_sour_data();
}
inline const ::SProtoSpace::arena_item_data& ps_challenge_offical_rank_ack::sour_data() const {
  return sour_data_ != NULL ? *sour_data_ : *default_instance_->sour_data_;
}
inline ::SProtoSpace::arena_item_data* ps_challenge_offical_rank_ack::mutable_sour_data() {
  set_has_sour_data();
  if (sour_data_ == NULL) sour_data_ = new ::SProtoSpace::arena_item_data;
  return sour_data_;
}
inline ::SProtoSpace::arena_item_data* ps_challenge_offical_rank_ack::release_sour_data() {
  clear_has_sour_data();
  ::SProtoSpace::arena_item_data* temp = sour_data_;
  sour_data_ = NULL;
  return temp;
}
inline void ps_challenge_offical_rank_ack::set_allocated_sour_data(::SProtoSpace::arena_item_data* sour_data) {
  delete sour_data_;
  sour_data_ = sour_data;
  if (sour_data) {
    set_has_sour_data();
  } else {
    clear_has_sour_data();
  }
}

// optional uint64 dest_role_id = 5;
inline bool ps_challenge_offical_rank_ack::has_dest_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ps_challenge_offical_rank_ack::set_has_dest_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ps_challenge_offical_rank_ack::clear_has_dest_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ps_challenge_offical_rank_ack::clear_dest_role_id() {
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dest_role_id();
}
inline ::google::protobuf::uint64 ps_challenge_offical_rank_ack::dest_role_id() const {
  return dest_role_id_;
}
inline void ps_challenge_offical_rank_ack::set_dest_role_id(::google::protobuf::uint64 value) {
  set_has_dest_role_id();
  dest_role_id_ = value;
}

// optional .SProtoSpace.arena_item_data dest_data = 6;
inline bool ps_challenge_offical_rank_ack::has_dest_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ps_challenge_offical_rank_ack::set_has_dest_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ps_challenge_offical_rank_ack::clear_has_dest_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ps_challenge_offical_rank_ack::clear_dest_data() {
  if (dest_data_ != NULL) dest_data_->::SProtoSpace::arena_item_data::Clear();
  clear_has_dest_data();
}
inline const ::SProtoSpace::arena_item_data& ps_challenge_offical_rank_ack::dest_data() const {
  return dest_data_ != NULL ? *dest_data_ : *default_instance_->dest_data_;
}
inline ::SProtoSpace::arena_item_data* ps_challenge_offical_rank_ack::mutable_dest_data() {
  set_has_dest_data();
  if (dest_data_ == NULL) dest_data_ = new ::SProtoSpace::arena_item_data;
  return dest_data_;
}
inline ::SProtoSpace::arena_item_data* ps_challenge_offical_rank_ack::release_dest_data() {
  clear_has_dest_data();
  ::SProtoSpace::arena_item_data* temp = dest_data_;
  dest_data_ = NULL;
  return temp;
}
inline void ps_challenge_offical_rank_ack::set_allocated_dest_data(::SProtoSpace::arena_item_data* dest_data) {
  delete dest_data_;
  dest_data_ = dest_data;
  if (dest_data) {
    set_has_dest_data();
  } else {
    clear_has_dest_data();
  }
}

// optional uint32 ret = 7;
inline bool ps_challenge_offical_rank_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ps_challenge_offical_rank_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ps_challenge_offical_rank_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ps_challenge_offical_rank_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 ps_challenge_offical_rank_ack::ret() const {
  return ret_;
}
inline void ps_challenge_offical_rank_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// ps_update_challenge_result_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_update_challenge_result_req_id];
inline bool ps_update_challenge_result_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_update_challenge_result_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_update_challenge_result_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_update_challenge_result_req::clear_proto_id() {
  proto_id_ = 1106;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID ps_update_challenge_result_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void ps_update_challenge_result_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.EGrade office_lv = 2;
inline bool ps_update_challenge_result_req::has_office_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_update_challenge_result_req::set_has_office_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_update_challenge_result_req::clear_has_office_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_update_challenge_result_req::clear_office_lv() {
  office_lv_ = 0;
  clear_has_office_lv();
}
inline ::SProtoSpace::EGrade ps_update_challenge_result_req::office_lv() const {
  return static_cast< ::SProtoSpace::EGrade >(office_lv_);
}
inline void ps_update_challenge_result_req::set_office_lv(::SProtoSpace::EGrade value) {
  assert(::SProtoSpace::EGrade_IsValid(value));
  set_has_office_lv();
  office_lv_ = value;
}

// optional uint64 sour_role_id = 3;
inline bool ps_update_challenge_result_req::has_sour_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_update_challenge_result_req::set_has_sour_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_update_challenge_result_req::clear_has_sour_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_update_challenge_result_req::clear_sour_role_id() {
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sour_role_id();
}
inline ::google::protobuf::uint64 ps_update_challenge_result_req::sour_role_id() const {
  return sour_role_id_;
}
inline void ps_update_challenge_result_req::set_sour_role_id(::google::protobuf::uint64 value) {
  set_has_sour_role_id();
  sour_role_id_ = value;
}

// optional uint64 dest_role_id = 4;
inline bool ps_update_challenge_result_req::has_dest_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ps_update_challenge_result_req::set_has_dest_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ps_update_challenge_result_req::clear_has_dest_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ps_update_challenge_result_req::clear_dest_role_id() {
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dest_role_id();
}
inline ::google::protobuf::uint64 ps_update_challenge_result_req::dest_role_id() const {
  return dest_role_id_;
}
inline void ps_update_challenge_result_req::set_dest_role_id(::google::protobuf::uint64 value) {
  set_has_dest_role_id();
  dest_role_id_ = value;
}

// optional bool win = 5;
inline bool ps_update_challenge_result_req::has_win() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ps_update_challenge_result_req::set_has_win() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ps_update_challenge_result_req::clear_has_win() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ps_update_challenge_result_req::clear_win() {
  win_ = false;
  clear_has_win();
}
inline bool ps_update_challenge_result_req::win() const {
  return win_;
}
inline void ps_update_challenge_result_req::set_win(bool value) {
  set_has_win();
  win_ = value;
}

// optional uint64 battle_id = 6;
inline bool ps_update_challenge_result_req::has_battle_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ps_update_challenge_result_req::set_has_battle_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ps_update_challenge_result_req::clear_has_battle_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ps_update_challenge_result_req::clear_battle_id() {
  battle_id_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_id();
}
inline ::google::protobuf::uint64 ps_update_challenge_result_req::battle_id() const {
  return battle_id_;
}
inline void ps_update_challenge_result_req::set_battle_id(::google::protobuf::uint64 value) {
  set_has_battle_id();
  battle_id_ = value;
}

// -------------------------------------------------------------------

// ps_update_challenge_result_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_update_challenge_result_ack_id];
inline bool ps_update_challenge_result_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_update_challenge_result_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_update_challenge_result_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_update_challenge_result_ack::clear_proto_id() {
  proto_id_ = 1107;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID ps_update_challenge_result_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void ps_update_challenge_result_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool ps_update_challenge_result_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_update_challenge_result_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_update_challenge_result_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_update_challenge_result_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 ps_update_challenge_result_ack::ret() const {
  return ret_;
}
inline void ps_update_challenge_result_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .SProtoSpace.EGrade office_lv = 3;
inline bool ps_update_challenge_result_ack::has_office_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_update_challenge_result_ack::set_has_office_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_update_challenge_result_ack::clear_has_office_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_update_challenge_result_ack::clear_office_lv() {
  office_lv_ = 0;
  clear_has_office_lv();
}
inline ::SProtoSpace::EGrade ps_update_challenge_result_ack::office_lv() const {
  return static_cast< ::SProtoSpace::EGrade >(office_lv_);
}
inline void ps_update_challenge_result_ack::set_office_lv(::SProtoSpace::EGrade value) {
  assert(::SProtoSpace::EGrade_IsValid(value));
  set_has_office_lv();
  office_lv_ = value;
}

// optional uint64 dest_role_id = 4;
inline bool ps_update_challenge_result_ack::has_dest_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ps_update_challenge_result_ack::set_has_dest_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ps_update_challenge_result_ack::clear_has_dest_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ps_update_challenge_result_ack::clear_dest_role_id() {
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dest_role_id();
}
inline ::google::protobuf::uint64 ps_update_challenge_result_ack::dest_role_id() const {
  return dest_role_id_;
}
inline void ps_update_challenge_result_ack::set_dest_role_id(::google::protobuf::uint64 value) {
  set_has_dest_role_id();
  dest_role_id_ = value;
}

// optional int32 dest_older_rankingid = 5;
inline bool ps_update_challenge_result_ack::has_dest_older_rankingid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ps_update_challenge_result_ack::set_has_dest_older_rankingid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ps_update_challenge_result_ack::clear_has_dest_older_rankingid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ps_update_challenge_result_ack::clear_dest_older_rankingid() {
  dest_older_rankingid_ = 0;
  clear_has_dest_older_rankingid();
}
inline ::google::protobuf::int32 ps_update_challenge_result_ack::dest_older_rankingid() const {
  return dest_older_rankingid_;
}
inline void ps_update_challenge_result_ack::set_dest_older_rankingid(::google::protobuf::int32 value) {
  set_has_dest_older_rankingid();
  dest_older_rankingid_ = value;
}

// optional int32 dest_new_rankingid = 6;
inline bool ps_update_challenge_result_ack::has_dest_new_rankingid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ps_update_challenge_result_ack::set_has_dest_new_rankingid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ps_update_challenge_result_ack::clear_has_dest_new_rankingid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ps_update_challenge_result_ack::clear_dest_new_rankingid() {
  dest_new_rankingid_ = 0;
  clear_has_dest_new_rankingid();
}
inline ::google::protobuf::int32 ps_update_challenge_result_ack::dest_new_rankingid() const {
  return dest_new_rankingid_;
}
inline void ps_update_challenge_result_ack::set_dest_new_rankingid(::google::protobuf::int32 value) {
  set_has_dest_new_rankingid();
  dest_new_rankingid_ = value;
}

// optional uint64 sour_role_id = 7;
inline bool ps_update_challenge_result_ack::has_sour_role_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ps_update_challenge_result_ack::set_has_sour_role_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ps_update_challenge_result_ack::clear_has_sour_role_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ps_update_challenge_result_ack::clear_sour_role_id() {
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sour_role_id();
}
inline ::google::protobuf::uint64 ps_update_challenge_result_ack::sour_role_id() const {
  return sour_role_id_;
}
inline void ps_update_challenge_result_ack::set_sour_role_id(::google::protobuf::uint64 value) {
  set_has_sour_role_id();
  sour_role_id_ = value;
}

// optional int32 sour_older_rankingid = 8;
inline bool ps_update_challenge_result_ack::has_sour_older_rankingid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ps_update_challenge_result_ack::set_has_sour_older_rankingid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ps_update_challenge_result_ack::clear_has_sour_older_rankingid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ps_update_challenge_result_ack::clear_sour_older_rankingid() {
  sour_older_rankingid_ = 0;
  clear_has_sour_older_rankingid();
}
inline ::google::protobuf::int32 ps_update_challenge_result_ack::sour_older_rankingid() const {
  return sour_older_rankingid_;
}
inline void ps_update_challenge_result_ack::set_sour_older_rankingid(::google::protobuf::int32 value) {
  set_has_sour_older_rankingid();
  sour_older_rankingid_ = value;
}

// optional int32 sour_new_rankingid = 9;
inline bool ps_update_challenge_result_ack::has_sour_new_rankingid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ps_update_challenge_result_ack::set_has_sour_new_rankingid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ps_update_challenge_result_ack::clear_has_sour_new_rankingid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ps_update_challenge_result_ack::clear_sour_new_rankingid() {
  sour_new_rankingid_ = 0;
  clear_has_sour_new_rankingid();
}
inline ::google::protobuf::int32 ps_update_challenge_result_ack::sour_new_rankingid() const {
  return sour_new_rankingid_;
}
inline void ps_update_challenge_result_ack::set_sour_new_rankingid(::google::protobuf::int32 value) {
  set_has_sour_new_rankingid();
  sour_new_rankingid_ = value;
}

// optional uint64 battle_id = 10;
inline bool ps_update_challenge_result_ack::has_battle_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ps_update_challenge_result_ack::set_has_battle_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ps_update_challenge_result_ack::clear_has_battle_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ps_update_challenge_result_ack::clear_battle_id() {
  battle_id_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_id();
}
inline ::google::protobuf::uint64 ps_update_challenge_result_ack::battle_id() const {
  return battle_id_;
}
inline void ps_update_challenge_result_ack::set_battle_id(::google::protobuf::uint64 value) {
  set_has_battle_id();
  battle_id_ = value;
}

// optional bool win = 11;
inline bool ps_update_challenge_result_ack::has_win() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ps_update_challenge_result_ack::set_has_win() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ps_update_challenge_result_ack::clear_has_win() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ps_update_challenge_result_ack::clear_win() {
  win_ = false;
  clear_has_win();
}
inline bool ps_update_challenge_result_ack::win() const {
  return win_;
}
inline void ps_update_challenge_result_ack::set_win(bool value) {
  set_has_win();
  win_ = value;
}

// -------------------------------------------------------------------

// offical_examine_battle_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_examine_battle_req_id];
inline bool offical_examine_battle_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_examine_battle_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_examine_battle_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_examine_battle_req::clear_proto_id() {
  proto_id_ = 1108;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID offical_examine_battle_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void offical_examine_battle_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.EGrade office_lv = 2;
inline bool offical_examine_battle_req::has_office_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offical_examine_battle_req::set_has_office_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offical_examine_battle_req::clear_has_office_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offical_examine_battle_req::clear_office_lv() {
  office_lv_ = 0;
  clear_has_office_lv();
}
inline ::SProtoSpace::EGrade offical_examine_battle_req::office_lv() const {
  return static_cast< ::SProtoSpace::EGrade >(office_lv_);
}
inline void offical_examine_battle_req::set_office_lv(::SProtoSpace::EGrade value) {
  assert(::SProtoSpace::EGrade_IsValid(value));
  set_has_office_lv();
  office_lv_ = value;
}

// optional .SProtoSpace.battle_role_info sour_data = 3;
inline bool offical_examine_battle_req::has_sour_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void offical_examine_battle_req::set_has_sour_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void offical_examine_battle_req::clear_has_sour_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void offical_examine_battle_req::clear_sour_data() {
  if (sour_data_ != NULL) sour_data_->::SProtoSpace::battle_role_info::Clear();
  clear_has_sour_data();
}
inline const ::SProtoSpace::battle_role_info& offical_examine_battle_req::sour_data() const {
  return sour_data_ != NULL ? *sour_data_ : *default_instance_->sour_data_;
}
inline ::SProtoSpace::battle_role_info* offical_examine_battle_req::mutable_sour_data() {
  set_has_sour_data();
  if (sour_data_ == NULL) sour_data_ = new ::SProtoSpace::battle_role_info;
  return sour_data_;
}
inline ::SProtoSpace::battle_role_info* offical_examine_battle_req::release_sour_data() {
  clear_has_sour_data();
  ::SProtoSpace::battle_role_info* temp = sour_data_;
  sour_data_ = NULL;
  return temp;
}
inline void offical_examine_battle_req::set_allocated_sour_data(::SProtoSpace::battle_role_info* sour_data) {
  delete sour_data_;
  sour_data_ = sour_data;
  if (sour_data) {
    set_has_sour_data();
  } else {
    clear_has_sour_data();
  }
}

// optional .SProtoSpace.battle_role_info dest_data = 4;
inline bool offical_examine_battle_req::has_dest_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void offical_examine_battle_req::set_has_dest_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void offical_examine_battle_req::clear_has_dest_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void offical_examine_battle_req::clear_dest_data() {
  if (dest_data_ != NULL) dest_data_->::SProtoSpace::battle_role_info::Clear();
  clear_has_dest_data();
}
inline const ::SProtoSpace::battle_role_info& offical_examine_battle_req::dest_data() const {
  return dest_data_ != NULL ? *dest_data_ : *default_instance_->dest_data_;
}
inline ::SProtoSpace::battle_role_info* offical_examine_battle_req::mutable_dest_data() {
  set_has_dest_data();
  if (dest_data_ == NULL) dest_data_ = new ::SProtoSpace::battle_role_info;
  return dest_data_;
}
inline ::SProtoSpace::battle_role_info* offical_examine_battle_req::release_dest_data() {
  clear_has_dest_data();
  ::SProtoSpace::battle_role_info* temp = dest_data_;
  dest_data_ = NULL;
  return temp;
}
inline void offical_examine_battle_req::set_allocated_dest_data(::SProtoSpace::battle_role_info* dest_data) {
  delete dest_data_;
  dest_data_ = dest_data;
  if (dest_data) {
    set_has_dest_data();
  } else {
    clear_has_dest_data();
  }
}

// -------------------------------------------------------------------

// offical_examine_battle_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_examine_battle_ack_id];
inline bool offical_examine_battle_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_examine_battle_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_examine_battle_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_examine_battle_ack::clear_proto_id() {
  proto_id_ = 1109;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID offical_examine_battle_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void offical_examine_battle_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.EGrade office_lv = 2;
inline bool offical_examine_battle_ack::has_office_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offical_examine_battle_ack::set_has_office_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offical_examine_battle_ack::clear_has_office_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offical_examine_battle_ack::clear_office_lv() {
  office_lv_ = 0;
  clear_has_office_lv();
}
inline ::SProtoSpace::EGrade offical_examine_battle_ack::office_lv() const {
  return static_cast< ::SProtoSpace::EGrade >(office_lv_);
}
inline void offical_examine_battle_ack::set_office_lv(::SProtoSpace::EGrade value) {
  assert(::SProtoSpace::EGrade_IsValid(value));
  set_has_office_lv();
  office_lv_ = value;
}

// optional uint64 sour_id = 3;
inline bool offical_examine_battle_ack::has_sour_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void offical_examine_battle_ack::set_has_sour_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void offical_examine_battle_ack::clear_has_sour_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void offical_examine_battle_ack::clear_sour_id() {
  sour_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sour_id();
}
inline ::google::protobuf::uint64 offical_examine_battle_ack::sour_id() const {
  return sour_id_;
}
inline void offical_examine_battle_ack::set_sour_id(::google::protobuf::uint64 value) {
  set_has_sour_id();
  sour_id_ = value;
}

// optional uint64 dest_id = 4;
inline bool offical_examine_battle_ack::has_dest_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void offical_examine_battle_ack::set_has_dest_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void offical_examine_battle_ack::clear_has_dest_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void offical_examine_battle_ack::clear_dest_id() {
  dest_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dest_id();
}
inline ::google::protobuf::uint64 offical_examine_battle_ack::dest_id() const {
  return dest_id_;
}
inline void offical_examine_battle_ack::set_dest_id(::google::protobuf::uint64 value) {
  set_has_dest_id();
  dest_id_ = value;
}

// optional int32 sour_score = 5;
inline bool offical_examine_battle_ack::has_sour_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void offical_examine_battle_ack::set_has_sour_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void offical_examine_battle_ack::clear_has_sour_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void offical_examine_battle_ack::clear_sour_score() {
  sour_score_ = 0;
  clear_has_sour_score();
}
inline ::google::protobuf::int32 offical_examine_battle_ack::sour_score() const {
  return sour_score_;
}
inline void offical_examine_battle_ack::set_sour_score(::google::protobuf::int32 value) {
  set_has_sour_score();
  sour_score_ = value;
}

// optional int32 dest_score = 6;
inline bool offical_examine_battle_ack::has_dest_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void offical_examine_battle_ack::set_has_dest_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void offical_examine_battle_ack::clear_has_dest_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void offical_examine_battle_ack::clear_dest_score() {
  dest_score_ = 0;
  clear_has_dest_score();
}
inline ::google::protobuf::int32 offical_examine_battle_ack::dest_score() const {
  return dest_score_;
}
inline void offical_examine_battle_ack::set_dest_score(::google::protobuf::int32 value) {
  set_has_dest_score();
  dest_score_ = value;
}

// optional bool win = 7;
inline bool offical_examine_battle_ack::has_win() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void offical_examine_battle_ack::set_has_win() {
  _has_bits_[0] |= 0x00000040u;
}
inline void offical_examine_battle_ack::clear_has_win() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void offical_examine_battle_ack::clear_win() {
  win_ = false;
  clear_has_win();
}
inline bool offical_examine_battle_ack::win() const {
  return win_;
}
inline void offical_examine_battle_ack::set_win(bool value) {
  set_has_win();
  win_ = value;
}

// -------------------------------------------------------------------

// ps_offical_apply_battle_result_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_offical_apply_battle_result_req_id];
inline bool ps_offical_apply_battle_result_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_offical_apply_battle_result_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_offical_apply_battle_result_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_offical_apply_battle_result_req::clear_proto_id() {
  proto_id_ = 1110;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID ps_offical_apply_battle_result_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void ps_offical_apply_battle_result_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.EGrade office_lv = 2;
inline bool ps_offical_apply_battle_result_req::has_office_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_offical_apply_battle_result_req::set_has_office_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_offical_apply_battle_result_req::clear_has_office_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_offical_apply_battle_result_req::clear_office_lv() {
  office_lv_ = 0;
  clear_has_office_lv();
}
inline ::SProtoSpace::EGrade ps_offical_apply_battle_result_req::office_lv() const {
  return static_cast< ::SProtoSpace::EGrade >(office_lv_);
}
inline void ps_offical_apply_battle_result_req::set_office_lv(::SProtoSpace::EGrade value) {
  assert(::SProtoSpace::EGrade_IsValid(value));
  set_has_office_lv();
  office_lv_ = value;
}

// optional uint64 role_id = 3;
inline bool ps_offical_apply_battle_result_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_offical_apply_battle_result_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_offical_apply_battle_result_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_offical_apply_battle_result_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ps_offical_apply_battle_result_req::role_id() const {
  return role_id_;
}
inline void ps_offical_apply_battle_result_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// ps_offical_apply_battle_result_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_offical_apply_battle_result_ack_id];
inline bool ps_offical_apply_battle_result_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_offical_apply_battle_result_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_offical_apply_battle_result_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_offical_apply_battle_result_ack::clear_proto_id() {
  proto_id_ = 1111;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID ps_offical_apply_battle_result_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void ps_offical_apply_battle_result_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.EGrade office_lv = 2;
inline bool ps_offical_apply_battle_result_ack::has_office_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ps_offical_apply_battle_result_ack::set_has_office_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ps_offical_apply_battle_result_ack::clear_has_office_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ps_offical_apply_battle_result_ack::clear_office_lv() {
  office_lv_ = 0;
  clear_has_office_lv();
}
inline ::SProtoSpace::EGrade ps_offical_apply_battle_result_ack::office_lv() const {
  return static_cast< ::SProtoSpace::EGrade >(office_lv_);
}
inline void ps_offical_apply_battle_result_ack::set_office_lv(::SProtoSpace::EGrade value) {
  assert(::SProtoSpace::EGrade_IsValid(value));
  set_has_office_lv();
  office_lv_ = value;
}

// optional uint64 role_id = 3;
inline bool ps_offical_apply_battle_result_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ps_offical_apply_battle_result_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ps_offical_apply_battle_result_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ps_offical_apply_battle_result_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 ps_offical_apply_battle_result_ack::role_id() const {
  return role_id_;
}
inline void ps_offical_apply_battle_result_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 time = 4;
inline bool ps_offical_apply_battle_result_ack::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ps_offical_apply_battle_result_ack::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ps_offical_apply_battle_result_ack::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ps_offical_apply_battle_result_ack::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ps_offical_apply_battle_result_ack::time() const {
  return time_;
}
inline void ps_offical_apply_battle_result_ack::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 my_place_id = 5;
inline bool ps_offical_apply_battle_result_ack::has_my_place_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ps_offical_apply_battle_result_ack::set_has_my_place_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ps_offical_apply_battle_result_ack::clear_has_my_place_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ps_offical_apply_battle_result_ack::clear_my_place_id() {
  my_place_id_ = 0;
  clear_has_my_place_id();
}
inline ::google::protobuf::int32 ps_offical_apply_battle_result_ack::my_place_id() const {
  return my_place_id_;
}
inline void ps_offical_apply_battle_result_ack::set_my_place_id(::google::protobuf::int32 value) {
  set_has_my_place_id();
  my_place_id_ = value;
}

// repeated .SProtoSpace.offical_apply_battle_data data = 6;
inline int ps_offical_apply_battle_result_ack::data_size() const {
  return data_.size();
}
inline void ps_offical_apply_battle_result_ack::clear_data() {
  data_.Clear();
}
inline const ::SProtoSpace::offical_apply_battle_data& ps_offical_apply_battle_result_ack::data(int index) const {
  return data_.Get(index);
}
inline ::SProtoSpace::offical_apply_battle_data* ps_offical_apply_battle_result_ack::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SProtoSpace::offical_apply_battle_data* ps_offical_apply_battle_result_ack::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_battle_data >&
ps_offical_apply_battle_result_ack::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_battle_data >*
ps_offical_apply_battle_result_ack::mutable_data() {
  return &data_;
}

// repeated .SProtoSpace.offical_apply_my_battle_data mydata = 7;
inline int ps_offical_apply_battle_result_ack::mydata_size() const {
  return mydata_.size();
}
inline void ps_offical_apply_battle_result_ack::clear_mydata() {
  mydata_.Clear();
}
inline const ::SProtoSpace::offical_apply_my_battle_data& ps_offical_apply_battle_result_ack::mydata(int index) const {
  return mydata_.Get(index);
}
inline ::SProtoSpace::offical_apply_my_battle_data* ps_offical_apply_battle_result_ack::mutable_mydata(int index) {
  return mydata_.Mutable(index);
}
inline ::SProtoSpace::offical_apply_my_battle_data* ps_offical_apply_battle_result_ack::add_mydata() {
  return mydata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_my_battle_data >&
ps_offical_apply_battle_result_ack::mydata() const {
  return mydata_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_my_battle_data >*
ps_offical_apply_battle_result_ack::mutable_mydata() {
  return &mydata_;
}

// optional uint32 ret = 8;
inline bool ps_offical_apply_battle_result_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ps_offical_apply_battle_result_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ps_offical_apply_battle_result_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ps_offical_apply_battle_result_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 ps_offical_apply_battle_result_ack::ret() const {
  return ret_;
}
inline void ps_offical_apply_battle_result_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// ps_test_offical_battle_result_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_test_offical_battle_result_req_id];
inline bool ps_test_offical_battle_result_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_test_offical_battle_result_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_test_offical_battle_result_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_test_offical_battle_result_req::clear_proto_id() {
  proto_id_ = 1112;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID ps_test_offical_battle_result_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void ps_test_offical_battle_result_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// -------------------------------------------------------------------

// ps_test_start_offical_battle_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_test_start_offical_battle_req_id];
inline bool ps_test_start_offical_battle_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_test_start_offical_battle_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_test_start_offical_battle_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_test_start_offical_battle_req::clear_proto_id() {
  proto_id_ = 1113;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID ps_test_start_offical_battle_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void ps_test_start_offical_battle_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// -------------------------------------------------------------------

// ps_test_offical_sign_up_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_test_offical_sign_up_req_id];
inline bool ps_test_offical_sign_up_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ps_test_offical_sign_up_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ps_test_offical_sign_up_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ps_test_offical_sign_up_req::clear_proto_id() {
  proto_id_ = 1114;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID ps_test_offical_sign_up_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void ps_test_offical_sign_up_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// -------------------------------------------------------------------

// pub_friend_opt_forward_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_opt_forward_req_id];
inline bool pub_friend_opt_forward_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_friend_opt_forward_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_friend_opt_forward_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_friend_opt_forward_req::clear_proto_id() {
  proto_id_ = 1517;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_friend_opt_forward_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_friend_opt_forward_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.game_friend_opt_ntf onf = 2;
inline bool pub_friend_opt_forward_req::has_onf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_friend_opt_forward_req::set_has_onf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_friend_opt_forward_req::clear_has_onf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_friend_opt_forward_req::clear_onf() {
  if (onf_ != NULL) onf_->::SProtoSpace::game_friend_opt_ntf::Clear();
  clear_has_onf();
}
inline const ::SProtoSpace::game_friend_opt_ntf& pub_friend_opt_forward_req::onf() const {
  return onf_ != NULL ? *onf_ : *default_instance_->onf_;
}
inline ::SProtoSpace::game_friend_opt_ntf* pub_friend_opt_forward_req::mutable_onf() {
  set_has_onf();
  if (onf_ == NULL) onf_ = new ::SProtoSpace::game_friend_opt_ntf;
  return onf_;
}
inline ::SProtoSpace::game_friend_opt_ntf* pub_friend_opt_forward_req::release_onf() {
  clear_has_onf();
  ::SProtoSpace::game_friend_opt_ntf* temp = onf_;
  onf_ = NULL;
  return temp;
}
inline void pub_friend_opt_forward_req::set_allocated_onf(::SProtoSpace::game_friend_opt_ntf* onf) {
  delete onf_;
  onf_ = onf;
  if (onf) {
    set_has_onf();
  } else {
    clear_has_onf();
  }
}

// optional uint64 apply_id = 3;
inline bool pub_friend_opt_forward_req::has_apply_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_friend_opt_forward_req::set_has_apply_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_friend_opt_forward_req::clear_has_apply_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_friend_opt_forward_req::clear_apply_id() {
  apply_id_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_id();
}
inline ::google::protobuf::uint64 pub_friend_opt_forward_req::apply_id() const {
  return apply_id_;
}
inline void pub_friend_opt_forward_req::set_apply_id(::google::protobuf::uint64 value) {
  set_has_apply_id();
  apply_id_ = value;
}

// -------------------------------------------------------------------

// pub_friend_opt_forward_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_opt_forward_ack_id];
inline bool pub_friend_opt_forward_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_friend_opt_forward_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_friend_opt_forward_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_friend_opt_forward_ack::clear_proto_id() {
  proto_id_ = 1518;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_friend_opt_forward_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_friend_opt_forward_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.game_friend_opt_ntf onf = 2;
inline bool pub_friend_opt_forward_ack::has_onf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_friend_opt_forward_ack::set_has_onf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_friend_opt_forward_ack::clear_has_onf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_friend_opt_forward_ack::clear_onf() {
  if (onf_ != NULL) onf_->::SProtoSpace::game_friend_opt_ntf::Clear();
  clear_has_onf();
}
inline const ::SProtoSpace::game_friend_opt_ntf& pub_friend_opt_forward_ack::onf() const {
  return onf_ != NULL ? *onf_ : *default_instance_->onf_;
}
inline ::SProtoSpace::game_friend_opt_ntf* pub_friend_opt_forward_ack::mutable_onf() {
  set_has_onf();
  if (onf_ == NULL) onf_ = new ::SProtoSpace::game_friend_opt_ntf;
  return onf_;
}
inline ::SProtoSpace::game_friend_opt_ntf* pub_friend_opt_forward_ack::release_onf() {
  clear_has_onf();
  ::SProtoSpace::game_friend_opt_ntf* temp = onf_;
  onf_ = NULL;
  return temp;
}
inline void pub_friend_opt_forward_ack::set_allocated_onf(::SProtoSpace::game_friend_opt_ntf* onf) {
  delete onf_;
  onf_ = onf;
  if (onf) {
    set_has_onf();
  } else {
    clear_has_onf();
  }
}

// optional uint64 apply_id = 3;
inline bool pub_friend_opt_forward_ack::has_apply_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_friend_opt_forward_ack::set_has_apply_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_friend_opt_forward_ack::clear_has_apply_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_friend_opt_forward_ack::clear_apply_id() {
  apply_id_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_id();
}
inline ::google::protobuf::uint64 pub_friend_opt_forward_ack::apply_id() const {
  return apply_id_;
}
inline void pub_friend_opt_forward_ack::set_apply_id(::google::protobuf::uint64 value) {
  set_has_apply_id();
  apply_id_ = value;
}

// -------------------------------------------------------------------

// pub_harem_compete_friends_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_friends_req_id];
inline bool pub_harem_compete_friends_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_harem_compete_friends_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_harem_compete_friends_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_harem_compete_friends_req::clear_proto_id() {
  proto_id_ = 1505;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_harem_compete_friends_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_harem_compete_friends_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 gd_type = 2;
inline bool pub_harem_compete_friends_req::has_gd_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_harem_compete_friends_req::set_has_gd_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_harem_compete_friends_req::clear_has_gd_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_harem_compete_friends_req::clear_gd_type() {
  gd_type_ = 0u;
  clear_has_gd_type();
}
inline ::google::protobuf::uint32 pub_harem_compete_friends_req::gd_type() const {
  return gd_type_;
}
inline void pub_harem_compete_friends_req::set_gd_type(::google::protobuf::uint32 value) {
  set_has_gd_type();
  gd_type_ = value;
}

// optional uint32 type = 3;
inline bool pub_harem_compete_friends_req::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_harem_compete_friends_req::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_harem_compete_friends_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_harem_compete_friends_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 pub_harem_compete_friends_req::type() const {
  return type_;
}
inline void pub_harem_compete_friends_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 count = 4;
inline bool pub_harem_compete_friends_req::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_harem_compete_friends_req::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_harem_compete_friends_req::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_harem_compete_friends_req::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 pub_harem_compete_friends_req::count() const {
  return count_;
}
inline void pub_harem_compete_friends_req::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional uint64 uuid = 5;
inline bool pub_harem_compete_friends_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_harem_compete_friends_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_harem_compete_friends_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_harem_compete_friends_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 pub_harem_compete_friends_req::uuid() const {
  return uuid_;
}
inline void pub_harem_compete_friends_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 grade = 6;
inline bool pub_harem_compete_friends_req::has_grade() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pub_harem_compete_friends_req::set_has_grade() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pub_harem_compete_friends_req::clear_has_grade() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pub_harem_compete_friends_req::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 pub_harem_compete_friends_req::grade() const {
  return grade_;
}
inline void pub_harem_compete_friends_req::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// -------------------------------------------------------------------

// pub_harem_compete_friends_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_friends_ack_id];
inline bool pub_harem_compete_friends_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_harem_compete_friends_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_harem_compete_friends_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_harem_compete_friends_ack::clear_proto_id() {
  proto_id_ = 1506;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_harem_compete_friends_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_harem_compete_friends_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool pub_harem_compete_friends_ack::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_harem_compete_friends_ack::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_harem_compete_friends_ack::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_harem_compete_friends_ack::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 pub_harem_compete_friends_ack::uuid() const {
  return uuid_;
}
inline void pub_harem_compete_friends_ack::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// repeated .SProtoSpace.friend_base_info friends = 3;
inline int pub_harem_compete_friends_ack::friends_size() const {
  return friends_.size();
}
inline void pub_harem_compete_friends_ack::clear_friends() {
  friends_.Clear();
}
inline const ::SProtoSpace::friend_base_info& pub_harem_compete_friends_ack::friends(int index) const {
  return friends_.Get(index);
}
inline ::SProtoSpace::friend_base_info* pub_harem_compete_friends_ack::mutable_friends(int index) {
  return friends_.Mutable(index);
}
inline ::SProtoSpace::friend_base_info* pub_harem_compete_friends_ack::add_friends() {
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >&
pub_harem_compete_friends_ack::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >*
pub_harem_compete_friends_ack::mutable_friends() {
  return &friends_;
}

// -------------------------------------------------------------------

// pub_search_role_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_search_role_req_id];
inline bool pub_search_role_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_search_role_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_search_role_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_search_role_req::clear_proto_id() {
  proto_id_ = 1507;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_search_role_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_search_role_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 type = 2;
inline bool pub_search_role_req::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_search_role_req::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_search_role_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_search_role_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 pub_search_role_req::type() const {
  return type_;
}
inline void pub_search_role_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional string content = 3;
inline bool pub_search_role_req::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_search_role_req::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_search_role_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_search_role_req::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& pub_search_role_req::content() const {
  return *content_;
}
inline void pub_search_role_req::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void pub_search_role_req::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void pub_search_role_req::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_search_role_req::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* pub_search_role_req::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_search_role_req::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 uuid = 4;
inline bool pub_search_role_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_search_role_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_search_role_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_search_role_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 pub_search_role_req::uuid() const {
  return uuid_;
}
inline void pub_search_role_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// -------------------------------------------------------------------

// pub_search_role_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_search_role_ack_id];
inline bool pub_search_role_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_search_role_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_search_role_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_search_role_ack::clear_proto_id() {
  proto_id_ = 1508;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_search_role_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_search_role_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool pub_search_role_ack::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_search_role_ack::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_search_role_ack::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_search_role_ack::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 pub_search_role_ack::uuid() const {
  return uuid_;
}
inline void pub_search_role_ack::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional .SProtoSpace.friend_base_info role = 3;
inline bool pub_search_role_ack::has_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_search_role_ack::set_has_role() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_search_role_ack::clear_has_role() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_search_role_ack::clear_role() {
  if (role_ != NULL) role_->::SProtoSpace::friend_base_info::Clear();
  clear_has_role();
}
inline const ::SProtoSpace::friend_base_info& pub_search_role_ack::role() const {
  return role_ != NULL ? *role_ : *default_instance_->role_;
}
inline ::SProtoSpace::friend_base_info* pub_search_role_ack::mutable_role() {
  set_has_role();
  if (role_ == NULL) role_ = new ::SProtoSpace::friend_base_info;
  return role_;
}
inline ::SProtoSpace::friend_base_info* pub_search_role_ack::release_role() {
  clear_has_role();
  ::SProtoSpace::friend_base_info* temp = role_;
  role_ = NULL;
  return temp;
}
inline void pub_search_role_ack::set_allocated_role(::SProtoSpace::friend_base_info* role) {
  delete role_;
  role_ = role;
  if (role) {
    set_has_role();
  } else {
    clear_has_role();
  }
}

// optional uint32 ret = 4;
inline bool pub_search_role_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_search_role_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_search_role_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_search_role_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 pub_search_role_ack::ret() const {
  return ret_;
}
inline void pub_search_role_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// pub_officer_apply_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_officer_apply_req_id];
inline bool pub_officer_apply_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_officer_apply_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_officer_apply_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_officer_apply_req::clear_proto_id() {
  proto_id_ = 1509;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_officer_apply_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_officer_apply_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool pub_officer_apply_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_officer_apply_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_officer_apply_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_officer_apply_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 pub_officer_apply_req::uuid() const {
  return uuid_;
}
inline void pub_officer_apply_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 grade = 3;
inline bool pub_officer_apply_req::has_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_officer_apply_req::set_has_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_officer_apply_req::clear_has_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_officer_apply_req::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 pub_officer_apply_req::grade() const {
  return grade_;
}
inline void pub_officer_apply_req::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint32 cur_grade = 4;
inline bool pub_officer_apply_req::has_cur_grade() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_officer_apply_req::set_has_cur_grade() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_officer_apply_req::clear_has_cur_grade() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_officer_apply_req::clear_cur_grade() {
  cur_grade_ = 0u;
  clear_has_cur_grade();
}
inline ::google::protobuf::uint32 pub_officer_apply_req::cur_grade() const {
  return cur_grade_;
}
inline void pub_officer_apply_req::set_cur_grade(::google::protobuf::uint32 value) {
  set_has_cur_grade();
  cur_grade_ = value;
}

// optional uint32 max_grade = 5;
inline bool pub_officer_apply_req::has_max_grade() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_officer_apply_req::set_has_max_grade() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_officer_apply_req::clear_has_max_grade() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_officer_apply_req::clear_max_grade() {
  max_grade_ = 0u;
  clear_has_max_grade();
}
inline ::google::protobuf::uint32 pub_officer_apply_req::max_grade() const {
  return max_grade_;
}
inline void pub_officer_apply_req::set_max_grade(::google::protobuf::uint32 value) {
  set_has_max_grade();
  max_grade_ = value;
}

// optional uint32 sex = 6;
inline bool pub_officer_apply_req::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pub_officer_apply_req::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pub_officer_apply_req::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pub_officer_apply_req::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 pub_officer_apply_req::sex() const {
  return sex_;
}
inline void pub_officer_apply_req::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 lv = 7;
inline bool pub_officer_apply_req::has_lv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pub_officer_apply_req::set_has_lv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pub_officer_apply_req::clear_has_lv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pub_officer_apply_req::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 pub_officer_apply_req::lv() const {
  return lv_;
}
inline void pub_officer_apply_req::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional string name = 8;
inline bool pub_officer_apply_req::has_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pub_officer_apply_req::set_has_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pub_officer_apply_req::clear_has_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pub_officer_apply_req::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& pub_officer_apply_req::name() const {
  return *name_;
}
inline void pub_officer_apply_req::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void pub_officer_apply_req::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void pub_officer_apply_req::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_officer_apply_req::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* pub_officer_apply_req::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_officer_apply_req::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 apply_time = 9;
inline bool pub_officer_apply_req::has_apply_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pub_officer_apply_req::set_has_apply_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pub_officer_apply_req::clear_has_apply_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pub_officer_apply_req::clear_apply_time() {
  apply_time_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_time();
}
inline ::google::protobuf::uint64 pub_officer_apply_req::apply_time() const {
  return apply_time_;
}
inline void pub_officer_apply_req::set_apply_time(::google::protobuf::uint64 value) {
  set_has_apply_time();
  apply_time_ = value;
}

// optional .SProtoSpace.battle_role_info battle_data = 10;
inline bool pub_officer_apply_req::has_battle_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pub_officer_apply_req::set_has_battle_data() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pub_officer_apply_req::clear_has_battle_data() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pub_officer_apply_req::clear_battle_data() {
  if (battle_data_ != NULL) battle_data_->::SProtoSpace::battle_role_info::Clear();
  clear_has_battle_data();
}
inline const ::SProtoSpace::battle_role_info& pub_officer_apply_req::battle_data() const {
  return battle_data_ != NULL ? *battle_data_ : *default_instance_->battle_data_;
}
inline ::SProtoSpace::battle_role_info* pub_officer_apply_req::mutable_battle_data() {
  set_has_battle_data();
  if (battle_data_ == NULL) battle_data_ = new ::SProtoSpace::battle_role_info;
  return battle_data_;
}
inline ::SProtoSpace::battle_role_info* pub_officer_apply_req::release_battle_data() {
  clear_has_battle_data();
  ::SProtoSpace::battle_role_info* temp = battle_data_;
  battle_data_ = NULL;
  return temp;
}
inline void pub_officer_apply_req::set_allocated_battle_data(::SProtoSpace::battle_role_info* battle_data) {
  delete battle_data_;
  battle_data_ = battle_data;
  if (battle_data) {
    set_has_battle_data();
  } else {
    clear_has_battle_data();
  }
}

// -------------------------------------------------------------------

// pub_officer_apply_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_officer_apply_ack_id];
inline bool pub_officer_apply_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_officer_apply_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_officer_apply_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_officer_apply_ack::clear_proto_id() {
  proto_id_ = 1510;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_officer_apply_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_officer_apply_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool pub_officer_apply_ack::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_officer_apply_ack::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_officer_apply_ack::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_officer_apply_ack::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 pub_officer_apply_ack::uuid() const {
  return uuid_;
}
inline void pub_officer_apply_ack::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 grade = 3;
inline bool pub_officer_apply_ack::has_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_officer_apply_ack::set_has_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_officer_apply_ack::clear_has_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_officer_apply_ack::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 pub_officer_apply_ack::grade() const {
  return grade_;
}
inline void pub_officer_apply_ack::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint32 ret = 4;
inline bool pub_officer_apply_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_officer_apply_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_officer_apply_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_officer_apply_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 pub_officer_apply_ack::ret() const {
  return ret_;
}
inline void pub_officer_apply_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// update_heros_formation_ntf

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = update_heros_formation_ntf_id];
inline bool update_heros_formation_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_heros_formation_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_heros_formation_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_heros_formation_ntf::clear_proto_id() {
  proto_id_ = 1535;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID update_heros_formation_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void update_heros_formation_ntf::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 role_id = 2;
inline bool update_heros_formation_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void update_heros_formation_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void update_heros_formation_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void update_heros_formation_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 update_heros_formation_ntf::role_id() const {
  return role_id_;
}
inline void update_heros_formation_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 apply_grade = 3;
inline bool update_heros_formation_ntf::has_apply_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void update_heros_formation_ntf::set_has_apply_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void update_heros_formation_ntf::clear_has_apply_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void update_heros_formation_ntf::clear_apply_grade() {
  apply_grade_ = 0;
  clear_has_apply_grade();
}
inline ::google::protobuf::int32 update_heros_formation_ntf::apply_grade() const {
  return apply_grade_;
}
inline void update_heros_formation_ntf::set_apply_grade(::google::protobuf::int32 value) {
  set_has_apply_grade();
  apply_grade_ = value;
}

// repeated .SProtoSpace.battle_hero_info hero_infos = 4;
inline int update_heros_formation_ntf::hero_infos_size() const {
  return hero_infos_.size();
}
inline void update_heros_formation_ntf::clear_hero_infos() {
  hero_infos_.Clear();
}
inline const ::SProtoSpace::battle_hero_info& update_heros_formation_ntf::hero_infos(int index) const {
  return hero_infos_.Get(index);
}
inline ::SProtoSpace::battle_hero_info* update_heros_formation_ntf::mutable_hero_infos(int index) {
  return hero_infos_.Mutable(index);
}
inline ::SProtoSpace::battle_hero_info* update_heros_formation_ntf::add_hero_infos() {
  return hero_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info >&
update_heros_formation_ntf::hero_infos() const {
  return hero_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::battle_hero_info >*
update_heros_formation_ntf::mutable_hero_infos() {
  return &hero_infos_;
}

// -------------------------------------------------------------------

// pub_officer_result_ntf

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_officer_result_ntf_id];
inline bool pub_officer_result_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_officer_result_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_officer_result_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_officer_result_ntf::clear_proto_id() {
  proto_id_ = 1115;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_officer_result_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_officer_result_ntf::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// repeated .SProtoSpace.officer_result_data results = 2;
inline int pub_officer_result_ntf::results_size() const {
  return results_.size();
}
inline void pub_officer_result_ntf::clear_results() {
  results_.Clear();
}
inline const ::SProtoSpace::officer_result_data& pub_officer_result_ntf::results(int index) const {
  return results_.Get(index);
}
inline ::SProtoSpace::officer_result_data* pub_officer_result_ntf::mutable_results(int index) {
  return results_.Mutable(index);
}
inline ::SProtoSpace::officer_result_data* pub_officer_result_ntf::add_results() {
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::officer_result_data >&
pub_officer_result_ntf::results() const {
  return results_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::officer_result_data >*
pub_officer_result_ntf::mutable_results() {
  return &results_;
}

// -------------------------------------------------------------------

// pub_offical_reduce_ntf

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_offical_reduce_ntf_id];
inline bool pub_offical_reduce_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_offical_reduce_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_offical_reduce_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_offical_reduce_ntf::clear_proto_id() {
  proto_id_ = 1120;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_offical_reduce_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_offical_reduce_ntf::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// repeated .SProtoSpace.officer_reduce_data data = 2;
inline int pub_offical_reduce_ntf::data_size() const {
  return data_.size();
}
inline void pub_offical_reduce_ntf::clear_data() {
  data_.Clear();
}
inline const ::SProtoSpace::officer_reduce_data& pub_offical_reduce_ntf::data(int index) const {
  return data_.Get(index);
}
inline ::SProtoSpace::officer_reduce_data* pub_offical_reduce_ntf::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SProtoSpace::officer_reduce_data* pub_offical_reduce_ntf::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::officer_reduce_data >&
pub_offical_reduce_ntf::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::officer_reduce_data >*
pub_offical_reduce_ntf::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// pub_load_offical_data_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_load_offical_data_req_id];
inline bool pub_load_offical_data_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_load_offical_data_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_load_offical_data_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_load_offical_data_req::clear_proto_id() {
  proto_id_ = 1116;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_load_offical_data_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_load_offical_data_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 role_id = 2;
inline bool pub_load_offical_data_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_load_offical_data_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_load_offical_data_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_load_offical_data_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_load_offical_data_req::role_id() const {
  return role_id_;
}
inline void pub_load_offical_data_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// pub_load_offical_data_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_load_offical_data_ack_id];
inline bool pub_load_offical_data_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_load_offical_data_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_load_offical_data_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_load_offical_data_ack::clear_proto_id() {
  proto_id_ = 1117;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_load_offical_data_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_load_offical_data_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 role_id = 2;
inline bool pub_load_offical_data_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_load_offical_data_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_load_offical_data_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_load_offical_data_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_load_offical_data_ack::role_id() const {
  return role_id_;
}
inline void pub_load_offical_data_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 cur_grade = 3;
inline bool pub_load_offical_data_ack::has_cur_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_load_offical_data_ack::set_has_cur_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_load_offical_data_ack::clear_has_cur_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_load_offical_data_ack::clear_cur_grade() {
  cur_grade_ = 0u;
  clear_has_cur_grade();
}
inline ::google::protobuf::uint32 pub_load_offical_data_ack::cur_grade() const {
  return cur_grade_;
}
inline void pub_load_offical_data_ack::set_cur_grade(::google::protobuf::uint32 value) {
  set_has_cur_grade();
  cur_grade_ = value;
}

// optional uint32 max_grade = 4;
inline bool pub_load_offical_data_ack::has_max_grade() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_load_offical_data_ack::set_has_max_grade() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_load_offical_data_ack::clear_has_max_grade() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_load_offical_data_ack::clear_max_grade() {
  max_grade_ = 0u;
  clear_has_max_grade();
}
inline ::google::protobuf::uint32 pub_load_offical_data_ack::max_grade() const {
  return max_grade_;
}
inline void pub_load_offical_data_ack::set_max_grade(::google::protobuf::uint32 value) {
  set_has_max_grade();
  max_grade_ = value;
}

// optional uint32 apply_grade = 5;
inline bool pub_load_offical_data_ack::has_apply_grade() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_load_offical_data_ack::set_has_apply_grade() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_load_offical_data_ack::clear_has_apply_grade() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_load_offical_data_ack::clear_apply_grade() {
  apply_grade_ = 0u;
  clear_has_apply_grade();
}
inline ::google::protobuf::uint32 pub_load_offical_data_ack::apply_grade() const {
  return apply_grade_;
}
inline void pub_load_offical_data_ack::set_apply_grade(::google::protobuf::uint32 value) {
  set_has_apply_grade();
  apply_grade_ = value;
}

// optional uint32 apply_time = 6;
inline bool pub_load_offical_data_ack::has_apply_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pub_load_offical_data_ack::set_has_apply_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pub_load_offical_data_ack::clear_has_apply_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pub_load_offical_data_ack::clear_apply_time() {
  apply_time_ = 0u;
  clear_has_apply_time();
}
inline ::google::protobuf::uint32 pub_load_offical_data_ack::apply_time() const {
  return apply_time_;
}
inline void pub_load_offical_data_ack::set_apply_time(::google::protobuf::uint32 value) {
  set_has_apply_time();
  apply_time_ = value;
}

// optional uint32 last_grade = 7;
inline bool pub_load_offical_data_ack::has_last_grade() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pub_load_offical_data_ack::set_has_last_grade() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pub_load_offical_data_ack::clear_has_last_grade() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pub_load_offical_data_ack::clear_last_grade() {
  last_grade_ = 0u;
  clear_has_last_grade();
}
inline ::google::protobuf::uint32 pub_load_offical_data_ack::last_grade() const {
  return last_grade_;
}
inline void pub_load_offical_data_ack::set_last_grade(::google::protobuf::uint32 value) {
  set_has_last_grade();
  last_grade_ = value;
}

// optional bool exist = 8;
inline bool pub_load_offical_data_ack::has_exist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pub_load_offical_data_ack::set_has_exist() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pub_load_offical_data_ack::clear_has_exist() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pub_load_offical_data_ack::clear_exist() {
  exist_ = false;
  clear_has_exist();
}
inline bool pub_load_offical_data_ack::exist() const {
  return exist_;
}
inline void pub_load_offical_data_ack::set_exist(bool value) {
  set_has_exist();
  exist_ = value;
}

// -------------------------------------------------------------------

// pub_get_officer_applicants_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_officer_applicants_req_id];
inline bool pub_get_officer_applicants_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_get_officer_applicants_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_get_officer_applicants_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_get_officer_applicants_req::clear_protoid() {
  protoid_ = 1118;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_get_officer_applicants_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_get_officer_applicants_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 grade = 2;
inline bool pub_get_officer_applicants_req::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_get_officer_applicants_req::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_get_officer_applicants_req::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_get_officer_applicants_req::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 pub_get_officer_applicants_req::grade() const {
  return grade_;
}
inline void pub_get_officer_applicants_req::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint64 role_id = 3;
inline bool pub_get_officer_applicants_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_get_officer_applicants_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_get_officer_applicants_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_get_officer_applicants_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_get_officer_applicants_req::role_id() const {
  return role_id_;
}
inline void pub_get_officer_applicants_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// pub_get_officer_applicants_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_officer_applicants_ack_id];
inline bool pub_get_officer_applicants_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_get_officer_applicants_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_get_officer_applicants_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_get_officer_applicants_ack::clear_protoid() {
  protoid_ = 1119;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_get_officer_applicants_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_get_officer_applicants_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool pub_get_officer_applicants_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_get_officer_applicants_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_get_officer_applicants_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_get_officer_applicants_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 pub_get_officer_applicants_ack::ret() const {
  return ret_;
}
inline void pub_get_officer_applicants_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 role_id = 3;
inline bool pub_get_officer_applicants_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_get_officer_applicants_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_get_officer_applicants_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_get_officer_applicants_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_get_officer_applicants_ack::role_id() const {
  return role_id_;
}
inline void pub_get_officer_applicants_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 grade = 4;
inline bool pub_get_officer_applicants_ack::has_grade() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_get_officer_applicants_ack::set_has_grade() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_get_officer_applicants_ack::clear_has_grade() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_get_officer_applicants_ack::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 pub_get_officer_applicants_ack::grade() const {
  return grade_;
}
inline void pub_get_officer_applicants_ack::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint32 apply_num = 5;
inline bool pub_get_officer_applicants_ack::has_apply_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_get_officer_applicants_ack::set_has_apply_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_get_officer_applicants_ack::clear_has_apply_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_get_officer_applicants_ack::clear_apply_num() {
  apply_num_ = 0u;
  clear_has_apply_num();
}
inline ::google::protobuf::uint32 pub_get_officer_applicants_ack::apply_num() const {
  return apply_num_;
}
inline void pub_get_officer_applicants_ack::set_apply_num(::google::protobuf::uint32 value) {
  set_has_apply_num();
  apply_num_ = value;
}

// optional uint32 posts_num = 6;
inline bool pub_get_officer_applicants_ack::has_posts_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pub_get_officer_applicants_ack::set_has_posts_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pub_get_officer_applicants_ack::clear_has_posts_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pub_get_officer_applicants_ack::clear_posts_num() {
  posts_num_ = 0u;
  clear_has_posts_num();
}
inline ::google::protobuf::uint32 pub_get_officer_applicants_ack::posts_num() const {
  return posts_num_;
}
inline void pub_get_officer_applicants_ack::set_posts_num(::google::protobuf::uint32 value) {
  set_has_posts_num();
  posts_num_ = value;
}

// repeated .SProtoSpace.offical_apply_data applys = 7;
inline int pub_get_officer_applicants_ack::applys_size() const {
  return applys_.size();
}
inline void pub_get_officer_applicants_ack::clear_applys() {
  applys_.Clear();
}
inline const ::SProtoSpace::offical_apply_data& pub_get_officer_applicants_ack::applys(int index) const {
  return applys_.Get(index);
}
inline ::SProtoSpace::offical_apply_data* pub_get_officer_applicants_ack::mutable_applys(int index) {
  return applys_.Mutable(index);
}
inline ::SProtoSpace::offical_apply_data* pub_get_officer_applicants_ack::add_applys() {
  return applys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_data >&
pub_get_officer_applicants_ack::applys() const {
  return applys_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_data >*
pub_get_officer_applicants_ack::mutable_applys() {
  return &applys_;
}

// -------------------------------------------------------------------

// pub_update_offical_lv_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_update_offical_lv_req_id];
inline bool pub_update_offical_lv_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_update_offical_lv_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_update_offical_lv_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_update_offical_lv_req::clear_protoid() {
  protoid_ = 1512;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_update_offical_lv_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_update_offical_lv_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 grade = 2;
inline bool pub_update_offical_lv_req::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_update_offical_lv_req::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_update_offical_lv_req::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_update_offical_lv_req::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 pub_update_offical_lv_req::grade() const {
  return grade_;
}
inline void pub_update_offical_lv_req::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint64 role_id = 3;
inline bool pub_update_offical_lv_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_update_offical_lv_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_update_offical_lv_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_update_offical_lv_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_update_offical_lv_req::role_id() const {
  return role_id_;
}
inline void pub_update_offical_lv_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// pub_cancel_offical_apply_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_cancel_offical_apply_req_id];
inline bool pub_cancel_offical_apply_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_cancel_offical_apply_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_cancel_offical_apply_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_cancel_offical_apply_req::clear_protoid() {
  protoid_ = 1513;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_cancel_offical_apply_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_cancel_offical_apply_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 grade = 2;
inline bool pub_cancel_offical_apply_req::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_cancel_offical_apply_req::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_cancel_offical_apply_req::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_cancel_offical_apply_req::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 pub_cancel_offical_apply_req::grade() const {
  return grade_;
}
inline void pub_cancel_offical_apply_req::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint64 role_id = 3;
inline bool pub_cancel_offical_apply_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_cancel_offical_apply_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_cancel_offical_apply_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_cancel_offical_apply_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_cancel_offical_apply_req::role_id() const {
  return role_id_;
}
inline void pub_cancel_offical_apply_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// pub_cancel_offical_apply_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_cancel_offical_apply_ack_id];
inline bool pub_cancel_offical_apply_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_cancel_offical_apply_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_cancel_offical_apply_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_cancel_offical_apply_ack::clear_protoid() {
  protoid_ = 1514;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_cancel_offical_apply_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_cancel_offical_apply_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 grade = 2;
inline bool pub_cancel_offical_apply_ack::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_cancel_offical_apply_ack::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_cancel_offical_apply_ack::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_cancel_offical_apply_ack::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 pub_cancel_offical_apply_ack::grade() const {
  return grade_;
}
inline void pub_cancel_offical_apply_ack::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint64 role_id = 3;
inline bool pub_cancel_offical_apply_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_cancel_offical_apply_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_cancel_offical_apply_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_cancel_offical_apply_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_cancel_offical_apply_ack::role_id() const {
  return role_id_;
}
inline void pub_cancel_offical_apply_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 ret = 4;
inline bool pub_cancel_offical_apply_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_cancel_offical_apply_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_cancel_offical_apply_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_cancel_offical_apply_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 pub_cancel_offical_apply_ack::ret() const {
  return ret_;
}
inline void pub_cancel_offical_apply_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// pub_get_offical_challenge_roles_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_offical_challenge_roles_req_id];
inline bool pub_get_offical_challenge_roles_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_get_offical_challenge_roles_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_get_offical_challenge_roles_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_get_offical_challenge_roles_req::clear_protoid() {
  protoid_ = 1533;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_get_offical_challenge_roles_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_get_offical_challenge_roles_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 grade = 2;
inline bool pub_get_offical_challenge_roles_req::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_get_offical_challenge_roles_req::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_get_offical_challenge_roles_req::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_get_offical_challenge_roles_req::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 pub_get_offical_challenge_roles_req::grade() const {
  return grade_;
}
inline void pub_get_offical_challenge_roles_req::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint64 role_id = 3;
inline bool pub_get_offical_challenge_roles_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_get_offical_challenge_roles_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_get_offical_challenge_roles_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_get_offical_challenge_roles_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_get_offical_challenge_roles_req::role_id() const {
  return role_id_;
}
inline void pub_get_offical_challenge_roles_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// pub_get_offical_challenge_roles_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_offical_challenge_roles_ack_id];
inline bool pub_get_offical_challenge_roles_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_get_offical_challenge_roles_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_get_offical_challenge_roles_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_get_offical_challenge_roles_ack::clear_protoid() {
  protoid_ = 1534;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_get_offical_challenge_roles_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_get_offical_challenge_roles_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool pub_get_offical_challenge_roles_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_get_offical_challenge_roles_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_get_offical_challenge_roles_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_get_offical_challenge_roles_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 pub_get_offical_challenge_roles_ack::ret() const {
  return ret_;
}
inline void pub_get_offical_challenge_roles_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 grade = 3;
inline bool pub_get_offical_challenge_roles_ack::has_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_get_offical_challenge_roles_ack::set_has_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_get_offical_challenge_roles_ack::clear_has_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_get_offical_challenge_roles_ack::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 pub_get_offical_challenge_roles_ack::grade() const {
  return grade_;
}
inline void pub_get_offical_challenge_roles_ack::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint64 role_id = 4;
inline bool pub_get_offical_challenge_roles_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_get_offical_challenge_roles_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_get_offical_challenge_roles_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_get_offical_challenge_roles_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_get_offical_challenge_roles_ack::role_id() const {
  return role_id_;
}
inline void pub_get_offical_challenge_roles_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// repeated .SProtoSpace.offical_item_data items = 5;
inline int pub_get_offical_challenge_roles_ack::items_size() const {
  return items_.size();
}
inline void pub_get_offical_challenge_roles_ack::clear_items() {
  items_.Clear();
}
inline const ::SProtoSpace::offical_item_data& pub_get_offical_challenge_roles_ack::items(int index) const {
  return items_.Get(index);
}
inline ::SProtoSpace::offical_item_data* pub_get_offical_challenge_roles_ack::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::SProtoSpace::offical_item_data* pub_get_offical_challenge_roles_ack::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >&
pub_get_offical_challenge_roles_ack::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >*
pub_get_offical_challenge_roles_ack::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// game_pub_send_flower_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_pub_send_flower_req_id];
inline bool game_pub_send_flower_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_pub_send_flower_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_pub_send_flower_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_pub_send_flower_req::clear_protoid() {
  protoid_ = 1259;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID game_pub_send_flower_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void game_pub_send_flower_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 send_role_id = 2;
inline bool game_pub_send_flower_req::has_send_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_pub_send_flower_req::set_has_send_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_pub_send_flower_req::clear_has_send_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_pub_send_flower_req::clear_send_role_id() {
  send_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_send_role_id();
}
inline ::google::protobuf::uint64 game_pub_send_flower_req::send_role_id() const {
  return send_role_id_;
}
inline void game_pub_send_flower_req::set_send_role_id(::google::protobuf::uint64 value) {
  set_has_send_role_id();
  send_role_id_ = value;
}

// optional .SProtoSpace.flower_send_info send_info = 3;
inline bool game_pub_send_flower_req::has_send_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_pub_send_flower_req::set_has_send_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_pub_send_flower_req::clear_has_send_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_pub_send_flower_req::clear_send_info() {
  if (send_info_ != NULL) send_info_->::SProtoSpace::flower_send_info::Clear();
  clear_has_send_info();
}
inline const ::SProtoSpace::flower_send_info& game_pub_send_flower_req::send_info() const {
  return send_info_ != NULL ? *send_info_ : *default_instance_->send_info_;
}
inline ::SProtoSpace::flower_send_info* game_pub_send_flower_req::mutable_send_info() {
  set_has_send_info();
  if (send_info_ == NULL) send_info_ = new ::SProtoSpace::flower_send_info;
  return send_info_;
}
inline ::SProtoSpace::flower_send_info* game_pub_send_flower_req::release_send_info() {
  clear_has_send_info();
  ::SProtoSpace::flower_send_info* temp = send_info_;
  send_info_ = NULL;
  return temp;
}
inline void game_pub_send_flower_req::set_allocated_send_info(::SProtoSpace::flower_send_info* send_info) {
  delete send_info_;
  send_info_ = send_info;
  if (send_info) {
    set_has_send_info();
  } else {
    clear_has_send_info();
  }
}

// -------------------------------------------------------------------

// pub_game_send_flower_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_game_send_flower_ack_id];
inline bool pub_game_send_flower_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_game_send_flower_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_game_send_flower_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_game_send_flower_ack::clear_protoid() {
  protoid_ = 1260;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_game_send_flower_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_game_send_flower_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 send_role_id = 2;
inline bool pub_game_send_flower_ack::has_send_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_game_send_flower_ack::set_has_send_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_game_send_flower_ack::clear_has_send_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_game_send_flower_ack::clear_send_role_id() {
  send_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_send_role_id();
}
inline ::google::protobuf::uint64 pub_game_send_flower_ack::send_role_id() const {
  return send_role_id_;
}
inline void pub_game_send_flower_ack::set_send_role_id(::google::protobuf::uint64 value) {
  set_has_send_role_id();
  send_role_id_ = value;
}

// optional .SProtoSpace.flower_send_info send_info = 3;
inline bool pub_game_send_flower_ack::has_send_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_game_send_flower_ack::set_has_send_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_game_send_flower_ack::clear_has_send_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_game_send_flower_ack::clear_send_info() {
  if (send_info_ != NULL) send_info_->::SProtoSpace::flower_send_info::Clear();
  clear_has_send_info();
}
inline const ::SProtoSpace::flower_send_info& pub_game_send_flower_ack::send_info() const {
  return send_info_ != NULL ? *send_info_ : *default_instance_->send_info_;
}
inline ::SProtoSpace::flower_send_info* pub_game_send_flower_ack::mutable_send_info() {
  set_has_send_info();
  if (send_info_ == NULL) send_info_ = new ::SProtoSpace::flower_send_info;
  return send_info_;
}
inline ::SProtoSpace::flower_send_info* pub_game_send_flower_ack::release_send_info() {
  clear_has_send_info();
  ::SProtoSpace::flower_send_info* temp = send_info_;
  send_info_ = NULL;
  return temp;
}
inline void pub_game_send_flower_ack::set_allocated_send_info(::SProtoSpace::flower_send_info* send_info) {
  delete send_info_;
  send_info_ = send_info;
  if (send_info) {
    set_has_send_info();
  } else {
    clear_has_send_info();
  }
}

// optional .SProtoSpace.public_role_base_info to_role_info = 4;
inline bool pub_game_send_flower_ack::has_to_role_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_game_send_flower_ack::set_has_to_role_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_game_send_flower_ack::clear_has_to_role_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_game_send_flower_ack::clear_to_role_info() {
  if (to_role_info_ != NULL) to_role_info_->::SProtoSpace::public_role_base_info::Clear();
  clear_has_to_role_info();
}
inline const ::SProtoSpace::public_role_base_info& pub_game_send_flower_ack::to_role_info() const {
  return to_role_info_ != NULL ? *to_role_info_ : *default_instance_->to_role_info_;
}
inline ::SProtoSpace::public_role_base_info* pub_game_send_flower_ack::mutable_to_role_info() {
  set_has_to_role_info();
  if (to_role_info_ == NULL) to_role_info_ = new ::SProtoSpace::public_role_base_info;
  return to_role_info_;
}
inline ::SProtoSpace::public_role_base_info* pub_game_send_flower_ack::release_to_role_info() {
  clear_has_to_role_info();
  ::SProtoSpace::public_role_base_info* temp = to_role_info_;
  to_role_info_ = NULL;
  return temp;
}
inline void pub_game_send_flower_ack::set_allocated_to_role_info(::SProtoSpace::public_role_base_info* to_role_info) {
  delete to_role_info_;
  to_role_info_ = to_role_info;
  if (to_role_info) {
    set_has_to_role_info();
  } else {
    clear_has_to_role_info();
  }
}

// -------------------------------------------------------------------

// game_pub_flower_to_receive_nty

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_pub_flower_to_receive_nty_id];
inline bool game_pub_flower_to_receive_nty::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_pub_flower_to_receive_nty::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_pub_flower_to_receive_nty::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_pub_flower_to_receive_nty::clear_protoid() {
  protoid_ = 1261;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID game_pub_flower_to_receive_nty::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void game_pub_flower_to_receive_nty::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 to_role_id = 2;
inline bool game_pub_flower_to_receive_nty::has_to_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_pub_flower_to_receive_nty::set_has_to_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_pub_flower_to_receive_nty::clear_has_to_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_pub_flower_to_receive_nty::clear_to_role_id() {
  to_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_role_id();
}
inline ::google::protobuf::uint64 game_pub_flower_to_receive_nty::to_role_id() const {
  return to_role_id_;
}
inline void game_pub_flower_to_receive_nty::set_to_role_id(::google::protobuf::uint64 value) {
  set_has_to_role_id();
  to_role_id_ = value;
}

// optional uint64 from_role_id = 3;
inline bool game_pub_flower_to_receive_nty::has_from_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_pub_flower_to_receive_nty::set_has_from_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_pub_flower_to_receive_nty::clear_has_from_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_pub_flower_to_receive_nty::clear_from_role_id() {
  from_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_role_id();
}
inline ::google::protobuf::uint64 game_pub_flower_to_receive_nty::from_role_id() const {
  return from_role_id_;
}
inline void game_pub_flower_to_receive_nty::set_from_role_id(::google::protobuf::uint64 value) {
  set_has_from_role_id();
  from_role_id_ = value;
}

// optional uint32 add_popularity_num = 4;
inline bool game_pub_flower_to_receive_nty::has_add_popularity_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_pub_flower_to_receive_nty::set_has_add_popularity_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_pub_flower_to_receive_nty::clear_has_add_popularity_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_pub_flower_to_receive_nty::clear_add_popularity_num() {
  add_popularity_num_ = 0u;
  clear_has_add_popularity_num();
}
inline ::google::protobuf::uint32 game_pub_flower_to_receive_nty::add_popularity_num() const {
  return add_popularity_num_;
}
inline void game_pub_flower_to_receive_nty::set_add_popularity_num(::google::protobuf::uint32 value) {
  set_has_add_popularity_num();
  add_popularity_num_ = value;
}

// optional .SProtoSpace.flower_send_info send_info = 5;
inline bool game_pub_flower_to_receive_nty::has_send_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void game_pub_flower_to_receive_nty::set_has_send_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void game_pub_flower_to_receive_nty::clear_has_send_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void game_pub_flower_to_receive_nty::clear_send_info() {
  if (send_info_ != NULL) send_info_->::SProtoSpace::flower_send_info::Clear();
  clear_has_send_info();
}
inline const ::SProtoSpace::flower_send_info& game_pub_flower_to_receive_nty::send_info() const {
  return send_info_ != NULL ? *send_info_ : *default_instance_->send_info_;
}
inline ::SProtoSpace::flower_send_info* game_pub_flower_to_receive_nty::mutable_send_info() {
  set_has_send_info();
  if (send_info_ == NULL) send_info_ = new ::SProtoSpace::flower_send_info;
  return send_info_;
}
inline ::SProtoSpace::flower_send_info* game_pub_flower_to_receive_nty::release_send_info() {
  clear_has_send_info();
  ::SProtoSpace::flower_send_info* temp = send_info_;
  send_info_ = NULL;
  return temp;
}
inline void game_pub_flower_to_receive_nty::set_allocated_send_info(::SProtoSpace::flower_send_info* send_info) {
  delete send_info_;
  send_info_ = send_info;
  if (send_info) {
    set_has_send_info();
  } else {
    clear_has_send_info();
  }
}

// -------------------------------------------------------------------

// pub_game_flower_to_receive_nty

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_game_flower_to_receive_nty_id];
inline bool pub_game_flower_to_receive_nty::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_game_flower_to_receive_nty::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_game_flower_to_receive_nty::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_game_flower_to_receive_nty::clear_protoid() {
  protoid_ = 1262;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_game_flower_to_receive_nty::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_game_flower_to_receive_nty::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 to_role_id = 2;
inline bool pub_game_flower_to_receive_nty::has_to_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_game_flower_to_receive_nty::set_has_to_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_game_flower_to_receive_nty::clear_has_to_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_game_flower_to_receive_nty::clear_to_role_id() {
  to_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_role_id();
}
inline ::google::protobuf::uint64 pub_game_flower_to_receive_nty::to_role_id() const {
  return to_role_id_;
}
inline void pub_game_flower_to_receive_nty::set_to_role_id(::google::protobuf::uint64 value) {
  set_has_to_role_id();
  to_role_id_ = value;
}

// optional uint64 from_role_id = 3;
inline bool pub_game_flower_to_receive_nty::has_from_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_game_flower_to_receive_nty::set_has_from_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_game_flower_to_receive_nty::clear_has_from_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_game_flower_to_receive_nty::clear_from_role_id() {
  from_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_role_id();
}
inline ::google::protobuf::uint64 pub_game_flower_to_receive_nty::from_role_id() const {
  return from_role_id_;
}
inline void pub_game_flower_to_receive_nty::set_from_role_id(::google::protobuf::uint64 value) {
  set_has_from_role_id();
  from_role_id_ = value;
}

// optional uint32 add_popularity_num = 4;
inline bool pub_game_flower_to_receive_nty::has_add_popularity_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_game_flower_to_receive_nty::set_has_add_popularity_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_game_flower_to_receive_nty::clear_has_add_popularity_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_game_flower_to_receive_nty::clear_add_popularity_num() {
  add_popularity_num_ = 0u;
  clear_has_add_popularity_num();
}
inline ::google::protobuf::uint32 pub_game_flower_to_receive_nty::add_popularity_num() const {
  return add_popularity_num_;
}
inline void pub_game_flower_to_receive_nty::set_add_popularity_num(::google::protobuf::uint32 value) {
  set_has_add_popularity_num();
  add_popularity_num_ = value;
}

// optional .SProtoSpace.flower_send_info send_info = 5;
inline bool pub_game_flower_to_receive_nty::has_send_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_game_flower_to_receive_nty::set_has_send_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_game_flower_to_receive_nty::clear_has_send_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_game_flower_to_receive_nty::clear_send_info() {
  if (send_info_ != NULL) send_info_->::SProtoSpace::flower_send_info::Clear();
  clear_has_send_info();
}
inline const ::SProtoSpace::flower_send_info& pub_game_flower_to_receive_nty::send_info() const {
  return send_info_ != NULL ? *send_info_ : *default_instance_->send_info_;
}
inline ::SProtoSpace::flower_send_info* pub_game_flower_to_receive_nty::mutable_send_info() {
  set_has_send_info();
  if (send_info_ == NULL) send_info_ = new ::SProtoSpace::flower_send_info;
  return send_info_;
}
inline ::SProtoSpace::flower_send_info* pub_game_flower_to_receive_nty::release_send_info() {
  clear_has_send_info();
  ::SProtoSpace::flower_send_info* temp = send_info_;
  send_info_ = NULL;
  return temp;
}
inline void pub_game_flower_to_receive_nty::set_allocated_send_info(::SProtoSpace::flower_send_info* send_info) {
  delete send_info_;
  send_info_ = send_info;
  if (send_info) {
    set_has_send_info();
  } else {
    clear_has_send_info();
  }
}

// -------------------------------------------------------------------

// pub_forward_add_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_forward_add_req_id];
inline bool pub_forward_add_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_forward_add_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_forward_add_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_forward_add_req::clear_proto_id() {
  proto_id_ = 1515;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_forward_add_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_forward_add_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 target_id = 2;
inline bool pub_forward_add_req::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_forward_add_req::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_forward_add_req::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_forward_add_req::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::uint64 pub_forward_add_req::target_id() const {
  return target_id_;
}
inline void pub_forward_add_req::set_target_id(::google::protobuf::uint64 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional uint32 area_id = 3;
inline bool pub_forward_add_req::has_area_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_forward_add_req::set_has_area_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_forward_add_req::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_forward_add_req::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 pub_forward_add_req::area_id() const {
  return area_id_;
}
inline void pub_forward_add_req::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// optional .SProtoSpace.friend_apply_info apply_info = 4;
inline bool pub_forward_add_req::has_apply_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_forward_add_req::set_has_apply_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_forward_add_req::clear_has_apply_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_forward_add_req::clear_apply_info() {
  if (apply_info_ != NULL) apply_info_->::SProtoSpace::friend_apply_info::Clear();
  clear_has_apply_info();
}
inline const ::SProtoSpace::friend_apply_info& pub_forward_add_req::apply_info() const {
  return apply_info_ != NULL ? *apply_info_ : *default_instance_->apply_info_;
}
inline ::SProtoSpace::friend_apply_info* pub_forward_add_req::mutable_apply_info() {
  set_has_apply_info();
  if (apply_info_ == NULL) apply_info_ = new ::SProtoSpace::friend_apply_info;
  return apply_info_;
}
inline ::SProtoSpace::friend_apply_info* pub_forward_add_req::release_apply_info() {
  clear_has_apply_info();
  ::SProtoSpace::friend_apply_info* temp = apply_info_;
  apply_info_ = NULL;
  return temp;
}
inline void pub_forward_add_req::set_allocated_apply_info(::SProtoSpace::friend_apply_info* apply_info) {
  delete apply_info_;
  apply_info_ = apply_info;
  if (apply_info) {
    set_has_apply_info();
  } else {
    clear_has_apply_info();
  }
}

// -------------------------------------------------------------------

// pub_forward_add_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_forward_add_ack_id];
inline bool pub_forward_add_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_forward_add_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_forward_add_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_forward_add_ack::clear_proto_id() {
  proto_id_ = 1516;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_forward_add_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_forward_add_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 target_id = 2;
inline bool pub_forward_add_ack::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_forward_add_ack::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_forward_add_ack::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_forward_add_ack::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::uint64 pub_forward_add_ack::target_id() const {
  return target_id_;
}
inline void pub_forward_add_ack::set_target_id(::google::protobuf::uint64 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional uint32 area_id = 3;
inline bool pub_forward_add_ack::has_area_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_forward_add_ack::set_has_area_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_forward_add_ack::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_forward_add_ack::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 pub_forward_add_ack::area_id() const {
  return area_id_;
}
inline void pub_forward_add_ack::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// optional .SProtoSpace.friend_apply_info apply_info = 4;
inline bool pub_forward_add_ack::has_apply_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_forward_add_ack::set_has_apply_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_forward_add_ack::clear_has_apply_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_forward_add_ack::clear_apply_info() {
  if (apply_info_ != NULL) apply_info_->::SProtoSpace::friend_apply_info::Clear();
  clear_has_apply_info();
}
inline const ::SProtoSpace::friend_apply_info& pub_forward_add_ack::apply_info() const {
  return apply_info_ != NULL ? *apply_info_ : *default_instance_->apply_info_;
}
inline ::SProtoSpace::friend_apply_info* pub_forward_add_ack::mutable_apply_info() {
  set_has_apply_info();
  if (apply_info_ == NULL) apply_info_ = new ::SProtoSpace::friend_apply_info;
  return apply_info_;
}
inline ::SProtoSpace::friend_apply_info* pub_forward_add_ack::release_apply_info() {
  clear_has_apply_info();
  ::SProtoSpace::friend_apply_info* temp = apply_info_;
  apply_info_ = NULL;
  return temp;
}
inline void pub_forward_add_ack::set_allocated_apply_info(::SProtoSpace::friend_apply_info* apply_info) {
  delete apply_info_;
  apply_info_ = apply_info;
  if (apply_info) {
    set_has_apply_info();
  } else {
    clear_has_apply_info();
  }
}

// -------------------------------------------------------------------

// message_packing_info

// optional .SProtoSpace.ESSProtoID protoid = 1;
inline bool message_packing_info::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void message_packing_info::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void message_packing_info::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void message_packing_info::clear_protoid() {
  protoid_ = 1;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID message_packing_info::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void message_packing_info::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional bytes proto_bytes = 3;
inline bool message_packing_info::has_proto_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void message_packing_info::set_has_proto_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void message_packing_info::clear_has_proto_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void message_packing_info::clear_proto_bytes() {
  if (proto_bytes_ != &::google::protobuf::internal::kEmptyString) {
    proto_bytes_->clear();
  }
  clear_has_proto_bytes();
}
inline const ::std::string& message_packing_info::proto_bytes() const {
  return *proto_bytes_;
}
inline void message_packing_info::set_proto_bytes(const ::std::string& value) {
  set_has_proto_bytes();
  if (proto_bytes_ == &::google::protobuf::internal::kEmptyString) {
    proto_bytes_ = new ::std::string;
  }
  proto_bytes_->assign(value);
}
inline void message_packing_info::set_proto_bytes(const char* value) {
  set_has_proto_bytes();
  if (proto_bytes_ == &::google::protobuf::internal::kEmptyString) {
    proto_bytes_ = new ::std::string;
  }
  proto_bytes_->assign(value);
}
inline void message_packing_info::set_proto_bytes(const void* value, size_t size) {
  set_has_proto_bytes();
  if (proto_bytes_ == &::google::protobuf::internal::kEmptyString) {
    proto_bytes_ = new ::std::string;
  }
  proto_bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* message_packing_info::mutable_proto_bytes() {
  set_has_proto_bytes();
  if (proto_bytes_ == &::google::protobuf::internal::kEmptyString) {
    proto_bytes_ = new ::std::string;
  }
  return proto_bytes_;
}
inline ::std::string* message_packing_info::release_proto_bytes() {
  clear_has_proto_bytes();
  if (proto_bytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = proto_bytes_;
    proto_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void message_packing_info::set_allocated_proto_bytes(::std::string* proto_bytes) {
  if (proto_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete proto_bytes_;
  }
  if (proto_bytes) {
    set_has_proto_bytes();
    proto_bytes_ = proto_bytes;
  } else {
    clear_has_proto_bytes();
    proto_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 proto_len = 4;
inline bool message_packing_info::has_proto_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void message_packing_info::set_has_proto_len() {
  _has_bits_[0] |= 0x00000004u;
}
inline void message_packing_info::clear_has_proto_len() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void message_packing_info::clear_proto_len() {
  proto_len_ = 0u;
  clear_has_proto_len();
}
inline ::google::protobuf::uint32 message_packing_info::proto_len() const {
  return proto_len_;
}
inline void message_packing_info::set_proto_len(::google::protobuf::uint32 value) {
  set_has_proto_len();
  proto_len_ = value;
}

// -------------------------------------------------------------------

// game_pub_msg_packing_ntf

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_pub_msg_packing_ntf_id];
inline bool game_pub_msg_packing_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_pub_msg_packing_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_pub_msg_packing_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_pub_msg_packing_ntf::clear_protoid() {
  protoid_ = 1200;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID game_pub_msg_packing_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void game_pub_msg_packing_ntf::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 target_game_id = 2;
inline bool game_pub_msg_packing_ntf::has_target_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_pub_msg_packing_ntf::set_has_target_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_pub_msg_packing_ntf::clear_has_target_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_pub_msg_packing_ntf::clear_target_game_id() {
  target_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_game_id();
}
inline ::google::protobuf::uint64 game_pub_msg_packing_ntf::target_game_id() const {
  return target_game_id_;
}
inline void game_pub_msg_packing_ntf::set_target_game_id(::google::protobuf::uint64 value) {
  set_has_target_game_id();
  target_game_id_ = value;
}

// optional .SProtoSpace.message_packing_info packing = 3;
inline bool game_pub_msg_packing_ntf::has_packing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_pub_msg_packing_ntf::set_has_packing() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_pub_msg_packing_ntf::clear_has_packing() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_pub_msg_packing_ntf::clear_packing() {
  if (packing_ != NULL) packing_->::SProtoSpace::message_packing_info::Clear();
  clear_has_packing();
}
inline const ::SProtoSpace::message_packing_info& game_pub_msg_packing_ntf::packing() const {
  return packing_ != NULL ? *packing_ : *default_instance_->packing_;
}
inline ::SProtoSpace::message_packing_info* game_pub_msg_packing_ntf::mutable_packing() {
  set_has_packing();
  if (packing_ == NULL) packing_ = new ::SProtoSpace::message_packing_info;
  return packing_;
}
inline ::SProtoSpace::message_packing_info* game_pub_msg_packing_ntf::release_packing() {
  clear_has_packing();
  ::SProtoSpace::message_packing_info* temp = packing_;
  packing_ = NULL;
  return temp;
}
inline void game_pub_msg_packing_ntf::set_allocated_packing(::SProtoSpace::message_packing_info* packing) {
  delete packing_;
  packing_ = packing;
  if (packing) {
    set_has_packing();
  } else {
    clear_has_packing();
  }
}

// -------------------------------------------------------------------

// pub_game_msg_packing_ntf

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_game_msg_packing_ntf_id];
inline bool pub_game_msg_packing_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_game_msg_packing_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_game_msg_packing_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_game_msg_packing_ntf::clear_protoid() {
  protoid_ = 1201;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_game_msg_packing_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_game_msg_packing_ntf::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 target_game_id = 2;
inline bool pub_game_msg_packing_ntf::has_target_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_game_msg_packing_ntf::set_has_target_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_game_msg_packing_ntf::clear_has_target_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_game_msg_packing_ntf::clear_target_game_id() {
  target_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_game_id();
}
inline ::google::protobuf::uint64 pub_game_msg_packing_ntf::target_game_id() const {
  return target_game_id_;
}
inline void pub_game_msg_packing_ntf::set_target_game_id(::google::protobuf::uint64 value) {
  set_has_target_game_id();
  target_game_id_ = value;
}

// optional .SProtoSpace.message_packing_info packing = 3;
inline bool pub_game_msg_packing_ntf::has_packing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_game_msg_packing_ntf::set_has_packing() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_game_msg_packing_ntf::clear_has_packing() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_game_msg_packing_ntf::clear_packing() {
  if (packing_ != NULL) packing_->::SProtoSpace::message_packing_info::Clear();
  clear_has_packing();
}
inline const ::SProtoSpace::message_packing_info& pub_game_msg_packing_ntf::packing() const {
  return packing_ != NULL ? *packing_ : *default_instance_->packing_;
}
inline ::SProtoSpace::message_packing_info* pub_game_msg_packing_ntf::mutable_packing() {
  set_has_packing();
  if (packing_ == NULL) packing_ = new ::SProtoSpace::message_packing_info;
  return packing_;
}
inline ::SProtoSpace::message_packing_info* pub_game_msg_packing_ntf::release_packing() {
  clear_has_packing();
  ::SProtoSpace::message_packing_info* temp = packing_;
  packing_ = NULL;
  return temp;
}
inline void pub_game_msg_packing_ntf::set_allocated_packing(::SProtoSpace::message_packing_info* packing) {
  delete packing_;
  packing_ = packing;
  if (packing) {
    set_has_packing();
  } else {
    clear_has_packing();
  }
}

// -------------------------------------------------------------------

// pub_get_role_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_req_id];
inline bool pub_get_role_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_get_role_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_get_role_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_get_role_req::clear_proto_id() {
  proto_id_ = 1519;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_get_role_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_get_role_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.EGetRoleDoType mode = 2;
inline bool pub_get_role_req::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_get_role_req::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_get_role_req::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_get_role_req::clear_mode() {
  mode_ = 1;
  clear_has_mode();
}
inline ::SProtoSpace::EGetRoleDoType pub_get_role_req::mode() const {
  return static_cast< ::SProtoSpace::EGetRoleDoType >(mode_);
}
inline void pub_get_role_req::set_mode(::SProtoSpace::EGetRoleDoType value) {
  assert(::SProtoSpace::EGetRoleDoType_IsValid(value));
  set_has_mode();
  mode_ = value;
}

// optional uint64 uuid = 3;
inline bool pub_get_role_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_get_role_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_get_role_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_get_role_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 pub_get_role_req::uuid() const {
  return uuid_;
}
inline void pub_get_role_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint64 target_id = 4;
inline bool pub_get_role_req::has_target_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_get_role_req::set_has_target_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_get_role_req::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_get_role_req::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_id();
}
inline ::google::protobuf::uint64 pub_get_role_req::target_id() const {
  return target_id_;
}
inline void pub_get_role_req::set_target_id(::google::protobuf::uint64 value) {
  set_has_target_id();
  target_id_ = value;
}

// -------------------------------------------------------------------

// pub_get_role_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_ack_id];
inline bool pub_get_role_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_get_role_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_get_role_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_get_role_ack::clear_proto_id() {
  proto_id_ = 1520;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_get_role_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_get_role_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.EGetRoleDoType mode = 2;
inline bool pub_get_role_ack::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_get_role_ack::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_get_role_ack::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_get_role_ack::clear_mode() {
  mode_ = 1;
  clear_has_mode();
}
inline ::SProtoSpace::EGetRoleDoType pub_get_role_ack::mode() const {
  return static_cast< ::SProtoSpace::EGetRoleDoType >(mode_);
}
inline void pub_get_role_ack::set_mode(::SProtoSpace::EGetRoleDoType value) {
  assert(::SProtoSpace::EGetRoleDoType_IsValid(value));
  set_has_mode();
  mode_ = value;
}

// optional uint64 uuid = 3;
inline bool pub_get_role_ack::has_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_get_role_ack::set_has_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_get_role_ack::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_get_role_ack::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 pub_get_role_ack::uuid() const {
  return uuid_;
}
inline void pub_get_role_ack::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional .SProtoSpace.friend_base_info info = 4;
inline bool pub_get_role_ack::has_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_get_role_ack::set_has_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_get_role_ack::clear_has_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_get_role_ack::clear_info() {
  if (info_ != NULL) info_->::SProtoSpace::friend_base_info::Clear();
  clear_has_info();
}
inline const ::SProtoSpace::friend_base_info& pub_get_role_ack::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::SProtoSpace::friend_base_info* pub_get_role_ack::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::SProtoSpace::friend_base_info;
  return info_;
}
inline ::SProtoSpace::friend_base_info* pub_get_role_ack::release_info() {
  clear_has_info();
  ::SProtoSpace::friend_base_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void pub_get_role_ack::set_allocated_info(::SProtoSpace::friend_base_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// pub_game_friends_ntf

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_friends_ntf_id];
inline bool pub_game_friends_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_game_friends_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_game_friends_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_game_friends_ntf::clear_proto_id() {
  proto_id_ = 1521;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_game_friends_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_game_friends_ntf::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool pub_game_friends_ntf::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_game_friends_ntf::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_game_friends_ntf::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_game_friends_ntf::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 pub_game_friends_ntf::uuid() const {
  return uuid_;
}
inline void pub_game_friends_ntf::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional .SProtoSpace.game_friends_ntf ntf = 3;
inline bool pub_game_friends_ntf::has_ntf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_game_friends_ntf::set_has_ntf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_game_friends_ntf::clear_has_ntf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_game_friends_ntf::clear_ntf() {
  if (ntf_ != NULL) ntf_->::SProtoSpace::game_friends_ntf::Clear();
  clear_has_ntf();
}
inline const ::SProtoSpace::game_friends_ntf& pub_game_friends_ntf::ntf() const {
  return ntf_ != NULL ? *ntf_ : *default_instance_->ntf_;
}
inline ::SProtoSpace::game_friends_ntf* pub_game_friends_ntf::mutable_ntf() {
  set_has_ntf();
  if (ntf_ == NULL) ntf_ = new ::SProtoSpace::game_friends_ntf;
  return ntf_;
}
inline ::SProtoSpace::game_friends_ntf* pub_game_friends_ntf::release_ntf() {
  clear_has_ntf();
  ::SProtoSpace::game_friends_ntf* temp = ntf_;
  ntf_ = NULL;
  return temp;
}
inline void pub_game_friends_ntf::set_allocated_ntf(::SProtoSpace::game_friends_ntf* ntf) {
  delete ntf_;
  ntf_ = ntf;
  if (ntf) {
    set_has_ntf();
  } else {
    clear_has_ntf();
  }
}

// -------------------------------------------------------------------

// pub_complete_role_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_complete_role_req_id];
inline bool pub_complete_role_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_complete_role_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_complete_role_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_complete_role_req::clear_proto_id() {
  proto_id_ = 1522;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_complete_role_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_complete_role_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool pub_complete_role_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_complete_role_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_complete_role_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_complete_role_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 pub_complete_role_req::uuid() const {
  return uuid_;
}
inline void pub_complete_role_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional .SProtoSpace.game_onekey_apply_info_ack ack_info = 3;
inline bool pub_complete_role_req::has_ack_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_complete_role_req::set_has_ack_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_complete_role_req::clear_has_ack_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_complete_role_req::clear_ack_info() {
  if (ack_info_ != NULL) ack_info_->::SProtoSpace::game_onekey_apply_info_ack::Clear();
  clear_has_ack_info();
}
inline const ::SProtoSpace::game_onekey_apply_info_ack& pub_complete_role_req::ack_info() const {
  return ack_info_ != NULL ? *ack_info_ : *default_instance_->ack_info_;
}
inline ::SProtoSpace::game_onekey_apply_info_ack* pub_complete_role_req::mutable_ack_info() {
  set_has_ack_info();
  if (ack_info_ == NULL) ack_info_ = new ::SProtoSpace::game_onekey_apply_info_ack;
  return ack_info_;
}
inline ::SProtoSpace::game_onekey_apply_info_ack* pub_complete_role_req::release_ack_info() {
  clear_has_ack_info();
  ::SProtoSpace::game_onekey_apply_info_ack* temp = ack_info_;
  ack_info_ = NULL;
  return temp;
}
inline void pub_complete_role_req::set_allocated_ack_info(::SProtoSpace::game_onekey_apply_info_ack* ack_info) {
  delete ack_info_;
  ack_info_ = ack_info;
  if (ack_info) {
    set_has_ack_info();
  } else {
    clear_has_ack_info();
  }
}

// -------------------------------------------------------------------

// pub_complete_role_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_complete_role_ack_id];
inline bool pub_complete_role_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_complete_role_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_complete_role_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_complete_role_ack::clear_proto_id() {
  proto_id_ = 1523;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_complete_role_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_complete_role_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool pub_complete_role_ack::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_complete_role_ack::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_complete_role_ack::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_complete_role_ack::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 pub_complete_role_ack::uuid() const {
  return uuid_;
}
inline void pub_complete_role_ack::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional .SProtoSpace.game_onekey_apply_info_ack ack_info = 3;
inline bool pub_complete_role_ack::has_ack_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_complete_role_ack::set_has_ack_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_complete_role_ack::clear_has_ack_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_complete_role_ack::clear_ack_info() {
  if (ack_info_ != NULL) ack_info_->::SProtoSpace::game_onekey_apply_info_ack::Clear();
  clear_has_ack_info();
}
inline const ::SProtoSpace::game_onekey_apply_info_ack& pub_complete_role_ack::ack_info() const {
  return ack_info_ != NULL ? *ack_info_ : *default_instance_->ack_info_;
}
inline ::SProtoSpace::game_onekey_apply_info_ack* pub_complete_role_ack::mutable_ack_info() {
  set_has_ack_info();
  if (ack_info_ == NULL) ack_info_ = new ::SProtoSpace::game_onekey_apply_info_ack;
  return ack_info_;
}
inline ::SProtoSpace::game_onekey_apply_info_ack* pub_complete_role_ack::release_ack_info() {
  clear_has_ack_info();
  ::SProtoSpace::game_onekey_apply_info_ack* temp = ack_info_;
  ack_info_ = NULL;
  return temp;
}
inline void pub_complete_role_ack::set_allocated_ack_info(::SProtoSpace::game_onekey_apply_info_ack* ack_info) {
  delete ack_info_;
  ack_info_ = ack_info;
  if (ack_info) {
    set_has_ack_info();
  } else {
    clear_has_ack_info();
  }
}

// -------------------------------------------------------------------

// pub_friend_refresh_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_refresh_req_id];
inline bool pub_friend_refresh_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_friend_refresh_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_friend_refresh_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_friend_refresh_req::clear_proto_id() {
  proto_id_ = 1524;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_friend_refresh_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_friend_refresh_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool pub_friend_refresh_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_friend_refresh_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_friend_refresh_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_friend_refresh_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 pub_friend_refresh_req::uuid() const {
  return uuid_;
}
inline void pub_friend_refresh_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// repeated uint64 role_ids = 3;
inline int pub_friend_refresh_req::role_ids_size() const {
  return role_ids_.size();
}
inline void pub_friend_refresh_req::clear_role_ids() {
  role_ids_.Clear();
}
inline ::google::protobuf::uint64 pub_friend_refresh_req::role_ids(int index) const {
  return role_ids_.Get(index);
}
inline void pub_friend_refresh_req::set_role_ids(int index, ::google::protobuf::uint64 value) {
  role_ids_.Set(index, value);
}
inline void pub_friend_refresh_req::add_role_ids(::google::protobuf::uint64 value) {
  role_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
pub_friend_refresh_req::role_ids() const {
  return role_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
pub_friend_refresh_req::mutable_role_ids() {
  return &role_ids_;
}

// optional uint32 type = 4;
inline bool pub_friend_refresh_req::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_friend_refresh_req::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_friend_refresh_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_friend_refresh_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 pub_friend_refresh_req::type() const {
  return type_;
}
inline void pub_friend_refresh_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 do_type = 5;
inline bool pub_friend_refresh_req::has_do_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_friend_refresh_req::set_has_do_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_friend_refresh_req::clear_has_do_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_friend_refresh_req::clear_do_type() {
  do_type_ = 0u;
  clear_has_do_type();
}
inline ::google::protobuf::uint32 pub_friend_refresh_req::do_type() const {
  return do_type_;
}
inline void pub_friend_refresh_req::set_do_type(::google::protobuf::uint32 value) {
  set_has_do_type();
  do_type_ = value;
}

// -------------------------------------------------------------------

// pub_friend_refresh_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_refresh_ack_id];
inline bool pub_friend_refresh_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_friend_refresh_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_friend_refresh_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_friend_refresh_ack::clear_proto_id() {
  proto_id_ = 1525;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_friend_refresh_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_friend_refresh_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// repeated .SProtoSpace.friend_base_info infos = 2;
inline int pub_friend_refresh_ack::infos_size() const {
  return infos_.size();
}
inline void pub_friend_refresh_ack::clear_infos() {
  infos_.Clear();
}
inline const ::SProtoSpace::friend_base_info& pub_friend_refresh_ack::infos(int index) const {
  return infos_.Get(index);
}
inline ::SProtoSpace::friend_base_info* pub_friend_refresh_ack::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::SProtoSpace::friend_base_info* pub_friend_refresh_ack::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >&
pub_friend_refresh_ack::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::friend_base_info >*
pub_friend_refresh_ack::mutable_infos() {
  return &infos_;
}

// optional uint32 type = 3;
inline bool pub_friend_refresh_ack::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_friend_refresh_ack::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_friend_refresh_ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_friend_refresh_ack::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 pub_friend_refresh_ack::type() const {
  return type_;
}
inline void pub_friend_refresh_ack::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint64 uuid = 4;
inline bool pub_friend_refresh_ack::has_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_friend_refresh_ack::set_has_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_friend_refresh_ack::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_friend_refresh_ack::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 pub_friend_refresh_ack::uuid() const {
  return uuid_;
}
inline void pub_friend_refresh_ack::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 do_type = 5;
inline bool pub_friend_refresh_ack::has_do_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_friend_refresh_ack::set_has_do_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_friend_refresh_ack::clear_has_do_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_friend_refresh_ack::clear_do_type() {
  do_type_ = 0u;
  clear_has_do_type();
}
inline ::google::protobuf::uint32 pub_friend_refresh_ack::do_type() const {
  return do_type_;
}
inline void pub_friend_refresh_ack::set_do_type(::google::protobuf::uint32 value) {
  set_has_do_type();
  do_type_ = value;
}

// -------------------------------------------------------------------

// game_pub_get_all_event_msg_ntf

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_all_event_msg_ntf_id];
inline bool game_pub_get_all_event_msg_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_pub_get_all_event_msg_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_pub_get_all_event_msg_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_pub_get_all_event_msg_ntf::clear_proto_id() {
  proto_id_ = 1250;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID game_pub_get_all_event_msg_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void game_pub_get_all_event_msg_ntf::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 role_id = 2;
inline bool game_pub_get_all_event_msg_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_pub_get_all_event_msg_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_pub_get_all_event_msg_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_pub_get_all_event_msg_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 game_pub_get_all_event_msg_ntf::role_id() const {
  return role_id_;
}
inline void game_pub_get_all_event_msg_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// pub_game_get_all_event_msg_ntf

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_get_all_event_msg_ntf_id];
inline bool pub_game_get_all_event_msg_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_game_get_all_event_msg_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_game_get_all_event_msg_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_game_get_all_event_msg_ntf::clear_proto_id() {
  proto_id_ = 1251;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_game_get_all_event_msg_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_game_get_all_event_msg_ntf::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 role_id = 2;
inline bool pub_game_get_all_event_msg_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_game_get_all_event_msg_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_game_get_all_event_msg_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_game_get_all_event_msg_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_game_get_all_event_msg_ntf::role_id() const {
  return role_id_;
}
inline void pub_game_get_all_event_msg_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// repeated .SProtoSpace.db_event_msg_info event_msgs = 3;
inline int pub_game_get_all_event_msg_ntf::event_msgs_size() const {
  return event_msgs_.size();
}
inline void pub_game_get_all_event_msg_ntf::clear_event_msgs() {
  event_msgs_.Clear();
}
inline const ::SProtoSpace::db_event_msg_info& pub_game_get_all_event_msg_ntf::event_msgs(int index) const {
  return event_msgs_.Get(index);
}
inline ::SProtoSpace::db_event_msg_info* pub_game_get_all_event_msg_ntf::mutable_event_msgs(int index) {
  return event_msgs_.Mutable(index);
}
inline ::SProtoSpace::db_event_msg_info* pub_game_get_all_event_msg_ntf::add_event_msgs() {
  return event_msgs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_event_msg_info >&
pub_game_get_all_event_msg_ntf::event_msgs() const {
  return event_msgs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::db_event_msg_info >*
pub_game_get_all_event_msg_ntf::mutable_event_msgs() {
  return &event_msgs_;
}

// -------------------------------------------------------------------

// game_pub_get_id_event_msg_ntf

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_id_event_msg_ntf_id];
inline bool game_pub_get_id_event_msg_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_pub_get_id_event_msg_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_pub_get_id_event_msg_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_pub_get_id_event_msg_ntf::clear_proto_id() {
  proto_id_ = 1257;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID game_pub_get_id_event_msg_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void game_pub_get_id_event_msg_ntf::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 role_id = 2;
inline bool game_pub_get_id_event_msg_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_pub_get_id_event_msg_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_pub_get_id_event_msg_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_pub_get_id_event_msg_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 game_pub_get_id_event_msg_ntf::role_id() const {
  return role_id_;
}
inline void game_pub_get_id_event_msg_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 event_id = 3;
inline bool game_pub_get_id_event_msg_ntf::has_event_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_pub_get_id_event_msg_ntf::set_has_event_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_pub_get_id_event_msg_ntf::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_pub_get_id_event_msg_ntf::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
  clear_has_event_id();
}
inline ::google::protobuf::uint64 game_pub_get_id_event_msg_ntf::event_id() const {
  return event_id_;
}
inline void game_pub_get_id_event_msg_ntf::set_event_id(::google::protobuf::uint64 value) {
  set_has_event_id();
  event_id_ = value;
}

// -------------------------------------------------------------------

// pub_game_get_id_event_msg_ntf

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_get_id_event_msg_ntf_id];
inline bool pub_game_get_id_event_msg_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_game_get_id_event_msg_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_game_get_id_event_msg_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_game_get_id_event_msg_ntf::clear_proto_id() {
  proto_id_ = 1258;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_game_get_id_event_msg_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_game_get_id_event_msg_ntf::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 role_id = 2;
inline bool pub_game_get_id_event_msg_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_game_get_id_event_msg_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_game_get_id_event_msg_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_game_get_id_event_msg_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_game_get_id_event_msg_ntf::role_id() const {
  return role_id_;
}
inline void pub_game_get_id_event_msg_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .SProtoSpace.db_event_msg_info event_msgs = 3;
inline bool pub_game_get_id_event_msg_ntf::has_event_msgs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_game_get_id_event_msg_ntf::set_has_event_msgs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_game_get_id_event_msg_ntf::clear_has_event_msgs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_game_get_id_event_msg_ntf::clear_event_msgs() {
  if (event_msgs_ != NULL) event_msgs_->::SProtoSpace::db_event_msg_info::Clear();
  clear_has_event_msgs();
}
inline const ::SProtoSpace::db_event_msg_info& pub_game_get_id_event_msg_ntf::event_msgs() const {
  return event_msgs_ != NULL ? *event_msgs_ : *default_instance_->event_msgs_;
}
inline ::SProtoSpace::db_event_msg_info* pub_game_get_id_event_msg_ntf::mutable_event_msgs() {
  set_has_event_msgs();
  if (event_msgs_ == NULL) event_msgs_ = new ::SProtoSpace::db_event_msg_info;
  return event_msgs_;
}
inline ::SProtoSpace::db_event_msg_info* pub_game_get_id_event_msg_ntf::release_event_msgs() {
  clear_has_event_msgs();
  ::SProtoSpace::db_event_msg_info* temp = event_msgs_;
  event_msgs_ = NULL;
  return temp;
}
inline void pub_game_get_id_event_msg_ntf::set_allocated_event_msgs(::SProtoSpace::db_event_msg_info* event_msgs) {
  delete event_msgs_;
  event_msgs_ = event_msgs;
  if (event_msgs) {
    set_has_event_msgs();
  } else {
    clear_has_event_msgs();
  }
}

// -------------------------------------------------------------------

// game_pub_delete_event_msg_ntf

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_delete_event_msg_ntf_id];
inline bool game_pub_delete_event_msg_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_pub_delete_event_msg_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_pub_delete_event_msg_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_pub_delete_event_msg_ntf::clear_proto_id() {
  proto_id_ = 1252;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID game_pub_delete_event_msg_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void game_pub_delete_event_msg_ntf::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 role_id = 2;
inline bool game_pub_delete_event_msg_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_pub_delete_event_msg_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_pub_delete_event_msg_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_pub_delete_event_msg_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 game_pub_delete_event_msg_ntf::role_id() const {
  return role_id_;
}
inline void game_pub_delete_event_msg_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 delete_id = 4;
inline bool game_pub_delete_event_msg_ntf::has_delete_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_pub_delete_event_msg_ntf::set_has_delete_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_pub_delete_event_msg_ntf::clear_has_delete_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_pub_delete_event_msg_ntf::clear_delete_id() {
  delete_id_ = GOOGLE_ULONGLONG(0);
  clear_has_delete_id();
}
inline ::google::protobuf::uint64 game_pub_delete_event_msg_ntf::delete_id() const {
  return delete_id_;
}
inline void game_pub_delete_event_msg_ntf::set_delete_id(::google::protobuf::uint64 value) {
  set_has_delete_id();
  delete_id_ = value;
}

// -------------------------------------------------------------------

// game_pub_delete_type_msgs_ntf

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_delete_type_msgs_ntf_id];
inline bool game_pub_delete_type_msgs_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_pub_delete_type_msgs_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_pub_delete_type_msgs_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_pub_delete_type_msgs_ntf::clear_proto_id() {
  proto_id_ = 1253;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID game_pub_delete_type_msgs_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void game_pub_delete_type_msgs_ntf::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 role_id = 2;
inline bool game_pub_delete_type_msgs_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_pub_delete_type_msgs_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_pub_delete_type_msgs_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_pub_delete_type_msgs_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 game_pub_delete_type_msgs_ntf::role_id() const {
  return role_id_;
}
inline void game_pub_delete_type_msgs_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 event_type = 3;
inline bool game_pub_delete_type_msgs_ntf::has_event_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_pub_delete_type_msgs_ntf::set_has_event_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_pub_delete_type_msgs_ntf::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_pub_delete_type_msgs_ntf::clear_event_type() {
  event_type_ = 0u;
  clear_has_event_type();
}
inline ::google::protobuf::uint32 game_pub_delete_type_msgs_ntf::event_type() const {
  return event_type_;
}
inline void game_pub_delete_type_msgs_ntf::set_event_type(::google::protobuf::uint32 value) {
  set_has_event_type();
  event_type_ = value;
}

// -------------------------------------------------------------------

// game_pub_read_event_msg_ntf

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_read_event_msg_ntf_id];
inline bool game_pub_read_event_msg_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_pub_read_event_msg_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_pub_read_event_msg_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_pub_read_event_msg_ntf::clear_proto_id() {
  proto_id_ = 1254;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID game_pub_read_event_msg_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void game_pub_read_event_msg_ntf::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 role_id = 2;
inline bool game_pub_read_event_msg_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_pub_read_event_msg_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_pub_read_event_msg_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_pub_read_event_msg_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 game_pub_read_event_msg_ntf::role_id() const {
  return role_id_;
}
inline void game_pub_read_event_msg_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 event_type = 3;
inline bool game_pub_read_event_msg_ntf::has_event_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_pub_read_event_msg_ntf::set_has_event_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_pub_read_event_msg_ntf::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_pub_read_event_msg_ntf::clear_event_type() {
  event_type_ = 0u;
  clear_has_event_type();
}
inline ::google::protobuf::uint32 game_pub_read_event_msg_ntf::event_type() const {
  return event_type_;
}
inline void game_pub_read_event_msg_ntf::set_event_type(::google::protobuf::uint32 value) {
  set_has_event_type();
  event_type_ = value;
}

// -------------------------------------------------------------------

// game_pub_insert_event_msg_ntf

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_insert_event_msg_ntf_id];
inline bool game_pub_insert_event_msg_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_pub_insert_event_msg_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_pub_insert_event_msg_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_pub_insert_event_msg_ntf::clear_proto_id() {
  proto_id_ = 1255;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID game_pub_insert_event_msg_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void game_pub_insert_event_msg_ntf::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 role_id = 2;
inline bool game_pub_insert_event_msg_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_pub_insert_event_msg_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_pub_insert_event_msg_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_pub_insert_event_msg_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 game_pub_insert_event_msg_ntf::role_id() const {
  return role_id_;
}
inline void game_pub_insert_event_msg_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .SProtoSpace.db_event_msg_info event_msg = 3;
inline bool game_pub_insert_event_msg_ntf::has_event_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_pub_insert_event_msg_ntf::set_has_event_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_pub_insert_event_msg_ntf::clear_has_event_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_pub_insert_event_msg_ntf::clear_event_msg() {
  if (event_msg_ != NULL) event_msg_->::SProtoSpace::db_event_msg_info::Clear();
  clear_has_event_msg();
}
inline const ::SProtoSpace::db_event_msg_info& game_pub_insert_event_msg_ntf::event_msg() const {
  return event_msg_ != NULL ? *event_msg_ : *default_instance_->event_msg_;
}
inline ::SProtoSpace::db_event_msg_info* game_pub_insert_event_msg_ntf::mutable_event_msg() {
  set_has_event_msg();
  if (event_msg_ == NULL) event_msg_ = new ::SProtoSpace::db_event_msg_info;
  return event_msg_;
}
inline ::SProtoSpace::db_event_msg_info* game_pub_insert_event_msg_ntf::release_event_msg() {
  clear_has_event_msg();
  ::SProtoSpace::db_event_msg_info* temp = event_msg_;
  event_msg_ = NULL;
  return temp;
}
inline void game_pub_insert_event_msg_ntf::set_allocated_event_msg(::SProtoSpace::db_event_msg_info* event_msg) {
  delete event_msg_;
  event_msg_ = event_msg;
  if (event_msg) {
    set_has_event_msg();
  } else {
    clear_has_event_msg();
  }
}

// optional bool is_nty_client = 4;
inline bool game_pub_insert_event_msg_ntf::has_is_nty_client() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_pub_insert_event_msg_ntf::set_has_is_nty_client() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_pub_insert_event_msg_ntf::clear_has_is_nty_client() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_pub_insert_event_msg_ntf::clear_is_nty_client() {
  is_nty_client_ = false;
  clear_has_is_nty_client();
}
inline bool game_pub_insert_event_msg_ntf::is_nty_client() const {
  return is_nty_client_;
}
inline void game_pub_insert_event_msg_ntf::set_is_nty_client(bool value) {
  set_has_is_nty_client();
  is_nty_client_ = value;
}

// -------------------------------------------------------------------

// pub_game_insert_event_msg_ntf

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_insert_event_msg_ntf_id];
inline bool pub_game_insert_event_msg_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_game_insert_event_msg_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_game_insert_event_msg_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_game_insert_event_msg_ntf::clear_proto_id() {
  proto_id_ = 1256;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_game_insert_event_msg_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_game_insert_event_msg_ntf::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 role_id = 2;
inline bool pub_game_insert_event_msg_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_game_insert_event_msg_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_game_insert_event_msg_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_game_insert_event_msg_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_game_insert_event_msg_ntf::role_id() const {
  return role_id_;
}
inline void pub_game_insert_event_msg_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .SProtoSpace.db_event_msg_info event_msg = 3;
inline bool pub_game_insert_event_msg_ntf::has_event_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_game_insert_event_msg_ntf::set_has_event_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_game_insert_event_msg_ntf::clear_has_event_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_game_insert_event_msg_ntf::clear_event_msg() {
  if (event_msg_ != NULL) event_msg_->::SProtoSpace::db_event_msg_info::Clear();
  clear_has_event_msg();
}
inline const ::SProtoSpace::db_event_msg_info& pub_game_insert_event_msg_ntf::event_msg() const {
  return event_msg_ != NULL ? *event_msg_ : *default_instance_->event_msg_;
}
inline ::SProtoSpace::db_event_msg_info* pub_game_insert_event_msg_ntf::mutable_event_msg() {
  set_has_event_msg();
  if (event_msg_ == NULL) event_msg_ = new ::SProtoSpace::db_event_msg_info;
  return event_msg_;
}
inline ::SProtoSpace::db_event_msg_info* pub_game_insert_event_msg_ntf::release_event_msg() {
  clear_has_event_msg();
  ::SProtoSpace::db_event_msg_info* temp = event_msg_;
  event_msg_ = NULL;
  return temp;
}
inline void pub_game_insert_event_msg_ntf::set_allocated_event_msg(::SProtoSpace::db_event_msg_info* event_msg) {
  delete event_msg_;
  event_msg_ = event_msg;
  if (event_msg) {
    set_has_event_msg();
  } else {
    clear_has_event_msg();
  }
}

// optional bool is_nty_client = 4;
inline bool pub_game_insert_event_msg_ntf::has_is_nty_client() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_game_insert_event_msg_ntf::set_has_is_nty_client() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_game_insert_event_msg_ntf::clear_has_is_nty_client() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_game_insert_event_msg_ntf::clear_is_nty_client() {
  is_nty_client_ = false;
  clear_has_is_nty_client();
}
inline bool pub_game_insert_event_msg_ntf::is_nty_client() const {
  return is_nty_client_;
}
inline void pub_game_insert_event_msg_ntf::set_is_nty_client(bool value) {
  set_has_is_nty_client();
  is_nty_client_ = value;
}

// -------------------------------------------------------------------

// game_pub_get_rank_data_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_rank_data_req_id];
inline bool game_pub_get_rank_data_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_pub_get_rank_data_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_pub_get_rank_data_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_pub_get_rank_data_req::clear_proto_id() {
  proto_id_ = 1526;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID game_pub_get_rank_data_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void game_pub_get_rank_data_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 role_id = 2;
inline bool game_pub_get_rank_data_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_pub_get_rank_data_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_pub_get_rank_data_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_pub_get_rank_data_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 game_pub_get_rank_data_req::role_id() const {
  return role_id_;
}
inline void game_pub_get_rank_data_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .SProtoSpace.RANK_TYPE type = 3;
inline bool game_pub_get_rank_data_req::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_pub_get_rank_data_req::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_pub_get_rank_data_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_pub_get_rank_data_req::clear_type() {
  type_ = 1000;
  clear_has_type();
}
inline ::SProtoSpace::RANK_TYPE game_pub_get_rank_data_req::type() const {
  return static_cast< ::SProtoSpace::RANK_TYPE >(type_);
}
inline void game_pub_get_rank_data_req::set_type(::SProtoSpace::RANK_TYPE value) {
  assert(::SProtoSpace::RANK_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 start_index = 4;
inline bool game_pub_get_rank_data_req::has_start_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_pub_get_rank_data_req::set_has_start_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_pub_get_rank_data_req::clear_has_start_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_pub_get_rank_data_req::clear_start_index() {
  start_index_ = 0;
  clear_has_start_index();
}
inline ::google::protobuf::int32 game_pub_get_rank_data_req::start_index() const {
  return start_index_;
}
inline void game_pub_get_rank_data_req::set_start_index(::google::protobuf::int32 value) {
  set_has_start_index();
  start_index_ = value;
}

// optional int32 end_index = 5;
inline bool game_pub_get_rank_data_req::has_end_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void game_pub_get_rank_data_req::set_has_end_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void game_pub_get_rank_data_req::clear_has_end_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void game_pub_get_rank_data_req::clear_end_index() {
  end_index_ = 0;
  clear_has_end_index();
}
inline ::google::protobuf::int32 game_pub_get_rank_data_req::end_index() const {
  return end_index_;
}
inline void game_pub_get_rank_data_req::set_end_index(::google::protobuf::int32 value) {
  set_has_end_index();
  end_index_ = value;
}

// -------------------------------------------------------------------

// game_pub_get_rank_data_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_rank_data_ack_id];
inline bool game_pub_get_rank_data_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_pub_get_rank_data_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_pub_get_rank_data_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_pub_get_rank_data_ack::clear_proto_id() {
  proto_id_ = 1527;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID game_pub_get_rank_data_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void game_pub_get_rank_data_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 ret = 2;
inline bool game_pub_get_rank_data_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_pub_get_rank_data_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_pub_get_rank_data_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_pub_get_rank_data_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 game_pub_get_rank_data_ack::ret() const {
  return ret_;
}
inline void game_pub_get_rank_data_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 role_id = 3;
inline bool game_pub_get_rank_data_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_pub_get_rank_data_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_pub_get_rank_data_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_pub_get_rank_data_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 game_pub_get_rank_data_ack::role_id() const {
  return role_id_;
}
inline void game_pub_get_rank_data_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .SProtoSpace.RANK_TYPE type = 4;
inline bool game_pub_get_rank_data_ack::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_pub_get_rank_data_ack::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_pub_get_rank_data_ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_pub_get_rank_data_ack::clear_type() {
  type_ = 1000;
  clear_has_type();
}
inline ::SProtoSpace::RANK_TYPE game_pub_get_rank_data_ack::type() const {
  return static_cast< ::SProtoSpace::RANK_TYPE >(type_);
}
inline void game_pub_get_rank_data_ack::set_type(::SProtoSpace::RANK_TYPE value) {
  assert(::SProtoSpace::RANK_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 start_index = 5;
inline bool game_pub_get_rank_data_ack::has_start_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void game_pub_get_rank_data_ack::set_has_start_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void game_pub_get_rank_data_ack::clear_has_start_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void game_pub_get_rank_data_ack::clear_start_index() {
  start_index_ = 0;
  clear_has_start_index();
}
inline ::google::protobuf::int32 game_pub_get_rank_data_ack::start_index() const {
  return start_index_;
}
inline void game_pub_get_rank_data_ack::set_start_index(::google::protobuf::int32 value) {
  set_has_start_index();
  start_index_ = value;
}

// optional int32 end_index = 6;
inline bool game_pub_get_rank_data_ack::has_end_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void game_pub_get_rank_data_ack::set_has_end_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void game_pub_get_rank_data_ack::clear_has_end_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void game_pub_get_rank_data_ack::clear_end_index() {
  end_index_ = 0;
  clear_has_end_index();
}
inline ::google::protobuf::int32 game_pub_get_rank_data_ack::end_index() const {
  return end_index_;
}
inline void game_pub_get_rank_data_ack::set_end_index(::google::protobuf::int32 value) {
  set_has_end_index();
  end_index_ = value;
}

// optional .SProtoSpace.rank_common_item my_item = 7;
inline bool game_pub_get_rank_data_ack::has_my_item() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void game_pub_get_rank_data_ack::set_has_my_item() {
  _has_bits_[0] |= 0x00000040u;
}
inline void game_pub_get_rank_data_ack::clear_has_my_item() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void game_pub_get_rank_data_ack::clear_my_item() {
  if (my_item_ != NULL) my_item_->::SProtoSpace::rank_common_item::Clear();
  clear_has_my_item();
}
inline const ::SProtoSpace::rank_common_item& game_pub_get_rank_data_ack::my_item() const {
  return my_item_ != NULL ? *my_item_ : *default_instance_->my_item_;
}
inline ::SProtoSpace::rank_common_item* game_pub_get_rank_data_ack::mutable_my_item() {
  set_has_my_item();
  if (my_item_ == NULL) my_item_ = new ::SProtoSpace::rank_common_item;
  return my_item_;
}
inline ::SProtoSpace::rank_common_item* game_pub_get_rank_data_ack::release_my_item() {
  clear_has_my_item();
  ::SProtoSpace::rank_common_item* temp = my_item_;
  my_item_ = NULL;
  return temp;
}
inline void game_pub_get_rank_data_ack::set_allocated_my_item(::SProtoSpace::rank_common_item* my_item) {
  delete my_item_;
  my_item_ = my_item;
  if (my_item) {
    set_has_my_item();
  } else {
    clear_has_my_item();
  }
}

// repeated .SProtoSpace.rank_common_item items = 8;
inline int game_pub_get_rank_data_ack::items_size() const {
  return items_.size();
}
inline void game_pub_get_rank_data_ack::clear_items() {
  items_.Clear();
}
inline const ::SProtoSpace::rank_common_item& game_pub_get_rank_data_ack::items(int index) const {
  return items_.Get(index);
}
inline ::SProtoSpace::rank_common_item* game_pub_get_rank_data_ack::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::SProtoSpace::rank_common_item* game_pub_get_rank_data_ack::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::rank_common_item >&
game_pub_get_rank_data_ack::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::rank_common_item >*
game_pub_get_rank_data_ack::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// update_rank_data_ntf

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = update_rank_data_ntf_id];
inline bool update_rank_data_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_rank_data_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_rank_data_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_rank_data_ntf::clear_proto_id() {
  proto_id_ = 1532;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID update_rank_data_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void update_rank_data_ntf::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.RANK_TYPE type = 2;
inline bool update_rank_data_ntf::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void update_rank_data_ntf::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void update_rank_data_ntf::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void update_rank_data_ntf::clear_type() {
  type_ = 1000;
  clear_has_type();
}
inline ::SProtoSpace::RANK_TYPE update_rank_data_ntf::type() const {
  return static_cast< ::SProtoSpace::RANK_TYPE >(type_);
}
inline void update_rank_data_ntf::set_type(::SProtoSpace::RANK_TYPE value) {
  assert(::SProtoSpace::RANK_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint64 role_id = 3;
inline bool update_rank_data_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void update_rank_data_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void update_rank_data_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void update_rank_data_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 update_rank_data_ntf::role_id() const {
  return role_id_;
}
inline void update_rank_data_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// repeated uint32 values = 4;
inline int update_rank_data_ntf::values_size() const {
  return values_.size();
}
inline void update_rank_data_ntf::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::uint32 update_rank_data_ntf::values(int index) const {
  return values_.Get(index);
}
inline void update_rank_data_ntf::set_values(int index, ::google::protobuf::uint32 value) {
  values_.Set(index, value);
}
inline void update_rank_data_ntf::add_values(::google::protobuf::uint32 value) {
  values_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
update_rank_data_ntf::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
update_rank_data_ntf::mutable_values() {
  return &values_;
}

// -------------------------------------------------------------------

// pub_battle_replay_save_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_battle_replay_save_req_id];
inline bool pub_battle_replay_save_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_battle_replay_save_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_battle_replay_save_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_battle_replay_save_req::clear_proto_id() {
  proto_id_ = 1640;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_battle_replay_save_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_battle_replay_save_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 replay_id = 2;
inline bool pub_battle_replay_save_req::has_replay_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_battle_replay_save_req::set_has_replay_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_battle_replay_save_req::clear_has_replay_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_battle_replay_save_req::clear_replay_id() {
  replay_id_ = GOOGLE_ULONGLONG(0);
  clear_has_replay_id();
}
inline ::google::protobuf::uint64 pub_battle_replay_save_req::replay_id() const {
  return replay_id_;
}
inline void pub_battle_replay_save_req::set_replay_id(::google::protobuf::uint64 value) {
  set_has_replay_id();
  replay_id_ = value;
}

// optional .SProtoSpace.battle_replay_info data = 3;
inline bool pub_battle_replay_save_req::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_battle_replay_save_req::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_battle_replay_save_req::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_battle_replay_save_req::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::battle_replay_info::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::battle_replay_info& pub_battle_replay_save_req::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::battle_replay_info* pub_battle_replay_save_req::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::battle_replay_info;
  return data_;
}
inline ::SProtoSpace::battle_replay_info* pub_battle_replay_save_req::release_data() {
  clear_has_data();
  ::SProtoSpace::battle_replay_info* temp = data_;
  data_ = NULL;
  return temp;
}
inline void pub_battle_replay_save_req::set_allocated_data(::SProtoSpace::battle_replay_info* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// pub_battle_replay_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_battle_replay_req_id];
inline bool pub_battle_replay_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_battle_replay_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_battle_replay_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_battle_replay_req::clear_protoid() {
  protoid_ = 1641;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_battle_replay_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_battle_replay_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool pub_battle_replay_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_battle_replay_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_battle_replay_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_battle_replay_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_battle_replay_req::role_id() const {
  return role_id_;
}
inline void pub_battle_replay_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 replay_id = 3;
inline bool pub_battle_replay_req::has_replay_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_battle_replay_req::set_has_replay_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_battle_replay_req::clear_has_replay_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_battle_replay_req::clear_replay_id() {
  replay_id_ = GOOGLE_ULONGLONG(0);
  clear_has_replay_id();
}
inline ::google::protobuf::uint64 pub_battle_replay_req::replay_id() const {
  return replay_id_;
}
inline void pub_battle_replay_req::set_replay_id(::google::protobuf::uint64 value) {
  set_has_replay_id();
  replay_id_ = value;
}

// -------------------------------------------------------------------

// pub_battle_replay_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_battle_replay_ack_id];
inline bool pub_battle_replay_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_battle_replay_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_battle_replay_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_battle_replay_ack::clear_protoid() {
  protoid_ = 1642;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_battle_replay_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_battle_replay_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool pub_battle_replay_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_battle_replay_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_battle_replay_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_battle_replay_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_battle_replay_ack::role_id() const {
  return role_id_;
}
inline void pub_battle_replay_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 ret = 3 [default = 0];
inline bool pub_battle_replay_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_battle_replay_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_battle_replay_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_battle_replay_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 pub_battle_replay_ack::ret() const {
  return ret_;
}
inline void pub_battle_replay_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 replay_id = 4;
inline bool pub_battle_replay_ack::has_replay_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_battle_replay_ack::set_has_replay_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_battle_replay_ack::clear_has_replay_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_battle_replay_ack::clear_replay_id() {
  replay_id_ = GOOGLE_ULONGLONG(0);
  clear_has_replay_id();
}
inline ::google::protobuf::uint64 pub_battle_replay_ack::replay_id() const {
  return replay_id_;
}
inline void pub_battle_replay_ack::set_replay_id(::google::protobuf::uint64 value) {
  set_has_replay_id();
  replay_id_ = value;
}

// optional .SProtoSpace.battle_replay_info data = 5;
inline bool pub_battle_replay_ack::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_battle_replay_ack::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_battle_replay_ack::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_battle_replay_ack::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::battle_replay_info::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::battle_replay_info& pub_battle_replay_ack::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::battle_replay_info* pub_battle_replay_ack::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::battle_replay_info;
  return data_;
}
inline ::SProtoSpace::battle_replay_info* pub_battle_replay_ack::release_data() {
  clear_has_data();
  ::SProtoSpace::battle_replay_info* temp = data_;
  data_ = NULL;
  return temp;
}
inline void pub_battle_replay_ack::set_allocated_data(::SProtoSpace::battle_replay_info* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// pub_query_scene_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_query_scene_req_id];
inline bool pub_query_scene_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_query_scene_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_query_scene_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_query_scene_req::clear_protoid() {
  protoid_ = 1654;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_query_scene_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_query_scene_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 query_type = 2;
inline bool pub_query_scene_req::has_query_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_query_scene_req::set_has_query_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_query_scene_req::clear_has_query_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_query_scene_req::clear_query_type() {
  query_type_ = 0u;
  clear_has_query_type();
}
inline ::google::protobuf::uint32 pub_query_scene_req::query_type() const {
  return query_type_;
}
inline void pub_query_scene_req::set_query_type(::google::protobuf::uint32 value) {
  set_has_query_type();
  query_type_ = value;
}

// optional uint64 role_id = 3;
inline bool pub_query_scene_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_query_scene_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_query_scene_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_query_scene_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_query_scene_req::role_id() const {
  return role_id_;
}
inline void pub_query_scene_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 scene_id = 4;
inline bool pub_query_scene_req::has_scene_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_query_scene_req::set_has_scene_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_query_scene_req::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_query_scene_req::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 pub_query_scene_req::scene_id() const {
  return scene_id_;
}
inline void pub_query_scene_req::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional uint32 scene_type = 5;
inline bool pub_query_scene_req::has_scene_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_query_scene_req::set_has_scene_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_query_scene_req::clear_has_scene_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_query_scene_req::clear_scene_type() {
  scene_type_ = 0u;
  clear_has_scene_type();
}
inline ::google::protobuf::uint32 pub_query_scene_req::scene_type() const {
  return scene_type_;
}
inline void pub_query_scene_req::set_scene_type(::google::protobuf::uint32 value) {
  set_has_scene_type();
  scene_type_ = value;
}

// optional uint32 last_scene_id = 6;
inline bool pub_query_scene_req::has_last_scene_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pub_query_scene_req::set_has_last_scene_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pub_query_scene_req::clear_has_last_scene_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pub_query_scene_req::clear_last_scene_id() {
  last_scene_id_ = 0u;
  clear_has_last_scene_id();
}
inline ::google::protobuf::uint32 pub_query_scene_req::last_scene_id() const {
  return last_scene_id_;
}
inline void pub_query_scene_req::set_last_scene_id(::google::protobuf::uint32 value) {
  set_has_last_scene_id();
  last_scene_id_ = value;
}

// optional uint32 last_scene_type = 7;
inline bool pub_query_scene_req::has_last_scene_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pub_query_scene_req::set_has_last_scene_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pub_query_scene_req::clear_has_last_scene_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pub_query_scene_req::clear_last_scene_type() {
  last_scene_type_ = 0u;
  clear_has_last_scene_type();
}
inline ::google::protobuf::uint32 pub_query_scene_req::last_scene_type() const {
  return last_scene_type_;
}
inline void pub_query_scene_req::set_last_scene_type(::google::protobuf::uint32 value) {
  set_has_last_scene_type();
  last_scene_type_ = value;
}

// optional string token = 8;
inline bool pub_query_scene_req::has_token() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pub_query_scene_req::set_has_token() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pub_query_scene_req::clear_has_token() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pub_query_scene_req::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& pub_query_scene_req::token() const {
  return *token_;
}
inline void pub_query_scene_req::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void pub_query_scene_req::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void pub_query_scene_req::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_query_scene_req::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* pub_query_scene_req::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_query_scene_req::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// pub_query_scene_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_query_scene_ack_id];
inline bool pub_query_scene_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_query_scene_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_query_scene_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_query_scene_ack::clear_protoid() {
  protoid_ = 1655;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_query_scene_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_query_scene_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 query_type = 2;
inline bool pub_query_scene_ack::has_query_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_query_scene_ack::set_has_query_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_query_scene_ack::clear_has_query_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_query_scene_ack::clear_query_type() {
  query_type_ = 0u;
  clear_has_query_type();
}
inline ::google::protobuf::uint32 pub_query_scene_ack::query_type() const {
  return query_type_;
}
inline void pub_query_scene_ack::set_query_type(::google::protobuf::uint32 value) {
  set_has_query_type();
  query_type_ = value;
}

// optional uint64 role_id = 3;
inline bool pub_query_scene_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_query_scene_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_query_scene_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_query_scene_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_query_scene_ack::role_id() const {
  return role_id_;
}
inline void pub_query_scene_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 ret = 4 [default = 0];
inline bool pub_query_scene_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_query_scene_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_query_scene_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_query_scene_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 pub_query_scene_ack::ret() const {
  return ret_;
}
inline void pub_query_scene_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 scene_id = 5;
inline bool pub_query_scene_ack::has_scene_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_query_scene_ack::set_has_scene_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_query_scene_ack::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_query_scene_ack::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 pub_query_scene_ack::scene_id() const {
  return scene_id_;
}
inline void pub_query_scene_ack::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional uint32 scene_type = 6;
inline bool pub_query_scene_ack::has_scene_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pub_query_scene_ack::set_has_scene_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pub_query_scene_ack::clear_has_scene_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pub_query_scene_ack::clear_scene_type() {
  scene_type_ = 0u;
  clear_has_scene_type();
}
inline ::google::protobuf::uint32 pub_query_scene_ack::scene_type() const {
  return scene_type_;
}
inline void pub_query_scene_ack::set_scene_type(::google::protobuf::uint32 value) {
  set_has_scene_type();
  scene_type_ = value;
}

// optional uint64 game_id = 7;
inline bool pub_query_scene_ack::has_game_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pub_query_scene_ack::set_has_game_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pub_query_scene_ack::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pub_query_scene_ack::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
inline ::google::protobuf::uint64 pub_query_scene_ack::game_id() const {
  return game_id_;
}
inline void pub_query_scene_ack::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional string token = 8;
inline bool pub_query_scene_ack::has_token() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pub_query_scene_ack::set_has_token() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pub_query_scene_ack::clear_has_token() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pub_query_scene_ack::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& pub_query_scene_ack::token() const {
  return *token_;
}
inline void pub_query_scene_ack::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void pub_query_scene_ack::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void pub_query_scene_ack::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_query_scene_ack::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* pub_query_scene_ack::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_query_scene_ack::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// pub_destory_scene_ntf

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_destory_scene_ntf_id];
inline bool pub_destory_scene_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_destory_scene_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_destory_scene_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_destory_scene_ntf::clear_protoid() {
  protoid_ = 1657;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_destory_scene_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_destory_scene_ntf::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 scene_id = 2;
inline bool pub_destory_scene_ntf::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_destory_scene_ntf::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_destory_scene_ntf::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_destory_scene_ntf::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 pub_destory_scene_ntf::scene_id() const {
  return scene_id_;
}
inline void pub_destory_scene_ntf::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional uint32 scene_type = 3;
inline bool pub_destory_scene_ntf::has_scene_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_destory_scene_ntf::set_has_scene_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_destory_scene_ntf::clear_has_scene_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_destory_scene_ntf::clear_scene_type() {
  scene_type_ = 0u;
  clear_has_scene_type();
}
inline ::google::protobuf::uint32 pub_destory_scene_ntf::scene_type() const {
  return scene_type_;
}
inline void pub_destory_scene_ntf::set_scene_type(::google::protobuf::uint32 value) {
  set_has_scene_type();
  scene_type_ = value;
}

// -------------------------------------------------------------------

// pub_scene_role_change_ntf

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_scene_role_change_ntf_id];
inline bool pub_scene_role_change_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_scene_role_change_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_scene_role_change_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_scene_role_change_ntf::clear_protoid() {
  protoid_ = 1656;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_scene_role_change_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_scene_role_change_ntf::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 scene_id = 2;
inline bool pub_scene_role_change_ntf::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_scene_role_change_ntf::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_scene_role_change_ntf::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_scene_role_change_ntf::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 pub_scene_role_change_ntf::scene_id() const {
  return scene_id_;
}
inline void pub_scene_role_change_ntf::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional uint32 scene_type = 3;
inline bool pub_scene_role_change_ntf::has_scene_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_scene_role_change_ntf::set_has_scene_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_scene_role_change_ntf::clear_has_scene_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_scene_role_change_ntf::clear_scene_type() {
  scene_type_ = 0u;
  clear_has_scene_type();
}
inline ::google::protobuf::uint32 pub_scene_role_change_ntf::scene_type() const {
  return scene_type_;
}
inline void pub_scene_role_change_ntf::set_scene_type(::google::protobuf::uint32 value) {
  set_has_scene_type();
  scene_type_ = value;
}

// repeated uint64 add_roles = 4;
inline int pub_scene_role_change_ntf::add_roles_size() const {
  return add_roles_.size();
}
inline void pub_scene_role_change_ntf::clear_add_roles() {
  add_roles_.Clear();
}
inline ::google::protobuf::uint64 pub_scene_role_change_ntf::add_roles(int index) const {
  return add_roles_.Get(index);
}
inline void pub_scene_role_change_ntf::set_add_roles(int index, ::google::protobuf::uint64 value) {
  add_roles_.Set(index, value);
}
inline void pub_scene_role_change_ntf::add_add_roles(::google::protobuf::uint64 value) {
  add_roles_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
pub_scene_role_change_ntf::add_roles() const {
  return add_roles_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
pub_scene_role_change_ntf::mutable_add_roles() {
  return &add_roles_;
}

// repeated uint64 del_roles = 5;
inline int pub_scene_role_change_ntf::del_roles_size() const {
  return del_roles_.size();
}
inline void pub_scene_role_change_ntf::clear_del_roles() {
  del_roles_.Clear();
}
inline ::google::protobuf::uint64 pub_scene_role_change_ntf::del_roles(int index) const {
  return del_roles_.Get(index);
}
inline void pub_scene_role_change_ntf::set_del_roles(int index, ::google::protobuf::uint64 value) {
  del_roles_.Set(index, value);
}
inline void pub_scene_role_change_ntf::add_del_roles(::google::protobuf::uint64 value) {
  del_roles_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
pub_scene_role_change_ntf::del_roles() const {
  return del_roles_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
pub_scene_role_change_ntf::mutable_del_roles() {
  return &del_roles_;
}

// -------------------------------------------------------------------

// pub_update_3d_scene_info_ntf

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_update_3d_scene_info_ntf_id];
inline bool pub_update_3d_scene_info_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_update_3d_scene_info_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_update_3d_scene_info_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_update_3d_scene_info_ntf::clear_protoid() {
  protoid_ = 1721;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_update_3d_scene_info_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_update_3d_scene_info_ntf::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 scene_id = 2;
inline bool pub_update_3d_scene_info_ntf::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_update_3d_scene_info_ntf::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_update_3d_scene_info_ntf::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_update_3d_scene_info_ntf::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 pub_update_3d_scene_info_ntf::scene_id() const {
  return scene_id_;
}
inline void pub_update_3d_scene_info_ntf::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional uint32 scene_type = 3;
inline bool pub_update_3d_scene_info_ntf::has_scene_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_update_3d_scene_info_ntf::set_has_scene_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_update_3d_scene_info_ntf::clear_has_scene_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_update_3d_scene_info_ntf::clear_scene_type() {
  scene_type_ = 0u;
  clear_has_scene_type();
}
inline ::google::protobuf::uint32 pub_update_3d_scene_info_ntf::scene_type() const {
  return scene_type_;
}
inline void pub_update_3d_scene_info_ntf::set_scene_type(::google::protobuf::uint32 value) {
  set_has_scene_type();
  scene_type_ = value;
}

// optional uint32 conf_id = 4;
inline bool pub_update_3d_scene_info_ntf::has_conf_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_update_3d_scene_info_ntf::set_has_conf_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_update_3d_scene_info_ntf::clear_has_conf_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_update_3d_scene_info_ntf::clear_conf_id() {
  conf_id_ = 0u;
  clear_has_conf_id();
}
inline ::google::protobuf::uint32 pub_update_3d_scene_info_ntf::conf_id() const {
  return conf_id_;
}
inline void pub_update_3d_scene_info_ntf::set_conf_id(::google::protobuf::uint32 value) {
  set_has_conf_id();
  conf_id_ = value;
}

// optional string scene_name = 5;
inline bool pub_update_3d_scene_info_ntf::has_scene_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_update_3d_scene_info_ntf::set_has_scene_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_update_3d_scene_info_ntf::clear_has_scene_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_update_3d_scene_info_ntf::clear_scene_name() {
  if (scene_name_ != &::google::protobuf::internal::kEmptyString) {
    scene_name_->clear();
  }
  clear_has_scene_name();
}
inline const ::std::string& pub_update_3d_scene_info_ntf::scene_name() const {
  return *scene_name_;
}
inline void pub_update_3d_scene_info_ntf::set_scene_name(const ::std::string& value) {
  set_has_scene_name();
  if (scene_name_ == &::google::protobuf::internal::kEmptyString) {
    scene_name_ = new ::std::string;
  }
  scene_name_->assign(value);
}
inline void pub_update_3d_scene_info_ntf::set_scene_name(const char* value) {
  set_has_scene_name();
  if (scene_name_ == &::google::protobuf::internal::kEmptyString) {
    scene_name_ = new ::std::string;
  }
  scene_name_->assign(value);
}
inline void pub_update_3d_scene_info_ntf::set_scene_name(const char* value, size_t size) {
  set_has_scene_name();
  if (scene_name_ == &::google::protobuf::internal::kEmptyString) {
    scene_name_ = new ::std::string;
  }
  scene_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_update_3d_scene_info_ntf::mutable_scene_name() {
  set_has_scene_name();
  if (scene_name_ == &::google::protobuf::internal::kEmptyString) {
    scene_name_ = new ::std::string;
  }
  return scene_name_;
}
inline ::std::string* pub_update_3d_scene_info_ntf::release_scene_name() {
  clear_has_scene_name();
  if (scene_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scene_name_;
    scene_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_update_3d_scene_info_ntf::set_allocated_scene_name(::std::string* scene_name) {
  if (scene_name_ != &::google::protobuf::internal::kEmptyString) {
    delete scene_name_;
  }
  if (scene_name) {
    set_has_scene_name();
    scene_name_ = scene_name;
  } else {
    clear_has_scene_name();
    scene_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// pub_switch_game_id_ntf

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_switch_game_id_ntf_id];
inline bool pub_switch_game_id_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_switch_game_id_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_switch_game_id_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_switch_game_id_ntf::clear_protoid() {
  protoid_ = 1714;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_switch_game_id_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_switch_game_id_ntf::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 gs_id = 2;
inline bool pub_switch_game_id_ntf::has_gs_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_switch_game_id_ntf::set_has_gs_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_switch_game_id_ntf::clear_has_gs_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_switch_game_id_ntf::clear_gs_id() {
  gs_id_ = GOOGLE_ULONGLONG(0);
  clear_has_gs_id();
}
inline ::google::protobuf::uint64 pub_switch_game_id_ntf::gs_id() const {
  return gs_id_;
}
inline void pub_switch_game_id_ntf::set_gs_id(::google::protobuf::uint64 value) {
  set_has_gs_id();
  gs_id_ = value;
}

// -------------------------------------------------------------------

// pub_officer_daily_salary_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_officer_daily_salary_req_id];
inline bool pub_officer_daily_salary_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_officer_daily_salary_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_officer_daily_salary_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_officer_daily_salary_req::clear_protoid() {
  protoid_ = 1536;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_officer_daily_salary_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_officer_daily_salary_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool pub_officer_daily_salary_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_officer_daily_salary_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_officer_daily_salary_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_officer_daily_salary_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_officer_daily_salary_req::role_id() const {
  return role_id_;
}
inline void pub_officer_daily_salary_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 grade = 3;
inline bool pub_officer_daily_salary_req::has_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_officer_daily_salary_req::set_has_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_officer_daily_salary_req::clear_has_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_officer_daily_salary_req::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 pub_officer_daily_salary_req::grade() const {
  return grade_;
}
inline void pub_officer_daily_salary_req::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// -------------------------------------------------------------------

// pub_officer_daily_salary_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_officer_daily_salary_ack_id];
inline bool pub_officer_daily_salary_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_officer_daily_salary_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_officer_daily_salary_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_officer_daily_salary_ack::clear_protoid() {
  protoid_ = 1537;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_officer_daily_salary_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_officer_daily_salary_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool pub_officer_daily_salary_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_officer_daily_salary_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_officer_daily_salary_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_officer_daily_salary_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_officer_daily_salary_ack::role_id() const {
  return role_id_;
}
inline void pub_officer_daily_salary_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 grade = 3;
inline bool pub_officer_daily_salary_ack::has_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_officer_daily_salary_ack::set_has_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_officer_daily_salary_ack::clear_has_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_officer_daily_salary_ack::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 pub_officer_daily_salary_ack::grade() const {
  return grade_;
}
inline void pub_officer_daily_salary_ack::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint32 ranking_id = 4;
inline bool pub_officer_daily_salary_ack::has_ranking_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_officer_daily_salary_ack::set_has_ranking_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_officer_daily_salary_ack::clear_has_ranking_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_officer_daily_salary_ack::clear_ranking_id() {
  ranking_id_ = 0u;
  clear_has_ranking_id();
}
inline ::google::protobuf::uint32 pub_officer_daily_salary_ack::ranking_id() const {
  return ranking_id_;
}
inline void pub_officer_daily_salary_ack::set_ranking_id(::google::protobuf::uint32 value) {
  set_has_ranking_id();
  ranking_id_ = value;
}

// optional int32 ret = 5;
inline bool pub_officer_daily_salary_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_officer_daily_salary_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_officer_daily_salary_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_officer_daily_salary_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 pub_officer_daily_salary_ack::ret() const {
  return ret_;
}
inline void pub_officer_daily_salary_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// pub_offical_battle_report_req

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_offical_battle_report_req_id];
inline bool pub_offical_battle_report_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_offical_battle_report_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_offical_battle_report_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_offical_battle_report_req::clear_protoid() {
  protoid_ = 1121;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_offical_battle_report_req::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_offical_battle_report_req::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool pub_offical_battle_report_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_offical_battle_report_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_offical_battle_report_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_offical_battle_report_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_offical_battle_report_req::role_id() const {
  return role_id_;
}
inline void pub_offical_battle_report_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// pub_offical_battle_report_ack

// optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_offical_battle_report_ack_id];
inline bool pub_offical_battle_report_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_offical_battle_report_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_offical_battle_report_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_offical_battle_report_ack::clear_protoid() {
  protoid_ = 1122;
  clear_has_protoid();
}
inline ::SProtoSpace::ESSProtoID pub_offical_battle_report_ack::protoid() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(protoid_);
}
inline void pub_offical_battle_report_ack::set_protoid(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool pub_offical_battle_report_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_offical_battle_report_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_offical_battle_report_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_offical_battle_report_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 pub_offical_battle_report_ack::ret() const {
  return ret_;
}
inline void pub_offical_battle_report_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 role_id = 3;
inline bool pub_offical_battle_report_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_offical_battle_report_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_offical_battle_report_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_offical_battle_report_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_offical_battle_report_ack::role_id() const {
  return role_id_;
}
inline void pub_offical_battle_report_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// repeated .SProtoSpace.offical_battle_report_unit reports = 4;
inline int pub_offical_battle_report_ack::reports_size() const {
  return reports_.size();
}
inline void pub_offical_battle_report_ack::clear_reports() {
  reports_.Clear();
}
inline const ::SProtoSpace::offical_battle_report_unit& pub_offical_battle_report_ack::reports(int index) const {
  return reports_.Get(index);
}
inline ::SProtoSpace::offical_battle_report_unit* pub_offical_battle_report_ack::mutable_reports(int index) {
  return reports_.Mutable(index);
}
inline ::SProtoSpace::offical_battle_report_unit* pub_offical_battle_report_ack::add_reports() {
  return reports_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_battle_report_unit >&
pub_offical_battle_report_ack::reports() const {
  return reports_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_battle_report_unit >*
pub_offical_battle_report_ack::mutable_reports() {
  return &reports_;
}

// -------------------------------------------------------------------

// pub_get_offical_formation_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_formation_req_id];
inline bool pub_get_offical_formation_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_get_offical_formation_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_get_offical_formation_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_get_offical_formation_req::clear_proto_id() {
  proto_id_ = 1540;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_get_offical_formation_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_get_offical_formation_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 my_role_id = 2;
inline bool pub_get_offical_formation_req::has_my_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_get_offical_formation_req::set_has_my_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_get_offical_formation_req::clear_has_my_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_get_offical_formation_req::clear_my_role_id() {
  my_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_my_role_id();
}
inline ::google::protobuf::uint64 pub_get_offical_formation_req::my_role_id() const {
  return my_role_id_;
}
inline void pub_get_offical_formation_req::set_my_role_id(::google::protobuf::uint64 value) {
  set_has_my_role_id();
  my_role_id_ = value;
}

// optional uint64 dest_role_id = 3;
inline bool pub_get_offical_formation_req::has_dest_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_get_offical_formation_req::set_has_dest_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_get_offical_formation_req::clear_has_dest_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_get_offical_formation_req::clear_dest_role_id() {
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dest_role_id();
}
inline ::google::protobuf::uint64 pub_get_offical_formation_req::dest_role_id() const {
  return dest_role_id_;
}
inline void pub_get_offical_formation_req::set_dest_role_id(::google::protobuf::uint64 value) {
  set_has_dest_role_id();
  dest_role_id_ = value;
}

// optional .SProtoSpace.EGrade office_lv = 4;
inline bool pub_get_offical_formation_req::has_office_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_get_offical_formation_req::set_has_office_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_get_offical_formation_req::clear_has_office_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_get_offical_formation_req::clear_office_lv() {
  office_lv_ = 0;
  clear_has_office_lv();
}
inline ::SProtoSpace::EGrade pub_get_offical_formation_req::office_lv() const {
  return static_cast< ::SProtoSpace::EGrade >(office_lv_);
}
inline void pub_get_offical_formation_req::set_office_lv(::SProtoSpace::EGrade value) {
  assert(::SProtoSpace::EGrade_IsValid(value));
  set_has_office_lv();
  office_lv_ = value;
}

// -------------------------------------------------------------------

// pub_get_offical_formation_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_formation_ack_id];
inline bool pub_get_offical_formation_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_get_offical_formation_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_get_offical_formation_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_get_offical_formation_ack::clear_proto_id() {
  proto_id_ = 1541;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_get_offical_formation_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_get_offical_formation_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool pub_get_offical_formation_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_get_offical_formation_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_get_offical_formation_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_get_offical_formation_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 pub_get_offical_formation_ack::ret() const {
  return ret_;
}
inline void pub_get_offical_formation_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 my_role_id = 3;
inline bool pub_get_offical_formation_ack::has_my_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_get_offical_formation_ack::set_has_my_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_get_offical_formation_ack::clear_has_my_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_get_offical_formation_ack::clear_my_role_id() {
  my_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_my_role_id();
}
inline ::google::protobuf::uint64 pub_get_offical_formation_ack::my_role_id() const {
  return my_role_id_;
}
inline void pub_get_offical_formation_ack::set_my_role_id(::google::protobuf::uint64 value) {
  set_has_my_role_id();
  my_role_id_ = value;
}

// optional uint64 dest_role_id = 4;
inline bool pub_get_offical_formation_ack::has_dest_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_get_offical_formation_ack::set_has_dest_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_get_offical_formation_ack::clear_has_dest_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_get_offical_formation_ack::clear_dest_role_id() {
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dest_role_id();
}
inline ::google::protobuf::uint64 pub_get_offical_formation_ack::dest_role_id() const {
  return dest_role_id_;
}
inline void pub_get_offical_formation_ack::set_dest_role_id(::google::protobuf::uint64 value) {
  set_has_dest_role_id();
  dest_role_id_ = value;
}

// optional string name = 5;
inline bool pub_get_offical_formation_ack::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_get_offical_formation_ack::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_get_offical_formation_ack::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_get_offical_formation_ack::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& pub_get_offical_formation_ack::name() const {
  return *name_;
}
inline void pub_get_offical_formation_ack::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void pub_get_offical_formation_ack::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void pub_get_offical_formation_ack::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_get_offical_formation_ack::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* pub_get_offical_formation_ack::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_get_offical_formation_ack::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sex = 6;
inline bool pub_get_offical_formation_ack::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pub_get_offical_formation_ack::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pub_get_offical_formation_ack::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pub_get_offical_formation_ack::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 pub_get_offical_formation_ack::sex() const {
  return sex_;
}
inline void pub_get_offical_formation_ack::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional string head = 7;
inline bool pub_get_offical_formation_ack::has_head() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pub_get_offical_formation_ack::set_has_head() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pub_get_offical_formation_ack::clear_has_head() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pub_get_offical_formation_ack::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& pub_get_offical_formation_ack::head() const {
  return *head_;
}
inline void pub_get_offical_formation_ack::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void pub_get_offical_formation_ack::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void pub_get_offical_formation_ack::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_get_offical_formation_ack::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* pub_get_offical_formation_ack::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_get_offical_formation_ack::set_allocated_head(::std::string* head) {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (head) {
    set_has_head();
    head_ = head;
  } else {
    clear_has_head();
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 bord = 8;
inline bool pub_get_offical_formation_ack::has_bord() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pub_get_offical_formation_ack::set_has_bord() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pub_get_offical_formation_ack::clear_has_bord() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pub_get_offical_formation_ack::clear_bord() {
  bord_ = 0;
  clear_has_bord();
}
inline ::google::protobuf::int32 pub_get_offical_formation_ack::bord() const {
  return bord_;
}
inline void pub_get_offical_formation_ack::set_bord(::google::protobuf::int32 value) {
  set_has_bord();
  bord_ = value;
}

// optional int32 grade = 9;
inline bool pub_get_offical_formation_ack::has_grade() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pub_get_offical_formation_ack::set_has_grade() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pub_get_offical_formation_ack::clear_has_grade() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pub_get_offical_formation_ack::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 pub_get_offical_formation_ack::grade() const {
  return grade_;
}
inline void pub_get_offical_formation_ack::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// optional int32 lv = 10;
inline bool pub_get_offical_formation_ack::has_lv() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pub_get_offical_formation_ack::set_has_lv() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pub_get_offical_formation_ack::clear_has_lv() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pub_get_offical_formation_ack::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 pub_get_offical_formation_ack::lv() const {
  return lv_;
}
inline void pub_get_offical_formation_ack::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// repeated .SProtoSpace.hero_base_info heros = 11;
inline int pub_get_offical_formation_ack::heros_size() const {
  return heros_.size();
}
inline void pub_get_offical_formation_ack::clear_heros() {
  heros_.Clear();
}
inline const ::SProtoSpace::hero_base_info& pub_get_offical_formation_ack::heros(int index) const {
  return heros_.Get(index);
}
inline ::SProtoSpace::hero_base_info* pub_get_offical_formation_ack::mutable_heros(int index) {
  return heros_.Mutable(index);
}
inline ::SProtoSpace::hero_base_info* pub_get_offical_formation_ack::add_heros() {
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info >&
pub_get_offical_formation_ack::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info >*
pub_get_offical_formation_ack::mutable_heros() {
  return &heros_;
}

// -------------------------------------------------------------------

// pub_gm_upgrade_office_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_upgrade_office_req_id];
inline bool pub_gm_upgrade_office_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_gm_upgrade_office_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_gm_upgrade_office_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_gm_upgrade_office_req::clear_proto_id() {
  proto_id_ = 1542;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_gm_upgrade_office_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_gm_upgrade_office_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 grade = 2;
inline bool pub_gm_upgrade_office_req::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_gm_upgrade_office_req::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_gm_upgrade_office_req::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_gm_upgrade_office_req::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 pub_gm_upgrade_office_req::grade() const {
  return grade_;
}
inline void pub_gm_upgrade_office_req::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// optional .SProtoSpace.arena_item_data data = 4;
inline bool pub_gm_upgrade_office_req::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_gm_upgrade_office_req::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_gm_upgrade_office_req::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_gm_upgrade_office_req::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::arena_item_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::arena_item_data& pub_gm_upgrade_office_req::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::arena_item_data* pub_gm_upgrade_office_req::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::arena_item_data;
  return data_;
}
inline ::SProtoSpace::arena_item_data* pub_gm_upgrade_office_req::release_data() {
  clear_has_data();
  ::SProtoSpace::arena_item_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void pub_gm_upgrade_office_req::set_allocated_data(::SProtoSpace::arena_item_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// offical_robot_gen_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_robot_gen_req_id];
inline bool offical_robot_gen_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_robot_gen_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_robot_gen_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_robot_gen_req::clear_proto_id() {
  proto_id_ = 1543;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID offical_robot_gen_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void offical_robot_gen_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// -------------------------------------------------------------------

// offical_robot_gen_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_robot_gen_ack_id];
inline bool offical_robot_gen_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_robot_gen_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_robot_gen_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_robot_gen_ack::clear_proto_id() {
  proto_id_ = 1544;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID offical_robot_gen_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void offical_robot_gen_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// -------------------------------------------------------------------

// get_minimum_chat_room_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = get_minimum_chat_room_req_id];
inline bool get_minimum_chat_room_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_minimum_chat_room_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_minimum_chat_room_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_minimum_chat_room_req::clear_proto_id() {
  proto_id_ = 1702;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID get_minimum_chat_room_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void get_minimum_chat_room_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 role_id = 2;
inline bool get_minimum_chat_room_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_minimum_chat_room_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_minimum_chat_room_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_minimum_chat_room_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 get_minimum_chat_room_req::role_id() const {
  return role_id_;
}
inline void get_minimum_chat_room_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// get_minimum_chat_room_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = get_minimum_chat_room_ack_id];
inline bool get_minimum_chat_room_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_minimum_chat_room_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_minimum_chat_room_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_minimum_chat_room_ack::clear_proto_id() {
  proto_id_ = 1703;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID get_minimum_chat_room_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void get_minimum_chat_room_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 ret = 2;
inline bool get_minimum_chat_room_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_minimum_chat_room_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_minimum_chat_room_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_minimum_chat_room_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 get_minimum_chat_room_ack::ret() const {
  return ret_;
}
inline void get_minimum_chat_room_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 role_id = 3;
inline bool get_minimum_chat_room_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_minimum_chat_room_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_minimum_chat_room_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_minimum_chat_room_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 get_minimum_chat_room_ack::role_id() const {
  return role_id_;
}
inline void get_minimum_chat_room_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 room_id = 4;
inline bool get_minimum_chat_room_ack::has_room_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void get_minimum_chat_room_ack::set_has_room_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void get_minimum_chat_room_ack::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void get_minimum_chat_room_ack::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 get_minimum_chat_room_ack::room_id() const {
  return room_id_;
}
inline void get_minimum_chat_room_ack::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional uint64 game_id = 5;
inline bool get_minimum_chat_room_ack::has_game_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void get_minimum_chat_room_ack::set_has_game_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void get_minimum_chat_room_ack::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void get_minimum_chat_room_ack::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
inline ::google::protobuf::uint64 get_minimum_chat_room_ack::game_id() const {
  return game_id_;
}
inline void get_minimum_chat_room_ack::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
}

// -------------------------------------------------------------------

// pub_get_chat_room_list_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_chat_room_list_req_id];
inline bool pub_get_chat_room_list_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_get_chat_room_list_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_get_chat_room_list_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_get_chat_room_list_req::clear_proto_id() {
  proto_id_ = 1704;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_get_chat_room_list_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_get_chat_room_list_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 role_id = 2;
inline bool pub_get_chat_room_list_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_get_chat_room_list_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_get_chat_room_list_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_get_chat_room_list_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_get_chat_room_list_req::role_id() const {
  return role_id_;
}
inline void pub_get_chat_room_list_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 index_start = 3;
inline bool pub_get_chat_room_list_req::has_index_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_get_chat_room_list_req::set_has_index_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_get_chat_room_list_req::clear_has_index_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_get_chat_room_list_req::clear_index_start() {
  index_start_ = 0;
  clear_has_index_start();
}
inline ::google::protobuf::int32 pub_get_chat_room_list_req::index_start() const {
  return index_start_;
}
inline void pub_get_chat_room_list_req::set_index_start(::google::protobuf::int32 value) {
  set_has_index_start();
  index_start_ = value;
}

// optional int32 index_end = 4;
inline bool pub_get_chat_room_list_req::has_index_end() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_get_chat_room_list_req::set_has_index_end() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_get_chat_room_list_req::clear_has_index_end() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_get_chat_room_list_req::clear_index_end() {
  index_end_ = 0;
  clear_has_index_end();
}
inline ::google::protobuf::int32 pub_get_chat_room_list_req::index_end() const {
  return index_end_;
}
inline void pub_get_chat_room_list_req::set_index_end(::google::protobuf::int32 value) {
  set_has_index_end();
  index_end_ = value;
}

// -------------------------------------------------------------------

// pub_get_chat_room_list_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_chat_room_list_ack_id];
inline bool pub_get_chat_room_list_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_get_chat_room_list_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_get_chat_room_list_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_get_chat_room_list_ack::clear_proto_id() {
  proto_id_ = 1705;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_get_chat_room_list_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_get_chat_room_list_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 ret = 2;
inline bool pub_get_chat_room_list_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_get_chat_room_list_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_get_chat_room_list_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_get_chat_room_list_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 pub_get_chat_room_list_ack::ret() const {
  return ret_;
}
inline void pub_get_chat_room_list_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 role_id = 3;
inline bool pub_get_chat_room_list_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_get_chat_room_list_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_get_chat_room_list_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_get_chat_room_list_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 pub_get_chat_room_list_ack::role_id() const {
  return role_id_;
}
inline void pub_get_chat_room_list_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 index_start = 4;
inline bool pub_get_chat_room_list_ack::has_index_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_get_chat_room_list_ack::set_has_index_start() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_get_chat_room_list_ack::clear_has_index_start() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_get_chat_room_list_ack::clear_index_start() {
  index_start_ = 0;
  clear_has_index_start();
}
inline ::google::protobuf::int32 pub_get_chat_room_list_ack::index_start() const {
  return index_start_;
}
inline void pub_get_chat_room_list_ack::set_index_start(::google::protobuf::int32 value) {
  set_has_index_start();
  index_start_ = value;
}

// optional int32 index_end = 5;
inline bool pub_get_chat_room_list_ack::has_index_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_get_chat_room_list_ack::set_has_index_end() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_get_chat_room_list_ack::clear_has_index_end() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_get_chat_room_list_ack::clear_index_end() {
  index_end_ = 0;
  clear_has_index_end();
}
inline ::google::protobuf::int32 pub_get_chat_room_list_ack::index_end() const {
  return index_end_;
}
inline void pub_get_chat_room_list_ack::set_index_end(::google::protobuf::int32 value) {
  set_has_index_end();
  index_end_ = value;
}

// repeated .SProtoSpace.chat_room_state rooms = 6;
inline int pub_get_chat_room_list_ack::rooms_size() const {
  return rooms_.size();
}
inline void pub_get_chat_room_list_ack::clear_rooms() {
  rooms_.Clear();
}
inline const ::SProtoSpace::chat_room_state& pub_get_chat_room_list_ack::rooms(int index) const {
  return rooms_.Get(index);
}
inline ::SProtoSpace::chat_room_state* pub_get_chat_room_list_ack::mutable_rooms(int index) {
  return rooms_.Mutable(index);
}
inline ::SProtoSpace::chat_room_state* pub_get_chat_room_list_ack::add_rooms() {
  return rooms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chat_room_state >&
pub_get_chat_room_list_ack::rooms() const {
  return rooms_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::chat_room_state >*
pub_get_chat_room_list_ack::mutable_rooms() {
  return &rooms_;
}

// -------------------------------------------------------------------

// pub_create_3dchat_room_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_create_3dchat_room_req_id];
inline bool pub_create_3dchat_room_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_create_3dchat_room_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_create_3dchat_room_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_create_3dchat_room_req::clear_proto_id() {
  proto_id_ = 1715;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_create_3dchat_room_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_create_3dchat_room_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 room_conf_id = 2;
inline bool pub_create_3dchat_room_req::has_room_conf_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_create_3dchat_room_req::set_has_room_conf_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_create_3dchat_room_req::clear_has_room_conf_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_create_3dchat_room_req::clear_room_conf_id() {
  room_conf_id_ = 0;
  clear_has_room_conf_id();
}
inline ::google::protobuf::int32 pub_create_3dchat_room_req::room_conf_id() const {
  return room_conf_id_;
}
inline void pub_create_3dchat_room_req::set_room_conf_id(::google::protobuf::int32 value) {
  set_has_room_conf_id();
  room_conf_id_ = value;
}

// optional string room_name = 3;
inline bool pub_create_3dchat_room_req::has_room_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_create_3dchat_room_req::set_has_room_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_create_3dchat_room_req::clear_has_room_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_create_3dchat_room_req::clear_room_name() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    room_name_->clear();
  }
  clear_has_room_name();
}
inline const ::std::string& pub_create_3dchat_room_req::room_name() const {
  return *room_name_;
}
inline void pub_create_3dchat_room_req::set_room_name(const ::std::string& value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void pub_create_3dchat_room_req::set_room_name(const char* value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void pub_create_3dchat_room_req::set_room_name(const char* value, size_t size) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_create_3dchat_room_req::mutable_room_name() {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}
inline ::std::string* pub_create_3dchat_room_req::release_room_name() {
  clear_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = room_name_;
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_create_3dchat_room_req::set_allocated_room_name(::std::string* room_name) {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (room_name) {
    set_has_room_name();
    room_name_ = room_name;
  } else {
    clear_has_room_name();
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string token = 4;
inline bool pub_create_3dchat_room_req::has_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_create_3dchat_room_req::set_has_token() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_create_3dchat_room_req::clear_has_token() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_create_3dchat_room_req::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& pub_create_3dchat_room_req::token() const {
  return *token_;
}
inline void pub_create_3dchat_room_req::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void pub_create_3dchat_room_req::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void pub_create_3dchat_room_req::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_create_3dchat_room_req::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* pub_create_3dchat_room_req::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_create_3dchat_room_req::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 fee = 5;
inline bool pub_create_3dchat_room_req::has_fee() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_create_3dchat_room_req::set_has_fee() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_create_3dchat_room_req::clear_has_fee() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_create_3dchat_room_req::clear_fee() {
  fee_ = 0;
  clear_has_fee();
}
inline ::google::protobuf::int32 pub_create_3dchat_room_req::fee() const {
  return fee_;
}
inline void pub_create_3dchat_room_req::set_fee(::google::protobuf::int32 value) {
  set_has_fee();
  fee_ = value;
}

// -------------------------------------------------------------------

// pub_create_3dchat_room_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_create_3dchat_room_ack_id];
inline bool pub_create_3dchat_room_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_create_3dchat_room_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_create_3dchat_room_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_create_3dchat_room_ack::clear_proto_id() {
  proto_id_ = 1716;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_create_3dchat_room_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_create_3dchat_room_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 ret = 2;
inline bool pub_create_3dchat_room_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_create_3dchat_room_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_create_3dchat_room_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_create_3dchat_room_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 pub_create_3dchat_room_ack::ret() const {
  return ret_;
}
inline void pub_create_3dchat_room_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 id = 3;
inline bool pub_create_3dchat_room_ack::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_create_3dchat_room_ack::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_create_3dchat_room_ack::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_create_3dchat_room_ack::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 pub_create_3dchat_room_ack::id() const {
  return id_;
}
inline void pub_create_3dchat_room_ack::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 create_tm = 4;
inline bool pub_create_3dchat_room_ack::has_create_tm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_create_3dchat_room_ack::set_has_create_tm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_create_3dchat_room_ack::clear_has_create_tm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_create_3dchat_room_ack::clear_create_tm() {
  create_tm_ = 0;
  clear_has_create_tm();
}
inline ::google::protobuf::int32 pub_create_3dchat_room_ack::create_tm() const {
  return create_tm_;
}
inline void pub_create_3dchat_room_ack::set_create_tm(::google::protobuf::int32 value) {
  set_has_create_tm();
  create_tm_ = value;
}

// optional int32 room_conf_id = 5;
inline bool pub_create_3dchat_room_ack::has_room_conf_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_create_3dchat_room_ack::set_has_room_conf_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_create_3dchat_room_ack::clear_has_room_conf_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_create_3dchat_room_ack::clear_room_conf_id() {
  room_conf_id_ = 0;
  clear_has_room_conf_id();
}
inline ::google::protobuf::int32 pub_create_3dchat_room_ack::room_conf_id() const {
  return room_conf_id_;
}
inline void pub_create_3dchat_room_ack::set_room_conf_id(::google::protobuf::int32 value) {
  set_has_room_conf_id();
  room_conf_id_ = value;
}

// optional string room_name = 6;
inline bool pub_create_3dchat_room_ack::has_room_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pub_create_3dchat_room_ack::set_has_room_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pub_create_3dchat_room_ack::clear_has_room_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pub_create_3dchat_room_ack::clear_room_name() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    room_name_->clear();
  }
  clear_has_room_name();
}
inline const ::std::string& pub_create_3dchat_room_ack::room_name() const {
  return *room_name_;
}
inline void pub_create_3dchat_room_ack::set_room_name(const ::std::string& value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void pub_create_3dchat_room_ack::set_room_name(const char* value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void pub_create_3dchat_room_ack::set_room_name(const char* value, size_t size) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_create_3dchat_room_ack::mutable_room_name() {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}
inline ::std::string* pub_create_3dchat_room_ack::release_room_name() {
  clear_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = room_name_;
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_create_3dchat_room_ack::set_allocated_room_name(::std::string* room_name) {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (room_name) {
    set_has_room_name();
    room_name_ = room_name;
  } else {
    clear_has_room_name();
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string token = 7;
inline bool pub_create_3dchat_room_ack::has_token() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pub_create_3dchat_room_ack::set_has_token() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pub_create_3dchat_room_ack::clear_has_token() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pub_create_3dchat_room_ack::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& pub_create_3dchat_room_ack::token() const {
  return *token_;
}
inline void pub_create_3dchat_room_ack::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void pub_create_3dchat_room_ack::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void pub_create_3dchat_room_ack::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_create_3dchat_room_ack::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* pub_create_3dchat_room_ack::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_create_3dchat_room_ack::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// pub_top_3dchat_room_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_top_3dchat_room_req_id];
inline bool pub_top_3dchat_room_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_top_3dchat_room_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_top_3dchat_room_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_top_3dchat_room_req::clear_proto_id() {
  proto_id_ = 1717;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_top_3dchat_room_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_top_3dchat_room_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 room_id = 2;
inline bool pub_top_3dchat_room_req::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_top_3dchat_room_req::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_top_3dchat_room_req::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_top_3dchat_room_req::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 pub_top_3dchat_room_req::room_id() const {
  return room_id_;
}
inline void pub_top_3dchat_room_req::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional int32 top_tm = 3;
inline bool pub_top_3dchat_room_req::has_top_tm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_top_3dchat_room_req::set_has_top_tm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_top_3dchat_room_req::clear_has_top_tm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_top_3dchat_room_req::clear_top_tm() {
  top_tm_ = 0;
  clear_has_top_tm();
}
inline ::google::protobuf::int32 pub_top_3dchat_room_req::top_tm() const {
  return top_tm_;
}
inline void pub_top_3dchat_room_req::set_top_tm(::google::protobuf::int32 value) {
  set_has_top_tm();
  top_tm_ = value;
}

// optional int32 dur = 4;
inline bool pub_top_3dchat_room_req::has_dur() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_top_3dchat_room_req::set_has_dur() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_top_3dchat_room_req::clear_has_dur() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_top_3dchat_room_req::clear_dur() {
  dur_ = 0;
  clear_has_dur();
}
inline ::google::protobuf::int32 pub_top_3dchat_room_req::dur() const {
  return dur_;
}
inline void pub_top_3dchat_room_req::set_dur(::google::protobuf::int32 value) {
  set_has_dur();
  dur_ = value;
}

// -------------------------------------------------------------------

// pub_top_3dchat_room_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_top_3dchat_room_ack_id];
inline bool pub_top_3dchat_room_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_top_3dchat_room_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_top_3dchat_room_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_top_3dchat_room_ack::clear_proto_id() {
  proto_id_ = 1718;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_top_3dchat_room_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_top_3dchat_room_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 ret = 2;
inline bool pub_top_3dchat_room_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_top_3dchat_room_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_top_3dchat_room_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_top_3dchat_room_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 pub_top_3dchat_room_ack::ret() const {
  return ret_;
}
inline void pub_top_3dchat_room_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 room_id = 3;
inline bool pub_top_3dchat_room_ack::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_top_3dchat_room_ack::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_top_3dchat_room_ack::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_top_3dchat_room_ack::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 pub_top_3dchat_room_ack::room_id() const {
  return room_id_;
}
inline void pub_top_3dchat_room_ack::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional int32 top_tm = 4;
inline bool pub_top_3dchat_room_ack::has_top_tm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_top_3dchat_room_ack::set_has_top_tm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_top_3dchat_room_ack::clear_has_top_tm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_top_3dchat_room_ack::clear_top_tm() {
  top_tm_ = 0;
  clear_has_top_tm();
}
inline ::google::protobuf::int32 pub_top_3dchat_room_ack::top_tm() const {
  return top_tm_;
}
inline void pub_top_3dchat_room_ack::set_top_tm(::google::protobuf::int32 value) {
  set_has_top_tm();
  top_tm_ = value;
}

// optional int32 dur = 5;
inline bool pub_top_3dchat_room_ack::has_dur() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_top_3dchat_room_ack::set_has_dur() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_top_3dchat_room_ack::clear_has_dur() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_top_3dchat_room_ack::clear_dur() {
  dur_ = 0;
  clear_has_dur();
}
inline ::google::protobuf::int32 pub_top_3dchat_room_ack::dur() const {
  return dur_;
}
inline void pub_top_3dchat_room_ack::set_dur(::google::protobuf::int32 value) {
  set_has_dur();
  dur_ = value;
}

// -------------------------------------------------------------------

// pub_cancel_top_3dchat_room_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_cancel_top_3dchat_room_req_id];
inline bool pub_cancel_top_3dchat_room_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_cancel_top_3dchat_room_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_cancel_top_3dchat_room_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_cancel_top_3dchat_room_req::clear_proto_id() {
  proto_id_ = 1719;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_cancel_top_3dchat_room_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_cancel_top_3dchat_room_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 room_id = 2;
inline bool pub_cancel_top_3dchat_room_req::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_cancel_top_3dchat_room_req::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_cancel_top_3dchat_room_req::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_cancel_top_3dchat_room_req::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 pub_cancel_top_3dchat_room_req::room_id() const {
  return room_id_;
}
inline void pub_cancel_top_3dchat_room_req::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// pub_cancel_top_3dchat_room_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_cancel_top_3dchat_room_ack_id];
inline bool pub_cancel_top_3dchat_room_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_cancel_top_3dchat_room_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_cancel_top_3dchat_room_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_cancel_top_3dchat_room_ack::clear_proto_id() {
  proto_id_ = 1720;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_cancel_top_3dchat_room_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_cancel_top_3dchat_room_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 room_id = 2;
inline bool pub_cancel_top_3dchat_room_ack::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_cancel_top_3dchat_room_ack::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_cancel_top_3dchat_room_ack::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_cancel_top_3dchat_room_ack::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 pub_cancel_top_3dchat_room_ack::room_id() const {
  return room_id_;
}
inline void pub_cancel_top_3dchat_room_ack::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// pub_change_name_3dchat_room_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_change_name_3dchat_room_req_id];
inline bool pub_change_name_3dchat_room_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_change_name_3dchat_room_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_change_name_3dchat_room_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_change_name_3dchat_room_req::clear_proto_id() {
  proto_id_ = 1722;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_change_name_3dchat_room_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_change_name_3dchat_room_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 room_id = 2;
inline bool pub_change_name_3dchat_room_req::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_change_name_3dchat_room_req::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_change_name_3dchat_room_req::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_change_name_3dchat_room_req::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 pub_change_name_3dchat_room_req::room_id() const {
  return room_id_;
}
inline void pub_change_name_3dchat_room_req::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional string room_name = 3;
inline bool pub_change_name_3dchat_room_req::has_room_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_change_name_3dchat_room_req::set_has_room_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_change_name_3dchat_room_req::clear_has_room_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_change_name_3dchat_room_req::clear_room_name() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    room_name_->clear();
  }
  clear_has_room_name();
}
inline const ::std::string& pub_change_name_3dchat_room_req::room_name() const {
  return *room_name_;
}
inline void pub_change_name_3dchat_room_req::set_room_name(const ::std::string& value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void pub_change_name_3dchat_room_req::set_room_name(const char* value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void pub_change_name_3dchat_room_req::set_room_name(const char* value, size_t size) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_change_name_3dchat_room_req::mutable_room_name() {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}
inline ::std::string* pub_change_name_3dchat_room_req::release_room_name() {
  clear_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = room_name_;
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_change_name_3dchat_room_req::set_allocated_room_name(::std::string* room_name) {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (room_name) {
    set_has_room_name();
    room_name_ = room_name;
  } else {
    clear_has_room_name();
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// pub_change_name_3dchat_room_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_change_name_3dchat_room_ack_id];
inline bool pub_change_name_3dchat_room_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_change_name_3dchat_room_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_change_name_3dchat_room_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_change_name_3dchat_room_ack::clear_proto_id() {
  proto_id_ = 1723;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_change_name_3dchat_room_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_change_name_3dchat_room_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 ret = 2;
inline bool pub_change_name_3dchat_room_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_change_name_3dchat_room_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_change_name_3dchat_room_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_change_name_3dchat_room_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 pub_change_name_3dchat_room_ack::ret() const {
  return ret_;
}
inline void pub_change_name_3dchat_room_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 room_id = 3;
inline bool pub_change_name_3dchat_room_ack::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_change_name_3dchat_room_ack::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_change_name_3dchat_room_ack::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_change_name_3dchat_room_ack::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 pub_change_name_3dchat_room_ack::room_id() const {
  return room_id_;
}
inline void pub_change_name_3dchat_room_ack::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional string room_name = 4;
inline bool pub_change_name_3dchat_room_ack::has_room_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_change_name_3dchat_room_ack::set_has_room_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_change_name_3dchat_room_ack::clear_has_room_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_change_name_3dchat_room_ack::clear_room_name() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    room_name_->clear();
  }
  clear_has_room_name();
}
inline const ::std::string& pub_change_name_3dchat_room_ack::room_name() const {
  return *room_name_;
}
inline void pub_change_name_3dchat_room_ack::set_room_name(const ::std::string& value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void pub_change_name_3dchat_room_ack::set_room_name(const char* value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void pub_change_name_3dchat_room_ack::set_room_name(const char* value, size_t size) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pub_change_name_3dchat_room_ack::mutable_room_name() {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}
inline ::std::string* pub_change_name_3dchat_room_ack::release_room_name() {
  clear_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = room_name_;
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pub_change_name_3dchat_room_ack::set_allocated_room_name(::std::string* room_name) {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (room_name) {
    set_has_room_name();
    room_name_ = room_name;
  } else {
    clear_has_room_name();
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// pub_get_role_gs_id_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_gs_id_req_id];
inline bool pub_get_role_gs_id_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_get_role_gs_id_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_get_role_gs_id_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_get_role_gs_id_req::clear_proto_id() {
  proto_id_ = 1706;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_get_role_gs_id_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_get_role_gs_id_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 sour_role_id = 2;
inline bool pub_get_role_gs_id_req::has_sour_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_get_role_gs_id_req::set_has_sour_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_get_role_gs_id_req::clear_has_sour_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_get_role_gs_id_req::clear_sour_role_id() {
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sour_role_id();
}
inline ::google::protobuf::uint64 pub_get_role_gs_id_req::sour_role_id() const {
  return sour_role_id_;
}
inline void pub_get_role_gs_id_req::set_sour_role_id(::google::protobuf::uint64 value) {
  set_has_sour_role_id();
  sour_role_id_ = value;
}

// optional uint64 dest_role_id = 3;
inline bool pub_get_role_gs_id_req::has_dest_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_get_role_gs_id_req::set_has_dest_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_get_role_gs_id_req::clear_has_dest_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_get_role_gs_id_req::clear_dest_role_id() {
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dest_role_id();
}
inline ::google::protobuf::uint64 pub_get_role_gs_id_req::dest_role_id() const {
  return dest_role_id_;
}
inline void pub_get_role_gs_id_req::set_dest_role_id(::google::protobuf::uint64 value) {
  set_has_dest_role_id();
  dest_role_id_ = value;
}

// -------------------------------------------------------------------

// pub_get_role_gs_id_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_gs_id_ack_id];
inline bool pub_get_role_gs_id_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_get_role_gs_id_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_get_role_gs_id_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_get_role_gs_id_ack::clear_proto_id() {
  proto_id_ = 1707;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_get_role_gs_id_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_get_role_gs_id_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 ret = 2;
inline bool pub_get_role_gs_id_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_get_role_gs_id_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_get_role_gs_id_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_get_role_gs_id_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 pub_get_role_gs_id_ack::ret() const {
  return ret_;
}
inline void pub_get_role_gs_id_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 sour_role_id = 3;
inline bool pub_get_role_gs_id_ack::has_sour_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_get_role_gs_id_ack::set_has_sour_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_get_role_gs_id_ack::clear_has_sour_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_get_role_gs_id_ack::clear_sour_role_id() {
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sour_role_id();
}
inline ::google::protobuf::uint64 pub_get_role_gs_id_ack::sour_role_id() const {
  return sour_role_id_;
}
inline void pub_get_role_gs_id_ack::set_sour_role_id(::google::protobuf::uint64 value) {
  set_has_sour_role_id();
  sour_role_id_ = value;
}

// optional uint64 dest_role_id = 4;
inline bool pub_get_role_gs_id_ack::has_dest_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_get_role_gs_id_ack::set_has_dest_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_get_role_gs_id_ack::clear_has_dest_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_get_role_gs_id_ack::clear_dest_role_id() {
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dest_role_id();
}
inline ::google::protobuf::uint64 pub_get_role_gs_id_ack::dest_role_id() const {
  return dest_role_id_;
}
inline void pub_get_role_gs_id_ack::set_dest_role_id(::google::protobuf::uint64 value) {
  set_has_dest_role_id();
  dest_role_id_ = value;
}

// optional uint64 dest_gs_id = 5;
inline bool pub_get_role_gs_id_ack::has_dest_gs_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pub_get_role_gs_id_ack::set_has_dest_gs_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pub_get_role_gs_id_ack::clear_has_dest_gs_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pub_get_role_gs_id_ack::clear_dest_gs_id() {
  dest_gs_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dest_gs_id();
}
inline ::google::protobuf::uint64 pub_get_role_gs_id_ack::dest_gs_id() const {
  return dest_gs_id_;
}
inline void pub_get_role_gs_id_ack::set_dest_gs_id(::google::protobuf::uint64 value) {
  set_has_dest_gs_id();
  dest_gs_id_ = value;
}

// -------------------------------------------------------------------

// pub_get_offical_members_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_members_req_id];
inline bool pub_get_offical_members_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_get_offical_members_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_get_offical_members_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_get_offical_members_req::clear_proto_id() {
  proto_id_ = 1548;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_get_offical_members_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_get_offical_members_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 grade = 2;
inline bool pub_get_offical_members_req::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_get_offical_members_req::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_get_offical_members_req::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_get_offical_members_req::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 pub_get_offical_members_req::grade() const {
  return grade_;
}
inline void pub_get_offical_members_req::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// optional int32 start_index = 3;
inline bool pub_get_offical_members_req::has_start_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_get_offical_members_req::set_has_start_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_get_offical_members_req::clear_has_start_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_get_offical_members_req::clear_start_index() {
  start_index_ = 0;
  clear_has_start_index();
}
inline ::google::protobuf::int32 pub_get_offical_members_req::start_index() const {
  return start_index_;
}
inline void pub_get_offical_members_req::set_start_index(::google::protobuf::int32 value) {
  set_has_start_index();
  start_index_ = value;
}

// optional int32 end_index = 4;
inline bool pub_get_offical_members_req::has_end_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_get_offical_members_req::set_has_end_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_get_offical_members_req::clear_has_end_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_get_offical_members_req::clear_end_index() {
  end_index_ = 0;
  clear_has_end_index();
}
inline ::google::protobuf::int32 pub_get_offical_members_req::end_index() const {
  return end_index_;
}
inline void pub_get_offical_members_req::set_end_index(::google::protobuf::int32 value) {
  set_has_end_index();
  end_index_ = value;
}

// -------------------------------------------------------------------

// pub_get_offical_members_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_members_ack_id];
inline bool pub_get_offical_members_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_get_offical_members_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_get_offical_members_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_get_offical_members_ack::clear_proto_id() {
  proto_id_ = 1549;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_get_offical_members_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_get_offical_members_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 ret = 2;
inline bool pub_get_offical_members_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_get_offical_members_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_get_offical_members_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_get_offical_members_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 pub_get_offical_members_ack::ret() const {
  return ret_;
}
inline void pub_get_offical_members_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 grade = 3;
inline bool pub_get_offical_members_ack::has_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_get_offical_members_ack::set_has_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_get_offical_members_ack::clear_has_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_get_offical_members_ack::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 pub_get_offical_members_ack::grade() const {
  return grade_;
}
inline void pub_get_offical_members_ack::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// repeated .SProtoSpace.offical_member_data members = 4;
inline int pub_get_offical_members_ack::members_size() const {
  return members_.size();
}
inline void pub_get_offical_members_ack::clear_members() {
  members_.Clear();
}
inline const ::SProtoSpace::offical_member_data& pub_get_offical_members_ack::members(int index) const {
  return members_.Get(index);
}
inline ::SProtoSpace::offical_member_data* pub_get_offical_members_ack::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::SProtoSpace::offical_member_data* pub_get_offical_members_ack::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data >&
pub_get_offical_members_ack::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data >*
pub_get_offical_members_ack::mutable_members() {
  return &members_;
}

// -------------------------------------------------------------------

// pub_gm_start_match_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_start_match_req_id];
inline bool pub_gm_start_match_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_gm_start_match_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_gm_start_match_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_gm_start_match_req::clear_proto_id() {
  proto_id_ = 1550;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_gm_start_match_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_gm_start_match_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 grade = 2;
inline bool pub_gm_start_match_req::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_gm_start_match_req::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_gm_start_match_req::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_gm_start_match_req::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 pub_gm_start_match_req::grade() const {
  return grade_;
}
inline void pub_gm_start_match_req::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// optional int32 start_time = 3;
inline bool pub_gm_start_match_req::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_gm_start_match_req::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_gm_start_match_req::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_gm_start_match_req::clear_start_time() {
  start_time_ = 0;
  clear_has_start_time();
}
inline ::google::protobuf::int32 pub_gm_start_match_req::start_time() const {
  return start_time_;
}
inline void pub_gm_start_match_req::set_start_time(::google::protobuf::int32 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional int32 end_time = 4;
inline bool pub_gm_start_match_req::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_gm_start_match_req::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_gm_start_match_req::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_gm_start_match_req::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
inline ::google::protobuf::int32 pub_gm_start_match_req::end_time() const {
  return end_time_;
}
inline void pub_gm_start_match_req::set_end_time(::google::protobuf::int32 value) {
  set_has_end_time();
  end_time_ = value;
}

// -------------------------------------------------------------------

// pub_gm_start_match_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_start_match_ack_id];
inline bool pub_gm_start_match_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_gm_start_match_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_gm_start_match_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_gm_start_match_ack::clear_proto_id() {
  proto_id_ = 1551;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_gm_start_match_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_gm_start_match_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 ret = 2;
inline bool pub_gm_start_match_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_gm_start_match_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_gm_start_match_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_gm_start_match_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 pub_gm_start_match_ack::ret() const {
  return ret_;
}
inline void pub_gm_start_match_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 grade = 3;
inline bool pub_gm_start_match_ack::has_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_gm_start_match_ack::set_has_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_gm_start_match_ack::clear_has_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_gm_start_match_ack::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 pub_gm_start_match_ack::grade() const {
  return grade_;
}
inline void pub_gm_start_match_ack::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// -------------------------------------------------------------------

// pub_gm_send_office_mail_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_send_office_mail_req_id];
inline bool pub_gm_send_office_mail_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_gm_send_office_mail_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_gm_send_office_mail_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_gm_send_office_mail_req::clear_proto_id() {
  proto_id_ = 1554;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_gm_send_office_mail_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_gm_send_office_mail_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 mail_id = 2;
inline bool pub_gm_send_office_mail_req::has_mail_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_gm_send_office_mail_req::set_has_mail_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_gm_send_office_mail_req::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_gm_send_office_mail_req::clear_mail_id() {
  mail_id_ = 0;
  clear_has_mail_id();
}
inline ::google::protobuf::int32 pub_gm_send_office_mail_req::mail_id() const {
  return mail_id_;
}
inline void pub_gm_send_office_mail_req::set_mail_id(::google::protobuf::int32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// optional int32 grade = 3;
inline bool pub_gm_send_office_mail_req::has_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_gm_send_office_mail_req::set_has_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_gm_send_office_mail_req::clear_has_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_gm_send_office_mail_req::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 pub_gm_send_office_mail_req::grade() const {
  return grade_;
}
inline void pub_gm_send_office_mail_req::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// -------------------------------------------------------------------

// pub_get_offical_data_req

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_data_req_id];
inline bool pub_get_offical_data_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_get_offical_data_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_get_offical_data_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_get_offical_data_req::clear_proto_id() {
  proto_id_ = 1555;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_get_offical_data_req::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_get_offical_data_req::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 grade = 2;
inline bool pub_get_offical_data_req::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_get_offical_data_req::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_get_offical_data_req::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_get_offical_data_req::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 pub_get_offical_data_req::grade() const {
  return grade_;
}
inline void pub_get_offical_data_req::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// -------------------------------------------------------------------

// pub_get_offical_data_ack

// optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_data_ack_id];
inline bool pub_get_offical_data_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pub_get_offical_data_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pub_get_offical_data_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pub_get_offical_data_ack::clear_proto_id() {
  proto_id_ = 1556;
  clear_has_proto_id();
}
inline ::SProtoSpace::ESSProtoID pub_get_offical_data_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ESSProtoID >(proto_id_);
}
inline void pub_get_offical_data_ack::set_proto_id(::SProtoSpace::ESSProtoID value) {
  assert(::SProtoSpace::ESSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 ret = 2;
inline bool pub_get_offical_data_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pub_get_offical_data_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pub_get_offical_data_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pub_get_offical_data_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 pub_get_offical_data_ack::ret() const {
  return ret_;
}
inline void pub_get_offical_data_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 grade = 3;
inline bool pub_get_offical_data_ack::has_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pub_get_offical_data_ack::set_has_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pub_get_offical_data_ack::clear_has_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pub_get_offical_data_ack::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 pub_get_offical_data_ack::grade() const {
  return grade_;
}
inline void pub_get_offical_data_ack::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// optional int32 ranking_id = 4;
inline bool pub_get_offical_data_ack::has_ranking_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pub_get_offical_data_ack::set_has_ranking_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pub_get_offical_data_ack::clear_has_ranking_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pub_get_offical_data_ack::clear_ranking_id() {
  ranking_id_ = 0;
  clear_has_ranking_id();
}
inline ::google::protobuf::int32 pub_get_offical_data_ack::ranking_id() const {
  return ranking_id_;
}
inline void pub_get_offical_data_ack::set_ranking_id(::google::protobuf::int32 value) {
  set_has_ranking_id();
  ranking_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EGetRoleDoType>() {
  return ::SProtoSpace::EGetRoleDoType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ss_5fpublic_2eproto__INCLUDED
